
KEYPAD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfec  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800c1b0  0800c1b0  0000d1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d0  0800c5d0  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5d0  0800c5d0  0000d5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d8  0800c5d8  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d8  0800c5d8  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5dc  0800c5dc  0000d5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c5e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  200001d4  0800c7b4  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800c7b4  0000ea2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c492  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c3  00000000  00000000  0002a696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0002da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001491  00000000  00000000  0002f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f1db  00000000  00000000  00030939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef9a  00000000  00000000  0005fb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001270bb  00000000  00000000  0007eaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a5b69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008248  00000000  00000000  001a5bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001addf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c194 	.word	0x0800c194

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800c194 	.word	0x0800c194

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <RowChecker.0>:
  //	  int row2;
  //	  int row3;
  //	  int row4;
  //  };

  int RowChecker() {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	f8c7 c004 	str.w	ip, [r7, #4]
    //	  	row_return.row1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) ==
    // GPIO_PIN_RESET; 	  	row_return.row2 =  HAL_GPIO_ReadPin(GPIOA,
    // GPIO_PIN_6) == GPIO_PIN_RESET; 	  	row_return.row3 =
    // HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET;
    // row_return.row4 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET;
    int val = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000edc:	f003 fc7a 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <RowChecker.0+0x22>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	e000      	b.n	8000eec <RowChecker.0+0x24>
 8000eea:	2301      	movs	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8000eee:	2140      	movs	r1, #64	@ 0x40
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f003 fc6e 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <RowChecker.0+0x3a>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	e000      	b.n	8000f04 <RowChecker.0+0x3c>
 8000f02:	2302      	movs	r3, #2
 8000f04:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 8000f06:	2180      	movs	r1, #128	@ 0x80
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f003 fc62 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <RowChecker.0+0x52>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	e000      	b.n	8000f1c <RowChecker.0+0x54>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 8000f1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <RowChecker.0+0x78>)
 8000f24:	f003 fc56 	bl	80047d4 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <RowChecker.0+0x6a>
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	e000      	b.n	8000f34 <RowChecker.0+0x6c>
 8000f32:	2304      	movs	r3, #4
 8000f34:	60fb      	str	r3, [r7, #12]
    //	  	return row_return;
    return val;
 8000f36:	68fb      	ldr	r3, [r7, #12]
  }
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	48000c00 	.word	0x48000c00

08000f44 <main>:
int main(void) {
 8000f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f48:	b08b      	sub	sp, #44	@ 0x2c
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_Init();
 8000f52:	f001 ffb6 	bl	8002ec2 <HAL_Init>
  SystemClock_Config();
 8000f56:	f000 f947 	bl	80011e8 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000f5a:	f000 f9a7 	bl	80012ac <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000f5e:	f000 ffd3 	bl	8001f08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f62:	f000 f9d7 	bl	8001314 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f66:	f000 fa39 	bl	80013dc <MX_CAN1_Init>
  MX_COMP1_Init();
 8000f6a:	f000 fa6b 	bl	8001444 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000f6e:	f000 fa97 	bl	80014a0 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000f72:	f000 fac1 	bl	80014f8 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8000f76:	f000 faf9 	bl	800156c <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8000f7a:	f000 fb39 	bl	80015f0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000f7e:	f000 fb83 	bl	8001688 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f82:	f000 fbcf 	bl	8001724 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000f86:	f000 fc19 	bl	80017bc <MX_SAI1_Init>
  MX_SAI2_Init();
 8000f8a:	f000 fcaf 	bl	80018ec <MX_SAI2_Init>
  MX_SPI3_Init();
 8000f8e:	f000 fd15 	bl	80019bc <MX_SPI3_Init>
  MX_TIM1_Init();
 8000f92:	f000 fd51 	bl	8001a38 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f96:	f000 fe07 	bl	8001ba8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f9a:	f000 fe69 	bl	8001c70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f9e:	f000 fecd 	bl	8001d3c <MX_TIM4_Init>
  MX_TIM15_Init();
 8000fa2:	f000 ff25 	bl	8001df0 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fa6:	f000 ffa7 	bl	8001ef8 <MX_USB_OTG_FS_USB_Init>

  //  struct ROW_RETURN Col1_Return;
  //  struct ROW_RETURN Col2_Return;
  //  struct ROW_RETURN Col3_Return;
  //  struct ROW_RETURN Col4_Return;
  int val = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb4:	4854      	ldr	r0, [pc, #336]	@ (8001108 <main+0x1c4>)
 8000fb6:	f003 fc25 	bl	8004804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	4852      	ldr	r0, [pc, #328]	@ (800110c <main+0x1c8>)
 8000fc2:	f003 fc1f 	bl	8004804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fcc:	484e      	ldr	r0, [pc, #312]	@ (8001108 <main+0x1c4>)
 8000fce:	f003 fc19 	bl	8004804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd8:	484c      	ldr	r0, [pc, #304]	@ (800110c <main+0x1c8>)
 8000fda:	f003 fc13 	bl	8004804 <HAL_GPIO_WritePin>
  uint8_t ASCII_Keypad_Lookup[4][4] = {{0x31, 0x32, 0x33, 0x41},
 8000fde:	4b4c      	ldr	r3, [pc, #304]	@ (8001110 <main+0x1cc>)
 8000fe0:	f107 060a 	add.w	r6, r7, #10
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fea:	6030      	str	r0, [r6, #0]
 8000fec:	6071      	str	r1, [r6, #4]
 8000fee:	60b2      	str	r2, [r6, #8]
 8000ff0:	60f3      	str	r3, [r6, #12]
                                       {0x34, 0x35, 0x36, 0x42},
                                       {0x37, 0x38, 0x39, 0x43},
                                       {0x2A, 0x30, 0x23, 0x44}};
  const uint8_t max_digits = 5;
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	723b      	strb	r3, [r7, #8]
  uint8_t ASCII_Weight[max_digits];
 8000ff6:	7a3b      	ldrb	r3, [r7, #8]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	7a3b      	ldrb	r3, [r7, #8]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2200      	movs	r2, #0
 8001002:	4698      	mov	r8, r3
 8001004:	4691      	mov	r9, r2
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800101a:	7a3b      	ldrb	r3, [r7, #8]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2200      	movs	r2, #0
 8001020:	461c      	mov	r4, r3
 8001022:	4615      	mov	r5, r2
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	00eb      	lsls	r3, r5, #3
 800102e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001032:	00e2      	lsls	r2, r4, #3
 8001034:	7a3b      	ldrb	r3, [r7, #8]
 8001036:	3307      	adds	r3, #7
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	ebad 0d03 	sub.w	sp, sp, r3
 8001040:	466b      	mov	r3, sp
 8001042:	3300      	adds	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
  uint8_t weightCounter = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	727b      	strb	r3, [r7, #9]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001050:	482e      	ldr	r0, [pc, #184]	@ (800110c <main+0x1c8>)
 8001052:	f003 fbd7 	bl	8004804 <HAL_GPIO_WritePin>
    val = RowChecker();
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	469c      	mov	ip, r3
 800105a:	f7ff ff35 	bl	8000ec8 <RowChecker.0>
 800105e:	6278      	str	r0, [r7, #36]	@ 0x24
    KeyPadReturn(val, 4);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	469c      	mov	ip, r3
 8001064:	2104      	movs	r1, #4
 8001066:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001068:	f000 f854 	bl	8001114 <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001072:	4826      	ldr	r0, [pc, #152]	@ (800110c <main+0x1c8>)
 8001074:	f003 fbc6 	bl	8004804 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107e:	4822      	ldr	r0, [pc, #136]	@ (8001108 <main+0x1c4>)
 8001080:	f003 fbc0 	bl	8004804 <HAL_GPIO_WritePin>
    val = RowChecker();
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	469c      	mov	ip, r3
 8001088:	f7ff ff1e 	bl	8000ec8 <RowChecker.0>
 800108c:	6278      	str	r0, [r7, #36]	@ 0x24
    KeyPadReturn(val, 3);
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	469c      	mov	ip, r3
 8001092:	2103      	movs	r1, #3
 8001094:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001096:	f000 f83d 	bl	8001114 <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a0:	4819      	ldr	r0, [pc, #100]	@ (8001108 <main+0x1c4>)
 80010a2:	f003 fbaf 	bl	8004804 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ac:	4816      	ldr	r0, [pc, #88]	@ (8001108 <main+0x1c4>)
 80010ae:	f003 fba9 	bl	8004804 <HAL_GPIO_WritePin>
    val = RowChecker();
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	469c      	mov	ip, r3
 80010b6:	f7ff ff07 	bl	8000ec8 <RowChecker.0>
 80010ba:	6278      	str	r0, [r7, #36]	@ 0x24
    KeyPadReturn(val, 2);
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	469c      	mov	ip, r3
 80010c0:	2102      	movs	r1, #2
 80010c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010c4:	f000 f826 	bl	8001114 <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ce:	480e      	ldr	r0, [pc, #56]	@ (8001108 <main+0x1c4>)
 80010d0:	f003 fb98 	bl	8004804 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <main+0x1c8>)
 80010dc:	f003 fb92 	bl	8004804 <HAL_GPIO_WritePin>
    val = RowChecker();
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	469c      	mov	ip, r3
 80010e4:	f7ff fef0 	bl	8000ec8 <RowChecker.0>
 80010e8:	6278      	str	r0, [r7, #36]	@ 0x24
    KeyPadReturn(val, 1);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	469c      	mov	ip, r3
 80010ee:	2101      	movs	r1, #1
 80010f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010f2:	f000 f80f 	bl	8001114 <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <main+0x1c8>)
 80010fe:	f003 fb81 	bl	8004804 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001102:	bf00      	nop
 8001104:	e7a1      	b.n	800104a <main+0x106>
 8001106:	bf00      	nop
 8001108:	48001000 	.word	0x48001000
 800110c:	48001400 	.word	0x48001400
 8001110:	0800c1b0 	.word	0x0800c1b0

08001114 <KeyPadReturn.1>:
  void KeyPadReturn(int row, int col) {
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4664      	mov	r4, ip
 8001120:	f8c7 c004 	str.w	ip, [r7, #4]
    if (row == 0) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d052      	beq.n	80011d0 <KeyPadReturn.1+0xbc>
    HAL_Delay(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f001 ff3e 	bl	8002fac <HAL_Delay>
    while (row == RowChecker()) {
 8001130:	bf00      	nop
 8001132:	46a4      	mov	ip, r4
 8001134:	f7ff fec8 	bl	8000ec8 <RowChecker.0>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4293      	cmp	r3, r2
 800113e:	d0f8      	beq.n	8001132 <KeyPadReturn.1+0x1e>
    HAL_Delay(10);
 8001140:	200a      	movs	r0, #10
 8001142:	f001 ff33 	bl	8002fac <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	4422      	add	r2, r4
 8001152:	4413      	add	r3, r2
 8001154:	3306      	adds	r3, #6
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	75bb      	strb	r3, [r7, #22]
    if (ASCII_Value == 0x23) {
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	2b23      	cmp	r3, #35	@ 0x23
 800115e:	d11c      	bne.n	800119a <KeyPadReturn.1+0x86>
      if (weightCounter == 0) {
 8001160:	7963      	ldrb	r3, [r4, #5]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d036      	beq.n	80011d4 <KeyPadReturn.1+0xc0>
      printf("End ASCII value: ");
 8001166:	481d      	ldr	r0, [pc, #116]	@ (80011dc <KeyPadReturn.1+0xc8>)
 8001168:	f009 f860 	bl	800a22c <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	e009      	b.n	8001186 <KeyPadReturn.1+0x72>
        printf("%x ", ASCII_Weight[i]);
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	4619      	mov	r1, r3
 800117a:	4819      	ldr	r0, [pc, #100]	@ (80011e0 <KeyPadReturn.1+0xcc>)
 800117c:	f009 f856 	bl	800a22c <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	3301      	adds	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	7963      	ldrb	r3, [r4, #5]
 8001188:	7dfa      	ldrb	r2, [r7, #23]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3f1      	bcc.n	8001172 <KeyPadReturn.1+0x5e>
      printf("\n");
 800118e:	200a      	movs	r0, #10
 8001190:	f009 f85e 	bl	800a250 <putchar>
      weightCounter = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	7163      	strb	r3, [r4, #5]
      return;
 8001198:	e01d      	b.n	80011d6 <KeyPadReturn.1+0xc2>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 800119a:	7dbb      	ldrb	r3, [r7, #22]
 800119c:	2b2a      	cmp	r3, #42	@ 0x2a
 800119e:	d005      	beq.n	80011ac <KeyPadReturn.1+0x98>
 80011a0:	7963      	ldrb	r3, [r4, #5]
 80011a2:	461a      	mov	r2, r3
 80011a4:	7923      	ldrb	r3, [r4, #4]
 80011a6:	3b02      	subs	r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d102      	bne.n	80011b2 <KeyPadReturn.1+0x9e>
      weightCounter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	7163      	strb	r3, [r4, #5]
      return;
 80011b0:	e011      	b.n	80011d6 <KeyPadReturn.1+0xc2>
    printf("ASCII value: %x\n", ASCII_Value);
 80011b2:	7dbb      	ldrb	r3, [r7, #22]
 80011b4:	4619      	mov	r1, r3
 80011b6:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <KeyPadReturn.1+0xd0>)
 80011b8:	f009 f838 	bl	800a22c <iprintf>
    ASCII_Weight[weightCounter] = ASCII_Value;
 80011bc:	7963      	ldrb	r3, [r4, #5]
 80011be:	4619      	mov	r1, r3
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	7dba      	ldrb	r2, [r7, #22]
 80011c4:	545a      	strb	r2, [r3, r1]
    weightCounter++;
 80011c6:	7963      	ldrb	r3, [r4, #5]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	7163      	strb	r3, [r4, #5]
 80011ce:	e002      	b.n	80011d6 <KeyPadReturn.1+0xc2>
      return;
 80011d0:	bf00      	nop
 80011d2:	e000      	b.n	80011d6 <KeyPadReturn.1+0xc2>
        return;
 80011d4:	bf00      	nop
  }
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	0800c1c0 	.word	0x0800c1c0
 80011e0:	0800c1d4 	.word	0x0800c1d4
 80011e4:	0800c1d8 	.word	0x0800c1d8

080011e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b096      	sub	sp, #88	@ 0x58
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2244      	movs	r2, #68	@ 0x44
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f009 f875 	bl	800a2e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800120a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800120e:	f003 fb41 	bl	8004894 <HAL_PWREx_ControlVoltageScaling>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x34>
    Error_Handler();
 8001218:	f000 ff9a 	bl	8002150 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 800121c:	f003 fb0a 	bl	8004834 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001220:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <SystemClock_Config+0xc0>)
 8001222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001226:	4a20      	ldr	r2, [pc, #128]	@ (80012a8 <SystemClock_Config+0xc0>)
 8001228:	f023 0318 	bic.w	r3, r3, #24
 800122c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 8001230:	2314      	movs	r3, #20
 8001232:	617b      	str	r3, [r7, #20]
      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001240:	2360      	movs	r3, #96	@ 0x60
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001248:	2301      	movs	r3, #1
 800124a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001250:	2310      	movs	r3, #16
 8001252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fbc9 	bl	80049fc <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x8c>
    Error_Handler();
 8001270:	f000 ff6e 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001274:	230f      	movs	r3, #15
 8001276:	603b      	str	r3, [r7, #0]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2303      	movs	r3, #3
 800127a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001288:	463b      	mov	r3, r7
 800128a:	2101      	movs	r1, #1
 800128c:	4618      	mov	r0, r3
 800128e:	f003 ffcf 	bl	8005230 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xb4>
    Error_Handler();
 8001298:	f000 ff5a 	bl	8002150 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 800129c:	f005 fcd8 	bl	8006c50 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012a0:	bf00      	nop
 80012a2:	3758      	adds	r7, #88	@ 0x58
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000

080012ac <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0a6      	sub	sp, #152	@ 0x98
 80012b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2294      	movs	r2, #148	@ 0x94
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 f814 	bl	800a2e6 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_SAI2 |
 80012be:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80012c2:	607b      	str	r3, [r7, #4]
                                       RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012da:	2301      	movs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012e2:	2318      	movs	r3, #24
 80012e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut =
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <PeriphCommonClock_Config+0x64>)
 80012f4:	623b      	str	r3, [r7, #32]
      RCC_PLLSAI1_SAI1CLK | RCC_PLLSAI1_48M2CLK | RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fa57 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <PeriphCommonClock_Config+0x5c>
    Error_Handler();
 8001304:	f000 ff24 	bl	8002150 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3798      	adds	r7, #152	@ 0x98
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	01110000 	.word	0x01110000

08001314 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 800132a:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 800132c:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <MX_ADC1_Init+0xc0>)
 800132e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001330:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001336:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 800134a:	2204      	movs	r2, #4
 800134c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 800135c:	2201      	movs	r2, #1
 800135e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 800137e:	2200      	movs	r2, #0
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800138a:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 800138c:	f001 ffd2 	bl	8003334 <HAL_ADC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x86>
    Error_Handler();
 8001396:	f000 fedb 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_ADC1_Init+0xc4>)
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139e:	2306      	movs	r3, #6
 80013a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a6:	237f      	movs	r3, #127	@ 0x7f
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013aa:	2304      	movs	r3, #4
 80013ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <MX_ADC1_Init+0xbc>)
 80013b8:	f002 f902 	bl	80035c0 <HAL_ADC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC1_Init+0xb2>
    Error_Handler();
 80013c2:	f000 fec5 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001f0 	.word	0x200001f0
 80013d4:	50040000 	.word	0x50040000
 80013d8:	04300002 	.word	0x04300002

080013dc <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_CAN1_Init+0x60>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <MX_CAN1_Init+0x64>)
 80013e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_CAN1_Init+0x60>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <MX_CAN1_Init+0x60>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_CAN1_Init+0x60>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <MX_CAN1_Init+0x60>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_CAN1_Init+0x60>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <MX_CAN1_Init+0x60>)
 8001406:	2200      	movs	r2, #0
 8001408:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_CAN1_Init+0x60>)
 800140c:	2200      	movs	r2, #0
 800140e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_CAN1_Init+0x60>)
 8001412:	2200      	movs	r2, #0
 8001414:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_CAN1_Init+0x60>)
 8001418:	2200      	movs	r2, #0
 800141a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_CAN1_Init+0x60>)
 800141e:	2200      	movs	r2, #0
 8001420:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_CAN1_Init+0x60>)
 8001424:	2200      	movs	r2, #0
 8001426:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_CAN1_Init+0x60>)
 800142a:	f002 fcc5 	bl	8003db8 <HAL_CAN_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_CAN1_Init+0x5c>
    Error_Handler();
 8001434:	f000 fe8c 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000258 	.word	0x20000258
 8001440:	40006400 	.word	0x40006400

08001444 <MX_COMP1_Init>:
/**
 * @brief COMP1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP1_Init(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_COMP1_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <MX_COMP1_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_COMP1_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <MX_COMP1_Init+0x58>)
 8001452:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_COMP1_Init+0x50>)
 8001456:	2280      	movs	r2, #128	@ 0x80
 8001458:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_COMP1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_COMP1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_COMP1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_COMP1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_COMP1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_COMP1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_COMP1_Init+0x50>)
 8001480:	f002 fe3e 	bl	8004100 <HAL_COMP_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_COMP1_Init+0x4a>
    Error_Handler();
 800148a:	f000 fe61 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000280 	.word	0x20000280
 8001498:	40010200 	.word	0x40010200
 800149c:	00800030 	.word	0x00800030

080014a0 <MX_COMP2_Init>:
/**
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <MX_COMP2_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014ac:	2270      	movs	r2, #112	@ 0x70
 80014ae:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK) {
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_COMP2_Init+0x50>)
 80014dc:	f002 fe10 	bl	8004100 <HAL_COMP_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_COMP2_Init+0x4a>
    Error_Handler();
 80014e6:	f000 fe33 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200002ac 	.word	0x200002ac
 80014f4:	40010204 	.word	0x40010204

080014f8 <MX_I2C1_SMBUS_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_SMBUS_Init(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80014fc:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 80014fe:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <MX_I2C1_SMBUS_Init+0x6c>)
 8001500:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001504:	4a18      	ldr	r2, [pc, #96]	@ (8001568 <MX_I2C1_SMBUS_Init+0x70>)
 8001506:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001510:	2202      	movs	r2, #2
 8001512:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001516:	2201      	movs	r2, #1
 8001518:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 800153a:	2200      	movs	r2, #0
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 8001546:	f248 1286 	movw	r2, #33158	@ 0x8186
 800154a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK) {
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MX_I2C1_SMBUS_Init+0x68>)
 800154e:	f006 fa07 	bl	8007960 <HAL_SMBUS_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C1_SMBUS_Init+0x64>
    Error_Handler();
 8001558:	f000 fdfa 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200002d8 	.word	0x200002d8
 8001564:	40005400 	.word	0x40005400
 8001568:	00707cbb 	.word	0x00707cbb

0800156c <MX_I2C2_SMBUS_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_SMBUS_Init(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 8001572:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <MX_I2C2_SMBUS_Init+0x7c>)
 8001574:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <MX_I2C2_SMBUS_Init+0x80>)
 800157a:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 8001584:	2202      	movs	r2, #2
 8001586:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 800158a:	2201      	movs	r2, #1
 800158c:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 80015ba:	f248 1286 	movw	r2, #33158	@ 0x8186
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK) {
 80015c0:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 80015c2:	f006 f9cd 	bl	8007960 <HAL_SMBUS_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C2_SMBUS_Init+0x64>
    Error_Handler();
 80015cc:	f000 fdc0 	bl	8002150 <Error_Handler>
  }

  /** configuration Alert Mode
   */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK) {
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_I2C2_SMBUS_Init+0x78>)
 80015d2:	f006 fa7d 	bl	8007ad0 <HAL_SMBUS_EnableAlert_IT>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C2_SMBUS_Init+0x74>
    Error_Handler();
 80015dc:	f000 fdb8 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000328 	.word	0x20000328
 80015e8:	40005800 	.word	0x40005800
 80015ec:	00707cbb 	.word	0x00707cbb

080015f0 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <MX_LPUART1_UART_Init+0x94>)
 80015f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001638:	4811      	ldr	r0, [pc, #68]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 800163a:	f007 f9e7 	bl	8008a0c <HAL_UART_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_LPUART1_UART_Init+0x58>
    Error_Handler();
 8001644:	f000 fd84 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) !=
 8001648:	2100      	movs	r1, #0
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 800164c:	f008 f80a 	bl	8009664 <HAL_UARTEx_SetTxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_LPUART1_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 8001656:	f000 fd7b 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) !=
 800165a:	2100      	movs	r1, #0
 800165c:	4808      	ldr	r0, [pc, #32]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 800165e:	f008 f83f 	bl	80096e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_LPUART1_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8001668:	f000 fd72 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 800166c:	4804      	ldr	r0, [pc, #16]	@ (8001680 <MX_LPUART1_UART_Init+0x90>)
 800166e:	f007 ffc0 	bl	80095f2 <HAL_UARTEx_DisableFifoMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_LPUART1_UART_Init+0x8c>
    Error_Handler();
 8001678:	f000 fd6a 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000378 	.word	0x20000378
 8001684:	40008000 	.word	0x40008000

08001688 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <MX_USART2_UART_Init+0x94>)
 800168e:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <MX_USART2_UART_Init+0x98>)
 8001690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <MX_USART2_UART_Init+0x94>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <MX_USART2_UART_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016b4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016d2:	4812      	ldr	r0, [pc, #72]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016d4:	f007 f99a 	bl	8008a0c <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART2_UART_Init+0x5a>
    Error_Handler();
 80016de:	f000 fd37 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) !=
 80016e2:	2100      	movs	r1, #0
 80016e4:	480d      	ldr	r0, [pc, #52]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016e6:	f007 ffbd 	bl	8009664 <HAL_UARTEx_SetTxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART2_UART_Init+0x6c>
      HAL_OK) {
    Error_Handler();
 80016f0:	f000 fd2e 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) !=
 80016f4:	2100      	movs	r1, #0
 80016f6:	4809      	ldr	r0, [pc, #36]	@ (800171c <MX_USART2_UART_Init+0x94>)
 80016f8:	f007 fff2 	bl	80096e0 <HAL_UARTEx_SetRxFifoThreshold>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x7e>
      HAL_OK) {
    Error_Handler();
 8001702:	f000 fd25 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_USART2_UART_Init+0x94>)
 8001708:	f007 ff73 	bl	80095f2 <HAL_UARTEx_DisableFifoMode>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x8e>
    Error_Handler();
 8001712:	f000 fd1d 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000040c 	.word	0x2000040c
 8001720:	40004400 	.word	0x40004400

08001724 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 800172a:	4a23      	ldr	r2, [pc, #140]	@ (80017b8 <MX_USART3_UART_Init+0x94>)
 800172c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001742:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 800176c:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 800176e:	f007 f94d 	bl	8008a0c <HAL_UART_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_USART3_UART_Init+0x58>
    Error_Handler();
 8001778:	f000 fcea 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 800177c:	2100      	movs	r1, #0
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001780:	f007 ff70 	bl	8009664 <HAL_UARTEx_SetTxFifoThreshold>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 800178a:	f000 fce1 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 800178e:	2100      	movs	r1, #0
 8001790:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 8001792:	f007 ffa5 	bl	80096e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 800179c:	f000 fcd8 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 80017a0:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <MX_USART3_UART_Init+0x90>)
 80017a2:	f007 ff26 	bl	80095f2 <HAL_UARTEx_DisableFifoMode>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 80017ac:	f000 fcd0 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200004a0 	.word	0x200004a0
 80017b8:	40004800 	.word	0x40004800

080017bc <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80017c0:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017c2:	4a46      	ldr	r2, [pc, #280]	@ (80018dc <MX_SAI1_Init+0x120>)
 80017c4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80017c6:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80017cc:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80017d2:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017d4:	2240      	movs	r2, #64	@ 0x40
 80017d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80017d8:	4b3f      	ldr	r3, [pc, #252]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80017de:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80017e4:	4b3c      	ldr	r3, [pc, #240]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80017f0:	4b39      	ldr	r3, [pc, #228]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80017f6:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80017fc:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001804:	4a36      	ldr	r2, [pc, #216]	@ (80018e0 <MX_SAI1_Init+0x124>)
 8001806:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001808:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800180e:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001816:	2200      	movs	r2, #0
 8001818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001820:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 800182a:	2200      	movs	r2, #0
 800182c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001834:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001838:	2208      	movs	r2, #8
 800183a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800183c:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 800183e:	2201      	movs	r2, #1
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001844:	2200      	movs	r2, #0
 8001846:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001848:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 800184a:	2200      	movs	r2, #0
 800184c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800184e:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001850:	2200      	movs	r2, #0
 8001852:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001854:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001856:	2200      	movs	r2, #0
 8001858:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800185a:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 800185c:	2200      	movs	r2, #0
 800185e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001862:	2201      	movs	r2, #1
 8001864:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 8001868:	2200      	movs	r2, #0
 800186a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK) {
 800186c:	481a      	ldr	r0, [pc, #104]	@ (80018d8 <MX_SAI1_Init+0x11c>)
 800186e:	f005 fd2b 	bl	80072c8 <HAL_SAI_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_SAI1_Init+0xc0>
    Error_Handler();
 8001878:	f000 fc6a 	bl	8002150 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_SAI1_Init+0x128>)
 800187e:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <MX_SAI1_Init+0x12c>)
 8001880:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_SAI1_Init+0x128>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_SAI1_Init+0x128>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_SAI1_Init+0x128>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <MX_SAI1_Init+0x128>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <MX_SAI1_Init+0x128>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <MX_SAI1_Init+0x128>)
 80018a2:	4a0f      	ldr	r2, [pc, #60]	@ (80018e0 <MX_SAI1_Init+0x124>)
 80018a4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <MX_SAI1_Init+0x128>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	@ (80018e4 <MX_SAI1_Init+0x128>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <MX_SAI1_Init+0x128>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <MX_SAI1_Init+0x128>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD,
 80018be:	2302      	movs	r3, #2
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <MX_SAI1_Init+0x128>)
 80018c6:	f005 fccd 	bl	8007264 <HAL_SAI_InitProtocol>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SAI1_Init+0x118>
                           SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
    Error_Handler();
 80018d0:	f000 fc3e 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000534 	.word	0x20000534
 80018dc:	40015424 	.word	0x40015424
 80018e0:	0002ee00 	.word	0x0002ee00
 80018e4:	200005c8 	.word	0x200005c8
 80018e8:	40015404 	.word	0x40015404

080018ec <MX_SAI2_Init>:
/**
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 80018f2:	4a30      	ldr	r2, [pc, #192]	@ (80019b4 <MX_SAI2_Init+0xc8>)
 80018f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001902:	4b2b      	ldr	r3, [pc, #172]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001904:	2240      	movs	r2, #64	@ 0x40
 8001906:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001908:	4b29      	ldr	r3, [pc, #164]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800190a:	2200      	movs	r2, #0
 800190c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800190e:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001910:	2200      	movs	r2, #0
 8001912:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001914:	4b26      	ldr	r3, [pc, #152]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800191a:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001920:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800192c:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001934:	4a20      	ldr	r2, [pc, #128]	@ (80019b8 <MX_SAI2_Init+0xcc>)
 8001936:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800195a:	2200      	movs	r2, #0
 800195c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001960:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001964:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001968:	2208      	movs	r2, #8
 800196a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800196e:	2201      	movs	r2, #1
 8001970:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001972:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001974:	2200      	movs	r2, #0
 8001976:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001978:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800197a:	2200      	movs	r2, #0
 800197c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800197e:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001980:	2200      	movs	r2, #0
 8001982:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001986:	2200      	movs	r2, #0
 8001988:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800198c:	2200      	movs	r2, #0
 800198e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001992:	2201      	movs	r2, #1
 8001994:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 8001998:	2200      	movs	r2, #0
 800199a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK) {
 800199c:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <MX_SAI2_Init+0xc4>)
 800199e:	f005 fc93 	bl	80072c8 <HAL_SAI_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_SAI2_Init+0xc0>
    Error_Handler();
 80019a8:	f000 fbd2 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000065c 	.word	0x2000065c
 80019b4:	40015804 	.word	0x40015804
 80019b8:	0002ee00 	.word	0x0002ee00

080019bc <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <MX_SPI3_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80019d4:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019d6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80019da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <MX_SPI3_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <MX_SPI3_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <MX_SPI3_Init+0x74>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <MX_SPI3_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <MX_SPI3_Init+0x74>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_SPI3_Init+0x74>)
 8001a1c:	f006 f8ab 	bl	8007b76 <HAL_SPI_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_SPI3_Init+0x6e>
    Error_Handler();
 8001a26:	f000 fb93 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200006f0 	.word	0x200006f0
 8001a34:	40003c00 	.word	0x40003c00

08001a38 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b098      	sub	sp, #96	@ 0x60
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001a4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	222c      	movs	r2, #44	@ 0x2c
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f008 fc38 	bl	800a2e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001a78:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba4 <MX_TIM1_Init+0x16c>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b47      	ldr	r3, [pc, #284]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a88:	4b45      	ldr	r3, [pc, #276]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b43      	ldr	r3, [pc, #268]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a96:	4b42      	ldr	r3, [pc, #264]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001aa2:	483f      	ldr	r0, [pc, #252]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001aa4:	f006 f90a 	bl	8007cbc <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8001aae:	f000 fb4f 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001abe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4836      	ldr	r0, [pc, #216]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001ac6:	f006 fdd5 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM1_Init+0x9c>
    Error_Handler();
 8001ad0:	f000 fb3e 	bl	8002150 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001adc:	2300      	movs	r3, #0
 8001ade:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK,
 8001ae0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	482d      	ldr	r0, [pc, #180]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001aea:	f006 fec9 	bl	8008880 <HAL_TIMEx_ConfigBreakInput>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0xc0>
                                 &sBreakInputConfig) != HAL_OK) {
    Error_Handler();
 8001af4:	f000 fb2c 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 8001af8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001afc:	461a      	mov	r2, r3
 8001afe:	2102      	movs	r1, #2
 8001b00:	4827      	ldr	r0, [pc, #156]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001b02:	f006 febd 	bl	8008880 <HAL_TIMEx_ConfigBreakInput>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0xd8>
                                 &sBreakInputConfig) != HAL_OK) {
    Error_Handler();
 8001b0c:	f000 fb20 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b10:	2360      	movs	r3, #96	@ 0x60
 8001b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001b2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b30:	2208      	movs	r2, #8
 8001b32:	4619      	mov	r1, r3
 8001b34:	481a      	ldr	r0, [pc, #104]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001b36:	f006 f919 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x10c>
    Error_Handler();
 8001b40:	f000 fb06 	bl	8002150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001b44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b72:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4807      	ldr	r0, [pc, #28]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001b82:	f006 fdff 	bl	8008784 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0x158>
    Error_Handler();
 8001b8c:	f000 fae0 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <MX_TIM1_Init+0x168>)
 8001b92:	f000 fea1 	bl	80028d8 <HAL_TIM_MspPostInit>
}
 8001b96:	bf00      	nop
 8001b98:	3760      	adds	r7, #96	@ 0x60
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000754 	.word	0x20000754
 8001ba4:	40012c00 	.word	0x40012c00

08001ba8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295
 8001be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001bf4:	481d      	ldr	r0, [pc, #116]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001bf6:	f006 f861 	bl	8007cbc <HAL_TIM_PWM_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0x5c>
    Error_Handler();
 8001c00:	f000 faa6 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	4816      	ldr	r0, [pc, #88]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001c14:	f006 fd2e 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM2_Init+0x7a>
    Error_Handler();
 8001c1e:	f000 fa97 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c22:	2360      	movs	r3, #96	@ 0x60
 8001c24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001c32:	463b      	mov	r3, r7
 8001c34:	2200      	movs	r2, #0
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001c3a:	f006 f897 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0xa0>
    Error_Handler();
 8001c44:	f000 fa84 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001c50:	f006 f88c 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM2_Init+0xb6>
    Error_Handler();
 8001c5a:	f000 fa79 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c5e:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <MX_TIM2_Init+0xc4>)
 8001c60:	f000 fe3a 	bl	80028d8 <HAL_TIM_MspPostInit>
}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	@ 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200007a0 	.word	0x200007a0

08001c70 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c82:	463b      	mov	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001c96:	4a28      	ldr	r2, [pc, #160]	@ (8001d38 <MX_TIM3_Init+0xc8>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c9a:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001ca8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001cba:	481e      	ldr	r0, [pc, #120]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001cbc:	f005 fffe 	bl	8007cbc <HAL_TIM_PWM_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x5a>
    Error_Handler();
 8001cc6:	f000 fa43 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4816      	ldr	r0, [pc, #88]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001cda:	f006 fccb 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM3_Init+0x78>
    Error_Handler();
 8001ce4:	f000 fa34 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce8:	2360      	movs	r3, #96	@ 0x60
 8001cea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480d      	ldr	r0, [pc, #52]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001d00:	f006 f834 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM3_Init+0x9e>
    Error_Handler();
 8001d0a:	f000 fa21 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2208      	movs	r2, #8
 8001d12:	4619      	mov	r1, r3
 8001d14:	4807      	ldr	r0, [pc, #28]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001d16:	f006 f829 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0xb4>
    Error_Handler();
 8001d20:	f000 fa16 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d24:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <MX_TIM3_Init+0xc4>)
 8001d26:	f000 fdd7 	bl	80028d8 <HAL_TIM_MspPostInit>
}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200007ec 	.word	0x200007ec
 8001d38:	40000400 	.word	0x40000400

08001d3c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d60:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001d62:	4a22      	ldr	r2, [pc, #136]	@ (8001dec <MX_TIM4_Init+0xb0>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001d86:	4818      	ldr	r0, [pc, #96]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001d88:	f005 ff98 	bl	8007cbc <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x5a>
    Error_Handler();
 8001d92:	f000 f9dd 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	4810      	ldr	r0, [pc, #64]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001da6:	f006 fc65 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0x78>
    Error_Handler();
 8001db0:	f000 f9ce 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	@ 0x60
 8001db6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4807      	ldr	r0, [pc, #28]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001dcc:	f005 ffce 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM4_Init+0x9e>
    Error_Handler();
 8001dd6:	f000 f9bb 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dda:	4803      	ldr	r0, [pc, #12]	@ (8001de8 <MX_TIM4_Init+0xac>)
 8001ddc:	f000 fd7c 	bl	80028d8 <HAL_TIM_MspPostInit>
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000838 	.word	0x20000838
 8001dec:	40000800 	.word	0x40000800

08001df0 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b096      	sub	sp, #88	@ 0x58
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	222c      	movs	r2, #44	@ 0x2c
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f008 fa62 	bl	800a2e6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e22:	4b33      	ldr	r3, [pc, #204]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e24:	4a33      	ldr	r2, [pc, #204]	@ (8001ef4 <MX_TIM15_Init+0x104>)
 8001e26:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001e28:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001e34:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e3a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001e4e:	4828      	ldr	r0, [pc, #160]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e50:	f005 ff34 	bl	8007cbc <HAL_TIM_PWM_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM15_Init+0x6e>
    Error_Handler();
 8001e5a:	f000 f979 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) !=
 8001e66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4820      	ldr	r0, [pc, #128]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001e6e:	f006 fc01 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM15_Init+0x8c>
      HAL_OK) {
    Error_Handler();
 8001e78:	f000 f96a 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7c:	2360      	movs	r3, #96	@ 0x60
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001e98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4813      	ldr	r0, [pc, #76]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001ea2:	f005 ff63 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM15_Init+0xc0>
    Error_Handler();
 8001eac:	f000 f950 	bl	8002150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ec8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4807      	ldr	r0, [pc, #28]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001ed4:	f006 fc56 	bl	8008784 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM15_Init+0xf2>
    Error_Handler();
 8001ede:	f000 f937 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001ee2:	4803      	ldr	r0, [pc, #12]	@ (8001ef0 <MX_TIM15_Init+0x100>)
 8001ee4:	f000 fcf8 	bl	80028d8 <HAL_TIM_MspPostInit>
}
 8001ee8:	bf00      	nop
 8001eea:	3758      	adds	r7, #88	@ 0x58
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000884 	.word	0x20000884
 8001ef4:	40014000 	.word	0x40014000

08001ef8 <MX_USB_OTG_FS_USB_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_USB_Init(void) {
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	@ 0x38
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1e:	4b7e      	ldr	r3, [pc, #504]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	4a7d      	ldr	r2, [pc, #500]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	4b78      	ldr	r3, [pc, #480]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	4a77      	ldr	r2, [pc, #476]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f42:	4b75      	ldr	r3, [pc, #468]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f4e:	4b72      	ldr	r3, [pc, #456]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	4a71      	ldr	r2, [pc, #452]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f54:	f043 0320 	orr.w	r3, r3, #32
 8001f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5a:	4b6f      	ldr	r3, [pc, #444]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f66:	4b6c      	ldr	r3, [pc, #432]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	4a6b      	ldr	r2, [pc, #428]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f72:	4b69      	ldr	r3, [pc, #420]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b66      	ldr	r3, [pc, #408]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	4a65      	ldr	r2, [pc, #404]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8a:	4b63      	ldr	r3, [pc, #396]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	4b60      	ldr	r3, [pc, #384]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b5a      	ldr	r3, [pc, #360]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4a59      	ldr	r2, [pc, #356]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b57      	ldr	r3, [pc, #348]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fc6:	4b54      	ldr	r3, [pc, #336]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a53      	ldr	r2, [pc, #332]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b51      	ldr	r3, [pc, #324]	@ (8002118 <MX_GPIO_Init+0x210>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001fde:	f002 fcfd 	bl	80049dc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001fe8:	484c      	ldr	r0, [pc, #304]	@ (800211c <MX_GPIO_Init+0x214>)
 8001fea:	f002 fc0b 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 | GPIO_PIN_11, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001ff4:	484a      	ldr	r0, [pc, #296]	@ (8002120 <MX_GPIO_Init+0x218>)
 8001ff6:	f002 fc05 	bl	8004804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200a:	2305      	movs	r3, #5
 800200c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002012:	4619      	mov	r1, r3
 8002014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002018:	f002 fa4a 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800201c:	23e0      	movs	r3, #224	@ 0xe0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002024:	2301      	movs	r3, #1
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002032:	f002 fa3d 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8002036:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800203c:	2311      	movs	r3, #17
 800203e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	4833      	ldr	r0, [pc, #204]	@ (800211c <MX_GPIO_Init+0x214>)
 8002050:	f002 fa2e 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_11;
 8002054:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800205a:	2311      	movs	r3, #17
 800205c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	482c      	ldr	r0, [pc, #176]	@ (8002120 <MX_GPIO_Init+0x218>)
 800206e:	f002 fa1f 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002072:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800207c:	2301      	movs	r3, #1
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002084:	4619      	mov	r1, r3
 8002086:	4827      	ldr	r0, [pc, #156]	@ (8002124 <MX_GPIO_Init+0x21c>)
 8002088:	f002 fa12 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin =
 800208c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800209e:	230c      	movs	r3, #12
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	481f      	ldr	r0, [pc, #124]	@ (8002128 <MX_GPIO_Init+0x220>)
 80020aa:	f002 fa01 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80020ae:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020c0:	230a      	movs	r3, #10
 80020c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ce:	f002 f9ef 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ea:	f002 f9e1 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020ee:	2304      	movs	r3, #4
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020fe:	230c      	movs	r3, #12
 8002100:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002106:	4619      	mov	r1, r3
 8002108:	4806      	ldr	r0, [pc, #24]	@ (8002124 <MX_GPIO_Init+0x21c>)
 800210a:	f002 f9d1 	bl	80044b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800210e:	bf00      	nop
 8002110:	3738      	adds	r7, #56	@ 0x38
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	48001400 	.word	0x48001400
 8002120:	48001000 	.word	0x48001000
 8002124:	48000c00 	.word	0x48000c00
 8002128:	48000800 	.word	0x48000800

0800212c <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002134:	1d39      	adds	r1, r7, #4
 8002136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800213a:	2201      	movs	r2, #1
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <__io_putchar+0x20>)
 800213e:	f006 fcb5 	bl	8008aac <HAL_UART_Transmit>
  return ch;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000378 	.word	0x20000378

08002150 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <Error_Handler+0x8>

0800215c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <HAL_MspInit+0x44>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_MspInit+0x44>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6613      	str	r3, [r2, #96]	@ 0x60
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_MspInit+0x44>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_MspInit+0x44>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_MspInit+0x44>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_MspInit+0x44>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	@ 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002278 <HAL_ADC_MspInit+0xd4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d154      	bne.n	8002270 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	4a2c      	ldr	r2, [pc, #176]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d2:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021de:	4b27      	ldr	r3, [pc, #156]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a26      	ldr	r2, [pc, #152]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b24      	ldr	r3, [pc, #144]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b21      	ldr	r3, [pc, #132]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a20      	ldr	r2, [pc, #128]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	4a1a      	ldr	r2, [pc, #104]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221a:	4b18      	ldr	r3, [pc, #96]	@ (800227c <HAL_ADC_MspInit+0xd8>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002226:	233f      	movs	r3, #63	@ 0x3f
 8002228:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800222a:	230b      	movs	r3, #11
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	4811      	ldr	r0, [pc, #68]	@ (8002280 <HAL_ADC_MspInit+0xdc>)
 800223a:	f002 f939 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800223e:	230a      	movs	r3, #10
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002242:	230b      	movs	r3, #11
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f002 f92c 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002258:	2302      	movs	r3, #2
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800225c:	230b      	movs	r3, #11
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <HAL_ADC_MspInit+0xe0>)
 800226c:	f002 f920 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3730      	adds	r7, #48	@ 0x30
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	50040000 	.word	0x50040000
 800227c:	40021000 	.word	0x40021000
 8002280:	48000800 	.word	0x48000800
 8002284:	48000400 	.word	0x48000400

08002288 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_CAN_MspInit+0x7c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d127      	bne.n	80022fa <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_CAN_MspInit+0x80>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	4a16      	ldr	r2, [pc, #88]	@ (8002308 <HAL_CAN_MspInit+0x80>)
 80022b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b6:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <HAL_CAN_MspInit+0x80>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c2:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_CAN_MspInit+0x80>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	4a10      	ldr	r2, [pc, #64]	@ (8002308 <HAL_CAN_MspInit+0x80>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_CAN_MspInit+0x80>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022da:	2303      	movs	r3, #3
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022ea:	2309      	movs	r3, #9
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	@ (800230c <HAL_CAN_MspInit+0x84>)
 80022f6:	f002 f8db 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40006400 	.word	0x40006400
 8002308:	40021000 	.word	0x40021000
 800230c:	48000c00 	.word	0x48000c00

08002310 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_COMP_MspInit+0x98>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d118      	bne.n	8002364 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_COMP_MspInit+0x9c>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_COMP_MspInit+0x9c>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_COMP_MspInit+0x9c>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800234a:	2304      	movs	r3, #4
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234e:	2303      	movs	r3, #3
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4814      	ldr	r0, [pc, #80]	@ (80023b0 <HAL_COMP_MspInit+0xa0>)
 800235e:	f002 f8a7 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002362:	e01c      	b.n	800239e <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <HAL_COMP_MspInit+0xa4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d117      	bne.n	800239e <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_COMP_MspInit+0x9c>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	4a0e      	ldr	r2, [pc, #56]	@ (80023ac <HAL_COMP_MspInit+0x9c>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237a:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <HAL_COMP_MspInit+0x9c>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002386:	23c0      	movs	r3, #192	@ 0xc0
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <HAL_COMP_MspInit+0xa0>)
 800239a:	f002 f889 	bl	80044b0 <HAL_GPIO_Init>
}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	@ 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40010200 	.word	0x40010200
 80023ac:	40021000 	.word	0x40021000
 80023b0:	48000400 	.word	0x48000400
 80023b4:	40010204 	.word	0x40010204

080023b8 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0b0      	sub	sp, #192	@ 0xc0
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d0:	f107 0318 	add.w	r3, r7, #24
 80023d4:	2294      	movs	r2, #148	@ 0x94
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f007 ff84 	bl	800a2e6 <memset>
  if(hsmbus->Instance==I2C1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a42      	ldr	r2, [pc, #264]	@ (80024ec <HAL_SMBUS_MspInit+0x134>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d13c      	bne.n	8002462 <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023e8:	2340      	movs	r3, #64	@ 0x40
 80023ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f0:	f107 0318 	add.w	r3, r7, #24
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f9d9 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8002400:	f7ff fea6 	bl	8002150 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002408:	4a39      	ldr	r2, [pc, #228]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002410:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800241c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002424:	2312      	movs	r3, #18
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242a:	2301      	movs	r3, #1
 800242c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002436:	2304      	movs	r3, #4
 8002438:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002440:	4619      	mov	r1, r3
 8002442:	482c      	ldr	r0, [pc, #176]	@ (80024f4 <HAL_SMBUS_MspInit+0x13c>)
 8002444:	f002 f834 	bl	80044b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002448:	4b29      	ldr	r3, [pc, #164]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	4a28      	ldr	r2, [pc, #160]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 800244e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002452:	6593      	str	r3, [r2, #88]	@ 0x58
 8002454:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002460:	e03f      	b.n	80024e2 <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a24      	ldr	r2, [pc, #144]	@ (80024f8 <HAL_SMBUS_MspInit+0x140>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d13a      	bne.n	80024e2 <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002470:	2300      	movs	r3, #0
 8002472:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002474:	f107 0318 	add.w	r3, r7, #24
 8002478:	4618      	mov	r0, r3
 800247a:	f003 f997 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8002484:	f7ff fe64 	bl	8002150 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248c:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 800248e:	f043 0320 	orr.w	r3, r3, #32
 8002492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002494:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80024a0:	2307      	movs	r3, #7
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a6:	2312      	movs	r3, #18
 80024a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024b8:	2304      	movs	r3, #4
 80024ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024be:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024c2:	4619      	mov	r1, r3
 80024c4:	480d      	ldr	r0, [pc, #52]	@ (80024fc <HAL_SMBUS_MspInit+0x144>)
 80024c6:	f001 fff3 	bl	80044b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	4a08      	ldr	r2, [pc, #32]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 80024d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_SMBUS_MspInit+0x138>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
}
 80024e2:	bf00      	nop
 80024e4:	37c0      	adds	r7, #192	@ 0xc0
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40005400 	.word	0x40005400
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000400 	.word	0x48000400
 80024f8:	40005800 	.word	0x40005800
 80024fc:	48001400 	.word	0x48001400

08002500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0b2      	sub	sp, #200	@ 0xc8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002518:	f107 0320 	add.w	r3, r7, #32
 800251c:	2294      	movs	r2, #148	@ 0x94
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f007 fee0 	bl	800a2e6 <memset>
  if(huart->Instance==LPUART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a64      	ldr	r2, [pc, #400]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d13e      	bne.n	80025ae <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002530:	2320      	movs	r3, #32
 8002532:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002534:	2300      	movs	r3, #0
 8002536:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	4618      	mov	r0, r3
 800253e:	f003 f935 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002548:	f7ff fe02 	bl	8002150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800254c:	4b5c      	ldr	r3, [pc, #368]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	4a5b      	ldr	r2, [pc, #364]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002558:	4b59      	ldr	r3, [pc, #356]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002564:	4b56      	ldr	r3, [pc, #344]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002568:	4a55      	ldr	r2, [pc, #340]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 800256a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800256e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800257c:	f002 fa2e 	bl	80049dc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002580:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800259a:	2308      	movs	r3, #8
 800259c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4847      	ldr	r0, [pc, #284]	@ (80026c4 <HAL_UART_MspInit+0x1c4>)
 80025a8:	f001 ff82 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025ac:	e081      	b.n	80026b2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a45      	ldr	r2, [pc, #276]	@ (80026c8 <HAL_UART_MspInit+0x1c8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d13b      	bne.n	8002630 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025b8:	2302      	movs	r3, #2
 80025ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025bc:	2300      	movs	r3, #0
 80025be:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c0:	f107 0320 	add.w	r3, r7, #32
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 f8f1 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80025d0:	f7ff fdbe 	bl	8002150 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d4:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d8:	4a39      	ldr	r2, [pc, #228]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 80025da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025de:	6593      	str	r3, [r2, #88]	@ 0x58
 80025e0:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ec:	4b34      	ldr	r3, [pc, #208]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 80025ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f0:	4a33      	ldr	r2, [pc, #204]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 80025f2:	f043 0308 	orr.w	r3, r3, #8
 80025f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f8:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 80025fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002604:	2378      	movs	r3, #120	@ 0x78
 8002606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800261c:	2307      	movs	r3, #7
 800261e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002622:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002626:	4619      	mov	r1, r3
 8002628:	4828      	ldr	r0, [pc, #160]	@ (80026cc <HAL_UART_MspInit+0x1cc>)
 800262a:	f001 ff41 	bl	80044b0 <HAL_GPIO_Init>
}
 800262e:	e040      	b.n	80026b2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a26      	ldr	r2, [pc, #152]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d13b      	bne.n	80026b2 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800263a:	2304      	movs	r3, #4
 800263c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800263e:	2300      	movs	r3, #0
 8002640:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	4618      	mov	r0, r3
 8002648:	f003 f8b0 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8002652:	f7ff fd7d 	bl	8002150 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002656:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	4a19      	ldr	r2, [pc, #100]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002660:	6593      	str	r3, [r2, #88]	@ 0x58
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267a:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002686:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800268a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026a0:	2307      	movs	r3, #7
 80026a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	@ (80026cc <HAL_UART_MspInit+0x1cc>)
 80026ae:	f001 feff 	bl	80044b0 <HAL_GPIO_Init>
}
 80026b2:	bf00      	nop
 80026b4:	37c8      	adds	r7, #200	@ 0xc8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40008000 	.word	0x40008000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	48001800 	.word	0x48001800
 80026c8:	40004400 	.word	0x40004400
 80026cc:	48000c00 	.word	0x48000c00
 80026d0:	40004800 	.word	0x40004800

080026d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <HAL_SPI_MspInit+0x7c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d127      	bne.n	8002746 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_SPI_MspInit+0x80>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <HAL_SPI_MspInit+0x80>)
 80026fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002700:	6593      	str	r3, [r2, #88]	@ 0x58
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <HAL_SPI_MspInit+0x80>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <HAL_SPI_MspInit+0x80>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	4a10      	ldr	r2, [pc, #64]	@ (8002754 <HAL_SPI_MspInit+0x80>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800271a:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_SPI_MspInit+0x80>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002726:	2338      	movs	r3, #56	@ 0x38
 8002728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002736:	2306      	movs	r3, #6
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	@ (8002758 <HAL_SPI_MspInit+0x84>)
 8002742:	f001 feb5 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	@ 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40003c00 	.word	0x40003c00
 8002754:	40021000 	.word	0x40021000
 8002758:	48000400 	.word	0x48000400

0800275c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08e      	sub	sp, #56	@ 0x38
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a51      	ldr	r2, [pc, #324]	@ (80028c0 <HAL_TIM_PWM_MspInit+0x164>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d139      	bne.n	80027f2 <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277e:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002782:	4a50      	ldr	r2, [pc, #320]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002784:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002788:	6613      	str	r3, [r2, #96]	@ 0x60
 800278a:	4b4e      	ldr	r3, [pc, #312]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002796:	4b4b      	ldr	r3, [pc, #300]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	4a4a      	ldr	r2, [pc, #296]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 800279c:	f043 0310 	orr.w	r3, r3, #16
 80027a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a2:	4b48      	ldr	r3, [pc, #288]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027be:	2301      	movs	r3, #1
 80027c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c6:	4619      	mov	r1, r3
 80027c8:	483f      	ldr	r0, [pc, #252]	@ (80028c8 <HAL_TIM_PWM_MspInit+0x16c>)
 80027ca:	f001 fe71 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80027e0:	2303      	movs	r3, #3
 80027e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	4837      	ldr	r0, [pc, #220]	@ (80028c8 <HAL_TIM_PWM_MspInit+0x16c>)
 80027ec:	f001 fe60 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80027f0:	e062      	b.n	80028b8 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fa:	d10c      	bne.n	8002816 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027fc:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	4a30      	ldr	r2, [pc, #192]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6593      	str	r3, [r2, #88]	@ 0x58
 8002808:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
}
 8002814:	e050      	b.n	80028b8 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a2c      	ldr	r2, [pc, #176]	@ (80028cc <HAL_TIM_PWM_MspInit+0x170>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002820:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	4a27      	ldr	r2, [pc, #156]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	6593      	str	r3, [r2, #88]	@ 0x58
 800282c:	4b25      	ldr	r3, [pc, #148]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
}
 8002838:	e03e      	b.n	80028b8 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a24      	ldr	r2, [pc, #144]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x174>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d128      	bne.n	8002896 <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002844:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	4a1e      	ldr	r2, [pc, #120]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002850:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002860:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 8002862:	f043 0310 	orr.w	r3, r3, #16
 8002866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 800286a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002874:	2301      	movs	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002884:	2302      	movs	r3, #2
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288c:	4619      	mov	r1, r3
 800288e:	480e      	ldr	r0, [pc, #56]	@ (80028c8 <HAL_TIM_PWM_MspInit+0x16c>)
 8002890:	f001 fe0e 	bl	80044b0 <HAL_GPIO_Init>
}
 8002894:	e010      	b.n	80028b8 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a0e      	ldr	r2, [pc, #56]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x178>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10b      	bne.n	80028b8 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 80028a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <HAL_TIM_PWM_MspInit+0x168>)
 80028ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
}
 80028b8:	bf00      	nop
 80028ba:	3738      	adds	r7, #56	@ 0x38
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	48001000 	.word	0x48001000
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800
 80028d4:	40014000 	.word	0x40014000

080028d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	@ 0x38
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a73      	ldr	r2, [pc, #460]	@ (8002ac4 <HAL_TIM_MspPostInit+0x1ec>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11d      	bne.n	8002936 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028fa:	4b73      	ldr	r3, [pc, #460]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fe:	4a72      	ldr	r2, [pc, #456]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002900:	f043 0310 	orr.w	r3, r3, #16
 8002904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002906:	4b70      	ldr	r3, [pc, #448]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	6a3b      	ldr	r3, [r7, #32]
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 8002912:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002924:	2301      	movs	r3, #1
 8002926:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	4867      	ldr	r0, [pc, #412]	@ (8002acc <HAL_TIM_MspPostInit+0x1f4>)
 8002930:	f001 fdbe 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002934:	e0c2      	b.n	8002abc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293e:	d13a      	bne.n	80029b6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b61      	ldr	r3, [pc, #388]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002944:	4a60      	ldr	r2, [pc, #384]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 800294e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002958:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002964:	4b58      	ldr	r3, [pc, #352]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002970:	2301      	movs	r3, #1
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2300      	movs	r3, #0
 800297e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002980:	2301      	movs	r3, #1
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800298e:	f001 fd8f 	bl	80044b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2300      	movs	r3, #0
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a4:	2301      	movs	r3, #1
 80029a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ac:	4619      	mov	r1, r3
 80029ae:	4848      	ldr	r0, [pc, #288]	@ (8002ad0 <HAL_TIM_MspPostInit+0x1f8>)
 80029b0:	f001 fd7e 	bl	80044b0 <HAL_GPIO_Init>
}
 80029b4:	e082      	b.n	8002abc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a46      	ldr	r2, [pc, #280]	@ (8002ad4 <HAL_TIM_MspPostInit+0x1fc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d138      	bne.n	8002a32 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c0:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 80029c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c4:	4a40      	ldr	r2, [pc, #256]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029cc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 80029da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029dc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029e4:	4b38      	ldr	r3, [pc, #224]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 80029e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029f0:	2301      	movs	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a00:	2302      	movs	r3, #2
 8002a02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4831      	ldr	r0, [pc, #196]	@ (8002ad0 <HAL_TIM_MspPostInit+0x1f8>)
 8002a0c:	f001 fd50 	bl	80044b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a20:	2302      	movs	r3, #2
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a28:	4619      	mov	r1, r3
 8002a2a:	482b      	ldr	r0, [pc, #172]	@ (8002ad8 <HAL_TIM_MspPostInit+0x200>)
 8002a2c:	f001 fd40 	bl	80044b0 <HAL_GPIO_Init>
}
 8002a30:	e044      	b.n	8002abc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a29      	ldr	r2, [pc, #164]	@ (8002adc <HAL_TIM_MspPostInit+0x204>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d11d      	bne.n	8002a78 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a40:	4a21      	ldr	r2, [pc, #132]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002a42:	f043 0308 	orr.w	r3, r3, #8
 8002a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a66:	2302      	movs	r3, #2
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a6e:	4619      	mov	r1, r3
 8002a70:	481b      	ldr	r0, [pc, #108]	@ (8002ae0 <HAL_TIM_MspPostInit+0x208>)
 8002a72:	f001 fd1d 	bl	80044b0 <HAL_GPIO_Init>
}
 8002a76:	e021      	b.n	8002abc <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ae4 <HAL_TIM_MspPostInit+0x20c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11c      	bne.n	8002abc <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	4a10      	ldr	r2, [pc, #64]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <HAL_TIM_MspPostInit+0x1f0>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002aac:	230e      	movs	r3, #14
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4806      	ldr	r0, [pc, #24]	@ (8002ad0 <HAL_TIM_MspPostInit+0x1f8>)
 8002ab8:	f001 fcfa 	bl	80044b0 <HAL_GPIO_Init>
}
 8002abc:	bf00      	nop
 8002abe:	3738      	adds	r7, #56	@ 0x38
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	48001000 	.word	0x48001000
 8002ad0:	48000400 	.word	0x48000400
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	48000800 	.word	0x48000800
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	48000c00 	.word	0x48000c00
 8002ae4:	40014000 	.word	0x40014000

08002ae8 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	@ 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a50      	ldr	r2, [pc, #320]	@ (8002c38 <HAL_SAI_MspInit+0x150>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d124      	bne.n	8002b44 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002afa:	4b50      	ldr	r3, [pc, #320]	@ (8002c3c <HAL_SAI_MspInit+0x154>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002b02:	4b4f      	ldr	r3, [pc, #316]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b06:	4a4e      	ldr	r2, [pc, #312]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002b1a:	4b48      	ldr	r3, [pc, #288]	@ (8002c3c <HAL_SAI_MspInit+0x154>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4a46      	ldr	r2, [pc, #280]	@ (8002c3c <HAL_SAI_MspInit+0x154>)
 8002b22:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b24:	2374      	movs	r3, #116	@ 0x74
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002b34:	230d      	movs	r3, #13
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4841      	ldr	r0, [pc, #260]	@ (8002c44 <HAL_SAI_MspInit+0x15c>)
 8002b40:	f001 fcb6 	bl	80044b0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a3f      	ldr	r2, [pc, #252]	@ (8002c48 <HAL_SAI_MspInit+0x160>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d135      	bne.n	8002bba <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <HAL_SAI_MspInit+0x154>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002b56:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5a:	4a39      	ldr	r2, [pc, #228]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b62:	4b37      	ldr	r3, [pc, #220]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002b6e:	4b33      	ldr	r3, [pc, #204]	@ (8002c3c <HAL_SAI_MspInit+0x154>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a31      	ldr	r2, [pc, #196]	@ (8002c3c <HAL_SAI_MspInit+0x154>)
 8002b76:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b78:	2308      	movs	r3, #8
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002b88:	230d      	movs	r3, #13
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	482c      	ldr	r0, [pc, #176]	@ (8002c44 <HAL_SAI_MspInit+0x15c>)
 8002b94:	f001 fc8c 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b98:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002baa:	230d      	movs	r3, #13
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4825      	ldr	r0, [pc, #148]	@ (8002c4c <HAL_SAI_MspInit+0x164>)
 8002bb6:	f001 fc7b 	bl	80044b0 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a24      	ldr	r2, [pc, #144]	@ (8002c50 <HAL_SAI_MspInit+0x168>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d135      	bne.n	8002c30 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002bc4:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <HAL_SAI_MspInit+0x16c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002bd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bd8:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_SAI_MspInit+0x158>)
 8002bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <HAL_SAI_MspInit+0x16c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a1a      	ldr	r2, [pc, #104]	@ (8002c54 <HAL_SAI_MspInit+0x16c>)
 8002bec:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002bee:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c00:	230d      	movs	r3, #13
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4813      	ldr	r0, [pc, #76]	@ (8002c58 <HAL_SAI_MspInit+0x170>)
 8002c0c:	f001 fc50 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c10:	2340      	movs	r3, #64	@ 0x40
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c20:	230d      	movs	r3, #13
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	4619      	mov	r1, r3
 8002c2a:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <HAL_SAI_MspInit+0x174>)
 8002c2c:	f001 fc40 	bl	80044b0 <HAL_GPIO_Init>

    }
}
 8002c30:	bf00      	nop
 8002c32:	3728      	adds	r7, #40	@ 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40015404 	.word	0x40015404
 8002c3c:	200008d0 	.word	0x200008d0
 8002c40:	40021000 	.word	0x40021000
 8002c44:	48001000 	.word	0x48001000
 8002c48:	40015424 	.word	0x40015424
 8002c4c:	48001400 	.word	0x48001400
 8002c50:	40015804 	.word	0x40015804
 8002c54:	200008d4 	.word	0x200008d4
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	48000800 	.word	0x48000800

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <NMI_Handler+0x4>

08002c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <HardFault_Handler+0x4>

08002c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <MemManage_Handler+0x4>

08002c78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb6:	f000 f959 	bl	8002f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return 1;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_kill>:

int _kill(int pid, int sig)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cd8:	f007 fb58 	bl	800a38c <__errno>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2216      	movs	r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_exit>:

void _exit (int status)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffe7 	bl	8002cce <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <_exit+0x12>

08002d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e00a      	b.n	8002d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d16:	f3af 8000 	nop.w
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	60ba      	str	r2, [r7, #8]
 8002d22:	b2ca      	uxtb	r2, r1
 8002d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dbf0      	blt.n	8002d16 <_read+0x12>
  }

  return len;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e009      	b.n	8002d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	60ba      	str	r2, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff f9e7 	bl	800212c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbf1      	blt.n	8002d50 <_write+0x12>
  }
  return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_close>:

int _close(int file)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_isatty>:

int _isatty(int file)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <_sbrk+0x5c>)
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <_sbrk+0x60>)
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <_sbrk+0x64>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <_sbrk+0x64>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <_sbrk+0x68>)
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e10:	f007 fabc 	bl	800a38c <__errno>
 8002e14:	4603      	mov	r3, r0
 8002e16:	220c      	movs	r2, #12
 8002e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e009      	b.n	8002e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e26:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <_sbrk+0x64>)
 8002e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200a0000 	.word	0x200a0000
 8002e40:	00000400 	.word	0x00000400
 8002e44:	200008d8 	.word	0x200008d8
 8002e48:	20000a30 	.word	0x20000a30

08002e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <SystemInit+0x20>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <SystemInit+0x20>)
 8002e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e74:	f7ff ffea 	bl	8002e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e78:	480c      	ldr	r0, [pc, #48]	@ (8002eac <LoopForever+0x6>)
  ldr r1, =_edata
 8002e7a:	490d      	ldr	r1, [pc, #52]	@ (8002eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb4 <LoopForever+0xe>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e80:	e002      	b.n	8002e88 <LoopCopyDataInit>

08002e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e86:	3304      	adds	r3, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e8c:	d3f9      	bcc.n	8002e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e90:	4c0a      	ldr	r4, [pc, #40]	@ (8002ebc <LoopForever+0x16>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e94:	e001      	b.n	8002e9a <LoopFillZerobss>

08002e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e98:	3204      	adds	r2, #4

08002e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e9c:	d3fb      	bcc.n	8002e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9e:	f007 fa7b 	bl	800a398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ea2:	f7fe f84f 	bl	8000f44 <main>

08002ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ea6:	e7fe      	b.n	8002ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ea8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002eb4:	0800c5e0 	.word	0x0800c5e0
  ldr r2, =_sbss
 8002eb8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ebc:	20000a2c 	.word	0x20000a2c

08002ec0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ec0:	e7fe      	b.n	8002ec0 <ADC1_IRQHandler>

08002ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ecc:	2003      	movs	r0, #3
 8002ece:	f001 fabb 	bl	8004448 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f000 f80e 	bl	8002ef4 <HAL_InitTick>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	71fb      	strb	r3, [r7, #7]
 8002ee2:	e001      	b.n	8002ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ee4:	f7ff f93a 	bl	800215c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f00:	4b17      	ldr	r3, [pc, #92]	@ (8002f60 <HAL_InitTick+0x6c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d023      	beq.n	8002f50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f08:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <HAL_InitTick+0x70>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_InitTick+0x6c>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 fab9 	bl	8004496 <HAL_SYSTICK_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d809      	bhi.n	8002f44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f30:	2200      	movs	r2, #0
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	f001 fa91 	bl	800445e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <HAL_InitTick+0x74>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e007      	b.n	8002f54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e004      	b.n	8002f54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e001      	b.n	8002f54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000008 	.word	0x20000008
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_IncTick+0x20>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_IncTick+0x24>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <HAL_IncTick+0x24>)
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	200008dc 	.word	0x200008dc

08002f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return uwTick;
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <HAL_GetTick+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	200008dc 	.word	0x200008dc

08002fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff ffee 	bl	8002f94 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d005      	beq.n	8002fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_Delay+0x44>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd2:	bf00      	nop
 8002fd4:	f7ff ffde 	bl	8002f94 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8f7      	bhi.n	8002fd4 <HAL_Delay+0x28>
  {
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000008 	.word	0x20000008

08002ff4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3360      	adds	r3, #96	@ 0x60
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <LL_ADC_SetOffset+0x44>)
 800307e:	4013      	ands	r3, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	4313      	orrs	r3, r2
 800308c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	03fff000 	.word	0x03fff000

080030a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3360      	adds	r3, #96	@ 0x60
 80030b2:	461a      	mov	r2, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3360      	adds	r3, #96	@ 0x60
 80030e0:	461a      	mov	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	615a      	str	r2, [r3, #20]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3330      	adds	r3, #48	@ 0x30
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	4413      	add	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	211f      	movs	r1, #31
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	f003 011f 	and.w	r1, r3, #31
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	431a      	orrs	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3314      	adds	r3, #20
 8003194:	461a      	mov	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	0e5b      	lsrs	r3, r3, #25
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	4413      	add	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	0d1b      	lsrs	r3, r3, #20
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2107      	movs	r1, #7
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	401a      	ands	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	0d1b      	lsrs	r3, r3, #20
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	431a      	orrs	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f4:	43db      	mvns	r3, r3
 80031f6:	401a      	ands	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0318 	and.w	r3, r3, #24
 80031fe:	4908      	ldr	r1, [pc, #32]	@ (8003220 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003200:	40d9      	lsrs	r1, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	400b      	ands	r3, r1
 8003206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320a:	431a      	orrs	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	0007ffff 	.word	0x0007ffff

08003224 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003234:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6093      	str	r3, [r2, #8]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800325c:	d101      	bne.n	8003262 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003284:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ac:	d101      	bne.n	80032b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <LL_ADC_IsEnabled+0x18>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <LL_ADC_IsEnabled+0x1a>
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d101      	bne.n	80032fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d101      	bne.n	8003324 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e129      	b.n	80035a2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fe ff21 	bl	80021a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff67 	bl	8003248 <LL_ADC_IsDeepPowerDownEnabled>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff4d 	bl	8003224 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff82 	bl	8003298 <LL_ADC_IsInternalRegulatorEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d115      	bne.n	80033c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff66 	bl	8003270 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033a4:	4b81      	ldr	r3, [pc, #516]	@ (80035ac <HAL_ADC_Init+0x278>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	4a81      	ldr	r2, [pc, #516]	@ (80035b0 <HAL_ADC_Init+0x27c>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	3301      	adds	r3, #1
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033b8:	e002      	b.n	80033c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f9      	bne.n	80033ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff64 	bl	8003298 <LL_ADC_IsInternalRegulatorEnabled>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff75 	bl	80032e6 <LL_ADC_REG_IsConversionOngoing>
 80033fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 80c2 	bne.w	8003590 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 80be 	bne.w	8003590 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800341c:	f043 0202 	orr.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff49 	bl	80032c0 <LL_ADC_IsEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003434:	485f      	ldr	r0, [pc, #380]	@ (80035b4 <HAL_ADC_Init+0x280>)
 8003436:	f7ff ff43 	bl	80032c0 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4619      	mov	r1, r3
 8003446:	485c      	ldr	r0, [pc, #368]	@ (80035b8 <HAL_ADC_Init+0x284>)
 8003448:	f7ff fdd4 	bl	8002ff4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e5b      	ldrb	r3, [r3, #25]
 8003450:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003456:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800345c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003462:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d106      	bne.n	8003488 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	3b01      	subs	r3, #1
 8003480:	045b      	lsls	r3, r3, #17
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	4b44      	ldr	r3, [pc, #272]	@ (80035bc <HAL_ADC_Init+0x288>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff25 	bl	800330c <LL_ADC_INJ_IsConversionOngoing>
 80034c2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d140      	bne.n	800354c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d13d      	bne.n	800354c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
 80034d8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034da:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034e2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034f2:	f023 0306 	bic.w	r3, r3, #6
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003506:	2b01      	cmp	r3, #1
 8003508:	d118      	bne.n	800353c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003520:	4311      	orrs	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800352c:	430a      	orrs	r2, r1
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	e007      	b.n	800354c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d10c      	bne.n	800356e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f023 010f 	bic.w	r1, r3, #15
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
 800356c:	e007      	b.n	800357e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020f 	bic.w	r2, r2, #15
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	659a      	str	r2, [r3, #88]	@ 0x58
 800358e:	e007      	b.n	80035a0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003594:	f043 0210 	orr.w	r2, r3, #16
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000
 80035b0:	053e2d63 	.word	0x053e2d63
 80035b4:	50040000 	.word	0x50040000
 80035b8:	50040300 	.word	0x50040300
 80035bc:	fff0c007 	.word	0xfff0c007

080035c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0b6      	sub	sp, #216	@ 0xd8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x22>
 80035de:	2302      	movs	r3, #2
 80035e0:	e3d5      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x7ce>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fe79 	bl	80032e6 <LL_ADC_REG_IsConversionOngoing>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 83ba 	bne.w	8003d70 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d824      	bhi.n	8003656 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	3b02      	subs	r3, #2
 8003612:	2b03      	cmp	r3, #3
 8003614:	d81b      	bhi.n	800364e <HAL_ADC_ConfigChannel+0x8e>
 8003616:	a201      	add	r2, pc, #4	@ (adr r2, 800361c <HAL_ADC_ConfigChannel+0x5c>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	0800362d 	.word	0x0800362d
 8003620:	08003635 	.word	0x08003635
 8003624:	0800363d 	.word	0x0800363d
 8003628:	08003645 	.word	0x08003645
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800362c:	230c      	movs	r3, #12
 800362e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003632:	e010      	b.n	8003656 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003634:	2312      	movs	r3, #18
 8003636:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800363a:	e00c      	b.n	8003656 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800363c:	2318      	movs	r3, #24
 800363e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003642:	e008      	b.n	8003656 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800364c:	e003      	b.n	8003656 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800364e:	2306      	movs	r3, #6
 8003650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003654:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003664:	f7ff fd62 	bl	800312c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fe3a 	bl	80032e6 <LL_ADC_REG_IsConversionOngoing>
 8003672:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fe46 	bl	800330c <LL_ADC_INJ_IsConversionOngoing>
 8003680:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 81bf 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800368e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 81ba 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036a0:	d10f      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7ff fd69 	bl	8003184 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fd23 	bl	8003106 <LL_ADC_SetSamplingTimeCommonConfig>
 80036c0:	e00e      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f7ff fd58 	bl	8003184 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fd13 	bl	8003106 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d00a      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6919      	ldr	r1, [r3, #16]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003712:	f7ff fca3 	bl	800305c <LL_ADC_SetOffset>
 8003716:	e179      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fcc0 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x184>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fcb5 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 800373a:	4603      	mov	r3, r0
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	f003 021f 	and.w	r2, r3, #31
 8003742:	e01e      	b.n	8003782 <HAL_ADC_ConfigChannel+0x1c2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fcaa 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003766:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800376a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003772:	2320      	movs	r3, #32
 8003774:	e004      	b.n	8003780 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <HAL_ADC_ConfigChannel+0x1da>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0e9b      	lsrs	r3, r3, #26
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	e018      	b.n	80037cc <HAL_ADC_ConfigChannel+0x20c>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80037ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80037b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80037be:	2320      	movs	r3, #32
 80037c0:	e004      	b.n	80037cc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80037c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d106      	bne.n	80037de <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fc79 	bl	80030d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fc5d 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <HAL_ADC_ConfigChannel+0x24a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fc52 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	0e9b      	lsrs	r3, r3, #26
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	e01e      	b.n	8003848 <HAL_ADC_ConfigChannel+0x288>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fc47 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003828:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800382c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003830:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e004      	b.n	8003846 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800383c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x2a0>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	e018      	b.n	8003892 <HAL_ADC_ConfigChannel+0x2d2>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003874:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800387c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e004      	b.n	8003892 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003892:	429a      	cmp	r2, r3
 8003894:	d106      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fc16 	bl	80030d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fbfa 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x310>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fbef 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	e01e      	b.n	800390e <HAL_ADC_ConfigChannel+0x34e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fbe4 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80038ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80038f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e004      	b.n	800390c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x366>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	e014      	b.n	8003950 <HAL_ADC_ConfigChannel+0x390>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003936:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800393a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003942:	2320      	movs	r3, #32
 8003944:	e004      	b.n	8003950 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003946:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003950:	429a      	cmp	r2, r3
 8003952:	d106      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	2102      	movs	r1, #2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fbb7 	bl	80030d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2103      	movs	r1, #3
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fb9b 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 800396e:	4603      	mov	r3, r0
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_ADC_ConfigChannel+0x3ce>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2103      	movs	r1, #3
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fb90 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 8003984:	4603      	mov	r3, r0
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	e017      	b.n	80039be <HAL_ADC_ConfigChannel+0x3fe>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2103      	movs	r1, #3
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fb85 	bl	80030a4 <LL_ADC_GetOffsetChannel>
 800399a:	4603      	mov	r3, r0
 800399c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80039a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80039aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e003      	b.n	80039bc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80039b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x416>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0e9b      	lsrs	r3, r3, #26
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	e011      	b.n	80039fa <HAL_ADC_ConfigChannel+0x43a>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80039e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80039e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e003      	b.n	80039fa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80039f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d106      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	2103      	movs	r1, #3
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fb62 	bl	80030d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fc55 	bl	80032c0 <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 813f 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f7ff fbd6 	bl	80031dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a8e      	ldr	r2, [pc, #568]	@ (8003c70 <HAL_ADC_ConfigChannel+0x6b0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	f040 8130 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x4a4>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	0e9b      	lsrs	r3, r3, #26
 8003a52:	3301      	adds	r3, #1
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2b09      	cmp	r3, #9
 8003a5a:	bf94      	ite	ls
 8003a5c:	2301      	movls	r3, #1
 8003a5e:	2300      	movhi	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e019      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x4d8>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e003      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003a80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2b09      	cmp	r3, #9
 8003a90:	bf94      	ite	ls
 8003a92:	2301      	movls	r3, #1
 8003a94:	2300      	movhi	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d079      	beq.n	8003b90 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x4f8>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0e9b      	lsrs	r3, r3, #26
 8003aae:	3301      	adds	r3, #1
 8003ab0:	069b      	lsls	r3, r3, #26
 8003ab2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ab6:	e015      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x524>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	069b      	lsls	r3, r3, #26
 8003ae0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x544>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	e017      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x574>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	e003      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x59a>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	051b      	lsls	r3, r3, #20
 8003b58:	e018      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x5cc>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003b72:	2320      	movs	r3, #32
 8003b74:	e003      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	e080      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x5ec>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	069b      	lsls	r3, r3, #26
 8003ba6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003baa:	e015      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x618>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	069b      	lsls	r3, r3, #26
 8003bd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x638>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	3301      	adds	r3, #1
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	e017      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x668>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	61bb      	str	r3, [r7, #24]
  return result;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e003      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	ea42 0103 	orr.w	r1, r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10d      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x694>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f003 021f 	and.w	r2, r3, #31
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	3b1e      	subs	r3, #30
 8003c4c:	051b      	lsls	r3, r3, #20
 8003c4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c52:	e01d      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x6d0>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	60fb      	str	r3, [r7, #12]
  return result;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	e005      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x6bc>
 8003c70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f003 021f 	and.w	r2, r3, #31
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	3b1e      	subs	r3, #30
 8003c8a:	051b      	lsls	r3, r3, #20
 8003c8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7ff fa74 	bl	8003184 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8003d98 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d06c      	beq.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ca8:	483c      	ldr	r0, [pc, #240]	@ (8003d9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003caa:	f7ff f9c9 	bl	8003040 <LL_ADC_GetCommonPathInternalCh>
 8003cae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8003da0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d127      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d121      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a35      	ldr	r2, [pc, #212]	@ (8003da4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d157      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cda:	4619      	mov	r1, r3
 8003cdc:	482f      	ldr	r0, [pc, #188]	@ (8003d9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003cde:	f7ff f99c 	bl	800301a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ce2:	4b31      	ldr	r3, [pc, #196]	@ (8003da8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	4a30      	ldr	r2, [pc, #192]	@ (8003dac <HAL_ADC_ConfigChannel+0x7ec>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cfc:	e002      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f9      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d0a:	e03a      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d12a      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d34:	4619      	mov	r1, r3
 8003d36:	4819      	ldr	r0, [pc, #100]	@ (8003d9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003d38:	f7ff f96f 	bl	800301a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d3c:	e021      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d11c      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d116      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a12      	ldr	r2, [pc, #72]	@ (8003da4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d111      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d66:	4619      	mov	r1, r3
 8003d68:	480c      	ldr	r0, [pc, #48]	@ (8003d9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003d6a:	f7ff f956 	bl	800301a <LL_ADC_SetCommonPathInternalCh>
 8003d6e:	e008      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	37d8      	adds	r7, #216	@ 0xd8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	80080000 	.word	0x80080000
 8003d9c:	50040300 	.word	0x50040300
 8003da0:	c7520000 	.word	0xc7520000
 8003da4:	50040000 	.word	0x50040000
 8003da8:	20000000 	.word	0x20000000
 8003dac:	053e2d63 	.word	0x053e2d63
 8003db0:	cb840000 	.word	0xcb840000
 8003db4:	80000001 	.word	0x80000001

08003db8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0ed      	b.n	8003fa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fe fa56 	bl	8002288 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dec:	f7ff f8d2 	bl	8002f94 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003df2:	e012      	b.n	8003e1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003df4:	f7ff f8ce 	bl	8002f94 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b0a      	cmp	r3, #10
 8003e00:	d90b      	bls.n	8003e1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2205      	movs	r2, #5
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0c5      	b.n	8003fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0e5      	beq.n	8003df4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0202 	bic.w	r2, r2, #2
 8003e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e38:	f7ff f8ac 	bl	8002f94 <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e3e:	e012      	b.n	8003e66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e40:	f7ff f8a8 	bl	8002f94 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b0a      	cmp	r3, #10
 8003e4c:	d90b      	bls.n	8003e66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e09f      	b.n	8003fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7e1b      	ldrb	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d108      	bne.n	8003e8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e007      	b.n	8003e9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7e5b      	ldrb	r3, [r3, #25]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d108      	bne.n	8003eb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e007      	b.n	8003ec8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7e9b      	ldrb	r3, [r3, #26]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d108      	bne.n	8003ee2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0220 	orr.w	r2, r2, #32
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e007      	b.n	8003ef2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0220 	bic.w	r2, r2, #32
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7edb      	ldrb	r3, [r3, #27]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0210 	bic.w	r2, r2, #16
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e007      	b.n	8003f1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0210 	orr.w	r2, r2, #16
 8003f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7f1b      	ldrb	r3, [r3, #28]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d108      	bne.n	8003f36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0208 	orr.w	r2, r2, #8
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e007      	b.n	8003f46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0208 	bic.w	r2, r2, #8
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7f5b      	ldrb	r3, [r3, #29]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0204 	orr.w	r2, r2, #4
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e007      	b.n	8003f70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	ea42 0103 	orr.w	r1, r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <LL_EXTI_EnableIT_0_31+0x20>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4904      	ldr	r1, [pc, #16]	@ (8003fd0 <LL_EXTI_EnableIT_0_31+0x20>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40010400 	.word	0x40010400

08003fd4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	4904      	ldr	r1, [pc, #16]	@ (8003ff8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010400 	.word	0x40010400

08003ffc <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	4904      	ldr	r1, [pc, #16]	@ (800401c <LL_EXTI_EnableEvent_0_31+0x20>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4313      	orrs	r3, r2
 800400e:	604b      	str	r3, [r1, #4]

}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40010400 	.word	0x40010400

08004020 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <LL_EXTI_DisableEvent_0_31+0x24>)
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	43db      	mvns	r3, r3
 8004030:	4904      	ldr	r1, [pc, #16]	@ (8004044 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004032:	4013      	ands	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010400 	.word	0x40010400

08004048 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	4904      	ldr	r1, [pc, #16]	@ (8004068 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]

}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40010400 	.word	0x40010400

0800406c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	43db      	mvns	r3, r3
 800407c:	4904      	ldr	r1, [pc, #16]	@ (8004090 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800407e:	4013      	ands	r3, r2
 8004080:	608b      	str	r3, [r1, #8]

}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010400 	.word	0x40010400

08004094 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800409c:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	4904      	ldr	r1, [pc, #16]	@ (80040b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60cb      	str	r3, [r1, #12]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40010400 	.word	0x40010400

080040b8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80040c0:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	4904      	ldr	r1, [pc, #16]	@ (80040dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010400 	.word	0x40010400

080040e0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80040e8:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6153      	str	r3, [r2, #20]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010400 	.word	0x40010400

08004100 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e0d1      	b.n	80042c0 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800412a:	d102      	bne.n	8004132 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0c6      	b.n	80042c0 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d115      	bne.n	800416a <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414c:	4b5f      	ldr	r3, [pc, #380]	@ (80042cc <HAL_COMP_Init+0x1cc>)
 800414e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004150:	4a5e      	ldr	r2, [pc, #376]	@ (80042cc <HAL_COMP_Init+0x1cc>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6613      	str	r3, [r2, #96]	@ 0x60
 8004158:	4b5c      	ldr	r3, [pc, #368]	@ (80042cc <HAL_COMP_Init+0x1cc>)
 800415a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fe f8d3 	bl	8002310 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004174:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b4b      	ldr	r3, [pc, #300]	@ (80042d0 <HAL_COMP_Init+0x1d0>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	6979      	ldr	r1, [r7, #20]
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b6:	d106      	bne.n	80041c6 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80041b8:	4b46      	ldr	r3, [pc, #280]	@ (80042d4 <HAL_COMP_Init+0x1d4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a45      	ldr	r2, [pc, #276]	@ (80042d4 <HAL_COMP_Init+0x1d4>)
 80041be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e005      	b.n	80041d2 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80041c6:	4b43      	ldr	r3, [pc, #268]	@ (80042d4 <HAL_COMP_Init+0x1d4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a42      	ldr	r2, [pc, #264]	@ (80042d4 <HAL_COMP_Init+0x1d4>)
 80041cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d0:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d016      	beq.n	800420e <HAL_COMP_Init+0x10e>
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d113      	bne.n	800420e <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e6:	4b3c      	ldr	r3, [pc, #240]	@ (80042d8 <HAL_COMP_Init+0x1d8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	4a3b      	ldr	r2, [pc, #236]	@ (80042dc <HAL_COMP_Init+0x1dc>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004200:	e002      	b.n	8004208 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b01      	subs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f9      	bne.n	8004202 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a33      	ldr	r2, [pc, #204]	@ (80042e0 <HAL_COMP_Init+0x1e0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d102      	bne.n	800421e <HAL_COMP_Init+0x11e>
 8004218:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800421c:	e001      	b.n	8004222 <HAL_COMP_Init+0x122>
 800421e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004222:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d037      	beq.n	80042a0 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800423c:	6938      	ldr	r0, [r7, #16]
 800423e:	f7ff ff03 	bl	8004048 <LL_EXTI_EnableRisingTrig_0_31>
 8004242:	e002      	b.n	800424a <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004244:	6938      	ldr	r0, [r7, #16]
 8004246:	f7ff ff11 	bl	800406c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004256:	6938      	ldr	r0, [r7, #16]
 8004258:	f7ff ff1c 	bl	8004094 <LL_EXTI_EnableFallingTrig_0_31>
 800425c:	e002      	b.n	8004264 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800425e:	6938      	ldr	r0, [r7, #16]
 8004260:	f7ff ff2a 	bl	80040b8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004264:	6938      	ldr	r0, [r7, #16]
 8004266:	f7ff ff3b 	bl	80040e0 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004276:	6938      	ldr	r0, [r7, #16]
 8004278:	f7ff fec0 	bl	8003ffc <LL_EXTI_EnableEvent_0_31>
 800427c:	e002      	b.n	8004284 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800427e:	6938      	ldr	r0, [r7, #16]
 8004280:	f7ff fece 	bl	8004020 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004290:	6938      	ldr	r0, [r7, #16]
 8004292:	f7ff fe8d 	bl	8003fb0 <LL_EXTI_EnableIT_0_31>
 8004296:	e009      	b.n	80042ac <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004298:	6938      	ldr	r0, [r7, #16]
 800429a:	f7ff fe9b 	bl	8003fd4 <LL_EXTI_DisableIT_0_31>
 800429e:	e005      	b.n	80042ac <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80042a0:	6938      	ldr	r0, [r7, #16]
 80042a2:	f7ff febd 	bl	8004020 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80042a6:	6938      	ldr	r0, [r7, #16]
 80042a8:	f7ff fe94 	bl	8003fd4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d103      	bne.n	80042c0 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80042c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	ff207d03 	.word	0xff207d03
 80042d4:	40010204 	.word	0x40010204
 80042d8:	20000000 	.word	0x20000000
 80042dc:	053e2d63 	.word	0x053e2d63
 80042e0:	40010200 	.word	0x40010200

080042e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004300:	4013      	ands	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800430c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004316:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	60d3      	str	r3, [r2, #12]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <__NVIC_GetPriorityGrouping+0x18>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f003 0307 	and.w	r3, r3, #7
}
 800433a:	4618      	mov	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db0a      	blt.n	8004372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	490c      	ldr	r1, [pc, #48]	@ (8004394 <__NVIC_SetPriority+0x4c>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	440b      	add	r3, r1
 800436c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004370:	e00a      	b.n	8004388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4908      	ldr	r1, [pc, #32]	@ (8004398 <__NVIC_SetPriority+0x50>)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3b04      	subs	r3, #4
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	440b      	add	r3, r1
 8004386:	761a      	strb	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e100 	.word	0xe000e100
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	@ 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f1c3 0307 	rsb	r3, r3, #7
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	bf28      	it	cs
 80043ba:	2304      	movcs	r3, #4
 80043bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3304      	adds	r3, #4
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d902      	bls.n	80043cc <NVIC_EncodePriority+0x30>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3b03      	subs	r3, #3
 80043ca:	e000      	b.n	80043ce <NVIC_EncodePriority+0x32>
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	401a      	ands	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43d9      	mvns	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f4:	4313      	orrs	r3, r2
         );
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	@ 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004414:	d301      	bcc.n	800441a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004416:	2301      	movs	r3, #1
 8004418:	e00f      	b.n	800443a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441a:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <SysTick_Config+0x40>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004422:	210f      	movs	r1, #15
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	f7ff ff8e 	bl	8004348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <SysTick_Config+0x40>)
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004432:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <SysTick_Config+0x40>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000e010 	.word	0xe000e010

08004448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff47 	bl	80042e4 <__NVIC_SetPriorityGrouping>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b086      	sub	sp, #24
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004470:	f7ff ff5c 	bl	800432c <__NVIC_GetPriorityGrouping>
 8004474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f7ff ff8e 	bl	800439c <NVIC_EncodePriority>
 8004480:	4602      	mov	r2, r0
 8004482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ff5d 	bl	8004348 <__NVIC_SetPriority>
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ffb0 	bl	8004404 <SysTick_Config>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044be:	e166      	b.n	800478e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	2101      	movs	r1, #1
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8158 	beq.w	8004788 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d005      	beq.n	80044f0 <HAL_GPIO_Init+0x40>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d130      	bne.n	8004552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004526:	2201      	movs	r2, #1
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0201 	and.w	r2, r3, #1
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b03      	cmp	r3, #3
 800455c:	d017      	beq.n	800458e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d123      	bne.n	80045e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	08da      	lsrs	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3208      	adds	r2, #8
 80045a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	220f      	movs	r2, #15
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	08da      	lsrs	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3208      	adds	r2, #8
 80045dc:	6939      	ldr	r1, [r7, #16]
 80045de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	2203      	movs	r2, #3
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80b2 	beq.w	8004788 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004624:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <HAL_GPIO_Init+0x2fc>)
 8004626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004628:	4a60      	ldr	r2, [pc, #384]	@ (80047ac <HAL_GPIO_Init+0x2fc>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004630:	4b5e      	ldr	r3, [pc, #376]	@ (80047ac <HAL_GPIO_Init+0x2fc>)
 8004632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800463c:	4a5c      	ldr	r2, [pc, #368]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	3302      	adds	r3, #2
 8004644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	220f      	movs	r2, #15
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004666:	d02b      	beq.n	80046c0 <HAL_GPIO_Init+0x210>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a52      	ldr	r2, [pc, #328]	@ (80047b4 <HAL_GPIO_Init+0x304>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d025      	beq.n	80046bc <HAL_GPIO_Init+0x20c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a51      	ldr	r2, [pc, #324]	@ (80047b8 <HAL_GPIO_Init+0x308>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d01f      	beq.n	80046b8 <HAL_GPIO_Init+0x208>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a50      	ldr	r2, [pc, #320]	@ (80047bc <HAL_GPIO_Init+0x30c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d019      	beq.n	80046b4 <HAL_GPIO_Init+0x204>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a4f      	ldr	r2, [pc, #316]	@ (80047c0 <HAL_GPIO_Init+0x310>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <HAL_GPIO_Init+0x200>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a4e      	ldr	r2, [pc, #312]	@ (80047c4 <HAL_GPIO_Init+0x314>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00d      	beq.n	80046ac <HAL_GPIO_Init+0x1fc>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a4d      	ldr	r2, [pc, #308]	@ (80047c8 <HAL_GPIO_Init+0x318>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <HAL_GPIO_Init+0x1f8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a4c      	ldr	r2, [pc, #304]	@ (80047cc <HAL_GPIO_Init+0x31c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_GPIO_Init+0x1f4>
 80046a0:	2307      	movs	r3, #7
 80046a2:	e00e      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046a4:	2308      	movs	r3, #8
 80046a6:	e00c      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046a8:	2306      	movs	r3, #6
 80046aa:	e00a      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046ac:	2305      	movs	r3, #5
 80046ae:	e008      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046b0:	2304      	movs	r3, #4
 80046b2:	e006      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046b4:	2303      	movs	r3, #3
 80046b6:	e004      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e002      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_GPIO_Init+0x212>
 80046c0:	2300      	movs	r3, #0
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	f002 0203 	and.w	r2, r2, #3
 80046c8:	0092      	lsls	r2, r2, #2
 80046ca:	4093      	lsls	r3, r2
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046d2:	4937      	ldr	r1, [pc, #220]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	3302      	adds	r3, #2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046e0:	4b3b      	ldr	r3, [pc, #236]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004704:	4a32      	ldr	r2, [pc, #200]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800470a:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800472e:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004734:	4b26      	ldr	r3, [pc, #152]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	43db      	mvns	r3, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004758:	4a1d      	ldr	r2, [pc, #116]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800475e:	4b1c      	ldr	r3, [pc, #112]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	43db      	mvns	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004782:	4a13      	ldr	r2, [pc, #76]	@ (80047d0 <HAL_GPIO_Init+0x320>)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3301      	adds	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	f47f ae91 	bne.w	80044c0 <HAL_GPIO_Init+0x10>
  }
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40010000 	.word	0x40010000
 80047b4:	48000400 	.word	0x48000400
 80047b8:	48000800 	.word	0x48000800
 80047bc:	48000c00 	.word	0x48000c00
 80047c0:	48001000 	.word	0x48001000
 80047c4:	48001400 	.word	0x48001400
 80047c8:	48001800 	.word	0x48001800
 80047cc:	48001c00 	.word	0x48001c00
 80047d0:	40010400 	.word	0x40010400

080047d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	e001      	b.n	80047f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
 8004810:	4613      	mov	r3, r2
 8004812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004814:	787b      	ldrb	r3, [r7, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004820:	e002      	b.n	8004828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004838:	4b05      	ldr	r3, [pc, #20]	@ (8004850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a04      	ldr	r2, [pc, #16]	@ (8004850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800483e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004842:	6013      	str	r3, [r2, #0]
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40007000 	.word	0x40007000

08004854 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004858:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <HAL_PWREx_GetVoltageRange+0x3c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004864:	d102      	bne.n	800486c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800486a:	e00b      	b.n	8004884 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800486c:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <HAL_PWREx_GetVoltageRange+0x3c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487a:	d102      	bne.n	8004882 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800487c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004880:	e000      	b.n	8004884 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004882:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40007000 	.word	0x40007000

08004894 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d141      	bne.n	8004926 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048a2:	4b4b      	ldr	r3, [pc, #300]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ae:	d131      	bne.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b0:	4b47      	ldr	r3, [pc, #284]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b6:	4a46      	ldr	r2, [pc, #280]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c0:	4b43      	ldr	r3, [pc, #268]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048c8:	4a41      	ldr	r2, [pc, #260]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80048d0:	4b40      	ldr	r3, [pc, #256]	@ (80049d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2232      	movs	r2, #50	@ 0x32
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	4a3f      	ldr	r2, [pc, #252]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	0c9b      	lsrs	r3, r3, #18
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e6:	e002      	b.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ee:	4b38      	ldr	r3, [pc, #224]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fa:	d102      	bne.n	8004902 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f2      	bne.n	80048e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004902:	4b33      	ldr	r3, [pc, #204]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800490e:	d158      	bne.n	80049c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e057      	b.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004914:	4b2e      	ldr	r3, [pc, #184]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491a:	4a2d      	ldr	r2, [pc, #180]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004920:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004924:	e04d      	b.n	80049c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800492c:	d141      	bne.n	80049b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800492e:	4b28      	ldr	r3, [pc, #160]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d131      	bne.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800493c:	4b24      	ldr	r3, [pc, #144]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004942:	4a23      	ldr	r2, [pc, #140]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004948:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800494c:	4b20      	ldr	r3, [pc, #128]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004954:	4a1e      	ldr	r2, [pc, #120]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800495a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800495c:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2232      	movs	r2, #50	@ 0x32
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0c9b      	lsrs	r3, r3, #18
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004972:	e002      	b.n	800497a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800497a:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004986:	d102      	bne.n	800498e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f2      	bne.n	8004974 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498e:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499a:	d112      	bne.n	80049c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e011      	b.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a6:	4a0a      	ldr	r2, [pc, #40]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049b0:	e007      	b.n	80049c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049b2:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049ba:	4a05      	ldr	r2, [pc, #20]	@ (80049d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40007000 	.word	0x40007000
 80049d4:	20000000 	.word	0x20000000
 80049d8:	431bde83 	.word	0x431bde83

080049dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80049e0:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049ea:	6053      	str	r3, [r2, #4]
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40007000 	.word	0x40007000

080049fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f000 bc08 	b.w	8005220 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a10:	4b96      	ldr	r3, [pc, #600]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a1a:	4b94      	ldr	r3, [pc, #592]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80e4 	beq.w	8004bfa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_RCC_OscConfig+0x4c>
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b0c      	cmp	r3, #12
 8004a3c:	f040 808b 	bne.w	8004b56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	f040 8087 	bne.w	8004b56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a48:	4b88      	ldr	r3, [pc, #544]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x64>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e3df      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	4b81      	ldr	r3, [pc, #516]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <HAL_RCC_OscConfig+0x7e>
 8004a70:	4b7e      	ldr	r3, [pc, #504]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a78:	e005      	b.n	8004a86 <HAL_RCC_OscConfig+0x8a>
 8004a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d223      	bcs.n	8004ad2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fdcc 	bl	800562c <RCC_SetFlashLatencyFromMSIRange>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e3c0      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9e:	4b73      	ldr	r3, [pc, #460]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a72      	ldr	r2, [pc, #456]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004aa4:	f043 0308 	orr.w	r3, r3, #8
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b70      	ldr	r3, [pc, #448]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	496d      	ldr	r1, [pc, #436]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004abc:	4b6b      	ldr	r3, [pc, #428]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	4968      	ldr	r1, [pc, #416]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]
 8004ad0:	e025      	b.n	8004b1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ad2:	4b66      	ldr	r3, [pc, #408]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a65      	ldr	r2, [pc, #404]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b63      	ldr	r3, [pc, #396]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	4960      	ldr	r1, [pc, #384]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004af0:	4b5e      	ldr	r3, [pc, #376]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	495b      	ldr	r1, [pc, #364]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fd8c 	bl	800562c <RCC_SetFlashLatencyFromMSIRange>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e380      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b1e:	f000 fcc1 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b51      	ldr	r3, [pc, #324]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	4950      	ldr	r1, [pc, #320]	@ (8004c70 <HAL_RCC_OscConfig+0x274>)
 8004b30:	5ccb      	ldrb	r3, [r1, r3]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c74 <HAL_RCC_OscConfig+0x278>)
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004c78 <HAL_RCC_OscConfig+0x27c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f9d6 	bl	8002ef4 <HAL_InitTick>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d052      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	e364      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d032      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b5e:	4b43      	ldr	r3, [pc, #268]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a42      	ldr	r2, [pc, #264]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b6a:	f7fe fa13 	bl	8002f94 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b72:	f7fe fa0f 	bl	8002f94 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e34d      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b84:	4b39      	ldr	r3, [pc, #228]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b90:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a35      	ldr	r2, [pc, #212]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b96:	f043 0308 	orr.w	r3, r3, #8
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b33      	ldr	r3, [pc, #204]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	4930      	ldr	r1, [pc, #192]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bae:	4b2f      	ldr	r3, [pc, #188]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	492b      	ldr	r1, [pc, #172]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
 8004bc2:	e01a      	b.n	8004bfa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bc4:	4b29      	ldr	r3, [pc, #164]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a28      	ldr	r2, [pc, #160]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe f9e0 	bl	8002f94 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bd8:	f7fe f9dc 	bl	8002f94 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e31a      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bea:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x1dc>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d073      	beq.n	8004cee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_OscConfig+0x21c>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d10e      	bne.n	8004c30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d10b      	bne.n	8004c30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d063      	beq.n	8004cec <HAL_RCC_OscConfig+0x2f0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d15f      	bne.n	8004cec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e2f7      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c38:	d106      	bne.n	8004c48 <HAL_RCC_OscConfig+0x24c>
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e025      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c50:	d114      	bne.n	8004c7c <HAL_RCC_OscConfig+0x280>
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a05      	ldr	r2, [pc, #20]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4b03      	ldr	r3, [pc, #12]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a02      	ldr	r2, [pc, #8]	@ (8004c6c <HAL_RCC_OscConfig+0x270>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e013      	b.n	8004c94 <HAL_RCC_OscConfig+0x298>
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	0800c1ec 	.word	0x0800c1ec
 8004c74:	20000000 	.word	0x20000000
 8004c78:	20000004 	.word	0x20000004
 8004c7c:	4ba0      	ldr	r3, [pc, #640]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a9f      	ldr	r2, [pc, #636]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	4b9d      	ldr	r3, [pc, #628]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a9c      	ldr	r2, [pc, #624]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d013      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe f97a 	bl	8002f94 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fe f976 	bl	8002f94 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	@ 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e2b4      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb6:	4b92      	ldr	r3, [pc, #584]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x2a8>
 8004cc2:	e014      	b.n	8004cee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fe f966 	bl	8002f94 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fe f962 	bl	8002f94 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	@ 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e2a0      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cde:	4b88      	ldr	r3, [pc, #544]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x2d0>
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d060      	beq.n	8004dbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_OscConfig+0x310>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d119      	bne.n	8004d3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d116      	bne.n	8004d3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_OscConfig+0x328>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e27d      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b76      	ldr	r3, [pc, #472]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	4973      	ldr	r1, [pc, #460]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d38:	e040      	b.n	8004dbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d023      	beq.n	8004d8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d42:	4b6f      	ldr	r3, [pc, #444]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6e      	ldr	r2, [pc, #440]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7fe f921 	bl	8002f94 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d56:	f7fe f91d 	bl	8002f94 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e25b      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d68:	4b65      	ldr	r3, [pc, #404]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d74:	4b62      	ldr	r3, [pc, #392]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	495f      	ldr	r1, [pc, #380]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	604b      	str	r3, [r1, #4]
 8004d88:	e018      	b.n	8004dbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a5c      	ldr	r2, [pc, #368]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fe f8fd 	bl	8002f94 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d9e:	f7fe f8f9 	bl	8002f94 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e237      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004db0:	4b53      	ldr	r3, [pc, #332]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d03c      	beq.n	8004e42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01c      	beq.n	8004e0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fe f8d8 	bl	8002f94 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de8:	f7fe f8d4 	bl	8002f94 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e212      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dfa:	4b41      	ldr	r3, [pc, #260]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ef      	beq.n	8004de8 <HAL_RCC_OscConfig+0x3ec>
 8004e08:	e01b      	b.n	8004e42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e10:	4a3b      	ldr	r2, [pc, #236]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fe f8bb 	bl	8002f94 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e22:	f7fe f8b7 	bl	8002f94 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1f5      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e34:	4b32      	ldr	r3, [pc, #200]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ef      	bne.n	8004e22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80a6 	beq.w	8004f9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e50:	2300      	movs	r3, #0
 8004e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e54:	4b2a      	ldr	r3, [pc, #168]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e60:	4b27      	ldr	r3, [pc, #156]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e64:	4a26      	ldr	r2, [pc, #152]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e6c:	4b24      	ldr	r3, [pc, #144]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7c:	4b21      	ldr	r3, [pc, #132]	@ (8004f04 <HAL_RCC_OscConfig+0x508>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d118      	bne.n	8004eba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e88:	4b1e      	ldr	r3, [pc, #120]	@ (8004f04 <HAL_RCC_OscConfig+0x508>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f04 <HAL_RCC_OscConfig+0x508>)
 8004e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e94:	f7fe f87e 	bl	8002f94 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9c:	f7fe f87a 	bl	8002f94 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1b8      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eae:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <HAL_RCC_OscConfig+0x508>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d108      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4d8>
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ed2:	e029      	b.n	8004f28 <HAL_RCC_OscConfig+0x52c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b05      	cmp	r3, #5
 8004eda:	d115      	bne.n	8004f08 <HAL_RCC_OscConfig+0x50c>
 8004edc:	4b08      	ldr	r3, [pc, #32]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee2:	4a07      	ldr	r2, [pc, #28]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eec:	4b04      	ldr	r3, [pc, #16]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	4a03      	ldr	r2, [pc, #12]	@ (8004f00 <HAL_RCC_OscConfig+0x504>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004efc:	e014      	b.n	8004f28 <HAL_RCC_OscConfig+0x52c>
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40007000 	.word	0x40007000
 8004f08:	4b9d      	ldr	r3, [pc, #628]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	4a9c      	ldr	r2, [pc, #624]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f18:	4b99      	ldr	r3, [pc, #612]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1e:	4a98      	ldr	r2, [pc, #608]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d016      	beq.n	8004f5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fe f830 	bl	8002f94 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fe f82c 	bl	8002f94 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e168      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4e:	4b8c      	ldr	r3, [pc, #560]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ed      	beq.n	8004f38 <HAL_RCC_OscConfig+0x53c>
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fe f819 	bl	8002f94 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f64:	e00a      	b.n	8004f7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f66:	f7fe f815 	bl	8002f94 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e151      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f7c:	4b80      	ldr	r3, [pc, #512]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ed      	bne.n	8004f66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8a:	7ffb      	ldrb	r3, [r7, #31]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f90:	4b7b      	ldr	r3, [pc, #492]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f94:	4a7a      	ldr	r2, [pc, #488]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d03c      	beq.n	8005022 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01c      	beq.n	8004fea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fb0:	4b73      	ldr	r3, [pc, #460]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fb6:	4a72      	ldr	r2, [pc, #456]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fd ffe8 	bl	8002f94 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc8:	f7fd ffe4 	bl	8002f94 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e122      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fda:	4b69      	ldr	r3, [pc, #420]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ef      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x5cc>
 8004fe8:	e01b      	b.n	8005022 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fea:	4b65      	ldr	r3, [pc, #404]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ff0:	4a63      	ldr	r2, [pc, #396]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffa:	f7fd ffcb 	bl	8002f94 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005002:	f7fd ffc7 	bl	8002f94 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e105      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005014:	4b5a      	ldr	r3, [pc, #360]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8005016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1ef      	bne.n	8005002 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80f9 	beq.w	800521e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	2b02      	cmp	r3, #2
 8005032:	f040 80cf 	bne.w	80051d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005036:	4b52      	ldr	r3, [pc, #328]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f003 0203 	and.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	429a      	cmp	r2, r3
 8005048:	d12c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005054:	3b01      	subs	r3, #1
 8005056:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d123      	bne.n	80050a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005066:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d11b      	bne.n	80050a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005076:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d113      	bne.n	80050a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	3b01      	subs	r3, #1
 800508a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d109      	bne.n	80050a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	3b01      	subs	r3, #1
 800509e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d071      	beq.n	8005188 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d068      	beq.n	800517c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050aa:	4b35      	ldr	r3, [pc, #212]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d105      	bne.n	80050c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050b6:	4b32      	ldr	r3, [pc, #200]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0ac      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 80050cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050d2:	f7fd ff5f 	bl	8002f94 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050da:	f7fd ff5b 	bl	8002f94 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e099      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ec:	4b24      	ldr	r3, [pc, #144]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f0      	bne.n	80050da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f8:	4b21      	ldr	r3, [pc, #132]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	4b21      	ldr	r3, [pc, #132]	@ (8005184 <HAL_RCC_OscConfig+0x788>)
 80050fe:	4013      	ands	r3, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005108:	3a01      	subs	r2, #1
 800510a:	0112      	lsls	r2, r2, #4
 800510c:	4311      	orrs	r1, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005112:	0212      	lsls	r2, r2, #8
 8005114:	4311      	orrs	r1, r2
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800511a:	0852      	lsrs	r2, r2, #1
 800511c:	3a01      	subs	r2, #1
 800511e:	0552      	lsls	r2, r2, #21
 8005120:	4311      	orrs	r1, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005126:	0852      	lsrs	r2, r2, #1
 8005128:	3a01      	subs	r2, #1
 800512a:	0652      	lsls	r2, r2, #25
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005132:	06d2      	lsls	r2, r2, #27
 8005134:	430a      	orrs	r2, r1
 8005136:	4912      	ldr	r1, [pc, #72]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8005138:	4313      	orrs	r3, r2
 800513a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800513c:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0f      	ldr	r2, [pc, #60]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8005142:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005146:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005148:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a0c      	ldr	r2, [pc, #48]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 800514e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005154:	f7fd ff1e 	bl	8002f94 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515c:	f7fd ff1a 	bl	8002f94 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e058      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516e:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <HAL_RCC_OscConfig+0x784>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800517a:	e050      	b.n	800521e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e04f      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
 8005180:	40021000 	.word	0x40021000
 8005184:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005188:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d144      	bne.n	800521e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005194:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a23      	ldr	r2, [pc, #140]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 800519a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800519e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051a0:	4b21      	ldr	r3, [pc, #132]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a20      	ldr	r2, [pc, #128]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 80051a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ac:	f7fd fef2 	bl	8002f94 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fd feee 	bl	8002f94 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e02c      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c6:	4b18      	ldr	r3, [pc, #96]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x7b8>
 80051d2:	e024      	b.n	800521e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d01f      	beq.n	800521a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a12      	ldr	r2, [pc, #72]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 80051e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fd fed5 	bl	8002f94 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fd fed1 	bl	8002f94 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e00f      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	4905      	ldr	r1, [pc, #20]	@ (8005228 <HAL_RCC_OscConfig+0x82c>)
 8005212:	4b06      	ldr	r3, [pc, #24]	@ (800522c <HAL_RCC_OscConfig+0x830>)
 8005214:	4013      	ands	r3, r2
 8005216:	60cb      	str	r3, [r1, #12]
 8005218:	e001      	b.n	800521e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40021000 	.word	0x40021000
 800522c:	feeefffc 	.word	0xfeeefffc

08005230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e11d      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005248:	4b90      	ldr	r3, [pc, #576]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d910      	bls.n	8005278 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b8d      	ldr	r3, [pc, #564]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 020f 	bic.w	r2, r3, #15
 800525e:	498b      	ldr	r1, [pc, #556]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005266:	4b89      	ldr	r3, [pc, #548]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e105      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d010      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	4b81      	ldr	r3, [pc, #516]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005290:	429a      	cmp	r2, r3
 8005292:	d908      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005294:	4b7e      	ldr	r3, [pc, #504]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	497b      	ldr	r1, [pc, #492]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d079      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d11e      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ba:	4b75      	ldr	r3, [pc, #468]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0dc      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80052ca:	f000 fa09 	bl	80056e0 <RCC_GetSysClockFreqFromPLLSource>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4a70      	ldr	r2, [pc, #448]	@ (8005494 <HAL_RCC_ClockConfig+0x264>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d946      	bls.n	8005364 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052d6:	4b6e      	ldr	r3, [pc, #440]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d140      	bne.n	8005364 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052e2:	4b6b      	ldr	r3, [pc, #428]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ea:	4a69      	ldr	r2, [pc, #420]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80052ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052f2:	2380      	movs	r3, #128	@ 0x80
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e035      	b.n	8005364 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005300:	4b63      	ldr	r3, [pc, #396]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d115      	bne.n	8005338 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0b9      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d107      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005318:	4b5d      	ldr	r3, [pc, #372]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0ad      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005328:	4b59      	ldr	r3, [pc, #356]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0a5      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005338:	f000 f8b4 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800533c:	4603      	mov	r3, r0
 800533e:	4a55      	ldr	r2, [pc, #340]	@ (8005494 <HAL_RCC_ClockConfig+0x264>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d90f      	bls.n	8005364 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005344:	4b52      	ldr	r3, [pc, #328]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005350:	4b4f      	ldr	r3, [pc, #316]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005358:	4a4d      	ldr	r2, [pc, #308]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 800535a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005364:	4b4a      	ldr	r3, [pc, #296]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f023 0203 	bic.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4947      	ldr	r1, [pc, #284]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005376:	f7fd fe0d 	bl	8002f94 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537c:	e00a      	b.n	8005394 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537e:	f7fd fe09 	bl	8002f94 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538c:	4293      	cmp	r3, r2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e077      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005394:	4b3e      	ldr	r3, [pc, #248]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 020c 	and.w	r2, r3, #12
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d1eb      	bne.n	800537e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b80      	cmp	r3, #128	@ 0x80
 80053aa:	d105      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053ac:	4b38      	ldr	r3, [pc, #224]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a37      	ldr	r2, [pc, #220]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80053b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d010      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d208      	bcs.n	80053e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	492b      	ldr	r1, [pc, #172]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e6:	4b29      	ldr	r3, [pc, #164]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d210      	bcs.n	8005416 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f4:	4b25      	ldr	r3, [pc, #148]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 020f 	bic.w	r2, r3, #15
 80053fc:	4923      	ldr	r1, [pc, #140]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	4313      	orrs	r3, r2
 8005402:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005404:	4b21      	ldr	r3, [pc, #132]	@ (800548c <HAL_RCC_ClockConfig+0x25c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d001      	beq.n	8005416 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e036      	b.n	8005484 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005422:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4918      	ldr	r1, [pc, #96]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005440:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	4910      	ldr	r1, [pc, #64]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005454:	f000 f826 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <HAL_RCC_ClockConfig+0x260>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	490c      	ldr	r1, [pc, #48]	@ (8005498 <HAL_RCC_ClockConfig+0x268>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	4a0a      	ldr	r2, [pc, #40]	@ (800549c <HAL_RCC_ClockConfig+0x26c>)
 8005472:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <HAL_RCC_ClockConfig+0x270>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f7fd fd3b 	bl	8002ef4 <HAL_InitTick>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]

  return status;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40022000 	.word	0x40022000
 8005490:	40021000 	.word	0x40021000
 8005494:	04c4b400 	.word	0x04c4b400
 8005498:	0800c1ec 	.word	0x0800c1ec
 800549c:	20000000 	.word	0x20000000
 80054a0:	20000004 	.word	0x20000004

080054a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	@ 0x24
 80054a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b2:	4b3e      	ldr	r3, [pc, #248]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
 80054ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054bc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x34>
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b0c      	cmp	r3, #12
 80054d0:	d121      	bne.n	8005516 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d11e      	bne.n	8005516 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054d8:	4b34      	ldr	r3, [pc, #208]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054e4:	4b31      	ldr	r3, [pc, #196]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 80054e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e005      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054f4:	4b2d      	ldr	r3, [pc, #180]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005500:	4a2b      	ldr	r2, [pc, #172]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10d      	bne.n	800552c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005514:	e00a      	b.n	800552c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b04      	cmp	r3, #4
 800551a:	d102      	bne.n	8005522 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800551c:	4b25      	ldr	r3, [pc, #148]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e004      	b.n	800552c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d101      	bne.n	800552c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005528:	4b23      	ldr	r3, [pc, #140]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800552a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b0c      	cmp	r3, #12
 8005530:	d134      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005532:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d003      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0xa6>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d003      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0xac>
 8005548:	e005      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800554a:	4b1a      	ldr	r3, [pc, #104]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800554c:	617b      	str	r3, [r7, #20]
      break;
 800554e:	e005      	b.n	800555c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005550:	4b19      	ldr	r3, [pc, #100]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005552:	617b      	str	r3, [r7, #20]
      break;
 8005554:	e002      	b.n	800555c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	617b      	str	r3, [r7, #20]
      break;
 800555a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800555c:	4b13      	ldr	r3, [pc, #76]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	3301      	adds	r3, #1
 8005568:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800556a:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	fb03 f202 	mul.w	r2, r3, r2
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	0e5b      	lsrs	r3, r3, #25
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	3301      	adds	r3, #1
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800559c:	69bb      	ldr	r3, [r7, #24]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3724      	adds	r7, #36	@ 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000
 80055b0:	0800c204 	.word	0x0800c204
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	007a1200 	.word	0x007a1200

080055bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b03      	ldr	r3, [pc, #12]	@ (80055d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000000 	.word	0x20000000

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055d8:	f7ff fff0 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4904      	ldr	r1, [pc, #16]	@ (80055fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021000 	.word	0x40021000
 80055fc:	0800c1fc 	.word	0x0800c1fc

08005600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005604:	f7ff ffda 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0adb      	lsrs	r3, r3, #11
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4904      	ldr	r1, [pc, #16]	@ (8005628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000
 8005628:	0800c1fc 	.word	0x0800c1fc

0800562c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005638:	4b27      	ldr	r3, [pc, #156]	@ (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800563a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005644:	f7ff f906 	bl	8004854 <HAL_PWREx_GetVoltageRange>
 8005648:	6178      	str	r0, [r7, #20]
 800564a:	e014      	b.n	8005676 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	4b22      	ldr	r3, [pc, #136]	@ (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800564e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005650:	4a21      	ldr	r2, [pc, #132]	@ (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005656:	6593      	str	r3, [r2, #88]	@ 0x58
 8005658:	4b1f      	ldr	r3, [pc, #124]	@ (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005664:	f7ff f8f6 	bl	8004854 <HAL_PWREx_GetVoltageRange>
 8005668:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800566a:	4b1b      	ldr	r3, [pc, #108]	@ (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800566c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566e:	4a1a      	ldr	r2, [pc, #104]	@ (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005674:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567c:	d10b      	bne.n	8005696 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b80      	cmp	r3, #128	@ 0x80
 8005682:	d913      	bls.n	80056ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2ba0      	cmp	r3, #160	@ 0xa0
 8005688:	d902      	bls.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800568a:	2302      	movs	r3, #2
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	e00d      	b.n	80056ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005690:	2301      	movs	r3, #1
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	e00a      	b.n	80056ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b7f      	cmp	r3, #127	@ 0x7f
 800569a:	d902      	bls.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800569c:	2302      	movs	r3, #2
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	e004      	b.n	80056ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b70      	cmp	r3, #112	@ 0x70
 80056a6:	d101      	bne.n	80056ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056a8:	2301      	movs	r3, #1
 80056aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056ac:	4b0b      	ldr	r3, [pc, #44]	@ (80056dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f023 020f 	bic.w	r2, r3, #15
 80056b4:	4909      	ldr	r1, [pc, #36]	@ (80056dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056bc:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d001      	beq.n	80056ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40022000 	.word	0x40022000

080056e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056e6:	4b2d      	ldr	r3, [pc, #180]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d00b      	beq.n	800570e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d825      	bhi.n	8005748 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d008      	beq.n	8005714 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d11f      	bne.n	8005748 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005708:	4b25      	ldr	r3, [pc, #148]	@ (80057a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800570a:	613b      	str	r3, [r7, #16]
    break;
 800570c:	e01f      	b.n	800574e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800570e:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005710:	613b      	str	r3, [r7, #16]
    break;
 8005712:	e01c      	b.n	800574e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005714:	4b21      	ldr	r3, [pc, #132]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005720:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e005      	b.n	800573c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005730:	4b1a      	ldr	r3, [pc, #104]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800573c:	4a1a      	ldr	r2, [pc, #104]	@ (80057a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005744:	613b      	str	r3, [r7, #16]
    break;
 8005746:	e002      	b.n	800574e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
    break;
 800574c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	3301      	adds	r3, #1
 800575a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800575c:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	fb03 f202 	mul.w	r2, r3, r2
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005774:	4b09      	ldr	r3, [pc, #36]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	0e5b      	lsrs	r3, r3, #25
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	3301      	adds	r3, #1
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800578e:	683b      	ldr	r3, [r7, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	40021000 	.word	0x40021000
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	007a1200 	.word	0x007a1200
 80057a8:	0800c204 	.word	0x0800c204

080057ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057b4:	2300      	movs	r3, #0
 80057b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057b8:	2300      	movs	r3, #0
 80057ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d040      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057cc:	2b80      	cmp	r3, #128	@ 0x80
 80057ce:	d02a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057d0:	2b80      	cmp	r3, #128	@ 0x80
 80057d2:	d825      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057d4:	2b60      	cmp	r3, #96	@ 0x60
 80057d6:	d026      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057d8:	2b60      	cmp	r3, #96	@ 0x60
 80057da:	d821      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	d006      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80057e0:	2b40      	cmp	r3, #64	@ 0x40
 80057e2:	d81d      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d010      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80057ec:	e018      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057ee:	4b89      	ldr	r3, [pc, #548]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	4a88      	ldr	r2, [pc, #544]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057fa:	e015      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fa34 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800580c:	e00c      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3320      	adds	r3, #32
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fb1f 	bl	8006e58 <RCCEx_PLLSAI2_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	74fb      	strb	r3, [r7, #19]
      break;
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800582e:	4b79      	ldr	r3, [pc, #484]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005834:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800583c:	4975      	ldr	r1, [pc, #468]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005844:	e001      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	7cfb      	ldrb	r3, [r7, #19]
 8005848:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d047      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800585e:	d030      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005864:	d82a      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800586a:	d02a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800586c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005870:	d824      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005876:	d008      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800587c:	d81e      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005886:	d010      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005888:	e018      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800588a:	4b62      	ldr	r3, [pc, #392]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	4a61      	ldr	r2, [pc, #388]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005894:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005896:	e015      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3304      	adds	r3, #4
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 f9e6 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058a8:	e00c      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3320      	adds	r3, #32
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 fad1 	bl	8006e58 <RCCEx_PLLSAI2_Config>
 80058b6:	4603      	mov	r3, r0
 80058b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	74fb      	strb	r3, [r7, #19]
      break;
 80058c0:	e000      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80058c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058ca:	4b52      	ldr	r3, [pc, #328]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d8:	494e      	ldr	r1, [pc, #312]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80058e0:	e001      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	7cfb      	ldrb	r3, [r7, #19]
 80058e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 809f 	beq.w	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f4:	2300      	movs	r3, #0
 80058f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058f8:	4b46      	ldr	r3, [pc, #280]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00d      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800590e:	4b41      	ldr	r3, [pc, #260]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005912:	4a40      	ldr	r2, [pc, #256]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005918:	6593      	str	r3, [r2, #88]	@ 0x58
 800591a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005926:	2301      	movs	r3, #1
 8005928:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800592a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005936:	f7fd fb2d 	bl	8002f94 <HAL_GetTick>
 800593a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800593c:	e009      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593e:	f7fd fb29 	bl	8002f94 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d902      	bls.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	74fb      	strb	r3, [r7, #19]
        break;
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0ef      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800595e:	7cfb      	ldrb	r3, [r7, #19]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d15b      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005964:	4b2b      	ldr	r3, [pc, #172]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01f      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	429a      	cmp	r2, r3
 8005980:	d019      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005982:	4b24      	ldr	r3, [pc, #144]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800598e:	4b21      	ldr	r3, [pc, #132]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005994:	4a1f      	ldr	r2, [pc, #124]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800599e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059ae:	4a19      	ldr	r2, [pc, #100]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d016      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fd fae8 	bl	8002f94 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c6:	e00b      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c8:	f7fd fae4 	bl	8002f94 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d902      	bls.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	74fb      	strb	r3, [r7, #19]
            break;
 80059de:	e006      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ec      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059f4:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a04:	4903      	ldr	r1, [pc, #12]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a0c:	e008      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a0e:	7cfb      	ldrb	r3, [r7, #19]
 8005a10:	74bb      	strb	r3, [r7, #18]
 8005a12:	e005      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a20:	7c7b      	ldrb	r3, [r7, #17]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d105      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a26:	4ba0      	ldr	r3, [pc, #640]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2a:	4a9f      	ldr	r2, [pc, #636]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a3e:	4b9a      	ldr	r3, [pc, #616]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a44:	f023 0203 	bic.w	r2, r3, #3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4c:	4996      	ldr	r1, [pc, #600]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a60:	4b91      	ldr	r3, [pc, #580]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	f023 020c 	bic.w	r2, r3, #12
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	498e      	ldr	r1, [pc, #568]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a82:	4b89      	ldr	r3, [pc, #548]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a90:	4985      	ldr	r1, [pc, #532]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005aa4:	4b80      	ldr	r3, [pc, #512]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab2:	497d      	ldr	r1, [pc, #500]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ac6:	4b78      	ldr	r3, [pc, #480]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005acc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad4:	4974      	ldr	r1, [pc, #464]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af6:	496c      	ldr	r1, [pc, #432]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b18:	4963      	ldr	r1, [pc, #396]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b3a:	495b      	ldr	r1, [pc, #364]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b4e:	4b56      	ldr	r3, [pc, #344]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5c:	4952      	ldr	r1, [pc, #328]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b70:	4b4d      	ldr	r3, [pc, #308]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7e:	494a      	ldr	r1, [pc, #296]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b92:	4b45      	ldr	r3, [pc, #276]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba0:	4941      	ldr	r1, [pc, #260]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bba:	f023 0203 	bic.w	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc2:	4939      	ldr	r1, [pc, #228]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d028      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bd6:	4b34      	ldr	r3, [pc, #208]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bdc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be4:	4930      	ldr	r1, [pc, #192]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bf4:	d106      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c00:	60d3      	str	r3, [r2, #12]
 8005c02:	e011      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c0c:	d10c      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3304      	adds	r3, #4
 8005c12:	2101      	movs	r1, #1
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f82b 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c1e:	7cfb      	ldrb	r3, [r7, #19]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005c24:	7cfb      	ldrb	r3, [r7, #19]
 8005c26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d04d      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c3c:	d108      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c44:	4a18      	ldr	r2, [pc, #96]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c4a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005c4e:	e012      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005c50:	4b15      	ldr	r3, [pc, #84]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c56:	4a14      	ldr	r2, [pc, #80]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c5c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005c60:	4b11      	ldr	r3, [pc, #68]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c6e:	490e      	ldr	r1, [pc, #56]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c80:	4b09      	ldr	r3, [pc, #36]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4a08      	ldr	r2, [pc, #32]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c8a:	60d3      	str	r3, [r2, #12]
 8005c8c:	e020      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c96:	d109      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c98:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a02      	ldr	r2, [pc, #8]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca2:	60d3      	str	r3, [r2, #12]
 8005ca4:	e014      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ffd7 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005ccc:	7cfb      	ldrb	r3, [r7, #19]
 8005cce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d028      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cea:	4947      	ldr	r1, [pc, #284]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cfc:	4b42      	ldr	r3, [pc, #264]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a41      	ldr	r2, [pc, #260]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d06:	60d3      	str	r3, [r2, #12]
 8005d08:	e011      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d12:	d10c      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 ffa8 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d24:	7cfb      	ldrb	r3, [r7, #19]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01e      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d3a:	4b33      	ldr	r3, [pc, #204]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4a:	492f      	ldr	r1, [pc, #188]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	2102      	movs	r1, #2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 ff83 	bl	8006c70 <RCCEx_PLLSAI1_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d84:	4b20      	ldr	r3, [pc, #128]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d8a:	f023 0204 	bic.w	r2, r3, #4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d94:	491c      	ldr	r1, [pc, #112]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005da8:	4b17      	ldr	r3, [pc, #92]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dae:	f023 0218 	bic.w	r2, r3, #24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	4913      	ldr	r1, [pc, #76]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d017      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ddc:	490a      	ldr	r1, [pc, #40]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dee:	d105      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df0:	4b05      	ldr	r3, [pc, #20]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4a04      	ldr	r2, [pc, #16]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005dfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e1e:	d13e      	bne.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e20:	4bb6      	ldr	r3, [pc, #728]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e32:	d028      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e3a:	f200 86f4 	bhi.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e44:	d005      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e4c:	d00e      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005e4e:	f000 beea 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e52:	4baa      	ldr	r3, [pc, #680]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	f040 86e4 	bne.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e66:	61fb      	str	r3, [r7, #28]
      break;
 8005e68:	f000 bedf 	b.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e6c:	4ba3      	ldr	r3, [pc, #652]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	f040 86d9 	bne.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005e7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e80:	61fb      	str	r3, [r7, #28]
      break;
 8005e82:	f000 bed4 	b.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e86:	4b9d      	ldr	r3, [pc, #628]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e92:	f040 86ce 	bne.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005e96:	4b9a      	ldr	r3, [pc, #616]	@ (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e98:	61fb      	str	r3, [r7, #28]
      break;
 8005e9a:	f000 beca 	b.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e9e:	4b97      	ldr	r3, [pc, #604]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d036      	beq.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d840      	bhi.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d020      	beq.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005ec0:	e039      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ec2:	4b8e      	ldr	r3, [pc, #568]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d116      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ece:	4b8b      	ldr	r3, [pc, #556]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005eda:	4b88      	ldr	r3, [pc, #544]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	e005      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005ee6:	4b85      	ldr	r3, [pc, #532]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eec:	0a1b      	lsrs	r3, r3, #8
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	4a84      	ldr	r2, [pc, #528]	@ (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005efa:	e01f      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
      break;
 8005f00:	e01c      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f02:	4b7e      	ldr	r3, [pc, #504]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f0e:	d102      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005f10:	4b7d      	ldr	r3, [pc, #500]	@ (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005f12:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f14:	e012      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
      break;
 8005f1a:	e00f      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f1c:	4b77      	ldr	r3, [pc, #476]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f28:	d102      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005f2a:	4b78      	ldr	r3, [pc, #480]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005f2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f2e:	e005      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
      break;
 8005f34:	e002      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
      break;
 8005f3a:	bf00      	nop
    }

    switch(PeriphClk)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f42:	f000 8606 	beq.w	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f4c:	f200 8673 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f56:	f000 8469 	beq.w	800682c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f60:	f200 8669 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6a:	f000 8531 	beq.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f74:	f200 865f 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f7e:	f000 8187 	beq.w	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f88:	f200 8655 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f92:	f000 80cd 	beq.w	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f9c:	f200 864b 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa6:	f000 8430 	beq.w	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fb0:	f200 8641 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fba:	f000 83e4 	beq.w	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc4:	f200 8637 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fce:	f000 80af 	beq.w	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd8:	f200 862d 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe2:	f000 809d 	beq.w	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fec:	f200 8623 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ff6:	f000 808b 	beq.w	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006000:	f200 8619 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600a:	f000 8554 	beq.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006014:	f200 860f 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800601e:	f000 8500 	beq.w	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006028:	f200 8605 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006032:	f000 84a1 	beq.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800603c:	f200 85fb 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b80      	cmp	r3, #128	@ 0x80
 8006044:	f000 846c 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	f200 85f3 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b20      	cmp	r3, #32
 8006054:	d84c      	bhi.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 85ec 	beq.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3b01      	subs	r3, #1
 8006062:	2b1f      	cmp	r3, #31
 8006064:	f200 85e7 	bhi.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006068:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006485 	.word	0x08006485
 8006074:	080064f3 	.word	0x080064f3
 8006078:	08006c37 	.word	0x08006c37
 800607c:	08006587 	.word	0x08006587
 8006080:	08006c37 	.word	0x08006c37
 8006084:	08006c37 	.word	0x08006c37
 8006088:	08006c37 	.word	0x08006c37
 800608c:	080065ff 	.word	0x080065ff
 8006090:	08006c37 	.word	0x08006c37
 8006094:	08006c37 	.word	0x08006c37
 8006098:	08006c37 	.word	0x08006c37
 800609c:	08006c37 	.word	0x08006c37
 80060a0:	08006c37 	.word	0x08006c37
 80060a4:	08006c37 	.word	0x08006c37
 80060a8:	08006c37 	.word	0x08006c37
 80060ac:	08006683 	.word	0x08006683
 80060b0:	08006c37 	.word	0x08006c37
 80060b4:	08006c37 	.word	0x08006c37
 80060b8:	08006c37 	.word	0x08006c37
 80060bc:	08006c37 	.word	0x08006c37
 80060c0:	08006c37 	.word	0x08006c37
 80060c4:	08006c37 	.word	0x08006c37
 80060c8:	08006c37 	.word	0x08006c37
 80060cc:	08006c37 	.word	0x08006c37
 80060d0:	08006c37 	.word	0x08006c37
 80060d4:	08006c37 	.word	0x08006c37
 80060d8:	08006c37 	.word	0x08006c37
 80060dc:	08006c37 	.word	0x08006c37
 80060e0:	08006c37 	.word	0x08006c37
 80060e4:	08006c37 	.word	0x08006c37
 80060e8:	08006c37 	.word	0x08006c37
 80060ec:	08006705 	.word	0x08006705
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b40      	cmp	r3, #64	@ 0x40
 80060f4:	f000 83e8 	beq.w	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80060f8:	f000 bd9d 	b.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80060fc:	40021000 	.word	0x40021000
 8006100:	0003d090 	.word	0x0003d090
 8006104:	0800c204 	.word	0x0800c204
 8006108:	00f42400 	.word	0x00f42400
 800610c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006110:	69b9      	ldr	r1, [r7, #24]
 8006112:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006116:	f000 ff93 	bl	8007040 <RCCEx_GetSAIxPeriphCLKFreq>
 800611a:	61f8      	str	r0, [r7, #28]
      break;
 800611c:	f000 bd8e 	b.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006126:	f000 ff8b 	bl	8007040 <RCCEx_GetSAIxPeriphCLKFreq>
 800612a:	61f8      	str	r0, [r7, #28]
      break;
 800612c:	f000 bd86 	b.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006130:	4b9a      	ldr	r3, [pc, #616]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006136:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006142:	d015      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800614a:	f200 8092 	bhi.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006154:	d029      	beq.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800615c:	f200 8089 	bhi.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d07b      	beq.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800616c:	d04a      	beq.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800616e:	e080      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006170:	4b8a      	ldr	r3, [pc, #552]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b02      	cmp	r3, #2
 800617a:	d17d      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800617c:	4b87      	ldr	r3, [pc, #540]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006188:	4b84      	ldr	r3, [pc, #528]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	e005      	b.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006194:	4b81      	ldr	r3, [pc, #516]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	4a7f      	ldr	r2, [pc, #508]	@ (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80061a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a6:	61fb      	str	r3, [r7, #28]
          break;
 80061a8:	e066      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061aa:	4b7c      	ldr	r3, [pc, #496]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b6:	d162      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80061b8:	4b78      	ldr	r3, [pc, #480]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c4:	d15b      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061c6:	4b75      	ldr	r3, [pc, #468]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	fb03 f202 	mul.w	r2, r3, r2
 80061da:	4b70      	ldr	r3, [pc, #448]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	3301      	adds	r3, #1
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80061ec:	4b6b      	ldr	r3, [pc, #428]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	0d5b      	lsrs	r3, r3, #21
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	3301      	adds	r3, #1
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006200:	61fb      	str	r3, [r7, #28]
          break;
 8006202:	e03c      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006204:	4b65      	ldr	r3, [pc, #404]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800620c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006210:	d138      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006212:	4b62      	ldr	r3, [pc, #392]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800621a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800621e:	d131      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006220:	4b5e      	ldr	r3, [pc, #376]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800622a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	fb03 f202 	mul.w	r2, r3, r2
 8006234:	4b59      	ldr	r3, [pc, #356]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	3301      	adds	r3, #1
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006246:	4b55      	ldr	r3, [pc, #340]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	0d5b      	lsrs	r3, r3, #21
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	3301      	adds	r3, #1
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	61fb      	str	r3, [r7, #28]
          break;
 800625c:	e012      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800625e:	4b4f      	ldr	r3, [pc, #316]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d10e      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800626c:	4b4d      	ldr	r3, [pc, #308]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800626e:	61fb      	str	r3, [r7, #28]
          break;
 8006270:	e00b      	b.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8006272:	bf00      	nop
 8006274:	f000 bce2 	b.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006278:	bf00      	nop
 800627a:	f000 bcdf 	b.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800627e:	bf00      	nop
 8006280:	f000 bcdc 	b.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006284:	bf00      	nop
 8006286:	f000 bcd9 	b.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800628a:	bf00      	nop
        break;
 800628c:	f000 bcd6 	b.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006290:	4b42      	ldr	r3, [pc, #264]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006292:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800629a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800629e:	d13d      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80062a0:	4b3e      	ldr	r3, [pc, #248]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ac:	f040 84c5 	bne.w	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80062b0:	4b3a      	ldr	r3, [pc, #232]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062bc:	f040 84bd 	bne.w	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062c0:	4b36      	ldr	r3, [pc, #216]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	0a1b      	lsrs	r3, r3, #8
 80062c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ca:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	fb03 f202 	mul.w	r2, r3, r2
 80062d4:	4b31      	ldr	r3, [pc, #196]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	3301      	adds	r3, #1
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80062e6:	4b2d      	ldr	r3, [pc, #180]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	0edb      	lsrs	r3, r3, #27
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80062f8:	4b28      	ldr	r3, [pc, #160]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006304:	2311      	movs	r3, #17
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e001      	b.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800630a:	2307      	movs	r3, #7
 800630c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	61fb      	str	r3, [r7, #28]
      break;
 8006318:	f000 bc8f 	b.w	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800631c:	4b1f      	ldr	r3, [pc, #124]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006322:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800632e:	d016      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006336:	f200 809b 	bhi.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006340:	d032      	beq.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006348:	f200 8092 	bhi.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8084 	beq.w	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800635a:	d052      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800635c:	e088      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800635e:	4b0f      	ldr	r3, [pc, #60]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	f040 8084 	bne.w	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800636c:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006378:	4b08      	ldr	r3, [pc, #32]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	e005      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006384:	4b05      	ldr	r3, [pc, #20]	@ (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	4a03      	ldr	r2, [pc, #12]	@ (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006396:	61fb      	str	r3, [r7, #28]
          break;
 8006398:	e06c      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800639a:	bf00      	nop
 800639c:	40021000 	.word	0x40021000
 80063a0:	0800c204 	.word	0x0800c204
 80063a4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063a8:	4ba5      	ldr	r3, [pc, #660]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063b4:	d160      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80063b6:	4ba2      	ldr	r3, [pc, #648]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063c2:	d159      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063c4:	4b9e      	ldr	r3, [pc, #632]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	0a1b      	lsrs	r3, r3, #8
 80063ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ce:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	fb03 f202 	mul.w	r2, r3, r2
 80063d8:	4b99      	ldr	r3, [pc, #612]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	3301      	adds	r3, #1
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80063ea:	4b95      	ldr	r3, [pc, #596]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	0d5b      	lsrs	r3, r3, #21
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	3301      	adds	r3, #1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	61fb      	str	r3, [r7, #28]
          break;
 8006400:	e03a      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006402:	4b8f      	ldr	r3, [pc, #572]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800640a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800640e:	d135      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006410:	4b8b      	ldr	r3, [pc, #556]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006418:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800641c:	d12e      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800641e:	4b88      	ldr	r3, [pc, #544]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006428:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	fb03 f202 	mul.w	r2, r3, r2
 8006432:	4b83      	ldr	r3, [pc, #524]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	091b      	lsrs	r3, r3, #4
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	3301      	adds	r3, #1
 800643e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006442:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006444:	4b7e      	ldr	r3, [pc, #504]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	0d5b      	lsrs	r3, r3, #21
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	3301      	adds	r3, #1
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	fbb2 f3f3 	udiv	r3, r2, r3
 8006458:	61fb      	str	r3, [r7, #28]
          break;
 800645a:	e00f      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800645c:	4b78      	ldr	r3, [pc, #480]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800645e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d10a      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800646a:	4b76      	ldr	r3, [pc, #472]	@ (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800646c:	61fb      	str	r3, [r7, #28]
          break;
 800646e:	e007      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006470:	bf00      	nop
 8006472:	e3e2      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006474:	bf00      	nop
 8006476:	e3e0      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006478:	bf00      	nop
 800647a:	e3de      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800647c:	bf00      	nop
 800647e:	e3dc      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006480:	bf00      	nop
      break;
 8006482:	e3da      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006484:	4b6e      	ldr	r3, [pc, #440]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d827      	bhi.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006496:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064b5 	.word	0x080064b5
 80064a4:	080064bd 	.word	0x080064bd
 80064a8:	080064d1 	.word	0x080064d1
          frequency = HAL_RCC_GetPCLK2Freq();
 80064ac:	f7ff f8a8 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 80064b0:	61f8      	str	r0, [r7, #28]
          break;
 80064b2:	e01d      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80064b4:	f7fe fff6 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 80064b8:	61f8      	str	r0, [r7, #28]
          break;
 80064ba:	e019      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064bc:	4b60      	ldr	r3, [pc, #384]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c8:	d10f      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80064ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064cc:	61fb      	str	r3, [r7, #28]
          break;
 80064ce:	e00c      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064d0:	4b5b      	ldr	r3, [pc, #364]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d107      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064e2:	61fb      	str	r3, [r7, #28]
          break;
 80064e4:	e003      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80064e6:	bf00      	nop
 80064e8:	e3a8      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ea:	bf00      	nop
 80064ec:	e3a6      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ee:	bf00      	nop
        break;
 80064f0:	e3a4      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80064f2:	4b53      	ldr	r3, [pc, #332]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f8:	f003 030c 	and.w	r3, r3, #12
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b0c      	cmp	r3, #12
 8006502:	d83a      	bhi.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006541 	.word	0x08006541
 8006510:	0800657b 	.word	0x0800657b
 8006514:	0800657b 	.word	0x0800657b
 8006518:	0800657b 	.word	0x0800657b
 800651c:	08006549 	.word	0x08006549
 8006520:	0800657b 	.word	0x0800657b
 8006524:	0800657b 	.word	0x0800657b
 8006528:	0800657b 	.word	0x0800657b
 800652c:	08006551 	.word	0x08006551
 8006530:	0800657b 	.word	0x0800657b
 8006534:	0800657b 	.word	0x0800657b
 8006538:	0800657b 	.word	0x0800657b
 800653c:	08006565 	.word	0x08006565
          frequency = HAL_RCC_GetPCLK1Freq();
 8006540:	f7ff f848 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006544:	61f8      	str	r0, [r7, #28]
          break;
 8006546:	e01d      	b.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006548:	f7fe ffac 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800654c:	61f8      	str	r0, [r7, #28]
          break;
 800654e:	e019      	b.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006550:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800655c:	d10f      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800655e:	4b3a      	ldr	r3, [pc, #232]	@ (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006560:	61fb      	str	r3, [r7, #28]
          break;
 8006562:	e00c      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006564:	4b36      	ldr	r3, [pc, #216]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d107      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006576:	61fb      	str	r3, [r7, #28]
          break;
 8006578:	e003      	b.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800657a:	bf00      	nop
 800657c:	e35e      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800657e:	bf00      	nop
 8006580:	e35c      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006582:	bf00      	nop
        break;
 8006584:	e35a      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006586:	4b2e      	ldr	r3, [pc, #184]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b30      	cmp	r3, #48	@ 0x30
 8006596:	d021      	beq.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b30      	cmp	r3, #48	@ 0x30
 800659c:	d829      	bhi.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d011      	beq.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d823      	bhi.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d004      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80065b6:	e01c      	b.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7ff f80c 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80065bc:	61f8      	str	r0, [r7, #28]
          break;
 80065be:	e01d      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80065c0:	f7fe ff70 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 80065c4:	61f8      	str	r0, [r7, #28]
          break;
 80065c6:	e019      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065d4:	d10f      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80065d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065d8:	61fb      	str	r3, [r7, #28]
          break;
 80065da:	e00c      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065dc:	4b18      	ldr	r3, [pc, #96]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d107      	bne.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80065ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ee:	61fb      	str	r3, [r7, #28]
          break;
 80065f0:	e003      	b.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80065f2:	bf00      	nop
 80065f4:	e322      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065f6:	bf00      	nop
 80065f8:	e320      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065fa:	bf00      	nop
        break;
 80065fc:	e31e      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065fe:	4b10      	ldr	r3, [pc, #64]	@ (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006604:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2bc0      	cmp	r3, #192	@ 0xc0
 800660e:	d027      	beq.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2bc0      	cmp	r3, #192	@ 0xc0
 8006614:	d82f      	bhi.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b80      	cmp	r3, #128	@ 0x80
 800661a:	d017      	beq.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b80      	cmp	r3, #128	@ 0x80
 8006620:	d829      	bhi.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b40      	cmp	r3, #64	@ 0x40
 800662c:	d004      	beq.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800662e:	e022      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006630:	f7fe ffd0 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006634:	61f8      	str	r0, [r7, #28]
          break;
 8006636:	e023      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006638:	f7fe ff34 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800663c:	61f8      	str	r0, [r7, #28]
          break;
 800663e:	e01f      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006640:	40021000 	.word	0x40021000
 8006644:	02dc6c00 	.word	0x02dc6c00
 8006648:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800664c:	4b9b      	ldr	r3, [pc, #620]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006658:	d10f      	bne.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800665a:	4b99      	ldr	r3, [pc, #612]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800665c:	61fb      	str	r3, [r7, #28]
          break;
 800665e:	e00c      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006660:	4b96      	ldr	r3, [pc, #600]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d107      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800666e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006672:	61fb      	str	r3, [r7, #28]
          break;
 8006674:	e003      	b.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006676:	bf00      	nop
 8006678:	e2e0      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800667a:	bf00      	nop
 800667c:	e2de      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800667e:	bf00      	nop
        break;
 8006680:	e2dc      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006682:	4b8e      	ldr	r3, [pc, #568]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006688:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006694:	d025      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800669c:	d82c      	bhi.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a4:	d013      	beq.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ac:	d824      	bhi.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ba:	d004      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80066bc:	e01c      	b.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066be:	f7fe ff89 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80066c2:	61f8      	str	r0, [r7, #28]
          break;
 80066c4:	e01d      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80066c6:	f7fe feed 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 80066ca:	61f8      	str	r0, [r7, #28]
          break;
 80066cc:	e019      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066ce:	4b7b      	ldr	r3, [pc, #492]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066da:	d10f      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80066dc:	4b78      	ldr	r3, [pc, #480]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80066de:	61fb      	str	r3, [r7, #28]
          break;
 80066e0:	e00c      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066e2:	4b76      	ldr	r3, [pc, #472]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d107      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80066f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066f4:	61fb      	str	r3, [r7, #28]
          break;
 80066f6:	e003      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80066f8:	bf00      	nop
 80066fa:	e29f      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066fc:	bf00      	nop
 80066fe:	e29d      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006700:	bf00      	nop
        break;
 8006702:	e29b      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006704:	4b6d      	ldr	r3, [pc, #436]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006716:	d025      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800671e:	d82c      	bhi.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006726:	d013      	beq.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800672e:	d824      	bhi.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800673c:	d004      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800673e:	e01c      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006740:	f7fe ff48 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006744:	61f8      	str	r0, [r7, #28]
          break;
 8006746:	e01d      	b.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006748:	f7fe feac 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800674c:	61f8      	str	r0, [r7, #28]
          break;
 800674e:	e019      	b.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006750:	4b5a      	ldr	r3, [pc, #360]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675c:	d10f      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800675e:	4b58      	ldr	r3, [pc, #352]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006760:	61fb      	str	r3, [r7, #28]
          break;
 8006762:	e00c      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006764:	4b55      	ldr	r3, [pc, #340]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b02      	cmp	r3, #2
 8006770:	d107      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006776:	61fb      	str	r3, [r7, #28]
          break;
 8006778:	e003      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800677a:	bf00      	nop
 800677c:	e25e      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800677e:	bf00      	nop
 8006780:	e25c      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006782:	bf00      	nop
        break;
 8006784:	e25a      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006786:	4b4d      	ldr	r3, [pc, #308]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006798:	d007      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067a0:	d12f      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80067a2:	f7fe fe7f 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 80067a6:	61f8      	str	r0, [r7, #28]
          break;
 80067a8:	e02e      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80067aa:	4b44      	ldr	r3, [pc, #272]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067b6:	d126      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80067b8:	4b40      	ldr	r3, [pc, #256]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067c4:	4b3d      	ldr	r3, [pc, #244]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	0a1b      	lsrs	r3, r3, #8
 80067ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ce:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	fb03 f202 	mul.w	r2, r3, r2
 80067d8:	4b38      	ldr	r3, [pc, #224]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	3301      	adds	r3, #1
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80067ea:	4b34      	ldr	r3, [pc, #208]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	0e5b      	lsrs	r3, r3, #25
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	3301      	adds	r3, #1
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fe:	61fb      	str	r3, [r7, #28]
          break;
 8006800:	e001      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006802:	bf00      	nop
 8006804:	e21a      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006806:	bf00      	nop
        break;
 8006808:	e218      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800680a:	4b2c      	ldr	r3, [pc, #176]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800680c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800681c:	f7fe fef0 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 8006820:	61f8      	str	r0, [r7, #28]
        break;
 8006822:	e20b      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006824:	f7fe fe3e 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8006828:	61f8      	str	r0, [r7, #28]
        break;
 800682a:	e207      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800682c:	4b23      	ldr	r3, [pc, #140]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800682e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006832:	f003 0318 	and.w	r3, r3, #24
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b10      	cmp	r3, #16
 800683c:	d010      	beq.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b10      	cmp	r3, #16
 8006842:	d834      	bhi.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d024      	beq.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006850:	e02d      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006852:	69b9      	ldr	r1, [r7, #24]
 8006854:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006858:	f000 fbf2 	bl	8007040 <RCCEx_GetSAIxPeriphCLKFreq>
 800685c:	61f8      	str	r0, [r7, #28]
          break;
 800685e:	e02b      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006860:	4b16      	ldr	r3, [pc, #88]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d122      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800686c:	4b13      	ldr	r3, [pc, #76]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006878:	4b10      	ldr	r3, [pc, #64]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	e005      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006884:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	4a0c      	ldr	r2, [pc, #48]	@ (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006896:	61fb      	str	r3, [r7, #28]
          break;
 8006898:	e00b      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800689a:	4b08      	ldr	r3, [pc, #32]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a6:	d106      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80068a8:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80068aa:	61fb      	str	r3, [r7, #28]
          break;
 80068ac:	e003      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80068ae:	bf00      	nop
 80068b0:	e1c4      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068b2:	bf00      	nop
 80068b4:	e1c2      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068b6:	bf00      	nop
        break;
 80068b8:	e1c0      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	00f42400 	.word	0x00f42400
 80068c4:	0800c204 	.word	0x0800c204
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068c8:	4b96      	ldr	r3, [pc, #600]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068da:	d013      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e2:	d819      	bhi.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f0:	d004      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80068f2:	e011      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068f4:	f7fe fe6e 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80068f8:	61f8      	str	r0, [r7, #28]
          break;
 80068fa:	e010      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80068fc:	f7fe fdd2 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8006900:	61f8      	str	r0, [r7, #28]
          break;
 8006902:	e00c      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006904:	4b87      	ldr	r3, [pc, #540]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006910:	d104      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006912:	4b85      	ldr	r3, [pc, #532]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006914:	61fb      	str	r3, [r7, #28]
          break;
 8006916:	e001      	b.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006918:	bf00      	nop
 800691a:	e18f      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800691c:	bf00      	nop
        break;
 800691e:	e18d      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006920:	4b80      	ldr	r3, [pc, #512]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006926:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006932:	d013      	beq.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800693a:	d819      	bhi.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006948:	d004      	beq.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800694a:	e011      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800694c:	f7fe fe42 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006950:	61f8      	str	r0, [r7, #28]
          break;
 8006952:	e010      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006954:	f7fe fda6 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8006958:	61f8      	str	r0, [r7, #28]
          break;
 800695a:	e00c      	b.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800695c:	4b71      	ldr	r3, [pc, #452]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006968:	d104      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800696a:	4b6f      	ldr	r3, [pc, #444]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800696c:	61fb      	str	r3, [r7, #28]
          break;
 800696e:	e001      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006970:	bf00      	nop
 8006972:	e163      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006974:	bf00      	nop
        break;
 8006976:	e161      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006978:	4b6a      	ldr	r3, [pc, #424]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800698a:	d013      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006992:	d819      	bhi.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a0:	d004      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80069a2:	e011      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe fe16 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80069a8:	61f8      	str	r0, [r7, #28]
          break;
 80069aa:	e010      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80069ac:	f7fe fd7a 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 80069b0:	61f8      	str	r0, [r7, #28]
          break;
 80069b2:	e00c      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c0:	d104      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80069c2:	4b59      	ldr	r3, [pc, #356]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80069c4:	61fb      	str	r3, [r7, #28]
          break;
 80069c6:	e001      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80069c8:	bf00      	nop
 80069ca:	e137      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069cc:	bf00      	nop
        break;
 80069ce:	e135      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80069d0:	4b54      	ldr	r3, [pc, #336]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d011      	beq.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d818      	bhi.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d004      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80069f4:	e011      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069f6:	f7fe fded 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80069fa:	61f8      	str	r0, [r7, #28]
          break;
 80069fc:	e010      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80069fe:	f7fe fd51 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8006a02:	61f8      	str	r0, [r7, #28]
          break;
 8006a04:	e00c      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a06:	4b47      	ldr	r3, [pc, #284]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a12:	d104      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006a14:	4b44      	ldr	r3, [pc, #272]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a16:	61fb      	str	r3, [r7, #28]
          break;
 8006a18:	e001      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006a1a:	bf00      	nop
 8006a1c:	e10e      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a1e:	bf00      	nop
        break;
 8006a20:	e10c      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006a22:	4b40      	ldr	r3, [pc, #256]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a28:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a34:	d02c      	beq.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a3c:	d833      	bhi.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a44:	d01a      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a4c:	d82b      	bhi.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a5a:	d004      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006a5c:	e023      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a5e:	f7fe fdb9 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006a62:	61f8      	str	r0, [r7, #28]
          break;
 8006a64:	e026      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a66:	4b2f      	ldr	r3, [pc, #188]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d11a      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006a74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a78:	61fb      	str	r3, [r7, #28]
          break;
 8006a7a:	e016      	b.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a7c:	4b29      	ldr	r3, [pc, #164]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a88:	d111      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006a8a:	4b27      	ldr	r3, [pc, #156]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a8c:	61fb      	str	r3, [r7, #28]
          break;
 8006a8e:	e00e      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a90:	4b24      	ldr	r3, [pc, #144]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d109      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa2:	61fb      	str	r3, [r7, #28]
          break;
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006aa6:	bf00      	nop
 8006aa8:	e0c8      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aaa:	bf00      	nop
 8006aac:	e0c6      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aae:	bf00      	nop
 8006ab0:	e0c4      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ab2:	bf00      	nop
        break;
 8006ab4:	e0c2      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006abc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ac8:	d030      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ad0:	d837      	bhi.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ad8:	d01a      	beq.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ae0:	d82f      	bhi.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aee:	d004      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006af0:	e027      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006af2:	f7fe fd6f 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8006af6:	61f8      	str	r0, [r7, #28]
          break;
 8006af8:	e02a      	b.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006afa:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d11e      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006b08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b0c:	61fb      	str	r3, [r7, #28]
          break;
 8006b0e:	e01a      	b.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b10:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1c:	d115      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006b1e:	4b02      	ldr	r3, [pc, #8]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006b20:	61fb      	str	r3, [r7, #28]
          break;
 8006b22:	e012      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006b24:	40021000 	.word	0x40021000
 8006b28:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b2c:	4b46      	ldr	r3, [pc, #280]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d109      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b3e:	61fb      	str	r3, [r7, #28]
          break;
 8006b40:	e005      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006b42:	bf00      	nop
 8006b44:	e07a      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b46:	bf00      	nop
 8006b48:	e078      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b4a:	bf00      	nop
 8006b4c:	e076      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b4e:	bf00      	nop
        break;
 8006b50:	e074      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006b52:	4b3d      	ldr	r3, [pc, #244]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b64:	d02c      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b6c:	d855      	bhi.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b7a:	d004      	beq.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006b7c:	e04d      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b7e:	f7fe fc91 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8006b82:	61f8      	str	r0, [r7, #28]
          break;
 8006b84:	e04e      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b86:	4b30      	ldr	r3, [pc, #192]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d145      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b92:	4b2d      	ldr	r3, [pc, #180]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	e005      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006baa:	4b27      	ldr	r3, [pc, #156]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	4a25      	ldr	r2, [pc, #148]	@ (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbc:	61fb      	str	r3, [r7, #28]
          break;
 8006bbe:	e02e      	b.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006bc0:	4b21      	ldr	r3, [pc, #132]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bcc:	d129      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006bce:	4b1e      	ldr	r3, [pc, #120]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bda:	d122      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	0a1b      	lsrs	r3, r3, #8
 8006be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	fb03 f202 	mul.w	r2, r3, r2
 8006bf0:	4b15      	ldr	r3, [pc, #84]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	091b      	lsrs	r3, r3, #4
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c00:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006c02:	4b11      	ldr	r3, [pc, #68]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	0d5b      	lsrs	r3, r3, #21
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	61fb      	str	r3, [r7, #28]
          break;
 8006c18:	e003      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006c1a:	bf00      	nop
 8006c1c:	e00e      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c1e:	bf00      	nop
 8006c20:	e00c      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c22:	bf00      	nop
        break;
 8006c24:	e00a      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c26:	bf00      	nop
 8006c28:	e008      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e006      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c2e:	bf00      	nop
 8006c30:	e004      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c3a:	bf00      	nop
    }
  }

  return(frequency);
 8006c3c:	69fb      	ldr	r3, [r7, #28]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	0800c204 	.word	0x0800c204

08006c50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006c54:	4b05      	ldr	r3, [pc, #20]	@ (8006c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a04      	ldr	r2, [pc, #16]	@ (8006c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c5a:	f043 0304 	orr.w	r3, r3, #4
 8006c5e:	6013      	str	r3, [r2, #0]
}
 8006c60:	bf00      	nop
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40021000 	.word	0x40021000

08006c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c7e:	4b72      	ldr	r3, [pc, #456]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00e      	beq.n	8006ca8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f003 0203 	and.w	r2, r3, #3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d103      	bne.n	8006ca2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d142      	bne.n	8006d28 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	73fb      	strb	r3, [r7, #15]
 8006ca6:	e03f      	b.n	8006d28 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d018      	beq.n	8006ce2 <RCCEx_PLLSAI1_Config+0x72>
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d825      	bhi.n	8006d00 <RCCEx_PLLSAI1_Config+0x90>
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d002      	beq.n	8006cbe <RCCEx_PLLSAI1_Config+0x4e>
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d009      	beq.n	8006cd0 <RCCEx_PLLSAI1_Config+0x60>
 8006cbc:	e020      	b.n	8006d00 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cbe:	4b62      	ldr	r3, [pc, #392]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d11d      	bne.n	8006d06 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cce:	e01a      	b.n	8006d06 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d116      	bne.n	8006d0a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ce0:	e013      	b.n	8006d0a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ce2:	4b59      	ldr	r3, [pc, #356]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10f      	bne.n	8006d0e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cee:	4b56      	ldr	r3, [pc, #344]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cfe:	e006      	b.n	8006d0e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
      break;
 8006d04:	e004      	b.n	8006d10 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d108      	bne.n	8006d28 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006d16:	4b4c      	ldr	r3, [pc, #304]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f023 0203 	bic.w	r2, r3, #3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4949      	ldr	r1, [pc, #292]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f040 8086 	bne.w	8006e3c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d30:	4b45      	ldr	r3, [pc, #276]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a44      	ldr	r2, [pc, #272]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d3c:	f7fc f92a 	bl	8002f94 <HAL_GetTick>
 8006d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d42:	e009      	b.n	8006d58 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d44:	f7fc f926 	bl	8002f94 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d902      	bls.n	8006d58 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	73fb      	strb	r3, [r7, #15]
        break;
 8006d56:	e005      	b.n	8006d64 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d58:	4b3b      	ldr	r3, [pc, #236]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1ef      	bne.n	8006d44 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d168      	bne.n	8006e3c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d113      	bne.n	8006d98 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d70:	4b35      	ldr	r3, [pc, #212]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	4b35      	ldr	r3, [pc, #212]	@ (8006e4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6892      	ldr	r2, [r2, #8]
 8006d7c:	0211      	lsls	r1, r2, #8
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68d2      	ldr	r2, [r2, #12]
 8006d82:	06d2      	lsls	r2, r2, #27
 8006d84:	4311      	orrs	r1, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6852      	ldr	r2, [r2, #4]
 8006d8a:	3a01      	subs	r2, #1
 8006d8c:	0112      	lsls	r2, r2, #4
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	492d      	ldr	r1, [pc, #180]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	610b      	str	r3, [r1, #16]
 8006d96:	e02d      	b.n	8006df4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d115      	bne.n	8006dca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	4b2b      	ldr	r3, [pc, #172]	@ (8006e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6892      	ldr	r2, [r2, #8]
 8006daa:	0211      	lsls	r1, r2, #8
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6912      	ldr	r2, [r2, #16]
 8006db0:	0852      	lsrs	r2, r2, #1
 8006db2:	3a01      	subs	r2, #1
 8006db4:	0552      	lsls	r2, r2, #21
 8006db6:	4311      	orrs	r1, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6852      	ldr	r2, [r2, #4]
 8006dbc:	3a01      	subs	r2, #1
 8006dbe:	0112      	lsls	r2, r2, #4
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	4921      	ldr	r1, [pc, #132]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	610b      	str	r3, [r1, #16]
 8006dc8:	e014      	b.n	8006df4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dca:	4b1f      	ldr	r3, [pc, #124]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dcc:	691a      	ldr	r2, [r3, #16]
 8006dce:	4b21      	ldr	r3, [pc, #132]	@ (8006e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6892      	ldr	r2, [r2, #8]
 8006dd6:	0211      	lsls	r1, r2, #8
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6952      	ldr	r2, [r2, #20]
 8006ddc:	0852      	lsrs	r2, r2, #1
 8006dde:	3a01      	subs	r2, #1
 8006de0:	0652      	lsls	r2, r2, #25
 8006de2:	4311      	orrs	r1, r2
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6852      	ldr	r2, [r2, #4]
 8006de8:	3a01      	subs	r2, #1
 8006dea:	0112      	lsls	r2, r2, #4
 8006dec:	430a      	orrs	r2, r1
 8006dee:	4916      	ldr	r1, [pc, #88]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006df4:	4b14      	ldr	r3, [pc, #80]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a13      	ldr	r2, [pc, #76]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e00:	f7fc f8c8 	bl	8002f94 <HAL_GetTick>
 8006e04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e06:	e009      	b.n	8006e1c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e08:	f7fc f8c4 	bl	8002f94 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d902      	bls.n	8006e1c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	73fb      	strb	r3, [r7, #15]
          break;
 8006e1a:	e005      	b.n	8006e28 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0ef      	beq.n	8006e08 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	4904      	ldr	r1, [pc, #16]	@ (8006e48 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	07ff800f 	.word	0x07ff800f
 8006e50:	ff9f800f 	.word	0xff9f800f
 8006e54:	f9ff800f 	.word	0xf9ff800f

08006e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e66:	4b72      	ldr	r3, [pc, #456]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00e      	beq.n	8006e90 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e72:	4b6f      	ldr	r3, [pc, #444]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f003 0203 	and.w	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d103      	bne.n	8006e8a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
       ||
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d142      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	73fb      	strb	r3, [r7, #15]
 8006e8e:	e03f      	b.n	8006f10 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d018      	beq.n	8006eca <RCCEx_PLLSAI2_Config+0x72>
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d825      	bhi.n	8006ee8 <RCCEx_PLLSAI2_Config+0x90>
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d002      	beq.n	8006ea6 <RCCEx_PLLSAI2_Config+0x4e>
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d009      	beq.n	8006eb8 <RCCEx_PLLSAI2_Config+0x60>
 8006ea4:	e020      	b.n	8006ee8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ea6:	4b62      	ldr	r3, [pc, #392]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d11d      	bne.n	8006eee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eb6:	e01a      	b.n	8006eee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d116      	bne.n	8006ef2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ec8:	e013      	b.n	8006ef2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006eca:	4b59      	ldr	r3, [pc, #356]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10f      	bne.n	8006ef6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ed6:	4b56      	ldr	r3, [pc, #344]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ee6:	e006      	b.n	8006ef6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e004      	b.n	8006ef8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e002      	b.n	8006ef8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ef6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d108      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006efe:	4b4c      	ldr	r3, [pc, #304]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f023 0203 	bic.w	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4949      	ldr	r1, [pc, #292]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 8086 	bne.w	8007024 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f18:	4b45      	ldr	r3, [pc, #276]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a44      	ldr	r2, [pc, #272]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f24:	f7fc f836 	bl	8002f94 <HAL_GetTick>
 8006f28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f2a:	e009      	b.n	8006f40 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f2c:	f7fc f832 	bl	8002f94 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d902      	bls.n	8006f40 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f3e:	e005      	b.n	8006f4c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f40:	4b3b      	ldr	r3, [pc, #236]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ef      	bne.n	8006f2c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d168      	bne.n	8007024 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d113      	bne.n	8006f80 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f58:	4b35      	ldr	r3, [pc, #212]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	4b35      	ldr	r3, [pc, #212]	@ (8007034 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006f5e:	4013      	ands	r3, r2
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6892      	ldr	r2, [r2, #8]
 8006f64:	0211      	lsls	r1, r2, #8
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	06d2      	lsls	r2, r2, #27
 8006f6c:	4311      	orrs	r1, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6852      	ldr	r2, [r2, #4]
 8006f72:	3a01      	subs	r2, #1
 8006f74:	0112      	lsls	r2, r2, #4
 8006f76:	430a      	orrs	r2, r1
 8006f78:	492d      	ldr	r1, [pc, #180]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	614b      	str	r3, [r1, #20]
 8006f7e:	e02d      	b.n	8006fdc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d115      	bne.n	8006fb2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f86:	4b2a      	ldr	r3, [pc, #168]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6892      	ldr	r2, [r2, #8]
 8006f92:	0211      	lsls	r1, r2, #8
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6912      	ldr	r2, [r2, #16]
 8006f98:	0852      	lsrs	r2, r2, #1
 8006f9a:	3a01      	subs	r2, #1
 8006f9c:	0552      	lsls	r2, r2, #21
 8006f9e:	4311      	orrs	r1, r2
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6852      	ldr	r2, [r2, #4]
 8006fa4:	3a01      	subs	r2, #1
 8006fa6:	0112      	lsls	r2, r2, #4
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	4921      	ldr	r1, [pc, #132]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	614b      	str	r3, [r1, #20]
 8006fb0:	e014      	b.n	8006fdc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fb4:	695a      	ldr	r2, [r3, #20]
 8006fb6:	4b21      	ldr	r3, [pc, #132]	@ (800703c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6892      	ldr	r2, [r2, #8]
 8006fbe:	0211      	lsls	r1, r2, #8
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6952      	ldr	r2, [r2, #20]
 8006fc4:	0852      	lsrs	r2, r2, #1
 8006fc6:	3a01      	subs	r2, #1
 8006fc8:	0652      	lsls	r2, r2, #25
 8006fca:	4311      	orrs	r1, r2
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6852      	ldr	r2, [r2, #4]
 8006fd0:	3a01      	subs	r2, #1
 8006fd2:	0112      	lsls	r2, r2, #4
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	4916      	ldr	r1, [pc, #88]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006fdc:	4b14      	ldr	r3, [pc, #80]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a13      	ldr	r2, [pc, #76]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe8:	f7fb ffd4 	bl	8002f94 <HAL_GetTick>
 8006fec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fee:	e009      	b.n	8007004 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ff0:	f7fb ffd0 	bl	8002f94 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d902      	bls.n	8007004 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	73fb      	strb	r3, [r7, #15]
          break;
 8007002:	e005      	b.n	8007010 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007004:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0ef      	beq.n	8006ff0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007016:	4b06      	ldr	r3, [pc, #24]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	4904      	ldr	r1, [pc, #16]	@ (8007030 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007020:	4313      	orrs	r3, r2
 8007022:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40021000 	.word	0x40021000
 8007034:	07ff800f 	.word	0x07ff800f
 8007038:	ff9f800f 	.word	0xff9f800f
 800703c:	f9ff800f 	.word	0xf9ff800f

08007040 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007040:	b480      	push	{r7}
 8007042:	b089      	sub	sp, #36	@ 0x24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800705c:	d10b      	bne.n	8007076 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800705e:	4b7e      	ldr	r3, [pc, #504]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007060:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007064:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007068:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b60      	cmp	r3, #96	@ 0x60
 800706e:	d112      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007070:	4b7a      	ldr	r3, [pc, #488]	@ (800725c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	e00f      	b.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707c:	d10b      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800707e:	4b76      	ldr	r3, [pc, #472]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007080:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007084:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007088:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007090:	d101      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007092:	4b72      	ldr	r3, [pc, #456]	@ (800725c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007094:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	f040 80d6 	bne.w	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b40      	cmp	r3, #64	@ 0x40
 80070a6:	d003      	beq.n	80070b0 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ae:	d13b      	bne.n	8007128 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070b0:	4b69      	ldr	r3, [pc, #420]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070bc:	f040 80c4 	bne.w	8007248 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80070c0:	4b65      	ldr	r3, [pc, #404]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80bd 	beq.w	8007248 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80070ce:	4b62      	ldr	r3, [pc, #392]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	091b      	lsrs	r3, r3, #4
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	3301      	adds	r3, #1
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070e2:	4b5d      	ldr	r3, [pc, #372]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	0a1b      	lsrs	r3, r3, #8
 80070e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80070ee:	4b5a      	ldr	r3, [pc, #360]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	0edb      	lsrs	r3, r3, #27
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007100:	4b55      	ldr	r3, [pc, #340]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800710c:	2311      	movs	r3, #17
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e001      	b.n	8007116 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007112:	2307      	movs	r3, #7
 8007114:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	fb03 f202 	mul.w	r2, r3, r2
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007126:	e08f      	b.n	8007248 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d13a      	bne.n	80071a4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800712e:	4b4a      	ldr	r3, [pc, #296]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800713a:	f040 8086 	bne.w	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800713e:	4b46      	ldr	r3, [pc, #280]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d07f      	beq.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800714a:	4b43      	ldr	r3, [pc, #268]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	091b      	lsrs	r3, r3, #4
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	3301      	adds	r3, #1
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800715e:	4b3e      	ldr	r3, [pc, #248]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007168:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800716a:	4b3b      	ldr	r3, [pc, #236]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	0edb      	lsrs	r3, r3, #27
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800717c:	4b36      	ldr	r3, [pc, #216]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007188:	2311      	movs	r3, #17
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e001      	b.n	8007192 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800718e:	2307      	movs	r3, #7
 8007190:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	fb03 f202 	mul.w	r2, r3, r2
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	e052      	b.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b80      	cmp	r3, #128	@ 0x80
 80071a8:	d003      	beq.n	80071b2 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b0:	d109      	bne.n	80071c6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071b2:	4b29      	ldr	r3, [pc, #164]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071be:	d144      	bne.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80071c0:	4b27      	ldr	r3, [pc, #156]	@ (8007260 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80071c2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c4:	e041      	b.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d003      	beq.n	80071d4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d2:	d13a      	bne.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80071d4:	4b20      	ldr	r3, [pc, #128]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071e0:	d133      	bne.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80071e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d02d      	beq.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80071ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	091b      	lsrs	r3, r3, #4
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	3301      	adds	r3, #1
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007202:	4b15      	ldr	r3, [pc, #84]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	0a1b      	lsrs	r3, r3, #8
 8007208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800720c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800720e:	4b12      	ldr	r3, [pc, #72]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	0edb      	lsrs	r3, r3, #27
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007220:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800722c:	2311      	movs	r3, #17
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e001      	b.n	8007236 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007232:	2307      	movs	r3, #7
 8007234:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	fb03 f202 	mul.w	r2, r3, r2
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	e000      	b.n	800724a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007248:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800724a:	69fb      	ldr	r3, [r7, #28]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3724      	adds	r7, #36	@ 0x24
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	40021000 	.word	0x40021000
 800725c:	001fff68 	.word	0x001fff68
 8007260:	00f42400 	.word	0x00f42400

08007264 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d904      	bls.n	8007282 <HAL_SAI_InitProtocol+0x1e>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	3b03      	subs	r3, #3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d812      	bhi.n	80072a6 <HAL_SAI_InitProtocol+0x42>
 8007280:	e008      	b.n	8007294 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f9fb 	bl	8007684 <SAI_InitI2S>
 800728e:	4603      	mov	r3, r0
 8007290:	75fb      	strb	r3, [r7, #23]
      break;
 8007292:	e00b      	b.n	80072ac <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 faa4 	bl	80077e8 <SAI_InitPCM>
 80072a0:	4603      	mov	r3, r0
 80072a2:	75fb      	strb	r3, [r7, #23]
      break;
 80072a4:	e002      	b.n	80072ac <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
      break;
 80072aa:	bf00      	nop
  }

  if (status == HAL_OK)
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f808 	bl	80072c8 <HAL_SAI_Init>
 80072b8:	4603      	mov	r3, r0
 80072ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	@ 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e1c7      	b.n	800766a <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d10e      	bne.n	8007302 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a81      	ldr	r2, [pc, #516]	@ (80074f0 <HAL_SAI_Init+0x228>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d107      	bne.n	80072fe <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d103      	bne.n	80072fe <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e1b3      	b.n	800766a <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fb fbe6 	bl	8002ae8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fae5 	bl	80078ec <SAI_Disable>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e19e      	b.n	800766a <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d00c      	beq.n	8007356 <HAL_SAI_Init+0x8e>
 800733c:	2b02      	cmp	r3, #2
 800733e:	d80d      	bhi.n	800735c <HAL_SAI_Init+0x94>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <HAL_SAI_Init+0x82>
 8007344:	2b01      	cmp	r3, #1
 8007346:	d003      	beq.n	8007350 <HAL_SAI_Init+0x88>
 8007348:	e008      	b.n	800735c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800734e:	e008      	b.n	8007362 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007350:	2310      	movs	r3, #16
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007354:	e005      	b.n	8007362 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007356:	2320      	movs	r3, #32
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800735a:	e002      	b.n	8007362 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007360:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b03      	cmp	r3, #3
 8007368:	d81d      	bhi.n	80073a6 <HAL_SAI_Init+0xde>
 800736a:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <HAL_SAI_Init+0xa8>)
 800736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007370:	08007381 	.word	0x08007381
 8007374:	08007387 	.word	0x08007387
 8007378:	0800738f 	.word	0x0800738f
 800737c:	08007397 	.word	0x08007397
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]
      break;
 8007384:	e012      	b.n	80073ac <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800738a:	61fb      	str	r3, [r7, #28]
      break;
 800738c:	e00e      	b.n	80073ac <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800738e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007392:	61fb      	str	r3, [r7, #28]
      break;
 8007394:	e00a      	b.n	80073ac <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007396:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800739a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	f043 0301 	orr.w	r3, r3, #1
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80073a4:	e002      	b.n	80073ac <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
      break;
 80073aa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a4f      	ldr	r2, [pc, #316]	@ (80074f0 <HAL_SAI_Init+0x228>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_SAI_Init+0xf8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a4e      	ldr	r2, [pc, #312]	@ (80074f4 <HAL_SAI_Init+0x22c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d103      	bne.n	80073c8 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80073c0:	4a4d      	ldr	r2, [pc, #308]	@ (80074f8 <HAL_SAI_Init+0x230>)
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e002      	b.n	80073ce <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80073c8:	4a4c      	ldr	r2, [pc, #304]	@ (80074fc <HAL_SAI_Init+0x234>)
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d073      	beq.n	80074be <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a45      	ldr	r2, [pc, #276]	@ (80074f0 <HAL_SAI_Init+0x228>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_SAI_Init+0x122>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a43      	ldr	r2, [pc, #268]	@ (80074f4 <HAL_SAI_Init+0x22c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d105      	bne.n	80073f6 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80073ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80073ee:	f7fe fd0d 	bl	8005e0c <HAL_RCCEx_GetPeriphCLKFreq>
 80073f2:	61b8      	str	r0, [r7, #24]
 80073f4:	e004      	b.n	8007400 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80073f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80073fa:	f7fe fd07 	bl	8005e0c <HAL_RCCEx_GetPeriphCLKFreq>
 80073fe:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007408:	d120      	bne.n	800744c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	2b04      	cmp	r3, #4
 8007410:	d102      	bne.n	8007418 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007412:	2340      	movs	r3, #64	@ 0x40
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	e00a      	b.n	800742e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	2b08      	cmp	r3, #8
 800741e:	d103      	bne.n	8007428 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	e002      	b.n	800742e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800742c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	4619      	mov	r1, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	fbb1 f3f3 	udiv	r3, r1, r3
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	e017      	b.n	800747c <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007454:	d101      	bne.n	800745a <HAL_SAI_Init+0x192>
 8007456:	2302      	movs	r3, #2
 8007458:	e000      	b.n	800745c <HAL_SAI_Init+0x194>
 800745a:	2301      	movs	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	4619      	mov	r1, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	fbb1 f3f3 	udiv	r3, r1, r3
 800747a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	4a20      	ldr	r2, [pc, #128]	@ (8007500 <HAL_SAI_Init+0x238>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	08da      	lsrs	r2, r3, #3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800748a:	6979      	ldr	r1, [r7, #20]
 800748c:	4b1c      	ldr	r3, [pc, #112]	@ (8007500 <HAL_SAI_Init+0x238>)
 800748e:	fba3 2301 	umull	r2, r3, r3, r1
 8007492:	08da      	lsrs	r2, r3, #3
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	1aca      	subs	r2, r1, r3
 800749e:	2a08      	cmp	r2, #8
 80074a0:	d904      	bls.n	80074ac <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d104      	bne.n	80074be <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	085a      	lsrs	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_SAI_Init+0x206>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d109      	bne.n	80074e2 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_SAI_Init+0x212>
 80074d6:	2300      	movs	r3, #0
 80074d8:	e001      	b.n	80074de <HAL_SAI_Init+0x216>
 80074da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074de:	623b      	str	r3, [r7, #32]
 80074e0:	e012      	b.n	8007508 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10c      	bne.n	8007504 <HAL_SAI_Init+0x23c>
 80074ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074ee:	e00a      	b.n	8007506 <HAL_SAI_Init+0x23e>
 80074f0:	40015404 	.word	0x40015404
 80074f4:	40015424 	.word	0x40015424
 80074f8:	40015400 	.word	0x40015400
 80074fc:	40015800 	.word	0x40015800
 8007500:	cccccccd 	.word	0xcccccccd
 8007504:	2300      	movs	r3, #0
 8007506:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6819      	ldr	r1, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4b58      	ldr	r3, [pc, #352]	@ (8007674 <HAL_SAI_Init+0x3ac>)
 8007514:	400b      	ands	r3, r1
 8007516:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6819      	ldr	r1, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800752c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007532:	431a      	orrs	r2, r3
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007540:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800754c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	051b      	lsls	r3, r3, #20
 8007554:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800755a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6812      	ldr	r2, [r2, #0]
 800756e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007572:	f023 030f 	bic.w	r3, r3, #15
 8007576:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6859      	ldr	r1, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6899      	ldr	r1, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	4b35      	ldr	r3, [pc, #212]	@ (8007678 <HAL_SAI_Init+0x3b0>)
 80075a2:	400b      	ands	r3, r1
 80075a4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6899      	ldr	r1, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80075b6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 80075bc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 80075c2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c8:	3b01      	subs	r3, #1
 80075ca:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80075cc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68d9      	ldr	r1, [r3, #12]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80075e4:	400b      	ands	r3, r1
 80075e6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68d9      	ldr	r1, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075f6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075fc:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075fe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007604:	3b01      	subs	r3, #1
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a19      	ldr	r2, [pc, #100]	@ (800767c <HAL_SAI_Init+0x3b4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d119      	bne.n	8007650 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800761c:	4b18      	ldr	r3, [pc, #96]	@ (8007680 <HAL_SAI_Init+0x3b8>)
 800761e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007620:	4a17      	ldr	r2, [pc, #92]	@ (8007680 <HAL_SAI_Init+0x3b8>)
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800762e:	2b01      	cmp	r3, #1
 8007630:	d10e      	bne.n	8007650 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763a:	3b01      	subs	r3, #1
 800763c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800763e:	4910      	ldr	r1, [pc, #64]	@ (8007680 <HAL_SAI_Init+0x3b8>)
 8007640:	4313      	orrs	r3, r2
 8007642:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007644:	4b0e      	ldr	r3, [pc, #56]	@ (8007680 <HAL_SAI_Init+0x3b8>)
 8007646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007648:	4a0d      	ldr	r2, [pc, #52]	@ (8007680 <HAL_SAI_Init+0x3b8>)
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3728      	adds	r7, #40	@ 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	f805c010 	.word	0xf805c010
 8007678:	fff88000 	.word	0xfff88000
 800767c:	40015404 	.word	0x40015404
 8007680:	40015400 	.word	0x40015400

08007684 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <SAI_InitI2S+0x2e>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d103      	bne.n	80076ba <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80076b8:	e002      	b.n	80076c0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80076c6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076ce:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e077      	b.n	80077da <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80076fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80076fe:	e006      	b.n	800770e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007706:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d84f      	bhi.n	80077b4 <SAI_InitI2S+0x130>
 8007714:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <SAI_InitI2S+0x98>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	0800772d 	.word	0x0800772d
 8007720:	0800774f 	.word	0x0800774f
 8007724:	08007771 	.word	0x08007771
 8007728:	08007793 	.word	0x08007793
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2280      	movs	r2, #128	@ 0x80
 8007730:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	085b      	lsrs	r3, r3, #1
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	085b      	lsrs	r3, r3, #1
 8007740:	011a      	lsls	r2, r3, #4
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2240      	movs	r2, #64	@ 0x40
 800774a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800774c:	e035      	b.n	80077ba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2280      	movs	r2, #128	@ 0x80
 8007752:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	019a      	lsls	r2, r3, #6
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	085b      	lsrs	r3, r3, #1
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2280      	movs	r2, #128	@ 0x80
 800776c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800776e:	e024      	b.n	80077ba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	22c0      	movs	r2, #192	@ 0xc0
 8007774:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	019a      	lsls	r2, r3, #6
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2280      	movs	r2, #128	@ 0x80
 800778e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007790:	e013      	b.n	80077ba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	22e0      	movs	r2, #224	@ 0xe0
 8007796:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	019a      	lsls	r2, r3, #6
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	085b      	lsrs	r3, r3, #1
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2280      	movs	r2, #128	@ 0x80
 80077b0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80077b2:	e002      	b.n	80077ba <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	75fb      	strb	r3, [r7, #23]
      break;
 80077b8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d10b      	bne.n	80077d8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d102      	bne.n	80077cc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2210      	movs	r2, #16
 80077ca:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d102      	bne.n	80077d8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2208      	movs	r2, #8
 80077d6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <SAI_InitPCM+0x2e>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d103      	bne.n	800781e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800781c:	e002      	b.n	8007824 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007830:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007838:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800784c:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b04      	cmp	r3, #4
 8007852:	d103      	bne.n	800785c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	655a      	str	r2, [r3, #84]	@ 0x54
 800785a:	e002      	b.n	8007862 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	220d      	movs	r2, #13
 8007860:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d837      	bhi.n	80078d8 <SAI_InitPCM+0xf0>
 8007868:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <SAI_InitPCM+0x88>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007881 	.word	0x08007881
 8007874:	08007897 	.word	0x08007897
 8007878:	080078ad 	.word	0x080078ad
 800787c:	080078c3 	.word	0x080078c3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2280      	movs	r2, #128	@ 0x80
 8007884:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	011a      	lsls	r2, r3, #4
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2240      	movs	r2, #64	@ 0x40
 8007892:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007894:	e023      	b.n	80078de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2280      	movs	r2, #128	@ 0x80
 800789a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2280      	movs	r2, #128	@ 0x80
 80078a8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80078aa:	e018      	b.n	80078de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	22c0      	movs	r2, #192	@ 0xc0
 80078b0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2280      	movs	r2, #128	@ 0x80
 80078be:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80078c0:	e00d      	b.n	80078de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	22e0      	movs	r2, #224	@ 0xe0
 80078c6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2280      	movs	r2, #128	@ 0x80
 80078d4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80078d6:	e002      	b.n	80078de <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
      break;
 80078dc:	bf00      	nop
  }

  return status;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80078f4:	4b18      	ldr	r3, [pc, #96]	@ (8007958 <SAI_Disable+0x6c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a18      	ldr	r2, [pc, #96]	@ (800795c <SAI_Disable+0x70>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	0b1b      	lsrs	r3, r3, #12
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007916:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007924:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	72fb      	strb	r3, [r7, #11]
      break;
 8007932:	e009      	b.n	8007948 <SAI_Disable+0x5c>
    }
    count--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3b01      	subs	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e7      	bne.n	8007918 <SAI_Disable+0x2c>

  return status;
 8007948:	7afb      	ldrb	r3, [r7, #11]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000000 	.word	0x20000000
 800795c:	95cbec1b 	.word	0x95cbec1b

08007960 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e0aa      	b.n	8007ac8 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fa fd18 	bl	80023b8 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0201 	bic.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80079aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695a      	ldr	r2, [r3, #20]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079ba:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695a      	ldr	r2, [r3, #20]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80079ca:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80079d4:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079e4:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d012      	beq.n	8007a14 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d107      	bne.n	8007a06 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a02:	609a      	str	r2, [r3, #8]
 8007a04:	e006      	b.n	8007a14 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007a12:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d104      	bne.n	8007a26 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a38:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	695a      	ldr	r2, [r3, #20]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1a      	ldr	r2, [r3, #32]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a62:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a68:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007a74:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a76:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a80:	d110      	bne.n	8007aa4 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007a8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a92:	d107      	bne.n	8007aa4 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007aa2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007af0:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007af2:	2180      	movs	r1, #128	@ 0x80
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f805 	bl	8007b04 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b2a:	2b38      	cmp	r3, #56	@ 0x38
 8007b2c:	d103      	bne.n	8007b36 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b34:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8007b3c:	2bf2      	cmp	r3, #242	@ 0xf2
 8007b3e:	d103      	bne.n	8007b48 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 8007b4e:	2bd4      	cmp	r3, #212	@ 0xd4
 8007b50:	d103      	bne.n	8007b5a <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b58:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	601a      	str	r2, [r3, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e095      	b.n	8007cb4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d108      	bne.n	8007ba2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b98:	d009      	beq.n	8007bae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	61da      	str	r2, [r3, #28]
 8007ba0:	e005      	b.n	8007bae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7fa fd83 	bl	80026d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007be4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007bee:	d902      	bls.n	8007bf6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	e002      	b.n	8007bfc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007bfa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007c04:	d007      	beq.n	8007c16 <HAL_SPI_Init+0xa0>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c0e:	d002      	beq.n	8007c16 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c58:	ea42 0103 	orr.w	r1, r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	f003 0204 	and.w	r2, r3, #4
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007c92:	ea42 0103 	orr.w	r1, r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e049      	b.n	8007d62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fa fd3a 	bl	800275c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f000 f94a 	bl	8007f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e0ff      	b.n	8007f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b14      	cmp	r3, #20
 8007d96:	f200 80f0 	bhi.w	8007f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007df5 	.word	0x08007df5
 8007da4:	08007f7b 	.word	0x08007f7b
 8007da8:	08007f7b 	.word	0x08007f7b
 8007dac:	08007f7b 	.word	0x08007f7b
 8007db0:	08007e35 	.word	0x08007e35
 8007db4:	08007f7b 	.word	0x08007f7b
 8007db8:	08007f7b 	.word	0x08007f7b
 8007dbc:	08007f7b 	.word	0x08007f7b
 8007dc0:	08007e77 	.word	0x08007e77
 8007dc4:	08007f7b 	.word	0x08007f7b
 8007dc8:	08007f7b 	.word	0x08007f7b
 8007dcc:	08007f7b 	.word	0x08007f7b
 8007dd0:	08007eb7 	.word	0x08007eb7
 8007dd4:	08007f7b 	.word	0x08007f7b
 8007dd8:	08007f7b 	.word	0x08007f7b
 8007ddc:	08007f7b 	.word	0x08007f7b
 8007de0:	08007ef9 	.word	0x08007ef9
 8007de4:	08007f7b 	.word	0x08007f7b
 8007de8:	08007f7b 	.word	0x08007f7b
 8007dec:	08007f7b 	.word	0x08007f7b
 8007df0:	08007f39 	.word	0x08007f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f964 	bl	80080c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0208 	orr.w	r2, r2, #8
 8007e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0204 	bic.w	r2, r2, #4
 8007e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6999      	ldr	r1, [r3, #24]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	691a      	ldr	r2, [r3, #16]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	619a      	str	r2, [r3, #24]
      break;
 8007e32:	e0a5      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f9d4 	bl	80081e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6999      	ldr	r1, [r3, #24]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	021a      	lsls	r2, r3, #8
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	619a      	str	r2, [r3, #24]
      break;
 8007e74:	e084      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fa3d 	bl	80082fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0208 	orr.w	r2, r2, #8
 8007e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0204 	bic.w	r2, r2, #4
 8007ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69d9      	ldr	r1, [r3, #28]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	61da      	str	r2, [r3, #28]
      break;
 8007eb4:	e064      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 faa5 	bl	800840c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69d9      	ldr	r1, [r3, #28]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	021a      	lsls	r2, r3, #8
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	61da      	str	r2, [r3, #28]
      break;
 8007ef6:	e043      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 faee 	bl	80084e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0208 	orr.w	r2, r2, #8
 8007f12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0204 	bic.w	r2, r2, #4
 8007f22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f36:	e023      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fb32 	bl	80085a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	021a      	lsls	r2, r3, #8
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f78:	e002      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop

08007f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a40      	ldr	r2, [pc, #256]	@ (80080a8 <TIM_Base_SetConfig+0x114>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d013      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb2:	d00f      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80080ac <TIM_Base_SetConfig+0x118>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00b      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80080b0 <TIM_Base_SetConfig+0x11c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d007      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a3b      	ldr	r2, [pc, #236]	@ (80080b4 <TIM_Base_SetConfig+0x120>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a3a      	ldr	r2, [pc, #232]	@ (80080b8 <TIM_Base_SetConfig+0x124>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d108      	bne.n	8007fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80080a8 <TIM_Base_SetConfig+0x114>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d01f      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff4:	d01b      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80080ac <TIM_Base_SetConfig+0x118>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d017      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a2b      	ldr	r2, [pc, #172]	@ (80080b0 <TIM_Base_SetConfig+0x11c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a2a      	ldr	r2, [pc, #168]	@ (80080b4 <TIM_Base_SetConfig+0x120>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00f      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a29      	ldr	r2, [pc, #164]	@ (80080b8 <TIM_Base_SetConfig+0x124>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00b      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a28      	ldr	r2, [pc, #160]	@ (80080bc <TIM_Base_SetConfig+0x128>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a27      	ldr	r2, [pc, #156]	@ (80080c0 <TIM_Base_SetConfig+0x12c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_Base_SetConfig+0x9a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a26      	ldr	r2, [pc, #152]	@ (80080c4 <TIM_Base_SetConfig+0x130>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d108      	bne.n	8008040 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a10      	ldr	r2, [pc, #64]	@ (80080a8 <TIM_Base_SetConfig+0x114>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00f      	beq.n	800808c <TIM_Base_SetConfig+0xf8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a12      	ldr	r2, [pc, #72]	@ (80080b8 <TIM_Base_SetConfig+0x124>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00b      	beq.n	800808c <TIM_Base_SetConfig+0xf8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a11      	ldr	r2, [pc, #68]	@ (80080bc <TIM_Base_SetConfig+0x128>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d007      	beq.n	800808c <TIM_Base_SetConfig+0xf8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a10      	ldr	r2, [pc, #64]	@ (80080c0 <TIM_Base_SetConfig+0x12c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_Base_SetConfig+0xf8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a0f      	ldr	r2, [pc, #60]	@ (80080c4 <TIM_Base_SetConfig+0x130>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d103      	bne.n	8008094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	615a      	str	r2, [r3, #20]
}
 800809a:	bf00      	nop
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40012c00 	.word	0x40012c00
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40013400 	.word	0x40013400
 80080bc:	40014000 	.word	0x40014000
 80080c0:	40014400 	.word	0x40014400
 80080c4:	40014800 	.word	0x40014800

080080c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f023 0201 	bic.w	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f023 0302 	bic.w	r3, r3, #2
 8008114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a2c      	ldr	r2, [pc, #176]	@ (80081d4 <TIM_OC1_SetConfig+0x10c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00f      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a2b      	ldr	r2, [pc, #172]	@ (80081d8 <TIM_OC1_SetConfig+0x110>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00b      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a2a      	ldr	r2, [pc, #168]	@ (80081dc <TIM_OC1_SetConfig+0x114>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d007      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a29      	ldr	r2, [pc, #164]	@ (80081e0 <TIM_OC1_SetConfig+0x118>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d003      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a28      	ldr	r2, [pc, #160]	@ (80081e4 <TIM_OC1_SetConfig+0x11c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d10c      	bne.n	8008162 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f023 0308 	bic.w	r3, r3, #8
 800814e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 0304 	bic.w	r3, r3, #4
 8008160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a1b      	ldr	r2, [pc, #108]	@ (80081d4 <TIM_OC1_SetConfig+0x10c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00f      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a1a      	ldr	r2, [pc, #104]	@ (80081d8 <TIM_OC1_SetConfig+0x110>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d00b      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a19      	ldr	r2, [pc, #100]	@ (80081dc <TIM_OC1_SetConfig+0x114>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d007      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a18      	ldr	r2, [pc, #96]	@ (80081e0 <TIM_OC1_SetConfig+0x118>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d003      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a17      	ldr	r2, [pc, #92]	@ (80081e4 <TIM_OC1_SetConfig+0x11c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d111      	bne.n	80081ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	621a      	str	r2, [r3, #32]
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	40012c00 	.word	0x40012c00
 80081d8:	40013400 	.word	0x40013400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40014400 	.word	0x40014400
 80081e4:	40014800 	.word	0x40014800

080081e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	f023 0210 	bic.w	r2, r3, #16
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0320 	bic.w	r3, r3, #32
 8008236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a28      	ldr	r2, [pc, #160]	@ (80082e8 <TIM_OC2_SetConfig+0x100>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC2_SetConfig+0x6c>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a27      	ldr	r2, [pc, #156]	@ (80082ec <TIM_OC2_SetConfig+0x104>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d10d      	bne.n	8008270 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800825a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800826e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a1d      	ldr	r2, [pc, #116]	@ (80082e8 <TIM_OC2_SetConfig+0x100>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a1c      	ldr	r2, [pc, #112]	@ (80082ec <TIM_OC2_SetConfig+0x104>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a1b      	ldr	r2, [pc, #108]	@ (80082f0 <TIM_OC2_SetConfig+0x108>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a1a      	ldr	r2, [pc, #104]	@ (80082f4 <TIM_OC2_SetConfig+0x10c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a19      	ldr	r2, [pc, #100]	@ (80082f8 <TIM_OC2_SetConfig+0x110>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d113      	bne.n	80082c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800829e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	621a      	str	r2, [r3, #32]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40012c00 	.word	0x40012c00
 80082ec:	40013400 	.word	0x40013400
 80082f0:	40014000 	.word	0x40014000
 80082f4:	40014400 	.word	0x40014400
 80082f8:	40014800 	.word	0x40014800

080082fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800832a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	4313      	orrs	r3, r2
 8008354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a27      	ldr	r2, [pc, #156]	@ (80083f8 <TIM_OC3_SetConfig+0xfc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d003      	beq.n	8008366 <TIM_OC3_SetConfig+0x6a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a26      	ldr	r2, [pc, #152]	@ (80083fc <TIM_OC3_SetConfig+0x100>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d10d      	bne.n	8008382 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800836c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	021b      	lsls	r3, r3, #8
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a1c      	ldr	r2, [pc, #112]	@ (80083f8 <TIM_OC3_SetConfig+0xfc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00f      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a1b      	ldr	r2, [pc, #108]	@ (80083fc <TIM_OC3_SetConfig+0x100>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00b      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a1a      	ldr	r2, [pc, #104]	@ (8008400 <TIM_OC3_SetConfig+0x104>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d007      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a19      	ldr	r2, [pc, #100]	@ (8008404 <TIM_OC3_SetConfig+0x108>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d003      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a18      	ldr	r2, [pc, #96]	@ (8008408 <TIM_OC3_SetConfig+0x10c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d113      	bne.n	80083d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	621a      	str	r2, [r3, #32]
}
 80083ec:	bf00      	nop
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40013400 	.word	0x40013400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800

0800840c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800843e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800845a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	031b      	lsls	r3, r3, #12
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a18      	ldr	r2, [pc, #96]	@ (80084cc <TIM_OC4_SetConfig+0xc0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00f      	beq.n	8008490 <TIM_OC4_SetConfig+0x84>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a17      	ldr	r2, [pc, #92]	@ (80084d0 <TIM_OC4_SetConfig+0xc4>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00b      	beq.n	8008490 <TIM_OC4_SetConfig+0x84>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a16      	ldr	r2, [pc, #88]	@ (80084d4 <TIM_OC4_SetConfig+0xc8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_OC4_SetConfig+0x84>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a15      	ldr	r2, [pc, #84]	@ (80084d8 <TIM_OC4_SetConfig+0xcc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_OC4_SetConfig+0x84>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a14      	ldr	r2, [pc, #80]	@ (80084dc <TIM_OC4_SetConfig+0xd0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d109      	bne.n	80084a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	019b      	lsls	r3, r3, #6
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40012c00 	.word	0x40012c00
 80084d0:	40013400 	.word	0x40013400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800850e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008524:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a17      	ldr	r2, [pc, #92]	@ (8008594 <TIM_OC5_SetConfig+0xb4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d00f      	beq.n	800855a <TIM_OC5_SetConfig+0x7a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a16      	ldr	r2, [pc, #88]	@ (8008598 <TIM_OC5_SetConfig+0xb8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00b      	beq.n	800855a <TIM_OC5_SetConfig+0x7a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a15      	ldr	r2, [pc, #84]	@ (800859c <TIM_OC5_SetConfig+0xbc>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d007      	beq.n	800855a <TIM_OC5_SetConfig+0x7a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a14      	ldr	r2, [pc, #80]	@ (80085a0 <TIM_OC5_SetConfig+0xc0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d003      	beq.n	800855a <TIM_OC5_SetConfig+0x7a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a13      	ldr	r2, [pc, #76]	@ (80085a4 <TIM_OC5_SetConfig+0xc4>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d109      	bne.n	800856e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	621a      	str	r2, [r3, #32]
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	40012c00 	.word	0x40012c00
 8008598:	40013400 	.word	0x40013400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800

080085a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	051b      	lsls	r3, r3, #20
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a18      	ldr	r2, [pc, #96]	@ (8008660 <TIM_OC6_SetConfig+0xb8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00f      	beq.n	8008624 <TIM_OC6_SetConfig+0x7c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a17      	ldr	r2, [pc, #92]	@ (8008664 <TIM_OC6_SetConfig+0xbc>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d00b      	beq.n	8008624 <TIM_OC6_SetConfig+0x7c>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a16      	ldr	r2, [pc, #88]	@ (8008668 <TIM_OC6_SetConfig+0xc0>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d007      	beq.n	8008624 <TIM_OC6_SetConfig+0x7c>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a15      	ldr	r2, [pc, #84]	@ (800866c <TIM_OC6_SetConfig+0xc4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <TIM_OC6_SetConfig+0x7c>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a14      	ldr	r2, [pc, #80]	@ (8008670 <TIM_OC6_SetConfig+0xc8>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d109      	bne.n	8008638 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800862a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	029b      	lsls	r3, r3, #10
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	4313      	orrs	r3, r2
 8008636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	621a      	str	r2, [r3, #32]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40012c00 	.word	0x40012c00
 8008664:	40013400 	.word	0x40013400
 8008668:	40014000 	.word	0x40014000
 800866c:	40014400 	.word	0x40014400
 8008670:	40014800 	.word	0x40014800

08008674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008688:	2302      	movs	r3, #2
 800868a:	e068      	b.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a2e      	ldr	r2, [pc, #184]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d004      	beq.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d108      	bne.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80086c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a1e      	ldr	r2, [pc, #120]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d01d      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086fe:	d018      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a1b      	ldr	r2, [pc, #108]	@ (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d013      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1a      	ldr	r2, [pc, #104]	@ (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00e      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a18      	ldr	r2, [pc, #96]	@ (800877c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d009      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a13      	ldr	r2, [pc, #76]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a14      	ldr	r2, [pc, #80]	@ (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d10c      	bne.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40000400 	.word	0x40000400
 8008778:	40000800 	.word	0x40000800
 800877c:	40000c00 	.word	0x40000c00
 8008780:	40014000 	.word	0x40014000

08008784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800879c:	2302      	movs	r3, #2
 800879e:	e065      	b.n	800886c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	041b      	lsls	r3, r3, #16
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a16      	ldr	r2, [pc, #88]	@ (8008878 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a14      	ldr	r2, [pc, #80]	@ (800887c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d115      	bne.n	800885a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008838:	051b      	lsls	r3, r3, #20
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	40012c00 	.word	0x40012c00
 800887c:	40013400 	.word	0x40013400

08008880 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008880:	b480      	push	{r7}
 8008882:	b08b      	sub	sp, #44	@ 0x2c
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <HAL_TIMEx_ConfigBreakInput+0x20>
 800889c:	2302      	movs	r3, #2
 800889e:	e0af      	b.n	8008a00 <HAL_TIMEx_ConfigBreakInput+0x180>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	2b07      	cmp	r3, #7
 80088b0:	d83a      	bhi.n	8008928 <HAL_TIMEx_ConfigBreakInput+0xa8>
 80088b2:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <HAL_TIMEx_ConfigBreakInput+0x38>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	080088d9 	.word	0x080088d9
 80088bc:	080088ed 	.word	0x080088ed
 80088c0:	08008929 	.word	0x08008929
 80088c4:	08008901 	.word	0x08008901
 80088c8:	08008929 	.word	0x08008929
 80088cc:	08008929 	.word	0x08008929
 80088d0:	08008929 	.word	0x08008929
 80088d4:	08008915 	.word	0x08008915
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 80088d8:	2301      	movs	r3, #1
 80088da:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 80088dc:	2300      	movs	r3, #0
 80088de:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 80088e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088e4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 80088e6:	2309      	movs	r3, #9
 80088e8:	613b      	str	r3, [r7, #16]
      break;
 80088ea:	e026      	b.n	800893a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 80088ec:	2302      	movs	r3, #2
 80088ee:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 80088f0:	2301      	movs	r3, #1
 80088f2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 80088f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088f8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 80088fa:	230a      	movs	r3, #10
 80088fc:	613b      	str	r3, [r7, #16]
      break;
 80088fe:	e01c      	b.n	800893a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008900:	2304      	movs	r3, #4
 8008902:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008904:	2302      	movs	r3, #2
 8008906:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008908:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800890c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800890e:	230b      	movs	r3, #11
 8008910:	613b      	str	r3, [r7, #16]
      break;
 8008912:	e012      	b.n	800893a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008918:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800891a:	2308      	movs	r3, #8
 800891c:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
      break;
 8008926:	e008      	b.n	800893a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	613b      	str	r3, [r7, #16]
      break;
 8008938:	bf00      	nop
    }
  }

  switch (BreakInput)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d003      	beq.n	8008948 <HAL_TIMEx_ConfigBreakInput+0xc8>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d029      	beq.n	800899a <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008946:	e051      	b.n	80089ec <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800894e:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	43db      	mvns	r3, r3
 8008954:	6a3a      	ldr	r2, [r7, #32]
 8008956:	4013      	ands	r3, r2
 8008958:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	409a      	lsls	r2, r3
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4013      	ands	r3, r2
 8008966:	6a3a      	ldr	r2, [r7, #32]
 8008968:	4313      	orrs	r3, r2
 800896a:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b08      	cmp	r3, #8
 8008972:	d00d      	beq.n	8008990 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	43db      	mvns	r3, r3
 8008978:	6a3a      	ldr	r2, [r7, #32]
 800897a:	4013      	ands	r3, r2
 800897c:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	409a      	lsls	r2, r3
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	4013      	ands	r3, r2
 800898a:	6a3a      	ldr	r2, [r7, #32]
 800898c:	4313      	orrs	r3, r2
 800898e:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6a3a      	ldr	r2, [r7, #32]
 8008996:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8008998:	e02c      	b.n	80089f4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089a0:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	43db      	mvns	r3, r3
 80089a6:	6a3a      	ldr	r2, [r7, #32]
 80089a8:	4013      	ands	r3, r2
 80089aa:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	409a      	lsls	r2, r3
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4013      	ands	r3, r2
 80089b8:	6a3a      	ldr	r2, [r7, #32]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d00d      	beq.n	80089e2 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	43db      	mvns	r3, r3
 80089ca:	6a3a      	ldr	r2, [r7, #32]
 80089cc:	4013      	ands	r3, r2
 80089ce:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	409a      	lsls	r2, r3
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	4013      	ands	r3, r2
 80089dc:	6a3a      	ldr	r2, [r7, #32]
 80089de:	4313      	orrs	r3, r2
 80089e0:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 80089ea:	e003      	b.n	80089f4 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80089f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	372c      	adds	r7, #44	@ 0x2c
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e042      	b.n	8008aa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d106      	bne.n	8008a36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7f9 fd65 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2224      	movs	r2, #36	@ 0x24
 8008a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0201 	bic.w	r2, r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fbb2 	bl	80091c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8b3 	bl	8008bc8 <UART_SetConfig>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e01b      	b.n	8008aa4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0201 	orr.w	r2, r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fc31 	bl	8009304 <UART_CheckIdleState>
 8008aa2:	4603      	mov	r3, r0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08a      	sub	sp, #40	@ 0x28
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d17b      	bne.n	8008bbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <HAL_UART_Transmit+0x26>
 8008acc:	88fb      	ldrh	r3, [r7, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e074      	b.n	8008bc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2221      	movs	r2, #33	@ 0x21
 8008ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ae6:	f7fa fa55 	bl	8002f94 <HAL_GetTick>
 8008aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	88fa      	ldrh	r2, [r7, #6]
 8008af0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	88fa      	ldrh	r2, [r7, #6]
 8008af8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b04:	d108      	bne.n	8008b18 <HAL_UART_Transmit+0x6c>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d104      	bne.n	8008b18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	e003      	b.n	8008b20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b20:	e030      	b.n	8008b84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2180      	movs	r1, #128	@ 0x80
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 fc93 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e03d      	b.n	8008bc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10b      	bne.n	8008b62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	881a      	ldrh	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b56:	b292      	uxth	r2, r2
 8008b58:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	61bb      	str	r3, [r7, #24]
 8008b60:	e007      	b.n	8008b72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	781a      	ldrb	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1c8      	bne.n	8008b22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2200      	movs	r2, #0
 8008b98:	2140      	movs	r1, #64	@ 0x40
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 fc5c 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e006      	b.n	8008bc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e000      	b.n	8008bc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
  }
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3720      	adds	r7, #32
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bcc:	b08c      	sub	sp, #48	@ 0x30
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	431a      	orrs	r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	4baa      	ldr	r3, [pc, #680]	@ (8008ea0 <UART_SetConfig+0x2d8>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c00:	430b      	orrs	r3, r1
 8008c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a9f      	ldr	r2, [pc, #636]	@ (8008ea4 <UART_SetConfig+0x2dc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c30:	4313      	orrs	r3, r2
 8008c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008c3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c52:	f023 010f 	bic.w	r1, r3, #15
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a90      	ldr	r2, [pc, #576]	@ (8008ea8 <UART_SetConfig+0x2e0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d125      	bne.n	8008cb8 <UART_SetConfig+0xf0>
 8008c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8008eac <UART_SetConfig+0x2e4>)
 8008c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d81a      	bhi.n	8008cb0 <UART_SetConfig+0xe8>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <UART_SetConfig+0xb8>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008c99 	.word	0x08008c99
 8008c8c:	08008ca9 	.word	0x08008ca9
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c96:	e116      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c9e:	e112      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ca6:	e10e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cae:	e10a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb6:	e106      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8008eb0 <UART_SetConfig+0x2e8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d138      	bne.n	8008d34 <UART_SetConfig+0x16c>
 8008cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8008eac <UART_SetConfig+0x2e4>)
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc8:	f003 030c 	and.w	r3, r3, #12
 8008ccc:	2b0c      	cmp	r3, #12
 8008cce:	d82d      	bhi.n	8008d2c <UART_SetConfig+0x164>
 8008cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <UART_SetConfig+0x110>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008d0d 	.word	0x08008d0d
 8008cdc:	08008d2d 	.word	0x08008d2d
 8008ce0:	08008d2d 	.word	0x08008d2d
 8008ce4:	08008d2d 	.word	0x08008d2d
 8008ce8:	08008d1d 	.word	0x08008d1d
 8008cec:	08008d2d 	.word	0x08008d2d
 8008cf0:	08008d2d 	.word	0x08008d2d
 8008cf4:	08008d2d 	.word	0x08008d2d
 8008cf8:	08008d15 	.word	0x08008d15
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	08008d2d 	.word	0x08008d2d
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d12:	e0d8      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d14:	2302      	movs	r3, #2
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d1a:	e0d4      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d22:	e0d0      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d2a:	e0cc      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d32:	e0c8      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a5e      	ldr	r2, [pc, #376]	@ (8008eb4 <UART_SetConfig+0x2ec>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d125      	bne.n	8008d8a <UART_SetConfig+0x1c2>
 8008d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8008eac <UART_SetConfig+0x2e4>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d48:	2b30      	cmp	r3, #48	@ 0x30
 8008d4a:	d016      	beq.n	8008d7a <UART_SetConfig+0x1b2>
 8008d4c:	2b30      	cmp	r3, #48	@ 0x30
 8008d4e:	d818      	bhi.n	8008d82 <UART_SetConfig+0x1ba>
 8008d50:	2b20      	cmp	r3, #32
 8008d52:	d00a      	beq.n	8008d6a <UART_SetConfig+0x1a2>
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d814      	bhi.n	8008d82 <UART_SetConfig+0x1ba>
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <UART_SetConfig+0x19a>
 8008d5c:	2b10      	cmp	r3, #16
 8008d5e:	d008      	beq.n	8008d72 <UART_SetConfig+0x1aa>
 8008d60:	e00f      	b.n	8008d82 <UART_SetConfig+0x1ba>
 8008d62:	2300      	movs	r3, #0
 8008d64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d68:	e0ad      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d70:	e0a9      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d72:	2304      	movs	r3, #4
 8008d74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d78:	e0a5      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d80:	e0a1      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d82:	2310      	movs	r3, #16
 8008d84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d88:	e09d      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8008eb8 <UART_SetConfig+0x2f0>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d125      	bne.n	8008de0 <UART_SetConfig+0x218>
 8008d94:	4b45      	ldr	r3, [pc, #276]	@ (8008eac <UART_SetConfig+0x2e4>)
 8008d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008da0:	d016      	beq.n	8008dd0 <UART_SetConfig+0x208>
 8008da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008da4:	d818      	bhi.n	8008dd8 <UART_SetConfig+0x210>
 8008da6:	2b80      	cmp	r3, #128	@ 0x80
 8008da8:	d00a      	beq.n	8008dc0 <UART_SetConfig+0x1f8>
 8008daa:	2b80      	cmp	r3, #128	@ 0x80
 8008dac:	d814      	bhi.n	8008dd8 <UART_SetConfig+0x210>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <UART_SetConfig+0x1f0>
 8008db2:	2b40      	cmp	r3, #64	@ 0x40
 8008db4:	d008      	beq.n	8008dc8 <UART_SetConfig+0x200>
 8008db6:	e00f      	b.n	8008dd8 <UART_SetConfig+0x210>
 8008db8:	2300      	movs	r3, #0
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dbe:	e082      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dc6:	e07e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dc8:	2304      	movs	r3, #4
 8008dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dce:	e07a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd6:	e076      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dde:	e072      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a35      	ldr	r2, [pc, #212]	@ (8008ebc <UART_SetConfig+0x2f4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d12a      	bne.n	8008e40 <UART_SetConfig+0x278>
 8008dea:	4b30      	ldr	r3, [pc, #192]	@ (8008eac <UART_SetConfig+0x2e4>)
 8008dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df8:	d01a      	beq.n	8008e30 <UART_SetConfig+0x268>
 8008dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dfe:	d81b      	bhi.n	8008e38 <UART_SetConfig+0x270>
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e04:	d00c      	beq.n	8008e20 <UART_SetConfig+0x258>
 8008e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e0a:	d815      	bhi.n	8008e38 <UART_SetConfig+0x270>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <UART_SetConfig+0x250>
 8008e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e14:	d008      	beq.n	8008e28 <UART_SetConfig+0x260>
 8008e16:	e00f      	b.n	8008e38 <UART_SetConfig+0x270>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1e:	e052      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e20:	2302      	movs	r3, #2
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e26:	e04e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2e:	e04a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e36:	e046      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e3e:	e042      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a17      	ldr	r2, [pc, #92]	@ (8008ea4 <UART_SetConfig+0x2dc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d13a      	bne.n	8008ec0 <UART_SetConfig+0x2f8>
 8008e4a:	4b18      	ldr	r3, [pc, #96]	@ (8008eac <UART_SetConfig+0x2e4>)
 8008e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e58:	d01a      	beq.n	8008e90 <UART_SetConfig+0x2c8>
 8008e5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e5e:	d81b      	bhi.n	8008e98 <UART_SetConfig+0x2d0>
 8008e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e64:	d00c      	beq.n	8008e80 <UART_SetConfig+0x2b8>
 8008e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e6a:	d815      	bhi.n	8008e98 <UART_SetConfig+0x2d0>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <UART_SetConfig+0x2b0>
 8008e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e74:	d008      	beq.n	8008e88 <UART_SetConfig+0x2c0>
 8008e76:	e00f      	b.n	8008e98 <UART_SetConfig+0x2d0>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e7e:	e022      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e80:	2302      	movs	r3, #2
 8008e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e86:	e01e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e8e:	e01a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e96:	e016      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9e:	e012      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008ea0:	cfff69f3 	.word	0xcfff69f3
 8008ea4:	40008000 	.word	0x40008000
 8008ea8:	40013800 	.word	0x40013800
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	40004400 	.word	0x40004400
 8008eb4:	40004800 	.word	0x40004800
 8008eb8:	40004c00 	.word	0x40004c00
 8008ebc:	40005000 	.word	0x40005000
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4aae      	ldr	r2, [pc, #696]	@ (8009184 <UART_SetConfig+0x5bc>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	f040 8097 	bne.w	8009000 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d823      	bhi.n	8008f22 <UART_SetConfig+0x35a>
 8008eda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <UART_SetConfig+0x318>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f23 	.word	0x08008f23
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f23 	.word	0x08008f23
 8008ef0:	08008f13 	.word	0x08008f13
 8008ef4:	08008f23 	.word	0x08008f23
 8008ef8:	08008f23 	.word	0x08008f23
 8008efc:	08008f23 	.word	0x08008f23
 8008f00:	08008f1b 	.word	0x08008f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f04:	f7fc fb66 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8008f08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f0a:	e010      	b.n	8008f2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f0c:	4b9e      	ldr	r3, [pc, #632]	@ (8009188 <UART_SetConfig+0x5c0>)
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f10:	e00d      	b.n	8008f2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f12:	f7fc fac7 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8008f16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f18:	e009      	b.n	8008f2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f20:	e005      	b.n	8008f2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8130 	beq.w	8009196 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	4a94      	ldr	r2, [pc, #592]	@ (800918c <UART_SetConfig+0x5c4>)
 8008f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	4413      	add	r3, r2
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d305      	bcc.n	8008f66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d903      	bls.n	8008f6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f6c:	e113      	b.n	8009196 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	2200      	movs	r2, #0
 8008f72:	60bb      	str	r3, [r7, #8]
 8008f74:	60fa      	str	r2, [r7, #12]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	4a84      	ldr	r2, [pc, #528]	@ (800918c <UART_SetConfig+0x5c4>)
 8008f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2200      	movs	r2, #0
 8008f84:	603b      	str	r3, [r7, #0]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f90:	f7f7 fe22 	bl	8000bd8 <__aeabi_uldivmod>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	020b      	lsls	r3, r1, #8
 8008fa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008faa:	0202      	lsls	r2, r0, #8
 8008fac:	6979      	ldr	r1, [r7, #20]
 8008fae:	6849      	ldr	r1, [r1, #4]
 8008fb0:	0849      	lsrs	r1, r1, #1
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	eb12 0804 	adds.w	r8, r2, r4
 8008fbc:	eb43 0905 	adc.w	r9, r3, r5
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	469a      	mov	sl, r3
 8008fc8:	4693      	mov	fp, r2
 8008fca:	4652      	mov	r2, sl
 8008fcc:	465b      	mov	r3, fp
 8008fce:	4640      	mov	r0, r8
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	f7f7 fe01 	bl	8000bd8 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4613      	mov	r3, r2
 8008fdc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fe4:	d308      	bcc.n	8008ff8 <UART_SetConfig+0x430>
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fec:	d204      	bcs.n	8008ff8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6a3a      	ldr	r2, [r7, #32]
 8008ff4:	60da      	str	r2, [r3, #12]
 8008ff6:	e0ce      	b.n	8009196 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ffe:	e0ca      	b.n	8009196 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009008:	d166      	bne.n	80090d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800900a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800900e:	2b08      	cmp	r3, #8
 8009010:	d827      	bhi.n	8009062 <UART_SetConfig+0x49a>
 8009012:	a201      	add	r2, pc, #4	@ (adr r2, 8009018 <UART_SetConfig+0x450>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009045 	.word	0x08009045
 8009020:	0800904d 	.word	0x0800904d
 8009024:	08009063 	.word	0x08009063
 8009028:	08009053 	.word	0x08009053
 800902c:	08009063 	.word	0x08009063
 8009030:	08009063 	.word	0x08009063
 8009034:	08009063 	.word	0x08009063
 8009038:	0800905b 	.word	0x0800905b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800903c:	f7fc faca 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8009040:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009042:	e014      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009044:	f7fc fadc 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 8009048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800904a:	e010      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800904c:	4b4e      	ldr	r3, [pc, #312]	@ (8009188 <UART_SetConfig+0x5c0>)
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009050:	e00d      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009052:	f7fc fa27 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8009056:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009058:	e009      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800905e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009060:	e005      	b.n	800906e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800906c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8090 	beq.w	8009196 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907a:	4a44      	ldr	r2, [pc, #272]	@ (800918c <UART_SetConfig+0x5c4>)
 800907c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009080:	461a      	mov	r2, r3
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	fbb3 f3f2 	udiv	r3, r3, r2
 8009088:	005a      	lsls	r2, r3, #1
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	085b      	lsrs	r3, r3, #1
 8009090:	441a      	add	r2, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	fbb2 f3f3 	udiv	r3, r2, r3
 800909a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	2b0f      	cmp	r3, #15
 80090a0:	d916      	bls.n	80090d0 <UART_SetConfig+0x508>
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a8:	d212      	bcs.n	80090d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f023 030f 	bic.w	r3, r3, #15
 80090b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	b29a      	uxth	r2, r3
 80090c0:	8bfb      	ldrh	r3, [r7, #30]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	8bfa      	ldrh	r2, [r7, #30]
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	e062      	b.n	8009196 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090d6:	e05e      	b.n	8009196 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090dc:	2b08      	cmp	r3, #8
 80090de:	d828      	bhi.n	8009132 <UART_SetConfig+0x56a>
 80090e0:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <UART_SetConfig+0x520>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	0800910d 	.word	0x0800910d
 80090ec:	08009115 	.word	0x08009115
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	08009133 	.word	0x08009133
 80090f8:	08009123 	.word	0x08009123
 80090fc:	08009133 	.word	0x08009133
 8009100:	08009133 	.word	0x08009133
 8009104:	08009133 	.word	0x08009133
 8009108:	0800912b 	.word	0x0800912b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800910c:	f7fc fa62 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8009110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009112:	e014      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009114:	f7fc fa74 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 8009118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800911a:	e010      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800911c:	4b1a      	ldr	r3, [pc, #104]	@ (8009188 <UART_SetConfig+0x5c0>)
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009120:	e00d      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009122:	f7fc f9bf 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8009126:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009128:	e009      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800912a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800912e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009130:	e005      	b.n	800913e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800913c:	bf00      	nop
    }

    if (pclk != 0U)
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	2b00      	cmp	r3, #0
 8009142:	d028      	beq.n	8009196 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009148:	4a10      	ldr	r2, [pc, #64]	@ (800918c <UART_SetConfig+0x5c4>)
 800914a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800914e:	461a      	mov	r2, r3
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	fbb3 f2f2 	udiv	r2, r3, r2
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	441a      	add	r2, r3
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	fbb2 f3f3 	udiv	r3, r2, r3
 8009166:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	2b0f      	cmp	r3, #15
 800916c:	d910      	bls.n	8009190 <UART_SetConfig+0x5c8>
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009174:	d20c      	bcs.n	8009190 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	b29a      	uxth	r2, r3
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60da      	str	r2, [r3, #12]
 8009180:	e009      	b.n	8009196 <UART_SetConfig+0x5ce>
 8009182:	bf00      	nop
 8009184:	40008000 	.word	0x40008000
 8009188:	00f42400 	.word	0x00f42400
 800918c:	0800c234 	.word	0x0800c234
      }
      else
      {
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2201      	movs	r2, #1
 800919a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2200      	movs	r2, #0
 80091aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2200      	movs	r2, #0
 80091b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3730      	adds	r7, #48	@ 0x30
 80091ba:	46bd      	mov	sp, r7
 80091bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01a      	beq.n	80092d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092be:	d10a      	bne.n	80092d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	605a      	str	r2, [r3, #4]
  }
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b098      	sub	sp, #96	@ 0x60
 8009308:	af02      	add	r7, sp, #8
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009314:	f7f9 fe3e 	bl	8002f94 <HAL_GetTick>
 8009318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b08      	cmp	r3, #8
 8009326:	d12f      	bne.n	8009388 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009330:	2200      	movs	r2, #0
 8009332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f88e 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d022      	beq.n	8009388 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009356:	653b      	str	r3, [r7, #80]	@ 0x50
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009360:	647b      	str	r3, [r7, #68]	@ 0x44
 8009362:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e063      	b.n	8009450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d149      	bne.n	800942a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009396:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800939e:	2200      	movs	r2, #0
 80093a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f857 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d03c      	beq.n	800942a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	623b      	str	r3, [r7, #32]
   return(result);
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80093d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e6      	bne.n	80093b0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3308      	adds	r3, #8
 80093e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f023 0301 	bic.w	r3, r3, #1
 80093f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3308      	adds	r3, #8
 8009400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009402:	61fa      	str	r2, [r7, #28]
 8009404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	69b9      	ldr	r1, [r7, #24]
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	617b      	str	r3, [r7, #20]
   return(result);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e5      	bne.n	80093e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e012      	b.n	8009450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3758      	adds	r7, #88	@ 0x58
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	4613      	mov	r3, r2
 8009466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009468:	e049      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009470:	d045      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009472:	f7f9 fd8f 	bl	8002f94 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	429a      	cmp	r2, r3
 8009480:	d302      	bcc.n	8009488 <UART_WaitOnFlagUntilTimeout+0x30>
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e048      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	d031      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d110      	bne.n	80094ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2208      	movs	r2, #8
 80094ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f838 	bl	8009526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2208      	movs	r2, #8
 80094ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e029      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094d8:	d111      	bne.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f81e 	bl	8009526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e00f      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	bf0c      	ite	eq
 800950e:	2301      	moveq	r3, #1
 8009510:	2300      	movne	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	429a      	cmp	r2, r3
 800951a:	d0a6      	beq.n	800946a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009526:	b480      	push	{r7}
 8009528:	b095      	sub	sp, #84	@ 0x54
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800954c:	643b      	str	r3, [r7, #64]	@ 0x40
 800954e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800955a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3308      	adds	r3, #8
 8009582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800958a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e3      	bne.n	8009560 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d118      	bne.n	80095d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f023 0310 	bic.w	r3, r3, #16
 80095b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095be:	61bb      	str	r3, [r7, #24]
 80095c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6979      	ldr	r1, [r7, #20]
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	613b      	str	r3, [r7, #16]
   return(result);
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e6      	bne.n	80095a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80095e6:	bf00      	nop
 80095e8:	3754      	adds	r7, #84	@ 0x54
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_UARTEx_DisableFifoMode+0x16>
 8009604:	2302      	movs	r3, #2
 8009606:	e027      	b.n	8009658 <HAL_UARTEx_DisableFifoMode+0x66>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	@ 0x24
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0201 	bic.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009678:	2302      	movs	r3, #2
 800967a:	e02d      	b.n	80096d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2224      	movs	r2, #36	@ 0x24
 8009688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0201 	bic.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f84f 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e02d      	b.n	8009754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2224      	movs	r2, #36	@ 0x24
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0201 	bic.w	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f811 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009768:	2b00      	cmp	r3, #0
 800976a:	d108      	bne.n	800977e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800977c:	e031      	b.n	80097e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800977e:	2308      	movs	r3, #8
 8009780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009782:	2308      	movs	r3, #8
 8009784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	0e5b      	lsrs	r3, r3, #25
 800978e:	b2db      	uxtb	r3, r3
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	0f5b      	lsrs	r3, r3, #29
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	7b3a      	ldrb	r2, [r7, #12]
 80097aa:	4911      	ldr	r1, [pc, #68]	@ (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ac:	5c8a      	ldrb	r2, [r1, r2]
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097b2:	7b3a      	ldrb	r2, [r7, #12]
 80097b4:	490f      	ldr	r1, [pc, #60]	@ (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	7b7a      	ldrb	r2, [r7, #13]
 80097c8:	4909      	ldr	r1, [pc, #36]	@ (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ca:	5c8a      	ldrb	r2, [r1, r2]
 80097cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097d0:	7b7a      	ldrb	r2, [r7, #13]
 80097d2:	4908      	ldr	r1, [pc, #32]	@ (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097da:	b29a      	uxth	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	0800c24c 	.word	0x0800c24c
 80097f4:	0800c254 	.word	0x0800c254

080097f8 <__cvt>:
 80097f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	ec57 6b10 	vmov	r6, r7, d0
 8009800:	2f00      	cmp	r7, #0
 8009802:	460c      	mov	r4, r1
 8009804:	4619      	mov	r1, r3
 8009806:	463b      	mov	r3, r7
 8009808:	bfbb      	ittet	lt
 800980a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800980e:	461f      	movlt	r7, r3
 8009810:	2300      	movge	r3, #0
 8009812:	232d      	movlt	r3, #45	@ 0x2d
 8009814:	700b      	strb	r3, [r1, #0]
 8009816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009818:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800981c:	4691      	mov	r9, r2
 800981e:	f023 0820 	bic.w	r8, r3, #32
 8009822:	bfbc      	itt	lt
 8009824:	4632      	movlt	r2, r6
 8009826:	4616      	movlt	r6, r2
 8009828:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800982c:	d005      	beq.n	800983a <__cvt+0x42>
 800982e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009832:	d100      	bne.n	8009836 <__cvt+0x3e>
 8009834:	3401      	adds	r4, #1
 8009836:	2102      	movs	r1, #2
 8009838:	e000      	b.n	800983c <__cvt+0x44>
 800983a:	2103      	movs	r1, #3
 800983c:	ab03      	add	r3, sp, #12
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	ab02      	add	r3, sp, #8
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	ec47 6b10 	vmov	d0, r6, r7
 8009848:	4653      	mov	r3, sl
 800984a:	4622      	mov	r2, r4
 800984c:	f000 fe54 	bl	800a4f8 <_dtoa_r>
 8009850:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009854:	4605      	mov	r5, r0
 8009856:	d119      	bne.n	800988c <__cvt+0x94>
 8009858:	f019 0f01 	tst.w	r9, #1
 800985c:	d00e      	beq.n	800987c <__cvt+0x84>
 800985e:	eb00 0904 	add.w	r9, r0, r4
 8009862:	2200      	movs	r2, #0
 8009864:	2300      	movs	r3, #0
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f7 f945 	bl	8000af8 <__aeabi_dcmpeq>
 800986e:	b108      	cbz	r0, 8009874 <__cvt+0x7c>
 8009870:	f8cd 900c 	str.w	r9, [sp, #12]
 8009874:	2230      	movs	r2, #48	@ 0x30
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	454b      	cmp	r3, r9
 800987a:	d31e      	bcc.n	80098ba <__cvt+0xc2>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009880:	1b5b      	subs	r3, r3, r5
 8009882:	4628      	mov	r0, r5
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	b004      	add	sp, #16
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009890:	eb00 0904 	add.w	r9, r0, r4
 8009894:	d1e5      	bne.n	8009862 <__cvt+0x6a>
 8009896:	7803      	ldrb	r3, [r0, #0]
 8009898:	2b30      	cmp	r3, #48	@ 0x30
 800989a:	d10a      	bne.n	80098b2 <__cvt+0xba>
 800989c:	2200      	movs	r2, #0
 800989e:	2300      	movs	r3, #0
 80098a0:	4630      	mov	r0, r6
 80098a2:	4639      	mov	r1, r7
 80098a4:	f7f7 f928 	bl	8000af8 <__aeabi_dcmpeq>
 80098a8:	b918      	cbnz	r0, 80098b2 <__cvt+0xba>
 80098aa:	f1c4 0401 	rsb	r4, r4, #1
 80098ae:	f8ca 4000 	str.w	r4, [sl]
 80098b2:	f8da 3000 	ldr.w	r3, [sl]
 80098b6:	4499      	add	r9, r3
 80098b8:	e7d3      	b.n	8009862 <__cvt+0x6a>
 80098ba:	1c59      	adds	r1, r3, #1
 80098bc:	9103      	str	r1, [sp, #12]
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e7d9      	b.n	8009876 <__cvt+0x7e>

080098c2 <__exponent>:
 80098c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098c4:	2900      	cmp	r1, #0
 80098c6:	bfba      	itte	lt
 80098c8:	4249      	neglt	r1, r1
 80098ca:	232d      	movlt	r3, #45	@ 0x2d
 80098cc:	232b      	movge	r3, #43	@ 0x2b
 80098ce:	2909      	cmp	r1, #9
 80098d0:	7002      	strb	r2, [r0, #0]
 80098d2:	7043      	strb	r3, [r0, #1]
 80098d4:	dd29      	ble.n	800992a <__exponent+0x68>
 80098d6:	f10d 0307 	add.w	r3, sp, #7
 80098da:	461d      	mov	r5, r3
 80098dc:	270a      	movs	r7, #10
 80098de:	461a      	mov	r2, r3
 80098e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80098e4:	fb07 1416 	mls	r4, r7, r6, r1
 80098e8:	3430      	adds	r4, #48	@ 0x30
 80098ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098ee:	460c      	mov	r4, r1
 80098f0:	2c63      	cmp	r4, #99	@ 0x63
 80098f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80098f6:	4631      	mov	r1, r6
 80098f8:	dcf1      	bgt.n	80098de <__exponent+0x1c>
 80098fa:	3130      	adds	r1, #48	@ 0x30
 80098fc:	1e94      	subs	r4, r2, #2
 80098fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009902:	1c41      	adds	r1, r0, #1
 8009904:	4623      	mov	r3, r4
 8009906:	42ab      	cmp	r3, r5
 8009908:	d30a      	bcc.n	8009920 <__exponent+0x5e>
 800990a:	f10d 0309 	add.w	r3, sp, #9
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	42ac      	cmp	r4, r5
 8009912:	bf88      	it	hi
 8009914:	2300      	movhi	r3, #0
 8009916:	3302      	adds	r3, #2
 8009918:	4403      	add	r3, r0
 800991a:	1a18      	subs	r0, r3, r0
 800991c:	b003      	add	sp, #12
 800991e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009920:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009924:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009928:	e7ed      	b.n	8009906 <__exponent+0x44>
 800992a:	2330      	movs	r3, #48	@ 0x30
 800992c:	3130      	adds	r1, #48	@ 0x30
 800992e:	7083      	strb	r3, [r0, #2]
 8009930:	70c1      	strb	r1, [r0, #3]
 8009932:	1d03      	adds	r3, r0, #4
 8009934:	e7f1      	b.n	800991a <__exponent+0x58>
	...

08009938 <_printf_float>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	b08d      	sub	sp, #52	@ 0x34
 800993e:	460c      	mov	r4, r1
 8009940:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009944:	4616      	mov	r6, r2
 8009946:	461f      	mov	r7, r3
 8009948:	4605      	mov	r5, r0
 800994a:	f000 fcd5 	bl	800a2f8 <_localeconv_r>
 800994e:	6803      	ldr	r3, [r0, #0]
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	4618      	mov	r0, r3
 8009954:	f7f6 fca4 	bl	80002a0 <strlen>
 8009958:	2300      	movs	r3, #0
 800995a:	930a      	str	r3, [sp, #40]	@ 0x28
 800995c:	f8d8 3000 	ldr.w	r3, [r8]
 8009960:	9005      	str	r0, [sp, #20]
 8009962:	3307      	adds	r3, #7
 8009964:	f023 0307 	bic.w	r3, r3, #7
 8009968:	f103 0208 	add.w	r2, r3, #8
 800996c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009970:	f8d4 b000 	ldr.w	fp, [r4]
 8009974:	f8c8 2000 	str.w	r2, [r8]
 8009978:	e9d3 8900 	ldrd	r8, r9, [r3]
 800997c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	f8cd 8018 	str.w	r8, [sp, #24]
 8009986:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800998a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800998e:	4b9c      	ldr	r3, [pc, #624]	@ (8009c00 <_printf_float+0x2c8>)
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	f7f7 f8e2 	bl	8000b5c <__aeabi_dcmpun>
 8009998:	bb70      	cbnz	r0, 80099f8 <_printf_float+0xc0>
 800999a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800999e:	4b98      	ldr	r3, [pc, #608]	@ (8009c00 <_printf_float+0x2c8>)
 80099a0:	f04f 32ff 	mov.w	r2, #4294967295
 80099a4:	f7f7 f8bc 	bl	8000b20 <__aeabi_dcmple>
 80099a8:	bb30      	cbnz	r0, 80099f8 <_printf_float+0xc0>
 80099aa:	2200      	movs	r2, #0
 80099ac:	2300      	movs	r3, #0
 80099ae:	4640      	mov	r0, r8
 80099b0:	4649      	mov	r1, r9
 80099b2:	f7f7 f8ab 	bl	8000b0c <__aeabi_dcmplt>
 80099b6:	b110      	cbz	r0, 80099be <_printf_float+0x86>
 80099b8:	232d      	movs	r3, #45	@ 0x2d
 80099ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099be:	4a91      	ldr	r2, [pc, #580]	@ (8009c04 <_printf_float+0x2cc>)
 80099c0:	4b91      	ldr	r3, [pc, #580]	@ (8009c08 <_printf_float+0x2d0>)
 80099c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099c6:	bf94      	ite	ls
 80099c8:	4690      	movls	r8, r2
 80099ca:	4698      	movhi	r8, r3
 80099cc:	2303      	movs	r3, #3
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	f02b 0304 	bic.w	r3, fp, #4
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	f04f 0900 	mov.w	r9, #0
 80099da:	9700      	str	r7, [sp, #0]
 80099dc:	4633      	mov	r3, r6
 80099de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099e0:	4621      	mov	r1, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f9d2 	bl	8009d8c <_printf_common>
 80099e8:	3001      	adds	r0, #1
 80099ea:	f040 808d 	bne.w	8009b08 <_printf_float+0x1d0>
 80099ee:	f04f 30ff 	mov.w	r0, #4294967295
 80099f2:	b00d      	add	sp, #52	@ 0x34
 80099f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f8:	4642      	mov	r2, r8
 80099fa:	464b      	mov	r3, r9
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f7 f8ac 	bl	8000b5c <__aeabi_dcmpun>
 8009a04:	b140      	cbz	r0, 8009a18 <_printf_float+0xe0>
 8009a06:	464b      	mov	r3, r9
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	bfbc      	itt	lt
 8009a0c:	232d      	movlt	r3, #45	@ 0x2d
 8009a0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a12:	4a7e      	ldr	r2, [pc, #504]	@ (8009c0c <_printf_float+0x2d4>)
 8009a14:	4b7e      	ldr	r3, [pc, #504]	@ (8009c10 <_printf_float+0x2d8>)
 8009a16:	e7d4      	b.n	80099c2 <_printf_float+0x8a>
 8009a18:	6863      	ldr	r3, [r4, #4]
 8009a1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a1e:	9206      	str	r2, [sp, #24]
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	d13b      	bne.n	8009a9c <_printf_float+0x164>
 8009a24:	2306      	movs	r3, #6
 8009a26:	6063      	str	r3, [r4, #4]
 8009a28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6022      	str	r2, [r4, #0]
 8009a30:	9303      	str	r3, [sp, #12]
 8009a32:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a38:	ab09      	add	r3, sp, #36	@ 0x24
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	6861      	ldr	r1, [r4, #4]
 8009a3e:	ec49 8b10 	vmov	d0, r8, r9
 8009a42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a46:	4628      	mov	r0, r5
 8009a48:	f7ff fed6 	bl	80097f8 <__cvt>
 8009a4c:	9b06      	ldr	r3, [sp, #24]
 8009a4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a50:	2b47      	cmp	r3, #71	@ 0x47
 8009a52:	4680      	mov	r8, r0
 8009a54:	d129      	bne.n	8009aaa <_printf_float+0x172>
 8009a56:	1cc8      	adds	r0, r1, #3
 8009a58:	db02      	blt.n	8009a60 <_printf_float+0x128>
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	dd41      	ble.n	8009ae4 <_printf_float+0x1ac>
 8009a60:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a64:	fa5f fa8a 	uxtb.w	sl, sl
 8009a68:	3901      	subs	r1, #1
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a70:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a72:	f7ff ff26 	bl	80098c2 <__exponent>
 8009a76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a78:	1813      	adds	r3, r2, r0
 8009a7a:	2a01      	cmp	r2, #1
 8009a7c:	4681      	mov	r9, r0
 8009a7e:	6123      	str	r3, [r4, #16]
 8009a80:	dc02      	bgt.n	8009a88 <_printf_float+0x150>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	07d2      	lsls	r2, r2, #31
 8009a86:	d501      	bpl.n	8009a8c <_printf_float+0x154>
 8009a88:	3301      	adds	r3, #1
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0a2      	beq.n	80099da <_printf_float+0xa2>
 8009a94:	232d      	movs	r3, #45	@ 0x2d
 8009a96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a9a:	e79e      	b.n	80099da <_printf_float+0xa2>
 8009a9c:	9a06      	ldr	r2, [sp, #24]
 8009a9e:	2a47      	cmp	r2, #71	@ 0x47
 8009aa0:	d1c2      	bne.n	8009a28 <_printf_float+0xf0>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1c0      	bne.n	8009a28 <_printf_float+0xf0>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e7bd      	b.n	8009a26 <_printf_float+0xee>
 8009aaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009aae:	d9db      	bls.n	8009a68 <_printf_float+0x130>
 8009ab0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ab4:	d118      	bne.n	8009ae8 <_printf_float+0x1b0>
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	6863      	ldr	r3, [r4, #4]
 8009aba:	dd0b      	ble.n	8009ad4 <_printf_float+0x19c>
 8009abc:	6121      	str	r1, [r4, #16]
 8009abe:	b913      	cbnz	r3, 8009ac6 <_printf_float+0x18e>
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	07d0      	lsls	r0, r2, #31
 8009ac4:	d502      	bpl.n	8009acc <_printf_float+0x194>
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	440b      	add	r3, r1
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ace:	f04f 0900 	mov.w	r9, #0
 8009ad2:	e7db      	b.n	8009a8c <_printf_float+0x154>
 8009ad4:	b913      	cbnz	r3, 8009adc <_printf_float+0x1a4>
 8009ad6:	6822      	ldr	r2, [r4, #0]
 8009ad8:	07d2      	lsls	r2, r2, #31
 8009ada:	d501      	bpl.n	8009ae0 <_printf_float+0x1a8>
 8009adc:	3302      	adds	r3, #2
 8009ade:	e7f4      	b.n	8009aca <_printf_float+0x192>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e7f2      	b.n	8009aca <_printf_float+0x192>
 8009ae4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aea:	4299      	cmp	r1, r3
 8009aec:	db05      	blt.n	8009afa <_printf_float+0x1c2>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	6121      	str	r1, [r4, #16]
 8009af2:	07d8      	lsls	r0, r3, #31
 8009af4:	d5ea      	bpl.n	8009acc <_printf_float+0x194>
 8009af6:	1c4b      	adds	r3, r1, #1
 8009af8:	e7e7      	b.n	8009aca <_printf_float+0x192>
 8009afa:	2900      	cmp	r1, #0
 8009afc:	bfd4      	ite	le
 8009afe:	f1c1 0202 	rsble	r2, r1, #2
 8009b02:	2201      	movgt	r2, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	e7e0      	b.n	8009aca <_printf_float+0x192>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	055a      	lsls	r2, r3, #21
 8009b0c:	d407      	bmi.n	8009b1e <_printf_float+0x1e6>
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	4642      	mov	r2, r8
 8009b12:	4631      	mov	r1, r6
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b8      	blx	r7
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d12b      	bne.n	8009b74 <_printf_float+0x23c>
 8009b1c:	e767      	b.n	80099ee <_printf_float+0xb6>
 8009b1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b22:	f240 80dd 	bls.w	8009ce0 <_printf_float+0x3a8>
 8009b26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f7f6 ffe3 	bl	8000af8 <__aeabi_dcmpeq>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d033      	beq.n	8009b9e <_printf_float+0x266>
 8009b36:	4a37      	ldr	r2, [pc, #220]	@ (8009c14 <_printf_float+0x2dc>)
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b8      	blx	r7
 8009b40:	3001      	adds	r0, #1
 8009b42:	f43f af54 	beq.w	80099ee <_printf_float+0xb6>
 8009b46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b4a:	4543      	cmp	r3, r8
 8009b4c:	db02      	blt.n	8009b54 <_printf_float+0x21c>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	07d8      	lsls	r0, r3, #31
 8009b52:	d50f      	bpl.n	8009b74 <_printf_float+0x23c>
 8009b54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f af45 	beq.w	80099ee <_printf_float+0xb6>
 8009b64:	f04f 0900 	mov.w	r9, #0
 8009b68:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b6c:	f104 0a1a 	add.w	sl, r4, #26
 8009b70:	45c8      	cmp	r8, r9
 8009b72:	dc09      	bgt.n	8009b88 <_printf_float+0x250>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	079b      	lsls	r3, r3, #30
 8009b78:	f100 8103 	bmi.w	8009d82 <_printf_float+0x44a>
 8009b7c:	68e0      	ldr	r0, [r4, #12]
 8009b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b80:	4298      	cmp	r0, r3
 8009b82:	bfb8      	it	lt
 8009b84:	4618      	movlt	r0, r3
 8009b86:	e734      	b.n	80099f2 <_printf_float+0xba>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f af2b 	beq.w	80099ee <_printf_float+0xb6>
 8009b98:	f109 0901 	add.w	r9, r9, #1
 8009b9c:	e7e8      	b.n	8009b70 <_printf_float+0x238>
 8009b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dc39      	bgt.n	8009c18 <_printf_float+0x2e0>
 8009ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8009c14 <_printf_float+0x2dc>)
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	47b8      	blx	r7
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f43f af1d 	beq.w	80099ee <_printf_float+0xb6>
 8009bb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009bb8:	ea59 0303 	orrs.w	r3, r9, r3
 8009bbc:	d102      	bne.n	8009bc4 <_printf_float+0x28c>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	07d9      	lsls	r1, r3, #31
 8009bc2:	d5d7      	bpl.n	8009b74 <_printf_float+0x23c>
 8009bc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f af0d 	beq.w	80099ee <_printf_float+0xb6>
 8009bd4:	f04f 0a00 	mov.w	sl, #0
 8009bd8:	f104 0b1a 	add.w	fp, r4, #26
 8009bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bde:	425b      	negs	r3, r3
 8009be0:	4553      	cmp	r3, sl
 8009be2:	dc01      	bgt.n	8009be8 <_printf_float+0x2b0>
 8009be4:	464b      	mov	r3, r9
 8009be6:	e793      	b.n	8009b10 <_printf_float+0x1d8>
 8009be8:	2301      	movs	r3, #1
 8009bea:	465a      	mov	r2, fp
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	47b8      	blx	r7
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	f43f aefb 	beq.w	80099ee <_printf_float+0xb6>
 8009bf8:	f10a 0a01 	add.w	sl, sl, #1
 8009bfc:	e7ee      	b.n	8009bdc <_printf_float+0x2a4>
 8009bfe:	bf00      	nop
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	0800c25c 	.word	0x0800c25c
 8009c08:	0800c260 	.word	0x0800c260
 8009c0c:	0800c264 	.word	0x0800c264
 8009c10:	0800c268 	.word	0x0800c268
 8009c14:	0800c26c 	.word	0x0800c26c
 8009c18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c1e:	4553      	cmp	r3, sl
 8009c20:	bfa8      	it	ge
 8009c22:	4653      	movge	r3, sl
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	4699      	mov	r9, r3
 8009c28:	dc36      	bgt.n	8009c98 <_printf_float+0x360>
 8009c2a:	f04f 0b00 	mov.w	fp, #0
 8009c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c32:	f104 021a 	add.w	r2, r4, #26
 8009c36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c38:	9306      	str	r3, [sp, #24]
 8009c3a:	eba3 0309 	sub.w	r3, r3, r9
 8009c3e:	455b      	cmp	r3, fp
 8009c40:	dc31      	bgt.n	8009ca6 <_printf_float+0x36e>
 8009c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c44:	459a      	cmp	sl, r3
 8009c46:	dc3a      	bgt.n	8009cbe <_printf_float+0x386>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	07da      	lsls	r2, r3, #31
 8009c4c:	d437      	bmi.n	8009cbe <_printf_float+0x386>
 8009c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c50:	ebaa 0903 	sub.w	r9, sl, r3
 8009c54:	9b06      	ldr	r3, [sp, #24]
 8009c56:	ebaa 0303 	sub.w	r3, sl, r3
 8009c5a:	4599      	cmp	r9, r3
 8009c5c:	bfa8      	it	ge
 8009c5e:	4699      	movge	r9, r3
 8009c60:	f1b9 0f00 	cmp.w	r9, #0
 8009c64:	dc33      	bgt.n	8009cce <_printf_float+0x396>
 8009c66:	f04f 0800 	mov.w	r8, #0
 8009c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c6e:	f104 0b1a 	add.w	fp, r4, #26
 8009c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c74:	ebaa 0303 	sub.w	r3, sl, r3
 8009c78:	eba3 0309 	sub.w	r3, r3, r9
 8009c7c:	4543      	cmp	r3, r8
 8009c7e:	f77f af79 	ble.w	8009b74 <_printf_float+0x23c>
 8009c82:	2301      	movs	r3, #1
 8009c84:	465a      	mov	r2, fp
 8009c86:	4631      	mov	r1, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	47b8      	blx	r7
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	f43f aeae 	beq.w	80099ee <_printf_float+0xb6>
 8009c92:	f108 0801 	add.w	r8, r8, #1
 8009c96:	e7ec      	b.n	8009c72 <_printf_float+0x33a>
 8009c98:	4642      	mov	r2, r8
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d1c2      	bne.n	8009c2a <_printf_float+0x2f2>
 8009ca4:	e6a3      	b.n	80099ee <_printf_float+0xb6>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4628      	mov	r0, r5
 8009cac:	9206      	str	r2, [sp, #24]
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	f43f ae9c 	beq.w	80099ee <_printf_float+0xb6>
 8009cb6:	9a06      	ldr	r2, [sp, #24]
 8009cb8:	f10b 0b01 	add.w	fp, fp, #1
 8009cbc:	e7bb      	b.n	8009c36 <_printf_float+0x2fe>
 8009cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d1c0      	bne.n	8009c4e <_printf_float+0x316>
 8009ccc:	e68f      	b.n	80099ee <_printf_float+0xb6>
 8009cce:	9a06      	ldr	r2, [sp, #24]
 8009cd0:	464b      	mov	r3, r9
 8009cd2:	4442      	add	r2, r8
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	d1c3      	bne.n	8009c66 <_printf_float+0x32e>
 8009cde:	e686      	b.n	80099ee <_printf_float+0xb6>
 8009ce0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ce4:	f1ba 0f01 	cmp.w	sl, #1
 8009ce8:	dc01      	bgt.n	8009cee <_printf_float+0x3b6>
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d536      	bpl.n	8009d5c <_printf_float+0x424>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b8      	blx	r7
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	f43f ae78 	beq.w	80099ee <_printf_float+0xb6>
 8009cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae70 	beq.w	80099ee <_printf_float+0xb6>
 8009d0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d12:	2200      	movs	r2, #0
 8009d14:	2300      	movs	r3, #0
 8009d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d1a:	f7f6 feed 	bl	8000af8 <__aeabi_dcmpeq>
 8009d1e:	b9c0      	cbnz	r0, 8009d52 <_printf_float+0x41a>
 8009d20:	4653      	mov	r3, sl
 8009d22:	f108 0201 	add.w	r2, r8, #1
 8009d26:	4631      	mov	r1, r6
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b8      	blx	r7
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d10c      	bne.n	8009d4a <_printf_float+0x412>
 8009d30:	e65d      	b.n	80099ee <_printf_float+0xb6>
 8009d32:	2301      	movs	r3, #1
 8009d34:	465a      	mov	r2, fp
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f ae56 	beq.w	80099ee <_printf_float+0xb6>
 8009d42:	f108 0801 	add.w	r8, r8, #1
 8009d46:	45d0      	cmp	r8, sl
 8009d48:	dbf3      	blt.n	8009d32 <_printf_float+0x3fa>
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d50:	e6df      	b.n	8009b12 <_printf_float+0x1da>
 8009d52:	f04f 0800 	mov.w	r8, #0
 8009d56:	f104 0b1a 	add.w	fp, r4, #26
 8009d5a:	e7f4      	b.n	8009d46 <_printf_float+0x40e>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4642      	mov	r2, r8
 8009d60:	e7e1      	b.n	8009d26 <_printf_float+0x3ee>
 8009d62:	2301      	movs	r3, #1
 8009d64:	464a      	mov	r2, r9
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f43f ae3e 	beq.w	80099ee <_printf_float+0xb6>
 8009d72:	f108 0801 	add.w	r8, r8, #1
 8009d76:	68e3      	ldr	r3, [r4, #12]
 8009d78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d7a:	1a5b      	subs	r3, r3, r1
 8009d7c:	4543      	cmp	r3, r8
 8009d7e:	dcf0      	bgt.n	8009d62 <_printf_float+0x42a>
 8009d80:	e6fc      	b.n	8009b7c <_printf_float+0x244>
 8009d82:	f04f 0800 	mov.w	r8, #0
 8009d86:	f104 0919 	add.w	r9, r4, #25
 8009d8a:	e7f4      	b.n	8009d76 <_printf_float+0x43e>

08009d8c <_printf_common>:
 8009d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d90:	4616      	mov	r6, r2
 8009d92:	4698      	mov	r8, r3
 8009d94:	688a      	ldr	r2, [r1, #8]
 8009d96:	690b      	ldr	r3, [r1, #16]
 8009d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	bfb8      	it	lt
 8009da0:	4613      	movlt	r3, r2
 8009da2:	6033      	str	r3, [r6, #0]
 8009da4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009da8:	4607      	mov	r7, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	b10a      	cbz	r2, 8009db2 <_printf_common+0x26>
 8009dae:	3301      	adds	r3, #1
 8009db0:	6033      	str	r3, [r6, #0]
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	0699      	lsls	r1, r3, #26
 8009db6:	bf42      	ittt	mi
 8009db8:	6833      	ldrmi	r3, [r6, #0]
 8009dba:	3302      	addmi	r3, #2
 8009dbc:	6033      	strmi	r3, [r6, #0]
 8009dbe:	6825      	ldr	r5, [r4, #0]
 8009dc0:	f015 0506 	ands.w	r5, r5, #6
 8009dc4:	d106      	bne.n	8009dd4 <_printf_common+0x48>
 8009dc6:	f104 0a19 	add.w	sl, r4, #25
 8009dca:	68e3      	ldr	r3, [r4, #12]
 8009dcc:	6832      	ldr	r2, [r6, #0]
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	42ab      	cmp	r3, r5
 8009dd2:	dc26      	bgt.n	8009e22 <_printf_common+0x96>
 8009dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	3b00      	subs	r3, #0
 8009ddc:	bf18      	it	ne
 8009dde:	2301      	movne	r3, #1
 8009de0:	0692      	lsls	r2, r2, #26
 8009de2:	d42b      	bmi.n	8009e3c <_printf_common+0xb0>
 8009de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009de8:	4641      	mov	r1, r8
 8009dea:	4638      	mov	r0, r7
 8009dec:	47c8      	blx	r9
 8009dee:	3001      	adds	r0, #1
 8009df0:	d01e      	beq.n	8009e30 <_printf_common+0xa4>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	6922      	ldr	r2, [r4, #16]
 8009df6:	f003 0306 	and.w	r3, r3, #6
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	bf02      	ittt	eq
 8009dfe:	68e5      	ldreq	r5, [r4, #12]
 8009e00:	6833      	ldreq	r3, [r6, #0]
 8009e02:	1aed      	subeq	r5, r5, r3
 8009e04:	68a3      	ldr	r3, [r4, #8]
 8009e06:	bf0c      	ite	eq
 8009e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e0c:	2500      	movne	r5, #0
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	bfc4      	itt	gt
 8009e12:	1a9b      	subgt	r3, r3, r2
 8009e14:	18ed      	addgt	r5, r5, r3
 8009e16:	2600      	movs	r6, #0
 8009e18:	341a      	adds	r4, #26
 8009e1a:	42b5      	cmp	r5, r6
 8009e1c:	d11a      	bne.n	8009e54 <_printf_common+0xc8>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e008      	b.n	8009e34 <_printf_common+0xa8>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4652      	mov	r2, sl
 8009e26:	4641      	mov	r1, r8
 8009e28:	4638      	mov	r0, r7
 8009e2a:	47c8      	blx	r9
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d103      	bne.n	8009e38 <_printf_common+0xac>
 8009e30:	f04f 30ff 	mov.w	r0, #4294967295
 8009e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e38:	3501      	adds	r5, #1
 8009e3a:	e7c6      	b.n	8009dca <_printf_common+0x3e>
 8009e3c:	18e1      	adds	r1, r4, r3
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	2030      	movs	r0, #48	@ 0x30
 8009e42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e46:	4422      	add	r2, r4
 8009e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e50:	3302      	adds	r3, #2
 8009e52:	e7c7      	b.n	8009de4 <_printf_common+0x58>
 8009e54:	2301      	movs	r3, #1
 8009e56:	4622      	mov	r2, r4
 8009e58:	4641      	mov	r1, r8
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	47c8      	blx	r9
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d0e6      	beq.n	8009e30 <_printf_common+0xa4>
 8009e62:	3601      	adds	r6, #1
 8009e64:	e7d9      	b.n	8009e1a <_printf_common+0x8e>
	...

08009e68 <_printf_i>:
 8009e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	7e0f      	ldrb	r7, [r1, #24]
 8009e6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e70:	2f78      	cmp	r7, #120	@ 0x78
 8009e72:	4691      	mov	r9, r2
 8009e74:	4680      	mov	r8, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	469a      	mov	sl, r3
 8009e7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e7e:	d807      	bhi.n	8009e90 <_printf_i+0x28>
 8009e80:	2f62      	cmp	r7, #98	@ 0x62
 8009e82:	d80a      	bhi.n	8009e9a <_printf_i+0x32>
 8009e84:	2f00      	cmp	r7, #0
 8009e86:	f000 80d2 	beq.w	800a02e <_printf_i+0x1c6>
 8009e8a:	2f58      	cmp	r7, #88	@ 0x58
 8009e8c:	f000 80b9 	beq.w	800a002 <_printf_i+0x19a>
 8009e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e98:	e03a      	b.n	8009f10 <_printf_i+0xa8>
 8009e9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e9e:	2b15      	cmp	r3, #21
 8009ea0:	d8f6      	bhi.n	8009e90 <_printf_i+0x28>
 8009ea2:	a101      	add	r1, pc, #4	@ (adr r1, 8009ea8 <_printf_i+0x40>)
 8009ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ea8:	08009f01 	.word	0x08009f01
 8009eac:	08009f15 	.word	0x08009f15
 8009eb0:	08009e91 	.word	0x08009e91
 8009eb4:	08009e91 	.word	0x08009e91
 8009eb8:	08009e91 	.word	0x08009e91
 8009ebc:	08009e91 	.word	0x08009e91
 8009ec0:	08009f15 	.word	0x08009f15
 8009ec4:	08009e91 	.word	0x08009e91
 8009ec8:	08009e91 	.word	0x08009e91
 8009ecc:	08009e91 	.word	0x08009e91
 8009ed0:	08009e91 	.word	0x08009e91
 8009ed4:	0800a015 	.word	0x0800a015
 8009ed8:	08009f3f 	.word	0x08009f3f
 8009edc:	08009fcf 	.word	0x08009fcf
 8009ee0:	08009e91 	.word	0x08009e91
 8009ee4:	08009e91 	.word	0x08009e91
 8009ee8:	0800a037 	.word	0x0800a037
 8009eec:	08009e91 	.word	0x08009e91
 8009ef0:	08009f3f 	.word	0x08009f3f
 8009ef4:	08009e91 	.word	0x08009e91
 8009ef8:	08009e91 	.word	0x08009e91
 8009efc:	08009fd7 	.word	0x08009fd7
 8009f00:	6833      	ldr	r3, [r6, #0]
 8009f02:	1d1a      	adds	r2, r3, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6032      	str	r2, [r6, #0]
 8009f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f10:	2301      	movs	r3, #1
 8009f12:	e09d      	b.n	800a050 <_printf_i+0x1e8>
 8009f14:	6833      	ldr	r3, [r6, #0]
 8009f16:	6820      	ldr	r0, [r4, #0]
 8009f18:	1d19      	adds	r1, r3, #4
 8009f1a:	6031      	str	r1, [r6, #0]
 8009f1c:	0606      	lsls	r6, r0, #24
 8009f1e:	d501      	bpl.n	8009f24 <_printf_i+0xbc>
 8009f20:	681d      	ldr	r5, [r3, #0]
 8009f22:	e003      	b.n	8009f2c <_printf_i+0xc4>
 8009f24:	0645      	lsls	r5, r0, #25
 8009f26:	d5fb      	bpl.n	8009f20 <_printf_i+0xb8>
 8009f28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f2c:	2d00      	cmp	r5, #0
 8009f2e:	da03      	bge.n	8009f38 <_printf_i+0xd0>
 8009f30:	232d      	movs	r3, #45	@ 0x2d
 8009f32:	426d      	negs	r5, r5
 8009f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f38:	4859      	ldr	r0, [pc, #356]	@ (800a0a0 <_printf_i+0x238>)
 8009f3a:	230a      	movs	r3, #10
 8009f3c:	e011      	b.n	8009f62 <_printf_i+0xfa>
 8009f3e:	6821      	ldr	r1, [r4, #0]
 8009f40:	6833      	ldr	r3, [r6, #0]
 8009f42:	0608      	lsls	r0, r1, #24
 8009f44:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f48:	d402      	bmi.n	8009f50 <_printf_i+0xe8>
 8009f4a:	0649      	lsls	r1, r1, #25
 8009f4c:	bf48      	it	mi
 8009f4e:	b2ad      	uxthmi	r5, r5
 8009f50:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f52:	4853      	ldr	r0, [pc, #332]	@ (800a0a0 <_printf_i+0x238>)
 8009f54:	6033      	str	r3, [r6, #0]
 8009f56:	bf14      	ite	ne
 8009f58:	230a      	movne	r3, #10
 8009f5a:	2308      	moveq	r3, #8
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f62:	6866      	ldr	r6, [r4, #4]
 8009f64:	60a6      	str	r6, [r4, #8]
 8009f66:	2e00      	cmp	r6, #0
 8009f68:	bfa2      	ittt	ge
 8009f6a:	6821      	ldrge	r1, [r4, #0]
 8009f6c:	f021 0104 	bicge.w	r1, r1, #4
 8009f70:	6021      	strge	r1, [r4, #0]
 8009f72:	b90d      	cbnz	r5, 8009f78 <_printf_i+0x110>
 8009f74:	2e00      	cmp	r6, #0
 8009f76:	d04b      	beq.n	800a010 <_printf_i+0x1a8>
 8009f78:	4616      	mov	r6, r2
 8009f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8009f82:	5dc7      	ldrb	r7, [r0, r7]
 8009f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f88:	462f      	mov	r7, r5
 8009f8a:	42bb      	cmp	r3, r7
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	d9f4      	bls.n	8009f7a <_printf_i+0x112>
 8009f90:	2b08      	cmp	r3, #8
 8009f92:	d10b      	bne.n	8009fac <_printf_i+0x144>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	07df      	lsls	r7, r3, #31
 8009f98:	d508      	bpl.n	8009fac <_printf_i+0x144>
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	6861      	ldr	r1, [r4, #4]
 8009f9e:	4299      	cmp	r1, r3
 8009fa0:	bfde      	ittt	le
 8009fa2:	2330      	movle	r3, #48	@ 0x30
 8009fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fac:	1b92      	subs	r2, r2, r6
 8009fae:	6122      	str	r2, [r4, #16]
 8009fb0:	f8cd a000 	str.w	sl, [sp]
 8009fb4:	464b      	mov	r3, r9
 8009fb6:	aa03      	add	r2, sp, #12
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4640      	mov	r0, r8
 8009fbc:	f7ff fee6 	bl	8009d8c <_printf_common>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d14a      	bne.n	800a05a <_printf_i+0x1f2>
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	b004      	add	sp, #16
 8009fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	f043 0320 	orr.w	r3, r3, #32
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	4833      	ldr	r0, [pc, #204]	@ (800a0a4 <_printf_i+0x23c>)
 8009fd8:	2778      	movs	r7, #120	@ 0x78
 8009fda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	6831      	ldr	r1, [r6, #0]
 8009fe2:	061f      	lsls	r7, r3, #24
 8009fe4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fe8:	d402      	bmi.n	8009ff0 <_printf_i+0x188>
 8009fea:	065f      	lsls	r7, r3, #25
 8009fec:	bf48      	it	mi
 8009fee:	b2ad      	uxthmi	r5, r5
 8009ff0:	6031      	str	r1, [r6, #0]
 8009ff2:	07d9      	lsls	r1, r3, #31
 8009ff4:	bf44      	itt	mi
 8009ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8009ffa:	6023      	strmi	r3, [r4, #0]
 8009ffc:	b11d      	cbz	r5, 800a006 <_printf_i+0x19e>
 8009ffe:	2310      	movs	r3, #16
 800a000:	e7ac      	b.n	8009f5c <_printf_i+0xf4>
 800a002:	4827      	ldr	r0, [pc, #156]	@ (800a0a0 <_printf_i+0x238>)
 800a004:	e7e9      	b.n	8009fda <_printf_i+0x172>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	f023 0320 	bic.w	r3, r3, #32
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	e7f6      	b.n	8009ffe <_printf_i+0x196>
 800a010:	4616      	mov	r6, r2
 800a012:	e7bd      	b.n	8009f90 <_printf_i+0x128>
 800a014:	6833      	ldr	r3, [r6, #0]
 800a016:	6825      	ldr	r5, [r4, #0]
 800a018:	6961      	ldr	r1, [r4, #20]
 800a01a:	1d18      	adds	r0, r3, #4
 800a01c:	6030      	str	r0, [r6, #0]
 800a01e:	062e      	lsls	r6, r5, #24
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	d501      	bpl.n	800a028 <_printf_i+0x1c0>
 800a024:	6019      	str	r1, [r3, #0]
 800a026:	e002      	b.n	800a02e <_printf_i+0x1c6>
 800a028:	0668      	lsls	r0, r5, #25
 800a02a:	d5fb      	bpl.n	800a024 <_printf_i+0x1bc>
 800a02c:	8019      	strh	r1, [r3, #0]
 800a02e:	2300      	movs	r3, #0
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	4616      	mov	r6, r2
 800a034:	e7bc      	b.n	8009fb0 <_printf_i+0x148>
 800a036:	6833      	ldr	r3, [r6, #0]
 800a038:	1d1a      	adds	r2, r3, #4
 800a03a:	6032      	str	r2, [r6, #0]
 800a03c:	681e      	ldr	r6, [r3, #0]
 800a03e:	6862      	ldr	r2, [r4, #4]
 800a040:	2100      	movs	r1, #0
 800a042:	4630      	mov	r0, r6
 800a044:	f7f6 f8dc 	bl	8000200 <memchr>
 800a048:	b108      	cbz	r0, 800a04e <_printf_i+0x1e6>
 800a04a:	1b80      	subs	r0, r0, r6
 800a04c:	6060      	str	r0, [r4, #4]
 800a04e:	6863      	ldr	r3, [r4, #4]
 800a050:	6123      	str	r3, [r4, #16]
 800a052:	2300      	movs	r3, #0
 800a054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a058:	e7aa      	b.n	8009fb0 <_printf_i+0x148>
 800a05a:	6923      	ldr	r3, [r4, #16]
 800a05c:	4632      	mov	r2, r6
 800a05e:	4649      	mov	r1, r9
 800a060:	4640      	mov	r0, r8
 800a062:	47d0      	blx	sl
 800a064:	3001      	adds	r0, #1
 800a066:	d0ad      	beq.n	8009fc4 <_printf_i+0x15c>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	079b      	lsls	r3, r3, #30
 800a06c:	d413      	bmi.n	800a096 <_printf_i+0x22e>
 800a06e:	68e0      	ldr	r0, [r4, #12]
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	4298      	cmp	r0, r3
 800a074:	bfb8      	it	lt
 800a076:	4618      	movlt	r0, r3
 800a078:	e7a6      	b.n	8009fc8 <_printf_i+0x160>
 800a07a:	2301      	movs	r3, #1
 800a07c:	4632      	mov	r2, r6
 800a07e:	4649      	mov	r1, r9
 800a080:	4640      	mov	r0, r8
 800a082:	47d0      	blx	sl
 800a084:	3001      	adds	r0, #1
 800a086:	d09d      	beq.n	8009fc4 <_printf_i+0x15c>
 800a088:	3501      	adds	r5, #1
 800a08a:	68e3      	ldr	r3, [r4, #12]
 800a08c:	9903      	ldr	r1, [sp, #12]
 800a08e:	1a5b      	subs	r3, r3, r1
 800a090:	42ab      	cmp	r3, r5
 800a092:	dcf2      	bgt.n	800a07a <_printf_i+0x212>
 800a094:	e7eb      	b.n	800a06e <_printf_i+0x206>
 800a096:	2500      	movs	r5, #0
 800a098:	f104 0619 	add.w	r6, r4, #25
 800a09c:	e7f5      	b.n	800a08a <_printf_i+0x222>
 800a09e:	bf00      	nop
 800a0a0:	0800c26e 	.word	0x0800c26e
 800a0a4:	0800c27f 	.word	0x0800c27f

0800a0a8 <std>:
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	b510      	push	{r4, lr}
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0b6:	6083      	str	r3, [r0, #8]
 800a0b8:	8181      	strh	r1, [r0, #12]
 800a0ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800a0bc:	81c2      	strh	r2, [r0, #14]
 800a0be:	6183      	str	r3, [r0, #24]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	2208      	movs	r2, #8
 800a0c4:	305c      	adds	r0, #92	@ 0x5c
 800a0c6:	f000 f90e 	bl	800a2e6 <memset>
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a100 <std+0x58>)
 800a0cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a104 <std+0x5c>)
 800a0d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a108 <std+0x60>)
 800a0d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a10c <std+0x64>)
 800a0d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0da:	4b0d      	ldr	r3, [pc, #52]	@ (800a110 <std+0x68>)
 800a0dc:	6224      	str	r4, [r4, #32]
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	d006      	beq.n	800a0f0 <std+0x48>
 800a0e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0e6:	4294      	cmp	r4, r2
 800a0e8:	d002      	beq.n	800a0f0 <std+0x48>
 800a0ea:	33d0      	adds	r3, #208	@ 0xd0
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	d105      	bne.n	800a0fc <std+0x54>
 800a0f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f8:	f000 b972 	b.w	800a3e0 <__retarget_lock_init_recursive>
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	bf00      	nop
 800a100:	0800a261 	.word	0x0800a261
 800a104:	0800a283 	.word	0x0800a283
 800a108:	0800a2bb 	.word	0x0800a2bb
 800a10c:	0800a2df 	.word	0x0800a2df
 800a110:	200008e0 	.word	0x200008e0

0800a114 <stdio_exit_handler>:
 800a114:	4a02      	ldr	r2, [pc, #8]	@ (800a120 <stdio_exit_handler+0xc>)
 800a116:	4903      	ldr	r1, [pc, #12]	@ (800a124 <stdio_exit_handler+0x10>)
 800a118:	4803      	ldr	r0, [pc, #12]	@ (800a128 <stdio_exit_handler+0x14>)
 800a11a:	f000 b869 	b.w	800a1f0 <_fwalk_sglue>
 800a11e:	bf00      	nop
 800a120:	2000000c 	.word	0x2000000c
 800a124:	0800bd11 	.word	0x0800bd11
 800a128:	2000001c 	.word	0x2000001c

0800a12c <cleanup_stdio>:
 800a12c:	6841      	ldr	r1, [r0, #4]
 800a12e:	4b0c      	ldr	r3, [pc, #48]	@ (800a160 <cleanup_stdio+0x34>)
 800a130:	4299      	cmp	r1, r3
 800a132:	b510      	push	{r4, lr}
 800a134:	4604      	mov	r4, r0
 800a136:	d001      	beq.n	800a13c <cleanup_stdio+0x10>
 800a138:	f001 fdea 	bl	800bd10 <_fflush_r>
 800a13c:	68a1      	ldr	r1, [r4, #8]
 800a13e:	4b09      	ldr	r3, [pc, #36]	@ (800a164 <cleanup_stdio+0x38>)
 800a140:	4299      	cmp	r1, r3
 800a142:	d002      	beq.n	800a14a <cleanup_stdio+0x1e>
 800a144:	4620      	mov	r0, r4
 800a146:	f001 fde3 	bl	800bd10 <_fflush_r>
 800a14a:	68e1      	ldr	r1, [r4, #12]
 800a14c:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <cleanup_stdio+0x3c>)
 800a14e:	4299      	cmp	r1, r3
 800a150:	d004      	beq.n	800a15c <cleanup_stdio+0x30>
 800a152:	4620      	mov	r0, r4
 800a154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a158:	f001 bdda 	b.w	800bd10 <_fflush_r>
 800a15c:	bd10      	pop	{r4, pc}
 800a15e:	bf00      	nop
 800a160:	200008e0 	.word	0x200008e0
 800a164:	20000948 	.word	0x20000948
 800a168:	200009b0 	.word	0x200009b0

0800a16c <global_stdio_init.part.0>:
 800a16c:	b510      	push	{r4, lr}
 800a16e:	4b0b      	ldr	r3, [pc, #44]	@ (800a19c <global_stdio_init.part.0+0x30>)
 800a170:	4c0b      	ldr	r4, [pc, #44]	@ (800a1a0 <global_stdio_init.part.0+0x34>)
 800a172:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a4 <global_stdio_init.part.0+0x38>)
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	4620      	mov	r0, r4
 800a178:	2200      	movs	r2, #0
 800a17a:	2104      	movs	r1, #4
 800a17c:	f7ff ff94 	bl	800a0a8 <std>
 800a180:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a184:	2201      	movs	r2, #1
 800a186:	2109      	movs	r1, #9
 800a188:	f7ff ff8e 	bl	800a0a8 <std>
 800a18c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a190:	2202      	movs	r2, #2
 800a192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a196:	2112      	movs	r1, #18
 800a198:	f7ff bf86 	b.w	800a0a8 <std>
 800a19c:	20000a18 	.word	0x20000a18
 800a1a0:	200008e0 	.word	0x200008e0
 800a1a4:	0800a115 	.word	0x0800a115

0800a1a8 <__sfp_lock_acquire>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	@ (800a1b0 <__sfp_lock_acquire+0x8>)
 800a1aa:	f000 b91a 	b.w	800a3e2 <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	20000a21 	.word	0x20000a21

0800a1b4 <__sfp_lock_release>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	@ (800a1bc <__sfp_lock_release+0x8>)
 800a1b6:	f000 b915 	b.w	800a3e4 <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	20000a21 	.word	0x20000a21

0800a1c0 <__sinit>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	f7ff fff0 	bl	800a1a8 <__sfp_lock_acquire>
 800a1c8:	6a23      	ldr	r3, [r4, #32]
 800a1ca:	b11b      	cbz	r3, 800a1d4 <__sinit+0x14>
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f7ff bff0 	b.w	800a1b4 <__sfp_lock_release>
 800a1d4:	4b04      	ldr	r3, [pc, #16]	@ (800a1e8 <__sinit+0x28>)
 800a1d6:	6223      	str	r3, [r4, #32]
 800a1d8:	4b04      	ldr	r3, [pc, #16]	@ (800a1ec <__sinit+0x2c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f5      	bne.n	800a1cc <__sinit+0xc>
 800a1e0:	f7ff ffc4 	bl	800a16c <global_stdio_init.part.0>
 800a1e4:	e7f2      	b.n	800a1cc <__sinit+0xc>
 800a1e6:	bf00      	nop
 800a1e8:	0800a12d 	.word	0x0800a12d
 800a1ec:	20000a18 	.word	0x20000a18

0800a1f0 <_fwalk_sglue>:
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	4688      	mov	r8, r1
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a200:	f1b9 0901 	subs.w	r9, r9, #1
 800a204:	d505      	bpl.n	800a212 <_fwalk_sglue+0x22>
 800a206:	6824      	ldr	r4, [r4, #0]
 800a208:	2c00      	cmp	r4, #0
 800a20a:	d1f7      	bne.n	800a1fc <_fwalk_sglue+0xc>
 800a20c:	4630      	mov	r0, r6
 800a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a212:	89ab      	ldrh	r3, [r5, #12]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d907      	bls.n	800a228 <_fwalk_sglue+0x38>
 800a218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a21c:	3301      	adds	r3, #1
 800a21e:	d003      	beq.n	800a228 <_fwalk_sglue+0x38>
 800a220:	4629      	mov	r1, r5
 800a222:	4638      	mov	r0, r7
 800a224:	47c0      	blx	r8
 800a226:	4306      	orrs	r6, r0
 800a228:	3568      	adds	r5, #104	@ 0x68
 800a22a:	e7e9      	b.n	800a200 <_fwalk_sglue+0x10>

0800a22c <iprintf>:
 800a22c:	b40f      	push	{r0, r1, r2, r3}
 800a22e:	b507      	push	{r0, r1, r2, lr}
 800a230:	4906      	ldr	r1, [pc, #24]	@ (800a24c <iprintf+0x20>)
 800a232:	ab04      	add	r3, sp, #16
 800a234:	6808      	ldr	r0, [r1, #0]
 800a236:	f853 2b04 	ldr.w	r2, [r3], #4
 800a23a:	6881      	ldr	r1, [r0, #8]
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	f001 fbcb 	bl	800b9d8 <_vfiprintf_r>
 800a242:	b003      	add	sp, #12
 800a244:	f85d eb04 	ldr.w	lr, [sp], #4
 800a248:	b004      	add	sp, #16
 800a24a:	4770      	bx	lr
 800a24c:	20000018 	.word	0x20000018

0800a250 <putchar>:
 800a250:	4b02      	ldr	r3, [pc, #8]	@ (800a25c <putchar+0xc>)
 800a252:	4601      	mov	r1, r0
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	6882      	ldr	r2, [r0, #8]
 800a258:	f001 bd82 	b.w	800bd60 <_putc_r>
 800a25c:	20000018 	.word	0x20000018

0800a260 <__sread>:
 800a260:	b510      	push	{r4, lr}
 800a262:	460c      	mov	r4, r1
 800a264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a268:	f000 f86c 	bl	800a344 <_read_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	bfab      	itete	ge
 800a270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a272:	89a3      	ldrhlt	r3, [r4, #12]
 800a274:	181b      	addge	r3, r3, r0
 800a276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a27a:	bfac      	ite	ge
 800a27c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a27e:	81a3      	strhlt	r3, [r4, #12]
 800a280:	bd10      	pop	{r4, pc}

0800a282 <__swrite>:
 800a282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	461f      	mov	r7, r3
 800a288:	898b      	ldrh	r3, [r1, #12]
 800a28a:	05db      	lsls	r3, r3, #23
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	4616      	mov	r6, r2
 800a292:	d505      	bpl.n	800a2a0 <__swrite+0x1e>
 800a294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a298:	2302      	movs	r3, #2
 800a29a:	2200      	movs	r2, #0
 800a29c:	f000 f840 	bl	800a320 <_lseek_r>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b6:	f000 b857 	b.w	800a368 <_write_r>

0800a2ba <__sseek>:
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	460c      	mov	r4, r1
 800a2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c2:	f000 f82d 	bl	800a320 <_lseek_r>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	bf15      	itete	ne
 800a2cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2d6:	81a3      	strheq	r3, [r4, #12]
 800a2d8:	bf18      	it	ne
 800a2da:	81a3      	strhne	r3, [r4, #12]
 800a2dc:	bd10      	pop	{r4, pc}

0800a2de <__sclose>:
 800a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e2:	f000 b80d 	b.w	800a300 <_close_r>

0800a2e6 <memset>:
 800a2e6:	4402      	add	r2, r0
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d100      	bne.n	800a2f0 <memset+0xa>
 800a2ee:	4770      	bx	lr
 800a2f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a2f4:	e7f9      	b.n	800a2ea <memset+0x4>
	...

0800a2f8 <_localeconv_r>:
 800a2f8:	4800      	ldr	r0, [pc, #0]	@ (800a2fc <_localeconv_r+0x4>)
 800a2fa:	4770      	bx	lr
 800a2fc:	20000158 	.word	0x20000158

0800a300 <_close_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	4d06      	ldr	r5, [pc, #24]	@ (800a31c <_close_r+0x1c>)
 800a304:	2300      	movs	r3, #0
 800a306:	4604      	mov	r4, r0
 800a308:	4608      	mov	r0, r1
 800a30a:	602b      	str	r3, [r5, #0]
 800a30c:	f7f8 fd33 	bl	8002d76 <_close>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_close_r+0x1a>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_close_r+0x1a>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	20000a1c 	.word	0x20000a1c

0800a320 <_lseek_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d07      	ldr	r5, [pc, #28]	@ (800a340 <_lseek_r+0x20>)
 800a324:	4604      	mov	r4, r0
 800a326:	4608      	mov	r0, r1
 800a328:	4611      	mov	r1, r2
 800a32a:	2200      	movs	r2, #0
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f7f8 fd48 	bl	8002dc4 <_lseek>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_lseek_r+0x1e>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_lseek_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	20000a1c 	.word	0x20000a1c

0800a344 <_read_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d07      	ldr	r5, [pc, #28]	@ (800a364 <_read_r+0x20>)
 800a348:	4604      	mov	r4, r0
 800a34a:	4608      	mov	r0, r1
 800a34c:	4611      	mov	r1, r2
 800a34e:	2200      	movs	r2, #0
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	f7f8 fcd6 	bl	8002d04 <_read>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_read_r+0x1e>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_read_r+0x1e>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	20000a1c 	.word	0x20000a1c

0800a368 <_write_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d07      	ldr	r5, [pc, #28]	@ (800a388 <_write_r+0x20>)
 800a36c:	4604      	mov	r4, r0
 800a36e:	4608      	mov	r0, r1
 800a370:	4611      	mov	r1, r2
 800a372:	2200      	movs	r2, #0
 800a374:	602a      	str	r2, [r5, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	f7f8 fce1 	bl	8002d3e <_write>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d102      	bne.n	800a386 <_write_r+0x1e>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	b103      	cbz	r3, 800a386 <_write_r+0x1e>
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	bd38      	pop	{r3, r4, r5, pc}
 800a388:	20000a1c 	.word	0x20000a1c

0800a38c <__errno>:
 800a38c:	4b01      	ldr	r3, [pc, #4]	@ (800a394 <__errno+0x8>)
 800a38e:	6818      	ldr	r0, [r3, #0]
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	20000018 	.word	0x20000018

0800a398 <__libc_init_array>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	4d0d      	ldr	r5, [pc, #52]	@ (800a3d0 <__libc_init_array+0x38>)
 800a39c:	4c0d      	ldr	r4, [pc, #52]	@ (800a3d4 <__libc_init_array+0x3c>)
 800a39e:	1b64      	subs	r4, r4, r5
 800a3a0:	10a4      	asrs	r4, r4, #2
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	42a6      	cmp	r6, r4
 800a3a6:	d109      	bne.n	800a3bc <__libc_init_array+0x24>
 800a3a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a3d8 <__libc_init_array+0x40>)
 800a3aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a3dc <__libc_init_array+0x44>)
 800a3ac:	f001 fef2 	bl	800c194 <_init>
 800a3b0:	1b64      	subs	r4, r4, r5
 800a3b2:	10a4      	asrs	r4, r4, #2
 800a3b4:	2600      	movs	r6, #0
 800a3b6:	42a6      	cmp	r6, r4
 800a3b8:	d105      	bne.n	800a3c6 <__libc_init_array+0x2e>
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c0:	4798      	blx	r3
 800a3c2:	3601      	adds	r6, #1
 800a3c4:	e7ee      	b.n	800a3a4 <__libc_init_array+0xc>
 800a3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ca:	4798      	blx	r3
 800a3cc:	3601      	adds	r6, #1
 800a3ce:	e7f2      	b.n	800a3b6 <__libc_init_array+0x1e>
 800a3d0:	0800c5d8 	.word	0x0800c5d8
 800a3d4:	0800c5d8 	.word	0x0800c5d8
 800a3d8:	0800c5d8 	.word	0x0800c5d8
 800a3dc:	0800c5dc 	.word	0x0800c5dc

0800a3e0 <__retarget_lock_init_recursive>:
 800a3e0:	4770      	bx	lr

0800a3e2 <__retarget_lock_acquire_recursive>:
 800a3e2:	4770      	bx	lr

0800a3e4 <__retarget_lock_release_recursive>:
 800a3e4:	4770      	bx	lr

0800a3e6 <quorem>:
 800a3e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	6903      	ldr	r3, [r0, #16]
 800a3ec:	690c      	ldr	r4, [r1, #16]
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	4607      	mov	r7, r0
 800a3f2:	db7e      	blt.n	800a4f2 <quorem+0x10c>
 800a3f4:	3c01      	subs	r4, #1
 800a3f6:	f101 0814 	add.w	r8, r1, #20
 800a3fa:	00a3      	lsls	r3, r4, #2
 800a3fc:	f100 0514 	add.w	r5, r0, #20
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a40c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a410:	3301      	adds	r3, #1
 800a412:	429a      	cmp	r2, r3
 800a414:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a418:	fbb2 f6f3 	udiv	r6, r2, r3
 800a41c:	d32e      	bcc.n	800a47c <quorem+0x96>
 800a41e:	f04f 0a00 	mov.w	sl, #0
 800a422:	46c4      	mov	ip, r8
 800a424:	46ae      	mov	lr, r5
 800a426:	46d3      	mov	fp, sl
 800a428:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a42c:	b298      	uxth	r0, r3
 800a42e:	fb06 a000 	mla	r0, r6, r0, sl
 800a432:	0c02      	lsrs	r2, r0, #16
 800a434:	0c1b      	lsrs	r3, r3, #16
 800a436:	fb06 2303 	mla	r3, r6, r3, r2
 800a43a:	f8de 2000 	ldr.w	r2, [lr]
 800a43e:	b280      	uxth	r0, r0
 800a440:	b292      	uxth	r2, r2
 800a442:	1a12      	subs	r2, r2, r0
 800a444:	445a      	add	r2, fp
 800a446:	f8de 0000 	ldr.w	r0, [lr]
 800a44a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a44e:	b29b      	uxth	r3, r3
 800a450:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a454:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a458:	b292      	uxth	r2, r2
 800a45a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a45e:	45e1      	cmp	r9, ip
 800a460:	f84e 2b04 	str.w	r2, [lr], #4
 800a464:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a468:	d2de      	bcs.n	800a428 <quorem+0x42>
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	58eb      	ldr	r3, [r5, r3]
 800a46e:	b92b      	cbnz	r3, 800a47c <quorem+0x96>
 800a470:	9b01      	ldr	r3, [sp, #4]
 800a472:	3b04      	subs	r3, #4
 800a474:	429d      	cmp	r5, r3
 800a476:	461a      	mov	r2, r3
 800a478:	d32f      	bcc.n	800a4da <quorem+0xf4>
 800a47a:	613c      	str	r4, [r7, #16]
 800a47c:	4638      	mov	r0, r7
 800a47e:	f001 f979 	bl	800b774 <__mcmp>
 800a482:	2800      	cmp	r0, #0
 800a484:	db25      	blt.n	800a4d2 <quorem+0xec>
 800a486:	4629      	mov	r1, r5
 800a488:	2000      	movs	r0, #0
 800a48a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a48e:	f8d1 c000 	ldr.w	ip, [r1]
 800a492:	fa1f fe82 	uxth.w	lr, r2
 800a496:	fa1f f38c 	uxth.w	r3, ip
 800a49a:	eba3 030e 	sub.w	r3, r3, lr
 800a49e:	4403      	add	r3, r0
 800a4a0:	0c12      	lsrs	r2, r2, #16
 800a4a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a4a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4b0:	45c1      	cmp	r9, r8
 800a4b2:	f841 3b04 	str.w	r3, [r1], #4
 800a4b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4ba:	d2e6      	bcs.n	800a48a <quorem+0xa4>
 800a4bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4c4:	b922      	cbnz	r2, 800a4d0 <quorem+0xea>
 800a4c6:	3b04      	subs	r3, #4
 800a4c8:	429d      	cmp	r5, r3
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	d30b      	bcc.n	800a4e6 <quorem+0x100>
 800a4ce:	613c      	str	r4, [r7, #16]
 800a4d0:	3601      	adds	r6, #1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	b003      	add	sp, #12
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	6812      	ldr	r2, [r2, #0]
 800a4dc:	3b04      	subs	r3, #4
 800a4de:	2a00      	cmp	r2, #0
 800a4e0:	d1cb      	bne.n	800a47a <quorem+0x94>
 800a4e2:	3c01      	subs	r4, #1
 800a4e4:	e7c6      	b.n	800a474 <quorem+0x8e>
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	3b04      	subs	r3, #4
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	d1ef      	bne.n	800a4ce <quorem+0xe8>
 800a4ee:	3c01      	subs	r4, #1
 800a4f0:	e7ea      	b.n	800a4c8 <quorem+0xe2>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e7ee      	b.n	800a4d4 <quorem+0xee>
	...

0800a4f8 <_dtoa_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	69c7      	ldr	r7, [r0, #28]
 800a4fe:	b099      	sub	sp, #100	@ 0x64
 800a500:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a504:	ec55 4b10 	vmov	r4, r5, d0
 800a508:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a50a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a50c:	4683      	mov	fp, r0
 800a50e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a510:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a512:	b97f      	cbnz	r7, 800a534 <_dtoa_r+0x3c>
 800a514:	2010      	movs	r0, #16
 800a516:	f000 fdfd 	bl	800b114 <malloc>
 800a51a:	4602      	mov	r2, r0
 800a51c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a520:	b920      	cbnz	r0, 800a52c <_dtoa_r+0x34>
 800a522:	4ba7      	ldr	r3, [pc, #668]	@ (800a7c0 <_dtoa_r+0x2c8>)
 800a524:	21ef      	movs	r1, #239	@ 0xef
 800a526:	48a7      	ldr	r0, [pc, #668]	@ (800a7c4 <_dtoa_r+0x2cc>)
 800a528:	f001 fd00 	bl	800bf2c <__assert_func>
 800a52c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a530:	6007      	str	r7, [r0, #0]
 800a532:	60c7      	str	r7, [r0, #12]
 800a534:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a538:	6819      	ldr	r1, [r3, #0]
 800a53a:	b159      	cbz	r1, 800a554 <_dtoa_r+0x5c>
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	604a      	str	r2, [r1, #4]
 800a540:	2301      	movs	r3, #1
 800a542:	4093      	lsls	r3, r2
 800a544:	608b      	str	r3, [r1, #8]
 800a546:	4658      	mov	r0, fp
 800a548:	f000 feda 	bl	800b300 <_Bfree>
 800a54c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a550:	2200      	movs	r2, #0
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	1e2b      	subs	r3, r5, #0
 800a556:	bfb9      	ittee	lt
 800a558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a55c:	9303      	strlt	r3, [sp, #12]
 800a55e:	2300      	movge	r3, #0
 800a560:	6033      	strge	r3, [r6, #0]
 800a562:	9f03      	ldr	r7, [sp, #12]
 800a564:	4b98      	ldr	r3, [pc, #608]	@ (800a7c8 <_dtoa_r+0x2d0>)
 800a566:	bfbc      	itt	lt
 800a568:	2201      	movlt	r2, #1
 800a56a:	6032      	strlt	r2, [r6, #0]
 800a56c:	43bb      	bics	r3, r7
 800a56e:	d112      	bne.n	800a596 <_dtoa_r+0x9e>
 800a570:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a572:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a57c:	4323      	orrs	r3, r4
 800a57e:	f000 854d 	beq.w	800b01c <_dtoa_r+0xb24>
 800a582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a584:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a7dc <_dtoa_r+0x2e4>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 854f 	beq.w	800b02c <_dtoa_r+0xb34>
 800a58e:	f10a 0303 	add.w	r3, sl, #3
 800a592:	f000 bd49 	b.w	800b028 <_dtoa_r+0xb30>
 800a596:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a59a:	2200      	movs	r2, #0
 800a59c:	ec51 0b17 	vmov	r0, r1, d7
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a5a6:	f7f6 faa7 	bl	8000af8 <__aeabi_dcmpeq>
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	b158      	cbz	r0, 800a5c6 <_dtoa_r+0xce>
 800a5ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5b6:	b113      	cbz	r3, 800a5be <_dtoa_r+0xc6>
 800a5b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a5ba:	4b84      	ldr	r3, [pc, #528]	@ (800a7cc <_dtoa_r+0x2d4>)
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a7e0 <_dtoa_r+0x2e8>
 800a5c2:	f000 bd33 	b.w	800b02c <_dtoa_r+0xb34>
 800a5c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a5ca:	aa16      	add	r2, sp, #88	@ 0x58
 800a5cc:	a917      	add	r1, sp, #92	@ 0x5c
 800a5ce:	4658      	mov	r0, fp
 800a5d0:	f001 f980 	bl	800b8d4 <__d2b>
 800a5d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a5d8:	4681      	mov	r9, r0
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	d077      	beq.n	800a6ce <_dtoa_r+0x1d6>
 800a5de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a5e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a5f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4b74      	ldr	r3, [pc, #464]	@ (800a7d0 <_dtoa_r+0x2d8>)
 800a5fe:	f7f5 fe5b 	bl	80002b8 <__aeabi_dsub>
 800a602:	a369      	add	r3, pc, #420	@ (adr r3, 800a7a8 <_dtoa_r+0x2b0>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f7f6 f80e 	bl	8000628 <__aeabi_dmul>
 800a60c:	a368      	add	r3, pc, #416	@ (adr r3, 800a7b0 <_dtoa_r+0x2b8>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 fe53 	bl	80002bc <__adddf3>
 800a616:	4604      	mov	r4, r0
 800a618:	4630      	mov	r0, r6
 800a61a:	460d      	mov	r5, r1
 800a61c:	f7f5 ff9a 	bl	8000554 <__aeabi_i2d>
 800a620:	a365      	add	r3, pc, #404	@ (adr r3, 800a7b8 <_dtoa_r+0x2c0>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f5 ffff 	bl	8000628 <__aeabi_dmul>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f5 fe43 	bl	80002bc <__adddf3>
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	f7f6 faa5 	bl	8000b88 <__aeabi_d2iz>
 800a63e:	2200      	movs	r2, #0
 800a640:	4607      	mov	r7, r0
 800a642:	2300      	movs	r3, #0
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f7f6 fa60 	bl	8000b0c <__aeabi_dcmplt>
 800a64c:	b140      	cbz	r0, 800a660 <_dtoa_r+0x168>
 800a64e:	4638      	mov	r0, r7
 800a650:	f7f5 ff80 	bl	8000554 <__aeabi_i2d>
 800a654:	4622      	mov	r2, r4
 800a656:	462b      	mov	r3, r5
 800a658:	f7f6 fa4e 	bl	8000af8 <__aeabi_dcmpeq>
 800a65c:	b900      	cbnz	r0, 800a660 <_dtoa_r+0x168>
 800a65e:	3f01      	subs	r7, #1
 800a660:	2f16      	cmp	r7, #22
 800a662:	d851      	bhi.n	800a708 <_dtoa_r+0x210>
 800a664:	4b5b      	ldr	r3, [pc, #364]	@ (800a7d4 <_dtoa_r+0x2dc>)
 800a666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a672:	f7f6 fa4b 	bl	8000b0c <__aeabi_dcmplt>
 800a676:	2800      	cmp	r0, #0
 800a678:	d048      	beq.n	800a70c <_dtoa_r+0x214>
 800a67a:	3f01      	subs	r7, #1
 800a67c:	2300      	movs	r3, #0
 800a67e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a680:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a682:	1b9b      	subs	r3, r3, r6
 800a684:	1e5a      	subs	r2, r3, #1
 800a686:	bf44      	itt	mi
 800a688:	f1c3 0801 	rsbmi	r8, r3, #1
 800a68c:	2300      	movmi	r3, #0
 800a68e:	9208      	str	r2, [sp, #32]
 800a690:	bf54      	ite	pl
 800a692:	f04f 0800 	movpl.w	r8, #0
 800a696:	9308      	strmi	r3, [sp, #32]
 800a698:	2f00      	cmp	r7, #0
 800a69a:	db39      	blt.n	800a710 <_dtoa_r+0x218>
 800a69c:	9b08      	ldr	r3, [sp, #32]
 800a69e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a6a0:	443b      	add	r3, r7
 800a6a2:	9308      	str	r3, [sp, #32]
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6aa:	2b09      	cmp	r3, #9
 800a6ac:	d864      	bhi.n	800a778 <_dtoa_r+0x280>
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	bfc4      	itt	gt
 800a6b2:	3b04      	subgt	r3, #4
 800a6b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b8:	f1a3 0302 	sub.w	r3, r3, #2
 800a6bc:	bfcc      	ite	gt
 800a6be:	2400      	movgt	r4, #0
 800a6c0:	2401      	movle	r4, #1
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d863      	bhi.n	800a78e <_dtoa_r+0x296>
 800a6c6:	e8df f003 	tbb	[pc, r3]
 800a6ca:	372a      	.short	0x372a
 800a6cc:	5535      	.short	0x5535
 800a6ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a6d2:	441e      	add	r6, r3
 800a6d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	bfc1      	itttt	gt
 800a6dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a6e0:	409f      	lslgt	r7, r3
 800a6e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a6e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a6ea:	bfd6      	itet	le
 800a6ec:	f1c3 0320 	rsble	r3, r3, #32
 800a6f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a6f4:	fa04 f003 	lslle.w	r0, r4, r3
 800a6f8:	f7f5 ff1c 	bl	8000534 <__aeabi_ui2d>
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a702:	3e01      	subs	r6, #1
 800a704:	9214      	str	r2, [sp, #80]	@ 0x50
 800a706:	e777      	b.n	800a5f8 <_dtoa_r+0x100>
 800a708:	2301      	movs	r3, #1
 800a70a:	e7b8      	b.n	800a67e <_dtoa_r+0x186>
 800a70c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a70e:	e7b7      	b.n	800a680 <_dtoa_r+0x188>
 800a710:	427b      	negs	r3, r7
 800a712:	930a      	str	r3, [sp, #40]	@ 0x28
 800a714:	2300      	movs	r3, #0
 800a716:	eba8 0807 	sub.w	r8, r8, r7
 800a71a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a71c:	e7c4      	b.n	800a6a8 <_dtoa_r+0x1b0>
 800a71e:	2300      	movs	r3, #0
 800a720:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a724:	2b00      	cmp	r3, #0
 800a726:	dc35      	bgt.n	800a794 <_dtoa_r+0x29c>
 800a728:	2301      	movs	r3, #1
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	9307      	str	r3, [sp, #28]
 800a72e:	461a      	mov	r2, r3
 800a730:	920e      	str	r2, [sp, #56]	@ 0x38
 800a732:	e00b      	b.n	800a74c <_dtoa_r+0x254>
 800a734:	2301      	movs	r3, #1
 800a736:	e7f3      	b.n	800a720 <_dtoa_r+0x228>
 800a738:	2300      	movs	r3, #0
 800a73a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a73c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a73e:	18fb      	adds	r3, r7, r3
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	3301      	adds	r3, #1
 800a744:	2b01      	cmp	r3, #1
 800a746:	9307      	str	r3, [sp, #28]
 800a748:	bfb8      	it	lt
 800a74a:	2301      	movlt	r3, #1
 800a74c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a750:	2100      	movs	r1, #0
 800a752:	2204      	movs	r2, #4
 800a754:	f102 0514 	add.w	r5, r2, #20
 800a758:	429d      	cmp	r5, r3
 800a75a:	d91f      	bls.n	800a79c <_dtoa_r+0x2a4>
 800a75c:	6041      	str	r1, [r0, #4]
 800a75e:	4658      	mov	r0, fp
 800a760:	f000 fd8e 	bl	800b280 <_Balloc>
 800a764:	4682      	mov	sl, r0
 800a766:	2800      	cmp	r0, #0
 800a768:	d13c      	bne.n	800a7e4 <_dtoa_r+0x2ec>
 800a76a:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d8 <_dtoa_r+0x2e0>)
 800a76c:	4602      	mov	r2, r0
 800a76e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a772:	e6d8      	b.n	800a526 <_dtoa_r+0x2e>
 800a774:	2301      	movs	r3, #1
 800a776:	e7e0      	b.n	800a73a <_dtoa_r+0x242>
 800a778:	2401      	movs	r4, #1
 800a77a:	2300      	movs	r3, #0
 800a77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a77e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a780:	f04f 33ff 	mov.w	r3, #4294967295
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	9307      	str	r3, [sp, #28]
 800a788:	2200      	movs	r2, #0
 800a78a:	2312      	movs	r3, #18
 800a78c:	e7d0      	b.n	800a730 <_dtoa_r+0x238>
 800a78e:	2301      	movs	r3, #1
 800a790:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a792:	e7f5      	b.n	800a780 <_dtoa_r+0x288>
 800a794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	9307      	str	r3, [sp, #28]
 800a79a:	e7d7      	b.n	800a74c <_dtoa_r+0x254>
 800a79c:	3101      	adds	r1, #1
 800a79e:	0052      	lsls	r2, r2, #1
 800a7a0:	e7d8      	b.n	800a754 <_dtoa_r+0x25c>
 800a7a2:	bf00      	nop
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	636f4361 	.word	0x636f4361
 800a7ac:	3fd287a7 	.word	0x3fd287a7
 800a7b0:	8b60c8b3 	.word	0x8b60c8b3
 800a7b4:	3fc68a28 	.word	0x3fc68a28
 800a7b8:	509f79fb 	.word	0x509f79fb
 800a7bc:	3fd34413 	.word	0x3fd34413
 800a7c0:	0800c29d 	.word	0x0800c29d
 800a7c4:	0800c2b4 	.word	0x0800c2b4
 800a7c8:	7ff00000 	.word	0x7ff00000
 800a7cc:	0800c26d 	.word	0x0800c26d
 800a7d0:	3ff80000 	.word	0x3ff80000
 800a7d4:	0800c3b0 	.word	0x0800c3b0
 800a7d8:	0800c30c 	.word	0x0800c30c
 800a7dc:	0800c299 	.word	0x0800c299
 800a7e0:	0800c26c 	.word	0x0800c26c
 800a7e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7e8:	6018      	str	r0, [r3, #0]
 800a7ea:	9b07      	ldr	r3, [sp, #28]
 800a7ec:	2b0e      	cmp	r3, #14
 800a7ee:	f200 80a4 	bhi.w	800a93a <_dtoa_r+0x442>
 800a7f2:	2c00      	cmp	r4, #0
 800a7f4:	f000 80a1 	beq.w	800a93a <_dtoa_r+0x442>
 800a7f8:	2f00      	cmp	r7, #0
 800a7fa:	dd33      	ble.n	800a864 <_dtoa_r+0x36c>
 800a7fc:	4bad      	ldr	r3, [pc, #692]	@ (800aab4 <_dtoa_r+0x5bc>)
 800a7fe:	f007 020f 	and.w	r2, r7, #15
 800a802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a806:	ed93 7b00 	vldr	d7, [r3]
 800a80a:	05f8      	lsls	r0, r7, #23
 800a80c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a810:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a814:	d516      	bpl.n	800a844 <_dtoa_r+0x34c>
 800a816:	4ba8      	ldr	r3, [pc, #672]	@ (800aab8 <_dtoa_r+0x5c0>)
 800a818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a81c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a820:	f7f6 f82c 	bl	800087c <__aeabi_ddiv>
 800a824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a828:	f004 040f 	and.w	r4, r4, #15
 800a82c:	2603      	movs	r6, #3
 800a82e:	4da2      	ldr	r5, [pc, #648]	@ (800aab8 <_dtoa_r+0x5c0>)
 800a830:	b954      	cbnz	r4, 800a848 <_dtoa_r+0x350>
 800a832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a83a:	f7f6 f81f 	bl	800087c <__aeabi_ddiv>
 800a83e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a842:	e028      	b.n	800a896 <_dtoa_r+0x39e>
 800a844:	2602      	movs	r6, #2
 800a846:	e7f2      	b.n	800a82e <_dtoa_r+0x336>
 800a848:	07e1      	lsls	r1, r4, #31
 800a84a:	d508      	bpl.n	800a85e <_dtoa_r+0x366>
 800a84c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a850:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a854:	f7f5 fee8 	bl	8000628 <__aeabi_dmul>
 800a858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a85c:	3601      	adds	r6, #1
 800a85e:	1064      	asrs	r4, r4, #1
 800a860:	3508      	adds	r5, #8
 800a862:	e7e5      	b.n	800a830 <_dtoa_r+0x338>
 800a864:	f000 80d2 	beq.w	800aa0c <_dtoa_r+0x514>
 800a868:	427c      	negs	r4, r7
 800a86a:	4b92      	ldr	r3, [pc, #584]	@ (800aab4 <_dtoa_r+0x5bc>)
 800a86c:	4d92      	ldr	r5, [pc, #584]	@ (800aab8 <_dtoa_r+0x5c0>)
 800a86e:	f004 020f 	and.w	r2, r4, #15
 800a872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a87e:	f7f5 fed3 	bl	8000628 <__aeabi_dmul>
 800a882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a886:	1124      	asrs	r4, r4, #4
 800a888:	2300      	movs	r3, #0
 800a88a:	2602      	movs	r6, #2
 800a88c:	2c00      	cmp	r4, #0
 800a88e:	f040 80b2 	bne.w	800a9f6 <_dtoa_r+0x4fe>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1d3      	bne.n	800a83e <_dtoa_r+0x346>
 800a896:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a898:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 80b7 	beq.w	800aa10 <_dtoa_r+0x518>
 800a8a2:	4b86      	ldr	r3, [pc, #536]	@ (800aabc <_dtoa_r+0x5c4>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	f7f6 f92f 	bl	8000b0c <__aeabi_dcmplt>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f000 80ae 	beq.w	800aa10 <_dtoa_r+0x518>
 800a8b4:	9b07      	ldr	r3, [sp, #28]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 80aa 	beq.w	800aa10 <_dtoa_r+0x518>
 800a8bc:	9b00      	ldr	r3, [sp, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dd37      	ble.n	800a932 <_dtoa_r+0x43a>
 800a8c2:	1e7b      	subs	r3, r7, #1
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	4b7d      	ldr	r3, [pc, #500]	@ (800aac0 <_dtoa_r+0x5c8>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	f7f5 feab 	bl	8000628 <__aeabi_dmul>
 800a8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8d6:	9c00      	ldr	r4, [sp, #0]
 800a8d8:	3601      	adds	r6, #1
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7f5 fe3a 	bl	8000554 <__aeabi_i2d>
 800a8e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8e4:	f7f5 fea0 	bl	8000628 <__aeabi_dmul>
 800a8e8:	4b76      	ldr	r3, [pc, #472]	@ (800aac4 <_dtoa_r+0x5cc>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f7f5 fce6 	bl	80002bc <__adddf3>
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a8f6:	2c00      	cmp	r4, #0
 800a8f8:	f040 808d 	bne.w	800aa16 <_dtoa_r+0x51e>
 800a8fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a900:	4b71      	ldr	r3, [pc, #452]	@ (800aac8 <_dtoa_r+0x5d0>)
 800a902:	2200      	movs	r2, #0
 800a904:	f7f5 fcd8 	bl	80002b8 <__aeabi_dsub>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a910:	462a      	mov	r2, r5
 800a912:	4633      	mov	r3, r6
 800a914:	f7f6 f918 	bl	8000b48 <__aeabi_dcmpgt>
 800a918:	2800      	cmp	r0, #0
 800a91a:	f040 828b 	bne.w	800ae34 <_dtoa_r+0x93c>
 800a91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a922:	462a      	mov	r2, r5
 800a924:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a928:	f7f6 f8f0 	bl	8000b0c <__aeabi_dcmplt>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f040 8128 	bne.w	800ab82 <_dtoa_r+0x68a>
 800a932:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a936:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a93a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f2c0 815a 	blt.w	800abf6 <_dtoa_r+0x6fe>
 800a942:	2f0e      	cmp	r7, #14
 800a944:	f300 8157 	bgt.w	800abf6 <_dtoa_r+0x6fe>
 800a948:	4b5a      	ldr	r3, [pc, #360]	@ (800aab4 <_dtoa_r+0x5bc>)
 800a94a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a94e:	ed93 7b00 	vldr	d7, [r3]
 800a952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	ed8d 7b00 	vstr	d7, [sp]
 800a95a:	da03      	bge.n	800a964 <_dtoa_r+0x46c>
 800a95c:	9b07      	ldr	r3, [sp, #28]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f340 8101 	ble.w	800ab66 <_dtoa_r+0x66e>
 800a964:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a968:	4656      	mov	r6, sl
 800a96a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 ff83 	bl	800087c <__aeabi_ddiv>
 800a976:	f7f6 f907 	bl	8000b88 <__aeabi_d2iz>
 800a97a:	4680      	mov	r8, r0
 800a97c:	f7f5 fdea 	bl	8000554 <__aeabi_i2d>
 800a980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a984:	f7f5 fe50 	bl	8000628 <__aeabi_dmul>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a994:	f7f5 fc90 	bl	80002b8 <__aeabi_dsub>
 800a998:	f806 4b01 	strb.w	r4, [r6], #1
 800a99c:	9d07      	ldr	r5, [sp, #28]
 800a99e:	eba6 040a 	sub.w	r4, r6, sl
 800a9a2:	42a5      	cmp	r5, r4
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	f040 8117 	bne.w	800abda <_dtoa_r+0x6e2>
 800a9ac:	f7f5 fc86 	bl	80002bc <__adddf3>
 800a9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	460d      	mov	r5, r1
 800a9b8:	f7f6 f8c6 	bl	8000b48 <__aeabi_dcmpgt>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	f040 80f9 	bne.w	800abb4 <_dtoa_r+0x6bc>
 800a9c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7f6 f895 	bl	8000af8 <__aeabi_dcmpeq>
 800a9ce:	b118      	cbz	r0, 800a9d8 <_dtoa_r+0x4e0>
 800a9d0:	f018 0f01 	tst.w	r8, #1
 800a9d4:	f040 80ee 	bne.w	800abb4 <_dtoa_r+0x6bc>
 800a9d8:	4649      	mov	r1, r9
 800a9da:	4658      	mov	r0, fp
 800a9dc:	f000 fc90 	bl	800b300 <_Bfree>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	7033      	strb	r3, [r6, #0]
 800a9e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9e6:	3701      	adds	r7, #1
 800a9e8:	601f      	str	r7, [r3, #0]
 800a9ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 831d 	beq.w	800b02c <_dtoa_r+0xb34>
 800a9f2:	601e      	str	r6, [r3, #0]
 800a9f4:	e31a      	b.n	800b02c <_dtoa_r+0xb34>
 800a9f6:	07e2      	lsls	r2, r4, #31
 800a9f8:	d505      	bpl.n	800aa06 <_dtoa_r+0x50e>
 800a9fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9fe:	f7f5 fe13 	bl	8000628 <__aeabi_dmul>
 800aa02:	3601      	adds	r6, #1
 800aa04:	2301      	movs	r3, #1
 800aa06:	1064      	asrs	r4, r4, #1
 800aa08:	3508      	adds	r5, #8
 800aa0a:	e73f      	b.n	800a88c <_dtoa_r+0x394>
 800aa0c:	2602      	movs	r6, #2
 800aa0e:	e742      	b.n	800a896 <_dtoa_r+0x39e>
 800aa10:	9c07      	ldr	r4, [sp, #28]
 800aa12:	9704      	str	r7, [sp, #16]
 800aa14:	e761      	b.n	800a8da <_dtoa_r+0x3e2>
 800aa16:	4b27      	ldr	r3, [pc, #156]	@ (800aab4 <_dtoa_r+0x5bc>)
 800aa18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa22:	4454      	add	r4, sl
 800aa24:	2900      	cmp	r1, #0
 800aa26:	d053      	beq.n	800aad0 <_dtoa_r+0x5d8>
 800aa28:	4928      	ldr	r1, [pc, #160]	@ (800aacc <_dtoa_r+0x5d4>)
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	f7f5 ff26 	bl	800087c <__aeabi_ddiv>
 800aa30:	4633      	mov	r3, r6
 800aa32:	462a      	mov	r2, r5
 800aa34:	f7f5 fc40 	bl	80002b8 <__aeabi_dsub>
 800aa38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa3c:	4656      	mov	r6, sl
 800aa3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa42:	f7f6 f8a1 	bl	8000b88 <__aeabi_d2iz>
 800aa46:	4605      	mov	r5, r0
 800aa48:	f7f5 fd84 	bl	8000554 <__aeabi_i2d>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa54:	f7f5 fc30 	bl	80002b8 <__aeabi_dsub>
 800aa58:	3530      	adds	r5, #48	@ 0x30
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa62:	f806 5b01 	strb.w	r5, [r6], #1
 800aa66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa6a:	f7f6 f84f 	bl	8000b0c <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d171      	bne.n	800ab56 <_dtoa_r+0x65e>
 800aa72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa76:	4911      	ldr	r1, [pc, #68]	@ (800aabc <_dtoa_r+0x5c4>)
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f7f5 fc1d 	bl	80002b8 <__aeabi_dsub>
 800aa7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa82:	f7f6 f843 	bl	8000b0c <__aeabi_dcmplt>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f040 8095 	bne.w	800abb6 <_dtoa_r+0x6be>
 800aa8c:	42a6      	cmp	r6, r4
 800aa8e:	f43f af50 	beq.w	800a932 <_dtoa_r+0x43a>
 800aa92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa96:	4b0a      	ldr	r3, [pc, #40]	@ (800aac0 <_dtoa_r+0x5c8>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f7f5 fdc5 	bl	8000628 <__aeabi_dmul>
 800aa9e:	4b08      	ldr	r3, [pc, #32]	@ (800aac0 <_dtoa_r+0x5c8>)
 800aaa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaaa:	f7f5 fdbd 	bl	8000628 <__aeabi_dmul>
 800aaae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab2:	e7c4      	b.n	800aa3e <_dtoa_r+0x546>
 800aab4:	0800c3b0 	.word	0x0800c3b0
 800aab8:	0800c388 	.word	0x0800c388
 800aabc:	3ff00000 	.word	0x3ff00000
 800aac0:	40240000 	.word	0x40240000
 800aac4:	401c0000 	.word	0x401c0000
 800aac8:	40140000 	.word	0x40140000
 800aacc:	3fe00000 	.word	0x3fe00000
 800aad0:	4631      	mov	r1, r6
 800aad2:	4628      	mov	r0, r5
 800aad4:	f7f5 fda8 	bl	8000628 <__aeabi_dmul>
 800aad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aadc:	9415      	str	r4, [sp, #84]	@ 0x54
 800aade:	4656      	mov	r6, sl
 800aae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae4:	f7f6 f850 	bl	8000b88 <__aeabi_d2iz>
 800aae8:	4605      	mov	r5, r0
 800aaea:	f7f5 fd33 	bl	8000554 <__aeabi_i2d>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf6:	f7f5 fbdf 	bl	80002b8 <__aeabi_dsub>
 800aafa:	3530      	adds	r5, #48	@ 0x30
 800aafc:	f806 5b01 	strb.w	r5, [r6], #1
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	42a6      	cmp	r6, r4
 800ab06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab0a:	f04f 0200 	mov.w	r2, #0
 800ab0e:	d124      	bne.n	800ab5a <_dtoa_r+0x662>
 800ab10:	4bac      	ldr	r3, [pc, #688]	@ (800adc4 <_dtoa_r+0x8cc>)
 800ab12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab16:	f7f5 fbd1 	bl	80002bc <__adddf3>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab22:	f7f6 f811 	bl	8000b48 <__aeabi_dcmpgt>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d145      	bne.n	800abb6 <_dtoa_r+0x6be>
 800ab2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab2e:	49a5      	ldr	r1, [pc, #660]	@ (800adc4 <_dtoa_r+0x8cc>)
 800ab30:	2000      	movs	r0, #0
 800ab32:	f7f5 fbc1 	bl	80002b8 <__aeabi_dsub>
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab3e:	f7f5 ffe5 	bl	8000b0c <__aeabi_dcmplt>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	f43f aef5 	beq.w	800a932 <_dtoa_r+0x43a>
 800ab48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ab4a:	1e73      	subs	r3, r6, #1
 800ab4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ab4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab52:	2b30      	cmp	r3, #48	@ 0x30
 800ab54:	d0f8      	beq.n	800ab48 <_dtoa_r+0x650>
 800ab56:	9f04      	ldr	r7, [sp, #16]
 800ab58:	e73e      	b.n	800a9d8 <_dtoa_r+0x4e0>
 800ab5a:	4b9b      	ldr	r3, [pc, #620]	@ (800adc8 <_dtoa_r+0x8d0>)
 800ab5c:	f7f5 fd64 	bl	8000628 <__aeabi_dmul>
 800ab60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab64:	e7bc      	b.n	800aae0 <_dtoa_r+0x5e8>
 800ab66:	d10c      	bne.n	800ab82 <_dtoa_r+0x68a>
 800ab68:	4b98      	ldr	r3, [pc, #608]	@ (800adcc <_dtoa_r+0x8d4>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab70:	f7f5 fd5a 	bl	8000628 <__aeabi_dmul>
 800ab74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab78:	f7f5 ffdc 	bl	8000b34 <__aeabi_dcmpge>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f000 8157 	beq.w	800ae30 <_dtoa_r+0x938>
 800ab82:	2400      	movs	r4, #0
 800ab84:	4625      	mov	r5, r4
 800ab86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab88:	43db      	mvns	r3, r3
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	4656      	mov	r6, sl
 800ab8e:	2700      	movs	r7, #0
 800ab90:	4621      	mov	r1, r4
 800ab92:	4658      	mov	r0, fp
 800ab94:	f000 fbb4 	bl	800b300 <_Bfree>
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	d0dc      	beq.n	800ab56 <_dtoa_r+0x65e>
 800ab9c:	b12f      	cbz	r7, 800abaa <_dtoa_r+0x6b2>
 800ab9e:	42af      	cmp	r7, r5
 800aba0:	d003      	beq.n	800abaa <_dtoa_r+0x6b2>
 800aba2:	4639      	mov	r1, r7
 800aba4:	4658      	mov	r0, fp
 800aba6:	f000 fbab 	bl	800b300 <_Bfree>
 800abaa:	4629      	mov	r1, r5
 800abac:	4658      	mov	r0, fp
 800abae:	f000 fba7 	bl	800b300 <_Bfree>
 800abb2:	e7d0      	b.n	800ab56 <_dtoa_r+0x65e>
 800abb4:	9704      	str	r7, [sp, #16]
 800abb6:	4633      	mov	r3, r6
 800abb8:	461e      	mov	r6, r3
 800abba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abbe:	2a39      	cmp	r2, #57	@ 0x39
 800abc0:	d107      	bne.n	800abd2 <_dtoa_r+0x6da>
 800abc2:	459a      	cmp	sl, r3
 800abc4:	d1f8      	bne.n	800abb8 <_dtoa_r+0x6c0>
 800abc6:	9a04      	ldr	r2, [sp, #16]
 800abc8:	3201      	adds	r2, #1
 800abca:	9204      	str	r2, [sp, #16]
 800abcc:	2230      	movs	r2, #48	@ 0x30
 800abce:	f88a 2000 	strb.w	r2, [sl]
 800abd2:	781a      	ldrb	r2, [r3, #0]
 800abd4:	3201      	adds	r2, #1
 800abd6:	701a      	strb	r2, [r3, #0]
 800abd8:	e7bd      	b.n	800ab56 <_dtoa_r+0x65e>
 800abda:	4b7b      	ldr	r3, [pc, #492]	@ (800adc8 <_dtoa_r+0x8d0>)
 800abdc:	2200      	movs	r2, #0
 800abde:	f7f5 fd23 	bl	8000628 <__aeabi_dmul>
 800abe2:	2200      	movs	r2, #0
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	460d      	mov	r5, r1
 800abea:	f7f5 ff85 	bl	8000af8 <__aeabi_dcmpeq>
 800abee:	2800      	cmp	r0, #0
 800abf0:	f43f aebb 	beq.w	800a96a <_dtoa_r+0x472>
 800abf4:	e6f0      	b.n	800a9d8 <_dtoa_r+0x4e0>
 800abf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	f000 80db 	beq.w	800adb4 <_dtoa_r+0x8bc>
 800abfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac00:	2a01      	cmp	r2, #1
 800ac02:	f300 80bf 	bgt.w	800ad84 <_dtoa_r+0x88c>
 800ac06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	f000 80b7 	beq.w	800ad7c <_dtoa_r+0x884>
 800ac0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac14:	4646      	mov	r6, r8
 800ac16:	9a08      	ldr	r2, [sp, #32]
 800ac18:	2101      	movs	r1, #1
 800ac1a:	441a      	add	r2, r3
 800ac1c:	4658      	mov	r0, fp
 800ac1e:	4498      	add	r8, r3
 800ac20:	9208      	str	r2, [sp, #32]
 800ac22:	f000 fc21 	bl	800b468 <__i2b>
 800ac26:	4605      	mov	r5, r0
 800ac28:	b15e      	cbz	r6, 800ac42 <_dtoa_r+0x74a>
 800ac2a:	9b08      	ldr	r3, [sp, #32]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd08      	ble.n	800ac42 <_dtoa_r+0x74a>
 800ac30:	42b3      	cmp	r3, r6
 800ac32:	9a08      	ldr	r2, [sp, #32]
 800ac34:	bfa8      	it	ge
 800ac36:	4633      	movge	r3, r6
 800ac38:	eba8 0803 	sub.w	r8, r8, r3
 800ac3c:	1af6      	subs	r6, r6, r3
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	9308      	str	r3, [sp, #32]
 800ac42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac44:	b1f3      	cbz	r3, 800ac84 <_dtoa_r+0x78c>
 800ac46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 80b7 	beq.w	800adbc <_dtoa_r+0x8c4>
 800ac4e:	b18c      	cbz	r4, 800ac74 <_dtoa_r+0x77c>
 800ac50:	4629      	mov	r1, r5
 800ac52:	4622      	mov	r2, r4
 800ac54:	4658      	mov	r0, fp
 800ac56:	f000 fcc7 	bl	800b5e8 <__pow5mult>
 800ac5a:	464a      	mov	r2, r9
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	4605      	mov	r5, r0
 800ac60:	4658      	mov	r0, fp
 800ac62:	f000 fc17 	bl	800b494 <__multiply>
 800ac66:	4649      	mov	r1, r9
 800ac68:	9004      	str	r0, [sp, #16]
 800ac6a:	4658      	mov	r0, fp
 800ac6c:	f000 fb48 	bl	800b300 <_Bfree>
 800ac70:	9b04      	ldr	r3, [sp, #16]
 800ac72:	4699      	mov	r9, r3
 800ac74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac76:	1b1a      	subs	r2, r3, r4
 800ac78:	d004      	beq.n	800ac84 <_dtoa_r+0x78c>
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	4658      	mov	r0, fp
 800ac7e:	f000 fcb3 	bl	800b5e8 <__pow5mult>
 800ac82:	4681      	mov	r9, r0
 800ac84:	2101      	movs	r1, #1
 800ac86:	4658      	mov	r0, fp
 800ac88:	f000 fbee 	bl	800b468 <__i2b>
 800ac8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac8e:	4604      	mov	r4, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 81cf 	beq.w	800b034 <_dtoa_r+0xb3c>
 800ac96:	461a      	mov	r2, r3
 800ac98:	4601      	mov	r1, r0
 800ac9a:	4658      	mov	r0, fp
 800ac9c:	f000 fca4 	bl	800b5e8 <__pow5mult>
 800aca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	4604      	mov	r4, r0
 800aca6:	f300 8095 	bgt.w	800add4 <_dtoa_r+0x8dc>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f040 8087 	bne.w	800adc0 <_dtoa_r+0x8c8>
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f040 8089 	bne.w	800add0 <_dtoa_r+0x8d8>
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800acc4:	0d1b      	lsrs	r3, r3, #20
 800acc6:	051b      	lsls	r3, r3, #20
 800acc8:	b12b      	cbz	r3, 800acd6 <_dtoa_r+0x7de>
 800acca:	9b08      	ldr	r3, [sp, #32]
 800accc:	3301      	adds	r3, #1
 800acce:	9308      	str	r3, [sp, #32]
 800acd0:	f108 0801 	add.w	r8, r8, #1
 800acd4:	2301      	movs	r3, #1
 800acd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 81b0 	beq.w	800b040 <_dtoa_r+0xb48>
 800ace0:	6923      	ldr	r3, [r4, #16]
 800ace2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ace6:	6918      	ldr	r0, [r3, #16]
 800ace8:	f000 fb72 	bl	800b3d0 <__hi0bits>
 800acec:	f1c0 0020 	rsb	r0, r0, #32
 800acf0:	9b08      	ldr	r3, [sp, #32]
 800acf2:	4418      	add	r0, r3
 800acf4:	f010 001f 	ands.w	r0, r0, #31
 800acf8:	d077      	beq.n	800adea <_dtoa_r+0x8f2>
 800acfa:	f1c0 0320 	rsb	r3, r0, #32
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	dd6b      	ble.n	800adda <_dtoa_r+0x8e2>
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	f1c0 001c 	rsb	r0, r0, #28
 800ad08:	4403      	add	r3, r0
 800ad0a:	4480      	add	r8, r0
 800ad0c:	4406      	add	r6, r0
 800ad0e:	9308      	str	r3, [sp, #32]
 800ad10:	f1b8 0f00 	cmp.w	r8, #0
 800ad14:	dd05      	ble.n	800ad22 <_dtoa_r+0x82a>
 800ad16:	4649      	mov	r1, r9
 800ad18:	4642      	mov	r2, r8
 800ad1a:	4658      	mov	r0, fp
 800ad1c:	f000 fcbe 	bl	800b69c <__lshift>
 800ad20:	4681      	mov	r9, r0
 800ad22:	9b08      	ldr	r3, [sp, #32]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dd05      	ble.n	800ad34 <_dtoa_r+0x83c>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	4658      	mov	r0, fp
 800ad2e:	f000 fcb5 	bl	800b69c <__lshift>
 800ad32:	4604      	mov	r4, r0
 800ad34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d059      	beq.n	800adee <_dtoa_r+0x8f6>
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	f000 fd19 	bl	800b774 <__mcmp>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	da53      	bge.n	800adee <_dtoa_r+0x8f6>
 800ad46:	1e7b      	subs	r3, r7, #1
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	220a      	movs	r2, #10
 800ad50:	4658      	mov	r0, fp
 800ad52:	f000 faf7 	bl	800b344 <__multadd>
 800ad56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad58:	4681      	mov	r9, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f000 8172 	beq.w	800b044 <_dtoa_r+0xb4c>
 800ad60:	2300      	movs	r3, #0
 800ad62:	4629      	mov	r1, r5
 800ad64:	220a      	movs	r2, #10
 800ad66:	4658      	mov	r0, fp
 800ad68:	f000 faec 	bl	800b344 <__multadd>
 800ad6c:	9b00      	ldr	r3, [sp, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	4605      	mov	r5, r0
 800ad72:	dc67      	bgt.n	800ae44 <_dtoa_r+0x94c>
 800ad74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	dc41      	bgt.n	800adfe <_dtoa_r+0x906>
 800ad7a:	e063      	b.n	800ae44 <_dtoa_r+0x94c>
 800ad7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad82:	e746      	b.n	800ac12 <_dtoa_r+0x71a>
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	1e5c      	subs	r4, r3, #1
 800ad88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad8a:	42a3      	cmp	r3, r4
 800ad8c:	bfbf      	itttt	lt
 800ad8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ad90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ad92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ad94:	1ae3      	sublt	r3, r4, r3
 800ad96:	bfb4      	ite	lt
 800ad98:	18d2      	addlt	r2, r2, r3
 800ad9a:	1b1c      	subge	r4, r3, r4
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	bfbc      	itt	lt
 800ada0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ada2:	2400      	movlt	r4, #0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bfb5      	itete	lt
 800ada8:	eba8 0603 	sublt.w	r6, r8, r3
 800adac:	9b07      	ldrge	r3, [sp, #28]
 800adae:	2300      	movlt	r3, #0
 800adb0:	4646      	movge	r6, r8
 800adb2:	e730      	b.n	800ac16 <_dtoa_r+0x71e>
 800adb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800adb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800adb8:	4646      	mov	r6, r8
 800adba:	e735      	b.n	800ac28 <_dtoa_r+0x730>
 800adbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800adbe:	e75c      	b.n	800ac7a <_dtoa_r+0x782>
 800adc0:	2300      	movs	r3, #0
 800adc2:	e788      	b.n	800acd6 <_dtoa_r+0x7de>
 800adc4:	3fe00000 	.word	0x3fe00000
 800adc8:	40240000 	.word	0x40240000
 800adcc:	40140000 	.word	0x40140000
 800add0:	9b02      	ldr	r3, [sp, #8]
 800add2:	e780      	b.n	800acd6 <_dtoa_r+0x7de>
 800add4:	2300      	movs	r3, #0
 800add6:	930a      	str	r3, [sp, #40]	@ 0x28
 800add8:	e782      	b.n	800ace0 <_dtoa_r+0x7e8>
 800adda:	d099      	beq.n	800ad10 <_dtoa_r+0x818>
 800addc:	9a08      	ldr	r2, [sp, #32]
 800adde:	331c      	adds	r3, #28
 800ade0:	441a      	add	r2, r3
 800ade2:	4498      	add	r8, r3
 800ade4:	441e      	add	r6, r3
 800ade6:	9208      	str	r2, [sp, #32]
 800ade8:	e792      	b.n	800ad10 <_dtoa_r+0x818>
 800adea:	4603      	mov	r3, r0
 800adec:	e7f6      	b.n	800addc <_dtoa_r+0x8e4>
 800adee:	9b07      	ldr	r3, [sp, #28]
 800adf0:	9704      	str	r7, [sp, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dc20      	bgt.n	800ae38 <_dtoa_r+0x940>
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	dd1e      	ble.n	800ae3c <_dtoa_r+0x944>
 800adfe:	9b00      	ldr	r3, [sp, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f47f aec0 	bne.w	800ab86 <_dtoa_r+0x68e>
 800ae06:	4621      	mov	r1, r4
 800ae08:	2205      	movs	r2, #5
 800ae0a:	4658      	mov	r0, fp
 800ae0c:	f000 fa9a 	bl	800b344 <__multadd>
 800ae10:	4601      	mov	r1, r0
 800ae12:	4604      	mov	r4, r0
 800ae14:	4648      	mov	r0, r9
 800ae16:	f000 fcad 	bl	800b774 <__mcmp>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f77f aeb3 	ble.w	800ab86 <_dtoa_r+0x68e>
 800ae20:	4656      	mov	r6, sl
 800ae22:	2331      	movs	r3, #49	@ 0x31
 800ae24:	f806 3b01 	strb.w	r3, [r6], #1
 800ae28:	9b04      	ldr	r3, [sp, #16]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	9304      	str	r3, [sp, #16]
 800ae2e:	e6ae      	b.n	800ab8e <_dtoa_r+0x696>
 800ae30:	9c07      	ldr	r4, [sp, #28]
 800ae32:	9704      	str	r7, [sp, #16]
 800ae34:	4625      	mov	r5, r4
 800ae36:	e7f3      	b.n	800ae20 <_dtoa_r+0x928>
 800ae38:	9b07      	ldr	r3, [sp, #28]
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 8104 	beq.w	800b04c <_dtoa_r+0xb54>
 800ae44:	2e00      	cmp	r6, #0
 800ae46:	dd05      	ble.n	800ae54 <_dtoa_r+0x95c>
 800ae48:	4629      	mov	r1, r5
 800ae4a:	4632      	mov	r2, r6
 800ae4c:	4658      	mov	r0, fp
 800ae4e:	f000 fc25 	bl	800b69c <__lshift>
 800ae52:	4605      	mov	r5, r0
 800ae54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d05a      	beq.n	800af10 <_dtoa_r+0xa18>
 800ae5a:	6869      	ldr	r1, [r5, #4]
 800ae5c:	4658      	mov	r0, fp
 800ae5e:	f000 fa0f 	bl	800b280 <_Balloc>
 800ae62:	4606      	mov	r6, r0
 800ae64:	b928      	cbnz	r0, 800ae72 <_dtoa_r+0x97a>
 800ae66:	4b84      	ldr	r3, [pc, #528]	@ (800b078 <_dtoa_r+0xb80>)
 800ae68:	4602      	mov	r2, r0
 800ae6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae6e:	f7ff bb5a 	b.w	800a526 <_dtoa_r+0x2e>
 800ae72:	692a      	ldr	r2, [r5, #16]
 800ae74:	3202      	adds	r2, #2
 800ae76:	0092      	lsls	r2, r2, #2
 800ae78:	f105 010c 	add.w	r1, r5, #12
 800ae7c:	300c      	adds	r0, #12
 800ae7e:	f001 f847 	bl	800bf10 <memcpy>
 800ae82:	2201      	movs	r2, #1
 800ae84:	4631      	mov	r1, r6
 800ae86:	4658      	mov	r0, fp
 800ae88:	f000 fc08 	bl	800b69c <__lshift>
 800ae8c:	f10a 0301 	add.w	r3, sl, #1
 800ae90:	9307      	str	r3, [sp, #28]
 800ae92:	9b00      	ldr	r3, [sp, #0]
 800ae94:	4453      	add	r3, sl
 800ae96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae98:	9b02      	ldr	r3, [sp, #8]
 800ae9a:	f003 0301 	and.w	r3, r3, #1
 800ae9e:	462f      	mov	r7, r5
 800aea0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aea2:	4605      	mov	r5, r0
 800aea4:	9b07      	ldr	r3, [sp, #28]
 800aea6:	4621      	mov	r1, r4
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	4648      	mov	r0, r9
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	f7ff fa9a 	bl	800a3e6 <quorem>
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	9002      	str	r0, [sp, #8]
 800aeb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aeba:	4648      	mov	r0, r9
 800aebc:	f000 fc5a 	bl	800b774 <__mcmp>
 800aec0:	462a      	mov	r2, r5
 800aec2:	9008      	str	r0, [sp, #32]
 800aec4:	4621      	mov	r1, r4
 800aec6:	4658      	mov	r0, fp
 800aec8:	f000 fc70 	bl	800b7ac <__mdiff>
 800aecc:	68c2      	ldr	r2, [r0, #12]
 800aece:	4606      	mov	r6, r0
 800aed0:	bb02      	cbnz	r2, 800af14 <_dtoa_r+0xa1c>
 800aed2:	4601      	mov	r1, r0
 800aed4:	4648      	mov	r0, r9
 800aed6:	f000 fc4d 	bl	800b774 <__mcmp>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4631      	mov	r1, r6
 800aede:	4658      	mov	r0, fp
 800aee0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aee2:	f000 fa0d 	bl	800b300 <_Bfree>
 800aee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aeea:	9e07      	ldr	r6, [sp, #28]
 800aeec:	ea43 0102 	orr.w	r1, r3, r2
 800aef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aef2:	4319      	orrs	r1, r3
 800aef4:	d110      	bne.n	800af18 <_dtoa_r+0xa20>
 800aef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aefa:	d029      	beq.n	800af50 <_dtoa_r+0xa58>
 800aefc:	9b08      	ldr	r3, [sp, #32]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dd02      	ble.n	800af08 <_dtoa_r+0xa10>
 800af02:	9b02      	ldr	r3, [sp, #8]
 800af04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800af08:	9b00      	ldr	r3, [sp, #0]
 800af0a:	f883 8000 	strb.w	r8, [r3]
 800af0e:	e63f      	b.n	800ab90 <_dtoa_r+0x698>
 800af10:	4628      	mov	r0, r5
 800af12:	e7bb      	b.n	800ae8c <_dtoa_r+0x994>
 800af14:	2201      	movs	r2, #1
 800af16:	e7e1      	b.n	800aedc <_dtoa_r+0x9e4>
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	db04      	blt.n	800af28 <_dtoa_r+0xa30>
 800af1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af20:	430b      	orrs	r3, r1
 800af22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af24:	430b      	orrs	r3, r1
 800af26:	d120      	bne.n	800af6a <_dtoa_r+0xa72>
 800af28:	2a00      	cmp	r2, #0
 800af2a:	dded      	ble.n	800af08 <_dtoa_r+0xa10>
 800af2c:	4649      	mov	r1, r9
 800af2e:	2201      	movs	r2, #1
 800af30:	4658      	mov	r0, fp
 800af32:	f000 fbb3 	bl	800b69c <__lshift>
 800af36:	4621      	mov	r1, r4
 800af38:	4681      	mov	r9, r0
 800af3a:	f000 fc1b 	bl	800b774 <__mcmp>
 800af3e:	2800      	cmp	r0, #0
 800af40:	dc03      	bgt.n	800af4a <_dtoa_r+0xa52>
 800af42:	d1e1      	bne.n	800af08 <_dtoa_r+0xa10>
 800af44:	f018 0f01 	tst.w	r8, #1
 800af48:	d0de      	beq.n	800af08 <_dtoa_r+0xa10>
 800af4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af4e:	d1d8      	bne.n	800af02 <_dtoa_r+0xa0a>
 800af50:	9a00      	ldr	r2, [sp, #0]
 800af52:	2339      	movs	r3, #57	@ 0x39
 800af54:	7013      	strb	r3, [r2, #0]
 800af56:	4633      	mov	r3, r6
 800af58:	461e      	mov	r6, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af60:	2a39      	cmp	r2, #57	@ 0x39
 800af62:	d052      	beq.n	800b00a <_dtoa_r+0xb12>
 800af64:	3201      	adds	r2, #1
 800af66:	701a      	strb	r2, [r3, #0]
 800af68:	e612      	b.n	800ab90 <_dtoa_r+0x698>
 800af6a:	2a00      	cmp	r2, #0
 800af6c:	dd07      	ble.n	800af7e <_dtoa_r+0xa86>
 800af6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800af72:	d0ed      	beq.n	800af50 <_dtoa_r+0xa58>
 800af74:	9a00      	ldr	r2, [sp, #0]
 800af76:	f108 0301 	add.w	r3, r8, #1
 800af7a:	7013      	strb	r3, [r2, #0]
 800af7c:	e608      	b.n	800ab90 <_dtoa_r+0x698>
 800af7e:	9b07      	ldr	r3, [sp, #28]
 800af80:	9a07      	ldr	r2, [sp, #28]
 800af82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800af86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af88:	4293      	cmp	r3, r2
 800af8a:	d028      	beq.n	800afde <_dtoa_r+0xae6>
 800af8c:	4649      	mov	r1, r9
 800af8e:	2300      	movs	r3, #0
 800af90:	220a      	movs	r2, #10
 800af92:	4658      	mov	r0, fp
 800af94:	f000 f9d6 	bl	800b344 <__multadd>
 800af98:	42af      	cmp	r7, r5
 800af9a:	4681      	mov	r9, r0
 800af9c:	f04f 0300 	mov.w	r3, #0
 800afa0:	f04f 020a 	mov.w	r2, #10
 800afa4:	4639      	mov	r1, r7
 800afa6:	4658      	mov	r0, fp
 800afa8:	d107      	bne.n	800afba <_dtoa_r+0xac2>
 800afaa:	f000 f9cb 	bl	800b344 <__multadd>
 800afae:	4607      	mov	r7, r0
 800afb0:	4605      	mov	r5, r0
 800afb2:	9b07      	ldr	r3, [sp, #28]
 800afb4:	3301      	adds	r3, #1
 800afb6:	9307      	str	r3, [sp, #28]
 800afb8:	e774      	b.n	800aea4 <_dtoa_r+0x9ac>
 800afba:	f000 f9c3 	bl	800b344 <__multadd>
 800afbe:	4629      	mov	r1, r5
 800afc0:	4607      	mov	r7, r0
 800afc2:	2300      	movs	r3, #0
 800afc4:	220a      	movs	r2, #10
 800afc6:	4658      	mov	r0, fp
 800afc8:	f000 f9bc 	bl	800b344 <__multadd>
 800afcc:	4605      	mov	r5, r0
 800afce:	e7f0      	b.n	800afb2 <_dtoa_r+0xaba>
 800afd0:	9b00      	ldr	r3, [sp, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bfcc      	ite	gt
 800afd6:	461e      	movgt	r6, r3
 800afd8:	2601      	movle	r6, #1
 800afda:	4456      	add	r6, sl
 800afdc:	2700      	movs	r7, #0
 800afde:	4649      	mov	r1, r9
 800afe0:	2201      	movs	r2, #1
 800afe2:	4658      	mov	r0, fp
 800afe4:	f000 fb5a 	bl	800b69c <__lshift>
 800afe8:	4621      	mov	r1, r4
 800afea:	4681      	mov	r9, r0
 800afec:	f000 fbc2 	bl	800b774 <__mcmp>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	dcb0      	bgt.n	800af56 <_dtoa_r+0xa5e>
 800aff4:	d102      	bne.n	800affc <_dtoa_r+0xb04>
 800aff6:	f018 0f01 	tst.w	r8, #1
 800affa:	d1ac      	bne.n	800af56 <_dtoa_r+0xa5e>
 800affc:	4633      	mov	r3, r6
 800affe:	461e      	mov	r6, r3
 800b000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b004:	2a30      	cmp	r2, #48	@ 0x30
 800b006:	d0fa      	beq.n	800affe <_dtoa_r+0xb06>
 800b008:	e5c2      	b.n	800ab90 <_dtoa_r+0x698>
 800b00a:	459a      	cmp	sl, r3
 800b00c:	d1a4      	bne.n	800af58 <_dtoa_r+0xa60>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	3301      	adds	r3, #1
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	2331      	movs	r3, #49	@ 0x31
 800b016:	f88a 3000 	strb.w	r3, [sl]
 800b01a:	e5b9      	b.n	800ab90 <_dtoa_r+0x698>
 800b01c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b01e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b07c <_dtoa_r+0xb84>
 800b022:	b11b      	cbz	r3, 800b02c <_dtoa_r+0xb34>
 800b024:	f10a 0308 	add.w	r3, sl, #8
 800b028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	4650      	mov	r0, sl
 800b02e:	b019      	add	sp, #100	@ 0x64
 800b030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b036:	2b01      	cmp	r3, #1
 800b038:	f77f ae37 	ble.w	800acaa <_dtoa_r+0x7b2>
 800b03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b040:	2001      	movs	r0, #1
 800b042:	e655      	b.n	800acf0 <_dtoa_r+0x7f8>
 800b044:	9b00      	ldr	r3, [sp, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f77f aed6 	ble.w	800adf8 <_dtoa_r+0x900>
 800b04c:	4656      	mov	r6, sl
 800b04e:	4621      	mov	r1, r4
 800b050:	4648      	mov	r0, r9
 800b052:	f7ff f9c8 	bl	800a3e6 <quorem>
 800b056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b05a:	f806 8b01 	strb.w	r8, [r6], #1
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	eba6 020a 	sub.w	r2, r6, sl
 800b064:	4293      	cmp	r3, r2
 800b066:	ddb3      	ble.n	800afd0 <_dtoa_r+0xad8>
 800b068:	4649      	mov	r1, r9
 800b06a:	2300      	movs	r3, #0
 800b06c:	220a      	movs	r2, #10
 800b06e:	4658      	mov	r0, fp
 800b070:	f000 f968 	bl	800b344 <__multadd>
 800b074:	4681      	mov	r9, r0
 800b076:	e7ea      	b.n	800b04e <_dtoa_r+0xb56>
 800b078:	0800c30c 	.word	0x0800c30c
 800b07c:	0800c290 	.word	0x0800c290

0800b080 <_free_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4605      	mov	r5, r0
 800b084:	2900      	cmp	r1, #0
 800b086:	d041      	beq.n	800b10c <_free_r+0x8c>
 800b088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b08c:	1f0c      	subs	r4, r1, #4
 800b08e:	2b00      	cmp	r3, #0
 800b090:	bfb8      	it	lt
 800b092:	18e4      	addlt	r4, r4, r3
 800b094:	f000 f8e8 	bl	800b268 <__malloc_lock>
 800b098:	4a1d      	ldr	r2, [pc, #116]	@ (800b110 <_free_r+0x90>)
 800b09a:	6813      	ldr	r3, [r2, #0]
 800b09c:	b933      	cbnz	r3, 800b0ac <_free_r+0x2c>
 800b09e:	6063      	str	r3, [r4, #4]
 800b0a0:	6014      	str	r4, [r2, #0]
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0a8:	f000 b8e4 	b.w	800b274 <__malloc_unlock>
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	d908      	bls.n	800b0c2 <_free_r+0x42>
 800b0b0:	6820      	ldr	r0, [r4, #0]
 800b0b2:	1821      	adds	r1, r4, r0
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	bf01      	itttt	eq
 800b0b8:	6819      	ldreq	r1, [r3, #0]
 800b0ba:	685b      	ldreq	r3, [r3, #4]
 800b0bc:	1809      	addeq	r1, r1, r0
 800b0be:	6021      	streq	r1, [r4, #0]
 800b0c0:	e7ed      	b.n	800b09e <_free_r+0x1e>
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	b10b      	cbz	r3, 800b0cc <_free_r+0x4c>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d9fa      	bls.n	800b0c2 <_free_r+0x42>
 800b0cc:	6811      	ldr	r1, [r2, #0]
 800b0ce:	1850      	adds	r0, r2, r1
 800b0d0:	42a0      	cmp	r0, r4
 800b0d2:	d10b      	bne.n	800b0ec <_free_r+0x6c>
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	4401      	add	r1, r0
 800b0d8:	1850      	adds	r0, r2, r1
 800b0da:	4283      	cmp	r3, r0
 800b0dc:	6011      	str	r1, [r2, #0]
 800b0de:	d1e0      	bne.n	800b0a2 <_free_r+0x22>
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	6053      	str	r3, [r2, #4]
 800b0e6:	4408      	add	r0, r1
 800b0e8:	6010      	str	r0, [r2, #0]
 800b0ea:	e7da      	b.n	800b0a2 <_free_r+0x22>
 800b0ec:	d902      	bls.n	800b0f4 <_free_r+0x74>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	602b      	str	r3, [r5, #0]
 800b0f2:	e7d6      	b.n	800b0a2 <_free_r+0x22>
 800b0f4:	6820      	ldr	r0, [r4, #0]
 800b0f6:	1821      	adds	r1, r4, r0
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	bf04      	itt	eq
 800b0fc:	6819      	ldreq	r1, [r3, #0]
 800b0fe:	685b      	ldreq	r3, [r3, #4]
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	bf04      	itt	eq
 800b104:	1809      	addeq	r1, r1, r0
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	6054      	str	r4, [r2, #4]
 800b10a:	e7ca      	b.n	800b0a2 <_free_r+0x22>
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
 800b10e:	bf00      	nop
 800b110:	20000a28 	.word	0x20000a28

0800b114 <malloc>:
 800b114:	4b02      	ldr	r3, [pc, #8]	@ (800b120 <malloc+0xc>)
 800b116:	4601      	mov	r1, r0
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	f000 b825 	b.w	800b168 <_malloc_r>
 800b11e:	bf00      	nop
 800b120:	20000018 	.word	0x20000018

0800b124 <sbrk_aligned>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	4e0f      	ldr	r6, [pc, #60]	@ (800b164 <sbrk_aligned+0x40>)
 800b128:	460c      	mov	r4, r1
 800b12a:	6831      	ldr	r1, [r6, #0]
 800b12c:	4605      	mov	r5, r0
 800b12e:	b911      	cbnz	r1, 800b136 <sbrk_aligned+0x12>
 800b130:	f000 fede 	bl	800bef0 <_sbrk_r>
 800b134:	6030      	str	r0, [r6, #0]
 800b136:	4621      	mov	r1, r4
 800b138:	4628      	mov	r0, r5
 800b13a:	f000 fed9 	bl	800bef0 <_sbrk_r>
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	d103      	bne.n	800b14a <sbrk_aligned+0x26>
 800b142:	f04f 34ff 	mov.w	r4, #4294967295
 800b146:	4620      	mov	r0, r4
 800b148:	bd70      	pop	{r4, r5, r6, pc}
 800b14a:	1cc4      	adds	r4, r0, #3
 800b14c:	f024 0403 	bic.w	r4, r4, #3
 800b150:	42a0      	cmp	r0, r4
 800b152:	d0f8      	beq.n	800b146 <sbrk_aligned+0x22>
 800b154:	1a21      	subs	r1, r4, r0
 800b156:	4628      	mov	r0, r5
 800b158:	f000 feca 	bl	800bef0 <_sbrk_r>
 800b15c:	3001      	adds	r0, #1
 800b15e:	d1f2      	bne.n	800b146 <sbrk_aligned+0x22>
 800b160:	e7ef      	b.n	800b142 <sbrk_aligned+0x1e>
 800b162:	bf00      	nop
 800b164:	20000a24 	.word	0x20000a24

0800b168 <_malloc_r>:
 800b168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b16c:	1ccd      	adds	r5, r1, #3
 800b16e:	f025 0503 	bic.w	r5, r5, #3
 800b172:	3508      	adds	r5, #8
 800b174:	2d0c      	cmp	r5, #12
 800b176:	bf38      	it	cc
 800b178:	250c      	movcc	r5, #12
 800b17a:	2d00      	cmp	r5, #0
 800b17c:	4606      	mov	r6, r0
 800b17e:	db01      	blt.n	800b184 <_malloc_r+0x1c>
 800b180:	42a9      	cmp	r1, r5
 800b182:	d904      	bls.n	800b18e <_malloc_r+0x26>
 800b184:	230c      	movs	r3, #12
 800b186:	6033      	str	r3, [r6, #0]
 800b188:	2000      	movs	r0, #0
 800b18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b264 <_malloc_r+0xfc>
 800b192:	f000 f869 	bl	800b268 <__malloc_lock>
 800b196:	f8d8 3000 	ldr.w	r3, [r8]
 800b19a:	461c      	mov	r4, r3
 800b19c:	bb44      	cbnz	r4, 800b1f0 <_malloc_r+0x88>
 800b19e:	4629      	mov	r1, r5
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff ffbf 	bl	800b124 <sbrk_aligned>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	d158      	bne.n	800b25e <_malloc_r+0xf6>
 800b1ac:	f8d8 4000 	ldr.w	r4, [r8]
 800b1b0:	4627      	mov	r7, r4
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	d143      	bne.n	800b23e <_malloc_r+0xd6>
 800b1b6:	2c00      	cmp	r4, #0
 800b1b8:	d04b      	beq.n	800b252 <_malloc_r+0xea>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	4639      	mov	r1, r7
 800b1be:	4630      	mov	r0, r6
 800b1c0:	eb04 0903 	add.w	r9, r4, r3
 800b1c4:	f000 fe94 	bl	800bef0 <_sbrk_r>
 800b1c8:	4581      	cmp	r9, r0
 800b1ca:	d142      	bne.n	800b252 <_malloc_r+0xea>
 800b1cc:	6821      	ldr	r1, [r4, #0]
 800b1ce:	1a6d      	subs	r5, r5, r1
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f7ff ffa6 	bl	800b124 <sbrk_aligned>
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d03a      	beq.n	800b252 <_malloc_r+0xea>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	442b      	add	r3, r5
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	bb62      	cbnz	r2, 800b244 <_malloc_r+0xdc>
 800b1ea:	f8c8 7000 	str.w	r7, [r8]
 800b1ee:	e00f      	b.n	800b210 <_malloc_r+0xa8>
 800b1f0:	6822      	ldr	r2, [r4, #0]
 800b1f2:	1b52      	subs	r2, r2, r5
 800b1f4:	d420      	bmi.n	800b238 <_malloc_r+0xd0>
 800b1f6:	2a0b      	cmp	r2, #11
 800b1f8:	d917      	bls.n	800b22a <_malloc_r+0xc2>
 800b1fa:	1961      	adds	r1, r4, r5
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	6025      	str	r5, [r4, #0]
 800b200:	bf18      	it	ne
 800b202:	6059      	strne	r1, [r3, #4]
 800b204:	6863      	ldr	r3, [r4, #4]
 800b206:	bf08      	it	eq
 800b208:	f8c8 1000 	streq.w	r1, [r8]
 800b20c:	5162      	str	r2, [r4, r5]
 800b20e:	604b      	str	r3, [r1, #4]
 800b210:	4630      	mov	r0, r6
 800b212:	f000 f82f 	bl	800b274 <__malloc_unlock>
 800b216:	f104 000b 	add.w	r0, r4, #11
 800b21a:	1d23      	adds	r3, r4, #4
 800b21c:	f020 0007 	bic.w	r0, r0, #7
 800b220:	1ac2      	subs	r2, r0, r3
 800b222:	bf1c      	itt	ne
 800b224:	1a1b      	subne	r3, r3, r0
 800b226:	50a3      	strne	r3, [r4, r2]
 800b228:	e7af      	b.n	800b18a <_malloc_r+0x22>
 800b22a:	6862      	ldr	r2, [r4, #4]
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	bf0c      	ite	eq
 800b230:	f8c8 2000 	streq.w	r2, [r8]
 800b234:	605a      	strne	r2, [r3, #4]
 800b236:	e7eb      	b.n	800b210 <_malloc_r+0xa8>
 800b238:	4623      	mov	r3, r4
 800b23a:	6864      	ldr	r4, [r4, #4]
 800b23c:	e7ae      	b.n	800b19c <_malloc_r+0x34>
 800b23e:	463c      	mov	r4, r7
 800b240:	687f      	ldr	r7, [r7, #4]
 800b242:	e7b6      	b.n	800b1b2 <_malloc_r+0x4a>
 800b244:	461a      	mov	r2, r3
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	42a3      	cmp	r3, r4
 800b24a:	d1fb      	bne.n	800b244 <_malloc_r+0xdc>
 800b24c:	2300      	movs	r3, #0
 800b24e:	6053      	str	r3, [r2, #4]
 800b250:	e7de      	b.n	800b210 <_malloc_r+0xa8>
 800b252:	230c      	movs	r3, #12
 800b254:	6033      	str	r3, [r6, #0]
 800b256:	4630      	mov	r0, r6
 800b258:	f000 f80c 	bl	800b274 <__malloc_unlock>
 800b25c:	e794      	b.n	800b188 <_malloc_r+0x20>
 800b25e:	6005      	str	r5, [r0, #0]
 800b260:	e7d6      	b.n	800b210 <_malloc_r+0xa8>
 800b262:	bf00      	nop
 800b264:	20000a28 	.word	0x20000a28

0800b268 <__malloc_lock>:
 800b268:	4801      	ldr	r0, [pc, #4]	@ (800b270 <__malloc_lock+0x8>)
 800b26a:	f7ff b8ba 	b.w	800a3e2 <__retarget_lock_acquire_recursive>
 800b26e:	bf00      	nop
 800b270:	20000a20 	.word	0x20000a20

0800b274 <__malloc_unlock>:
 800b274:	4801      	ldr	r0, [pc, #4]	@ (800b27c <__malloc_unlock+0x8>)
 800b276:	f7ff b8b5 	b.w	800a3e4 <__retarget_lock_release_recursive>
 800b27a:	bf00      	nop
 800b27c:	20000a20 	.word	0x20000a20

0800b280 <_Balloc>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	69c6      	ldr	r6, [r0, #28]
 800b284:	4604      	mov	r4, r0
 800b286:	460d      	mov	r5, r1
 800b288:	b976      	cbnz	r6, 800b2a8 <_Balloc+0x28>
 800b28a:	2010      	movs	r0, #16
 800b28c:	f7ff ff42 	bl	800b114 <malloc>
 800b290:	4602      	mov	r2, r0
 800b292:	61e0      	str	r0, [r4, #28]
 800b294:	b920      	cbnz	r0, 800b2a0 <_Balloc+0x20>
 800b296:	4b18      	ldr	r3, [pc, #96]	@ (800b2f8 <_Balloc+0x78>)
 800b298:	4818      	ldr	r0, [pc, #96]	@ (800b2fc <_Balloc+0x7c>)
 800b29a:	216b      	movs	r1, #107	@ 0x6b
 800b29c:	f000 fe46 	bl	800bf2c <__assert_func>
 800b2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2a4:	6006      	str	r6, [r0, #0]
 800b2a6:	60c6      	str	r6, [r0, #12]
 800b2a8:	69e6      	ldr	r6, [r4, #28]
 800b2aa:	68f3      	ldr	r3, [r6, #12]
 800b2ac:	b183      	cbz	r3, 800b2d0 <_Balloc+0x50>
 800b2ae:	69e3      	ldr	r3, [r4, #28]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2b6:	b9b8      	cbnz	r0, 800b2e8 <_Balloc+0x68>
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	fa01 f605 	lsl.w	r6, r1, r5
 800b2be:	1d72      	adds	r2, r6, #5
 800b2c0:	0092      	lsls	r2, r2, #2
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fe50 	bl	800bf68 <_calloc_r>
 800b2c8:	b160      	cbz	r0, 800b2e4 <_Balloc+0x64>
 800b2ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ce:	e00e      	b.n	800b2ee <_Balloc+0x6e>
 800b2d0:	2221      	movs	r2, #33	@ 0x21
 800b2d2:	2104      	movs	r1, #4
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f000 fe47 	bl	800bf68 <_calloc_r>
 800b2da:	69e3      	ldr	r3, [r4, #28]
 800b2dc:	60f0      	str	r0, [r6, #12]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e4      	bne.n	800b2ae <_Balloc+0x2e>
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	6802      	ldr	r2, [r0, #0]
 800b2ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2f4:	e7f7      	b.n	800b2e6 <_Balloc+0x66>
 800b2f6:	bf00      	nop
 800b2f8:	0800c29d 	.word	0x0800c29d
 800b2fc:	0800c31d 	.word	0x0800c31d

0800b300 <_Bfree>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	69c6      	ldr	r6, [r0, #28]
 800b304:	4605      	mov	r5, r0
 800b306:	460c      	mov	r4, r1
 800b308:	b976      	cbnz	r6, 800b328 <_Bfree+0x28>
 800b30a:	2010      	movs	r0, #16
 800b30c:	f7ff ff02 	bl	800b114 <malloc>
 800b310:	4602      	mov	r2, r0
 800b312:	61e8      	str	r0, [r5, #28]
 800b314:	b920      	cbnz	r0, 800b320 <_Bfree+0x20>
 800b316:	4b09      	ldr	r3, [pc, #36]	@ (800b33c <_Bfree+0x3c>)
 800b318:	4809      	ldr	r0, [pc, #36]	@ (800b340 <_Bfree+0x40>)
 800b31a:	218f      	movs	r1, #143	@ 0x8f
 800b31c:	f000 fe06 	bl	800bf2c <__assert_func>
 800b320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b324:	6006      	str	r6, [r0, #0]
 800b326:	60c6      	str	r6, [r0, #12]
 800b328:	b13c      	cbz	r4, 800b33a <_Bfree+0x3a>
 800b32a:	69eb      	ldr	r3, [r5, #28]
 800b32c:	6862      	ldr	r2, [r4, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b334:	6021      	str	r1, [r4, #0]
 800b336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b33a:	bd70      	pop	{r4, r5, r6, pc}
 800b33c:	0800c29d 	.word	0x0800c29d
 800b340:	0800c31d 	.word	0x0800c31d

0800b344 <__multadd>:
 800b344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b348:	690d      	ldr	r5, [r1, #16]
 800b34a:	4607      	mov	r7, r0
 800b34c:	460c      	mov	r4, r1
 800b34e:	461e      	mov	r6, r3
 800b350:	f101 0c14 	add.w	ip, r1, #20
 800b354:	2000      	movs	r0, #0
 800b356:	f8dc 3000 	ldr.w	r3, [ip]
 800b35a:	b299      	uxth	r1, r3
 800b35c:	fb02 6101 	mla	r1, r2, r1, r6
 800b360:	0c1e      	lsrs	r6, r3, #16
 800b362:	0c0b      	lsrs	r3, r1, #16
 800b364:	fb02 3306 	mla	r3, r2, r6, r3
 800b368:	b289      	uxth	r1, r1
 800b36a:	3001      	adds	r0, #1
 800b36c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b370:	4285      	cmp	r5, r0
 800b372:	f84c 1b04 	str.w	r1, [ip], #4
 800b376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b37a:	dcec      	bgt.n	800b356 <__multadd+0x12>
 800b37c:	b30e      	cbz	r6, 800b3c2 <__multadd+0x7e>
 800b37e:	68a3      	ldr	r3, [r4, #8]
 800b380:	42ab      	cmp	r3, r5
 800b382:	dc19      	bgt.n	800b3b8 <__multadd+0x74>
 800b384:	6861      	ldr	r1, [r4, #4]
 800b386:	4638      	mov	r0, r7
 800b388:	3101      	adds	r1, #1
 800b38a:	f7ff ff79 	bl	800b280 <_Balloc>
 800b38e:	4680      	mov	r8, r0
 800b390:	b928      	cbnz	r0, 800b39e <__multadd+0x5a>
 800b392:	4602      	mov	r2, r0
 800b394:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c8 <__multadd+0x84>)
 800b396:	480d      	ldr	r0, [pc, #52]	@ (800b3cc <__multadd+0x88>)
 800b398:	21ba      	movs	r1, #186	@ 0xba
 800b39a:	f000 fdc7 	bl	800bf2c <__assert_func>
 800b39e:	6922      	ldr	r2, [r4, #16]
 800b3a0:	3202      	adds	r2, #2
 800b3a2:	f104 010c 	add.w	r1, r4, #12
 800b3a6:	0092      	lsls	r2, r2, #2
 800b3a8:	300c      	adds	r0, #12
 800b3aa:	f000 fdb1 	bl	800bf10 <memcpy>
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	4638      	mov	r0, r7
 800b3b2:	f7ff ffa5 	bl	800b300 <_Bfree>
 800b3b6:	4644      	mov	r4, r8
 800b3b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3bc:	3501      	adds	r5, #1
 800b3be:	615e      	str	r6, [r3, #20]
 800b3c0:	6125      	str	r5, [r4, #16]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c8:	0800c30c 	.word	0x0800c30c
 800b3cc:	0800c31d 	.word	0x0800c31d

0800b3d0 <__hi0bits>:
 800b3d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	bf36      	itet	cc
 800b3d8:	0403      	lslcc	r3, r0, #16
 800b3da:	2000      	movcs	r0, #0
 800b3dc:	2010      	movcc	r0, #16
 800b3de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3e2:	bf3c      	itt	cc
 800b3e4:	021b      	lslcc	r3, r3, #8
 800b3e6:	3008      	addcc	r0, #8
 800b3e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3ec:	bf3c      	itt	cc
 800b3ee:	011b      	lslcc	r3, r3, #4
 800b3f0:	3004      	addcc	r0, #4
 800b3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f6:	bf3c      	itt	cc
 800b3f8:	009b      	lslcc	r3, r3, #2
 800b3fa:	3002      	addcc	r0, #2
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	db05      	blt.n	800b40c <__hi0bits+0x3c>
 800b400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b404:	f100 0001 	add.w	r0, r0, #1
 800b408:	bf08      	it	eq
 800b40a:	2020      	moveq	r0, #32
 800b40c:	4770      	bx	lr

0800b40e <__lo0bits>:
 800b40e:	6803      	ldr	r3, [r0, #0]
 800b410:	4602      	mov	r2, r0
 800b412:	f013 0007 	ands.w	r0, r3, #7
 800b416:	d00b      	beq.n	800b430 <__lo0bits+0x22>
 800b418:	07d9      	lsls	r1, r3, #31
 800b41a:	d421      	bmi.n	800b460 <__lo0bits+0x52>
 800b41c:	0798      	lsls	r0, r3, #30
 800b41e:	bf49      	itett	mi
 800b420:	085b      	lsrmi	r3, r3, #1
 800b422:	089b      	lsrpl	r3, r3, #2
 800b424:	2001      	movmi	r0, #1
 800b426:	6013      	strmi	r3, [r2, #0]
 800b428:	bf5c      	itt	pl
 800b42a:	6013      	strpl	r3, [r2, #0]
 800b42c:	2002      	movpl	r0, #2
 800b42e:	4770      	bx	lr
 800b430:	b299      	uxth	r1, r3
 800b432:	b909      	cbnz	r1, 800b438 <__lo0bits+0x2a>
 800b434:	0c1b      	lsrs	r3, r3, #16
 800b436:	2010      	movs	r0, #16
 800b438:	b2d9      	uxtb	r1, r3
 800b43a:	b909      	cbnz	r1, 800b440 <__lo0bits+0x32>
 800b43c:	3008      	adds	r0, #8
 800b43e:	0a1b      	lsrs	r3, r3, #8
 800b440:	0719      	lsls	r1, r3, #28
 800b442:	bf04      	itt	eq
 800b444:	091b      	lsreq	r3, r3, #4
 800b446:	3004      	addeq	r0, #4
 800b448:	0799      	lsls	r1, r3, #30
 800b44a:	bf04      	itt	eq
 800b44c:	089b      	lsreq	r3, r3, #2
 800b44e:	3002      	addeq	r0, #2
 800b450:	07d9      	lsls	r1, r3, #31
 800b452:	d403      	bmi.n	800b45c <__lo0bits+0x4e>
 800b454:	085b      	lsrs	r3, r3, #1
 800b456:	f100 0001 	add.w	r0, r0, #1
 800b45a:	d003      	beq.n	800b464 <__lo0bits+0x56>
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	4770      	bx	lr
 800b460:	2000      	movs	r0, #0
 800b462:	4770      	bx	lr
 800b464:	2020      	movs	r0, #32
 800b466:	4770      	bx	lr

0800b468 <__i2b>:
 800b468:	b510      	push	{r4, lr}
 800b46a:	460c      	mov	r4, r1
 800b46c:	2101      	movs	r1, #1
 800b46e:	f7ff ff07 	bl	800b280 <_Balloc>
 800b472:	4602      	mov	r2, r0
 800b474:	b928      	cbnz	r0, 800b482 <__i2b+0x1a>
 800b476:	4b05      	ldr	r3, [pc, #20]	@ (800b48c <__i2b+0x24>)
 800b478:	4805      	ldr	r0, [pc, #20]	@ (800b490 <__i2b+0x28>)
 800b47a:	f240 1145 	movw	r1, #325	@ 0x145
 800b47e:	f000 fd55 	bl	800bf2c <__assert_func>
 800b482:	2301      	movs	r3, #1
 800b484:	6144      	str	r4, [r0, #20]
 800b486:	6103      	str	r3, [r0, #16]
 800b488:	bd10      	pop	{r4, pc}
 800b48a:	bf00      	nop
 800b48c:	0800c30c 	.word	0x0800c30c
 800b490:	0800c31d 	.word	0x0800c31d

0800b494 <__multiply>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	4614      	mov	r4, r2
 800b49a:	690a      	ldr	r2, [r1, #16]
 800b49c:	6923      	ldr	r3, [r4, #16]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	bfa8      	it	ge
 800b4a2:	4623      	movge	r3, r4
 800b4a4:	460f      	mov	r7, r1
 800b4a6:	bfa4      	itt	ge
 800b4a8:	460c      	movge	r4, r1
 800b4aa:	461f      	movge	r7, r3
 800b4ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b4b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b4b4:	68a3      	ldr	r3, [r4, #8]
 800b4b6:	6861      	ldr	r1, [r4, #4]
 800b4b8:	eb0a 0609 	add.w	r6, sl, r9
 800b4bc:	42b3      	cmp	r3, r6
 800b4be:	b085      	sub	sp, #20
 800b4c0:	bfb8      	it	lt
 800b4c2:	3101      	addlt	r1, #1
 800b4c4:	f7ff fedc 	bl	800b280 <_Balloc>
 800b4c8:	b930      	cbnz	r0, 800b4d8 <__multiply+0x44>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	4b44      	ldr	r3, [pc, #272]	@ (800b5e0 <__multiply+0x14c>)
 800b4ce:	4845      	ldr	r0, [pc, #276]	@ (800b5e4 <__multiply+0x150>)
 800b4d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b4d4:	f000 fd2a 	bl	800bf2c <__assert_func>
 800b4d8:	f100 0514 	add.w	r5, r0, #20
 800b4dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4543      	cmp	r3, r8
 800b4e6:	d321      	bcc.n	800b52c <__multiply+0x98>
 800b4e8:	f107 0114 	add.w	r1, r7, #20
 800b4ec:	f104 0214 	add.w	r2, r4, #20
 800b4f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b4f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b4f8:	9302      	str	r3, [sp, #8]
 800b4fa:	1b13      	subs	r3, r2, r4
 800b4fc:	3b15      	subs	r3, #21
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	3304      	adds	r3, #4
 800b504:	f104 0715 	add.w	r7, r4, #21
 800b508:	42ba      	cmp	r2, r7
 800b50a:	bf38      	it	cc
 800b50c:	2304      	movcc	r3, #4
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	9b02      	ldr	r3, [sp, #8]
 800b512:	9103      	str	r1, [sp, #12]
 800b514:	428b      	cmp	r3, r1
 800b516:	d80c      	bhi.n	800b532 <__multiply+0x9e>
 800b518:	2e00      	cmp	r6, #0
 800b51a:	dd03      	ble.n	800b524 <__multiply+0x90>
 800b51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b520:	2b00      	cmp	r3, #0
 800b522:	d05b      	beq.n	800b5dc <__multiply+0x148>
 800b524:	6106      	str	r6, [r0, #16]
 800b526:	b005      	add	sp, #20
 800b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52c:	f843 2b04 	str.w	r2, [r3], #4
 800b530:	e7d8      	b.n	800b4e4 <__multiply+0x50>
 800b532:	f8b1 a000 	ldrh.w	sl, [r1]
 800b536:	f1ba 0f00 	cmp.w	sl, #0
 800b53a:	d024      	beq.n	800b586 <__multiply+0xf2>
 800b53c:	f104 0e14 	add.w	lr, r4, #20
 800b540:	46a9      	mov	r9, r5
 800b542:	f04f 0c00 	mov.w	ip, #0
 800b546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b54a:	f8d9 3000 	ldr.w	r3, [r9]
 800b54e:	fa1f fb87 	uxth.w	fp, r7
 800b552:	b29b      	uxth	r3, r3
 800b554:	fb0a 330b 	mla	r3, sl, fp, r3
 800b558:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b55c:	f8d9 7000 	ldr.w	r7, [r9]
 800b560:	4463      	add	r3, ip
 800b562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b566:	fb0a c70b 	mla	r7, sl, fp, ip
 800b56a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b56e:	b29b      	uxth	r3, r3
 800b570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b574:	4572      	cmp	r2, lr
 800b576:	f849 3b04 	str.w	r3, [r9], #4
 800b57a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b57e:	d8e2      	bhi.n	800b546 <__multiply+0xb2>
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	f845 c003 	str.w	ip, [r5, r3]
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b58c:	3104      	adds	r1, #4
 800b58e:	f1b9 0f00 	cmp.w	r9, #0
 800b592:	d021      	beq.n	800b5d8 <__multiply+0x144>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	f104 0c14 	add.w	ip, r4, #20
 800b59a:	46ae      	mov	lr, r5
 800b59c:	f04f 0a00 	mov.w	sl, #0
 800b5a0:	f8bc b000 	ldrh.w	fp, [ip]
 800b5a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b5a8:	fb09 770b 	mla	r7, r9, fp, r7
 800b5ac:	4457      	add	r7, sl
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b5b4:	f84e 3b04 	str.w	r3, [lr], #4
 800b5b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5c0:	f8be 3000 	ldrh.w	r3, [lr]
 800b5c4:	fb09 330a 	mla	r3, r9, sl, r3
 800b5c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b5cc:	4562      	cmp	r2, ip
 800b5ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5d2:	d8e5      	bhi.n	800b5a0 <__multiply+0x10c>
 800b5d4:	9f01      	ldr	r7, [sp, #4]
 800b5d6:	51eb      	str	r3, [r5, r7]
 800b5d8:	3504      	adds	r5, #4
 800b5da:	e799      	b.n	800b510 <__multiply+0x7c>
 800b5dc:	3e01      	subs	r6, #1
 800b5de:	e79b      	b.n	800b518 <__multiply+0x84>
 800b5e0:	0800c30c 	.word	0x0800c30c
 800b5e4:	0800c31d 	.word	0x0800c31d

0800b5e8 <__pow5mult>:
 800b5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ec:	4615      	mov	r5, r2
 800b5ee:	f012 0203 	ands.w	r2, r2, #3
 800b5f2:	4607      	mov	r7, r0
 800b5f4:	460e      	mov	r6, r1
 800b5f6:	d007      	beq.n	800b608 <__pow5mult+0x20>
 800b5f8:	4c25      	ldr	r4, [pc, #148]	@ (800b690 <__pow5mult+0xa8>)
 800b5fa:	3a01      	subs	r2, #1
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b602:	f7ff fe9f 	bl	800b344 <__multadd>
 800b606:	4606      	mov	r6, r0
 800b608:	10ad      	asrs	r5, r5, #2
 800b60a:	d03d      	beq.n	800b688 <__pow5mult+0xa0>
 800b60c:	69fc      	ldr	r4, [r7, #28]
 800b60e:	b97c      	cbnz	r4, 800b630 <__pow5mult+0x48>
 800b610:	2010      	movs	r0, #16
 800b612:	f7ff fd7f 	bl	800b114 <malloc>
 800b616:	4602      	mov	r2, r0
 800b618:	61f8      	str	r0, [r7, #28]
 800b61a:	b928      	cbnz	r0, 800b628 <__pow5mult+0x40>
 800b61c:	4b1d      	ldr	r3, [pc, #116]	@ (800b694 <__pow5mult+0xac>)
 800b61e:	481e      	ldr	r0, [pc, #120]	@ (800b698 <__pow5mult+0xb0>)
 800b620:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b624:	f000 fc82 	bl	800bf2c <__assert_func>
 800b628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b62c:	6004      	str	r4, [r0, #0]
 800b62e:	60c4      	str	r4, [r0, #12]
 800b630:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b638:	b94c      	cbnz	r4, 800b64e <__pow5mult+0x66>
 800b63a:	f240 2171 	movw	r1, #625	@ 0x271
 800b63e:	4638      	mov	r0, r7
 800b640:	f7ff ff12 	bl	800b468 <__i2b>
 800b644:	2300      	movs	r3, #0
 800b646:	f8c8 0008 	str.w	r0, [r8, #8]
 800b64a:	4604      	mov	r4, r0
 800b64c:	6003      	str	r3, [r0, #0]
 800b64e:	f04f 0900 	mov.w	r9, #0
 800b652:	07eb      	lsls	r3, r5, #31
 800b654:	d50a      	bpl.n	800b66c <__pow5mult+0x84>
 800b656:	4631      	mov	r1, r6
 800b658:	4622      	mov	r2, r4
 800b65a:	4638      	mov	r0, r7
 800b65c:	f7ff ff1a 	bl	800b494 <__multiply>
 800b660:	4631      	mov	r1, r6
 800b662:	4680      	mov	r8, r0
 800b664:	4638      	mov	r0, r7
 800b666:	f7ff fe4b 	bl	800b300 <_Bfree>
 800b66a:	4646      	mov	r6, r8
 800b66c:	106d      	asrs	r5, r5, #1
 800b66e:	d00b      	beq.n	800b688 <__pow5mult+0xa0>
 800b670:	6820      	ldr	r0, [r4, #0]
 800b672:	b938      	cbnz	r0, 800b684 <__pow5mult+0x9c>
 800b674:	4622      	mov	r2, r4
 800b676:	4621      	mov	r1, r4
 800b678:	4638      	mov	r0, r7
 800b67a:	f7ff ff0b 	bl	800b494 <__multiply>
 800b67e:	6020      	str	r0, [r4, #0]
 800b680:	f8c0 9000 	str.w	r9, [r0]
 800b684:	4604      	mov	r4, r0
 800b686:	e7e4      	b.n	800b652 <__pow5mult+0x6a>
 800b688:	4630      	mov	r0, r6
 800b68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68e:	bf00      	nop
 800b690:	0800c378 	.word	0x0800c378
 800b694:	0800c29d 	.word	0x0800c29d
 800b698:	0800c31d 	.word	0x0800c31d

0800b69c <__lshift>:
 800b69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	6849      	ldr	r1, [r1, #4]
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	4691      	mov	r9, r2
 800b6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6b4:	f108 0601 	add.w	r6, r8, #1
 800b6b8:	42b3      	cmp	r3, r6
 800b6ba:	db0b      	blt.n	800b6d4 <__lshift+0x38>
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7ff fddf 	bl	800b280 <_Balloc>
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	b948      	cbnz	r0, 800b6da <__lshift+0x3e>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	4b28      	ldr	r3, [pc, #160]	@ (800b76c <__lshift+0xd0>)
 800b6ca:	4829      	ldr	r0, [pc, #164]	@ (800b770 <__lshift+0xd4>)
 800b6cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6d0:	f000 fc2c 	bl	800bf2c <__assert_func>
 800b6d4:	3101      	adds	r1, #1
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	e7ee      	b.n	800b6b8 <__lshift+0x1c>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f100 0114 	add.w	r1, r0, #20
 800b6e0:	f100 0210 	add.w	r2, r0, #16
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	4553      	cmp	r3, sl
 800b6e8:	db33      	blt.n	800b752 <__lshift+0xb6>
 800b6ea:	6920      	ldr	r0, [r4, #16]
 800b6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f0:	f104 0314 	add.w	r3, r4, #20
 800b6f4:	f019 091f 	ands.w	r9, r9, #31
 800b6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b700:	d02b      	beq.n	800b75a <__lshift+0xbe>
 800b702:	f1c9 0e20 	rsb	lr, r9, #32
 800b706:	468a      	mov	sl, r1
 800b708:	2200      	movs	r2, #0
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	fa00 f009 	lsl.w	r0, r0, r9
 800b710:	4310      	orrs	r0, r2
 800b712:	f84a 0b04 	str.w	r0, [sl], #4
 800b716:	f853 2b04 	ldr.w	r2, [r3], #4
 800b71a:	459c      	cmp	ip, r3
 800b71c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b720:	d8f3      	bhi.n	800b70a <__lshift+0x6e>
 800b722:	ebac 0304 	sub.w	r3, ip, r4
 800b726:	3b15      	subs	r3, #21
 800b728:	f023 0303 	bic.w	r3, r3, #3
 800b72c:	3304      	adds	r3, #4
 800b72e:	f104 0015 	add.w	r0, r4, #21
 800b732:	4584      	cmp	ip, r0
 800b734:	bf38      	it	cc
 800b736:	2304      	movcc	r3, #4
 800b738:	50ca      	str	r2, [r1, r3]
 800b73a:	b10a      	cbz	r2, 800b740 <__lshift+0xa4>
 800b73c:	f108 0602 	add.w	r6, r8, #2
 800b740:	3e01      	subs	r6, #1
 800b742:	4638      	mov	r0, r7
 800b744:	612e      	str	r6, [r5, #16]
 800b746:	4621      	mov	r1, r4
 800b748:	f7ff fdda 	bl	800b300 <_Bfree>
 800b74c:	4628      	mov	r0, r5
 800b74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b752:	f842 0f04 	str.w	r0, [r2, #4]!
 800b756:	3301      	adds	r3, #1
 800b758:	e7c5      	b.n	800b6e6 <__lshift+0x4a>
 800b75a:	3904      	subs	r1, #4
 800b75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b760:	f841 2f04 	str.w	r2, [r1, #4]!
 800b764:	459c      	cmp	ip, r3
 800b766:	d8f9      	bhi.n	800b75c <__lshift+0xc0>
 800b768:	e7ea      	b.n	800b740 <__lshift+0xa4>
 800b76a:	bf00      	nop
 800b76c:	0800c30c 	.word	0x0800c30c
 800b770:	0800c31d 	.word	0x0800c31d

0800b774 <__mcmp>:
 800b774:	690a      	ldr	r2, [r1, #16]
 800b776:	4603      	mov	r3, r0
 800b778:	6900      	ldr	r0, [r0, #16]
 800b77a:	1a80      	subs	r0, r0, r2
 800b77c:	b530      	push	{r4, r5, lr}
 800b77e:	d10e      	bne.n	800b79e <__mcmp+0x2a>
 800b780:	3314      	adds	r3, #20
 800b782:	3114      	adds	r1, #20
 800b784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b78c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b794:	4295      	cmp	r5, r2
 800b796:	d003      	beq.n	800b7a0 <__mcmp+0x2c>
 800b798:	d205      	bcs.n	800b7a6 <__mcmp+0x32>
 800b79a:	f04f 30ff 	mov.w	r0, #4294967295
 800b79e:	bd30      	pop	{r4, r5, pc}
 800b7a0:	42a3      	cmp	r3, r4
 800b7a2:	d3f3      	bcc.n	800b78c <__mcmp+0x18>
 800b7a4:	e7fb      	b.n	800b79e <__mcmp+0x2a>
 800b7a6:	2001      	movs	r0, #1
 800b7a8:	e7f9      	b.n	800b79e <__mcmp+0x2a>
	...

0800b7ac <__mdiff>:
 800b7ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	4689      	mov	r9, r1
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4648      	mov	r0, r9
 800b7b8:	4614      	mov	r4, r2
 800b7ba:	f7ff ffdb 	bl	800b774 <__mcmp>
 800b7be:	1e05      	subs	r5, r0, #0
 800b7c0:	d112      	bne.n	800b7e8 <__mdiff+0x3c>
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7ff fd5b 	bl	800b280 <_Balloc>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	b928      	cbnz	r0, 800b7da <__mdiff+0x2e>
 800b7ce:	4b3f      	ldr	r3, [pc, #252]	@ (800b8cc <__mdiff+0x120>)
 800b7d0:	f240 2137 	movw	r1, #567	@ 0x237
 800b7d4:	483e      	ldr	r0, [pc, #248]	@ (800b8d0 <__mdiff+0x124>)
 800b7d6:	f000 fba9 	bl	800bf2c <__assert_func>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	b003      	add	sp, #12
 800b7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e8:	bfbc      	itt	lt
 800b7ea:	464b      	movlt	r3, r9
 800b7ec:	46a1      	movlt	r9, r4
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7f4:	bfba      	itte	lt
 800b7f6:	461c      	movlt	r4, r3
 800b7f8:	2501      	movlt	r5, #1
 800b7fa:	2500      	movge	r5, #0
 800b7fc:	f7ff fd40 	bl	800b280 <_Balloc>
 800b800:	4602      	mov	r2, r0
 800b802:	b918      	cbnz	r0, 800b80c <__mdiff+0x60>
 800b804:	4b31      	ldr	r3, [pc, #196]	@ (800b8cc <__mdiff+0x120>)
 800b806:	f240 2145 	movw	r1, #581	@ 0x245
 800b80a:	e7e3      	b.n	800b7d4 <__mdiff+0x28>
 800b80c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b810:	6926      	ldr	r6, [r4, #16]
 800b812:	60c5      	str	r5, [r0, #12]
 800b814:	f109 0310 	add.w	r3, r9, #16
 800b818:	f109 0514 	add.w	r5, r9, #20
 800b81c:	f104 0e14 	add.w	lr, r4, #20
 800b820:	f100 0b14 	add.w	fp, r0, #20
 800b824:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b828:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	46d9      	mov	r9, fp
 800b830:	f04f 0c00 	mov.w	ip, #0
 800b834:	9b01      	ldr	r3, [sp, #4]
 800b836:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b83a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	fa1f f38a 	uxth.w	r3, sl
 800b844:	4619      	mov	r1, r3
 800b846:	b283      	uxth	r3, r0
 800b848:	1acb      	subs	r3, r1, r3
 800b84a:	0c00      	lsrs	r0, r0, #16
 800b84c:	4463      	add	r3, ip
 800b84e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b852:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b856:	b29b      	uxth	r3, r3
 800b858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b85c:	4576      	cmp	r6, lr
 800b85e:	f849 3b04 	str.w	r3, [r9], #4
 800b862:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b866:	d8e5      	bhi.n	800b834 <__mdiff+0x88>
 800b868:	1b33      	subs	r3, r6, r4
 800b86a:	3b15      	subs	r3, #21
 800b86c:	f023 0303 	bic.w	r3, r3, #3
 800b870:	3415      	adds	r4, #21
 800b872:	3304      	adds	r3, #4
 800b874:	42a6      	cmp	r6, r4
 800b876:	bf38      	it	cc
 800b878:	2304      	movcc	r3, #4
 800b87a:	441d      	add	r5, r3
 800b87c:	445b      	add	r3, fp
 800b87e:	461e      	mov	r6, r3
 800b880:	462c      	mov	r4, r5
 800b882:	4544      	cmp	r4, r8
 800b884:	d30e      	bcc.n	800b8a4 <__mdiff+0xf8>
 800b886:	f108 0103 	add.w	r1, r8, #3
 800b88a:	1b49      	subs	r1, r1, r5
 800b88c:	f021 0103 	bic.w	r1, r1, #3
 800b890:	3d03      	subs	r5, #3
 800b892:	45a8      	cmp	r8, r5
 800b894:	bf38      	it	cc
 800b896:	2100      	movcc	r1, #0
 800b898:	440b      	add	r3, r1
 800b89a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b89e:	b191      	cbz	r1, 800b8c6 <__mdiff+0x11a>
 800b8a0:	6117      	str	r7, [r2, #16]
 800b8a2:	e79d      	b.n	800b7e0 <__mdiff+0x34>
 800b8a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b8a8:	46e6      	mov	lr, ip
 800b8aa:	0c08      	lsrs	r0, r1, #16
 800b8ac:	fa1c fc81 	uxtah	ip, ip, r1
 800b8b0:	4471      	add	r1, lr
 800b8b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b8b6:	b289      	uxth	r1, r1
 800b8b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8bc:	f846 1b04 	str.w	r1, [r6], #4
 800b8c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8c4:	e7dd      	b.n	800b882 <__mdiff+0xd6>
 800b8c6:	3f01      	subs	r7, #1
 800b8c8:	e7e7      	b.n	800b89a <__mdiff+0xee>
 800b8ca:	bf00      	nop
 800b8cc:	0800c30c 	.word	0x0800c30c
 800b8d0:	0800c31d 	.word	0x0800c31d

0800b8d4 <__d2b>:
 800b8d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8d8:	460f      	mov	r7, r1
 800b8da:	2101      	movs	r1, #1
 800b8dc:	ec59 8b10 	vmov	r8, r9, d0
 800b8e0:	4616      	mov	r6, r2
 800b8e2:	f7ff fccd 	bl	800b280 <_Balloc>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	b930      	cbnz	r0, 800b8f8 <__d2b+0x24>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	4b23      	ldr	r3, [pc, #140]	@ (800b97c <__d2b+0xa8>)
 800b8ee:	4824      	ldr	r0, [pc, #144]	@ (800b980 <__d2b+0xac>)
 800b8f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8f4:	f000 fb1a 	bl	800bf2c <__assert_func>
 800b8f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b900:	b10d      	cbz	r5, 800b906 <__d2b+0x32>
 800b902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	f1b8 0300 	subs.w	r3, r8, #0
 800b90c:	d023      	beq.n	800b956 <__d2b+0x82>
 800b90e:	4668      	mov	r0, sp
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	f7ff fd7c 	bl	800b40e <__lo0bits>
 800b916:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b91a:	b1d0      	cbz	r0, 800b952 <__d2b+0x7e>
 800b91c:	f1c0 0320 	rsb	r3, r0, #32
 800b920:	fa02 f303 	lsl.w	r3, r2, r3
 800b924:	430b      	orrs	r3, r1
 800b926:	40c2      	lsrs	r2, r0
 800b928:	6163      	str	r3, [r4, #20]
 800b92a:	9201      	str	r2, [sp, #4]
 800b92c:	9b01      	ldr	r3, [sp, #4]
 800b92e:	61a3      	str	r3, [r4, #24]
 800b930:	2b00      	cmp	r3, #0
 800b932:	bf0c      	ite	eq
 800b934:	2201      	moveq	r2, #1
 800b936:	2202      	movne	r2, #2
 800b938:	6122      	str	r2, [r4, #16]
 800b93a:	b1a5      	cbz	r5, 800b966 <__d2b+0x92>
 800b93c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b940:	4405      	add	r5, r0
 800b942:	603d      	str	r5, [r7, #0]
 800b944:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b948:	6030      	str	r0, [r6, #0]
 800b94a:	4620      	mov	r0, r4
 800b94c:	b003      	add	sp, #12
 800b94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b952:	6161      	str	r1, [r4, #20]
 800b954:	e7ea      	b.n	800b92c <__d2b+0x58>
 800b956:	a801      	add	r0, sp, #4
 800b958:	f7ff fd59 	bl	800b40e <__lo0bits>
 800b95c:	9b01      	ldr	r3, [sp, #4]
 800b95e:	6163      	str	r3, [r4, #20]
 800b960:	3020      	adds	r0, #32
 800b962:	2201      	movs	r2, #1
 800b964:	e7e8      	b.n	800b938 <__d2b+0x64>
 800b966:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b96a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b96e:	6038      	str	r0, [r7, #0]
 800b970:	6918      	ldr	r0, [r3, #16]
 800b972:	f7ff fd2d 	bl	800b3d0 <__hi0bits>
 800b976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b97a:	e7e5      	b.n	800b948 <__d2b+0x74>
 800b97c:	0800c30c 	.word	0x0800c30c
 800b980:	0800c31d 	.word	0x0800c31d

0800b984 <__sfputc_r>:
 800b984:	6893      	ldr	r3, [r2, #8]
 800b986:	3b01      	subs	r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	b410      	push	{r4}
 800b98c:	6093      	str	r3, [r2, #8]
 800b98e:	da08      	bge.n	800b9a2 <__sfputc_r+0x1e>
 800b990:	6994      	ldr	r4, [r2, #24]
 800b992:	42a3      	cmp	r3, r4
 800b994:	db01      	blt.n	800b99a <__sfputc_r+0x16>
 800b996:	290a      	cmp	r1, #10
 800b998:	d103      	bne.n	800b9a2 <__sfputc_r+0x1e>
 800b99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b99e:	f000 ba13 	b.w	800bdc8 <__swbuf_r>
 800b9a2:	6813      	ldr	r3, [r2, #0]
 800b9a4:	1c58      	adds	r0, r3, #1
 800b9a6:	6010      	str	r0, [r2, #0]
 800b9a8:	7019      	strb	r1, [r3, #0]
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <__sfputs_r>:
 800b9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	460f      	mov	r7, r1
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	18d5      	adds	r5, r2, r3
 800b9bc:	42ac      	cmp	r4, r5
 800b9be:	d101      	bne.n	800b9c4 <__sfputs_r+0x12>
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	e007      	b.n	800b9d4 <__sfputs_r+0x22>
 800b9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c8:	463a      	mov	r2, r7
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7ff ffda 	bl	800b984 <__sfputc_r>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d1f3      	bne.n	800b9bc <__sfputs_r+0xa>
 800b9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9d8 <_vfiprintf_r>:
 800b9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	460d      	mov	r5, r1
 800b9de:	b09d      	sub	sp, #116	@ 0x74
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	4698      	mov	r8, r3
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	b118      	cbz	r0, 800b9f0 <_vfiprintf_r+0x18>
 800b9e8:	6a03      	ldr	r3, [r0, #32]
 800b9ea:	b90b      	cbnz	r3, 800b9f0 <_vfiprintf_r+0x18>
 800b9ec:	f7fe fbe8 	bl	800a1c0 <__sinit>
 800b9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9f2:	07d9      	lsls	r1, r3, #31
 800b9f4:	d405      	bmi.n	800ba02 <_vfiprintf_r+0x2a>
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	059a      	lsls	r2, r3, #22
 800b9fa:	d402      	bmi.n	800ba02 <_vfiprintf_r+0x2a>
 800b9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9fe:	f7fe fcf0 	bl	800a3e2 <__retarget_lock_acquire_recursive>
 800ba02:	89ab      	ldrh	r3, [r5, #12]
 800ba04:	071b      	lsls	r3, r3, #28
 800ba06:	d501      	bpl.n	800ba0c <_vfiprintf_r+0x34>
 800ba08:	692b      	ldr	r3, [r5, #16]
 800ba0a:	b99b      	cbnz	r3, 800ba34 <_vfiprintf_r+0x5c>
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f000 fa18 	bl	800be44 <__swsetup_r>
 800ba14:	b170      	cbz	r0, 800ba34 <_vfiprintf_r+0x5c>
 800ba16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba18:	07dc      	lsls	r4, r3, #31
 800ba1a:	d504      	bpl.n	800ba26 <_vfiprintf_r+0x4e>
 800ba1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba20:	b01d      	add	sp, #116	@ 0x74
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	89ab      	ldrh	r3, [r5, #12]
 800ba28:	0598      	lsls	r0, r3, #22
 800ba2a:	d4f7      	bmi.n	800ba1c <_vfiprintf_r+0x44>
 800ba2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba2e:	f7fe fcd9 	bl	800a3e4 <__retarget_lock_release_recursive>
 800ba32:	e7f3      	b.n	800ba1c <_vfiprintf_r+0x44>
 800ba34:	2300      	movs	r3, #0
 800ba36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba38:	2320      	movs	r3, #32
 800ba3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba42:	2330      	movs	r3, #48	@ 0x30
 800ba44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bbf4 <_vfiprintf_r+0x21c>
 800ba48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba4c:	f04f 0901 	mov.w	r9, #1
 800ba50:	4623      	mov	r3, r4
 800ba52:	469a      	mov	sl, r3
 800ba54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba58:	b10a      	cbz	r2, 800ba5e <_vfiprintf_r+0x86>
 800ba5a:	2a25      	cmp	r2, #37	@ 0x25
 800ba5c:	d1f9      	bne.n	800ba52 <_vfiprintf_r+0x7a>
 800ba5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba62:	d00b      	beq.n	800ba7c <_vfiprintf_r+0xa4>
 800ba64:	465b      	mov	r3, fp
 800ba66:	4622      	mov	r2, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ffa1 	bl	800b9b2 <__sfputs_r>
 800ba70:	3001      	adds	r0, #1
 800ba72:	f000 80a7 	beq.w	800bbc4 <_vfiprintf_r+0x1ec>
 800ba76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba78:	445a      	add	r2, fp
 800ba7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 809f 	beq.w	800bbc4 <_vfiprintf_r+0x1ec>
 800ba86:	2300      	movs	r3, #0
 800ba88:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba90:	f10a 0a01 	add.w	sl, sl, #1
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	9307      	str	r3, [sp, #28]
 800ba98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba9e:	4654      	mov	r4, sl
 800baa0:	2205      	movs	r2, #5
 800baa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa6:	4853      	ldr	r0, [pc, #332]	@ (800bbf4 <_vfiprintf_r+0x21c>)
 800baa8:	f7f4 fbaa 	bl	8000200 <memchr>
 800baac:	9a04      	ldr	r2, [sp, #16]
 800baae:	b9d8      	cbnz	r0, 800bae8 <_vfiprintf_r+0x110>
 800bab0:	06d1      	lsls	r1, r2, #27
 800bab2:	bf44      	itt	mi
 800bab4:	2320      	movmi	r3, #32
 800bab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baba:	0713      	lsls	r3, r2, #28
 800babc:	bf44      	itt	mi
 800babe:	232b      	movmi	r3, #43	@ 0x2b
 800bac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bac4:	f89a 3000 	ldrb.w	r3, [sl]
 800bac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800baca:	d015      	beq.n	800baf8 <_vfiprintf_r+0x120>
 800bacc:	9a07      	ldr	r2, [sp, #28]
 800bace:	4654      	mov	r4, sl
 800bad0:	2000      	movs	r0, #0
 800bad2:	f04f 0c0a 	mov.w	ip, #10
 800bad6:	4621      	mov	r1, r4
 800bad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800badc:	3b30      	subs	r3, #48	@ 0x30
 800bade:	2b09      	cmp	r3, #9
 800bae0:	d94b      	bls.n	800bb7a <_vfiprintf_r+0x1a2>
 800bae2:	b1b0      	cbz	r0, 800bb12 <_vfiprintf_r+0x13a>
 800bae4:	9207      	str	r2, [sp, #28]
 800bae6:	e014      	b.n	800bb12 <_vfiprintf_r+0x13a>
 800bae8:	eba0 0308 	sub.w	r3, r0, r8
 800baec:	fa09 f303 	lsl.w	r3, r9, r3
 800baf0:	4313      	orrs	r3, r2
 800baf2:	9304      	str	r3, [sp, #16]
 800baf4:	46a2      	mov	sl, r4
 800baf6:	e7d2      	b.n	800ba9e <_vfiprintf_r+0xc6>
 800baf8:	9b03      	ldr	r3, [sp, #12]
 800bafa:	1d19      	adds	r1, r3, #4
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	9103      	str	r1, [sp, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfbb      	ittet	lt
 800bb04:	425b      	neglt	r3, r3
 800bb06:	f042 0202 	orrlt.w	r2, r2, #2
 800bb0a:	9307      	strge	r3, [sp, #28]
 800bb0c:	9307      	strlt	r3, [sp, #28]
 800bb0e:	bfb8      	it	lt
 800bb10:	9204      	strlt	r2, [sp, #16]
 800bb12:	7823      	ldrb	r3, [r4, #0]
 800bb14:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb16:	d10a      	bne.n	800bb2e <_vfiprintf_r+0x156>
 800bb18:	7863      	ldrb	r3, [r4, #1]
 800bb1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb1c:	d132      	bne.n	800bb84 <_vfiprintf_r+0x1ac>
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	1d1a      	adds	r2, r3, #4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	9203      	str	r2, [sp, #12]
 800bb26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb2a:	3402      	adds	r4, #2
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc04 <_vfiprintf_r+0x22c>
 800bb32:	7821      	ldrb	r1, [r4, #0]
 800bb34:	2203      	movs	r2, #3
 800bb36:	4650      	mov	r0, sl
 800bb38:	f7f4 fb62 	bl	8000200 <memchr>
 800bb3c:	b138      	cbz	r0, 800bb4e <_vfiprintf_r+0x176>
 800bb3e:	9b04      	ldr	r3, [sp, #16]
 800bb40:	eba0 000a 	sub.w	r0, r0, sl
 800bb44:	2240      	movs	r2, #64	@ 0x40
 800bb46:	4082      	lsls	r2, r0
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	3401      	adds	r4, #1
 800bb4c:	9304      	str	r3, [sp, #16]
 800bb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb52:	4829      	ldr	r0, [pc, #164]	@ (800bbf8 <_vfiprintf_r+0x220>)
 800bb54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb58:	2206      	movs	r2, #6
 800bb5a:	f7f4 fb51 	bl	8000200 <memchr>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d03f      	beq.n	800bbe2 <_vfiprintf_r+0x20a>
 800bb62:	4b26      	ldr	r3, [pc, #152]	@ (800bbfc <_vfiprintf_r+0x224>)
 800bb64:	bb1b      	cbnz	r3, 800bbae <_vfiprintf_r+0x1d6>
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	3307      	adds	r3, #7
 800bb6a:	f023 0307 	bic.w	r3, r3, #7
 800bb6e:	3308      	adds	r3, #8
 800bb70:	9303      	str	r3, [sp, #12]
 800bb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb74:	443b      	add	r3, r7
 800bb76:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb78:	e76a      	b.n	800ba50 <_vfiprintf_r+0x78>
 800bb7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb7e:	460c      	mov	r4, r1
 800bb80:	2001      	movs	r0, #1
 800bb82:	e7a8      	b.n	800bad6 <_vfiprintf_r+0xfe>
 800bb84:	2300      	movs	r3, #0
 800bb86:	3401      	adds	r4, #1
 800bb88:	9305      	str	r3, [sp, #20]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	f04f 0c0a 	mov.w	ip, #10
 800bb90:	4620      	mov	r0, r4
 800bb92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb96:	3a30      	subs	r2, #48	@ 0x30
 800bb98:	2a09      	cmp	r2, #9
 800bb9a:	d903      	bls.n	800bba4 <_vfiprintf_r+0x1cc>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d0c6      	beq.n	800bb2e <_vfiprintf_r+0x156>
 800bba0:	9105      	str	r1, [sp, #20]
 800bba2:	e7c4      	b.n	800bb2e <_vfiprintf_r+0x156>
 800bba4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bba8:	4604      	mov	r4, r0
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e7f0      	b.n	800bb90 <_vfiprintf_r+0x1b8>
 800bbae:	ab03      	add	r3, sp, #12
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4b12      	ldr	r3, [pc, #72]	@ (800bc00 <_vfiprintf_r+0x228>)
 800bbb6:	a904      	add	r1, sp, #16
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7fd febd 	bl	8009938 <_printf_float>
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	1c78      	adds	r0, r7, #1
 800bbc2:	d1d6      	bne.n	800bb72 <_vfiprintf_r+0x19a>
 800bbc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbc6:	07d9      	lsls	r1, r3, #31
 800bbc8:	d405      	bmi.n	800bbd6 <_vfiprintf_r+0x1fe>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	059a      	lsls	r2, r3, #22
 800bbce:	d402      	bmi.n	800bbd6 <_vfiprintf_r+0x1fe>
 800bbd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbd2:	f7fe fc07 	bl	800a3e4 <__retarget_lock_release_recursive>
 800bbd6:	89ab      	ldrh	r3, [r5, #12]
 800bbd8:	065b      	lsls	r3, r3, #25
 800bbda:	f53f af1f 	bmi.w	800ba1c <_vfiprintf_r+0x44>
 800bbde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbe0:	e71e      	b.n	800ba20 <_vfiprintf_r+0x48>
 800bbe2:	ab03      	add	r3, sp, #12
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	462a      	mov	r2, r5
 800bbe8:	4b05      	ldr	r3, [pc, #20]	@ (800bc00 <_vfiprintf_r+0x228>)
 800bbea:	a904      	add	r1, sp, #16
 800bbec:	4630      	mov	r0, r6
 800bbee:	f7fe f93b 	bl	8009e68 <_printf_i>
 800bbf2:	e7e4      	b.n	800bbbe <_vfiprintf_r+0x1e6>
 800bbf4:	0800c478 	.word	0x0800c478
 800bbf8:	0800c482 	.word	0x0800c482
 800bbfc:	08009939 	.word	0x08009939
 800bc00:	0800b9b3 	.word	0x0800b9b3
 800bc04:	0800c47e 	.word	0x0800c47e

0800bc08 <__sflush_r>:
 800bc08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc10:	0716      	lsls	r6, r2, #28
 800bc12:	4605      	mov	r5, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	d454      	bmi.n	800bcc2 <__sflush_r+0xba>
 800bc18:	684b      	ldr	r3, [r1, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dc02      	bgt.n	800bc24 <__sflush_r+0x1c>
 800bc1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	dd48      	ble.n	800bcb6 <__sflush_r+0xae>
 800bc24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	d045      	beq.n	800bcb6 <__sflush_r+0xae>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc30:	682f      	ldr	r7, [r5, #0]
 800bc32:	6a21      	ldr	r1, [r4, #32]
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	d030      	beq.n	800bc9a <__sflush_r+0x92>
 800bc38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	0759      	lsls	r1, r3, #29
 800bc3e:	d505      	bpl.n	800bc4c <__sflush_r+0x44>
 800bc40:	6863      	ldr	r3, [r4, #4]
 800bc42:	1ad2      	subs	r2, r2, r3
 800bc44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc46:	b10b      	cbz	r3, 800bc4c <__sflush_r+0x44>
 800bc48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc4a:	1ad2      	subs	r2, r2, r3
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc50:	6a21      	ldr	r1, [r4, #32]
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b0      	blx	r6
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	d106      	bne.n	800bc6a <__sflush_r+0x62>
 800bc5c:	6829      	ldr	r1, [r5, #0]
 800bc5e:	291d      	cmp	r1, #29
 800bc60:	d82b      	bhi.n	800bcba <__sflush_r+0xb2>
 800bc62:	4a2a      	ldr	r2, [pc, #168]	@ (800bd0c <__sflush_r+0x104>)
 800bc64:	410a      	asrs	r2, r1
 800bc66:	07d6      	lsls	r6, r2, #31
 800bc68:	d427      	bmi.n	800bcba <__sflush_r+0xb2>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	6062      	str	r2, [r4, #4]
 800bc6e:	04d9      	lsls	r1, r3, #19
 800bc70:	6922      	ldr	r2, [r4, #16]
 800bc72:	6022      	str	r2, [r4, #0]
 800bc74:	d504      	bpl.n	800bc80 <__sflush_r+0x78>
 800bc76:	1c42      	adds	r2, r0, #1
 800bc78:	d101      	bne.n	800bc7e <__sflush_r+0x76>
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	b903      	cbnz	r3, 800bc80 <__sflush_r+0x78>
 800bc7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc82:	602f      	str	r7, [r5, #0]
 800bc84:	b1b9      	cbz	r1, 800bcb6 <__sflush_r+0xae>
 800bc86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc8a:	4299      	cmp	r1, r3
 800bc8c:	d002      	beq.n	800bc94 <__sflush_r+0x8c>
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f7ff f9f6 	bl	800b080 <_free_r>
 800bc94:	2300      	movs	r3, #0
 800bc96:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc98:	e00d      	b.n	800bcb6 <__sflush_r+0xae>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	47b0      	blx	r6
 800bca0:	4602      	mov	r2, r0
 800bca2:	1c50      	adds	r0, r2, #1
 800bca4:	d1c9      	bne.n	800bc3a <__sflush_r+0x32>
 800bca6:	682b      	ldr	r3, [r5, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0c6      	beq.n	800bc3a <__sflush_r+0x32>
 800bcac:	2b1d      	cmp	r3, #29
 800bcae:	d001      	beq.n	800bcb4 <__sflush_r+0xac>
 800bcb0:	2b16      	cmp	r3, #22
 800bcb2:	d11e      	bne.n	800bcf2 <__sflush_r+0xea>
 800bcb4:	602f      	str	r7, [r5, #0]
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e022      	b.n	800bd00 <__sflush_r+0xf8>
 800bcba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcbe:	b21b      	sxth	r3, r3
 800bcc0:	e01b      	b.n	800bcfa <__sflush_r+0xf2>
 800bcc2:	690f      	ldr	r7, [r1, #16]
 800bcc4:	2f00      	cmp	r7, #0
 800bcc6:	d0f6      	beq.n	800bcb6 <__sflush_r+0xae>
 800bcc8:	0793      	lsls	r3, r2, #30
 800bcca:	680e      	ldr	r6, [r1, #0]
 800bccc:	bf08      	it	eq
 800bcce:	694b      	ldreq	r3, [r1, #20]
 800bcd0:	600f      	str	r7, [r1, #0]
 800bcd2:	bf18      	it	ne
 800bcd4:	2300      	movne	r3, #0
 800bcd6:	eba6 0807 	sub.w	r8, r6, r7
 800bcda:	608b      	str	r3, [r1, #8]
 800bcdc:	f1b8 0f00 	cmp.w	r8, #0
 800bce0:	dde9      	ble.n	800bcb6 <__sflush_r+0xae>
 800bce2:	6a21      	ldr	r1, [r4, #32]
 800bce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bce6:	4643      	mov	r3, r8
 800bce8:	463a      	mov	r2, r7
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b0      	blx	r6
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	dc08      	bgt.n	800bd04 <__sflush_r+0xfc>
 800bcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcfa:	81a3      	strh	r3, [r4, #12]
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd04:	4407      	add	r7, r0
 800bd06:	eba8 0800 	sub.w	r8, r8, r0
 800bd0a:	e7e7      	b.n	800bcdc <__sflush_r+0xd4>
 800bd0c:	dfbffffe 	.word	0xdfbffffe

0800bd10 <_fflush_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	690b      	ldr	r3, [r1, #16]
 800bd14:	4605      	mov	r5, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	b913      	cbnz	r3, 800bd20 <_fflush_r+0x10>
 800bd1a:	2500      	movs	r5, #0
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	bd38      	pop	{r3, r4, r5, pc}
 800bd20:	b118      	cbz	r0, 800bd2a <_fflush_r+0x1a>
 800bd22:	6a03      	ldr	r3, [r0, #32]
 800bd24:	b90b      	cbnz	r3, 800bd2a <_fflush_r+0x1a>
 800bd26:	f7fe fa4b 	bl	800a1c0 <__sinit>
 800bd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0f3      	beq.n	800bd1a <_fflush_r+0xa>
 800bd32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd34:	07d0      	lsls	r0, r2, #31
 800bd36:	d404      	bmi.n	800bd42 <_fflush_r+0x32>
 800bd38:	0599      	lsls	r1, r3, #22
 800bd3a:	d402      	bmi.n	800bd42 <_fflush_r+0x32>
 800bd3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd3e:	f7fe fb50 	bl	800a3e2 <__retarget_lock_acquire_recursive>
 800bd42:	4628      	mov	r0, r5
 800bd44:	4621      	mov	r1, r4
 800bd46:	f7ff ff5f 	bl	800bc08 <__sflush_r>
 800bd4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd4c:	07da      	lsls	r2, r3, #31
 800bd4e:	4605      	mov	r5, r0
 800bd50:	d4e4      	bmi.n	800bd1c <_fflush_r+0xc>
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	059b      	lsls	r3, r3, #22
 800bd56:	d4e1      	bmi.n	800bd1c <_fflush_r+0xc>
 800bd58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd5a:	f7fe fb43 	bl	800a3e4 <__retarget_lock_release_recursive>
 800bd5e:	e7dd      	b.n	800bd1c <_fflush_r+0xc>

0800bd60 <_putc_r>:
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	460d      	mov	r5, r1
 800bd64:	4614      	mov	r4, r2
 800bd66:	4606      	mov	r6, r0
 800bd68:	b118      	cbz	r0, 800bd72 <_putc_r+0x12>
 800bd6a:	6a03      	ldr	r3, [r0, #32]
 800bd6c:	b90b      	cbnz	r3, 800bd72 <_putc_r+0x12>
 800bd6e:	f7fe fa27 	bl	800a1c0 <__sinit>
 800bd72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd74:	07d8      	lsls	r0, r3, #31
 800bd76:	d405      	bmi.n	800bd84 <_putc_r+0x24>
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	0599      	lsls	r1, r3, #22
 800bd7c:	d402      	bmi.n	800bd84 <_putc_r+0x24>
 800bd7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd80:	f7fe fb2f 	bl	800a3e2 <__retarget_lock_acquire_recursive>
 800bd84:	68a3      	ldr	r3, [r4, #8]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	60a3      	str	r3, [r4, #8]
 800bd8c:	da05      	bge.n	800bd9a <_putc_r+0x3a>
 800bd8e:	69a2      	ldr	r2, [r4, #24]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	db12      	blt.n	800bdba <_putc_r+0x5a>
 800bd94:	b2eb      	uxtb	r3, r5
 800bd96:	2b0a      	cmp	r3, #10
 800bd98:	d00f      	beq.n	800bdba <_putc_r+0x5a>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	6022      	str	r2, [r4, #0]
 800bda0:	701d      	strb	r5, [r3, #0]
 800bda2:	b2ed      	uxtb	r5, r5
 800bda4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bda6:	07da      	lsls	r2, r3, #31
 800bda8:	d405      	bmi.n	800bdb6 <_putc_r+0x56>
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	059b      	lsls	r3, r3, #22
 800bdae:	d402      	bmi.n	800bdb6 <_putc_r+0x56>
 800bdb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdb2:	f7fe fb17 	bl	800a3e4 <__retarget_lock_release_recursive>
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	bd70      	pop	{r4, r5, r6, pc}
 800bdba:	4629      	mov	r1, r5
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f000 f802 	bl	800bdc8 <__swbuf_r>
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	e7ed      	b.n	800bda4 <_putc_r+0x44>

0800bdc8 <__swbuf_r>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	460e      	mov	r6, r1
 800bdcc:	4614      	mov	r4, r2
 800bdce:	4605      	mov	r5, r0
 800bdd0:	b118      	cbz	r0, 800bdda <__swbuf_r+0x12>
 800bdd2:	6a03      	ldr	r3, [r0, #32]
 800bdd4:	b90b      	cbnz	r3, 800bdda <__swbuf_r+0x12>
 800bdd6:	f7fe f9f3 	bl	800a1c0 <__sinit>
 800bdda:	69a3      	ldr	r3, [r4, #24]
 800bddc:	60a3      	str	r3, [r4, #8]
 800bdde:	89a3      	ldrh	r3, [r4, #12]
 800bde0:	071a      	lsls	r2, r3, #28
 800bde2:	d501      	bpl.n	800bde8 <__swbuf_r+0x20>
 800bde4:	6923      	ldr	r3, [r4, #16]
 800bde6:	b943      	cbnz	r3, 800bdfa <__swbuf_r+0x32>
 800bde8:	4621      	mov	r1, r4
 800bdea:	4628      	mov	r0, r5
 800bdec:	f000 f82a 	bl	800be44 <__swsetup_r>
 800bdf0:	b118      	cbz	r0, 800bdfa <__swbuf_r+0x32>
 800bdf2:	f04f 37ff 	mov.w	r7, #4294967295
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	6922      	ldr	r2, [r4, #16]
 800bdfe:	1a98      	subs	r0, r3, r2
 800be00:	6963      	ldr	r3, [r4, #20]
 800be02:	b2f6      	uxtb	r6, r6
 800be04:	4283      	cmp	r3, r0
 800be06:	4637      	mov	r7, r6
 800be08:	dc05      	bgt.n	800be16 <__swbuf_r+0x4e>
 800be0a:	4621      	mov	r1, r4
 800be0c:	4628      	mov	r0, r5
 800be0e:	f7ff ff7f 	bl	800bd10 <_fflush_r>
 800be12:	2800      	cmp	r0, #0
 800be14:	d1ed      	bne.n	800bdf2 <__swbuf_r+0x2a>
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	3b01      	subs	r3, #1
 800be1a:	60a3      	str	r3, [r4, #8]
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	6022      	str	r2, [r4, #0]
 800be22:	701e      	strb	r6, [r3, #0]
 800be24:	6962      	ldr	r2, [r4, #20]
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	429a      	cmp	r2, r3
 800be2a:	d004      	beq.n	800be36 <__swbuf_r+0x6e>
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	07db      	lsls	r3, r3, #31
 800be30:	d5e1      	bpl.n	800bdf6 <__swbuf_r+0x2e>
 800be32:	2e0a      	cmp	r6, #10
 800be34:	d1df      	bne.n	800bdf6 <__swbuf_r+0x2e>
 800be36:	4621      	mov	r1, r4
 800be38:	4628      	mov	r0, r5
 800be3a:	f7ff ff69 	bl	800bd10 <_fflush_r>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d0d9      	beq.n	800bdf6 <__swbuf_r+0x2e>
 800be42:	e7d6      	b.n	800bdf2 <__swbuf_r+0x2a>

0800be44 <__swsetup_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4b29      	ldr	r3, [pc, #164]	@ (800beec <__swsetup_r+0xa8>)
 800be48:	4605      	mov	r5, r0
 800be4a:	6818      	ldr	r0, [r3, #0]
 800be4c:	460c      	mov	r4, r1
 800be4e:	b118      	cbz	r0, 800be58 <__swsetup_r+0x14>
 800be50:	6a03      	ldr	r3, [r0, #32]
 800be52:	b90b      	cbnz	r3, 800be58 <__swsetup_r+0x14>
 800be54:	f7fe f9b4 	bl	800a1c0 <__sinit>
 800be58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be5c:	0719      	lsls	r1, r3, #28
 800be5e:	d422      	bmi.n	800bea6 <__swsetup_r+0x62>
 800be60:	06da      	lsls	r2, r3, #27
 800be62:	d407      	bmi.n	800be74 <__swsetup_r+0x30>
 800be64:	2209      	movs	r2, #9
 800be66:	602a      	str	r2, [r5, #0]
 800be68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be6c:	81a3      	strh	r3, [r4, #12]
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295
 800be72:	e033      	b.n	800bedc <__swsetup_r+0x98>
 800be74:	0758      	lsls	r0, r3, #29
 800be76:	d512      	bpl.n	800be9e <__swsetup_r+0x5a>
 800be78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be7a:	b141      	cbz	r1, 800be8e <__swsetup_r+0x4a>
 800be7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be80:	4299      	cmp	r1, r3
 800be82:	d002      	beq.n	800be8a <__swsetup_r+0x46>
 800be84:	4628      	mov	r0, r5
 800be86:	f7ff f8fb 	bl	800b080 <_free_r>
 800be8a:	2300      	movs	r3, #0
 800be8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be94:	81a3      	strh	r3, [r4, #12]
 800be96:	2300      	movs	r3, #0
 800be98:	6063      	str	r3, [r4, #4]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	f043 0308 	orr.w	r3, r3, #8
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	b94b      	cbnz	r3, 800bebe <__swsetup_r+0x7a>
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800beb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800beb4:	d003      	beq.n	800bebe <__swsetup_r+0x7a>
 800beb6:	4621      	mov	r1, r4
 800beb8:	4628      	mov	r0, r5
 800beba:	f000 f8c1 	bl	800c040 <__smakebuf_r>
 800bebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec2:	f013 0201 	ands.w	r2, r3, #1
 800bec6:	d00a      	beq.n	800bede <__swsetup_r+0x9a>
 800bec8:	2200      	movs	r2, #0
 800beca:	60a2      	str	r2, [r4, #8]
 800becc:	6962      	ldr	r2, [r4, #20]
 800bece:	4252      	negs	r2, r2
 800bed0:	61a2      	str	r2, [r4, #24]
 800bed2:	6922      	ldr	r2, [r4, #16]
 800bed4:	b942      	cbnz	r2, 800bee8 <__swsetup_r+0xa4>
 800bed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800beda:	d1c5      	bne.n	800be68 <__swsetup_r+0x24>
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	0799      	lsls	r1, r3, #30
 800bee0:	bf58      	it	pl
 800bee2:	6962      	ldrpl	r2, [r4, #20]
 800bee4:	60a2      	str	r2, [r4, #8]
 800bee6:	e7f4      	b.n	800bed2 <__swsetup_r+0x8e>
 800bee8:	2000      	movs	r0, #0
 800beea:	e7f7      	b.n	800bedc <__swsetup_r+0x98>
 800beec:	20000018 	.word	0x20000018

0800bef0 <_sbrk_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d06      	ldr	r5, [pc, #24]	@ (800bf0c <_sbrk_r+0x1c>)
 800bef4:	2300      	movs	r3, #0
 800bef6:	4604      	mov	r4, r0
 800bef8:	4608      	mov	r0, r1
 800befa:	602b      	str	r3, [r5, #0]
 800befc:	f7f6 ff70 	bl	8002de0 <_sbrk>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_sbrk_r+0x1a>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_sbrk_r+0x1a>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20000a1c 	.word	0x20000a1c

0800bf10 <memcpy>:
 800bf10:	440a      	add	r2, r1
 800bf12:	4291      	cmp	r1, r2
 800bf14:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf18:	d100      	bne.n	800bf1c <memcpy+0xc>
 800bf1a:	4770      	bx	lr
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf26:	4291      	cmp	r1, r2
 800bf28:	d1f9      	bne.n	800bf1e <memcpy+0xe>
 800bf2a:	bd10      	pop	{r4, pc}

0800bf2c <__assert_func>:
 800bf2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf2e:	4614      	mov	r4, r2
 800bf30:	461a      	mov	r2, r3
 800bf32:	4b09      	ldr	r3, [pc, #36]	@ (800bf58 <__assert_func+0x2c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4605      	mov	r5, r0
 800bf38:	68d8      	ldr	r0, [r3, #12]
 800bf3a:	b954      	cbnz	r4, 800bf52 <__assert_func+0x26>
 800bf3c:	4b07      	ldr	r3, [pc, #28]	@ (800bf5c <__assert_func+0x30>)
 800bf3e:	461c      	mov	r4, r3
 800bf40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf44:	9100      	str	r1, [sp, #0]
 800bf46:	462b      	mov	r3, r5
 800bf48:	4905      	ldr	r1, [pc, #20]	@ (800bf60 <__assert_func+0x34>)
 800bf4a:	f000 f841 	bl	800bfd0 <fiprintf>
 800bf4e:	f000 f8d5 	bl	800c0fc <abort>
 800bf52:	4b04      	ldr	r3, [pc, #16]	@ (800bf64 <__assert_func+0x38>)
 800bf54:	e7f4      	b.n	800bf40 <__assert_func+0x14>
 800bf56:	bf00      	nop
 800bf58:	20000018 	.word	0x20000018
 800bf5c:	0800c4ce 	.word	0x0800c4ce
 800bf60:	0800c4a0 	.word	0x0800c4a0
 800bf64:	0800c493 	.word	0x0800c493

0800bf68 <_calloc_r>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	fba1 5402 	umull	r5, r4, r1, r2
 800bf6e:	b93c      	cbnz	r4, 800bf80 <_calloc_r+0x18>
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7ff f8f9 	bl	800b168 <_malloc_r>
 800bf76:	4606      	mov	r6, r0
 800bf78:	b928      	cbnz	r0, 800bf86 <_calloc_r+0x1e>
 800bf7a:	2600      	movs	r6, #0
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	220c      	movs	r2, #12
 800bf82:	6002      	str	r2, [r0, #0]
 800bf84:	e7f9      	b.n	800bf7a <_calloc_r+0x12>
 800bf86:	462a      	mov	r2, r5
 800bf88:	4621      	mov	r1, r4
 800bf8a:	f7fe f9ac 	bl	800a2e6 <memset>
 800bf8e:	e7f5      	b.n	800bf7c <_calloc_r+0x14>

0800bf90 <__ascii_mbtowc>:
 800bf90:	b082      	sub	sp, #8
 800bf92:	b901      	cbnz	r1, 800bf96 <__ascii_mbtowc+0x6>
 800bf94:	a901      	add	r1, sp, #4
 800bf96:	b142      	cbz	r2, 800bfaa <__ascii_mbtowc+0x1a>
 800bf98:	b14b      	cbz	r3, 800bfae <__ascii_mbtowc+0x1e>
 800bf9a:	7813      	ldrb	r3, [r2, #0]
 800bf9c:	600b      	str	r3, [r1, #0]
 800bf9e:	7812      	ldrb	r2, [r2, #0]
 800bfa0:	1e10      	subs	r0, r2, #0
 800bfa2:	bf18      	it	ne
 800bfa4:	2001      	movne	r0, #1
 800bfa6:	b002      	add	sp, #8
 800bfa8:	4770      	bx	lr
 800bfaa:	4610      	mov	r0, r2
 800bfac:	e7fb      	b.n	800bfa6 <__ascii_mbtowc+0x16>
 800bfae:	f06f 0001 	mvn.w	r0, #1
 800bfb2:	e7f8      	b.n	800bfa6 <__ascii_mbtowc+0x16>

0800bfb4 <__ascii_wctomb>:
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	4608      	mov	r0, r1
 800bfb8:	b141      	cbz	r1, 800bfcc <__ascii_wctomb+0x18>
 800bfba:	2aff      	cmp	r2, #255	@ 0xff
 800bfbc:	d904      	bls.n	800bfc8 <__ascii_wctomb+0x14>
 800bfbe:	228a      	movs	r2, #138	@ 0x8a
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc6:	4770      	bx	lr
 800bfc8:	700a      	strb	r2, [r1, #0]
 800bfca:	2001      	movs	r0, #1
 800bfcc:	4770      	bx	lr
	...

0800bfd0 <fiprintf>:
 800bfd0:	b40e      	push	{r1, r2, r3}
 800bfd2:	b503      	push	{r0, r1, lr}
 800bfd4:	4601      	mov	r1, r0
 800bfd6:	ab03      	add	r3, sp, #12
 800bfd8:	4805      	ldr	r0, [pc, #20]	@ (800bff0 <fiprintf+0x20>)
 800bfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfde:	6800      	ldr	r0, [r0, #0]
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	f7ff fcf9 	bl	800b9d8 <_vfiprintf_r>
 800bfe6:	b002      	add	sp, #8
 800bfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfec:	b003      	add	sp, #12
 800bfee:	4770      	bx	lr
 800bff0:	20000018 	.word	0x20000018

0800bff4 <__swhatbuf_r>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	2900      	cmp	r1, #0
 800bffe:	b096      	sub	sp, #88	@ 0x58
 800c000:	4615      	mov	r5, r2
 800c002:	461e      	mov	r6, r3
 800c004:	da0d      	bge.n	800c022 <__swhatbuf_r+0x2e>
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c00c:	f04f 0100 	mov.w	r1, #0
 800c010:	bf14      	ite	ne
 800c012:	2340      	movne	r3, #64	@ 0x40
 800c014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c018:	2000      	movs	r0, #0
 800c01a:	6031      	str	r1, [r6, #0]
 800c01c:	602b      	str	r3, [r5, #0]
 800c01e:	b016      	add	sp, #88	@ 0x58
 800c020:	bd70      	pop	{r4, r5, r6, pc}
 800c022:	466a      	mov	r2, sp
 800c024:	f000 f848 	bl	800c0b8 <_fstat_r>
 800c028:	2800      	cmp	r0, #0
 800c02a:	dbec      	blt.n	800c006 <__swhatbuf_r+0x12>
 800c02c:	9901      	ldr	r1, [sp, #4]
 800c02e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c036:	4259      	negs	r1, r3
 800c038:	4159      	adcs	r1, r3
 800c03a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c03e:	e7eb      	b.n	800c018 <__swhatbuf_r+0x24>

0800c040 <__smakebuf_r>:
 800c040:	898b      	ldrh	r3, [r1, #12]
 800c042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c044:	079d      	lsls	r5, r3, #30
 800c046:	4606      	mov	r6, r0
 800c048:	460c      	mov	r4, r1
 800c04a:	d507      	bpl.n	800c05c <__smakebuf_r+0x1c>
 800c04c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	6123      	str	r3, [r4, #16]
 800c054:	2301      	movs	r3, #1
 800c056:	6163      	str	r3, [r4, #20]
 800c058:	b003      	add	sp, #12
 800c05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05c:	ab01      	add	r3, sp, #4
 800c05e:	466a      	mov	r2, sp
 800c060:	f7ff ffc8 	bl	800bff4 <__swhatbuf_r>
 800c064:	9f00      	ldr	r7, [sp, #0]
 800c066:	4605      	mov	r5, r0
 800c068:	4639      	mov	r1, r7
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7ff f87c 	bl	800b168 <_malloc_r>
 800c070:	b948      	cbnz	r0, 800c086 <__smakebuf_r+0x46>
 800c072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c076:	059a      	lsls	r2, r3, #22
 800c078:	d4ee      	bmi.n	800c058 <__smakebuf_r+0x18>
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	f043 0302 	orr.w	r3, r3, #2
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	e7e2      	b.n	800c04c <__smakebuf_r+0xc>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	6020      	str	r0, [r4, #0]
 800c08a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c096:	b15b      	cbz	r3, 800c0b0 <__smakebuf_r+0x70>
 800c098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09c:	4630      	mov	r0, r6
 800c09e:	f000 f81d 	bl	800c0dc <_isatty_r>
 800c0a2:	b128      	cbz	r0, 800c0b0 <__smakebuf_r+0x70>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f023 0303 	bic.w	r3, r3, #3
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	431d      	orrs	r5, r3
 800c0b4:	81a5      	strh	r5, [r4, #12]
 800c0b6:	e7cf      	b.n	800c058 <__smakebuf_r+0x18>

0800c0b8 <_fstat_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d07      	ldr	r5, [pc, #28]	@ (800c0d8 <_fstat_r+0x20>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	602b      	str	r3, [r5, #0]
 800c0c6:	f7f6 fe62 	bl	8002d8e <_fstat>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	d102      	bne.n	800c0d4 <_fstat_r+0x1c>
 800c0ce:	682b      	ldr	r3, [r5, #0]
 800c0d0:	b103      	cbz	r3, 800c0d4 <_fstat_r+0x1c>
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	bd38      	pop	{r3, r4, r5, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20000a1c 	.word	0x20000a1c

0800c0dc <_isatty_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d06      	ldr	r5, [pc, #24]	@ (800c0f8 <_isatty_r+0x1c>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	f7f6 fe61 	bl	8002dae <_isatty>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_isatty_r+0x1a>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_isatty_r+0x1a>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20000a1c 	.word	0x20000a1c

0800c0fc <abort>:
 800c0fc:	b508      	push	{r3, lr}
 800c0fe:	2006      	movs	r0, #6
 800c100:	f000 f82c 	bl	800c15c <raise>
 800c104:	2001      	movs	r0, #1
 800c106:	f7f6 fdf2 	bl	8002cee <_exit>

0800c10a <_raise_r>:
 800c10a:	291f      	cmp	r1, #31
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4605      	mov	r5, r0
 800c110:	460c      	mov	r4, r1
 800c112:	d904      	bls.n	800c11e <_raise_r+0x14>
 800c114:	2316      	movs	r3, #22
 800c116:	6003      	str	r3, [r0, #0]
 800c118:	f04f 30ff 	mov.w	r0, #4294967295
 800c11c:	bd38      	pop	{r3, r4, r5, pc}
 800c11e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c120:	b112      	cbz	r2, 800c128 <_raise_r+0x1e>
 800c122:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c126:	b94b      	cbnz	r3, 800c13c <_raise_r+0x32>
 800c128:	4628      	mov	r0, r5
 800c12a:	f000 f831 	bl	800c190 <_getpid_r>
 800c12e:	4622      	mov	r2, r4
 800c130:	4601      	mov	r1, r0
 800c132:	4628      	mov	r0, r5
 800c134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c138:	f000 b818 	b.w	800c16c <_kill_r>
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d00a      	beq.n	800c156 <_raise_r+0x4c>
 800c140:	1c59      	adds	r1, r3, #1
 800c142:	d103      	bne.n	800c14c <_raise_r+0x42>
 800c144:	2316      	movs	r3, #22
 800c146:	6003      	str	r3, [r0, #0]
 800c148:	2001      	movs	r0, #1
 800c14a:	e7e7      	b.n	800c11c <_raise_r+0x12>
 800c14c:	2100      	movs	r1, #0
 800c14e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c152:	4620      	mov	r0, r4
 800c154:	4798      	blx	r3
 800c156:	2000      	movs	r0, #0
 800c158:	e7e0      	b.n	800c11c <_raise_r+0x12>
	...

0800c15c <raise>:
 800c15c:	4b02      	ldr	r3, [pc, #8]	@ (800c168 <raise+0xc>)
 800c15e:	4601      	mov	r1, r0
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	f7ff bfd2 	b.w	800c10a <_raise_r>
 800c166:	bf00      	nop
 800c168:	20000018 	.word	0x20000018

0800c16c <_kill_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d07      	ldr	r5, [pc, #28]	@ (800c18c <_kill_r+0x20>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	4611      	mov	r1, r2
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	f7f6 fda8 	bl	8002cce <_kill>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d102      	bne.n	800c188 <_kill_r+0x1c>
 800c182:	682b      	ldr	r3, [r5, #0]
 800c184:	b103      	cbz	r3, 800c188 <_kill_r+0x1c>
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	bf00      	nop
 800c18c:	20000a1c 	.word	0x20000a1c

0800c190 <_getpid_r>:
 800c190:	f7f6 bd95 	b.w	8002cbe <_getpid>

0800c194 <_init>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	bf00      	nop
 800c198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19a:	bc08      	pop	{r3}
 800c19c:	469e      	mov	lr, r3
 800c19e:	4770      	bx	lr

0800c1a0 <_fini>:
 800c1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a2:	bf00      	nop
 800c1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a6:	bc08      	pop	{r3}
 800c1a8:	469e      	mov	lr, r3
 800c1aa:	4770      	bx	lr


KEYPAD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800c1b0  0800c1b0  0001c1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5cc  0800c5cc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d4  0800c5d4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d4  0800c5d4  0001c5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  200001d4  0800c7b0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800c7b0  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c46d  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a8  00000000  00000000  0003c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a48  00000000  00000000  0003fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001491  00000000  00000000  000414a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f1bb  00000000  00000000  00042939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001edfa  00000000  00000000  00071af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012708f  00000000  00000000  000908ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008268  00000000  00000000  001b7980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001bfbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c194 	.word	0x0800c194

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800c194 	.word	0x0800c194

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <RowChecker.0>:
//	  int row2;
//	  int row3;
//	  int row4;
//  };

  int RowChecker() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	f8c7 c004 	str.w	ip, [r7, #4]

//	  	row_return.row1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET;
//	  	row_return.row2 =  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET;
//	  	row_return.row3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET;
//	  	row_return.row4 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET;
	  int val = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
	  val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f003 fc34 	bl	8004754 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <RowChecker.0+0x22>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	e000      	b.n	8000ef8 <RowChecker.0+0x24>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
	  val =  HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET? 2 : val;
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f003 fc28 	bl	8004754 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <RowChecker.0+0x3a>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	e000      	b.n	8000f10 <RowChecker.0+0x3c>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
	  val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET? 3 : val;
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f003 fc1c 	bl	8004754 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <RowChecker.0+0x52>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	e000      	b.n	8000f28 <RowChecker.0+0x54>
 8000f26:	2303      	movs	r3, #3
 8000f28:	60fb      	str	r3, [r7, #12]
	  val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET? 4 : val;
 8000f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <RowChecker.0+0x78>)
 8000f30:	f003 fc10 	bl	8004754 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <RowChecker.0+0x6a>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	e000      	b.n	8000f40 <RowChecker.0+0x6c>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	60fb      	str	r3, [r7, #12]
//	  	return row_return;
	  return val;
 8000f42:	68fb      	ldr	r3, [r7, #12]
  }
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48000c00 	.word	0x48000c00

08000f50 <main>:
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
int main(void)
 8000f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f5a:	61bb      	str	r3, [r7, #24]
  HAL_Init();
 8000f5c:	f001 ff71 	bl	8002e42 <HAL_Init>
  SystemClock_Config();
 8000f60:	f000 f908 	bl	8001174 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000f64:	f000 f968 	bl	8001238 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000f68:	f000 ff94 	bl	8001e94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6c:	f000 f998 	bl	80012a0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f70:	f000 f9fa 	bl	8001368 <MX_CAN1_Init>
  MX_COMP1_Init();
 8000f74:	f000 fa2c 	bl	80013d0 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000f78:	f000 fa58 	bl	800142c <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000f7c:	f000 fa82 	bl	8001484 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8000f80:	f000 faba 	bl	80014f8 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8000f84:	f000 fafa 	bl	800157c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000f88:	f000 fb44 	bl	8001614 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f8c:	f000 fb90 	bl	80016b0 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000f90:	f000 fbda 	bl	8001748 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000f94:	f000 fc70 	bl	8001878 <MX_SAI2_Init>
  MX_SPI3_Init();
 8000f98:	f000 fcd6 	bl	8001948 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000f9c:	f000 fd12 	bl	80019c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fa0:	f000 fdc8 	bl	8001b34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa4:	f000 fe2a 	bl	8001bfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fa8:	f000 fe8e 	bl	8001cc8 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000fac:	f000 fee6 	bl	8001d7c <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fb0:	f000 ff68 	bl	8001e84 <MX_USB_OTG_FS_USB_Init>

//  struct ROW_RETURN Col1_Return;
//  struct ROW_RETURN Col2_Return;
//  struct ROW_RETURN Col3_Return;
//  struct ROW_RETURN Col4_Return;
  int val = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbe:	483e      	ldr	r0, [pc, #248]	; (80010b8 <main+0x168>)
 8000fc0:	f003 fbe0 	bl	8004784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fca:	483c      	ldr	r0, [pc, #240]	; (80010bc <main+0x16c>)
 8000fcc:	f003 fbda 	bl	8004784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd6:	4838      	ldr	r0, [pc, #224]	; (80010b8 <main+0x168>)
 8000fd8:	f003 fbd4 	bl	8004784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe2:	4836      	ldr	r0, [pc, #216]	; (80010bc <main+0x16c>)
 8000fe4:	f003 fbce 	bl	8004784 <HAL_GPIO_WritePin>
  uint8_t ASCII_Keypad_Lookup [4][4] = { {0x31, 0x32, 0x33, 0x41}, {0x34, 0x35, 0x36, 0x42}, {0x37, 0x38, 0x39, 0x43}, {0x2A, 0x30, 0x23, 0x44}};
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <main+0x170>)
 8000fea:	1dbc      	adds	r4, r7, #6
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	6020      	str	r0, [r4, #0]
 8000ff2:	6061      	str	r1, [r4, #4]
 8000ff4:	60a2      	str	r2, [r4, #8]
 8000ff6:	60e3      	str	r3, [r4, #12]
  uint8_t ASCII_Weight [5];
  uint8_t weightCounter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	703b      	strb	r3, [r7, #0]
  while (1)
  {



	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001002:	482e      	ldr	r0, [pc, #184]	; (80010bc <main+0x16c>)
 8001004:	f003 fbbe 	bl	8004784 <HAL_GPIO_WritePin>
	  val = RowChecker();
 8001008:	463b      	mov	r3, r7
 800100a:	469c      	mov	ip, r3
 800100c:	f7ff ff62 	bl	8000ed4 <RowChecker.0>
 8001010:	61f8      	str	r0, [r7, #28]
	  KeyPadReturn(val, 4);
 8001012:	463b      	mov	r3, r7
 8001014:	469c      	mov	ip, r3
 8001016:	2104      	movs	r1, #4
 8001018:	69f8      	ldr	r0, [r7, #28]
 800101a:	f000 f853 	bl	80010c4 <KeyPadReturn.1>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 800101e:	2201      	movs	r2, #1
 8001020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001024:	4825      	ldr	r0, [pc, #148]	; (80010bc <main+0x16c>)
 8001026:	f003 fbad 	bl	8004784 <HAL_GPIO_WritePin>



	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001030:	4821      	ldr	r0, [pc, #132]	; (80010b8 <main+0x168>)
 8001032:	f003 fba7 	bl	8004784 <HAL_GPIO_WritePin>
	  val = RowChecker();
 8001036:	463b      	mov	r3, r7
 8001038:	469c      	mov	ip, r3
 800103a:	f7ff ff4b 	bl	8000ed4 <RowChecker.0>
 800103e:	61f8      	str	r0, [r7, #28]
	  KeyPadReturn(val, 3);
 8001040:	463b      	mov	r3, r7
 8001042:	469c      	mov	ip, r3
 8001044:	2103      	movs	r1, #3
 8001046:	69f8      	ldr	r0, [r7, #28]
 8001048:	f000 f83c 	bl	80010c4 <KeyPadReturn.1>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4819      	ldr	r0, [pc, #100]	; (80010b8 <main+0x168>)
 8001054:	f003 fb96 	bl	8004784 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105e:	4816      	ldr	r0, [pc, #88]	; (80010b8 <main+0x168>)
 8001060:	f003 fb90 	bl	8004784 <HAL_GPIO_WritePin>
	  val = RowChecker();
 8001064:	463b      	mov	r3, r7
 8001066:	469c      	mov	ip, r3
 8001068:	f7ff ff34 	bl	8000ed4 <RowChecker.0>
 800106c:	61f8      	str	r0, [r7, #28]
	  KeyPadReturn(val, 2);
 800106e:	463b      	mov	r3, r7
 8001070:	469c      	mov	ip, r3
 8001072:	2102      	movs	r1, #2
 8001074:	69f8      	ldr	r0, [r7, #28]
 8001076:	f000 f825 	bl	80010c4 <KeyPadReturn.1>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <main+0x168>)
 8001082:	f003 fb7f 	bl	8004784 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <main+0x16c>)
 800108e:	f003 fb79 	bl	8004784 <HAL_GPIO_WritePin>
	  val = RowChecker();
 8001092:	463b      	mov	r3, r7
 8001094:	469c      	mov	ip, r3
 8001096:	f7ff ff1d 	bl	8000ed4 <RowChecker.0>
 800109a:	61f8      	str	r0, [r7, #28]
	  KeyPadReturn(val, 1);
 800109c:	463b      	mov	r3, r7
 800109e:	469c      	mov	ip, r3
 80010a0:	2101      	movs	r1, #1
 80010a2:	69f8      	ldr	r0, [r7, #28]
 80010a4:	f000 f80e 	bl	80010c4 <KeyPadReturn.1>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <main+0x16c>)
 80010b0:	f003 fb68 	bl	8004784 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 80010b4:	e7a2      	b.n	8000ffc <main+0xac>
 80010b6:	bf00      	nop
 80010b8:	48001000 	.word	0x48001000
 80010bc:	48001400 	.word	0x48001400
 80010c0:	0800c1b0 	.word	0x0800c1b0

080010c4 <KeyPadReturn.1>:
  void KeyPadReturn(int row, int col){
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4664      	mov	r4, ip
 80010d0:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(row == 0){
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d042      	beq.n	8001160 <KeyPadReturn.1+0x9c>
	  HAL_Delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f001 ff26 	bl	8002f2c <HAL_Delay>
	  while(row == RowChecker()){
 80010e0:	bf00      	nop
 80010e2:	46a4      	mov	ip, r4
 80010e4:	f7ff fef6 	bl	8000ed4 <RowChecker.0>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d0f8      	beq.n	80010e2 <KeyPadReturn.1+0x1e>
	  HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f001 ff1b 	bl	8002f2c <HAL_Delay>
	  uint8_t ASCII_Value = ASCII_Keypad_Lookup[row-1][col-1];
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4422      	add	r2, r4
 8001102:	4413      	add	r3, r2
 8001104:	3306      	adds	r3, #6
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	75bb      	strb	r3, [r7, #22]
	  if(ASCII_Value == 0x23){
 800110a:	7dbb      	ldrb	r3, [r7, #22]
 800110c:	2b23      	cmp	r3, #35	; 0x23
 800110e:	d119      	bne.n	8001144 <KeyPadReturn.1+0x80>
		  printf("End ASCII value: ");
 8001110:	4815      	ldr	r0, [pc, #84]	; (8001168 <KeyPadReturn.1+0xa4>)
 8001112:	f009 f85b 	bl	800a1cc <iprintf>
		  for(uint8_t i = 0; i < weightCounter; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]
 800111a:	e009      	b.n	8001130 <KeyPadReturn.1+0x6c>
			  printf("%x ", ASCII_Weight[i]);
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	4423      	add	r3, r4
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	4619      	mov	r1, r3
 8001124:	4811      	ldr	r0, [pc, #68]	; (800116c <KeyPadReturn.1+0xa8>)
 8001126:	f009 f851 	bl	800a1cc <iprintf>
		  for(uint8_t i = 0; i < weightCounter; i++) {
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	3301      	adds	r3, #1
 800112e:	75fb      	strb	r3, [r7, #23]
 8001130:	7823      	ldrb	r3, [r4, #0]
 8001132:	7dfa      	ldrb	r2, [r7, #23]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3f1      	bcc.n	800111c <KeyPadReturn.1+0x58>
		  printf("\n");
 8001138:	200a      	movs	r0, #10
 800113a:	f009 f859 	bl	800a1f0 <putchar>
		  weightCounter = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	7023      	strb	r3, [r4, #0]
		  return;
 8001142:	e00e      	b.n	8001162 <KeyPadReturn.1+0x9e>
	  printf("ASCII value: %x\n", ASCII_Value);
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	4619      	mov	r1, r3
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <KeyPadReturn.1+0xac>)
 800114a:	f009 f83f 	bl	800a1cc <iprintf>
	  ASCII_Weight[weightCounter] = ASCII_Value;
 800114e:	7823      	ldrb	r3, [r4, #0]
 8001150:	4423      	add	r3, r4
 8001152:	7dba      	ldrb	r2, [r7, #22]
 8001154:	705a      	strb	r2, [r3, #1]
	  weightCounter++;
 8001156:	7823      	ldrb	r3, [r4, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	7023      	strb	r3, [r4, #0]
 800115e:	e000      	b.n	8001162 <KeyPadReturn.1+0x9e>
		  return;
 8001160:	bf00      	nop
  }
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	0800c1c0 	.word	0x0800c1c0
 800116c:	0800c1d4 	.word	0x0800c1d4
 8001170:	0800c1d8 	.word	0x0800c1d8

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b096      	sub	sp, #88	; 0x58
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2244      	movs	r2, #68	; 0x44
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f009 f87f 	bl	800a286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001196:	f44f 7000 	mov.w	r0, #512	; 0x200
 800119a:	f003 fb3b 	bl	8004814 <HAL_PWREx_ControlVoltageScaling>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011a4:	f000 ff9a 	bl	80020dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011a8:	f003 fb04 	bl	80047b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <SystemClock_Config+0xc0>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <SystemClock_Config+0xc0>)
 80011b4:	f023 0318 	bic.w	r3, r3, #24
 80011b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011bc:	2314      	movs	r3, #20
 80011be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011cc:	2360      	movs	r3, #96	; 0x60
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011d4:	2301      	movs	r3, #1
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011dc:	2310      	movs	r3, #16
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fbc3 	bl	800497c <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011fc:	f000 ff6e 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2303      	movs	r3, #3
 8001206:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2101      	movs	r1, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f003 ffc9 	bl	80051b0 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001224:	f000 ff5a 	bl	80020dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001228:	f005 fcd2 	bl	8006bd0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800122c:	bf00      	nop
 800122e:	3758      	adds	r7, #88	; 0x58
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0a6      	sub	sp, #152	; 0x98
 800123c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2294      	movs	r2, #148	; 0x94
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f009 f81e 	bl	800a286 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 800124a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800124e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001250:	2300      	movs	r3, #0
 8001252:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001254:	2300      	movs	r3, #0
 8001256:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800125c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001260:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001264:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001266:	2301      	movs	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800126e:	2318      	movs	r3, #24
 8001270:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001272:	2302      	movs	r3, #2
 8001274:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800127a:	2302      	movs	r3, #2
 800127c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <PeriphCommonClock_Config+0x64>)
 8001280:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f004 fa51 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001290:	f000 ff24 	bl	80020dc <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3798      	adds	r7, #152	; 0x98
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	01110000 	.word	0x01110000

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_ADC1_Init+0xbc>)
 80012b8:	4a29      	ldr	r2, [pc, #164]	; (8001360 <MX_ADC1_Init+0xc0>)
 80012ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <MX_ADC1_Init+0xbc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_ADC1_Init+0xbc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_ADC1_Init+0xbc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <MX_ADC1_Init+0xbc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_ADC1_Init+0xbc>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_ADC1_Init+0xbc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_ADC1_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_ADC1_Init+0xbc>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_ADC1_Init+0xbc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_ADC1_Init+0xbc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_ADC1_Init+0xbc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_ADC1_Init+0xbc>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_ADC1_Init+0xbc>)
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_ADC1_Init+0xbc>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_ADC1_Init+0xbc>)
 8001318:	f001 ffcc 	bl	80032b4 <HAL_ADC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001322:	f000 fedb 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_ADC1_Init+0xc4>)
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132a:	2306      	movs	r3, #6
 800132c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001332:	237f      	movs	r3, #127	; 0x7f
 8001334:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001336:	2304      	movs	r3, #4
 8001338:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC1_Init+0xbc>)
 8001344:	f002 f8fc 	bl	8003540 <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800134e:	f000 fec5 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200001f0 	.word	0x200001f0
 8001360:	50040000 	.word	0x50040000
 8001364:	04300002 	.word	0x04300002

08001368 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_CAN1_Init+0x60>)
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_CAN1_Init+0x64>)
 8001370:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_CAN1_Init+0x60>)
 8001374:	2210      	movs	r2, #16
 8001376:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_CAN1_Init+0x60>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_CAN1_Init+0x60>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_CAN1_Init+0x60>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_CAN1_Init+0x60>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <MX_CAN1_Init+0x60>)
 8001392:	2200      	movs	r2, #0
 8001394:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_CAN1_Init+0x60>)
 8001398:	2200      	movs	r2, #0
 800139a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_CAN1_Init+0x60>)
 800139e:	2200      	movs	r2, #0
 80013a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_CAN1_Init+0x60>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_CAN1_Init+0x60>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_CAN1_Init+0x60>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_CAN1_Init+0x60>)
 80013b6:	f002 fcbf 	bl	8003d38 <HAL_CAN_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80013c0:	f000 fe8c 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000258 	.word	0x20000258
 80013cc:	40006400 	.word	0x40006400

080013d0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_COMP1_Init+0x50>)
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_COMP1_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_COMP1_Init+0x50>)
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_COMP1_Init+0x58>)
 80013de:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_COMP1_Init+0x50>)
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_COMP1_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_COMP1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_COMP1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_COMP1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_COMP1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_COMP1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_COMP1_Init+0x50>)
 800140c:	f002 fe38 	bl	8004080 <HAL_COMP_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8001416:	f000 fe61 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000280 	.word	0x20000280
 8001424:	40010200 	.word	0x40010200
 8001428:	00800030 	.word	0x00800030

0800142c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_COMP2_Init+0x50>)
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <MX_COMP2_Init+0x54>)
 8001434:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_COMP2_Init+0x50>)
 8001438:	2270      	movs	r2, #112	; 0x70
 800143a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_COMP2_Init+0x50>)
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_COMP2_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_COMP2_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_COMP2_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_COMP2_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_COMP2_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_COMP2_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_COMP2_Init+0x50>)
 8001468:	f002 fe0a 	bl	8004080 <HAL_COMP_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001472:	f000 fe33 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200002ac 	.word	0x200002ac
 8001480:	40010204 	.word	0x40010204

08001484 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 800148a:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <MX_I2C1_SMBUS_Init+0x6c>)
 800148c:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <MX_I2C1_SMBUS_Init+0x70>)
 8001492:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 800149c:	2202      	movs	r2, #2
 800149e:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014d2:	f248 1286 	movw	r2, #33158	; 0x8186
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_I2C1_SMBUS_Init+0x68>)
 80014da:	f006 fa01 	bl	80078e0 <HAL_SMBUS_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 80014e4:	f000 fdfa 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002d8 	.word	0x200002d8
 80014f0:	40005400 	.word	0x40005400
 80014f4:	00707cbb 	.word	0x00707cbb

080014f8 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 80014fe:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <MX_I2C2_SMBUS_Init+0x7c>)
 8001500:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001504:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <MX_I2C2_SMBUS_Init+0x80>)
 8001506:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001510:	2202      	movs	r2, #2
 8001512:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001516:	2201      	movs	r2, #1
 8001518:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 8001546:	f248 1286 	movw	r2, #33158	; 0x8186
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 800154e:	f006 f9c7 	bl	80078e0 <HAL_SMBUS_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001558:	f000 fdc0 	bl	80020dc <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_I2C2_SMBUS_Init+0x78>)
 800155e:	f006 fa77 	bl	8007a50 <HAL_SMBUS_EnableAlert_IT>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001568:	f000 fdb8 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000328 	.word	0x20000328
 8001574:	40005800 	.word	0x40005800
 8001578:	00707cbb 	.word	0x00707cbb

0800157c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <MX_LPUART1_UART_Init+0x94>)
 8001584:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015c6:	f007 f9e1 	bl	800898c <HAL_UART_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80015d0:	f000 fd84 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015d8:	f008 f806 	bl	80095e8 <HAL_UARTEx_SetTxFifoThreshold>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015e2:	f000 fd7b 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015ea:	f008 f83b 	bl	8009664 <HAL_UARTEx_SetRxFifoThreshold>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f000 fd72 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_LPUART1_UART_Init+0x90>)
 80015fa:	f007 ffbc 	bl	8009576 <HAL_UARTEx_DisableFifoMode>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001604:	f000 fd6a 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000378 	.word	0x20000378
 8001610:	40008000 	.word	0x40008000

08001614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <MX_USART2_UART_Init+0x98>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001640:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001644:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165e:	4812      	ldr	r0, [pc, #72]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001660:	f007 f994 	bl	800898c <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800166a:	f000 fd37 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166e:	2100      	movs	r1, #0
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001672:	f007 ffb9 	bl	80095e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800167c:	f000 fd2e 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001684:	f007 ffee 	bl	8009664 <HAL_UARTEx_SetRxFifoThreshold>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800168e:	f000 fd25 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USART2_UART_Init+0x94>)
 8001694:	f007 ff6f 	bl	8009576 <HAL_UARTEx_DisableFifoMode>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800169e:	f000 fd1d 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000040c 	.word	0x2000040c
 80016ac:	40004400 	.word	0x40004400

080016b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <MX_USART3_UART_Init+0x94>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016f8:	4811      	ldr	r0, [pc, #68]	; (8001740 <MX_USART3_UART_Init+0x90>)
 80016fa:	f007 f947 	bl	800898c <HAL_UART_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 fcea 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001708:	2100      	movs	r1, #0
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_USART3_UART_Init+0x90>)
 800170c:	f007 ff6c 	bl	80095e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001716:	f000 fce1 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4808      	ldr	r0, [pc, #32]	; (8001740 <MX_USART3_UART_Init+0x90>)
 800171e:	f007 ffa1 	bl	8009664 <HAL_UARTEx_SetRxFifoThreshold>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001728:	f000 fcd8 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_USART3_UART_Init+0x90>)
 800172e:	f007 ff22 	bl	8009576 <HAL_UARTEx_DisableFifoMode>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001738:	f000 fcd0 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200004a0 	.word	0x200004a0
 8001744:	40004800 	.word	0x40004800

08001748 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800174c:	4b45      	ldr	r3, [pc, #276]	; (8001864 <MX_SAI1_Init+0x11c>)
 800174e:	4a46      	ldr	r2, [pc, #280]	; (8001868 <MX_SAI1_Init+0x120>)
 8001750:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001752:	4b44      	ldr	r3, [pc, #272]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001754:	2200      	movs	r2, #0
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001758:	4b42      	ldr	r3, [pc, #264]	; (8001864 <MX_SAI1_Init+0x11c>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001766:	2200      	movs	r2, #0
 8001768:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <MX_SAI1_Init+0x11c>)
 800176c:	2200      	movs	r2, #0
 800176e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <MX_SAI1_Init+0x11c>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <MX_SAI1_Init+0x11c>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001790:	4a36      	ldr	r2, [pc, #216]	; (800186c <MX_SAI1_Init+0x124>)
 8001792:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001794:	4b33      	ldr	r3, [pc, #204]	; (8001864 <MX_SAI1_Init+0x11c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <MX_SAI1_Init+0x11c>)
 800179c:	2200      	movs	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017c4:	2208      	movs	r2, #8
 80017c6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80017c8:	4b26      	ldr	r3, [pc, #152]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80017f8:	481a      	ldr	r0, [pc, #104]	; (8001864 <MX_SAI1_Init+0x11c>)
 80017fa:	f005 fd25 	bl	8007248 <HAL_SAI_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001804:	f000 fc6a 	bl	80020dc <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <MX_SAI1_Init+0x128>)
 800180a:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <MX_SAI1_Init+0x12c>)
 800180c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_SAI1_Init+0x128>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_SAI1_Init+0x128>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_SAI1_Init+0x128>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_SAI1_Init+0x128>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_SAI1_Init+0x128>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_SAI1_Init+0x128>)
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <MX_SAI1_Init+0x124>)
 8001830:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_SAI1_Init+0x128>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_SAI1_Init+0x128>)
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_SAI1_Init+0x128>)
 8001840:	2200      	movs	r2, #0
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_SAI1_Init+0x128>)
 8001846:	2200      	movs	r2, #0
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800184a:	2302      	movs	r3, #2
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <MX_SAI1_Init+0x128>)
 8001852:	f005 fcc7 	bl	80071e4 <HAL_SAI_InitProtocol>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 800185c:	f000 fc3e 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000534 	.word	0x20000534
 8001868:	40015424 	.word	0x40015424
 800186c:	0002ee00 	.word	0x0002ee00
 8001870:	200005c8 	.word	0x200005c8
 8001874:	40015404 	.word	0x40015404

08001878 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <MX_SAI2_Init+0xc4>)
 800187e:	4a30      	ldr	r2, [pc, #192]	; (8001940 <MX_SAI2_Init+0xc8>)
 8001880:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <MX_SAI2_Init+0xc4>)
 8001884:	2200      	movs	r2, #0
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <MX_SAI2_Init+0xc4>)
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <MX_SAI2_Init+0xc4>)
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <MX_SAI2_Init+0xc4>)
 8001896:	2200      	movs	r2, #0
 8001898:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_SAI2_Init+0xc4>)
 800189c:	2200      	movs	r2, #0
 800189e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_SAI2_Init+0xc4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_SAI2_Init+0xc4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_SAI2_Init+0xc4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_SAI2_Init+0xc4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_SAI2_Init+0xc4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_SAI2_Init+0xc4>)
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <MX_SAI2_Init+0xcc>)
 80018c2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_SAI2_Init+0xc4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_SAI2_Init+0xc4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_SAI2_Init+0xc4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_SAI2_Init+0xc4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_SAI2_Init+0xc4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_SAI2_Init+0xc4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_SAI2_Init+0xc4>)
 80018ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_SAI2_Init+0xc4>)
 80018f4:	2208      	movs	r2, #8
 80018f6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_SAI2_Init+0xc4>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_SAI2_Init+0xc4>)
 8001900:	2200      	movs	r2, #0
 8001902:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <MX_SAI2_Init+0xc4>)
 8001906:	2200      	movs	r2, #0
 8001908:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_SAI2_Init+0xc4>)
 800190c:	2200      	movs	r2, #0
 800190e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_SAI2_Init+0xc4>)
 8001912:	2200      	movs	r2, #0
 8001914:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_SAI2_Init+0xc4>)
 8001918:	2200      	movs	r2, #0
 800191a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_SAI2_Init+0xc4>)
 800191e:	2201      	movs	r2, #1
 8001920:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_SAI2_Init+0xc4>)
 8001924:	2200      	movs	r2, #0
 8001926:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_SAI2_Init+0xc4>)
 800192a:	f005 fc8d 	bl	8007248 <HAL_SAI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001934:	f000 fbd2 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000065c 	.word	0x2000065c
 8001940:	40015804 	.word	0x40015804
 8001944:	0002ee00 	.word	0x0002ee00

08001948 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_SPI3_Init+0x74>)
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <MX_SPI3_Init+0x78>)
 8001950:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_SPI3_Init+0x74>)
 8001954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001958:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_SPI3_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_SPI3_Init+0x74>)
 8001962:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001966:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_SPI3_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_SPI3_Init+0x74>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_SPI3_Init+0x74>)
 8001976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_SPI3_Init+0x74>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_SPI3_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_SPI3_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <MX_SPI3_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_SPI3_Init+0x74>)
 8001996:	2207      	movs	r2, #7
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <MX_SPI3_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_SPI3_Init+0x74>)
 80019a2:	2208      	movs	r2, #8
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_SPI3_Init+0x74>)
 80019a8:	f006 f8a5 	bl	8007af6 <HAL_SPI_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80019b2:	f000 fb93 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200006f0 	.word	0x200006f0
 80019c0:	40003c00 	.word	0x40003c00

080019c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b098      	sub	sp, #96	; 0x60
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80019d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019f6:	463b      	mov	r3, r7
 80019f8:	222c      	movs	r2, #44	; 0x2c
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f008 fc42 	bl	800a286 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a04:	4a4a      	ldr	r2, [pc, #296]	; (8001b30 <MX_TIM1_Init+0x16c>)
 8001a06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a08:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a2e:	483f      	ldr	r0, [pc, #252]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a30:	f006 f904 	bl	8007c3c <HAL_TIM_PWM_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a3a:	f000 fb4f 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4836      	ldr	r0, [pc, #216]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a52:	f006 fdcf 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001a5c:	f000 fb3e 	bl	80020dc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001a60:	2301      	movs	r3, #1
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a70:	461a      	mov	r2, r3
 8001a72:	2101      	movs	r1, #1
 8001a74:	482d      	ldr	r0, [pc, #180]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a76:	f006 fec3 	bl	8008800 <HAL_TIMEx_ConfigBreakInput>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001a80:	f000 fb2c 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001a84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	4827      	ldr	r0, [pc, #156]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001a8e:	f006 feb7 	bl	8008800 <HAL_TIMEx_ConfigBreakInput>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001a98:	f000 fb20 	bl	80020dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9c:	2360      	movs	r3, #96	; 0x60
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abc:	2208      	movs	r2, #8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	481a      	ldr	r0, [pc, #104]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001ac2:	f006 f913 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001acc:	f000 fb06 	bl	80020dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001af8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001b0e:	f006 fdf9 	bl	8008704 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001b18:	f000 fae0 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <MX_TIM1_Init+0x168>)
 8001b1e:	f000 fea1 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001b22:	bf00      	nop
 8001b24:	3760      	adds	r7, #96	; 0x60
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000754 	.word	0x20000754
 8001b30:	40012c00 	.word	0x40012c00

08001b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b46:	463b      	mov	r3, r7
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	615a      	str	r2, [r3, #20]
 8001b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b80:	481d      	ldr	r0, [pc, #116]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b82:	f006 f85b 	bl	8007c3c <HAL_TIM_PWM_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b8c:	f000 faa6 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001ba0:	f006 fd28 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001baa:	f000 fa97 	bl	80020dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bae:	2360      	movs	r3, #96	; 0x60
 8001bb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001bc6:	f006 f891 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001bd0:	f000 fa84 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4807      	ldr	r0, [pc, #28]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001bdc:	f006 f886 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001be6:	f000 fa79 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bea:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <MX_TIM2_Init+0xc4>)
 8001bec:	f000 fe3a 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200007a0 	.word	0x200007a0

08001bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c22:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <MX_TIM3_Init+0xc8>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c46:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c48:	f005 fff8 	bl	8007c3c <HAL_TIM_PWM_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c52:	f000 fa43 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c66:	f006 fcc5 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c70:	f000 fa34 	bl	80020dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c74:	2360      	movs	r3, #96	; 0x60
 8001c76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	2204      	movs	r2, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001c8c:	f006 f82e 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001c96:	f000 fa21 	bl	80020dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001ca2:	f006 f823 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001cac:	f000 fa16 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM3_Init+0xc4>)
 8001cb2:	f000 fdd7 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200007ec 	.word	0x200007ec
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001cee:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <MX_TIM4_Init+0xb0>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d12:	4818      	ldr	r0, [pc, #96]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001d14:	f005 ff92 	bl	8007c3c <HAL_TIM_PWM_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d1e:	f000 f9dd 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4810      	ldr	r0, [pc, #64]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001d32:	f006 fc5f 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d3c:	f000 f9ce 	bl	80020dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d40:	2360      	movs	r3, #96	; 0x60
 8001d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	220c      	movs	r2, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001d58:	f005 ffc8 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d62:	f000 f9bb 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <MX_TIM4_Init+0xac>)
 8001d68:	f000 fd7c 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000838 	.word	0x20000838
 8001d78:	40000800 	.word	0x40000800

08001d7c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b096      	sub	sp, #88	; 0x58
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	222c      	movs	r2, #44	; 0x2c
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f008 fa6c 	bl	800a286 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001db0:	4a33      	ldr	r2, [pc, #204]	; (8001e80 <MX_TIM15_Init+0x104>)
 8001db2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001dce:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001dda:	4828      	ldr	r0, [pc, #160]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001ddc:	f005 ff2e 	bl	8007c3c <HAL_TIM_PWM_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001de6:	f000 f979 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001df2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df6:	4619      	mov	r1, r3
 8001df8:	4820      	ldr	r0, [pc, #128]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001dfa:	f006 fbfb 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001e04:	f000 f96a 	bl	80020dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e10:	2300      	movs	r3, #0
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4813      	ldr	r0, [pc, #76]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001e2e:	f005 ff5d 	bl	8007cec <HAL_TIM_PWM_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001e38:	f000 f950 	bl	80020dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001e60:	f006 fc50 	bl	8008704 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001e6a:	f000 f937 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e6e:	4803      	ldr	r0, [pc, #12]	; (8001e7c <MX_TIM15_Init+0x100>)
 8001e70:	f000 fcf8 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001e74:	bf00      	nop
 8001e76:	3758      	adds	r7, #88	; 0x58
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000884 	.word	0x20000884
 8001e80:	40014000 	.word	0x40014000

08001e84 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	; 0x38
 8001e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eaa:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a7d      	ldr	r2, [pc, #500]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	4a77      	ldr	r2, [pc, #476]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ece:	4b75      	ldr	r3, [pc, #468]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eda:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	4a71      	ldr	r2, [pc, #452]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef2:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a6b      	ldr	r2, [pc, #428]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efe:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b60      	ldr	r3, [pc, #384]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a59      	ldr	r2, [pc, #356]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a53      	ldr	r2, [pc, #332]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <MX_GPIO_Init+0x210>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001f6a:	f002 fcf7 	bl	800495c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001f74:	484c      	ldr	r0, [pc, #304]	; (80020a8 <MX_GPIO_Init+0x214>)
 8001f76:	f002 fc05 	bl	8004784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001f80:	484a      	ldr	r0, [pc, #296]	; (80020ac <MX_GPIO_Init+0x218>)
 8001f82:	f002 fbff 	bl	8004784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f86:	2310      	movs	r3, #16
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f96:	2305      	movs	r3, #5
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa4:	f002 fa44 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fa8:	23e0      	movs	r3, #224	; 0xe0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fbe:	f002 fa37 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001fc2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001fc8:	2311      	movs	r3, #17
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4833      	ldr	r0, [pc, #204]	; (80020a8 <MX_GPIO_Init+0x214>)
 8001fdc:	f002 fa28 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001fe0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001fe6:	2311      	movs	r3, #17
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	482c      	ldr	r0, [pc, #176]	; (80020ac <MX_GPIO_Init+0x218>)
 8001ffa:	f002 fa19 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	4619      	mov	r1, r3
 8002012:	4827      	ldr	r0, [pc, #156]	; (80020b0 <MX_GPIO_Init+0x21c>)
 8002014:	f002 fa0c 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002018:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800202a:	230c      	movs	r3, #12
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	481f      	ldr	r0, [pc, #124]	; (80020b4 <MX_GPIO_Init+0x220>)
 8002036:	f002 f9fb 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800203a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800204c:	230a      	movs	r3, #10
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205a:	f002 f9e9 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800205e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002076:	f002 f9db 	bl	8004430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800207a:	2304      	movs	r3, #4
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800208a:	230c      	movs	r3, #12
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002092:	4619      	mov	r1, r3
 8002094:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_GPIO_Init+0x21c>)
 8002096:	f002 f9cb 	bl	8004430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800209a:	bf00      	nop
 800209c:	3738      	adds	r7, #56	; 0x38
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	48001400 	.word	0x48001400
 80020ac:	48001000 	.word	0x48001000
 80020b0:	48000c00 	.word	0x48000c00
 80020b4:	48000800 	.word	0x48000800

080020b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80020c0:	1d39      	adds	r1, r7, #4
 80020c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c6:	2201      	movs	r2, #1
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <__io_putchar+0x20>)
 80020ca:	f006 fcaf 	bl	8008a2c <HAL_UART_Transmit>
  return ch;
 80020ce:	687b      	ldr	r3, [r7, #4]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000378 	.word	0x20000378

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>
	...

080020e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_MspInit+0x44>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_MspInit+0x44>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6613      	str	r3, [r2, #96]	; 0x60
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_MspInit+0x44>)
 80020fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_MspInit+0x44>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_MspInit+0x44>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	; 0x58
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_MspInit+0x44>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <HAL_ADC_MspInit+0xd4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d154      	bne.n	80021fc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a26      	ldr	r2, [pc, #152]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a20      	ldr	r2, [pc, #128]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021b2:	233f      	movs	r3, #63	; 0x3f
 80021b4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021b6:	230b      	movs	r3, #11
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	4811      	ldr	r0, [pc, #68]	; (800220c <HAL_ADC_MspInit+0xdc>)
 80021c6:	f002 f933 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80021ca:	230a      	movs	r3, #10
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021ce:	230b      	movs	r3, #11
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e0:	f002 f926 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021e8:	230b      	movs	r3, #11
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	4806      	ldr	r0, [pc, #24]	; (8002210 <HAL_ADC_MspInit+0xe0>)
 80021f8:	f002 f91a 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021fc:	bf00      	nop
 80021fe:	3730      	adds	r7, #48	; 0x30
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	50040000 	.word	0x50040000
 8002208:	40021000 	.word	0x40021000
 800220c:	48000800 	.word	0x48000800
 8002210:	48000400 	.word	0x48000400

08002214 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_CAN_MspInit+0x7c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d127      	bne.n	8002286 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_CAN_MspInit+0x80>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_CAN_MspInit+0x80>)
 800223c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_CAN_MspInit+0x80>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_CAN_MspInit+0x80>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <HAL_CAN_MspInit+0x80>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_CAN_MspInit+0x80>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002266:	2303      	movs	r3, #3
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002276:	2309      	movs	r3, #9
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <HAL_CAN_MspInit+0x84>)
 8002282:	f002 f8d5 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40006400 	.word	0x40006400
 8002294:	40021000 	.word	0x40021000
 8002298:	48000c00 	.word	0x48000c00

0800229c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_COMP_MspInit+0x98>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d118      	bne.n	80022f0 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_COMP_MspInit+0x9c>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_COMP_MspInit+0x9c>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_COMP_MspInit+0x9c>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022d6:	2304      	movs	r3, #4
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022da:	2303      	movs	r3, #3
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4814      	ldr	r0, [pc, #80]	; (800233c <HAL_COMP_MspInit+0xa0>)
 80022ea:	f002 f8a1 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80022ee:	e01c      	b.n	800232a <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <HAL_COMP_MspInit+0xa4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d117      	bne.n	800232a <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <HAL_COMP_MspInit+0x9c>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <HAL_COMP_MspInit+0x9c>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_COMP_MspInit+0x9c>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002312:	23c0      	movs	r3, #192	; 0xc0
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002316:	2303      	movs	r3, #3
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <HAL_COMP_MspInit+0xa0>)
 8002326:	f002 f883 	bl	8004430 <HAL_GPIO_Init>
}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40010200 	.word	0x40010200
 8002338:	40021000 	.word	0x40021000
 800233c:	48000400 	.word	0x48000400
 8002340:	40010204 	.word	0x40010204

08002344 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b0b0      	sub	sp, #192	; 0xc0
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	2294      	movs	r2, #148	; 0x94
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f007 ff8e 	bl	800a286 <memset>
  if(hsmbus->Instance==I2C1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a42      	ldr	r2, [pc, #264]	; (8002478 <HAL_SMBUS_MspInit+0x134>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d13c      	bne.n	80023ee <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002374:	2340      	movs	r3, #64	; 0x40
 8002376:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002378:	2300      	movs	r3, #0
 800237a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	4618      	mov	r0, r3
 8002382:	f003 f9d3 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 800238c:	f7ff fea6 	bl	80020dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	4a39      	ldr	r2, [pc, #228]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239c:	4b37      	ldr	r3, [pc, #220]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b0:	2312      	movs	r3, #18
 80023b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023c2:	2304      	movs	r3, #4
 80023c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023cc:	4619      	mov	r1, r3
 80023ce:	482c      	ldr	r0, [pc, #176]	; (8002480 <HAL_SMBUS_MspInit+0x13c>)
 80023d0:	f002 f82e 	bl	8004430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 80023da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023ec:	e03f      	b.n	800246e <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <HAL_SMBUS_MspInit+0x140>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d13a      	bne.n	800246e <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002400:	f107 0318 	add.w	r3, r7, #24
 8002404:	4618      	mov	r0, r3
 8002406:	f003 f991 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8002410:	f7ff fe64 	bl	80020dc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 800241a:	f043 0320 	orr.w	r3, r3, #32
 800241e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800242c:	2307      	movs	r3, #7
 800242e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002432:	2312      	movs	r3, #18
 8002434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002438:	2301      	movs	r3, #1
 800243a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002444:	2304      	movs	r3, #4
 8002446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800244a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800244e:	4619      	mov	r1, r3
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <HAL_SMBUS_MspInit+0x144>)
 8002452:	f001 ffed 	bl	8004430 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 800245c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002460:	6593      	str	r3, [r2, #88]	; 0x58
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_SMBUS_MspInit+0x138>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
}
 800246e:	bf00      	nop
 8002470:	37c0      	adds	r7, #192	; 0xc0
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40005400 	.word	0x40005400
 800247c:	40021000 	.word	0x40021000
 8002480:	48000400 	.word	0x48000400
 8002484:	40005800 	.word	0x40005800
 8002488:	48001400 	.word	0x48001400

0800248c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0b2      	sub	sp, #200	; 0xc8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	2294      	movs	r2, #148	; 0x94
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f007 feea 	bl	800a286 <memset>
  if(huart->Instance==LPUART1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a64      	ldr	r2, [pc, #400]	; (8002648 <HAL_UART_MspInit+0x1bc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d13e      	bne.n	800253a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024bc:	2320      	movs	r3, #32
 80024be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 f92f 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024d4:	f7ff fe02 	bl	80020dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024d8:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	4a5b      	ldr	r2, [pc, #364]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024f0:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	4a55      	ldr	r2, [pc, #340]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80024f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002508:	f002 fa28 	bl	800495c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800250c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002526:	2308      	movs	r3, #8
 8002528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800252c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002530:	4619      	mov	r1, r3
 8002532:	4847      	ldr	r0, [pc, #284]	; (8002650 <HAL_UART_MspInit+0x1c4>)
 8002534:	f001 ff7c 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002538:	e081      	b.n	800263e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a45      	ldr	r2, [pc, #276]	; (8002654 <HAL_UART_MspInit+0x1c8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d13b      	bne.n	80025bc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002544:	2302      	movs	r3, #2
 8002546:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002548:	2300      	movs	r3, #0
 800254a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	4618      	mov	r0, r3
 8002552:	f003 f8eb 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800255c:	f7ff fdbe 	bl	80020dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002560:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_UART_MspInit+0x1c0>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	4a39      	ldr	r2, [pc, #228]	; (800264c <HAL_UART_MspInit+0x1c0>)
 8002566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256a:	6593      	str	r3, [r2, #88]	; 0x58
 800256c:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_UART_MspInit+0x1c0>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_UART_MspInit+0x1c0>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	4a33      	ldr	r2, [pc, #204]	; (800264c <HAL_UART_MspInit+0x1c0>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002584:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_UART_MspInit+0x1c0>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002590:	2378      	movs	r3, #120	; 0x78
 8002592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a8:	2307      	movs	r3, #7
 80025aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025b2:	4619      	mov	r1, r3
 80025b4:	4828      	ldr	r0, [pc, #160]	; (8002658 <HAL_UART_MspInit+0x1cc>)
 80025b6:	f001 ff3b 	bl	8004430 <HAL_GPIO_Init>
}
 80025ba:	e040      	b.n	800263e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <HAL_UART_MspInit+0x1d0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d13b      	bne.n	800263e <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025c6:	2304      	movs	r3, #4
 80025c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ce:	f107 0320 	add.w	r3, r7, #32
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 f8aa 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_MspInit+0x156>
      Error_Handler();
 80025de:	f7ff fd7d 	bl	80020dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_UART_MspInit+0x1c0>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <HAL_UART_MspInit+0x1c0>)
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_UART_MspInit+0x1c0>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800262c:	2307      	movs	r3, #7
 800262e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002632:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002636:	4619      	mov	r1, r3
 8002638:	4807      	ldr	r0, [pc, #28]	; (8002658 <HAL_UART_MspInit+0x1cc>)
 800263a:	f001 fef9 	bl	8004430 <HAL_GPIO_Init>
}
 800263e:	bf00      	nop
 8002640:	37c8      	adds	r7, #200	; 0xc8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40008000 	.word	0x40008000
 800264c:	40021000 	.word	0x40021000
 8002650:	48001800 	.word	0x48001800
 8002654:	40004400 	.word	0x40004400
 8002658:	48000c00 	.word	0x48000c00
 800265c:	40004800 	.word	0x40004800

08002660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_SPI_MspInit+0x7c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d127      	bne.n	80026d2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_SPI_MspInit+0x80>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a16      	ldr	r2, [pc, #88]	; (80026e0 <HAL_SPI_MspInit+0x80>)
 8002688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <HAL_SPI_MspInit+0x80>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_SPI_MspInit+0x80>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_SPI_MspInit+0x80>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_SPI_MspInit+0x80>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026b2:	2338      	movs	r3, #56	; 0x38
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026c2:	2306      	movs	r3, #6
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <HAL_SPI_MspInit+0x84>)
 80026ce:	f001 feaf 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40003c00 	.word	0x40003c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	48000400 	.word	0x48000400

080026e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08e      	sub	sp, #56	; 0x38
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a51      	ldr	r2, [pc, #324]	; (800284c <HAL_TIM_PWM_MspInit+0x164>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d139      	bne.n	800277e <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 800270c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270e:	4a50      	ldr	r2, [pc, #320]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 8002710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002714:	6613      	str	r3, [r2, #96]	; 0x60
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	4a4a      	ldr	r2, [pc, #296]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800274a:	2301      	movs	r3, #1
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	4619      	mov	r1, r3
 8002754:	483f      	ldr	r0, [pc, #252]	; (8002854 <HAL_TIM_PWM_MspInit+0x16c>)
 8002756:	f001 fe6b 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800275a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800276c:	2303      	movs	r3, #3
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002774:	4619      	mov	r1, r3
 8002776:	4837      	ldr	r0, [pc, #220]	; (8002854 <HAL_TIM_PWM_MspInit+0x16c>)
 8002778:	f001 fe5a 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800277c:	e062      	b.n	8002844 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002786:	d10c      	bne.n	80027a2 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	4a30      	ldr	r2, [pc, #192]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6593      	str	r3, [r2, #88]	; 0x58
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	69bb      	ldr	r3, [r7, #24]
}
 80027a0:	e050      	b.n	8002844 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2c      	ldr	r2, [pc, #176]	; (8002858 <HAL_TIM_PWM_MspInit+0x170>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10c      	bne.n	80027c6 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	4a27      	ldr	r2, [pc, #156]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	6593      	str	r3, [r2, #88]	; 0x58
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
}
 80027c4:	e03e      	b.n	8002844 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a24      	ldr	r2, [pc, #144]	; (800285c <HAL_TIM_PWM_MspInit+0x174>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d128      	bne.n	8002822 <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027ee:	f043 0310 	orr.w	r3, r3, #16
 80027f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002810:	2302      	movs	r3, #2
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	4619      	mov	r1, r3
 800281a:	480e      	ldr	r0, [pc, #56]	; (8002854 <HAL_TIM_PWM_MspInit+0x16c>)
 800281c:	f001 fe08 	bl	8004430 <HAL_GPIO_Init>
}
 8002820:	e010      	b.n	8002844 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_TIM_PWM_MspInit+0x178>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10b      	bne.n	8002844 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 800282e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6613      	str	r3, [r2, #96]	; 0x60
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_TIM_PWM_MspInit+0x168>)
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
}
 8002844:	bf00      	nop
 8002846:	3738      	adds	r7, #56	; 0x38
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40021000 	.word	0x40021000
 8002854:	48001000 	.word	0x48001000
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800
 8002860:	40014000 	.word	0x40014000

08002864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	; 0x38
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a73      	ldr	r2, [pc, #460]	; (8002a50 <HAL_TIM_MspPostInit+0x1ec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d11d      	bne.n	80028c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a72      	ldr	r2, [pc, #456]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	6a3b      	ldr	r3, [r7, #32]
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 800289e:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028b0:	2301      	movs	r3, #1
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	4619      	mov	r1, r3
 80028ba:	4867      	ldr	r0, [pc, #412]	; (8002a58 <HAL_TIM_MspPostInit+0x1f4>)
 80028bc:	f001 fdb8 	bl	8004430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80028c0:	e0c2      	b.n	8002a48 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d13a      	bne.n	8002942 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	4a60      	ldr	r2, [pc, #384]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d8:	4b5e      	ldr	r3, [pc, #376]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e4:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	4a5a      	ldr	r2, [pc, #360]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f0:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80028f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028fc:	2301      	movs	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800290c:	2301      	movs	r3, #1
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291a:	f001 fd89 	bl	8004430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800291e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002930:	2301      	movs	r3, #1
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4848      	ldr	r0, [pc, #288]	; (8002a5c <HAL_TIM_MspPostInit+0x1f8>)
 800293c:	f001 fd78 	bl	8004430 <HAL_GPIO_Init>
}
 8002940:	e082      	b.n	8002a48 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a46      	ldr	r2, [pc, #280]	; (8002a60 <HAL_TIM_MspPostInit+0x1fc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d138      	bne.n	80029be <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294c:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	4a3a      	ldr	r2, [pc, #232]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800297c:	2301      	movs	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800298c:	2302      	movs	r3, #2
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	4831      	ldr	r0, [pc, #196]	; (8002a5c <HAL_TIM_MspPostInit+0x1f8>)
 8002998:	f001 fd4a 	bl	8004430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ac:	2302      	movs	r3, #2
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	482b      	ldr	r0, [pc, #172]	; (8002a64 <HAL_TIM_MspPostInit+0x200>)
 80029b8:	f001 fd3a 	bl	8004430 <HAL_GPIO_Init>
}
 80029bc:	e044      	b.n	8002a48 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <HAL_TIM_MspPostInit+0x204>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d11d      	bne.n	8002a04 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029f2:	2302      	movs	r3, #2
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fa:	4619      	mov	r1, r3
 80029fc:	481b      	ldr	r0, [pc, #108]	; (8002a6c <HAL_TIM_MspPostInit+0x208>)
 80029fe:	f001 fd17 	bl	8004430 <HAL_GPIO_Init>
}
 8002a02:	e021      	b.n	8002a48 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <HAL_TIM_MspPostInit+0x20c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d11c      	bne.n	8002a48 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_TIM_MspPostInit+0x1f0>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	2300      	movs	r3, #0
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002a38:	230e      	movs	r3, #14
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a40:	4619      	mov	r1, r3
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <HAL_TIM_MspPostInit+0x1f8>)
 8002a44:	f001 fcf4 	bl	8004430 <HAL_GPIO_Init>
}
 8002a48:	bf00      	nop
 8002a4a:	3738      	adds	r7, #56	; 0x38
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	48001000 	.word	0x48001000
 8002a5c:	48000400 	.word	0x48000400
 8002a60:	40000400 	.word	0x40000400
 8002a64:	48000800 	.word	0x48000800
 8002a68:	40000800 	.word	0x40000800
 8002a6c:	48000c00 	.word	0x48000c00
 8002a70:	40014000 	.word	0x40014000

08002a74 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_SAI_MspInit+0x150>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d124      	bne.n	8002ad0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002a86:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_SAI_MspInit+0x154>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002a8e:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a98:	6613      	str	r3, [r2, #96]	; 0x60
 8002a9a:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002aa6:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <HAL_SAI_MspInit+0x154>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4a46      	ldr	r2, [pc, #280]	; (8002bc8 <HAL_SAI_MspInit+0x154>)
 8002aae:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002ab0:	2374      	movs	r3, #116	; 0x74
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002ac0:	230d      	movs	r3, #13
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4841      	ldr	r0, [pc, #260]	; (8002bd0 <HAL_SAI_MspInit+0x15c>)
 8002acc:	f001 fcb0 	bl	8004430 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3f      	ldr	r2, [pc, #252]	; (8002bd4 <HAL_SAI_MspInit+0x160>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d135      	bne.n	8002b46 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_SAI_MspInit+0x154>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	4a39      	ldr	r2, [pc, #228]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aec:	6613      	str	r3, [r2, #96]	; 0x60
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002afa:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_SAI_MspInit+0x154>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4a31      	ldr	r2, [pc, #196]	; (8002bc8 <HAL_SAI_MspInit+0x154>)
 8002b02:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b04:	2308      	movs	r3, #8
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002b14:	230d      	movs	r3, #13
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	482c      	ldr	r0, [pc, #176]	; (8002bd0 <HAL_SAI_MspInit+0x15c>)
 8002b20:	f001 fc86 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b24:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002b36:	230d      	movs	r3, #13
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4825      	ldr	r0, [pc, #148]	; (8002bd8 <HAL_SAI_MspInit+0x164>)
 8002b42:	f001 fc75 	bl	8004430 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <HAL_SAI_MspInit+0x168>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d135      	bne.n	8002bbc <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_SAI_MspInit+0x16c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10b      	bne.n	8002b70 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b58:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002b5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b62:	6613      	str	r3, [r2, #96]	; 0x60
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_SAI_MspInit+0x158>)
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_SAI_MspInit+0x16c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_SAI_MspInit+0x16c>)
 8002b78:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002b7a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002b8c:	230d      	movs	r3, #13
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4619      	mov	r1, r3
 8002b96:	4813      	ldr	r0, [pc, #76]	; (8002be4 <HAL_SAI_MspInit+0x170>)
 8002b98:	f001 fc4a 	bl	8004430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b9c:	2340      	movs	r3, #64	; 0x40
 8002b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002bac:	230d      	movs	r3, #13
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <HAL_SAI_MspInit+0x174>)
 8002bb8:	f001 fc3a 	bl	8004430 <HAL_GPIO_Init>

    }
}
 8002bbc:	bf00      	nop
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40015404 	.word	0x40015404
 8002bc8:	200008d0 	.word	0x200008d0
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	48001000 	.word	0x48001000
 8002bd4:	40015424 	.word	0x40015424
 8002bd8:	48001400 	.word	0x48001400
 8002bdc:	40015804 	.word	0x40015804
 8002be0:	200008d4 	.word	0x200008d4
 8002be4:	48000400 	.word	0x48000400
 8002be8:	48000800 	.word	0x48000800

08002bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <NMI_Handler+0x4>

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c38:	f000 f958 	bl	8002eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return 1;
 8002c44:	2301      	movs	r3, #1
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_kill>:

int _kill(int pid, int sig)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c5a:	f007 fb67 	bl	800a32c <__errno>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2216      	movs	r2, #22
 8002c62:	601a      	str	r2, [r3, #0]
  return -1;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_exit>:

void _exit (int status)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ffe7 	bl	8002c50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c82:	e7fe      	b.n	8002c82 <_exit+0x12>

08002c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e00a      	b.n	8002cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c96:	f3af 8000 	nop.w
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	60ba      	str	r2, [r7, #8]
 8002ca2:	b2ca      	uxtb	r2, r1
 8002ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dbf0      	blt.n	8002c96 <_read+0x12>
  }

  return len;
 8002cb4:	687b      	ldr	r3, [r7, #4]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e009      	b.n	8002ce4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	60ba      	str	r2, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff f9ed 	bl	80020b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	dbf1      	blt.n	8002cd0 <_write+0x12>
  }
  return len;
 8002cec:	687b      	ldr	r3, [r7, #4]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_close>:

int _close(int file)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d1e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <_isatty>:

int _isatty(int file)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <_sbrk+0x5c>)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <_sbrk+0x60>)
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_sbrk+0x64>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <_sbrk+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d207      	bcs.n	8002da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d90:	f007 facc 	bl	800a32c <__errno>
 8002d94:	4603      	mov	r3, r0
 8002d96:	220c      	movs	r2, #12
 8002d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	e009      	b.n	8002db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <_sbrk+0x64>)
 8002db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200a0000 	.word	0x200a0000
 8002dc0:	00000400 	.word	0x00000400
 8002dc4:	200008d8 	.word	0x200008d8
 8002dc8:	20000a30 	.word	0x20000a30

08002dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <SystemInit+0x20>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <SystemInit+0x20>)
 8002dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002df4:	f7ff ffea 	bl	8002dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002dfa:	490d      	ldr	r1, [pc, #52]	; (8002e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	; (8002e34 <LoopForever+0xe>)
  movs r3, #0
 8002dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e00:	e002      	b.n	8002e08 <LoopCopyDataInit>

08002e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e06:	3304      	adds	r3, #4

08002e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e0c:	d3f9      	bcc.n	8002e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e10:	4c0a      	ldr	r4, [pc, #40]	; (8002e3c <LoopForever+0x16>)
  movs r3, #0
 8002e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e14:	e001      	b.n	8002e1a <LoopFillZerobss>

08002e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e18:	3204      	adds	r2, #4

08002e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e1c:	d3fb      	bcc.n	8002e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e1e:	f007 fa8b 	bl	800a338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e22:	f7fe f895 	bl	8000f50 <main>

08002e26 <LoopForever>:

LoopForever:
    b LoopForever
 8002e26:	e7fe      	b.n	8002e26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e28:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002e34:	0800c5dc 	.word	0x0800c5dc
  ldr r2, =_sbss
 8002e38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002e3c:	20000a2c 	.word	0x20000a2c

08002e40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e40:	e7fe      	b.n	8002e40 <ADC1_IRQHandler>

08002e42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	f001 fabb 	bl	80043c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e52:	2000      	movs	r0, #0
 8002e54:	f000 f80e 	bl	8002e74 <HAL_InitTick>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	71fb      	strb	r3, [r7, #7]
 8002e62:	e001      	b.n	8002e68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e64:	f7ff f940 	bl	80020e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e68:	79fb      	ldrb	r3, [r7, #7]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_InitTick+0x6c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d023      	beq.n	8002ed0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_InitTick+0x70>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_InitTick+0x6c>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	4619      	mov	r1, r3
 8002e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fab9 	bl	8004416 <HAL_SYSTICK_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d809      	bhi.n	8002ec4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	f001 fa91 	bl	80043de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_InitTick+0x74>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e007      	b.n	8002ed4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e004      	b.n	8002ed4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e001      	b.n	8002ed4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_IncTick+0x20>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_IncTick+0x24>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_IncTick+0x24>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	200008dc 	.word	0x200008dc

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	200008dc 	.word	0x200008dc

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d005      	beq.n	8002f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_Delay+0x44>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f52:	bf00      	nop
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d8f7      	bhi.n	8002f54 <HAL_Delay+0x28>
  {
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000008 	.word	0x20000008

08002f74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3360      	adds	r3, #96	; 0x60
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <LL_ADC_SetOffset+0x44>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	4313      	orrs	r3, r2
 800300c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	03fff000 	.word	0x03fff000

08003024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3360      	adds	r3, #96	; 0x60
 8003032:	461a      	mov	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	431a      	orrs	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	615a      	str	r2, [r3, #20]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3330      	adds	r3, #48	; 0x30
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	4413      	add	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	211f      	movs	r1, #31
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 011f 	and.w	r1, r3, #31
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	431a      	orrs	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3314      	adds	r3, #20
 8003114:	461a      	mov	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	0e5b      	lsrs	r3, r3, #25
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	4413      	add	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0d1b      	lsrs	r3, r3, #20
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2107      	movs	r1, #7
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	401a      	ands	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	0d1b      	lsrs	r3, r3, #20
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	43db      	mvns	r3, r3
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0318 	and.w	r3, r3, #24
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003180:	40d9      	lsrs	r1, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	400b      	ands	r3, r1
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	431a      	orrs	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	0007ffff 	.word	0x0007ffff

080031a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6093      	str	r3, [r2, #8]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031dc:	d101      	bne.n	80031e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322c:	d101      	bne.n	8003232 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <LL_ADC_IsEnabled+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_ADC_IsEnabled+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d101      	bne.n	800327e <LL_ADC_REG_IsConversionOngoing+0x18>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d101      	bne.n	80032a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e129      	b.n	8003522 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fe ff27 	bl	8002130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff67 	bl	80031c8 <LL_ADC_IsDeepPowerDownEnabled>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d004      	beq.n	800330a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff4d 	bl	80031a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff82 	bl	8003218 <LL_ADC_IsInternalRegulatorEnabled>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d115      	bne.n	8003346 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ff66 	bl	80031f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003324:	4b81      	ldr	r3, [pc, #516]	; (800352c <HAL_ADC_Init+0x278>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	4a81      	ldr	r2, [pc, #516]	; (8003530 <HAL_ADC_Init+0x27c>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003338:	e002      	b.n	8003340 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f9      	bne.n	800333a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff64 	bl	8003218 <LL_ADC_IsInternalRegulatorEnabled>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10d      	bne.n	8003372 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff75 	bl	8003266 <LL_ADC_REG_IsConversionOngoing>
 800337c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 80c2 	bne.w	8003510 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 80be 	bne.w	8003510 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800339c:	f043 0202 	orr.w	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff49 	bl	8003240 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b4:	485f      	ldr	r0, [pc, #380]	; (8003534 <HAL_ADC_Init+0x280>)
 80033b6:	f7ff ff43 	bl	8003240 <LL_ADC_IsEnabled>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	485c      	ldr	r0, [pc, #368]	; (8003538 <HAL_ADC_Init+0x284>)
 80033c8:	f7ff fdd4 	bl	8002f74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	7e5b      	ldrb	r3, [r3, #25]
 80033d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d106      	bne.n	8003408 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	3b01      	subs	r3, #1
 8003400:	045b      	lsls	r3, r3, #17
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b44      	ldr	r3, [pc, #272]	; (800353c <HAL_ADC_Init+0x288>)
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	430b      	orrs	r3, r1
 8003436:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff25 	bl	800328c <LL_ADC_INJ_IsConversionOngoing>
 8003442:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d140      	bne.n	80034cc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d13d      	bne.n	80034cc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7e1b      	ldrb	r3, [r3, #24]
 8003458:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800345a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003462:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003472:	f023 0306 	bic.w	r3, r3, #6
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	69b9      	ldr	r1, [r7, #24]
 800347c:	430b      	orrs	r3, r1
 800347e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003486:	2b01      	cmp	r3, #1
 8003488:	d118      	bne.n	80034bc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ac:	430a      	orrs	r2, r1
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	611a      	str	r2, [r3, #16]
 80034ba:	e007      	b.n	80034cc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10c      	bne.n	80034ee <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f023 010f 	bic.w	r1, r3, #15
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
 80034ec:	e007      	b.n	80034fe <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 020f 	bic.w	r2, r2, #15
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	659a      	str	r2, [r3, #88]	; 0x58
 800350e:	e007      	b.n	8003520 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003520:	7ffb      	ldrb	r3, [r7, #31]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000
 8003530:	053e2d63 	.word	0x053e2d63
 8003534:	50040000 	.word	0x50040000
 8003538:	50040300 	.word	0x50040300
 800353c:	fff0c007 	.word	0xfff0c007

08003540 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b0b6      	sub	sp, #216	; 0xd8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x22>
 800355e:	2302      	movs	r3, #2
 8003560:	e3d5      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x7ce>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fe79 	bl	8003266 <LL_ADC_REG_IsConversionOngoing>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 83ba 	bne.w	8003cf0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d824      	bhi.n	80035d6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	3b02      	subs	r3, #2
 8003592:	2b03      	cmp	r3, #3
 8003594:	d81b      	bhi.n	80035ce <HAL_ADC_ConfigChannel+0x8e>
 8003596:	a201      	add	r2, pc, #4	; (adr r2, 800359c <HAL_ADC_ConfigChannel+0x5c>)
 8003598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	080035b5 	.word	0x080035b5
 80035a4:	080035bd 	.word	0x080035bd
 80035a8:	080035c5 	.word	0x080035c5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80035ac:	230c      	movs	r3, #12
 80035ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035b2:	e010      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80035b4:	2312      	movs	r3, #18
 80035b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035ba:	e00c      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80035bc:	2318      	movs	r3, #24
 80035be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035c2:	e008      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80035c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035cc:	e003      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035ce:	2306      	movs	r3, #6
 80035d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035d4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80035e4:	f7ff fd62 	bl	80030ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fe3a 	bl	8003266 <LL_ADC_REG_IsConversionOngoing>
 80035f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fe46 	bl	800328c <LL_ADC_INJ_IsConversionOngoing>
 8003600:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 81bf 	bne.w	800398c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800360e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 81ba 	bne.w	800398c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003620:	d10f      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	4619      	mov	r1, r3
 800362e:	f7ff fd69 	bl	8003104 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fd23 	bl	8003086 <LL_ADC_SetSamplingTimeCommonConfig>
 8003640:	e00e      	b.n	8003660 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	461a      	mov	r2, r3
 8003650:	f7ff fd58 	bl	8003104 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fd13 	bl	8003086 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	08db      	lsrs	r3, r3, #3
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d00a      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6919      	ldr	r1, [r3, #16]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003692:	f7ff fca3 	bl	8002fdc <LL_ADC_SetOffset>
 8003696:	e179      	b.n	800398c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fcc0 	bl	8003024 <LL_ADC_GetOffsetChannel>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x184>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fcb5 	bl	8003024 <LL_ADC_GetOffsetChannel>
 80036ba:	4603      	mov	r3, r0
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	f003 021f 	and.w	r2, r3, #31
 80036c2:	e01e      	b.n	8003702 <HAL_ADC_ConfigChannel+0x1c2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fcaa 	bl	8003024 <LL_ADC_GetOffsetChannel>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80036f2:	2320      	movs	r3, #32
 80036f4:	e004      	b.n	8003700 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80036f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <HAL_ADC_ConfigChannel+0x1da>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	0e9b      	lsrs	r3, r3, #26
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	e018      	b.n	800374c <HAL_ADC_ConfigChannel+0x20c>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800372e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003736:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800373e:	2320      	movs	r3, #32
 8003740:	e004      	b.n	800374c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800374c:	429a      	cmp	r2, r3
 800374e:	d106      	bne.n	800375e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2200      	movs	r2, #0
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fc79 	bl	8003050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2101      	movs	r1, #1
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fc5d 	bl	8003024 <LL_ADC_GetOffsetChannel>
 800376a:	4603      	mov	r3, r0
 800376c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_ADC_ConfigChannel+0x24a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fc52 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	e01e      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x288>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fc47 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80037a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80037b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e004      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80037bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x2a0>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	e018      	b.n	8003812 <HAL_ADC_ConfigChannel+0x2d2>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80037f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80037fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e004      	b.n	8003812 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003812:	429a      	cmp	r2, r3
 8003814:	d106      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2200      	movs	r2, #0
 800381c:	2101      	movs	r1, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fc16 	bl	8003050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fbfa 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003830:	4603      	mov	r3, r0
 8003832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x310>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fbef 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003846:	4603      	mov	r3, r0
 8003848:	0e9b      	lsrs	r3, r3, #26
 800384a:	f003 021f 	and.w	r2, r3, #31
 800384e:	e01e      	b.n	800388e <HAL_ADC_ConfigChannel+0x34e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2102      	movs	r1, #2
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fbe4 	bl	8003024 <LL_ADC_GetOffsetChannel>
 800385c:	4603      	mov	r3, r0
 800385e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800386e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800387e:	2320      	movs	r3, #32
 8003880:	e004      	b.n	800388c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x366>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	0e9b      	lsrs	r3, r3, #26
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	e014      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x390>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80038b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80038ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80038c2:	2320      	movs	r3, #32
 80038c4:	e004      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80038c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d106      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fbb7 	bl	8003050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2103      	movs	r1, #3
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fb9b 	bl	8003024 <LL_ADC_GetOffsetChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <HAL_ADC_ConfigChannel+0x3ce>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2103      	movs	r1, #3
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fb90 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003904:	4603      	mov	r3, r0
 8003906:	0e9b      	lsrs	r3, r3, #26
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	e017      	b.n	800393e <HAL_ADC_ConfigChannel+0x3fe>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2103      	movs	r1, #3
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fb85 	bl	8003024 <LL_ADC_GetOffsetChannel>
 800391a:	4603      	mov	r3, r0
 800391c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800392a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003930:	2320      	movs	r3, #32
 8003932:	e003      	b.n	800393c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x416>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	e011      	b.n	800397a <HAL_ADC_ConfigChannel+0x43a>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003966:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800396e:	2320      	movs	r3, #32
 8003970:	e003      	b.n	800397a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800397a:	429a      	cmp	r2, r3
 800397c:	d106      	bne.n	800398c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	2103      	movs	r1, #3
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fb62 	bl	8003050 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc55 	bl	8003240 <LL_ADC_IsEnabled>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 813f 	bne.w	8003c1c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7ff fbd6 	bl	800315c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a8e      	ldr	r2, [pc, #568]	; (8003bf0 <HAL_ADC_ConfigChannel+0x6b0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	f040 8130 	bne.w	8003c1c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x4a4>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0e9b      	lsrs	r3, r3, #26
 80039d2:	3301      	adds	r3, #1
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2b09      	cmp	r3, #9
 80039da:	bf94      	ite	ls
 80039dc:	2301      	movls	r3, #1
 80039de:	2300      	movhi	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e019      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x4d8>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e003      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	bf94      	ite	ls
 8003a12:	2301      	movls	r3, #1
 8003a14:	2300      	movhi	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d079      	beq.n	8003b10 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x4f8>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0e9b      	lsrs	r3, r3, #26
 8003a2e:	3301      	adds	r3, #1
 8003a30:	069b      	lsls	r3, r3, #26
 8003a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a36:	e015      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x524>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003a50:	2320      	movs	r3, #32
 8003a52:	e003      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	069b      	lsls	r3, r3, #26
 8003a60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x544>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0e9b      	lsrs	r3, r3, #26
 8003a76:	3301      	adds	r3, #1
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	e017      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x574>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2101      	movs	r1, #1
 8003ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab4:	ea42 0103 	orr.w	r1, r2, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x59a>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	3301      	adds	r3, #1
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	051b      	lsls	r3, r3, #20
 8003ad8:	e018      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x5cc>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003af2:	2320      	movs	r3, #32
 8003af4:	e003      	b.n	8003afe <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	e080      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x5ec>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	3301      	adds	r3, #1
 8003b24:	069b      	lsls	r3, r3, #26
 8003b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b2a:	e015      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x618>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003b44:	2320      	movs	r3, #32
 8003b46:	e003      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	3301      	adds	r3, #1
 8003b52:	069b      	lsls	r3, r3, #26
 8003b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x638>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0e9b      	lsrs	r3, r3, #26
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	e017      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x668>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	61bb      	str	r3, [r7, #24]
  return result;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003b90:	2320      	movs	r3, #32
 8003b92:	e003      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x694>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	3b1e      	subs	r3, #30
 8003bcc:	051b      	lsls	r3, r3, #20
 8003bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	e01d      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x6d0>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	60fb      	str	r3, [r7, #12]
  return result;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d103      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e005      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x6bc>
 8003bf0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f003 021f 	and.w	r2, r3, #31
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	3b1e      	subs	r3, #30
 8003c0a:	051b      	lsls	r3, r3, #20
 8003c0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c16:	4619      	mov	r1, r3
 8003c18:	f7ff fa74 	bl	8003104 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d06c      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c28:	483c      	ldr	r0, [pc, #240]	; (8003d1c <HAL_ADC_ConfigChannel+0x7dc>)
 8003c2a:	f7ff f9c9 	bl	8002fc0 <LL_ADC_GetCommonPathInternalCh>
 8003c2e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a3a      	ldr	r2, [pc, #232]	; (8003d20 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d127      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d121      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a35      	ldr	r2, [pc, #212]	; (8003d24 <HAL_ADC_ConfigChannel+0x7e4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d157      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	482f      	ldr	r0, [pc, #188]	; (8003d1c <HAL_ADC_ConfigChannel+0x7dc>)
 8003c5e:	f7ff f99c 	bl	8002f9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <HAL_ADC_ConfigChannel+0x7e8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <HAL_ADC_ConfigChannel+0x7ec>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c7c:	e002      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f9      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c8a:	e03a      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <HAL_ADC_ConfigChannel+0x7f0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d113      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <HAL_ADC_ConfigChannel+0x7e4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d12a      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4819      	ldr	r0, [pc, #100]	; (8003d1c <HAL_ADC_ConfigChannel+0x7dc>)
 8003cb8:	f7ff f96f 	bl	8002f9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cbc:	e021      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_ADC_ConfigChannel+0x7f4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d11c      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d116      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d111      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <HAL_ADC_ConfigChannel+0x7dc>)
 8003cea:	f7ff f956 	bl	8002f9a <LL_ADC_SetCommonPathInternalCh>
 8003cee:	e008      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	37d8      	adds	r7, #216	; 0xd8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	80080000 	.word	0x80080000
 8003d1c:	50040300 	.word	0x50040300
 8003d20:	c7520000 	.word	0xc7520000
 8003d24:	50040000 	.word	0x50040000
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	053e2d63 	.word	0x053e2d63
 8003d30:	cb840000 	.word	0xcb840000
 8003d34:	80000001 	.word	0x80000001

08003d38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e0ed      	b.n	8003f26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fa5c 	bl	8002214 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d6c:	f7ff f8d2 	bl	8002f14 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d72:	e012      	b.n	8003d9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d74:	f7ff f8ce 	bl	8002f14 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b0a      	cmp	r3, #10
 8003d80:	d90b      	bls.n	8003d9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2205      	movs	r2, #5
 8003d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0c5      	b.n	8003f26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0e5      	beq.n	8003d74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0202 	bic.w	r2, r2, #2
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db8:	f7ff f8ac 	bl	8002f14 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dbe:	e012      	b.n	8003de6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dc0:	f7ff f8a8 	bl	8002f14 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b0a      	cmp	r3, #10
 8003dcc:	d90b      	bls.n	8003de6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e09f      	b.n	8003f26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	7e1b      	ldrb	r3, [r3, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d108      	bne.n	8003e0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e007      	b.n	8003e1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7e5b      	ldrb	r3, [r3, #25]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d108      	bne.n	8003e38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e007      	b.n	8003e48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7e9b      	ldrb	r3, [r3, #26]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d108      	bne.n	8003e62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e007      	b.n	8003e72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0220 	bic.w	r2, r2, #32
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	7edb      	ldrb	r3, [r3, #27]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0210 	bic.w	r2, r2, #16
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e007      	b.n	8003e9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0210 	orr.w	r2, r2, #16
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d108      	bne.n	8003eb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0208 	orr.w	r2, r2, #8
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e007      	b.n	8003ec6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0208 	bic.w	r2, r2, #8
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7f5b      	ldrb	r3, [r3, #29]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d108      	bne.n	8003ee0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0204 	orr.w	r2, r2, #4
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e007      	b.n	8003ef0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0204 	bic.w	r2, r2, #4
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4904      	ldr	r1, [pc, #16]	; (8003f50 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40010400 	.word	0x40010400

08003f54 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	4904      	ldr	r1, [pc, #16]	; (8003f78 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010400 	.word	0x40010400

08003f7c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4904      	ldr	r1, [pc, #16]	; (8003f9c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]

}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	4904      	ldr	r1, [pc, #16]	; (8003fe8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]

}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40010400 	.word	0x40010400

08003fec <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	4904      	ldr	r1, [pc, #16]	; (8004010 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	608b      	str	r3, [r1, #8]

}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010400 	.word	0x40010400

08004014 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	4904      	ldr	r1, [pc, #16]	; (8004034 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4313      	orrs	r3, r2
 8004026:	60cb      	str	r3, [r1, #12]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40010400 	.word	0x40010400

08004038 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	43db      	mvns	r3, r3
 8004048:	4904      	ldr	r1, [pc, #16]	; (800405c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800404a:	4013      	ands	r3, r2
 800404c:	60cb      	str	r3, [r1, #12]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010400 	.word	0x40010400

08004060 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6153      	str	r3, [r2, #20]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e0d1      	b.n	8004240 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040aa:	d102      	bne.n	80040b2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e0c6      	b.n	8004240 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d115      	bne.n	80040ea <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040cc:	4b5f      	ldr	r3, [pc, #380]	; (800424c <HAL_COMP_Init+0x1cc>)
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	4a5e      	ldr	r2, [pc, #376]	; (800424c <HAL_COMP_Init+0x1cc>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6613      	str	r3, [r2, #96]	; 0x60
 80040d8:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_COMP_Init+0x1cc>)
 80040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fe f8d9 	bl	800229c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_COMP_Init+0x1d0>)
 8004122:	4013      	ands	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	6979      	ldr	r1, [r7, #20]
 800412a:	430b      	orrs	r3, r1
 800412c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004136:	d106      	bne.n	8004146 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_COMP_Init+0x1d4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a45      	ldr	r2, [pc, #276]	; (8004254 <HAL_COMP_Init+0x1d4>)
 800413e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e005      	b.n	8004152 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004146:	4b43      	ldr	r3, [pc, #268]	; (8004254 <HAL_COMP_Init+0x1d4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a42      	ldr	r2, [pc, #264]	; (8004254 <HAL_COMP_Init+0x1d4>)
 800414c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004150:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d016      	beq.n	800418e <HAL_COMP_Init+0x10e>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d113      	bne.n	800418e <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004166:	4b3c      	ldr	r3, [pc, #240]	; (8004258 <HAL_COMP_Init+0x1d8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	4a3b      	ldr	r2, [pc, #236]	; (800425c <HAL_COMP_Init+0x1dc>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004180:	e002      	b.n	8004188 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3b01      	subs	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f9      	bne.n	8004182 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a33      	ldr	r2, [pc, #204]	; (8004260 <HAL_COMP_Init+0x1e0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d102      	bne.n	800419e <HAL_COMP_Init+0x11e>
 8004198:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800419c:	e001      	b.n	80041a2 <HAL_COMP_Init+0x122>
 800419e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041a2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d037      	beq.n	8004220 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80041bc:	6938      	ldr	r0, [r7, #16]
 80041be:	f7ff ff03 	bl	8003fc8 <LL_EXTI_EnableRisingTrig_0_31>
 80041c2:	e002      	b.n	80041ca <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80041c4:	6938      	ldr	r0, [r7, #16]
 80041c6:	f7ff ff11 	bl	8003fec <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80041d6:	6938      	ldr	r0, [r7, #16]
 80041d8:	f7ff ff1c 	bl	8004014 <LL_EXTI_EnableFallingTrig_0_31>
 80041dc:	e002      	b.n	80041e4 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80041de:	6938      	ldr	r0, [r7, #16]
 80041e0:	f7ff ff2a 	bl	8004038 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80041e4:	6938      	ldr	r0, [r7, #16]
 80041e6:	f7ff ff3b 	bl	8004060 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80041f6:	6938      	ldr	r0, [r7, #16]
 80041f8:	f7ff fec0 	bl	8003f7c <LL_EXTI_EnableEvent_0_31>
 80041fc:	e002      	b.n	8004204 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80041fe:	6938      	ldr	r0, [r7, #16]
 8004200:	f7ff fece 	bl	8003fa0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004210:	6938      	ldr	r0, [r7, #16]
 8004212:	f7ff fe8d 	bl	8003f30 <LL_EXTI_EnableIT_0_31>
 8004216:	e009      	b.n	800422c <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004218:	6938      	ldr	r0, [r7, #16]
 800421a:	f7ff fe9b 	bl	8003f54 <LL_EXTI_DisableIT_0_31>
 800421e:	e005      	b.n	800422c <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004220:	6938      	ldr	r0, [r7, #16]
 8004222:	f7ff febd 	bl	8003fa0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8004226:	6938      	ldr	r0, [r7, #16]
 8004228:	f7ff fe94 	bl	8003f54 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004240:	7ffb      	ldrb	r3, [r7, #31]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	ff207d03 	.word	0xff207d03
 8004254:	40010204 	.word	0x40010204
 8004258:	20000000 	.word	0x20000000
 800425c:	053e2d63 	.word	0x053e2d63
 8004260:	40010200 	.word	0x40010200

08004264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800428c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004296:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	60d3      	str	r3, [r2, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <__NVIC_GetPriorityGrouping+0x18>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0307 	and.w	r3, r3, #7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db0a      	blt.n	80042f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	490c      	ldr	r1, [pc, #48]	; (8004314 <__NVIC_SetPriority+0x4c>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	0112      	lsls	r2, r2, #4
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	440b      	add	r3, r1
 80042ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f0:	e00a      	b.n	8004308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4908      	ldr	r1, [pc, #32]	; (8004318 <__NVIC_SetPriority+0x50>)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3b04      	subs	r3, #4
 8004300:	0112      	lsls	r2, r2, #4
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	440b      	add	r3, r1
 8004306:	761a      	strb	r2, [r3, #24]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000e100 	.word	0xe000e100
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	; 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f1c3 0307 	rsb	r3, r3, #7
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf28      	it	cs
 800433a:	2304      	movcs	r3, #4
 800433c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3304      	adds	r3, #4
 8004342:	2b06      	cmp	r3, #6
 8004344:	d902      	bls.n	800434c <NVIC_EncodePriority+0x30>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3b03      	subs	r3, #3
 800434a:	e000      	b.n	800434e <NVIC_EncodePriority+0x32>
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	401a      	ands	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004364:	f04f 31ff 	mov.w	r1, #4294967295
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	43d9      	mvns	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	4313      	orrs	r3, r2
         );
}
 8004376:	4618      	mov	r0, r3
 8004378:	3724      	adds	r7, #36	; 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004394:	d301      	bcc.n	800439a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004396:	2301      	movs	r3, #1
 8004398:	e00f      	b.n	80043ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <SysTick_Config+0x40>)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3b01      	subs	r3, #1
 80043a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043a2:	210f      	movs	r1, #15
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f7ff ff8e 	bl	80042c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <SysTick_Config+0x40>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043b2:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <SysTick_Config+0x40>)
 80043b4:	2207      	movs	r2, #7
 80043b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff47 	bl	8004264 <__NVIC_SetPriorityGrouping>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043f0:	f7ff ff5c 	bl	80042ac <__NVIC_GetPriorityGrouping>
 80043f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff8e 	bl	800431c <NVIC_EncodePriority>
 8004400:	4602      	mov	r2, r0
 8004402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff5d 	bl	80042c8 <__NVIC_SetPriority>
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ffb0 	bl	8004384 <SysTick_Config>
 8004424:	4603      	mov	r3, r0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800443e:	e166      	b.n	800470e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2101      	movs	r1, #1
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8158 	beq.w	8004708 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d005      	beq.n	8004470 <HAL_GPIO_Init+0x40>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d130      	bne.n	80044d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	2203      	movs	r2, #3
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044a6:	2201      	movs	r2, #1
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 0201 	and.w	r2, r3, #1
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d017      	beq.n	800450e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2203      	movs	r2, #3
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d123      	bne.n	8004562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	08da      	lsrs	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3208      	adds	r2, #8
 8004522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4013      	ands	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	08da      	lsrs	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3208      	adds	r2, #8
 800455c:	6939      	ldr	r1, [r7, #16]
 800455e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	2203      	movs	r2, #3
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4013      	ands	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0203 	and.w	r2, r3, #3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80b2 	beq.w	8004708 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a4:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_GPIO_Init+0x2fc>)
 80045a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a8:	4a60      	ldr	r2, [pc, #384]	; (800472c <HAL_GPIO_Init+0x2fc>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6613      	str	r3, [r2, #96]	; 0x60
 80045b0:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_GPIO_Init+0x2fc>)
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045bc:	4a5c      	ldr	r2, [pc, #368]	; (8004730 <HAL_GPIO_Init+0x300>)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	089b      	lsrs	r3, r3, #2
 80045c2:	3302      	adds	r3, #2
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	220f      	movs	r2, #15
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045e6:	d02b      	beq.n	8004640 <HAL_GPIO_Init+0x210>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a52      	ldr	r2, [pc, #328]	; (8004734 <HAL_GPIO_Init+0x304>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d025      	beq.n	800463c <HAL_GPIO_Init+0x20c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a51      	ldr	r2, [pc, #324]	; (8004738 <HAL_GPIO_Init+0x308>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d01f      	beq.n	8004638 <HAL_GPIO_Init+0x208>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a50      	ldr	r2, [pc, #320]	; (800473c <HAL_GPIO_Init+0x30c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d019      	beq.n	8004634 <HAL_GPIO_Init+0x204>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a4f      	ldr	r2, [pc, #316]	; (8004740 <HAL_GPIO_Init+0x310>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d013      	beq.n	8004630 <HAL_GPIO_Init+0x200>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a4e      	ldr	r2, [pc, #312]	; (8004744 <HAL_GPIO_Init+0x314>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00d      	beq.n	800462c <HAL_GPIO_Init+0x1fc>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a4d      	ldr	r2, [pc, #308]	; (8004748 <HAL_GPIO_Init+0x318>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <HAL_GPIO_Init+0x1f8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a4c      	ldr	r2, [pc, #304]	; (800474c <HAL_GPIO_Init+0x31c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_GPIO_Init+0x1f4>
 8004620:	2307      	movs	r3, #7
 8004622:	e00e      	b.n	8004642 <HAL_GPIO_Init+0x212>
 8004624:	2308      	movs	r3, #8
 8004626:	e00c      	b.n	8004642 <HAL_GPIO_Init+0x212>
 8004628:	2306      	movs	r3, #6
 800462a:	e00a      	b.n	8004642 <HAL_GPIO_Init+0x212>
 800462c:	2305      	movs	r3, #5
 800462e:	e008      	b.n	8004642 <HAL_GPIO_Init+0x212>
 8004630:	2304      	movs	r3, #4
 8004632:	e006      	b.n	8004642 <HAL_GPIO_Init+0x212>
 8004634:	2303      	movs	r3, #3
 8004636:	e004      	b.n	8004642 <HAL_GPIO_Init+0x212>
 8004638:	2302      	movs	r3, #2
 800463a:	e002      	b.n	8004642 <HAL_GPIO_Init+0x212>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_GPIO_Init+0x212>
 8004640:	2300      	movs	r3, #0
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	f002 0203 	and.w	r2, r2, #3
 8004648:	0092      	lsls	r2, r2, #2
 800464a:	4093      	lsls	r3, r2
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004652:	4937      	ldr	r1, [pc, #220]	; (8004730 <HAL_GPIO_Init+0x300>)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	3302      	adds	r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004660:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <HAL_GPIO_Init+0x320>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	43db      	mvns	r3, r3
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004684:	4a32      	ldr	r2, [pc, #200]	; (8004750 <HAL_GPIO_Init+0x320>)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800468a:	4b31      	ldr	r3, [pc, #196]	; (8004750 <HAL_GPIO_Init+0x320>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	43db      	mvns	r3, r3
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046ae:	4a28      	ldr	r2, [pc, #160]	; (8004750 <HAL_GPIO_Init+0x320>)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046b4:	4b26      	ldr	r3, [pc, #152]	; (8004750 <HAL_GPIO_Init+0x320>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d8:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <HAL_GPIO_Init+0x320>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046de:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_GPIO_Init+0x320>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <HAL_GPIO_Init+0x320>)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	f47f ae91 	bne.w	8004440 <HAL_GPIO_Init+0x10>
  }
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40021000 	.word	0x40021000
 8004730:	40010000 	.word	0x40010000
 8004734:	48000400 	.word	0x48000400
 8004738:	48000800 	.word	0x48000800
 800473c:	48000c00 	.word	0x48000c00
 8004740:	48001000 	.word	0x48001000
 8004744:	48001400 	.word	0x48001400
 8004748:	48001800 	.word	0x48001800
 800474c:	48001c00 	.word	0x48001c00
 8004750:	40010400 	.word	0x40010400

08004754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	887b      	ldrh	r3, [r7, #2]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e001      	b.n	8004776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
 8004790:	4613      	mov	r3, r2
 8004792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004794:	787b      	ldrb	r3, [r7, #1]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800479a:	887a      	ldrh	r2, [r7, #2]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047a0:	e002      	b.n	80047a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c2:	6013      	str	r3, [r2, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40007000 	.word	0x40007000

080047d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <HAL_PWREx_GetVoltageRange+0x3c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e4:	d102      	bne.n	80047ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80047e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ea:	e00b      	b.n	8004804 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_PWREx_GetVoltageRange+0x3c>)
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fa:	d102      	bne.n	8004802 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80047fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004800:	e000      	b.n	8004804 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004802:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40007000 	.word	0x40007000

08004814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d141      	bne.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004822:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d131      	bne.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004830:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004836:	4a46      	ldr	r2, [pc, #280]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800483c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004848:	4a41      	ldr	r2, [pc, #260]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800484e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004850:	4b40      	ldr	r3, [pc, #256]	; (8004954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2232      	movs	r2, #50	; 0x32
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	0c9b      	lsrs	r3, r3, #18
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004866:	e002      	b.n	800486e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3b01      	subs	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800486e:	4b38      	ldr	r3, [pc, #224]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d102      	bne.n	8004882 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f2      	bne.n	8004868 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004882:	4b33      	ldr	r3, [pc, #204]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488e:	d158      	bne.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e057      	b.n	8004944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004894:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800489a:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048a4:	e04d      	b.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ac:	d141      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ae:	4b28      	ldr	r3, [pc, #160]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ba:	d131      	bne.n	8004920 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c2:	4a23      	ldr	r2, [pc, #140]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048cc:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048d4:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2232      	movs	r2, #50	; 0x32
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	0c9b      	lsrs	r3, r3, #18
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f2:	e002      	b.n	80048fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	d102      	bne.n	800490e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f2      	bne.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d112      	bne.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e011      	b.n	8004944 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004926:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004930:	e007      	b.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800493a:	4a05      	ldr	r2, [pc, #20]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004940:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	40007000 	.word	0x40007000
 8004954:	20000000 	.word	0x20000000
 8004958:	431bde83 	.word	0x431bde83

0800495c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800496a:	6053      	str	r3, [r2, #4]
}
 800496c:	bf00      	nop
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40007000 	.word	0x40007000

0800497c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f000 bc08 	b.w	80051a0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004990:	4b96      	ldr	r3, [pc, #600]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800499a:	4b94      	ldr	r3, [pc, #592]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80e4 	beq.w	8004b7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_RCC_OscConfig+0x4c>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	f040 808b 	bne.w	8004ad6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f040 8087 	bne.w	8004ad6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049c8:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_OscConfig+0x64>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e3df      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_RCC_OscConfig+0x7e>
 80049f0:	4b7e      	ldr	r3, [pc, #504]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f8:	e005      	b.n	8004a06 <HAL_RCC_OscConfig+0x8a>
 80049fa:	4b7c      	ldr	r3, [pc, #496]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 80049fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d223      	bcs.n	8004a52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fdcc 	bl	80055ac <RCC_SetFlashLatencyFromMSIRange>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e3c0      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a1e:	4b73      	ldr	r3, [pc, #460]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a72      	ldr	r2, [pc, #456]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b70      	ldr	r3, [pc, #448]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	496d      	ldr	r1, [pc, #436]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a3c:	4b6b      	ldr	r3, [pc, #428]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	4968      	ldr	r1, [pc, #416]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	e025      	b.n	8004a9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a52:	4b66      	ldr	r3, [pc, #408]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a65      	ldr	r2, [pc, #404]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a58:	f043 0308 	orr.w	r3, r3, #8
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4960      	ldr	r1, [pc, #384]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a70:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	495b      	ldr	r1, [pc, #364]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fd8c 	bl	80055ac <RCC_SetFlashLatencyFromMSIRange>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e380      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a9e:	f000 fcc1 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	4b51      	ldr	r3, [pc, #324]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	4950      	ldr	r1, [pc, #320]	; (8004bf0 <HAL_RCC_OscConfig+0x274>)
 8004ab0:	5ccb      	ldrb	r3, [r1, r3]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a4e      	ldr	r2, [pc, #312]	; (8004bf4 <HAL_RCC_OscConfig+0x278>)
 8004abc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004abe:	4b4e      	ldr	r3, [pc, #312]	; (8004bf8 <HAL_RCC_OscConfig+0x27c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe f9d6 	bl	8002e74 <HAL_InitTick>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d052      	beq.n	8004b78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	e364      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d032      	beq.n	8004b44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ade:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a42      	ldr	r2, [pc, #264]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aea:	f7fe fa13 	bl	8002f14 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004af2:	f7fe fa0f 	bl	8002f14 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e34d      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b04:	4b39      	ldr	r3, [pc, #228]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a35      	ldr	r2, [pc, #212]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b16:	f043 0308 	orr.w	r3, r3, #8
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b33      	ldr	r3, [pc, #204]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4930      	ldr	r1, [pc, #192]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	492b      	ldr	r1, [pc, #172]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
 8004b42:	e01a      	b.n	8004b7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b44:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a28      	ldr	r2, [pc, #160]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b50:	f7fe f9e0 	bl	8002f14 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b58:	f7fe f9dc 	bl	8002f14 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e31a      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f0      	bne.n	8004b58 <HAL_RCC_OscConfig+0x1dc>
 8004b76:	e000      	b.n	8004b7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d073      	beq.n	8004c6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_OscConfig+0x21c>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	d10e      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d10b      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d063      	beq.n	8004c6c <HAL_RCC_OscConfig+0x2f0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d15f      	bne.n	8004c6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e2f7      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb8:	d106      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x24c>
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e025      	b.n	8004c14 <HAL_RCC_OscConfig+0x298>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd0:	d114      	bne.n	8004bfc <HAL_RCC_OscConfig+0x280>
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a05      	ldr	r2, [pc, #20]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a02      	ldr	r2, [pc, #8]	; (8004bec <HAL_RCC_OscConfig+0x270>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e013      	b.n	8004c14 <HAL_RCC_OscConfig+0x298>
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	0800c1ec 	.word	0x0800c1ec
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	20000004 	.word	0x20000004
 8004bfc:	4ba0      	ldr	r3, [pc, #640]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a9f      	ldr	r2, [pc, #636]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4b9d      	ldr	r3, [pc, #628]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a9c      	ldr	r2, [pc, #624]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fe f97a 	bl	8002f14 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c24:	f7fe f976 	bl	8002f14 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e2b4      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c36:	4b92      	ldr	r3, [pc, #584]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x2a8>
 8004c42:	e014      	b.n	8004c6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe f966 	bl	8002f14 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fe f962 	bl	8002f14 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e2a0      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5e:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x2d0>
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d060      	beq.n	8004d3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_OscConfig+0x310>
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d119      	bne.n	8004cba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d116      	bne.n	8004cba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c8c:	4b7c      	ldr	r3, [pc, #496]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x328>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e27d      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca4:	4b76      	ldr	r3, [pc, #472]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	4973      	ldr	r1, [pc, #460]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb8:	e040      	b.n	8004d3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d023      	beq.n	8004d0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc2:	4b6f      	ldr	r3, [pc, #444]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a6e      	ldr	r2, [pc, #440]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fe f921 	bl	8002f14 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fe f91d 	bl	8002f14 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e25b      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce8:	4b65      	ldr	r3, [pc, #404]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b62      	ldr	r3, [pc, #392]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	495f      	ldr	r1, [pc, #380]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
 8004d08:	e018      	b.n	8004d3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a5c      	ldr	r2, [pc, #368]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fe f8fd 	bl	8002f14 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fe f8f9 	bl	8002f14 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e237      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d30:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d03c      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01c      	beq.n	8004d8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d50:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d56:	4a4a      	ldr	r2, [pc, #296]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d60:	f7fe f8d8 	bl	8002f14 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d68:	f7fe f8d4 	bl	8002f14 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e212      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d7a:	4b41      	ldr	r3, [pc, #260]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ef      	beq.n	8004d68 <HAL_RCC_OscConfig+0x3ec>
 8004d88:	e01b      	b.n	8004dc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8a:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d90:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004d92:	f023 0301 	bic.w	r3, r3, #1
 8004d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9a:	f7fe f8bb 	bl	8002f14 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da2:	f7fe f8b7 	bl	8002f14 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e1f5      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db4:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ef      	bne.n	8004da2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80a6 	beq.w	8004f1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10d      	bne.n	8004dfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dea:	6593      	str	r3, [r2, #88]	; 0x58
 8004dec:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfc:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <HAL_RCC_OscConfig+0x508>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d118      	bne.n	8004e3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <HAL_RCC_OscConfig+0x508>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <HAL_RCC_OscConfig+0x508>)
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e14:	f7fe f87e 	bl	8002f14 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1c:	f7fe f87a 	bl	8002f14 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e1b8      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2e:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <HAL_RCC_OscConfig+0x508>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d108      	bne.n	8004e54 <HAL_RCC_OscConfig+0x4d8>
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e48:	4a0d      	ldr	r2, [pc, #52]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e52:	e029      	b.n	8004ea8 <HAL_RCC_OscConfig+0x52c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d115      	bne.n	8004e88 <HAL_RCC_OscConfig+0x50c>
 8004e5c:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004e64:	f043 0304 	orr.w	r3, r3, #4
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	4a03      	ldr	r2, [pc, #12]	; (8004e80 <HAL_RCC_OscConfig+0x504>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e7c:	e014      	b.n	8004ea8 <HAL_RCC_OscConfig+0x52c>
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40007000 	.word	0x40007000
 8004e88:	4b9d      	ldr	r3, [pc, #628]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	4a9c      	ldr	r2, [pc, #624]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e98:	4b99      	ldr	r3, [pc, #612]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	4a98      	ldr	r2, [pc, #608]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004ea0:	f023 0304 	bic.w	r3, r3, #4
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d016      	beq.n	8004ede <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fe f830 	bl	8002f14 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fe f82c 	bl	8002f14 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e168      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	4b8c      	ldr	r3, [pc, #560]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ed      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x53c>
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fe f819 	bl	8002f14 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7fe f815 	bl	8002f14 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e151      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004efc:	4b80      	ldr	r3, [pc, #512]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ed      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	4a7a      	ldr	r2, [pc, #488]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d03c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01c      	beq.n	8004f6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f30:	4b73      	ldr	r3, [pc, #460]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f36:	4a72      	ldr	r2, [pc, #456]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f40:	f7fd ffe8 	bl	8002f14 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f48:	f7fd ffe4 	bl	8002f14 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e122      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f5a:	4b69      	ldr	r3, [pc, #420]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ef      	beq.n	8004f48 <HAL_RCC_OscConfig+0x5cc>
 8004f68:	e01b      	b.n	8004fa2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f6a:	4b65      	ldr	r3, [pc, #404]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f70:	4a63      	ldr	r2, [pc, #396]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fd ffcb 	bl	8002f14 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f82:	f7fd ffc7 	bl	8002f14 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e105      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f94:	4b5a      	ldr	r3, [pc, #360]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1ef      	bne.n	8004f82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80f9 	beq.w	800519e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	f040 80cf 	bne.w	8005154 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fb6:	4b52      	ldr	r3, [pc, #328]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0203 	and.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d12c      	bne.n	8005024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d123      	bne.n	8005024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d11b      	bne.n	8005024 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d113      	bne.n	8005024 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	3b01      	subs	r3, #1
 800500a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800500c:	429a      	cmp	r2, r3
 800500e:	d109      	bne.n	8005024 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	3b01      	subs	r3, #1
 800501e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d071      	beq.n	8005108 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d068      	beq.n	80050fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800502a:	4b35      	ldr	r3, [pc, #212]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d105      	bne.n	8005042 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005036:	4b32      	ldr	r3, [pc, #200]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0ac      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005046:	4b2e      	ldr	r3, [pc, #184]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2d      	ldr	r2, [pc, #180]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 800504c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005050:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005052:	f7fd ff5f 	bl	8002f14 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505a:	f7fd ff5b 	bl	8002f14 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e099      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800506c:	4b24      	ldr	r3, [pc, #144]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f0      	bne.n	800505a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	4b21      	ldr	r3, [pc, #132]	; (8005104 <HAL_RCC_OscConfig+0x788>)
 800507e:	4013      	ands	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005088:	3a01      	subs	r2, #1
 800508a:	0112      	lsls	r2, r2, #4
 800508c:	4311      	orrs	r1, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005092:	0212      	lsls	r2, r2, #8
 8005094:	4311      	orrs	r1, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800509a:	0852      	lsrs	r2, r2, #1
 800509c:	3a01      	subs	r2, #1
 800509e:	0552      	lsls	r2, r2, #21
 80050a0:	4311      	orrs	r1, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050a6:	0852      	lsrs	r2, r2, #1
 80050a8:	3a01      	subs	r2, #1
 80050aa:	0652      	lsls	r2, r2, #25
 80050ac:	4311      	orrs	r1, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050b2:	06d2      	lsls	r2, r2, #27
 80050b4:	430a      	orrs	r2, r1
 80050b6:	4912      	ldr	r1, [pc, #72]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0f      	ldr	r2, [pc, #60]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 80050c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 80050ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050d4:	f7fd ff1e 	bl	8002f14 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fd ff1a 	bl	8002f14 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e058      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_RCC_OscConfig+0x784>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050fa:	e050      	b.n	800519e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e04f      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
 8005100:	40021000 	.word	0x40021000
 8005104:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d144      	bne.n	800519e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a23      	ldr	r2, [pc, #140]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 800511a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800511e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 8005126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800512a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800512c:	f7fd fef2 	bl	8002f14 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005134:	f7fd feee 	bl	8002f14 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e02c      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x7b8>
 8005152:	e024      	b.n	800519e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d01f      	beq.n	800519a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 8005160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005166:	f7fd fed5 	bl	8002f14 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516e:	f7fd fed1 	bl	8002f14 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e00f      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f0      	bne.n	800516e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	4905      	ldr	r1, [pc, #20]	; (80051a8 <HAL_RCC_OscConfig+0x82c>)
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <HAL_RCC_OscConfig+0x830>)
 8005194:	4013      	ands	r3, r2
 8005196:	60cb      	str	r3, [r1, #12]
 8005198:	e001      	b.n	800519e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40021000 	.word	0x40021000
 80051ac:	feeefffc 	.word	0xfeeefffc

080051b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e11d      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051c8:	4b90      	ldr	r3, [pc, #576]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d910      	bls.n	80051f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b8d      	ldr	r3, [pc, #564]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 020f 	bic.w	r2, r3, #15
 80051de:	498b      	ldr	r1, [pc, #556]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e6:	4b89      	ldr	r3, [pc, #548]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e105      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	4b81      	ldr	r3, [pc, #516]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005210:	429a      	cmp	r2, r3
 8005212:	d908      	bls.n	8005226 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005214:	4b7e      	ldr	r3, [pc, #504]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	497b      	ldr	r1, [pc, #492]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d079      	beq.n	8005326 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b03      	cmp	r3, #3
 8005238:	d11e      	bne.n	8005278 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523a:	4b75      	ldr	r3, [pc, #468]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0dc      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800524a:	f000 fa09 	bl	8005660 <RCC_GetSysClockFreqFromPLLSource>
 800524e:	4603      	mov	r3, r0
 8005250:	4a70      	ldr	r2, [pc, #448]	; (8005414 <HAL_RCC_ClockConfig+0x264>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d946      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005256:	4b6e      	ldr	r3, [pc, #440]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d140      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005262:	4b6b      	ldr	r3, [pc, #428]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526a:	4a69      	ldr	r2, [pc, #420]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 800526c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005270:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005272:	2380      	movs	r3, #128	; 0x80
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e035      	b.n	80052e4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d107      	bne.n	8005290 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005280:	4b63      	ldr	r3, [pc, #396]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d115      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0b9      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005298:	4b5d      	ldr	r3, [pc, #372]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0ad      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052a8:	4b59      	ldr	r3, [pc, #356]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0a5      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80052b8:	f000 f8b4 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80052bc:	4603      	mov	r3, r0
 80052be:	4a55      	ldr	r2, [pc, #340]	; (8005414 <HAL_RCC_ClockConfig+0x264>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d90f      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052c4:	4b52      	ldr	r3, [pc, #328]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d109      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052d0:	4b4f      	ldr	r3, [pc, #316]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d8:	4a4d      	ldr	r2, [pc, #308]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80052da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052e4:	4b4a      	ldr	r3, [pc, #296]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 0203 	bic.w	r2, r3, #3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4947      	ldr	r1, [pc, #284]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f6:	f7fd fe0d 	bl	8002f14 <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fc:	e00a      	b.n	8005314 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fe:	f7fd fe09 	bl	8002f14 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e077      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005314:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 020c 	and.w	r2, r3, #12
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	429a      	cmp	r2, r3
 8005324:	d1eb      	bne.n	80052fe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b80      	cmp	r3, #128	; 0x80
 800532a:	d105      	bne.n	8005338 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a37      	ldr	r2, [pc, #220]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005336:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d010      	beq.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005350:	429a      	cmp	r2, r3
 8005352:	d208      	bcs.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b2e      	ldr	r3, [pc, #184]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	492b      	ldr	r1, [pc, #172]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d210      	bcs.n	8005396 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005374:	4b25      	ldr	r3, [pc, #148]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 020f 	bic.w	r2, r3, #15
 800537c:	4923      	ldr	r1, [pc, #140]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <HAL_RCC_ClockConfig+0x25c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d001      	beq.n	8005396 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e036      	b.n	8005404 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	4918      	ldr	r1, [pc, #96]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4910      	ldr	r1, [pc, #64]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053d4:	f000 f826 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80053d8:	4602      	mov	r2, r0
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <HAL_RCC_ClockConfig+0x260>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	490c      	ldr	r1, [pc, #48]	; (8005418 <HAL_RCC_ClockConfig+0x268>)
 80053e6:	5ccb      	ldrb	r3, [r1, r3]
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <HAL_RCC_ClockConfig+0x26c>)
 80053f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <HAL_RCC_ClockConfig+0x270>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fd fd3b 	bl	8002e74 <HAL_InitTick>
 80053fe:	4603      	mov	r3, r0
 8005400:	73fb      	strb	r3, [r7, #15]

  return status;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40022000 	.word	0x40022000
 8005410:	40021000 	.word	0x40021000
 8005414:	04c4b400 	.word	0x04c4b400
 8005418:	0800c1ec 	.word	0x0800c1ec
 800541c:	20000000 	.word	0x20000000
 8005420:	20000004 	.word	0x20000004

08005424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	; 0x24
 8005428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005432:	4b3e      	ldr	r3, [pc, #248]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800543c:	4b3b      	ldr	r3, [pc, #236]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x34>
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d121      	bne.n	8005496 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d11e      	bne.n	8005496 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005458:	4b34      	ldr	r3, [pc, #208]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d107      	bne.n	8005474 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005464:	4b31      	ldr	r3, [pc, #196]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 8005466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	61fb      	str	r3, [r7, #28]
 8005472:	e005      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005474:	4b2d      	ldr	r3, [pc, #180]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005480:	4a2b      	ldr	r2, [pc, #172]	; (8005530 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005488:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10d      	bne.n	80054ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005494:	e00a      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b04      	cmp	r3, #4
 800549a:	d102      	bne.n	80054a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <HAL_RCC_GetSysClockFreq+0x110>)
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	e004      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054a8:	4b23      	ldr	r3, [pc, #140]	; (8005538 <HAL_RCC_GetSysClockFreq+0x114>)
 80054aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d134      	bne.n	800551c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054b2:	4b1e      	ldr	r3, [pc, #120]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d003      	beq.n	80054ca <HAL_RCC_GetSysClockFreq+0xa6>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d003      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0xac>
 80054c8:	e005      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054ca:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <HAL_RCC_GetSysClockFreq+0x110>)
 80054cc:	617b      	str	r3, [r7, #20]
      break;
 80054ce:	e005      	b.n	80054dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_RCC_GetSysClockFreq+0x114>)
 80054d2:	617b      	str	r3, [r7, #20]
      break;
 80054d4:	e002      	b.n	80054dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	617b      	str	r3, [r7, #20]
      break;
 80054da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	3301      	adds	r3, #1
 80054e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054ea:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	fb03 f202 	mul.w	r2, r3, r2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_GetSysClockFreq+0x108>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	0e5b      	lsrs	r3, r3, #25
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	3301      	adds	r3, #1
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800551c:	69bb      	ldr	r3, [r7, #24]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3724      	adds	r7, #36	; 0x24
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000
 8005530:	0800c204 	.word	0x0800c204
 8005534:	00f42400 	.word	0x00f42400
 8005538:	007a1200 	.word	0x007a1200

0800553c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005540:	4b03      	ldr	r3, [pc, #12]	; (8005550 <HAL_RCC_GetHCLKFreq+0x14>)
 8005542:	681b      	ldr	r3, [r3, #0]
}
 8005544:	4618      	mov	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000000 	.word	0x20000000

08005554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005558:	f7ff fff0 	bl	800553c <HAL_RCC_GetHCLKFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	4904      	ldr	r1, [pc, #16]	; (800557c <HAL_RCC_GetPCLK1Freq+0x28>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005574:	4618      	mov	r0, r3
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40021000 	.word	0x40021000
 800557c:	0800c1fc 	.word	0x0800c1fc

08005580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005584:	f7ff ffda 	bl	800553c <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	0adb      	lsrs	r3, r3, #11
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4904      	ldr	r1, [pc, #16]	; (80055a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40021000 	.word	0x40021000
 80055a8:	0800c1fc 	.word	0x0800c1fc

080055ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055b8:	4b27      	ldr	r3, [pc, #156]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055c4:	f7ff f906 	bl	80047d4 <HAL_PWREx_GetVoltageRange>
 80055c8:	6178      	str	r0, [r7, #20]
 80055ca:	e014      	b.n	80055f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055cc:	4b22      	ldr	r3, [pc, #136]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	4a21      	ldr	r2, [pc, #132]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d6:	6593      	str	r3, [r2, #88]	; 0x58
 80055d8:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055e4:	f7ff f8f6 	bl	80047d4 <HAL_PWREx_GetVoltageRange>
 80055e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055ea:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ee:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055fc:	d10b      	bne.n	8005616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b80      	cmp	r3, #128	; 0x80
 8005602:	d913      	bls.n	800562c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2ba0      	cmp	r3, #160	; 0xa0
 8005608:	d902      	bls.n	8005610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800560a:	2302      	movs	r3, #2
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e00d      	b.n	800562c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005610:	2301      	movs	r3, #1
 8005612:	613b      	str	r3, [r7, #16]
 8005614:	e00a      	b.n	800562c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b7f      	cmp	r3, #127	; 0x7f
 800561a:	d902      	bls.n	8005622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800561c:	2302      	movs	r3, #2
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	e004      	b.n	800562c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b70      	cmp	r3, #112	; 0x70
 8005626:	d101      	bne.n	800562c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005628:	2301      	movs	r3, #1
 800562a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f023 020f 	bic.w	r2, r3, #15
 8005634:	4909      	ldr	r1, [pc, #36]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	d001      	beq.n	800564e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40021000 	.word	0x40021000
 800565c:	40022000 	.word	0x40022000

08005660 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005666:	4b2d      	ldr	r3, [pc, #180]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d00b      	beq.n	800568e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d825      	bhi.n	80056c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d008      	beq.n	8005694 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d11f      	bne.n	80056c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800568a:	613b      	str	r3, [r7, #16]
    break;
 800568c:	e01f      	b.n	80056ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005690:	613b      	str	r3, [r7, #16]
    break;
 8005692:	e01c      	b.n	80056ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005694:	4b21      	ldr	r3, [pc, #132]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d107      	bne.n	80056b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056a0:	4b1e      	ldr	r3, [pc, #120]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e005      	b.n	80056bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056b0:	4b1a      	ldr	r3, [pc, #104]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80056bc:	4a1a      	ldr	r2, [pc, #104]	; (8005728 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c4:	613b      	str	r3, [r7, #16]
    break;
 80056c6:	e002      	b.n	80056ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
    break;
 80056cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	3301      	adds	r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056dc:	4b0f      	ldr	r3, [pc, #60]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	fb03 f202 	mul.w	r2, r3, r2
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	0e5b      	lsrs	r3, r3, #25
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	3301      	adds	r3, #1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800570e:	683b      	ldr	r3, [r7, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	40021000 	.word	0x40021000
 8005720:	00f42400 	.word	0x00f42400
 8005724:	007a1200 	.word	0x007a1200
 8005728:	0800c204 	.word	0x0800c204

0800572c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005734:	2300      	movs	r3, #0
 8005736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005738:	2300      	movs	r3, #0
 800573a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005744:	2b00      	cmp	r3, #0
 8005746:	d040      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574c:	2b80      	cmp	r3, #128	; 0x80
 800574e:	d02a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d825      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005754:	2b60      	cmp	r3, #96	; 0x60
 8005756:	d026      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005758:	2b60      	cmp	r3, #96	; 0x60
 800575a:	d821      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d006      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d81d      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d009      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d010      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800576c:	e018      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800576e:	4b89      	ldr	r3, [pc, #548]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4a88      	ldr	r2, [pc, #544]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005778:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800577a:	e015      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f001 fa34 	bl	8006bf0 <RCCEx_PLLSAI1_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800578c:	e00c      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3320      	adds	r3, #32
 8005792:	2100      	movs	r1, #0
 8005794:	4618      	mov	r0, r3
 8005796:	f001 fb1f 	bl	8006dd8 <RCCEx_PLLSAI2_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800579e:	e003      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	74fb      	strb	r3, [r7, #19]
      break;
 80057a4:	e000      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80057a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057ae:	4b79      	ldr	r3, [pc, #484]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057b4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057bc:	4975      	ldr	r1, [pc, #468]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80057c4:	e001      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d047      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d030      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e4:	d82a      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ea:	d02a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f0:	d824      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f6:	d008      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80057f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057fc:	d81e      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005806:	d010      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005808:	e018      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800580a:	4b62      	ldr	r3, [pc, #392]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	4a61      	ldr	r2, [pc, #388]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005816:	e015      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f9e6 	bl	8006bf0 <RCCEx_PLLSAI1_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005828:	e00c      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3320      	adds	r3, #32
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fad1 	bl	8006dd8 <RCCEx_PLLSAI2_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800583a:	e003      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	74fb      	strb	r3, [r7, #19]
      break;
 8005840:	e000      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005844:	7cfb      	ldrb	r3, [r7, #19]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800584a:	4b52      	ldr	r3, [pc, #328]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800584c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	494e      	ldr	r1, [pc, #312]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005860:	e001      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 809f 	beq.w	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005874:	2300      	movs	r3, #0
 8005876:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005878:	4b46      	ldr	r3, [pc, #280]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	4b41      	ldr	r3, [pc, #260]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	4a40      	ldr	r2, [pc, #256]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005898:	6593      	str	r3, [r2, #88]	; 0x58
 800589a:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058a6:	2301      	movs	r3, #1
 80058a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058aa:	4b3b      	ldr	r3, [pc, #236]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a3a      	ldr	r2, [pc, #232]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058b6:	f7fd fb2d 	bl	8002f14 <HAL_GetTick>
 80058ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058bc:	e009      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fd fb29 	bl	8002f14 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d902      	bls.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	74fb      	strb	r3, [r7, #19]
        break;
 80058d0:	e005      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058d2:	4b31      	ldr	r3, [pc, #196]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ef      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80058de:	7cfb      	ldrb	r3, [r7, #19]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d15b      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058e4:	4b2b      	ldr	r3, [pc, #172]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01f      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d019      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800590e:	4b21      	ldr	r3, [pc, #132]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	4a1b      	ldr	r2, [pc, #108]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800592e:	4a19      	ldr	r2, [pc, #100]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d016      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fd fae8 	bl	8002f14 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005946:	e00b      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fd fae4 	bl	8002f14 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d902      	bls.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	74fb      	strb	r3, [r7, #19]
            break;
 800595e:	e006      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0ec      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800596e:	7cfb      	ldrb	r3, [r7, #19]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	4903      	ldr	r1, [pc, #12]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800598c:	e008      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800598e:	7cfb      	ldrb	r3, [r7, #19]
 8005990:	74bb      	strb	r3, [r7, #18]
 8005992:	e005      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005994:	40021000 	.word	0x40021000
 8005998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	7cfb      	ldrb	r3, [r7, #19]
 800599e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a0:	7c7b      	ldrb	r3, [r7, #17]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d105      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a6:	4ba0      	ldr	r3, [pc, #640]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	4a9f      	ldr	r2, [pc, #636]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059be:	4b9a      	ldr	r3, [pc, #616]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f023 0203 	bic.w	r2, r3, #3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059cc:	4996      	ldr	r1, [pc, #600]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059e0:	4b91      	ldr	r3, [pc, #580]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e6:	f023 020c 	bic.w	r2, r3, #12
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	498e      	ldr	r1, [pc, #568]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a02:	4b89      	ldr	r3, [pc, #548]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a10:	4985      	ldr	r1, [pc, #532]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a24:	4b80      	ldr	r3, [pc, #512]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a32:	497d      	ldr	r1, [pc, #500]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a46:	4b78      	ldr	r3, [pc, #480]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	4974      	ldr	r1, [pc, #464]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a68:	4b6f      	ldr	r3, [pc, #444]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a76:	496c      	ldr	r1, [pc, #432]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a8a:	4b67      	ldr	r3, [pc, #412]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a98:	4963      	ldr	r1, [pc, #396]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aac:	4b5e      	ldr	r3, [pc, #376]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aba:	495b      	ldr	r1, [pc, #364]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ace:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	4952      	ldr	r1, [pc, #328]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005af0:	4b4d      	ldr	r3, [pc, #308]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	494a      	ldr	r1, [pc, #296]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b12:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b20:	4941      	ldr	r1, [pc, #260]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b34:	4b3c      	ldr	r3, [pc, #240]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b3a:	f023 0203 	bic.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	4939      	ldr	r1, [pc, #228]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d028      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b56:	4b34      	ldr	r3, [pc, #208]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b64:	4930      	ldr	r1, [pc, #192]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b74:	d106      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b76:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4a2b      	ldr	r2, [pc, #172]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b80:	60d3      	str	r3, [r2, #12]
 8005b82:	e011      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3304      	adds	r3, #4
 8005b92:	2101      	movs	r1, #1
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f82b 	bl	8006bf0 <RCCEx_PLLSAI1_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d04d      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005bbe:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bc4:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005bce:	e012      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005bd0:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd6:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bdc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005be0:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bee:	490e      	ldr	r1, [pc, #56]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bfe:	d106      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0a:	60d3      	str	r3, [r2, #12]
 8005c0c:	e020      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c16:	d109      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a02      	ldr	r2, [pc, #8]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c22:	60d3      	str	r3, [r2, #12]
 8005c24:	e014      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 ffd7 	bl	8006bf0 <RCCEx_PLLSAI1_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c46:	7cfb      	ldrb	r3, [r7, #19]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005c4c:	7cfb      	ldrb	r3, [r7, #19]
 8005c4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d028      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c5c:	4b4a      	ldr	r3, [pc, #296]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c6a:	4947      	ldr	r1, [pc, #284]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c7c:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a41      	ldr	r2, [pc, #260]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c86:	60d3      	str	r3, [r2, #12]
 8005c88:	e011      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c92:	d10c      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	2101      	movs	r1, #1
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 ffa8 	bl	8006bf0 <RCCEx_PLLSAI1_Config>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005caa:	7cfb      	ldrb	r3, [r7, #19]
 8005cac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01e      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cba:	4b33      	ldr	r3, [pc, #204]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cca:	492f      	ldr	r1, [pc, #188]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 ff83 	bl	8006bf0 <RCCEx_PLLSAI1_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005cf4:	7cfb      	ldrb	r3, [r7, #19]
 8005cf6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d04:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d0a:	f023 0204 	bic.w	r2, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d14:	491c      	ldr	r1, [pc, #112]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d28:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d2e:	f023 0218 	bic.w	r2, r3, #24
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d38:	4913      	ldr	r1, [pc, #76]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d017      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5c:	490a      	ldr	r1, [pc, #40]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4a04      	ldr	r2, [pc, #16]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000

08005d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d9e:	d13e      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005da0:	4bb6      	ldr	r3, [pc, #728]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db2:	d028      	beq.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dba:	f200 86f4 	bhi.w	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc4:	d005      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dcc:	d00e      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005dce:	f000 beea 	b.w	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005dd2:	4baa      	ldr	r3, [pc, #680]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	f040 86e4 	bne.w	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de6:	61fb      	str	r3, [r7, #28]
      break;
 8005de8:	f000 bedf 	b.w	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005dec:	4ba3      	ldr	r3, [pc, #652]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	f040 86d9 	bne.w	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005dfc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e00:	61fb      	str	r3, [r7, #28]
      break;
 8005e02:	f000 bed4 	b.w	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e06:	4b9d      	ldr	r3, [pc, #628]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e12:	f040 86ce 	bne.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005e16:	4b9a      	ldr	r3, [pc, #616]	; (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e18:	61fb      	str	r3, [r7, #28]
      break;
 8005e1a:	f000 beca 	b.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e1e:	4b97      	ldr	r3, [pc, #604]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d036      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d840      	bhi.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d003      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d020      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005e40:	e039      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e42:	4b8e      	ldr	r3, [pc, #568]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d116      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e4e:	4b8b      	ldr	r3, [pc, #556]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005e5a:	4b88      	ldr	r3, [pc, #544]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	091b      	lsrs	r3, r3, #4
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	e005      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005e66:	4b85      	ldr	r3, [pc, #532]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	4a84      	ldr	r2, [pc, #528]	; (8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e7a:	e01f      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
      break;
 8005e80:	e01c      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e82:	4b7e      	ldr	r3, [pc, #504]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005e90:	4b7d      	ldr	r3, [pc, #500]	; (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005e92:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e94:	e012      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
      break;
 8005e9a:	e00f      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e9c:	4b77      	ldr	r3, [pc, #476]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005eaa:	4b78      	ldr	r3, [pc, #480]	; (800608c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005eae:	e005      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]
      break;
 8005eb4:	e002      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
      break;
 8005eba:	bf00      	nop
    }

    switch(PeriphClk)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ec2:	f000 8606 	beq.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ecc:	f200 8673 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ed6:	f000 8469 	beq.w	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ee0:	f200 8669 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eea:	f000 8531 	beq.w	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef4:	f200 865f 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005efe:	f000 8187 	beq.w	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f08:	f200 8655 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f12:	f000 80cd 	beq.w	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f1c:	f200 864b 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f26:	f000 8430 	beq.w	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	f200 8641 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3a:	f000 83e4 	beq.w	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f44:	f200 8637 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4e:	f000 80af 	beq.w	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	f200 862d 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	f000 809d 	beq.w	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	f200 8623 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f76:	f000 808b 	beq.w	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f80:	f200 8619 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8a:	f000 8554 	beq.w	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f94:	f200 860f 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9e:	f000 8500 	beq.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	f200 8605 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	f000 84a1 	beq.w	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbc:	f200 85fb 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	f000 846c 	beq.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	f200 85f3 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d84c      	bhi.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 85ec 	beq.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	2b1f      	cmp	r3, #31
 8005fe4:	f200 85e7 	bhi.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fe8:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006405 	.word	0x08006405
 8005ff4:	08006473 	.word	0x08006473
 8005ff8:	08006bb7 	.word	0x08006bb7
 8005ffc:	08006507 	.word	0x08006507
 8006000:	08006bb7 	.word	0x08006bb7
 8006004:	08006bb7 	.word	0x08006bb7
 8006008:	08006bb7 	.word	0x08006bb7
 800600c:	0800657f 	.word	0x0800657f
 8006010:	08006bb7 	.word	0x08006bb7
 8006014:	08006bb7 	.word	0x08006bb7
 8006018:	08006bb7 	.word	0x08006bb7
 800601c:	08006bb7 	.word	0x08006bb7
 8006020:	08006bb7 	.word	0x08006bb7
 8006024:	08006bb7 	.word	0x08006bb7
 8006028:	08006bb7 	.word	0x08006bb7
 800602c:	08006603 	.word	0x08006603
 8006030:	08006bb7 	.word	0x08006bb7
 8006034:	08006bb7 	.word	0x08006bb7
 8006038:	08006bb7 	.word	0x08006bb7
 800603c:	08006bb7 	.word	0x08006bb7
 8006040:	08006bb7 	.word	0x08006bb7
 8006044:	08006bb7 	.word	0x08006bb7
 8006048:	08006bb7 	.word	0x08006bb7
 800604c:	08006bb7 	.word	0x08006bb7
 8006050:	08006bb7 	.word	0x08006bb7
 8006054:	08006bb7 	.word	0x08006bb7
 8006058:	08006bb7 	.word	0x08006bb7
 800605c:	08006bb7 	.word	0x08006bb7
 8006060:	08006bb7 	.word	0x08006bb7
 8006064:	08006bb7 	.word	0x08006bb7
 8006068:	08006bb7 	.word	0x08006bb7
 800606c:	08006685 	.word	0x08006685
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	f000 83e8 	beq.w	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006078:	f000 bd9d 	b.w	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800607c:	40021000 	.word	0x40021000
 8006080:	0003d090 	.word	0x0003d090
 8006084:	0800c204 	.word	0x0800c204
 8006088:	00f42400 	.word	0x00f42400
 800608c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006090:	69b9      	ldr	r1, [r7, #24]
 8006092:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006096:	f000 ff93 	bl	8006fc0 <RCCEx_GetSAIxPeriphCLKFreq>
 800609a:	61f8      	str	r0, [r7, #28]
      break;
 800609c:	f000 bd8e 	b.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80060a0:	69b9      	ldr	r1, [r7, #24]
 80060a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80060a6:	f000 ff8b 	bl	8006fc0 <RCCEx_GetSAIxPeriphCLKFreq>
 80060aa:	61f8      	str	r0, [r7, #28]
      break;
 80060ac:	f000 bd86 	b.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80060b0:	4b9a      	ldr	r3, [pc, #616]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060c2:	d015      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060ca:	f200 8092 	bhi.w	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d4:	d029      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060dc:	f200 8089 	bhi.w	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d07b      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ec:	d04a      	beq.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80060ee:	e080      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80060f0:	4b8a      	ldr	r3, [pc, #552]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d17d      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80060fc:	4b87      	ldr	r3, [pc, #540]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006108:	4b84      	ldr	r3, [pc, #528]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	e005      	b.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006114:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	4a7f      	ldr	r2, [pc, #508]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006126:	61fb      	str	r3, [r7, #28]
          break;
 8006128:	e066      	b.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800612a:	4b7c      	ldr	r3, [pc, #496]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006136:	d162      	bne.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006138:	4b78      	ldr	r3, [pc, #480]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006144:	d15b      	bne.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006146:	4b75      	ldr	r3, [pc, #468]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006150:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	fb03 f202 	mul.w	r2, r3, r2
 800615a:	4b70      	ldr	r3, [pc, #448]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	3301      	adds	r3, #1
 8006166:	fbb2 f3f3 	udiv	r3, r2, r3
 800616a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800616c:	4b6b      	ldr	r3, [pc, #428]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	0d5b      	lsrs	r3, r3, #21
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	3301      	adds	r3, #1
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	61fb      	str	r3, [r7, #28]
          break;
 8006182:	e03c      	b.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006184:	4b65      	ldr	r3, [pc, #404]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800618c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006190:	d138      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006192:	4b62      	ldr	r3, [pc, #392]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800619a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619e:	d131      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80061a0:	4b5e      	ldr	r3, [pc, #376]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	0a1b      	lsrs	r3, r3, #8
 80061a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061aa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	fb03 f202 	mul.w	r2, r3, r2
 80061b4:	4b59      	ldr	r3, [pc, #356]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	091b      	lsrs	r3, r3, #4
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	3301      	adds	r3, #1
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80061c6:	4b55      	ldr	r3, [pc, #340]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	0d5b      	lsrs	r3, r3, #21
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	3301      	adds	r3, #1
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	61fb      	str	r3, [r7, #28]
          break;
 80061dc:	e012      	b.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80061de:	4b4f      	ldr	r3, [pc, #316]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d10e      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80061ec:	4b4d      	ldr	r3, [pc, #308]	; (8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80061ee:	61fb      	str	r3, [r7, #28]
          break;
 80061f0:	e00b      	b.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80061f2:	bf00      	nop
 80061f4:	f000 bce2 	b.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061f8:	bf00      	nop
 80061fa:	f000 bcdf 	b.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061fe:	bf00      	nop
 8006200:	f000 bcdc 	b.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006204:	bf00      	nop
 8006206:	f000 bcd9 	b.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800620a:	bf00      	nop
        break;
 800620c:	f000 bcd6 	b.w	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006210:	4b42      	ldr	r3, [pc, #264]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800621e:	d13d      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006220:	4b3e      	ldr	r3, [pc, #248]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800622c:	f040 84c5 	bne.w	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006230:	4b3a      	ldr	r3, [pc, #232]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	f040 84bd 	bne.w	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006240:	4b36      	ldr	r3, [pc, #216]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	fb03 f202 	mul.w	r2, r3, r2
 8006254:	4b31      	ldr	r3, [pc, #196]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	3301      	adds	r3, #1
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006266:	4b2d      	ldr	r3, [pc, #180]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	0edb      	lsrs	r3, r3, #27
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006278:	4b28      	ldr	r3, [pc, #160]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006284:	2311      	movs	r3, #17
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e001      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800628a:	2307      	movs	r3, #7
 800628c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	61fb      	str	r3, [r7, #28]
      break;
 8006298:	f000 bc8f 	b.w	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800629c:	4b1f      	ldr	r3, [pc, #124]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062ae:	d016      	beq.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062b6:	f200 809b 	bhi.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c0:	d032      	beq.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c8:	f200 8092 	bhi.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8084 	beq.w	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062da:	d052      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80062dc:	e088      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	f040 8084 	bne.w	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80062f8:	4b08      	ldr	r3, [pc, #32]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	e005      	b.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	4a03      	ldr	r2, [pc, #12]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006316:	61fb      	str	r3, [r7, #28]
          break;
 8006318:	e06c      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800631a:	bf00      	nop
 800631c:	40021000 	.word	0x40021000
 8006320:	0800c204 	.word	0x0800c204
 8006324:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006328:	4ba5      	ldr	r3, [pc, #660]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006334:	d160      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006336:	4ba2      	ldr	r3, [pc, #648]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800633e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006342:	d159      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006344:	4b9e      	ldr	r3, [pc, #632]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	0a1b      	lsrs	r3, r3, #8
 800634a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	fb03 f202 	mul.w	r2, r3, r2
 8006358:	4b99      	ldr	r3, [pc, #612]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	091b      	lsrs	r3, r3, #4
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	3301      	adds	r3, #1
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800636a:	4b95      	ldr	r3, [pc, #596]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	0d5b      	lsrs	r3, r3, #21
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	3301      	adds	r3, #1
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	61fb      	str	r3, [r7, #28]
          break;
 8006380:	e03a      	b.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006382:	4b8f      	ldr	r3, [pc, #572]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800638e:	d135      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006390:	4b8b      	ldr	r3, [pc, #556]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800639c:	d12e      	bne.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800639e:	4b88      	ldr	r3, [pc, #544]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	fb03 f202 	mul.w	r2, r3, r2
 80063b2:	4b83      	ldr	r3, [pc, #524]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	091b      	lsrs	r3, r3, #4
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	3301      	adds	r3, #1
 80063be:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80063c4:	4b7e      	ldr	r3, [pc, #504]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	0d5b      	lsrs	r3, r3, #21
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	3301      	adds	r3, #1
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	61fb      	str	r3, [r7, #28]
          break;
 80063da:	e00f      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80063dc:	4b78      	ldr	r3, [pc, #480]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d10a      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80063ea:	4b76      	ldr	r3, [pc, #472]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80063ec:	61fb      	str	r3, [r7, #28]
          break;
 80063ee:	e007      	b.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80063f0:	bf00      	nop
 80063f2:	e3e2      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063f4:	bf00      	nop
 80063f6:	e3e0      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063f8:	bf00      	nop
 80063fa:	e3de      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063fc:	bf00      	nop
 80063fe:	e3dc      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006400:	bf00      	nop
      break;
 8006402:	e3da      	b.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006404:	4b6e      	ldr	r3, [pc, #440]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b03      	cmp	r3, #3
 8006414:	d827      	bhi.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	0800642d 	.word	0x0800642d
 8006420:	08006435 	.word	0x08006435
 8006424:	0800643d 	.word	0x0800643d
 8006428:	08006451 	.word	0x08006451
          frequency = HAL_RCC_GetPCLK2Freq();
 800642c:	f7ff f8a8 	bl	8005580 <HAL_RCC_GetPCLK2Freq>
 8006430:	61f8      	str	r0, [r7, #28]
          break;
 8006432:	e01d      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006434:	f7fe fff6 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8006438:	61f8      	str	r0, [r7, #28]
          break;
 800643a:	e019      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800643c:	4b60      	ldr	r3, [pc, #384]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	d10f      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800644a:	4b5f      	ldr	r3, [pc, #380]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800644c:	61fb      	str	r3, [r7, #28]
          break;
 800644e:	e00c      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006450:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b02      	cmp	r3, #2
 800645c:	d107      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800645e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006462:	61fb      	str	r3, [r7, #28]
          break;
 8006464:	e003      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006466:	bf00      	nop
 8006468:	e3a8      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800646a:	bf00      	nop
 800646c:	e3a6      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800646e:	bf00      	nop
        break;
 8006470:	e3a4      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006472:	4b53      	ldr	r3, [pc, #332]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d83a      	bhi.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064fb 	.word	0x080064fb
 8006494:	080064fb 	.word	0x080064fb
 8006498:	080064fb 	.word	0x080064fb
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	080064fb 	.word	0x080064fb
 80064a4:	080064fb 	.word	0x080064fb
 80064a8:	080064fb 	.word	0x080064fb
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064fb 	.word	0x080064fb
 80064b4:	080064fb 	.word	0x080064fb
 80064b8:	080064fb 	.word	0x080064fb
 80064bc:	080064e5 	.word	0x080064e5
          frequency = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7ff f848 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 80064c4:	61f8      	str	r0, [r7, #28]
          break;
 80064c6:	e01d      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80064c8:	f7fe ffac 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80064cc:	61f8      	str	r0, [r7, #28]
          break;
 80064ce:	e019      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064dc:	d10f      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80064de:	4b3a      	ldr	r3, [pc, #232]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064e0:	61fb      	str	r3, [r7, #28]
          break;
 80064e2:	e00c      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d107      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	61fb      	str	r3, [r7, #28]
          break;
 80064f8:	e003      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80064fa:	bf00      	nop
 80064fc:	e35e      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064fe:	bf00      	nop
 8006500:	e35c      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006502:	bf00      	nop
        break;
 8006504:	e35a      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006506:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b30      	cmp	r3, #48	; 0x30
 8006516:	d021      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b30      	cmp	r3, #48	; 0x30
 800651c:	d829      	bhi.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b20      	cmp	r3, #32
 8006522:	d011      	beq.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b20      	cmp	r3, #32
 8006528:	d823      	bhi.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b10      	cmp	r3, #16
 8006534:	d004      	beq.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006536:	e01c      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006538:	f7ff f80c 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 800653c:	61f8      	str	r0, [r7, #28]
          break;
 800653e:	e01d      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006540:	f7fe ff70 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8006544:	61f8      	str	r0, [r7, #28]
          break;
 8006546:	e019      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006554:	d10f      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006556:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006558:	61fb      	str	r3, [r7, #28]
          break;
 800655a:	e00c      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800655c:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d107      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	61fb      	str	r3, [r7, #28]
          break;
 8006570:	e003      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006572:	bf00      	nop
 8006574:	e322      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006576:	bf00      	nop
 8006578:	e320      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800657a:	bf00      	nop
        break;
 800657c:	e31e      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2bc0      	cmp	r3, #192	; 0xc0
 800658e:	d027      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2bc0      	cmp	r3, #192	; 0xc0
 8006594:	d82f      	bhi.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b80      	cmp	r3, #128	; 0x80
 800659a:	d017      	beq.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b80      	cmp	r3, #128	; 0x80
 80065a0:	d829      	bhi.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	d004      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80065ae:	e022      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b0:	f7fe ffd0 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 80065b4:	61f8      	str	r0, [r7, #28]
          break;
 80065b6:	e023      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80065b8:	f7fe ff34 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80065bc:	61f8      	str	r0, [r7, #28]
          break;
 80065be:	e01f      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80065c0:	40021000 	.word	0x40021000
 80065c4:	02dc6c00 	.word	0x02dc6c00
 80065c8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065cc:	4b9b      	ldr	r3, [pc, #620]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d8:	d10f      	bne.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80065da:	4b99      	ldr	r3, [pc, #612]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80065dc:	61fb      	str	r3, [r7, #28]
          break;
 80065de:	e00c      	b.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065e0:	4b96      	ldr	r3, [pc, #600]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d107      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 80065ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f2:	61fb      	str	r3, [r7, #28]
          break;
 80065f4:	e003      	b.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80065f6:	bf00      	nop
 80065f8:	e2e0      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065fa:	bf00      	nop
 80065fc:	e2de      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065fe:	bf00      	nop
        break;
 8006600:	e2dc      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006602:	4b8e      	ldr	r3, [pc, #568]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006614:	d025      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800661c:	d82c      	bhi.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006624:	d013      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662c:	d824      	bhi.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d004      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800663c:	e01c      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800663e:	f7fe ff89 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8006642:	61f8      	str	r0, [r7, #28]
          break;
 8006644:	e01d      	b.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006646:	f7fe feed 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 800664a:	61f8      	str	r0, [r7, #28]
          break;
 800664c:	e019      	b.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800664e:	4b7b      	ldr	r3, [pc, #492]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665a:	d10f      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800665c:	4b78      	ldr	r3, [pc, #480]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800665e:	61fb      	str	r3, [r7, #28]
          break;
 8006660:	e00c      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006662:	4b76      	ldr	r3, [pc, #472]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d107      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006674:	61fb      	str	r3, [r7, #28]
          break;
 8006676:	e003      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006678:	bf00      	nop
 800667a:	e29f      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800667c:	bf00      	nop
 800667e:	e29d      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006680:	bf00      	nop
        break;
 8006682:	e29b      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006684:	4b6d      	ldr	r3, [pc, #436]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006696:	d025      	beq.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800669e:	d82c      	bhi.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a6:	d013      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ae:	d824      	bhi.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d004      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80066be:	e01c      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fe ff48 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 80066c4:	61f8      	str	r0, [r7, #28]
          break;
 80066c6:	e01d      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80066c8:	f7fe feac 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80066cc:	61f8      	str	r0, [r7, #28]
          break;
 80066ce:	e019      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066d0:	4b5a      	ldr	r3, [pc, #360]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066dc:	d10f      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80066de:	4b58      	ldr	r3, [pc, #352]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80066e0:	61fb      	str	r3, [r7, #28]
          break;
 80066e2:	e00c      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066e4:	4b55      	ldr	r3, [pc, #340]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d107      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80066f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f6:	61fb      	str	r3, [r7, #28]
          break;
 80066f8:	e003      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80066fa:	bf00      	nop
 80066fc:	e25e      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066fe:	bf00      	nop
 8006700:	e25c      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006702:	bf00      	nop
        break;
 8006704:	e25a      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006706:	4b4d      	ldr	r3, [pc, #308]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006718:	d007      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006720:	d12f      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006722:	f7fe fe7f 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8006726:	61f8      	str	r0, [r7, #28]
          break;
 8006728:	e02e      	b.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800672a:	4b44      	ldr	r3, [pc, #272]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006736:	d126      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006738:	4b40      	ldr	r3, [pc, #256]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d020      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006744:	4b3d      	ldr	r3, [pc, #244]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	0a1b      	lsrs	r3, r3, #8
 800674a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	fb03 f202 	mul.w	r2, r3, r2
 8006758:	4b38      	ldr	r3, [pc, #224]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	091b      	lsrs	r3, r3, #4
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	3301      	adds	r3, #1
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800676a:	4b34      	ldr	r3, [pc, #208]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	0e5b      	lsrs	r3, r3, #25
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	3301      	adds	r3, #1
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	fbb2 f3f3 	udiv	r3, r2, r3
 800677e:	61fb      	str	r3, [r7, #28]
          break;
 8006780:	e001      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006782:	bf00      	nop
 8006784:	e21a      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006786:	bf00      	nop
        break;
 8006788:	e218      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800678a:	4b2c      	ldr	r3, [pc, #176]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800678c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800679c:	f7fe fef0 	bl	8005580 <HAL_RCC_GetPCLK2Freq>
 80067a0:	61f8      	str	r0, [r7, #28]
        break;
 80067a2:	e20b      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80067a4:	f7fe fe3e 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80067a8:	61f8      	str	r0, [r7, #28]
        break;
 80067aa:	e207      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80067ac:	4b23      	ldr	r3, [pc, #140]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067b2:	f003 0318 	and.w	r3, r3, #24
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b10      	cmp	r3, #16
 80067bc:	d010      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d834      	bhi.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d024      	beq.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80067d0:	e02d      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80067d2:	69b9      	ldr	r1, [r7, #24]
 80067d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80067d8:	f000 fbf2 	bl	8006fc0 <RCCEx_GetSAIxPeriphCLKFreq>
 80067dc:	61f8      	str	r0, [r7, #28]
          break;
 80067de:	e02b      	b.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d122      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067ec:	4b13      	ldr	r3, [pc, #76]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0308 	and.w	r3, r3, #8
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80067f8:	4b10      	ldr	r3, [pc, #64]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	e005      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	4a0c      	ldr	r2, [pc, #48]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006816:	61fb      	str	r3, [r7, #28]
          break;
 8006818:	e00b      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006826:	d106      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800682a:	61fb      	str	r3, [r7, #28]
          break;
 800682c:	e003      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800682e:	bf00      	nop
 8006830:	e1c4      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006832:	bf00      	nop
 8006834:	e1c2      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006836:	bf00      	nop
        break;
 8006838:	e1c0      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800683a:	bf00      	nop
 800683c:	40021000 	.word	0x40021000
 8006840:	00f42400 	.word	0x00f42400
 8006844:	0800c204 	.word	0x0800c204
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006848:	4b96      	ldr	r3, [pc, #600]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685a:	d013      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006862:	d819      	bhi.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006870:	d004      	beq.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006872:	e011      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006874:	f7fe fe6e 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8006878:	61f8      	str	r0, [r7, #28]
          break;
 800687a:	e010      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800687c:	f7fe fdd2 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8006880:	61f8      	str	r0, [r7, #28]
          break;
 8006882:	e00c      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006884:	4b87      	ldr	r3, [pc, #540]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d104      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006892:	4b85      	ldr	r3, [pc, #532]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006894:	61fb      	str	r3, [r7, #28]
          break;
 8006896:	e001      	b.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006898:	bf00      	nop
 800689a:	e18f      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800689c:	bf00      	nop
        break;
 800689e:	e18d      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068a0:	4b80      	ldr	r3, [pc, #512]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b2:	d013      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ba:	d819      	bhi.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c8:	d004      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80068ca:	e011      	b.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068cc:	f7fe fe42 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 80068d0:	61f8      	str	r0, [r7, #28]
          break;
 80068d2:	e010      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80068d4:	f7fe fda6 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80068d8:	61f8      	str	r0, [r7, #28]
          break;
 80068da:	e00c      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068dc:	4b71      	ldr	r3, [pc, #452]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d104      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80068ea:	4b6f      	ldr	r3, [pc, #444]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068ec:	61fb      	str	r3, [r7, #28]
          break;
 80068ee:	e001      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80068f0:	bf00      	nop
 80068f2:	e163      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068f4:	bf00      	nop
        break;
 80068f6:	e161      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80068f8:	4b6a      	ldr	r3, [pc, #424]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800690a:	d013      	beq.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006912:	d819      	bhi.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006920:	d004      	beq.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006922:	e011      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006924:	f7fe fe16 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8006928:	61f8      	str	r0, [r7, #28]
          break;
 800692a:	e010      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800692c:	f7fe fd7a 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8006930:	61f8      	str	r0, [r7, #28]
          break;
 8006932:	e00c      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006934:	4b5b      	ldr	r3, [pc, #364]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006940:	d104      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006942:	4b59      	ldr	r3, [pc, #356]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006944:	61fb      	str	r3, [r7, #28]
          break;
 8006946:	e001      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006948:	bf00      	nop
 800694a:	e137      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800694c:	bf00      	nop
        break;
 800694e:	e135      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006950:	4b54      	ldr	r3, [pc, #336]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d011      	beq.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d818      	bhi.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d004      	beq.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006974:	e011      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006976:	f7fe fded 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 800697a:	61f8      	str	r0, [r7, #28]
          break;
 800697c:	e010      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800697e:	f7fe fd51 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8006982:	61f8      	str	r0, [r7, #28]
          break;
 8006984:	e00c      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006986:	4b47      	ldr	r3, [pc, #284]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006992:	d104      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006994:	4b44      	ldr	r3, [pc, #272]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006996:	61fb      	str	r3, [r7, #28]
          break;
 8006998:	e001      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800699a:	bf00      	nop
 800699c:	e10e      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800699e:	bf00      	nop
        break;
 80069a0:	e10c      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80069a2:	4b40      	ldr	r3, [pc, #256]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069b4:	d02c      	beq.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069bc:	d833      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069c4:	d01a      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069cc:	d82b      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069da:	d004      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80069dc:	e023      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069de:	f7fe fdb9 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 80069e2:	61f8      	str	r0, [r7, #28]
          break;
 80069e4:	e026      	b.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069e6:	4b2f      	ldr	r3, [pc, #188]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d11a      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80069f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069f8:	61fb      	str	r3, [r7, #28]
          break;
 80069fa:	e016      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069fc:	4b29      	ldr	r3, [pc, #164]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a08:	d111      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006a0a:	4b27      	ldr	r3, [pc, #156]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a0c:	61fb      	str	r3, [r7, #28]
          break;
 8006a0e:	e00e      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a10:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d109      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a22:	61fb      	str	r3, [r7, #28]
          break;
 8006a24:	e005      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006a26:	bf00      	nop
 8006a28:	e0c8      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a2a:	bf00      	nop
 8006a2c:	e0c6      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a2e:	bf00      	nop
 8006a30:	e0c4      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a32:	bf00      	nop
        break;
 8006a34:	e0c2      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a48:	d030      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a50:	d837      	bhi.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a58:	d01a      	beq.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a60:	d82f      	bhi.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6e:	d004      	beq.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006a70:	e027      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a72:	f7fe fd6f 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8006a76:	61f8      	str	r0, [r7, #28]
          break;
 8006a78:	e02a      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d11e      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006a88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a8c:	61fb      	str	r3, [r7, #28]
          break;
 8006a8e:	e01a      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a90:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9c:	d115      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006a9e:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006aa0:	61fb      	str	r3, [r7, #28]
          break;
 8006aa2:	e012      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006aac:	4b46      	ldr	r3, [pc, #280]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d109      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006abe:	61fb      	str	r3, [r7, #28]
          break;
 8006ac0:	e005      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006ac2:	bf00      	nop
 8006ac4:	e07a      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ac6:	bf00      	nop
 8006ac8:	e078      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aca:	bf00      	nop
 8006acc:	e076      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ace:	bf00      	nop
        break;
 8006ad0:	e074      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006ad2:	4b3d      	ldr	r3, [pc, #244]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ad8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ae4:	d02c      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aec:	d855      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afa:	d004      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006afc:	e04d      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fe fc91 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8006b02:	61f8      	str	r0, [r7, #28]
          break;
 8006b04:	e04e      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b06:	4b30      	ldr	r3, [pc, #192]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d145      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b12:	4b2d      	ldr	r3, [pc, #180]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006b1e:	4b2a      	ldr	r3, [pc, #168]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	e005      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006b2a:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b30:	0a1b      	lsrs	r3, r3, #8
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	4a25      	ldr	r2, [pc, #148]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3c:	61fb      	str	r3, [r7, #28]
          break;
 8006b3e:	e02e      	b.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b40:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b4c:	d129      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b5a:	d122      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b66:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	fb03 f202 	mul.w	r2, r3, r2
 8006b70:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	0d5b      	lsrs	r3, r3, #21
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	61fb      	str	r3, [r7, #28]
          break;
 8006b98:	e003      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006b9a:	bf00      	nop
 8006b9c:	e00e      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b9e:	bf00      	nop
 8006ba0:	e00c      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ba2:	bf00      	nop
        break;
 8006ba4:	e00a      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e008      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006baa:	bf00      	nop
 8006bac:	e006      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bae:	bf00      	nop
 8006bb0:	e004      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bb2:	bf00      	nop
 8006bb4:	e002      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bb6:	bf00      	nop
 8006bb8:	e000      	b.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006bba:	bf00      	nop
    }
  }

  return(frequency);
 8006bbc:	69fb      	ldr	r3, [r7, #28]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	0800c204 	.word	0x0800c204

08006bd0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a04      	ldr	r2, [pc, #16]	; (8006bec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006bda:	f043 0304 	orr.w	r3, r3, #4
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40021000 	.word	0x40021000

08006bf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bfe:	4b72      	ldr	r3, [pc, #456]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c0a:	4b6f      	ldr	r3, [pc, #444]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f003 0203 	and.w	r2, r3, #3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d103      	bne.n	8006c22 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d142      	bne.n	8006ca8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	73fb      	strb	r3, [r7, #15]
 8006c26:	e03f      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d018      	beq.n	8006c62 <RCCEx_PLLSAI1_Config+0x72>
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d825      	bhi.n	8006c80 <RCCEx_PLLSAI1_Config+0x90>
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d002      	beq.n	8006c3e <RCCEx_PLLSAI1_Config+0x4e>
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d009      	beq.n	8006c50 <RCCEx_PLLSAI1_Config+0x60>
 8006c3c:	e020      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c3e:	4b62      	ldr	r3, [pc, #392]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d11d      	bne.n	8006c86 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c4e:	e01a      	b.n	8006c86 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c50:	4b5d      	ldr	r3, [pc, #372]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d116      	bne.n	8006c8a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c60:	e013      	b.n	8006c8a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c62:	4b59      	ldr	r3, [pc, #356]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10f      	bne.n	8006c8e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c6e:	4b56      	ldr	r3, [pc, #344]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c7e:	e006      	b.n	8006c8e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]
      break;
 8006c84:	e004      	b.n	8006c90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c86:	bf00      	nop
 8006c88:	e002      	b.n	8006c90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e000      	b.n	8006c90 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d108      	bne.n	8006ca8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006c96:	4b4c      	ldr	r3, [pc, #304]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f023 0203 	bic.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4949      	ldr	r1, [pc, #292]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 8086 	bne.w	8006dbc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006cb0:	4b45      	ldr	r3, [pc, #276]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a44      	ldr	r2, [pc, #272]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cbc:	f7fc f92a 	bl	8002f14 <HAL_GetTick>
 8006cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cc2:	e009      	b.n	8006cd8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cc4:	f7fc f926 	bl	8002f14 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d902      	bls.n	8006cd8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8006cd6:	e005      	b.n	8006ce4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cd8:	4b3b      	ldr	r3, [pc, #236]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1ef      	bne.n	8006cc4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d168      	bne.n	8006dbc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d113      	bne.n	8006d18 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cf0:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	4b35      	ldr	r3, [pc, #212]	; (8006dcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6892      	ldr	r2, [r2, #8]
 8006cfc:	0211      	lsls	r1, r2, #8
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	68d2      	ldr	r2, [r2, #12]
 8006d02:	06d2      	lsls	r2, r2, #27
 8006d04:	4311      	orrs	r1, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6852      	ldr	r2, [r2, #4]
 8006d0a:	3a01      	subs	r2, #1
 8006d0c:	0112      	lsls	r2, r2, #4
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	492d      	ldr	r1, [pc, #180]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	610b      	str	r3, [r1, #16]
 8006d16:	e02d      	b.n	8006d74 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d115      	bne.n	8006d4a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d1e:	4b2a      	ldr	r3, [pc, #168]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	4b2b      	ldr	r3, [pc, #172]	; (8006dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	0211      	lsls	r1, r2, #8
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6912      	ldr	r2, [r2, #16]
 8006d30:	0852      	lsrs	r2, r2, #1
 8006d32:	3a01      	subs	r2, #1
 8006d34:	0552      	lsls	r2, r2, #21
 8006d36:	4311      	orrs	r1, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6852      	ldr	r2, [r2, #4]
 8006d3c:	3a01      	subs	r2, #1
 8006d3e:	0112      	lsls	r2, r2, #4
 8006d40:	430a      	orrs	r2, r1
 8006d42:	4921      	ldr	r1, [pc, #132]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	610b      	str	r3, [r1, #16]
 8006d48:	e014      	b.n	8006d74 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d4a:	4b1f      	ldr	r3, [pc, #124]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d4c:	691a      	ldr	r2, [r3, #16]
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6892      	ldr	r2, [r2, #8]
 8006d56:	0211      	lsls	r1, r2, #8
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6952      	ldr	r2, [r2, #20]
 8006d5c:	0852      	lsrs	r2, r2, #1
 8006d5e:	3a01      	subs	r2, #1
 8006d60:	0652      	lsls	r2, r2, #25
 8006d62:	4311      	orrs	r1, r2
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6852      	ldr	r2, [r2, #4]
 8006d68:	3a01      	subs	r2, #1
 8006d6a:	0112      	lsls	r2, r2, #4
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	4916      	ldr	r1, [pc, #88]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d74:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fc f8c8 	bl	8002f14 <HAL_GetTick>
 8006d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d86:	e009      	b.n	8006d9c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d88:	f7fc f8c4 	bl	8002f14 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d902      	bls.n	8006d9c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	73fb      	strb	r3, [r7, #15]
          break;
 8006d9a:	e005      	b.n	8006da8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0ef      	beq.n	8006d88 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006dae:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	4904      	ldr	r1, [pc, #16]	; (8006dc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	07ff800f 	.word	0x07ff800f
 8006dd0:	ff9f800f 	.word	0xff9f800f
 8006dd4:	f9ff800f 	.word	0xf9ff800f

08006dd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006de6:	4b72      	ldr	r3, [pc, #456]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006df2:	4b6f      	ldr	r3, [pc, #444]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0203 	and.w	r2, r3, #3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d103      	bne.n	8006e0a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
       ||
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d142      	bne.n	8006e90 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	e03f      	b.n	8006e90 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d018      	beq.n	8006e4a <RCCEx_PLLSAI2_Config+0x72>
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d825      	bhi.n	8006e68 <RCCEx_PLLSAI2_Config+0x90>
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d002      	beq.n	8006e26 <RCCEx_PLLSAI2_Config+0x4e>
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d009      	beq.n	8006e38 <RCCEx_PLLSAI2_Config+0x60>
 8006e24:	e020      	b.n	8006e68 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e26:	4b62      	ldr	r3, [pc, #392]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d11d      	bne.n	8006e6e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e36:	e01a      	b.n	8006e6e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e38:	4b5d      	ldr	r3, [pc, #372]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d116      	bne.n	8006e72 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e48:	e013      	b.n	8006e72 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e4a:	4b59      	ldr	r3, [pc, #356]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10f      	bne.n	8006e76 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e56:	4b56      	ldr	r3, [pc, #344]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e66:	e006      	b.n	8006e76 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e004      	b.n	8006e78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e002      	b.n	8006e78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e72:	bf00      	nop
 8006e74:	e000      	b.n	8006e78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e76:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006e7e:	4b4c      	ldr	r3, [pc, #304]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f023 0203 	bic.w	r2, r3, #3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4949      	ldr	r1, [pc, #292]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f040 8086 	bne.w	8006fa4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e98:	4b45      	ldr	r3, [pc, #276]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a44      	ldr	r2, [pc, #272]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea4:	f7fc f836 	bl	8002f14 <HAL_GetTick>
 8006ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006eaa:	e009      	b.n	8006ec0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006eac:	f7fc f832 	bl	8002f14 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d902      	bls.n	8006ec0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8006ebe:	e005      	b.n	8006ecc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ec0:	4b3b      	ldr	r3, [pc, #236]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1ef      	bne.n	8006eac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d168      	bne.n	8006fa4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d113      	bne.n	8006f00 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ed8:	4b35      	ldr	r3, [pc, #212]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eda:	695a      	ldr	r2, [r3, #20]
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6892      	ldr	r2, [r2, #8]
 8006ee4:	0211      	lsls	r1, r2, #8
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	68d2      	ldr	r2, [r2, #12]
 8006eea:	06d2      	lsls	r2, r2, #27
 8006eec:	4311      	orrs	r1, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6852      	ldr	r2, [r2, #4]
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	0112      	lsls	r2, r2, #4
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	492d      	ldr	r1, [pc, #180]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	614b      	str	r3, [r1, #20]
 8006efe:	e02d      	b.n	8006f5c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d115      	bne.n	8006f32 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f06:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f08:	695a      	ldr	r2, [r3, #20]
 8006f0a:	4b2b      	ldr	r3, [pc, #172]	; (8006fb8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6892      	ldr	r2, [r2, #8]
 8006f12:	0211      	lsls	r1, r2, #8
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6912      	ldr	r2, [r2, #16]
 8006f18:	0852      	lsrs	r2, r2, #1
 8006f1a:	3a01      	subs	r2, #1
 8006f1c:	0552      	lsls	r2, r2, #21
 8006f1e:	4311      	orrs	r1, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6852      	ldr	r2, [r2, #4]
 8006f24:	3a01      	subs	r2, #1
 8006f26:	0112      	lsls	r2, r2, #4
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	4921      	ldr	r1, [pc, #132]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	614b      	str	r3, [r1, #20]
 8006f30:	e014      	b.n	8006f5c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f32:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f34:	695a      	ldr	r2, [r3, #20]
 8006f36:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <RCCEx_PLLSAI2_Config+0x1e4>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6892      	ldr	r2, [r2, #8]
 8006f3e:	0211      	lsls	r1, r2, #8
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6952      	ldr	r2, [r2, #20]
 8006f44:	0852      	lsrs	r2, r2, #1
 8006f46:	3a01      	subs	r2, #1
 8006f48:	0652      	lsls	r2, r2, #25
 8006f4a:	4311      	orrs	r1, r2
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6852      	ldr	r2, [r2, #4]
 8006f50:	3a01      	subs	r2, #1
 8006f52:	0112      	lsls	r2, r2, #4
 8006f54:	430a      	orrs	r2, r1
 8006f56:	4916      	ldr	r1, [pc, #88]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006f5c:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f68:	f7fb ffd4 	bl	8002f14 <HAL_GetTick>
 8006f6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f6e:	e009      	b.n	8006f84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f70:	f7fb ffd0 	bl	8002f14 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d902      	bls.n	8006f84 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	73fb      	strb	r3, [r7, #15]
          break;
 8006f82:	e005      	b.n	8006f90 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0ef      	beq.n	8006f70 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	4904      	ldr	r1, [pc, #16]	; (8006fb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	07ff800f 	.word	0x07ff800f
 8006fb8:	ff9f800f 	.word	0xff9f800f
 8006fbc:	f9ff800f 	.word	0xf9ff800f

08006fc0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b089      	sub	sp, #36	; 0x24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fdc:	d10b      	bne.n	8006ff6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006fde:	4b7e      	ldr	r3, [pc, #504]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fe4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006fe8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b60      	cmp	r3, #96	; 0x60
 8006fee:	d112      	bne.n	8007016 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ff0:	4b7a      	ldr	r3, [pc, #488]	; (80071dc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	e00f      	b.n	8007016 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffc:	d10b      	bne.n	8007016 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006ffe:	4b76      	ldr	r3, [pc, #472]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007000:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007008:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007010:	d101      	bne.n	8007016 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007012:	4b72      	ldr	r3, [pc, #456]	; (80071dc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007014:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f040 80d6 	bne.w	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d003      	beq.n	8007030 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702e:	d13b      	bne.n	80070a8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007030:	4b69      	ldr	r3, [pc, #420]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800703c:	f040 80c4 	bne.w	80071c8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007040:	4b65      	ldr	r3, [pc, #404]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80bd 	beq.w	80071c8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800704e:	4b62      	ldr	r3, [pc, #392]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	091b      	lsrs	r3, r3, #4
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	3301      	adds	r3, #1
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007062:	4b5d      	ldr	r3, [pc, #372]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800706e:	4b5a      	ldr	r3, [pc, #360]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	0edb      	lsrs	r3, r3, #27
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007080:	4b55      	ldr	r3, [pc, #340]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800708c:	2311      	movs	r3, #17
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	e001      	b.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007092:	2307      	movs	r3, #7
 8007094:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	fb03 f202 	mul.w	r2, r3, r2
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070a6:	e08f      	b.n	80071c8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d13a      	bne.n	8007124 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80070ae:	4b4a      	ldr	r3, [pc, #296]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ba:	f040 8086 	bne.w	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80070be:	4b46      	ldr	r3, [pc, #280]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d07f      	beq.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80070ca:	4b43      	ldr	r3, [pc, #268]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	091b      	lsrs	r3, r3, #4
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	3301      	adds	r3, #1
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80070de:	4b3e      	ldr	r3, [pc, #248]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80070ea:	4b3b      	ldr	r3, [pc, #236]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	0edb      	lsrs	r3, r3, #27
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80070fc:	4b36      	ldr	r3, [pc, #216]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007108:	2311      	movs	r3, #17
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	e001      	b.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800710e:	2307      	movs	r3, #7
 8007110:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	fb03 f202 	mul.w	r2, r3, r2
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e052      	b.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b80      	cmp	r3, #128	; 0x80
 8007128:	d003      	beq.n	8007132 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007130:	d109      	bne.n	8007146 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007132:	4b29      	ldr	r3, [pc, #164]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713e:	d144      	bne.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007140:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007142:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007144:	e041      	b.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b20      	cmp	r3, #32
 800714a:	d003      	beq.n	8007154 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	d13a      	bne.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007154:	4b20      	ldr	r3, [pc, #128]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800715c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007160:	d133      	bne.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007162:	4b1d      	ldr	r3, [pc, #116]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d02d      	beq.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800716e:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	3301      	adds	r3, #1
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007180:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800718e:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	0edb      	lsrs	r3, r3, #27
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80071a0:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80071ac:	2311      	movs	r3, #17
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	e001      	b.n	80071b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80071b2:	2307      	movs	r3, #7
 80071b4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	fb03 f202 	mul.w	r2, r3, r2
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	e000      	b.n	80071ca <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80071c8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80071ca:	69fb      	ldr	r3, [r7, #28]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3724      	adds	r7, #36	; 0x24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40021000 	.word	0x40021000
 80071dc:	001fff68 	.word	0x001fff68
 80071e0:	00f42400 	.word	0x00f42400

080071e4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d904      	bls.n	8007202 <HAL_SAI_InitProtocol+0x1e>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	3b03      	subs	r3, #3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d812      	bhi.n	8007226 <HAL_SAI_InitProtocol+0x42>
 8007200:	e008      	b.n	8007214 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f9fb 	bl	8007604 <SAI_InitI2S>
 800720e:	4603      	mov	r3, r0
 8007210:	75fb      	strb	r3, [r7, #23]
      break;
 8007212:	e00b      	b.n	800722c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 faa4 	bl	8007768 <SAI_InitPCM>
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]
      break;
 8007224:	e002      	b.n	800722c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
      break;
 800722a:	bf00      	nop
  }

  if (status == HAL_OK)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f808 	bl	8007248 <HAL_SAI_Init>
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e1c7      	b.n	80075ea <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007260:	2b01      	cmp	r3, #1
 8007262:	d10e      	bne.n	8007282 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a81      	ldr	r2, [pc, #516]	; (8007470 <HAL_SAI_Init+0x228>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d107      	bne.n	800727e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007272:	2b01      	cmp	r3, #1
 8007274:	d103      	bne.n	800727e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e1b3      	b.n	80075ea <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fb fbec 	bl	8002a74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fae5 	bl	800786c <SAI_Disable>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e19e      	b.n	80075ea <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d00c      	beq.n	80072d6 <HAL_SAI_Init+0x8e>
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d80d      	bhi.n	80072dc <HAL_SAI_Init+0x94>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <HAL_SAI_Init+0x82>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d003      	beq.n	80072d0 <HAL_SAI_Init+0x88>
 80072c8:	e008      	b.n	80072dc <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072ce:	e008      	b.n	80072e2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80072d0:	2310      	movs	r3, #16
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072d4:	e005      	b.n	80072e2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072d6:	2320      	movs	r3, #32
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072da:	e002      	b.n	80072e2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80072e0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d81d      	bhi.n	8007326 <HAL_SAI_Init+0xde>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <HAL_SAI_Init+0xa8>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007301 	.word	0x08007301
 80072f4:	08007307 	.word	0x08007307
 80072f8:	0800730f 	.word	0x0800730f
 80072fc:	08007317 	.word	0x08007317
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
      break;
 8007304:	e012      	b.n	800732c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730a:	61fb      	str	r3, [r7, #28]
      break;
 800730c:	e00e      	b.n	800732c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800730e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007312:	61fb      	str	r3, [r7, #28]
      break;
 8007314:	e00a      	b.n	800732c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800731a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007324:	e002      	b.n	800732c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	61fb      	str	r3, [r7, #28]
      break;
 800732a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a4f      	ldr	r2, [pc, #316]	; (8007470 <HAL_SAI_Init+0x228>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <HAL_SAI_Init+0xf8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a4e      	ldr	r2, [pc, #312]	; (8007474 <HAL_SAI_Init+0x22c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d103      	bne.n	8007348 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007340:	4a4d      	ldr	r2, [pc, #308]	; (8007478 <HAL_SAI_Init+0x230>)
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e002      	b.n	800734e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007348:	4a4c      	ldr	r2, [pc, #304]	; (800747c <HAL_SAI_Init+0x234>)
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d073      	beq.n	800743e <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a45      	ldr	r2, [pc, #276]	; (8007470 <HAL_SAI_Init+0x228>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <HAL_SAI_Init+0x122>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a43      	ldr	r2, [pc, #268]	; (8007474 <HAL_SAI_Init+0x22c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d105      	bne.n	8007376 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800736a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800736e:	f7fe fd0d 	bl	8005d8c <HAL_RCCEx_GetPeriphCLKFreq>
 8007372:	61b8      	str	r0, [r7, #24]
 8007374:	e004      	b.n	8007380 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007376:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800737a:	f7fe fd07 	bl	8005d8c <HAL_RCCEx_GetPeriphCLKFreq>
 800737e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007388:	d120      	bne.n	80073cc <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	2b04      	cmp	r3, #4
 8007390:	d102      	bne.n	8007398 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007392:	2340      	movs	r3, #64	; 0x40
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	e00a      	b.n	80073ae <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	2b08      	cmp	r3, #8
 800739e:	d103      	bne.n	80073a8 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80073a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	e002      	b.n	80073ae <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ac:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	4619      	mov	r1, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	fb02 f303 	mul.w	r3, r2, r3
 80073c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e017      	b.n	80073fc <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073d4:	d101      	bne.n	80073da <HAL_SAI_Init+0x192>
 80073d6:	2302      	movs	r3, #2
 80073d8:	e000      	b.n	80073dc <HAL_SAI_Init+0x194>
 80073da:	2301      	movs	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4619      	mov	r1, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	fb02 f303 	mul.w	r3, r2, r3
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073fa:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4a20      	ldr	r2, [pc, #128]	; (8007480 <HAL_SAI_Init+0x238>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	08da      	lsrs	r2, r3, #3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800740a:	6979      	ldr	r1, [r7, #20]
 800740c:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <HAL_SAI_Init+0x238>)
 800740e:	fba3 2301 	umull	r2, r3, r3, r1
 8007412:	08da      	lsrs	r2, r3, #3
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	1aca      	subs	r2, r1, r3
 800741e:	2a08      	cmp	r2, #8
 8007420:	d904      	bls.n	800742c <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	2b04      	cmp	r3, #4
 8007432:	d104      	bne.n	800743e <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	085a      	lsrs	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_SAI_Init+0x206>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d109      	bne.n	8007462 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_SAI_Init+0x212>
 8007456:	2300      	movs	r3, #0
 8007458:	e001      	b.n	800745e <HAL_SAI_Init+0x216>
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	e012      	b.n	8007488 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d10c      	bne.n	8007484 <HAL_SAI_Init+0x23c>
 800746a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800746e:	e00a      	b.n	8007486 <HAL_SAI_Init+0x23e>
 8007470:	40015404 	.word	0x40015404
 8007474:	40015424 	.word	0x40015424
 8007478:	40015400 	.word	0x40015400
 800747c:	40015800 	.word	0x40015800
 8007480:	cccccccd 	.word	0xcccccccd
 8007484:	2300      	movs	r3, #0
 8007486:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b58      	ldr	r3, [pc, #352]	; (80075f4 <HAL_SAI_Init+0x3ac>)
 8007494:	400b      	ands	r3, r1
 8007496:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6819      	ldr	r1, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074ac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b2:	431a      	orrs	r2, r3
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80074c0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074cc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	051b      	lsls	r3, r3, #20
 80074d4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074da:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80074f2:	f023 030f 	bic.w	r3, r3, #15
 80074f6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6859      	ldr	r1, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699a      	ldr	r2, [r3, #24]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6899      	ldr	r1, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <HAL_SAI_Init+0x3b0>)
 8007522:	400b      	ands	r3, r1
 8007524:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6899      	ldr	r1, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007536:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800753c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8007542:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	3b01      	subs	r3, #1
 800754a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800754c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68d9      	ldr	r1, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007564:	400b      	ands	r3, r1
 8007566:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68d9      	ldr	r1, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007576:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800757e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007584:	3b01      	subs	r3, #1
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a19      	ldr	r2, [pc, #100]	; (80075fc <HAL_SAI_Init+0x3b4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d119      	bne.n	80075d0 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800759c:	4b18      	ldr	r3, [pc, #96]	; (8007600 <HAL_SAI_Init+0x3b8>)
 800759e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a0:	4a17      	ldr	r2, [pc, #92]	; (8007600 <HAL_SAI_Init+0x3b8>)
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10e      	bne.n	80075d0 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	3b01      	subs	r3, #1
 80075bc:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80075be:	4910      	ldr	r1, [pc, #64]	; (8007600 <HAL_SAI_Init+0x3b8>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80075c4:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <HAL_SAI_Init+0x3b8>)
 80075c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c8:	4a0d      	ldr	r2, [pc, #52]	; (8007600 <HAL_SAI_Init+0x3b8>)
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3728      	adds	r7, #40	; 0x28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	f805c010 	.word	0xf805c010
 80075f8:	fff88000 	.word	0xfff88000
 80075fc:	40015404 	.word	0x40015404
 8007600:	40015400 	.word	0x40015400

08007604 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <SAI_InitI2S+0x2e>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d103      	bne.n	800763a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	64da      	str	r2, [r3, #76]	; 0x4c
 8007638:	e002      	b.n	8007640 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007646:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800764e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e077      	b.n	800775a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d107      	bne.n	8007680 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800767c:	661a      	str	r2, [r3, #96]	; 0x60
 800767e:	e006      	b.n	800768e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007686:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d84f      	bhi.n	8007734 <SAI_InitI2S+0x130>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <SAI_InitI2S+0x98>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076cf 	.word	0x080076cf
 80076a4:	080076f1 	.word	0x080076f1
 80076a8:	08007713 	.word	0x08007713
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2280      	movs	r2, #128	; 0x80
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	011a      	lsls	r2, r3, #4
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2240      	movs	r2, #64	; 0x40
 80076ca:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80076cc:	e035      	b.n	800773a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2280      	movs	r2, #128	; 0x80
 80076d2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	019a      	lsls	r2, r3, #6
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2280      	movs	r2, #128	; 0x80
 80076ec:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80076ee:	e024      	b.n	800773a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	22c0      	movs	r2, #192	; 0xc0
 80076f4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	019a      	lsls	r2, r3, #6
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	085b      	lsrs	r3, r3, #1
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007710:	e013      	b.n	800773a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	22e0      	movs	r2, #224	; 0xe0
 8007716:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	019a      	lsls	r2, r3, #6
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	085b      	lsrs	r3, r3, #1
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2280      	movs	r2, #128	; 0x80
 8007730:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007732:	e002      	b.n	800773a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
      break;
 8007738:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b02      	cmp	r3, #2
 800773e:	d10b      	bne.n	8007758 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d102      	bne.n	800774c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2210      	movs	r2, #16
 800774a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d102      	bne.n	8007758 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2208      	movs	r2, #8
 8007756:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8007758:	7dfb      	ldrb	r3, [r7, #23]
}
 800775a:	4618      	mov	r0, r3
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop

08007768 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <SAI_InitPCM+0x2e>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d103      	bne.n	800779e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	64da      	str	r2, [r3, #76]	; 0x4c
 800779c:	e002      	b.n	80077a4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80077b8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077cc:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d103      	bne.n	80077dc <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54
 80077da:	e002      	b.n	80077e2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	220d      	movs	r2, #13
 80077e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d837      	bhi.n	8007858 <SAI_InitPCM+0xf0>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <SAI_InitPCM+0x88>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007817 	.word	0x08007817
 80077f8:	0800782d 	.word	0x0800782d
 80077fc:	08007843 	.word	0x08007843
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2280      	movs	r2, #128	; 0x80
 8007804:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	011a      	lsls	r2, r3, #4
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2240      	movs	r2, #64	; 0x40
 8007812:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007814:	e023      	b.n	800785e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2280      	movs	r2, #128	; 0x80
 800781a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800782a:	e018      	b.n	800785e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	22c0      	movs	r2, #192	; 0xc0
 8007830:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2280      	movs	r2, #128	; 0x80
 800783e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007840:	e00d      	b.n	800785e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	22e0      	movs	r2, #224	; 0xe0
 8007846:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007856:	e002      	b.n	800785e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
      break;
 800785c:	bf00      	nop
  }

  return status;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007874:	4b18      	ldr	r3, [pc, #96]	; (80078d8 <SAI_Disable+0x6c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a18      	ldr	r2, [pc, #96]	; (80078dc <SAI_Disable+0x70>)
 800787a:	fba2 2303 	umull	r2, r3, r2, r3
 800787e:	0b1b      	lsrs	r3, r3, #12
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007896:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	72fb      	strb	r3, [r7, #11]
      break;
 80078b2:	e009      	b.n	80078c8 <SAI_Disable+0x5c>
    }
    count--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e7      	bne.n	8007898 <SAI_Disable+0x2c>

  return status;
 80078c8:	7afb      	ldrb	r3, [r7, #11]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	20000000 	.word	0x20000000
 80078dc:	95cbec1b 	.word	0x95cbec1b

080078e0 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e0aa      	b.n	8007a48 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fa fd1e 	bl	8002344 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0201 	bic.w	r2, r2, #1
 800791c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800792a:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695a      	ldr	r2, [r3, #20]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800793a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800794a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007954:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007964:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d012      	beq.n	8007994 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d107      	bne.n	8007986 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007982:	609a      	str	r2, [r3, #8]
 8007984:	e006      	b.n	8007994 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007992:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d104      	bne.n	80079a6 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079e2:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079f4:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079f6:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a00:	d110      	bne.n	8007a24 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a12:	d107      	bne.n	8007a24 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a22:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007a66:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a70:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007a72:	2180      	movs	r1, #128	; 0x80
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f805 	bl	8007a84 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aaa:	2b38      	cmp	r3, #56	; 0x38
 8007aac:	d103      	bne.n	8007ab6 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007ab4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007abc:	2bf2      	cmp	r3, #242	; 0xf2
 8007abe:	d103      	bne.n	8007ac8 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007ac6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8007ace:	2bd4      	cmp	r3, #212	; 0xd4
 8007ad0:	d103      	bne.n	8007ada <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	601a      	str	r2, [r3, #0]
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e095      	b.n	8007c34 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d108      	bne.n	8007b22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b18:	d009      	beq.n	8007b2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	61da      	str	r2, [r3, #28]
 8007b20:	e005      	b.n	8007b2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fa fd89 	bl	8002660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b6e:	d902      	bls.n	8007b76 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e002      	b.n	8007b7c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b84:	d007      	beq.n	8007b96 <HAL_SPI_Init+0xa0>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b8e:	d002      	beq.n	8007b96 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd8:	ea42 0103 	orr.w	r1, r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	0c1b      	lsrs	r3, r3, #16
 8007bf2:	f003 0204 	and.w	r2, r3, #4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c12:	ea42 0103 	orr.w	r1, r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e049      	b.n	8007ce2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fa fd40 	bl	80026e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 f94a 	bl	8007f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e0ff      	b.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b14      	cmp	r3, #20
 8007d16:	f200 80f0 	bhi.w	8007efa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d75 	.word	0x08007d75
 8007d24:	08007efb 	.word	0x08007efb
 8007d28:	08007efb 	.word	0x08007efb
 8007d2c:	08007efb 	.word	0x08007efb
 8007d30:	08007db5 	.word	0x08007db5
 8007d34:	08007efb 	.word	0x08007efb
 8007d38:	08007efb 	.word	0x08007efb
 8007d3c:	08007efb 	.word	0x08007efb
 8007d40:	08007df7 	.word	0x08007df7
 8007d44:	08007efb 	.word	0x08007efb
 8007d48:	08007efb 	.word	0x08007efb
 8007d4c:	08007efb 	.word	0x08007efb
 8007d50:	08007e37 	.word	0x08007e37
 8007d54:	08007efb 	.word	0x08007efb
 8007d58:	08007efb 	.word	0x08007efb
 8007d5c:	08007efb 	.word	0x08007efb
 8007d60:	08007e79 	.word	0x08007e79
 8007d64:	08007efb 	.word	0x08007efb
 8007d68:	08007efb 	.word	0x08007efb
 8007d6c:	08007efb 	.word	0x08007efb
 8007d70:	08007eb9 	.word	0x08007eb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f964 	bl	8008048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0208 	orr.w	r2, r2, #8
 8007d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0204 	bic.w	r2, r2, #4
 8007d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6999      	ldr	r1, [r3, #24]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	619a      	str	r2, [r3, #24]
      break;
 8007db2:	e0a5      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f9d4 	bl	8008168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6999      	ldr	r1, [r3, #24]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	021a      	lsls	r2, r3, #8
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	619a      	str	r2, [r3, #24]
      break;
 8007df4:	e084      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68b9      	ldr	r1, [r7, #8]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fa3d 	bl	800827c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0208 	orr.w	r2, r2, #8
 8007e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0204 	bic.w	r2, r2, #4
 8007e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69d9      	ldr	r1, [r3, #28]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	61da      	str	r2, [r3, #28]
      break;
 8007e34:	e064      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 faa5 	bl	800838c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69da      	ldr	r2, [r3, #28]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69da      	ldr	r2, [r3, #28]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69d9      	ldr	r1, [r3, #28]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	021a      	lsls	r2, r3, #8
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	61da      	str	r2, [r3, #28]
      break;
 8007e76:	e043      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 faee 	bl	8008460 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0204 	bic.w	r2, r2, #4
 8007ea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007eb6:	e023      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fb32 	bl	8008528 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	021a      	lsls	r2, r3, #8
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ef8:	e002      	b.n	8007f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	75fb      	strb	r3, [r7, #23]
      break;
 8007efe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a40      	ldr	r2, [pc, #256]	; (8008028 <TIM_Base_SetConfig+0x114>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d013      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f32:	d00f      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a3d      	ldr	r2, [pc, #244]	; (800802c <TIM_Base_SetConfig+0x118>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00b      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a3c      	ldr	r2, [pc, #240]	; (8008030 <TIM_Base_SetConfig+0x11c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d007      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a3b      	ldr	r2, [pc, #236]	; (8008034 <TIM_Base_SetConfig+0x120>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a3a      	ldr	r2, [pc, #232]	; (8008038 <TIM_Base_SetConfig+0x124>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d108      	bne.n	8007f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2f      	ldr	r2, [pc, #188]	; (8008028 <TIM_Base_SetConfig+0x114>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01f      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f74:	d01b      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2c      	ldr	r2, [pc, #176]	; (800802c <TIM_Base_SetConfig+0x118>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d017      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2b      	ldr	r2, [pc, #172]	; (8008030 <TIM_Base_SetConfig+0x11c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a2a      	ldr	r2, [pc, #168]	; (8008034 <TIM_Base_SetConfig+0x120>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00f      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a29      	ldr	r2, [pc, #164]	; (8008038 <TIM_Base_SetConfig+0x124>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00b      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a28      	ldr	r2, [pc, #160]	; (800803c <TIM_Base_SetConfig+0x128>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d007      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a27      	ldr	r2, [pc, #156]	; (8008040 <TIM_Base_SetConfig+0x12c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d003      	beq.n	8007fae <TIM_Base_SetConfig+0x9a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a26      	ldr	r2, [pc, #152]	; (8008044 <TIM_Base_SetConfig+0x130>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d108      	bne.n	8007fc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a10      	ldr	r2, [pc, #64]	; (8008028 <TIM_Base_SetConfig+0x114>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00f      	beq.n	800800c <TIM_Base_SetConfig+0xf8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a12      	ldr	r2, [pc, #72]	; (8008038 <TIM_Base_SetConfig+0x124>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00b      	beq.n	800800c <TIM_Base_SetConfig+0xf8>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a11      	ldr	r2, [pc, #68]	; (800803c <TIM_Base_SetConfig+0x128>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d007      	beq.n	800800c <TIM_Base_SetConfig+0xf8>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a10      	ldr	r2, [pc, #64]	; (8008040 <TIM_Base_SetConfig+0x12c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d003      	beq.n	800800c <TIM_Base_SetConfig+0xf8>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a0f      	ldr	r2, [pc, #60]	; (8008044 <TIM_Base_SetConfig+0x130>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d103      	bne.n	8008014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	615a      	str	r2, [r3, #20]
}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40012c00 	.word	0x40012c00
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40013400 	.word	0x40013400
 800803c:	40014000 	.word	0x40014000
 8008040:	40014400 	.word	0x40014400
 8008044:	40014800 	.word	0x40014800

08008048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	f023 0201 	bic.w	r2, r3, #1
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0303 	bic.w	r3, r3, #3
 8008082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f023 0302 	bic.w	r3, r3, #2
 8008094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a2c      	ldr	r2, [pc, #176]	; (8008154 <TIM_OC1_SetConfig+0x10c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00f      	beq.n	80080c8 <TIM_OC1_SetConfig+0x80>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a2b      	ldr	r2, [pc, #172]	; (8008158 <TIM_OC1_SetConfig+0x110>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00b      	beq.n	80080c8 <TIM_OC1_SetConfig+0x80>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a2a      	ldr	r2, [pc, #168]	; (800815c <TIM_OC1_SetConfig+0x114>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d007      	beq.n	80080c8 <TIM_OC1_SetConfig+0x80>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a29      	ldr	r2, [pc, #164]	; (8008160 <TIM_OC1_SetConfig+0x118>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d003      	beq.n	80080c8 <TIM_OC1_SetConfig+0x80>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a28      	ldr	r2, [pc, #160]	; (8008164 <TIM_OC1_SetConfig+0x11c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d10c      	bne.n	80080e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f023 0308 	bic.w	r3, r3, #8
 80080ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f023 0304 	bic.w	r3, r3, #4
 80080e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a1b      	ldr	r2, [pc, #108]	; (8008154 <TIM_OC1_SetConfig+0x10c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00f      	beq.n	800810a <TIM_OC1_SetConfig+0xc2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1a      	ldr	r2, [pc, #104]	; (8008158 <TIM_OC1_SetConfig+0x110>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00b      	beq.n	800810a <TIM_OC1_SetConfig+0xc2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a19      	ldr	r2, [pc, #100]	; (800815c <TIM_OC1_SetConfig+0x114>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d007      	beq.n	800810a <TIM_OC1_SetConfig+0xc2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a18      	ldr	r2, [pc, #96]	; (8008160 <TIM_OC1_SetConfig+0x118>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d003      	beq.n	800810a <TIM_OC1_SetConfig+0xc2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a17      	ldr	r2, [pc, #92]	; (8008164 <TIM_OC1_SetConfig+0x11c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d111      	bne.n	800812e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	4313      	orrs	r3, r2
 8008122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	621a      	str	r2, [r3, #32]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	40012c00 	.word	0x40012c00
 8008158:	40013400 	.word	0x40013400
 800815c:	40014000 	.word	0x40014000
 8008160:	40014400 	.word	0x40014400
 8008164:	40014800 	.word	0x40014800

08008168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	f023 0210 	bic.w	r2, r3, #16
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f023 0320 	bic.w	r3, r3, #32
 80081b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a28      	ldr	r2, [pc, #160]	; (8008268 <TIM_OC2_SetConfig+0x100>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_OC2_SetConfig+0x6c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a27      	ldr	r2, [pc, #156]	; (800826c <TIM_OC2_SetConfig+0x104>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d10d      	bne.n	80081f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a1d      	ldr	r2, [pc, #116]	; (8008268 <TIM_OC2_SetConfig+0x100>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00f      	beq.n	8008218 <TIM_OC2_SetConfig+0xb0>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a1c      	ldr	r2, [pc, #112]	; (800826c <TIM_OC2_SetConfig+0x104>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00b      	beq.n	8008218 <TIM_OC2_SetConfig+0xb0>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a1b      	ldr	r2, [pc, #108]	; (8008270 <TIM_OC2_SetConfig+0x108>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d007      	beq.n	8008218 <TIM_OC2_SetConfig+0xb0>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <TIM_OC2_SetConfig+0x10c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC2_SetConfig+0xb0>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a19      	ldr	r2, [pc, #100]	; (8008278 <TIM_OC2_SetConfig+0x110>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d113      	bne.n	8008240 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800821e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40012c00 	.word	0x40012c00
 800826c:	40013400 	.word	0x40013400
 8008270:	40014000 	.word	0x40014000
 8008274:	40014400 	.word	0x40014400
 8008278:	40014800 	.word	0x40014800

0800827c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0303 	bic.w	r3, r3, #3
 80082b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a27      	ldr	r2, [pc, #156]	; (8008378 <TIM_OC3_SetConfig+0xfc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d003      	beq.n	80082e6 <TIM_OC3_SetConfig+0x6a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a26      	ldr	r2, [pc, #152]	; (800837c <TIM_OC3_SetConfig+0x100>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d10d      	bne.n	8008302 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a1c      	ldr	r2, [pc, #112]	; (8008378 <TIM_OC3_SetConfig+0xfc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00f      	beq.n	800832a <TIM_OC3_SetConfig+0xae>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1b      	ldr	r2, [pc, #108]	; (800837c <TIM_OC3_SetConfig+0x100>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00b      	beq.n	800832a <TIM_OC3_SetConfig+0xae>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1a      	ldr	r2, [pc, #104]	; (8008380 <TIM_OC3_SetConfig+0x104>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d007      	beq.n	800832a <TIM_OC3_SetConfig+0xae>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a19      	ldr	r2, [pc, #100]	; (8008384 <TIM_OC3_SetConfig+0x108>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d003      	beq.n	800832a <TIM_OC3_SetConfig+0xae>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a18      	ldr	r2, [pc, #96]	; (8008388 <TIM_OC3_SetConfig+0x10c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d113      	bne.n	8008352 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	621a      	str	r2, [r3, #32]
}
 800836c:	bf00      	nop
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	40012c00 	.word	0x40012c00
 800837c:	40013400 	.word	0x40013400
 8008380:	40014000 	.word	0x40014000
 8008384:	40014400 	.word	0x40014400
 8008388:	40014800 	.word	0x40014800

0800838c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	031b      	lsls	r3, r3, #12
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a18      	ldr	r2, [pc, #96]	; (800844c <TIM_OC4_SetConfig+0xc0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00f      	beq.n	8008410 <TIM_OC4_SetConfig+0x84>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a17      	ldr	r2, [pc, #92]	; (8008450 <TIM_OC4_SetConfig+0xc4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <TIM_OC4_SetConfig+0x84>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a16      	ldr	r2, [pc, #88]	; (8008454 <TIM_OC4_SetConfig+0xc8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <TIM_OC4_SetConfig+0x84>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a15      	ldr	r2, [pc, #84]	; (8008458 <TIM_OC4_SetConfig+0xcc>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_OC4_SetConfig+0x84>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a14      	ldr	r2, [pc, #80]	; (800845c <TIM_OC4_SetConfig+0xd0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d109      	bne.n	8008424 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	019b      	lsls	r3, r3, #6
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40012c00 	.word	0x40012c00
 8008450:	40013400 	.word	0x40013400
 8008454:	40014000 	.word	0x40014000
 8008458:	40014400 	.word	0x40014400
 800845c:	40014800 	.word	0x40014800

08008460 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800848e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a17      	ldr	r2, [pc, #92]	; (8008514 <TIM_OC5_SetConfig+0xb4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00f      	beq.n	80084da <TIM_OC5_SetConfig+0x7a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a16      	ldr	r2, [pc, #88]	; (8008518 <TIM_OC5_SetConfig+0xb8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00b      	beq.n	80084da <TIM_OC5_SetConfig+0x7a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a15      	ldr	r2, [pc, #84]	; (800851c <TIM_OC5_SetConfig+0xbc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d007      	beq.n	80084da <TIM_OC5_SetConfig+0x7a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a14      	ldr	r2, [pc, #80]	; (8008520 <TIM_OC5_SetConfig+0xc0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d003      	beq.n	80084da <TIM_OC5_SetConfig+0x7a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a13      	ldr	r2, [pc, #76]	; (8008524 <TIM_OC5_SetConfig+0xc4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d109      	bne.n	80084ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	621a      	str	r2, [r3, #32]
}
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	40012c00 	.word	0x40012c00
 8008518:	40013400 	.word	0x40013400
 800851c:	40014000 	.word	0x40014000
 8008520:	40014400 	.word	0x40014400
 8008524:	40014800 	.word	0x40014800

08008528 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800856e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	051b      	lsls	r3, r3, #20
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a18      	ldr	r2, [pc, #96]	; (80085e0 <TIM_OC6_SetConfig+0xb8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00f      	beq.n	80085a4 <TIM_OC6_SetConfig+0x7c>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <TIM_OC6_SetConfig+0xbc>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00b      	beq.n	80085a4 <TIM_OC6_SetConfig+0x7c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a16      	ldr	r2, [pc, #88]	; (80085e8 <TIM_OC6_SetConfig+0xc0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d007      	beq.n	80085a4 <TIM_OC6_SetConfig+0x7c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a15      	ldr	r2, [pc, #84]	; (80085ec <TIM_OC6_SetConfig+0xc4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_OC6_SetConfig+0x7c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a14      	ldr	r2, [pc, #80]	; (80085f0 <TIM_OC6_SetConfig+0xc8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d109      	bne.n	80085b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	029b      	lsls	r3, r3, #10
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	621a      	str	r2, [r3, #32]
}
 80085d2:	bf00      	nop
 80085d4:	371c      	adds	r7, #28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40013400 	.word	0x40013400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800

080085f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008608:	2302      	movs	r3, #2
 800860a:	e068      	b.n	80086de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a2e      	ldr	r2, [pc, #184]	; (80086ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d004      	beq.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a2d      	ldr	r2, [pc, #180]	; (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d108      	bne.n	8008652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01d      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867e:	d018      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1a      	ldr	r2, [pc, #104]	; (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00e      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a18      	ldr	r2, [pc, #96]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a13      	ldr	r2, [pc, #76]	; (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a14      	ldr	r2, [pc, #80]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d10c      	bne.n	80086cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40012c00 	.word	0x40012c00
 80086f0:	40013400 	.word	0x40013400
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40000800 	.word	0x40000800
 80086fc:	40000c00 	.word	0x40000c00
 8008700:	40014000 	.word	0x40014000

08008704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800871c:	2302      	movs	r3, #2
 800871e:	e065      	b.n	80087ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	041b      	lsls	r3, r3, #16
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d004      	beq.n	80087ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a14      	ldr	r2, [pc, #80]	; (80087fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d115      	bne.n	80087da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40013400 	.word	0x40013400

08008800 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008800:	b480      	push	{r7}
 8008802:	b08b      	sub	sp, #44	; 0x2c
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_TIMEx_ConfigBreakInput+0x20>
 800881c:	2302      	movs	r3, #2
 800881e:	e0af      	b.n	8008980 <HAL_TIMEx_ConfigBreakInput+0x180>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3b01      	subs	r3, #1
 800882e:	2b07      	cmp	r3, #7
 8008830:	d83a      	bhi.n	80088a8 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008832:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008838:	08008859 	.word	0x08008859
 800883c:	0800886d 	.word	0x0800886d
 8008840:	080088a9 	.word	0x080088a9
 8008844:	08008881 	.word	0x08008881
 8008848:	080088a9 	.word	0x080088a9
 800884c:	080088a9 	.word	0x080088a9
 8008850:	080088a9 	.word	0x080088a9
 8008854:	08008895 	.word	0x08008895
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008858:	2301      	movs	r3, #1
 800885a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008864:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008866:	2309      	movs	r3, #9
 8008868:	613b      	str	r3, [r7, #16]
      break;
 800886a:	e026      	b.n	80088ba <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800886c:	2302      	movs	r3, #2
 800886e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008870:	2301      	movs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008878:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800887a:	230a      	movs	r3, #10
 800887c:	613b      	str	r3, [r7, #16]
      break;
 800887e:	e01c      	b.n	80088ba <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008880:	2304      	movs	r3, #4
 8008882:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008884:	2302      	movs	r3, #2
 8008886:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800888c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800888e:	230b      	movs	r3, #11
 8008890:	613b      	str	r3, [r7, #16]
      break;
 8008892:	e012      	b.n	80088ba <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008898:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800889a:	2308      	movs	r3, #8
 800889c:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
      break;
 80088a6:	e008      	b.n	80088ba <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	613b      	str	r3, [r7, #16]
      break;
 80088b8:	bf00      	nop
    }
  }

  switch (BreakInput)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d003      	beq.n	80088c8 <HAL_TIMEx_ConfigBreakInput+0xc8>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d029      	beq.n	800891a <HAL_TIMEx_ConfigBreakInput+0x11a>
 80088c6:	e051      	b.n	800896c <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ce:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	43db      	mvns	r3, r3
 80088d4:	6a3a      	ldr	r2, [r7, #32]
 80088d6:	4013      	ands	r3, r2
 80088d8:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	409a      	lsls	r2, r3
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	4013      	ands	r3, r2
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d00d      	beq.n	8008910 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	43db      	mvns	r3, r3
 80088f8:	6a3a      	ldr	r2, [r7, #32]
 80088fa:	4013      	ands	r3, r2
 80088fc:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	409a      	lsls	r2, r3
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	4013      	ands	r3, r2
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	4313      	orrs	r3, r2
 800890e:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008918:	e02c      	b.n	8008974 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008920:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	43db      	mvns	r3, r3
 8008926:	6a3a      	ldr	r2, [r7, #32]
 8008928:	4013      	ands	r3, r2
 800892a:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	409a      	lsls	r2, r3
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4013      	ands	r3, r2
 8008938:	6a3a      	ldr	r2, [r7, #32]
 800893a:	4313      	orrs	r3, r2
 800893c:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b08      	cmp	r3, #8
 8008944:	d00d      	beq.n	8008962 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	43db      	mvns	r3, r3
 800894a:	6a3a      	ldr	r2, [r7, #32]
 800894c:	4013      	ands	r3, r2
 800894e:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	409a      	lsls	r2, r3
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	4013      	ands	r3, r2
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	4313      	orrs	r3, r2
 8008960:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6a3a      	ldr	r2, [r7, #32]
 8008968:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800896a:	e003      	b.n	8008974 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008972:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800897c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008980:	4618      	mov	r0, r3
 8008982:	372c      	adds	r7, #44	; 0x2c
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e042      	b.n	8008a24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d106      	bne.n	80089b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7f9 fd6b 	bl	800248c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2224      	movs	r2, #36	; 0x24
 80089ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0201 	bic.w	r2, r2, #1
 80089cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fbb4 	bl	8009144 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f8b5 	bl	8008b4c <UART_SetConfig>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e01b      	b.n	8008a24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fc33 	bl	8009288 <UART_CheckIdleState>
 8008a22:	4603      	mov	r3, r0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	; 0x28
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d17c      	bne.n	8008b40 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_UART_Transmit+0x26>
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e075      	b.n	8008b42 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2221      	movs	r2, #33	; 0x21
 8008a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a66:	f7fa fa55 	bl	8002f14 <HAL_GetTick>
 8008a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	88fa      	ldrh	r2, [r7, #6]
 8008a70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	88fa      	ldrh	r2, [r7, #6]
 8008a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a84:	d108      	bne.n	8008a98 <HAL_UART_Transmit+0x6c>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d104      	bne.n	8008a98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	e003      	b.n	8008aa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008aa0:	e031      	b.n	8008b06 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 fc95 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e03e      	b.n	8008b42 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10b      	bne.n	8008ae2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	881a      	ldrh	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ad6:	b292      	uxth	r2, r2
 8008ad8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	3302      	adds	r3, #2
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	e008      	b.n	8008af4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	b292      	uxth	r2, r2
 8008aec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	3301      	adds	r3, #1
 8008af2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	3b01      	subs	r3, #1
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1c7      	bne.n	8008aa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2140      	movs	r1, #64	; 0x40
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fc5d 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e006      	b.n	8008b42 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e000      	b.n	8008b42 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008b40:	2302      	movs	r3, #2
  }
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b50:	b08c      	sub	sp, #48	; 0x30
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	431a      	orrs	r2, r3
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4baa      	ldr	r3, [pc, #680]	; (8008e24 <UART_SetConfig+0x2d8>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b84:	430b      	orrs	r3, r1
 8008b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a9f      	ldr	r2, [pc, #636]	; (8008e28 <UART_SetConfig+0x2dc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d004      	beq.n	8008bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008bc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	6812      	ldr	r2, [r2, #0]
 8008bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	f023 010f 	bic.w	r1, r3, #15
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a90      	ldr	r2, [pc, #576]	; (8008e2c <UART_SetConfig+0x2e0>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d125      	bne.n	8008c3c <UART_SetConfig+0xf0>
 8008bf0:	4b8f      	ldr	r3, [pc, #572]	; (8008e30 <UART_SetConfig+0x2e4>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d81a      	bhi.n	8008c34 <UART_SetConfig+0xe8>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <UART_SetConfig+0xb8>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c15 	.word	0x08008c15
 8008c08:	08008c25 	.word	0x08008c25
 8008c0c:	08008c1d 	.word	0x08008c1d
 8008c10:	08008c2d 	.word	0x08008c2d
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c1a:	e116      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c22:	e112      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008c24:	2304      	movs	r3, #4
 8008c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c2a:	e10e      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c32:	e10a      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008c34:	2310      	movs	r3, #16
 8008c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c3a:	e106      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a7c      	ldr	r2, [pc, #496]	; (8008e34 <UART_SetConfig+0x2e8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d138      	bne.n	8008cb8 <UART_SetConfig+0x16c>
 8008c46:	4b7a      	ldr	r3, [pc, #488]	; (8008e30 <UART_SetConfig+0x2e4>)
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4c:	f003 030c 	and.w	r3, r3, #12
 8008c50:	2b0c      	cmp	r3, #12
 8008c52:	d82d      	bhi.n	8008cb0 <UART_SetConfig+0x164>
 8008c54:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <UART_SetConfig+0x110>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c91 	.word	0x08008c91
 8008c60:	08008cb1 	.word	0x08008cb1
 8008c64:	08008cb1 	.word	0x08008cb1
 8008c68:	08008cb1 	.word	0x08008cb1
 8008c6c:	08008ca1 	.word	0x08008ca1
 8008c70:	08008cb1 	.word	0x08008cb1
 8008c74:	08008cb1 	.word	0x08008cb1
 8008c78:	08008cb1 	.word	0x08008cb1
 8008c7c:	08008c99 	.word	0x08008c99
 8008c80:	08008cb1 	.word	0x08008cb1
 8008c84:	08008cb1 	.word	0x08008cb1
 8008c88:	08008cb1 	.word	0x08008cb1
 8008c8c:	08008ca9 	.word	0x08008ca9
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c96:	e0d8      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9e:	e0d4      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca6:	e0d0      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cae:	e0cc      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cb6:	e0c8      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a5e      	ldr	r2, [pc, #376]	; (8008e38 <UART_SetConfig+0x2ec>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d125      	bne.n	8008d0e <UART_SetConfig+0x1c2>
 8008cc2:	4b5b      	ldr	r3, [pc, #364]	; (8008e30 <UART_SetConfig+0x2e4>)
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ccc:	2b30      	cmp	r3, #48	; 0x30
 8008cce:	d016      	beq.n	8008cfe <UART_SetConfig+0x1b2>
 8008cd0:	2b30      	cmp	r3, #48	; 0x30
 8008cd2:	d818      	bhi.n	8008d06 <UART_SetConfig+0x1ba>
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d00a      	beq.n	8008cee <UART_SetConfig+0x1a2>
 8008cd8:	2b20      	cmp	r3, #32
 8008cda:	d814      	bhi.n	8008d06 <UART_SetConfig+0x1ba>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <UART_SetConfig+0x19a>
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	d008      	beq.n	8008cf6 <UART_SetConfig+0x1aa>
 8008ce4:	e00f      	b.n	8008d06 <UART_SetConfig+0x1ba>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cec:	e0ad      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cf4:	e0a9      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008cf6:	2304      	movs	r3, #4
 8008cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cfc:	e0a5      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008cfe:	2308      	movs	r3, #8
 8008d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d04:	e0a1      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008d06:	2310      	movs	r3, #16
 8008d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0c:	e09d      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a4a      	ldr	r2, [pc, #296]	; (8008e3c <UART_SetConfig+0x2f0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d125      	bne.n	8008d64 <UART_SetConfig+0x218>
 8008d18:	4b45      	ldr	r3, [pc, #276]	; (8008e30 <UART_SetConfig+0x2e4>)
 8008d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d22:	2bc0      	cmp	r3, #192	; 0xc0
 8008d24:	d016      	beq.n	8008d54 <UART_SetConfig+0x208>
 8008d26:	2bc0      	cmp	r3, #192	; 0xc0
 8008d28:	d818      	bhi.n	8008d5c <UART_SetConfig+0x210>
 8008d2a:	2b80      	cmp	r3, #128	; 0x80
 8008d2c:	d00a      	beq.n	8008d44 <UART_SetConfig+0x1f8>
 8008d2e:	2b80      	cmp	r3, #128	; 0x80
 8008d30:	d814      	bhi.n	8008d5c <UART_SetConfig+0x210>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <UART_SetConfig+0x1f0>
 8008d36:	2b40      	cmp	r3, #64	; 0x40
 8008d38:	d008      	beq.n	8008d4c <UART_SetConfig+0x200>
 8008d3a:	e00f      	b.n	8008d5c <UART_SetConfig+0x210>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d42:	e082      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008d44:	2302      	movs	r3, #2
 8008d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4a:	e07e      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d52:	e07a      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008d54:	2308      	movs	r3, #8
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5a:	e076      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008d5c:	2310      	movs	r3, #16
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d62:	e072      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a35      	ldr	r2, [pc, #212]	; (8008e40 <UART_SetConfig+0x2f4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d12a      	bne.n	8008dc4 <UART_SetConfig+0x278>
 8008d6e:	4b30      	ldr	r3, [pc, #192]	; (8008e30 <UART_SetConfig+0x2e4>)
 8008d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d7c:	d01a      	beq.n	8008db4 <UART_SetConfig+0x268>
 8008d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d82:	d81b      	bhi.n	8008dbc <UART_SetConfig+0x270>
 8008d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d88:	d00c      	beq.n	8008da4 <UART_SetConfig+0x258>
 8008d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d8e:	d815      	bhi.n	8008dbc <UART_SetConfig+0x270>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <UART_SetConfig+0x250>
 8008d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d98:	d008      	beq.n	8008dac <UART_SetConfig+0x260>
 8008d9a:	e00f      	b.n	8008dbc <UART_SetConfig+0x270>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da2:	e052      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008da4:	2302      	movs	r3, #2
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008daa:	e04e      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008dac:	2304      	movs	r3, #4
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db2:	e04a      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008db4:	2308      	movs	r3, #8
 8008db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dba:	e046      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc2:	e042      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a17      	ldr	r2, [pc, #92]	; (8008e28 <UART_SetConfig+0x2dc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d13a      	bne.n	8008e44 <UART_SetConfig+0x2f8>
 8008dce:	4b18      	ldr	r3, [pc, #96]	; (8008e30 <UART_SetConfig+0x2e4>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ddc:	d01a      	beq.n	8008e14 <UART_SetConfig+0x2c8>
 8008dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008de2:	d81b      	bhi.n	8008e1c <UART_SetConfig+0x2d0>
 8008de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de8:	d00c      	beq.n	8008e04 <UART_SetConfig+0x2b8>
 8008dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dee:	d815      	bhi.n	8008e1c <UART_SetConfig+0x2d0>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <UART_SetConfig+0x2b0>
 8008df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df8:	d008      	beq.n	8008e0c <UART_SetConfig+0x2c0>
 8008dfa:	e00f      	b.n	8008e1c <UART_SetConfig+0x2d0>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e02:	e022      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008e04:	2302      	movs	r3, #2
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e0a:	e01e      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e12:	e01a      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e1a:	e016      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e22:	e012      	b.n	8008e4a <UART_SetConfig+0x2fe>
 8008e24:	cfff69f3 	.word	0xcfff69f3
 8008e28:	40008000 	.word	0x40008000
 8008e2c:	40013800 	.word	0x40013800
 8008e30:	40021000 	.word	0x40021000
 8008e34:	40004400 	.word	0x40004400
 8008e38:	40004800 	.word	0x40004800
 8008e3c:	40004c00 	.word	0x40004c00
 8008e40:	40005000 	.word	0x40005000
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4aae      	ldr	r2, [pc, #696]	; (8009108 <UART_SetConfig+0x5bc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	f040 8097 	bne.w	8008f84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d823      	bhi.n	8008ea6 <UART_SetConfig+0x35a>
 8008e5e:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <UART_SetConfig+0x318>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008ea7 	.word	0x08008ea7
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008ea7 	.word	0x08008ea7
 8008e74:	08008e97 	.word	0x08008e97
 8008e78:	08008ea7 	.word	0x08008ea7
 8008e7c:	08008ea7 	.word	0x08008ea7
 8008e80:	08008ea7 	.word	0x08008ea7
 8008e84:	08008e9f 	.word	0x08008e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e88:	f7fc fb64 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8008e8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e8e:	e010      	b.n	8008eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e90:	4b9e      	ldr	r3, [pc, #632]	; (800910c <UART_SetConfig+0x5c0>)
 8008e92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e94:	e00d      	b.n	8008eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e96:	f7fc fac5 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8008e9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e9c:	e009      	b.n	8008eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ea4:	e005      	b.n	8008eb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008eb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 8130 	beq.w	800911a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	4a94      	ldr	r2, [pc, #592]	; (8009110 <UART_SetConfig+0x5c4>)
 8008ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	4413      	add	r3, r2
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d305      	bcc.n	8008eea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d903      	bls.n	8008ef2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ef0:	e113      	b.n	800911a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	60bb      	str	r3, [r7, #8]
 8008ef8:	60fa      	str	r2, [r7, #12]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	4a84      	ldr	r2, [pc, #528]	; (8009110 <UART_SetConfig+0x5c4>)
 8008f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2200      	movs	r2, #0
 8008f08:	603b      	str	r3, [r7, #0]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f14:	f7f7 fe60 	bl	8000bd8 <__aeabi_uldivmod>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4619      	mov	r1, r3
 8008f20:	f04f 0200 	mov.w	r2, #0
 8008f24:	f04f 0300 	mov.w	r3, #0
 8008f28:	020b      	lsls	r3, r1, #8
 8008f2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f2e:	0202      	lsls	r2, r0, #8
 8008f30:	6979      	ldr	r1, [r7, #20]
 8008f32:	6849      	ldr	r1, [r1, #4]
 8008f34:	0849      	lsrs	r1, r1, #1
 8008f36:	2000      	movs	r0, #0
 8008f38:	460c      	mov	r4, r1
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	eb12 0804 	adds.w	r8, r2, r4
 8008f40:	eb43 0905 	adc.w	r9, r3, r5
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	469a      	mov	sl, r3
 8008f4c:	4693      	mov	fp, r2
 8008f4e:	4652      	mov	r2, sl
 8008f50:	465b      	mov	r3, fp
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 fe3f 	bl	8000bd8 <__aeabi_uldivmod>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4613      	mov	r3, r2
 8008f60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f68:	d308      	bcc.n	8008f7c <UART_SetConfig+0x430>
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f70:	d204      	bcs.n	8008f7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6a3a      	ldr	r2, [r7, #32]
 8008f78:	60da      	str	r2, [r3, #12]
 8008f7a:	e0ce      	b.n	800911a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f82:	e0ca      	b.n	800911a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8c:	d166      	bne.n	800905c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f92:	2b08      	cmp	r3, #8
 8008f94:	d827      	bhi.n	8008fe6 <UART_SetConfig+0x49a>
 8008f96:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <UART_SetConfig+0x450>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fc1 	.word	0x08008fc1
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fd1 	.word	0x08008fd1
 8008fa8:	08008fe7 	.word	0x08008fe7
 8008fac:	08008fd7 	.word	0x08008fd7
 8008fb0:	08008fe7 	.word	0x08008fe7
 8008fb4:	08008fe7 	.word	0x08008fe7
 8008fb8:	08008fe7 	.word	0x08008fe7
 8008fbc:	08008fdf 	.word	0x08008fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fc0:	f7fc fac8 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8008fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fc6:	e014      	b.n	8008ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc8:	f7fc fada 	bl	8005580 <HAL_RCC_GetPCLK2Freq>
 8008fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fce:	e010      	b.n	8008ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fd0:	4b4e      	ldr	r3, [pc, #312]	; (800910c <UART_SetConfig+0x5c0>)
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fd4:	e00d      	b.n	8008ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fd6:	f7fc fa25 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 8008fda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fdc:	e009      	b.n	8008ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fe4:	e005      	b.n	8008ff2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8090 	beq.w	800911a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	4a44      	ldr	r2, [pc, #272]	; (8009110 <UART_SetConfig+0x5c4>)
 8009000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009004:	461a      	mov	r2, r3
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	fbb3 f3f2 	udiv	r3, r3, r2
 800900c:	005a      	lsls	r2, r3, #1
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	085b      	lsrs	r3, r3, #1
 8009014:	441a      	add	r2, r3
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	fbb2 f3f3 	udiv	r3, r2, r3
 800901e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	2b0f      	cmp	r3, #15
 8009024:	d916      	bls.n	8009054 <UART_SetConfig+0x508>
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800902c:	d212      	bcs.n	8009054 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f023 030f 	bic.w	r3, r3, #15
 8009036:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	b29b      	uxth	r3, r3
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	b29a      	uxth	r2, r3
 8009044:	8bfb      	ldrh	r3, [r7, #30]
 8009046:	4313      	orrs	r3, r2
 8009048:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	8bfa      	ldrh	r2, [r7, #30]
 8009050:	60da      	str	r2, [r3, #12]
 8009052:	e062      	b.n	800911a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800905a:	e05e      	b.n	800911a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800905c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009060:	2b08      	cmp	r3, #8
 8009062:	d828      	bhi.n	80090b6 <UART_SetConfig+0x56a>
 8009064:	a201      	add	r2, pc, #4	; (adr r2, 800906c <UART_SetConfig+0x520>)
 8009066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906a:	bf00      	nop
 800906c:	08009091 	.word	0x08009091
 8009070:	08009099 	.word	0x08009099
 8009074:	080090a1 	.word	0x080090a1
 8009078:	080090b7 	.word	0x080090b7
 800907c:	080090a7 	.word	0x080090a7
 8009080:	080090b7 	.word	0x080090b7
 8009084:	080090b7 	.word	0x080090b7
 8009088:	080090b7 	.word	0x080090b7
 800908c:	080090af 	.word	0x080090af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009090:	f7fc fa60 	bl	8005554 <HAL_RCC_GetPCLK1Freq>
 8009094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009096:	e014      	b.n	80090c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009098:	f7fc fa72 	bl	8005580 <HAL_RCC_GetPCLK2Freq>
 800909c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800909e:	e010      	b.n	80090c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090a0:	4b1a      	ldr	r3, [pc, #104]	; (800910c <UART_SetConfig+0x5c0>)
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090a4:	e00d      	b.n	80090c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090a6:	f7fc f9bd 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80090aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090ac:	e009      	b.n	80090c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090b4:	e005      	b.n	80090c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80090c0:	bf00      	nop
    }

    if (pclk != 0U)
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d028      	beq.n	800911a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	4a10      	ldr	r2, [pc, #64]	; (8009110 <UART_SetConfig+0x5c4>)
 80090ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d2:	461a      	mov	r2, r3
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	441a      	add	r2, r3
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	2b0f      	cmp	r3, #15
 80090f0:	d910      	bls.n	8009114 <UART_SetConfig+0x5c8>
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f8:	d20c      	bcs.n	8009114 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60da      	str	r2, [r3, #12]
 8009104:	e009      	b.n	800911a <UART_SetConfig+0x5ce>
 8009106:	bf00      	nop
 8009108:	40008000 	.word	0x40008000
 800910c:	00f42400 	.word	0x00f42400
 8009110:	0800c234 	.word	0x0800c234
      }
      else
      {
        ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2201      	movs	r2, #1
 800911e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2201      	movs	r2, #1
 8009126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2200      	movs	r2, #0
 800912e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2200      	movs	r2, #0
 8009134:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009136:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800913a:	4618      	mov	r0, r3
 800913c:	3730      	adds	r7, #48	; 0x30
 800913e:	46bd      	mov	sp, r7
 8009140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01a      	beq.n	800925a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009242:	d10a      	bne.n	800925a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	605a      	str	r2, [r3, #4]
  }
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b098      	sub	sp, #96	; 0x60
 800928c:	af02      	add	r7, sp, #8
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009298:	f7f9 fe3c 	bl	8002f14 <HAL_GetTick>
 800929c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d12f      	bne.n	800930c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b4:	2200      	movs	r2, #0
 80092b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f88e 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d022      	beq.n	800930c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092da:	653b      	str	r3, [r7, #80]	; 0x50
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e4:	647b      	str	r3, [r7, #68]	; 0x44
 80092e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e6      	bne.n	80092c6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2220      	movs	r2, #32
 80092fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e063      	b.n	80093d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	2b04      	cmp	r3, #4
 8009318:	d149      	bne.n	80093ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800931a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009322:	2200      	movs	r2, #0
 8009324:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f857 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d03c      	beq.n	80093ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	623b      	str	r3, [r7, #32]
   return(result);
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009348:	64fb      	str	r3, [r7, #76]	; 0x4c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009352:	633b      	str	r3, [r7, #48]	; 0x30
 8009354:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e6      	bne.n	8009334 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3308      	adds	r3, #8
 800936c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	60fb      	str	r3, [r7, #12]
   return(result);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	64bb      	str	r3, [r7, #72]	; 0x48
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009386:	61fa      	str	r2, [r7, #28]
 8009388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	69b9      	ldr	r1, [r7, #24]
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	617b      	str	r3, [r7, #20]
   return(result);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e012      	b.n	80093d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2220      	movs	r2, #32
 80093b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3758      	adds	r7, #88	; 0x58
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	4613      	mov	r3, r2
 80093ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ec:	e049      	b.n	8009482 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d045      	beq.n	8009482 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f6:	f7f9 fd8d 	bl	8002f14 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <UART_WaitOnFlagUntilTimeout+0x30>
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e048      	b.n	80094a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d031      	beq.n	8009482 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	f003 0308 	and.w	r3, r3, #8
 8009428:	2b08      	cmp	r3, #8
 800942a:	d110      	bne.n	800944e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2208      	movs	r2, #8
 8009432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f838 	bl	80094aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2208      	movs	r2, #8
 800943e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e029      	b.n	80094a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800945c:	d111      	bne.n	8009482 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f81e 	bl	80094aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e00f      	b.n	80094a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69da      	ldr	r2, [r3, #28]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4013      	ands	r3, r2
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	429a      	cmp	r2, r3
 8009490:	bf0c      	ite	eq
 8009492:	2301      	moveq	r3, #1
 8009494:	2300      	movne	r3, #0
 8009496:	b2db      	uxtb	r3, r3
 8009498:	461a      	mov	r2, r3
 800949a:	79fb      	ldrb	r3, [r7, #7]
 800949c:	429a      	cmp	r2, r3
 800949e:	d0a6      	beq.n	80093ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b095      	sub	sp, #84	; 0x54
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d0:	643b      	str	r3, [r7, #64]	; 0x40
 80094d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e6      	bne.n	80094b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3308      	adds	r3, #8
 80094ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094fa:	f023 0301 	bic.w	r3, r3, #1
 80094fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3308      	adds	r3, #8
 8009506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800950a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800950e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e3      	bne.n	80094e4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d118      	bne.n	8009556 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	60bb      	str	r3, [r7, #8]
   return(result);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f023 0310 	bic.w	r3, r3, #16
 8009538:	647b      	str	r3, [r7, #68]	; 0x44
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009542:	61bb      	str	r3, [r7, #24]
 8009544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6979      	ldr	r1, [r7, #20]
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	613b      	str	r3, [r7, #16]
   return(result);
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e6      	bne.n	8009524 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	675a      	str	r2, [r3, #116]	; 0x74
}
 800956a:	bf00      	nop
 800956c:	3754      	adds	r7, #84	; 0x54
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_UARTEx_DisableFifoMode+0x16>
 8009588:	2302      	movs	r3, #2
 800958a:	e027      	b.n	80095dc <HAL_UARTEx_DisableFifoMode+0x66>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2224      	movs	r2, #36	; 0x24
 8009598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0201 	bic.w	r2, r2, #1
 80095b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095fc:	2302      	movs	r3, #2
 80095fe:	e02d      	b.n	800965c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2224      	movs	r2, #36	; 0x24
 800960c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 0201 	bic.w	r2, r2, #1
 8009626:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f84f 	bl	80096e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009678:	2302      	movs	r3, #2
 800967a:	e02d      	b.n	80096d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2224      	movs	r2, #36	; 0x24
 8009688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0201 	bic.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f811 	bl	80096e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d108      	bne.n	8009702 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009700:	e031      	b.n	8009766 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009702:	2308      	movs	r3, #8
 8009704:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009706:	2308      	movs	r3, #8
 8009708:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	0e5b      	lsrs	r3, r3, #25
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	0f5b      	lsrs	r3, r3, #29
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	7b3a      	ldrb	r2, [r7, #12]
 800972e:	4911      	ldr	r1, [pc, #68]	; (8009774 <UARTEx_SetNbDataToProcess+0x94>)
 8009730:	5c8a      	ldrb	r2, [r1, r2]
 8009732:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009736:	7b3a      	ldrb	r2, [r7, #12]
 8009738:	490f      	ldr	r1, [pc, #60]	; (8009778 <UARTEx_SetNbDataToProcess+0x98>)
 800973a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800973c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009740:	b29a      	uxth	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	7b7a      	ldrb	r2, [r7, #13]
 800974c:	4909      	ldr	r1, [pc, #36]	; (8009774 <UARTEx_SetNbDataToProcess+0x94>)
 800974e:	5c8a      	ldrb	r2, [r1, r2]
 8009750:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009754:	7b7a      	ldrb	r2, [r7, #13]
 8009756:	4908      	ldr	r1, [pc, #32]	; (8009778 <UARTEx_SetNbDataToProcess+0x98>)
 8009758:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800975a:	fb93 f3f2 	sdiv	r3, r3, r2
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009766:	bf00      	nop
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	0800c24c 	.word	0x0800c24c
 8009778:	0800c254 	.word	0x0800c254

0800977c <__cvt>:
 800977c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	ec55 4b10 	vmov	r4, r5, d0
 8009784:	2d00      	cmp	r5, #0
 8009786:	460e      	mov	r6, r1
 8009788:	4619      	mov	r1, r3
 800978a:	462b      	mov	r3, r5
 800978c:	bfbb      	ittet	lt
 800978e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009792:	461d      	movlt	r5, r3
 8009794:	2300      	movge	r3, #0
 8009796:	232d      	movlt	r3, #45	; 0x2d
 8009798:	700b      	strb	r3, [r1, #0]
 800979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097a0:	4691      	mov	r9, r2
 80097a2:	f023 0820 	bic.w	r8, r3, #32
 80097a6:	bfbc      	itt	lt
 80097a8:	4622      	movlt	r2, r4
 80097aa:	4614      	movlt	r4, r2
 80097ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097b0:	d005      	beq.n	80097be <__cvt+0x42>
 80097b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097b6:	d100      	bne.n	80097ba <__cvt+0x3e>
 80097b8:	3601      	adds	r6, #1
 80097ba:	2102      	movs	r1, #2
 80097bc:	e000      	b.n	80097c0 <__cvt+0x44>
 80097be:	2103      	movs	r1, #3
 80097c0:	ab03      	add	r3, sp, #12
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	ab02      	add	r3, sp, #8
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	ec45 4b10 	vmov	d0, r4, r5
 80097cc:	4653      	mov	r3, sl
 80097ce:	4632      	mov	r2, r6
 80097d0:	f000 fe62 	bl	800a498 <_dtoa_r>
 80097d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097d8:	4607      	mov	r7, r0
 80097da:	d102      	bne.n	80097e2 <__cvt+0x66>
 80097dc:	f019 0f01 	tst.w	r9, #1
 80097e0:	d022      	beq.n	8009828 <__cvt+0xac>
 80097e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097e6:	eb07 0906 	add.w	r9, r7, r6
 80097ea:	d110      	bne.n	800980e <__cvt+0x92>
 80097ec:	783b      	ldrb	r3, [r7, #0]
 80097ee:	2b30      	cmp	r3, #48	; 0x30
 80097f0:	d10a      	bne.n	8009808 <__cvt+0x8c>
 80097f2:	2200      	movs	r2, #0
 80097f4:	2300      	movs	r3, #0
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f7 f97d 	bl	8000af8 <__aeabi_dcmpeq>
 80097fe:	b918      	cbnz	r0, 8009808 <__cvt+0x8c>
 8009800:	f1c6 0601 	rsb	r6, r6, #1
 8009804:	f8ca 6000 	str.w	r6, [sl]
 8009808:	f8da 3000 	ldr.w	r3, [sl]
 800980c:	4499      	add	r9, r3
 800980e:	2200      	movs	r2, #0
 8009810:	2300      	movs	r3, #0
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f7 f96f 	bl	8000af8 <__aeabi_dcmpeq>
 800981a:	b108      	cbz	r0, 8009820 <__cvt+0xa4>
 800981c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009820:	2230      	movs	r2, #48	; 0x30
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	454b      	cmp	r3, r9
 8009826:	d307      	bcc.n	8009838 <__cvt+0xbc>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800982c:	1bdb      	subs	r3, r3, r7
 800982e:	4638      	mov	r0, r7
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	b004      	add	sp, #16
 8009834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009838:	1c59      	adds	r1, r3, #1
 800983a:	9103      	str	r1, [sp, #12]
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e7f0      	b.n	8009822 <__cvt+0xa6>

08009840 <__exponent>:
 8009840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009842:	4603      	mov	r3, r0
 8009844:	2900      	cmp	r1, #0
 8009846:	bfb8      	it	lt
 8009848:	4249      	neglt	r1, r1
 800984a:	f803 2b02 	strb.w	r2, [r3], #2
 800984e:	bfb4      	ite	lt
 8009850:	222d      	movlt	r2, #45	; 0x2d
 8009852:	222b      	movge	r2, #43	; 0x2b
 8009854:	2909      	cmp	r1, #9
 8009856:	7042      	strb	r2, [r0, #1]
 8009858:	dd2a      	ble.n	80098b0 <__exponent+0x70>
 800985a:	f10d 0207 	add.w	r2, sp, #7
 800985e:	4617      	mov	r7, r2
 8009860:	260a      	movs	r6, #10
 8009862:	4694      	mov	ip, r2
 8009864:	fb91 f5f6 	sdiv	r5, r1, r6
 8009868:	fb06 1415 	mls	r4, r6, r5, r1
 800986c:	3430      	adds	r4, #48	; 0x30
 800986e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009872:	460c      	mov	r4, r1
 8009874:	2c63      	cmp	r4, #99	; 0x63
 8009876:	f102 32ff 	add.w	r2, r2, #4294967295
 800987a:	4629      	mov	r1, r5
 800987c:	dcf1      	bgt.n	8009862 <__exponent+0x22>
 800987e:	3130      	adds	r1, #48	; 0x30
 8009880:	f1ac 0402 	sub.w	r4, ip, #2
 8009884:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009888:	1c41      	adds	r1, r0, #1
 800988a:	4622      	mov	r2, r4
 800988c:	42ba      	cmp	r2, r7
 800988e:	d30a      	bcc.n	80098a6 <__exponent+0x66>
 8009890:	f10d 0209 	add.w	r2, sp, #9
 8009894:	eba2 020c 	sub.w	r2, r2, ip
 8009898:	42bc      	cmp	r4, r7
 800989a:	bf88      	it	hi
 800989c:	2200      	movhi	r2, #0
 800989e:	4413      	add	r3, r2
 80098a0:	1a18      	subs	r0, r3, r0
 80098a2:	b003      	add	sp, #12
 80098a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80098ae:	e7ed      	b.n	800988c <__exponent+0x4c>
 80098b0:	2330      	movs	r3, #48	; 0x30
 80098b2:	3130      	adds	r1, #48	; 0x30
 80098b4:	7083      	strb	r3, [r0, #2]
 80098b6:	70c1      	strb	r1, [r0, #3]
 80098b8:	1d03      	adds	r3, r0, #4
 80098ba:	e7f1      	b.n	80098a0 <__exponent+0x60>

080098bc <_printf_float>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	ed2d 8b02 	vpush	{d8}
 80098c4:	b08d      	sub	sp, #52	; 0x34
 80098c6:	460c      	mov	r4, r1
 80098c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098cc:	4616      	mov	r6, r2
 80098ce:	461f      	mov	r7, r3
 80098d0:	4605      	mov	r5, r0
 80098d2:	f000 fce1 	bl	800a298 <_localeconv_r>
 80098d6:	f8d0 a000 	ldr.w	sl, [r0]
 80098da:	4650      	mov	r0, sl
 80098dc:	f7f6 fce0 	bl	80002a0 <strlen>
 80098e0:	2300      	movs	r3, #0
 80098e2:	930a      	str	r3, [sp, #40]	; 0x28
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	9305      	str	r3, [sp, #20]
 80098e8:	f8d8 3000 	ldr.w	r3, [r8]
 80098ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098f0:	3307      	adds	r3, #7
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	f103 0208 	add.w	r2, r3, #8
 80098fa:	f8c8 2000 	str.w	r2, [r8]
 80098fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009902:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009906:	9307      	str	r3, [sp, #28]
 8009908:	f8cd 8018 	str.w	r8, [sp, #24]
 800990c:	ee08 0a10 	vmov	s16, r0
 8009910:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009918:	4b9e      	ldr	r3, [pc, #632]	; (8009b94 <_printf_float+0x2d8>)
 800991a:	f04f 32ff 	mov.w	r2, #4294967295
 800991e:	f7f7 f91d 	bl	8000b5c <__aeabi_dcmpun>
 8009922:	bb88      	cbnz	r0, 8009988 <_printf_float+0xcc>
 8009924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009928:	4b9a      	ldr	r3, [pc, #616]	; (8009b94 <_printf_float+0x2d8>)
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	f7f7 f8f7 	bl	8000b20 <__aeabi_dcmple>
 8009932:	bb48      	cbnz	r0, 8009988 <_printf_float+0xcc>
 8009934:	2200      	movs	r2, #0
 8009936:	2300      	movs	r3, #0
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f7 f8e6 	bl	8000b0c <__aeabi_dcmplt>
 8009940:	b110      	cbz	r0, 8009948 <_printf_float+0x8c>
 8009942:	232d      	movs	r3, #45	; 0x2d
 8009944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009948:	4a93      	ldr	r2, [pc, #588]	; (8009b98 <_printf_float+0x2dc>)
 800994a:	4b94      	ldr	r3, [pc, #592]	; (8009b9c <_printf_float+0x2e0>)
 800994c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009950:	bf94      	ite	ls
 8009952:	4690      	movls	r8, r2
 8009954:	4698      	movhi	r8, r3
 8009956:	2303      	movs	r3, #3
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	9b05      	ldr	r3, [sp, #20]
 800995c:	f023 0304 	bic.w	r3, r3, #4
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	f04f 0900 	mov.w	r9, #0
 8009966:	9700      	str	r7, [sp, #0]
 8009968:	4633      	mov	r3, r6
 800996a:	aa0b      	add	r2, sp, #44	; 0x2c
 800996c:	4621      	mov	r1, r4
 800996e:	4628      	mov	r0, r5
 8009970:	f000 f9da 	bl	8009d28 <_printf_common>
 8009974:	3001      	adds	r0, #1
 8009976:	f040 8090 	bne.w	8009a9a <_printf_float+0x1de>
 800997a:	f04f 30ff 	mov.w	r0, #4294967295
 800997e:	b00d      	add	sp, #52	; 0x34
 8009980:	ecbd 8b02 	vpop	{d8}
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	4640      	mov	r0, r8
 800998e:	4649      	mov	r1, r9
 8009990:	f7f7 f8e4 	bl	8000b5c <__aeabi_dcmpun>
 8009994:	b140      	cbz	r0, 80099a8 <_printf_float+0xec>
 8009996:	464b      	mov	r3, r9
 8009998:	2b00      	cmp	r3, #0
 800999a:	bfbc      	itt	lt
 800999c:	232d      	movlt	r3, #45	; 0x2d
 800999e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099a2:	4a7f      	ldr	r2, [pc, #508]	; (8009ba0 <_printf_float+0x2e4>)
 80099a4:	4b7f      	ldr	r3, [pc, #508]	; (8009ba4 <_printf_float+0x2e8>)
 80099a6:	e7d1      	b.n	800994c <_printf_float+0x90>
 80099a8:	6863      	ldr	r3, [r4, #4]
 80099aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099ae:	9206      	str	r2, [sp, #24]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	d13f      	bne.n	8009a34 <_printf_float+0x178>
 80099b4:	2306      	movs	r3, #6
 80099b6:	6063      	str	r3, [r4, #4]
 80099b8:	9b05      	ldr	r3, [sp, #20]
 80099ba:	6861      	ldr	r1, [r4, #4]
 80099bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099c0:	2300      	movs	r3, #0
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	ab0a      	add	r3, sp, #40	; 0x28
 80099c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099ca:	ab09      	add	r3, sp, #36	; 0x24
 80099cc:	ec49 8b10 	vmov	d0, r8, r9
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	6022      	str	r2, [r4, #0]
 80099d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099d8:	4628      	mov	r0, r5
 80099da:	f7ff fecf 	bl	800977c <__cvt>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099e2:	2b47      	cmp	r3, #71	; 0x47
 80099e4:	4680      	mov	r8, r0
 80099e6:	d108      	bne.n	80099fa <_printf_float+0x13e>
 80099e8:	1cc8      	adds	r0, r1, #3
 80099ea:	db02      	blt.n	80099f2 <_printf_float+0x136>
 80099ec:	6863      	ldr	r3, [r4, #4]
 80099ee:	4299      	cmp	r1, r3
 80099f0:	dd41      	ble.n	8009a76 <_printf_float+0x1ba>
 80099f2:	f1ab 0302 	sub.w	r3, fp, #2
 80099f6:	fa5f fb83 	uxtb.w	fp, r3
 80099fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099fe:	d820      	bhi.n	8009a42 <_printf_float+0x186>
 8009a00:	3901      	subs	r1, #1
 8009a02:	465a      	mov	r2, fp
 8009a04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a08:	9109      	str	r1, [sp, #36]	; 0x24
 8009a0a:	f7ff ff19 	bl	8009840 <__exponent>
 8009a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a10:	1813      	adds	r3, r2, r0
 8009a12:	2a01      	cmp	r2, #1
 8009a14:	4681      	mov	r9, r0
 8009a16:	6123      	str	r3, [r4, #16]
 8009a18:	dc02      	bgt.n	8009a20 <_printf_float+0x164>
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	07d2      	lsls	r2, r2, #31
 8009a1e:	d501      	bpl.n	8009a24 <_printf_float+0x168>
 8009a20:	3301      	adds	r3, #1
 8009a22:	6123      	str	r3, [r4, #16]
 8009a24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d09c      	beq.n	8009966 <_printf_float+0xaa>
 8009a2c:	232d      	movs	r3, #45	; 0x2d
 8009a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a32:	e798      	b.n	8009966 <_printf_float+0xaa>
 8009a34:	9a06      	ldr	r2, [sp, #24]
 8009a36:	2a47      	cmp	r2, #71	; 0x47
 8009a38:	d1be      	bne.n	80099b8 <_printf_float+0xfc>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1bc      	bne.n	80099b8 <_printf_float+0xfc>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e7b9      	b.n	80099b6 <_printf_float+0xfa>
 8009a42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a46:	d118      	bne.n	8009a7a <_printf_float+0x1be>
 8009a48:	2900      	cmp	r1, #0
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	dd0b      	ble.n	8009a66 <_printf_float+0x1aa>
 8009a4e:	6121      	str	r1, [r4, #16]
 8009a50:	b913      	cbnz	r3, 8009a58 <_printf_float+0x19c>
 8009a52:	6822      	ldr	r2, [r4, #0]
 8009a54:	07d0      	lsls	r0, r2, #31
 8009a56:	d502      	bpl.n	8009a5e <_printf_float+0x1a2>
 8009a58:	3301      	adds	r3, #1
 8009a5a:	440b      	add	r3, r1
 8009a5c:	6123      	str	r3, [r4, #16]
 8009a5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a60:	f04f 0900 	mov.w	r9, #0
 8009a64:	e7de      	b.n	8009a24 <_printf_float+0x168>
 8009a66:	b913      	cbnz	r3, 8009a6e <_printf_float+0x1b2>
 8009a68:	6822      	ldr	r2, [r4, #0]
 8009a6a:	07d2      	lsls	r2, r2, #31
 8009a6c:	d501      	bpl.n	8009a72 <_printf_float+0x1b6>
 8009a6e:	3302      	adds	r3, #2
 8009a70:	e7f4      	b.n	8009a5c <_printf_float+0x1a0>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e7f2      	b.n	8009a5c <_printf_float+0x1a0>
 8009a76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a7c:	4299      	cmp	r1, r3
 8009a7e:	db05      	blt.n	8009a8c <_printf_float+0x1d0>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	6121      	str	r1, [r4, #16]
 8009a84:	07d8      	lsls	r0, r3, #31
 8009a86:	d5ea      	bpl.n	8009a5e <_printf_float+0x1a2>
 8009a88:	1c4b      	adds	r3, r1, #1
 8009a8a:	e7e7      	b.n	8009a5c <_printf_float+0x1a0>
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	bfd4      	ite	le
 8009a90:	f1c1 0202 	rsble	r2, r1, #2
 8009a94:	2201      	movgt	r2, #1
 8009a96:	4413      	add	r3, r2
 8009a98:	e7e0      	b.n	8009a5c <_printf_float+0x1a0>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	055a      	lsls	r2, r3, #21
 8009a9e:	d407      	bmi.n	8009ab0 <_printf_float+0x1f4>
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	4642      	mov	r2, r8
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d12c      	bne.n	8009b08 <_printf_float+0x24c>
 8009aae:	e764      	b.n	800997a <_printf_float+0xbe>
 8009ab0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ab4:	f240 80e0 	bls.w	8009c78 <_printf_float+0x3bc>
 8009ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009abc:	2200      	movs	r2, #0
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f7f7 f81a 	bl	8000af8 <__aeabi_dcmpeq>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d034      	beq.n	8009b32 <_printf_float+0x276>
 8009ac8:	4a37      	ldr	r2, [pc, #220]	; (8009ba8 <_printf_float+0x2ec>)
 8009aca:	2301      	movs	r3, #1
 8009acc:	4631      	mov	r1, r6
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b8      	blx	r7
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	f43f af51 	beq.w	800997a <_printf_float+0xbe>
 8009ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009adc:	429a      	cmp	r2, r3
 8009ade:	db02      	blt.n	8009ae6 <_printf_float+0x22a>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	07d8      	lsls	r0, r3, #31
 8009ae4:	d510      	bpl.n	8009b08 <_printf_float+0x24c>
 8009ae6:	ee18 3a10 	vmov	r3, s16
 8009aea:	4652      	mov	r2, sl
 8009aec:	4631      	mov	r1, r6
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	f43f af41 	beq.w	800997a <_printf_float+0xbe>
 8009af8:	f04f 0800 	mov.w	r8, #0
 8009afc:	f104 091a 	add.w	r9, r4, #26
 8009b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b02:	3b01      	subs	r3, #1
 8009b04:	4543      	cmp	r3, r8
 8009b06:	dc09      	bgt.n	8009b1c <_printf_float+0x260>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	079b      	lsls	r3, r3, #30
 8009b0c:	f100 8107 	bmi.w	8009d1e <_printf_float+0x462>
 8009b10:	68e0      	ldr	r0, [r4, #12]
 8009b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b14:	4298      	cmp	r0, r3
 8009b16:	bfb8      	it	lt
 8009b18:	4618      	movlt	r0, r3
 8009b1a:	e730      	b.n	800997e <_printf_float+0xc2>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	464a      	mov	r2, r9
 8009b20:	4631      	mov	r1, r6
 8009b22:	4628      	mov	r0, r5
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	f43f af27 	beq.w	800997a <_printf_float+0xbe>
 8009b2c:	f108 0801 	add.w	r8, r8, #1
 8009b30:	e7e6      	b.n	8009b00 <_printf_float+0x244>
 8009b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dc39      	bgt.n	8009bac <_printf_float+0x2f0>
 8009b38:	4a1b      	ldr	r2, [pc, #108]	; (8009ba8 <_printf_float+0x2ec>)
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4628      	mov	r0, r5
 8009b40:	47b8      	blx	r7
 8009b42:	3001      	adds	r0, #1
 8009b44:	f43f af19 	beq.w	800997a <_printf_float+0xbe>
 8009b48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	d102      	bne.n	8009b56 <_printf_float+0x29a>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	07d9      	lsls	r1, r3, #31
 8009b54:	d5d8      	bpl.n	8009b08 <_printf_float+0x24c>
 8009b56:	ee18 3a10 	vmov	r3, s16
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b8      	blx	r7
 8009b62:	3001      	adds	r0, #1
 8009b64:	f43f af09 	beq.w	800997a <_printf_float+0xbe>
 8009b68:	f04f 0900 	mov.w	r9, #0
 8009b6c:	f104 0a1a 	add.w	sl, r4, #26
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	425b      	negs	r3, r3
 8009b74:	454b      	cmp	r3, r9
 8009b76:	dc01      	bgt.n	8009b7c <_printf_float+0x2c0>
 8009b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7a:	e792      	b.n	8009aa2 <_printf_float+0x1e6>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4652      	mov	r2, sl
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f aef7 	beq.w	800997a <_printf_float+0xbe>
 8009b8c:	f109 0901 	add.w	r9, r9, #1
 8009b90:	e7ee      	b.n	8009b70 <_printf_float+0x2b4>
 8009b92:	bf00      	nop
 8009b94:	7fefffff 	.word	0x7fefffff
 8009b98:	0800c25c 	.word	0x0800c25c
 8009b9c:	0800c260 	.word	0x0800c260
 8009ba0:	0800c264 	.word	0x0800c264
 8009ba4:	0800c268 	.word	0x0800c268
 8009ba8:	0800c26c 	.word	0x0800c26c
 8009bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	bfa8      	it	ge
 8009bb4:	461a      	movge	r2, r3
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	4691      	mov	r9, r2
 8009bba:	dc37      	bgt.n	8009c2c <_printf_float+0x370>
 8009bbc:	f04f 0b00 	mov.w	fp, #0
 8009bc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bc4:	f104 021a 	add.w	r2, r4, #26
 8009bc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	eba3 0309 	sub.w	r3, r3, r9
 8009bd0:	455b      	cmp	r3, fp
 8009bd2:	dc33      	bgt.n	8009c3c <_printf_float+0x380>
 8009bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	db3b      	blt.n	8009c54 <_printf_float+0x398>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	07da      	lsls	r2, r3, #31
 8009be0:	d438      	bmi.n	8009c54 <_printf_float+0x398>
 8009be2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009be6:	eba2 0903 	sub.w	r9, r2, r3
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	1ad2      	subs	r2, r2, r3
 8009bee:	4591      	cmp	r9, r2
 8009bf0:	bfa8      	it	ge
 8009bf2:	4691      	movge	r9, r2
 8009bf4:	f1b9 0f00 	cmp.w	r9, #0
 8009bf8:	dc35      	bgt.n	8009c66 <_printf_float+0x3aa>
 8009bfa:	f04f 0800 	mov.w	r8, #0
 8009bfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c02:	f104 0a1a 	add.w	sl, r4, #26
 8009c06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c0a:	1a9b      	subs	r3, r3, r2
 8009c0c:	eba3 0309 	sub.w	r3, r3, r9
 8009c10:	4543      	cmp	r3, r8
 8009c12:	f77f af79 	ble.w	8009b08 <_printf_float+0x24c>
 8009c16:	2301      	movs	r3, #1
 8009c18:	4652      	mov	r2, sl
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	47b8      	blx	r7
 8009c20:	3001      	adds	r0, #1
 8009c22:	f43f aeaa 	beq.w	800997a <_printf_float+0xbe>
 8009c26:	f108 0801 	add.w	r8, r8, #1
 8009c2a:	e7ec      	b.n	8009c06 <_printf_float+0x34a>
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4642      	mov	r2, r8
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	d1c0      	bne.n	8009bbc <_printf_float+0x300>
 8009c3a:	e69e      	b.n	800997a <_printf_float+0xbe>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4628      	mov	r0, r5
 8009c42:	9205      	str	r2, [sp, #20]
 8009c44:	47b8      	blx	r7
 8009c46:	3001      	adds	r0, #1
 8009c48:	f43f ae97 	beq.w	800997a <_printf_float+0xbe>
 8009c4c:	9a05      	ldr	r2, [sp, #20]
 8009c4e:	f10b 0b01 	add.w	fp, fp, #1
 8009c52:	e7b9      	b.n	8009bc8 <_printf_float+0x30c>
 8009c54:	ee18 3a10 	vmov	r3, s16
 8009c58:	4652      	mov	r2, sl
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	d1be      	bne.n	8009be2 <_printf_float+0x326>
 8009c64:	e689      	b.n	800997a <_printf_float+0xbe>
 8009c66:	9a05      	ldr	r2, [sp, #20]
 8009c68:	464b      	mov	r3, r9
 8009c6a:	4442      	add	r2, r8
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4628      	mov	r0, r5
 8009c70:	47b8      	blx	r7
 8009c72:	3001      	adds	r0, #1
 8009c74:	d1c1      	bne.n	8009bfa <_printf_float+0x33e>
 8009c76:	e680      	b.n	800997a <_printf_float+0xbe>
 8009c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c7a:	2a01      	cmp	r2, #1
 8009c7c:	dc01      	bgt.n	8009c82 <_printf_float+0x3c6>
 8009c7e:	07db      	lsls	r3, r3, #31
 8009c80:	d53a      	bpl.n	8009cf8 <_printf_float+0x43c>
 8009c82:	2301      	movs	r3, #1
 8009c84:	4642      	mov	r2, r8
 8009c86:	4631      	mov	r1, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	47b8      	blx	r7
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	f43f ae74 	beq.w	800997a <_printf_float+0xbe>
 8009c92:	ee18 3a10 	vmov	r3, s16
 8009c96:	4652      	mov	r2, sl
 8009c98:	4631      	mov	r1, r6
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	47b8      	blx	r7
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	f43f ae6b 	beq.w	800997a <_printf_float+0xbe>
 8009ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2300      	movs	r3, #0
 8009cac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009cb0:	f7f6 ff22 	bl	8000af8 <__aeabi_dcmpeq>
 8009cb4:	b9d8      	cbnz	r0, 8009cee <_printf_float+0x432>
 8009cb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009cba:	f108 0201 	add.w	r2, r8, #1
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d10e      	bne.n	8009ce6 <_printf_float+0x42a>
 8009cc8:	e657      	b.n	800997a <_printf_float+0xbe>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f ae50 	beq.w	800997a <_printf_float+0xbe>
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	4543      	cmp	r3, r8
 8009ce4:	dcf1      	bgt.n	8009cca <_printf_float+0x40e>
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cec:	e6da      	b.n	8009aa4 <_printf_float+0x1e8>
 8009cee:	f04f 0800 	mov.w	r8, #0
 8009cf2:	f104 0a1a 	add.w	sl, r4, #26
 8009cf6:	e7f2      	b.n	8009cde <_printf_float+0x422>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	4642      	mov	r2, r8
 8009cfc:	e7df      	b.n	8009cbe <_printf_float+0x402>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	464a      	mov	r2, r9
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae36 	beq.w	800997a <_printf_float+0xbe>
 8009d0e:	f108 0801 	add.w	r8, r8, #1
 8009d12:	68e3      	ldr	r3, [r4, #12]
 8009d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d16:	1a5b      	subs	r3, r3, r1
 8009d18:	4543      	cmp	r3, r8
 8009d1a:	dcf0      	bgt.n	8009cfe <_printf_float+0x442>
 8009d1c:	e6f8      	b.n	8009b10 <_printf_float+0x254>
 8009d1e:	f04f 0800 	mov.w	r8, #0
 8009d22:	f104 0919 	add.w	r9, r4, #25
 8009d26:	e7f4      	b.n	8009d12 <_printf_float+0x456>

08009d28 <_printf_common>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	4699      	mov	r9, r3
 8009d30:	688a      	ldr	r2, [r1, #8]
 8009d32:	690b      	ldr	r3, [r1, #16]
 8009d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	bfb8      	it	lt
 8009d3c:	4613      	movlt	r3, r2
 8009d3e:	6033      	str	r3, [r6, #0]
 8009d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d44:	4607      	mov	r7, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	b10a      	cbz	r2, 8009d4e <_printf_common+0x26>
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	6033      	str	r3, [r6, #0]
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	0699      	lsls	r1, r3, #26
 8009d52:	bf42      	ittt	mi
 8009d54:	6833      	ldrmi	r3, [r6, #0]
 8009d56:	3302      	addmi	r3, #2
 8009d58:	6033      	strmi	r3, [r6, #0]
 8009d5a:	6825      	ldr	r5, [r4, #0]
 8009d5c:	f015 0506 	ands.w	r5, r5, #6
 8009d60:	d106      	bne.n	8009d70 <_printf_common+0x48>
 8009d62:	f104 0a19 	add.w	sl, r4, #25
 8009d66:	68e3      	ldr	r3, [r4, #12]
 8009d68:	6832      	ldr	r2, [r6, #0]
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	42ab      	cmp	r3, r5
 8009d6e:	dc26      	bgt.n	8009dbe <_printf_common+0x96>
 8009d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d74:	1e13      	subs	r3, r2, #0
 8009d76:	6822      	ldr	r2, [r4, #0]
 8009d78:	bf18      	it	ne
 8009d7a:	2301      	movne	r3, #1
 8009d7c:	0692      	lsls	r2, r2, #26
 8009d7e:	d42b      	bmi.n	8009dd8 <_printf_common+0xb0>
 8009d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d84:	4649      	mov	r1, r9
 8009d86:	4638      	mov	r0, r7
 8009d88:	47c0      	blx	r8
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d01e      	beq.n	8009dcc <_printf_common+0xa4>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	f003 0306 	and.w	r3, r3, #6
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	bf02      	ittt	eq
 8009d9a:	68e5      	ldreq	r5, [r4, #12]
 8009d9c:	6833      	ldreq	r3, [r6, #0]
 8009d9e:	1aed      	subeq	r5, r5, r3
 8009da0:	68a3      	ldr	r3, [r4, #8]
 8009da2:	bf0c      	ite	eq
 8009da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009da8:	2500      	movne	r5, #0
 8009daa:	4293      	cmp	r3, r2
 8009dac:	bfc4      	itt	gt
 8009dae:	1a9b      	subgt	r3, r3, r2
 8009db0:	18ed      	addgt	r5, r5, r3
 8009db2:	2600      	movs	r6, #0
 8009db4:	341a      	adds	r4, #26
 8009db6:	42b5      	cmp	r5, r6
 8009db8:	d11a      	bne.n	8009df0 <_printf_common+0xc8>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e008      	b.n	8009dd0 <_printf_common+0xa8>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	47c0      	blx	r8
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d103      	bne.n	8009dd4 <_printf_common+0xac>
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	e7c6      	b.n	8009d66 <_printf_common+0x3e>
 8009dd8:	18e1      	adds	r1, r4, r3
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	2030      	movs	r0, #48	; 0x30
 8009dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009de2:	4422      	add	r2, r4
 8009de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dec:	3302      	adds	r3, #2
 8009dee:	e7c7      	b.n	8009d80 <_printf_common+0x58>
 8009df0:	2301      	movs	r3, #1
 8009df2:	4622      	mov	r2, r4
 8009df4:	4649      	mov	r1, r9
 8009df6:	4638      	mov	r0, r7
 8009df8:	47c0      	blx	r8
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d0e6      	beq.n	8009dcc <_printf_common+0xa4>
 8009dfe:	3601      	adds	r6, #1
 8009e00:	e7d9      	b.n	8009db6 <_printf_common+0x8e>
	...

08009e04 <_printf_i>:
 8009e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	7e0f      	ldrb	r7, [r1, #24]
 8009e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e0c:	2f78      	cmp	r7, #120	; 0x78
 8009e0e:	4691      	mov	r9, r2
 8009e10:	4680      	mov	r8, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	469a      	mov	sl, r3
 8009e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e1a:	d807      	bhi.n	8009e2c <_printf_i+0x28>
 8009e1c:	2f62      	cmp	r7, #98	; 0x62
 8009e1e:	d80a      	bhi.n	8009e36 <_printf_i+0x32>
 8009e20:	2f00      	cmp	r7, #0
 8009e22:	f000 80d4 	beq.w	8009fce <_printf_i+0x1ca>
 8009e26:	2f58      	cmp	r7, #88	; 0x58
 8009e28:	f000 80c0 	beq.w	8009fac <_printf_i+0x1a8>
 8009e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e34:	e03a      	b.n	8009eac <_printf_i+0xa8>
 8009e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e3a:	2b15      	cmp	r3, #21
 8009e3c:	d8f6      	bhi.n	8009e2c <_printf_i+0x28>
 8009e3e:	a101      	add	r1, pc, #4	; (adr r1, 8009e44 <_printf_i+0x40>)
 8009e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e44:	08009e9d 	.word	0x08009e9d
 8009e48:	08009eb1 	.word	0x08009eb1
 8009e4c:	08009e2d 	.word	0x08009e2d
 8009e50:	08009e2d 	.word	0x08009e2d
 8009e54:	08009e2d 	.word	0x08009e2d
 8009e58:	08009e2d 	.word	0x08009e2d
 8009e5c:	08009eb1 	.word	0x08009eb1
 8009e60:	08009e2d 	.word	0x08009e2d
 8009e64:	08009e2d 	.word	0x08009e2d
 8009e68:	08009e2d 	.word	0x08009e2d
 8009e6c:	08009e2d 	.word	0x08009e2d
 8009e70:	08009fb5 	.word	0x08009fb5
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009f6f 	.word	0x08009f6f
 8009e7c:	08009e2d 	.word	0x08009e2d
 8009e80:	08009e2d 	.word	0x08009e2d
 8009e84:	08009fd7 	.word	0x08009fd7
 8009e88:	08009e2d 	.word	0x08009e2d
 8009e8c:	08009edd 	.word	0x08009edd
 8009e90:	08009e2d 	.word	0x08009e2d
 8009e94:	08009e2d 	.word	0x08009e2d
 8009e98:	08009f77 	.word	0x08009f77
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	1d1a      	adds	r2, r3, #4
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	602a      	str	r2, [r5, #0]
 8009ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009eac:	2301      	movs	r3, #1
 8009eae:	e09f      	b.n	8009ff0 <_printf_i+0x1ec>
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	0607      	lsls	r7, r0, #24
 8009eb6:	f103 0104 	add.w	r1, r3, #4
 8009eba:	6029      	str	r1, [r5, #0]
 8009ebc:	d501      	bpl.n	8009ec2 <_printf_i+0xbe>
 8009ebe:	681e      	ldr	r6, [r3, #0]
 8009ec0:	e003      	b.n	8009eca <_printf_i+0xc6>
 8009ec2:	0646      	lsls	r6, r0, #25
 8009ec4:	d5fb      	bpl.n	8009ebe <_printf_i+0xba>
 8009ec6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	da03      	bge.n	8009ed6 <_printf_i+0xd2>
 8009ece:	232d      	movs	r3, #45	; 0x2d
 8009ed0:	4276      	negs	r6, r6
 8009ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed6:	485a      	ldr	r0, [pc, #360]	; (800a040 <_printf_i+0x23c>)
 8009ed8:	230a      	movs	r3, #10
 8009eda:	e012      	b.n	8009f02 <_printf_i+0xfe>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	6820      	ldr	r0, [r4, #0]
 8009ee0:	1d19      	adds	r1, r3, #4
 8009ee2:	6029      	str	r1, [r5, #0]
 8009ee4:	0605      	lsls	r5, r0, #24
 8009ee6:	d501      	bpl.n	8009eec <_printf_i+0xe8>
 8009ee8:	681e      	ldr	r6, [r3, #0]
 8009eea:	e002      	b.n	8009ef2 <_printf_i+0xee>
 8009eec:	0641      	lsls	r1, r0, #25
 8009eee:	d5fb      	bpl.n	8009ee8 <_printf_i+0xe4>
 8009ef0:	881e      	ldrh	r6, [r3, #0]
 8009ef2:	4853      	ldr	r0, [pc, #332]	; (800a040 <_printf_i+0x23c>)
 8009ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ef6:	bf0c      	ite	eq
 8009ef8:	2308      	moveq	r3, #8
 8009efa:	230a      	movne	r3, #10
 8009efc:	2100      	movs	r1, #0
 8009efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f02:	6865      	ldr	r5, [r4, #4]
 8009f04:	60a5      	str	r5, [r4, #8]
 8009f06:	2d00      	cmp	r5, #0
 8009f08:	bfa2      	ittt	ge
 8009f0a:	6821      	ldrge	r1, [r4, #0]
 8009f0c:	f021 0104 	bicge.w	r1, r1, #4
 8009f10:	6021      	strge	r1, [r4, #0]
 8009f12:	b90e      	cbnz	r6, 8009f18 <_printf_i+0x114>
 8009f14:	2d00      	cmp	r5, #0
 8009f16:	d04b      	beq.n	8009fb0 <_printf_i+0x1ac>
 8009f18:	4615      	mov	r5, r2
 8009f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f22:	5dc7      	ldrb	r7, [r0, r7]
 8009f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f28:	4637      	mov	r7, r6
 8009f2a:	42bb      	cmp	r3, r7
 8009f2c:	460e      	mov	r6, r1
 8009f2e:	d9f4      	bls.n	8009f1a <_printf_i+0x116>
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	d10b      	bne.n	8009f4c <_printf_i+0x148>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	07de      	lsls	r6, r3, #31
 8009f38:	d508      	bpl.n	8009f4c <_printf_i+0x148>
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	6861      	ldr	r1, [r4, #4]
 8009f3e:	4299      	cmp	r1, r3
 8009f40:	bfde      	ittt	le
 8009f42:	2330      	movle	r3, #48	; 0x30
 8009f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f4c:	1b52      	subs	r2, r2, r5
 8009f4e:	6122      	str	r2, [r4, #16]
 8009f50:	f8cd a000 	str.w	sl, [sp]
 8009f54:	464b      	mov	r3, r9
 8009f56:	aa03      	add	r2, sp, #12
 8009f58:	4621      	mov	r1, r4
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	f7ff fee4 	bl	8009d28 <_printf_common>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d14a      	bne.n	8009ffa <_printf_i+0x1f6>
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	b004      	add	sp, #16
 8009f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	f043 0320 	orr.w	r3, r3, #32
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	4833      	ldr	r0, [pc, #204]	; (800a044 <_printf_i+0x240>)
 8009f78:	2778      	movs	r7, #120	; 0x78
 8009f7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	6829      	ldr	r1, [r5, #0]
 8009f82:	061f      	lsls	r7, r3, #24
 8009f84:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f88:	d402      	bmi.n	8009f90 <_printf_i+0x18c>
 8009f8a:	065f      	lsls	r7, r3, #25
 8009f8c:	bf48      	it	mi
 8009f8e:	b2b6      	uxthmi	r6, r6
 8009f90:	07df      	lsls	r7, r3, #31
 8009f92:	bf48      	it	mi
 8009f94:	f043 0320 	orrmi.w	r3, r3, #32
 8009f98:	6029      	str	r1, [r5, #0]
 8009f9a:	bf48      	it	mi
 8009f9c:	6023      	strmi	r3, [r4, #0]
 8009f9e:	b91e      	cbnz	r6, 8009fa8 <_printf_i+0x1a4>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	f023 0320 	bic.w	r3, r3, #32
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	2310      	movs	r3, #16
 8009faa:	e7a7      	b.n	8009efc <_printf_i+0xf8>
 8009fac:	4824      	ldr	r0, [pc, #144]	; (800a040 <_printf_i+0x23c>)
 8009fae:	e7e4      	b.n	8009f7a <_printf_i+0x176>
 8009fb0:	4615      	mov	r5, r2
 8009fb2:	e7bd      	b.n	8009f30 <_printf_i+0x12c>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	6826      	ldr	r6, [r4, #0]
 8009fb8:	6961      	ldr	r1, [r4, #20]
 8009fba:	1d18      	adds	r0, r3, #4
 8009fbc:	6028      	str	r0, [r5, #0]
 8009fbe:	0635      	lsls	r5, r6, #24
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	d501      	bpl.n	8009fc8 <_printf_i+0x1c4>
 8009fc4:	6019      	str	r1, [r3, #0]
 8009fc6:	e002      	b.n	8009fce <_printf_i+0x1ca>
 8009fc8:	0670      	lsls	r0, r6, #25
 8009fca:	d5fb      	bpl.n	8009fc4 <_printf_i+0x1c0>
 8009fcc:	8019      	strh	r1, [r3, #0]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6123      	str	r3, [r4, #16]
 8009fd2:	4615      	mov	r5, r2
 8009fd4:	e7bc      	b.n	8009f50 <_printf_i+0x14c>
 8009fd6:	682b      	ldr	r3, [r5, #0]
 8009fd8:	1d1a      	adds	r2, r3, #4
 8009fda:	602a      	str	r2, [r5, #0]
 8009fdc:	681d      	ldr	r5, [r3, #0]
 8009fde:	6862      	ldr	r2, [r4, #4]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f7f6 f90c 	bl	8000200 <memchr>
 8009fe8:	b108      	cbz	r0, 8009fee <_printf_i+0x1ea>
 8009fea:	1b40      	subs	r0, r0, r5
 8009fec:	6060      	str	r0, [r4, #4]
 8009fee:	6863      	ldr	r3, [r4, #4]
 8009ff0:	6123      	str	r3, [r4, #16]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff8:	e7aa      	b.n	8009f50 <_printf_i+0x14c>
 8009ffa:	6923      	ldr	r3, [r4, #16]
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	4649      	mov	r1, r9
 800a000:	4640      	mov	r0, r8
 800a002:	47d0      	blx	sl
 800a004:	3001      	adds	r0, #1
 800a006:	d0ad      	beq.n	8009f64 <_printf_i+0x160>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	079b      	lsls	r3, r3, #30
 800a00c:	d413      	bmi.n	800a036 <_printf_i+0x232>
 800a00e:	68e0      	ldr	r0, [r4, #12]
 800a010:	9b03      	ldr	r3, [sp, #12]
 800a012:	4298      	cmp	r0, r3
 800a014:	bfb8      	it	lt
 800a016:	4618      	movlt	r0, r3
 800a018:	e7a6      	b.n	8009f68 <_printf_i+0x164>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4632      	mov	r2, r6
 800a01e:	4649      	mov	r1, r9
 800a020:	4640      	mov	r0, r8
 800a022:	47d0      	blx	sl
 800a024:	3001      	adds	r0, #1
 800a026:	d09d      	beq.n	8009f64 <_printf_i+0x160>
 800a028:	3501      	adds	r5, #1
 800a02a:	68e3      	ldr	r3, [r4, #12]
 800a02c:	9903      	ldr	r1, [sp, #12]
 800a02e:	1a5b      	subs	r3, r3, r1
 800a030:	42ab      	cmp	r3, r5
 800a032:	dcf2      	bgt.n	800a01a <_printf_i+0x216>
 800a034:	e7eb      	b.n	800a00e <_printf_i+0x20a>
 800a036:	2500      	movs	r5, #0
 800a038:	f104 0619 	add.w	r6, r4, #25
 800a03c:	e7f5      	b.n	800a02a <_printf_i+0x226>
 800a03e:	bf00      	nop
 800a040:	0800c26e 	.word	0x0800c26e
 800a044:	0800c27f 	.word	0x0800c27f

0800a048 <std>:
 800a048:	2300      	movs	r3, #0
 800a04a:	b510      	push	{r4, lr}
 800a04c:	4604      	mov	r4, r0
 800a04e:	e9c0 3300 	strd	r3, r3, [r0]
 800a052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a056:	6083      	str	r3, [r0, #8]
 800a058:	8181      	strh	r1, [r0, #12]
 800a05a:	6643      	str	r3, [r0, #100]	; 0x64
 800a05c:	81c2      	strh	r2, [r0, #14]
 800a05e:	6183      	str	r3, [r0, #24]
 800a060:	4619      	mov	r1, r3
 800a062:	2208      	movs	r2, #8
 800a064:	305c      	adds	r0, #92	; 0x5c
 800a066:	f000 f90e 	bl	800a286 <memset>
 800a06a:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <std+0x58>)
 800a06c:	6263      	str	r3, [r4, #36]	; 0x24
 800a06e:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <std+0x5c>)
 800a070:	62a3      	str	r3, [r4, #40]	; 0x28
 800a072:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <std+0x60>)
 800a074:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a076:	4b0d      	ldr	r3, [pc, #52]	; (800a0ac <std+0x64>)
 800a078:	6323      	str	r3, [r4, #48]	; 0x30
 800a07a:	4b0d      	ldr	r3, [pc, #52]	; (800a0b0 <std+0x68>)
 800a07c:	6224      	str	r4, [r4, #32]
 800a07e:	429c      	cmp	r4, r3
 800a080:	d006      	beq.n	800a090 <std+0x48>
 800a082:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a086:	4294      	cmp	r4, r2
 800a088:	d002      	beq.n	800a090 <std+0x48>
 800a08a:	33d0      	adds	r3, #208	; 0xd0
 800a08c:	429c      	cmp	r4, r3
 800a08e:	d105      	bne.n	800a09c <std+0x54>
 800a090:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a098:	f000 b972 	b.w	800a380 <__retarget_lock_init_recursive>
 800a09c:	bd10      	pop	{r4, pc}
 800a09e:	bf00      	nop
 800a0a0:	0800a201 	.word	0x0800a201
 800a0a4:	0800a223 	.word	0x0800a223
 800a0a8:	0800a25b 	.word	0x0800a25b
 800a0ac:	0800a27f 	.word	0x0800a27f
 800a0b0:	200008e0 	.word	0x200008e0

0800a0b4 <stdio_exit_handler>:
 800a0b4:	4a02      	ldr	r2, [pc, #8]	; (800a0c0 <stdio_exit_handler+0xc>)
 800a0b6:	4903      	ldr	r1, [pc, #12]	; (800a0c4 <stdio_exit_handler+0x10>)
 800a0b8:	4803      	ldr	r0, [pc, #12]	; (800a0c8 <stdio_exit_handler+0x14>)
 800a0ba:	f000 b869 	b.w	800a190 <_fwalk_sglue>
 800a0be:	bf00      	nop
 800a0c0:	2000000c 	.word	0x2000000c
 800a0c4:	0800bd09 	.word	0x0800bd09
 800a0c8:	20000018 	.word	0x20000018

0800a0cc <cleanup_stdio>:
 800a0cc:	6841      	ldr	r1, [r0, #4]
 800a0ce:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <cleanup_stdio+0x34>)
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	b510      	push	{r4, lr}
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	d001      	beq.n	800a0dc <cleanup_stdio+0x10>
 800a0d8:	f001 fe16 	bl	800bd08 <_fflush_r>
 800a0dc:	68a1      	ldr	r1, [r4, #8]
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <cleanup_stdio+0x38>)
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	d002      	beq.n	800a0ea <cleanup_stdio+0x1e>
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f001 fe0f 	bl	800bd08 <_fflush_r>
 800a0ea:	68e1      	ldr	r1, [r4, #12]
 800a0ec:	4b06      	ldr	r3, [pc, #24]	; (800a108 <cleanup_stdio+0x3c>)
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	d004      	beq.n	800a0fc <cleanup_stdio+0x30>
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f8:	f001 be06 	b.w	800bd08 <_fflush_r>
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	bf00      	nop
 800a100:	200008e0 	.word	0x200008e0
 800a104:	20000948 	.word	0x20000948
 800a108:	200009b0 	.word	0x200009b0

0800a10c <global_stdio_init.part.0>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <global_stdio_init.part.0+0x30>)
 800a110:	4c0b      	ldr	r4, [pc, #44]	; (800a140 <global_stdio_init.part.0+0x34>)
 800a112:	4a0c      	ldr	r2, [pc, #48]	; (800a144 <global_stdio_init.part.0+0x38>)
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	4620      	mov	r0, r4
 800a118:	2200      	movs	r2, #0
 800a11a:	2104      	movs	r1, #4
 800a11c:	f7ff ff94 	bl	800a048 <std>
 800a120:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a124:	2201      	movs	r2, #1
 800a126:	2109      	movs	r1, #9
 800a128:	f7ff ff8e 	bl	800a048 <std>
 800a12c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a130:	2202      	movs	r2, #2
 800a132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a136:	2112      	movs	r1, #18
 800a138:	f7ff bf86 	b.w	800a048 <std>
 800a13c:	20000a18 	.word	0x20000a18
 800a140:	200008e0 	.word	0x200008e0
 800a144:	0800a0b5 	.word	0x0800a0b5

0800a148 <__sfp_lock_acquire>:
 800a148:	4801      	ldr	r0, [pc, #4]	; (800a150 <__sfp_lock_acquire+0x8>)
 800a14a:	f000 b91a 	b.w	800a382 <__retarget_lock_acquire_recursive>
 800a14e:	bf00      	nop
 800a150:	20000a21 	.word	0x20000a21

0800a154 <__sfp_lock_release>:
 800a154:	4801      	ldr	r0, [pc, #4]	; (800a15c <__sfp_lock_release+0x8>)
 800a156:	f000 b915 	b.w	800a384 <__retarget_lock_release_recursive>
 800a15a:	bf00      	nop
 800a15c:	20000a21 	.word	0x20000a21

0800a160 <__sinit>:
 800a160:	b510      	push	{r4, lr}
 800a162:	4604      	mov	r4, r0
 800a164:	f7ff fff0 	bl	800a148 <__sfp_lock_acquire>
 800a168:	6a23      	ldr	r3, [r4, #32]
 800a16a:	b11b      	cbz	r3, 800a174 <__sinit+0x14>
 800a16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a170:	f7ff bff0 	b.w	800a154 <__sfp_lock_release>
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <__sinit+0x28>)
 800a176:	6223      	str	r3, [r4, #32]
 800a178:	4b04      	ldr	r3, [pc, #16]	; (800a18c <__sinit+0x2c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f5      	bne.n	800a16c <__sinit+0xc>
 800a180:	f7ff ffc4 	bl	800a10c <global_stdio_init.part.0>
 800a184:	e7f2      	b.n	800a16c <__sinit+0xc>
 800a186:	bf00      	nop
 800a188:	0800a0cd 	.word	0x0800a0cd
 800a18c:	20000a18 	.word	0x20000a18

0800a190 <_fwalk_sglue>:
 800a190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a194:	4607      	mov	r7, r0
 800a196:	4688      	mov	r8, r1
 800a198:	4614      	mov	r4, r2
 800a19a:	2600      	movs	r6, #0
 800a19c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a1a4:	d505      	bpl.n	800a1b2 <_fwalk_sglue+0x22>
 800a1a6:	6824      	ldr	r4, [r4, #0]
 800a1a8:	2c00      	cmp	r4, #0
 800a1aa:	d1f7      	bne.n	800a19c <_fwalk_sglue+0xc>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b2:	89ab      	ldrh	r3, [r5, #12]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d907      	bls.n	800a1c8 <_fwalk_sglue+0x38>
 800a1b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	d003      	beq.n	800a1c8 <_fwalk_sglue+0x38>
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	47c0      	blx	r8
 800a1c6:	4306      	orrs	r6, r0
 800a1c8:	3568      	adds	r5, #104	; 0x68
 800a1ca:	e7e9      	b.n	800a1a0 <_fwalk_sglue+0x10>

0800a1cc <iprintf>:
 800a1cc:	b40f      	push	{r0, r1, r2, r3}
 800a1ce:	b507      	push	{r0, r1, r2, lr}
 800a1d0:	4906      	ldr	r1, [pc, #24]	; (800a1ec <iprintf+0x20>)
 800a1d2:	ab04      	add	r3, sp, #16
 800a1d4:	6808      	ldr	r0, [r1, #0]
 800a1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1da:	6881      	ldr	r1, [r0, #8]
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	f001 fbf3 	bl	800b9c8 <_vfiprintf_r>
 800a1e2:	b003      	add	sp, #12
 800a1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1e8:	b004      	add	sp, #16
 800a1ea:	4770      	bx	lr
 800a1ec:	20000064 	.word	0x20000064

0800a1f0 <putchar>:
 800a1f0:	4b02      	ldr	r3, [pc, #8]	; (800a1fc <putchar+0xc>)
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	6818      	ldr	r0, [r3, #0]
 800a1f6:	6882      	ldr	r2, [r0, #8]
 800a1f8:	f001 bdae 	b.w	800bd58 <_putc_r>
 800a1fc:	20000064 	.word	0x20000064

0800a200 <__sread>:
 800a200:	b510      	push	{r4, lr}
 800a202:	460c      	mov	r4, r1
 800a204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a208:	f000 f86c 	bl	800a2e4 <_read_r>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	bfab      	itete	ge
 800a210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a212:	89a3      	ldrhlt	r3, [r4, #12]
 800a214:	181b      	addge	r3, r3, r0
 800a216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a21a:	bfac      	ite	ge
 800a21c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a21e:	81a3      	strhlt	r3, [r4, #12]
 800a220:	bd10      	pop	{r4, pc}

0800a222 <__swrite>:
 800a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	461f      	mov	r7, r3
 800a228:	898b      	ldrh	r3, [r1, #12]
 800a22a:	05db      	lsls	r3, r3, #23
 800a22c:	4605      	mov	r5, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	4616      	mov	r6, r2
 800a232:	d505      	bpl.n	800a240 <__swrite+0x1e>
 800a234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a238:	2302      	movs	r3, #2
 800a23a:	2200      	movs	r2, #0
 800a23c:	f000 f840 	bl	800a2c0 <_lseek_r>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	4628      	mov	r0, r5
 800a252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a256:	f000 b857 	b.w	800a308 <_write_r>

0800a25a <__sseek>:
 800a25a:	b510      	push	{r4, lr}
 800a25c:	460c      	mov	r4, r1
 800a25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a262:	f000 f82d 	bl	800a2c0 <_lseek_r>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	bf15      	itete	ne
 800a26c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a26e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a276:	81a3      	strheq	r3, [r4, #12]
 800a278:	bf18      	it	ne
 800a27a:	81a3      	strhne	r3, [r4, #12]
 800a27c:	bd10      	pop	{r4, pc}

0800a27e <__sclose>:
 800a27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a282:	f000 b80d 	b.w	800a2a0 <_close_r>

0800a286 <memset>:
 800a286:	4402      	add	r2, r0
 800a288:	4603      	mov	r3, r0
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d100      	bne.n	800a290 <memset+0xa>
 800a28e:	4770      	bx	lr
 800a290:	f803 1b01 	strb.w	r1, [r3], #1
 800a294:	e7f9      	b.n	800a28a <memset+0x4>
	...

0800a298 <_localeconv_r>:
 800a298:	4800      	ldr	r0, [pc, #0]	; (800a29c <_localeconv_r+0x4>)
 800a29a:	4770      	bx	lr
 800a29c:	20000158 	.word	0x20000158

0800a2a0 <_close_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d06      	ldr	r5, [pc, #24]	; (800a2bc <_close_r+0x1c>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	f7f8 fd23 	bl	8002cf6 <_close>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_close_r+0x1a>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_close_r+0x1a>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20000a1c 	.word	0x20000a1c

0800a2c0 <_lseek_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_lseek_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f8 fd38 	bl	8002d44 <_lseek>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_lseek_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_lseek_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20000a1c 	.word	0x20000a1c

0800a2e4 <_read_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_read_r+0x20>)
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	602a      	str	r2, [r5, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f7f8 fcc6 	bl	8002c84 <_read>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_read_r+0x1e>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_read_r+0x1e>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	20000a1c 	.word	0x20000a1c

0800a308 <_write_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	; (800a328 <_write_r+0x20>)
 800a30c:	4604      	mov	r4, r0
 800a30e:	4608      	mov	r0, r1
 800a310:	4611      	mov	r1, r2
 800a312:	2200      	movs	r2, #0
 800a314:	602a      	str	r2, [r5, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	f7f8 fcd1 	bl	8002cbe <_write>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_write_r+0x1e>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_write_r+0x1e>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000a1c 	.word	0x20000a1c

0800a32c <__errno>:
 800a32c:	4b01      	ldr	r3, [pc, #4]	; (800a334 <__errno+0x8>)
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20000064 	.word	0x20000064

0800a338 <__libc_init_array>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	4d0d      	ldr	r5, [pc, #52]	; (800a370 <__libc_init_array+0x38>)
 800a33c:	4c0d      	ldr	r4, [pc, #52]	; (800a374 <__libc_init_array+0x3c>)
 800a33e:	1b64      	subs	r4, r4, r5
 800a340:	10a4      	asrs	r4, r4, #2
 800a342:	2600      	movs	r6, #0
 800a344:	42a6      	cmp	r6, r4
 800a346:	d109      	bne.n	800a35c <__libc_init_array+0x24>
 800a348:	4d0b      	ldr	r5, [pc, #44]	; (800a378 <__libc_init_array+0x40>)
 800a34a:	4c0c      	ldr	r4, [pc, #48]	; (800a37c <__libc_init_array+0x44>)
 800a34c:	f001 ff22 	bl	800c194 <_init>
 800a350:	1b64      	subs	r4, r4, r5
 800a352:	10a4      	asrs	r4, r4, #2
 800a354:	2600      	movs	r6, #0
 800a356:	42a6      	cmp	r6, r4
 800a358:	d105      	bne.n	800a366 <__libc_init_array+0x2e>
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a360:	4798      	blx	r3
 800a362:	3601      	adds	r6, #1
 800a364:	e7ee      	b.n	800a344 <__libc_init_array+0xc>
 800a366:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36a:	4798      	blx	r3
 800a36c:	3601      	adds	r6, #1
 800a36e:	e7f2      	b.n	800a356 <__libc_init_array+0x1e>
 800a370:	0800c5d4 	.word	0x0800c5d4
 800a374:	0800c5d4 	.word	0x0800c5d4
 800a378:	0800c5d4 	.word	0x0800c5d4
 800a37c:	0800c5d8 	.word	0x0800c5d8

0800a380 <__retarget_lock_init_recursive>:
 800a380:	4770      	bx	lr

0800a382 <__retarget_lock_acquire_recursive>:
 800a382:	4770      	bx	lr

0800a384 <__retarget_lock_release_recursive>:
 800a384:	4770      	bx	lr

0800a386 <quorem>:
 800a386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38a:	6903      	ldr	r3, [r0, #16]
 800a38c:	690c      	ldr	r4, [r1, #16]
 800a38e:	42a3      	cmp	r3, r4
 800a390:	4607      	mov	r7, r0
 800a392:	db7e      	blt.n	800a492 <quorem+0x10c>
 800a394:	3c01      	subs	r4, #1
 800a396:	f101 0814 	add.w	r8, r1, #20
 800a39a:	f100 0514 	add.w	r5, r0, #20
 800a39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a3b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3bc:	d331      	bcc.n	800a422 <quorem+0x9c>
 800a3be:	f04f 0e00 	mov.w	lr, #0
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	46ac      	mov	ip, r5
 800a3c6:	46f2      	mov	sl, lr
 800a3c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3cc:	b293      	uxth	r3, r2
 800a3ce:	fb06 e303 	mla	r3, r6, r3, lr
 800a3d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3d6:	0c1a      	lsrs	r2, r3, #16
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	ebaa 0303 	sub.w	r3, sl, r3
 800a3de:	f8dc a000 	ldr.w	sl, [ip]
 800a3e2:	fa13 f38a 	uxtah	r3, r3, sl
 800a3e6:	fb06 220e 	mla	r2, r6, lr, r2
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	9b00      	ldr	r3, [sp, #0]
 800a3ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3f2:	b292      	uxth	r2, r2
 800a3f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a3f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a400:	4581      	cmp	r9, r0
 800a402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a406:	f84c 3b04 	str.w	r3, [ip], #4
 800a40a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a40e:	d2db      	bcs.n	800a3c8 <quorem+0x42>
 800a410:	f855 300b 	ldr.w	r3, [r5, fp]
 800a414:	b92b      	cbnz	r3, 800a422 <quorem+0x9c>
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	3b04      	subs	r3, #4
 800a41a:	429d      	cmp	r5, r3
 800a41c:	461a      	mov	r2, r3
 800a41e:	d32c      	bcc.n	800a47a <quorem+0xf4>
 800a420:	613c      	str	r4, [r7, #16]
 800a422:	4638      	mov	r0, r7
 800a424:	f001 f9a6 	bl	800b774 <__mcmp>
 800a428:	2800      	cmp	r0, #0
 800a42a:	db22      	blt.n	800a472 <quorem+0xec>
 800a42c:	3601      	adds	r6, #1
 800a42e:	4629      	mov	r1, r5
 800a430:	2000      	movs	r0, #0
 800a432:	f858 2b04 	ldr.w	r2, [r8], #4
 800a436:	f8d1 c000 	ldr.w	ip, [r1]
 800a43a:	b293      	uxth	r3, r2
 800a43c:	1ac3      	subs	r3, r0, r3
 800a43e:	0c12      	lsrs	r2, r2, #16
 800a440:	fa13 f38c 	uxtah	r3, r3, ip
 800a444:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a452:	45c1      	cmp	r9, r8
 800a454:	f841 3b04 	str.w	r3, [r1], #4
 800a458:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a45c:	d2e9      	bcs.n	800a432 <quorem+0xac>
 800a45e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a466:	b922      	cbnz	r2, 800a472 <quorem+0xec>
 800a468:	3b04      	subs	r3, #4
 800a46a:	429d      	cmp	r5, r3
 800a46c:	461a      	mov	r2, r3
 800a46e:	d30a      	bcc.n	800a486 <quorem+0x100>
 800a470:	613c      	str	r4, [r7, #16]
 800a472:	4630      	mov	r0, r6
 800a474:	b003      	add	sp, #12
 800a476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	3b04      	subs	r3, #4
 800a47e:	2a00      	cmp	r2, #0
 800a480:	d1ce      	bne.n	800a420 <quorem+0x9a>
 800a482:	3c01      	subs	r4, #1
 800a484:	e7c9      	b.n	800a41a <quorem+0x94>
 800a486:	6812      	ldr	r2, [r2, #0]
 800a488:	3b04      	subs	r3, #4
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	d1f0      	bne.n	800a470 <quorem+0xea>
 800a48e:	3c01      	subs	r4, #1
 800a490:	e7eb      	b.n	800a46a <quorem+0xe4>
 800a492:	2000      	movs	r0, #0
 800a494:	e7ee      	b.n	800a474 <quorem+0xee>
	...

0800a498 <_dtoa_r>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	ed2d 8b04 	vpush	{d8-d9}
 800a4a0:	69c5      	ldr	r5, [r0, #28]
 800a4a2:	b093      	sub	sp, #76	; 0x4c
 800a4a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a4a8:	ec57 6b10 	vmov	r6, r7, d0
 800a4ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a4b0:	9107      	str	r1, [sp, #28]
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a4b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a4b8:	b975      	cbnz	r5, 800a4d8 <_dtoa_r+0x40>
 800a4ba:	2010      	movs	r0, #16
 800a4bc:	f000 fe2a 	bl	800b114 <malloc>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	61e0      	str	r0, [r4, #28]
 800a4c4:	b920      	cbnz	r0, 800a4d0 <_dtoa_r+0x38>
 800a4c6:	4bae      	ldr	r3, [pc, #696]	; (800a780 <_dtoa_r+0x2e8>)
 800a4c8:	21ef      	movs	r1, #239	; 0xef
 800a4ca:	48ae      	ldr	r0, [pc, #696]	; (800a784 <_dtoa_r+0x2ec>)
 800a4cc:	f001 fd2c 	bl	800bf28 <__assert_func>
 800a4d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4d4:	6005      	str	r5, [r0, #0]
 800a4d6:	60c5      	str	r5, [r0, #12]
 800a4d8:	69e3      	ldr	r3, [r4, #28]
 800a4da:	6819      	ldr	r1, [r3, #0]
 800a4dc:	b151      	cbz	r1, 800a4f4 <_dtoa_r+0x5c>
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	604a      	str	r2, [r1, #4]
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4093      	lsls	r3, r2
 800a4e6:	608b      	str	r3, [r1, #8]
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 ff07 	bl	800b2fc <_Bfree>
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	1e3b      	subs	r3, r7, #0
 800a4f6:	bfbb      	ittet	lt
 800a4f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4fc:	9303      	strlt	r3, [sp, #12]
 800a4fe:	2300      	movge	r3, #0
 800a500:	2201      	movlt	r2, #1
 800a502:	bfac      	ite	ge
 800a504:	f8c8 3000 	strge.w	r3, [r8]
 800a508:	f8c8 2000 	strlt.w	r2, [r8]
 800a50c:	4b9e      	ldr	r3, [pc, #632]	; (800a788 <_dtoa_r+0x2f0>)
 800a50e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a512:	ea33 0308 	bics.w	r3, r3, r8
 800a516:	d11b      	bne.n	800a550 <_dtoa_r+0xb8>
 800a518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a51a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a524:	4333      	orrs	r3, r6
 800a526:	f000 8593 	beq.w	800b050 <_dtoa_r+0xbb8>
 800a52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a52c:	b963      	cbnz	r3, 800a548 <_dtoa_r+0xb0>
 800a52e:	4b97      	ldr	r3, [pc, #604]	; (800a78c <_dtoa_r+0x2f4>)
 800a530:	e027      	b.n	800a582 <_dtoa_r+0xea>
 800a532:	4b97      	ldr	r3, [pc, #604]	; (800a790 <_dtoa_r+0x2f8>)
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	3308      	adds	r3, #8
 800a538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	9800      	ldr	r0, [sp, #0]
 800a53e:	b013      	add	sp, #76	; 0x4c
 800a540:	ecbd 8b04 	vpop	{d8-d9}
 800a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	4b90      	ldr	r3, [pc, #576]	; (800a78c <_dtoa_r+0x2f4>)
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	3303      	adds	r3, #3
 800a54e:	e7f3      	b.n	800a538 <_dtoa_r+0xa0>
 800a550:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a554:	2200      	movs	r2, #0
 800a556:	ec51 0b17 	vmov	r0, r1, d7
 800a55a:	eeb0 8a47 	vmov.f32	s16, s14
 800a55e:	eef0 8a67 	vmov.f32	s17, s15
 800a562:	2300      	movs	r3, #0
 800a564:	f7f6 fac8 	bl	8000af8 <__aeabi_dcmpeq>
 800a568:	4681      	mov	r9, r0
 800a56a:	b160      	cbz	r0, 800a586 <_dtoa_r+0xee>
 800a56c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a56e:	2301      	movs	r3, #1
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 8568 	beq.w	800b04a <_dtoa_r+0xbb2>
 800a57a:	4b86      	ldr	r3, [pc, #536]	; (800a794 <_dtoa_r+0x2fc>)
 800a57c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	3b01      	subs	r3, #1
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	e7da      	b.n	800a53c <_dtoa_r+0xa4>
 800a586:	aa10      	add	r2, sp, #64	; 0x40
 800a588:	a911      	add	r1, sp, #68	; 0x44
 800a58a:	4620      	mov	r0, r4
 800a58c:	eeb0 0a48 	vmov.f32	s0, s16
 800a590:	eef0 0a68 	vmov.f32	s1, s17
 800a594:	f001 f994 	bl	800b8c0 <__d2b>
 800a598:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a59c:	4682      	mov	sl, r0
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	d07f      	beq.n	800a6a2 <_dtoa_r+0x20a>
 800a5a2:	ee18 3a90 	vmov	r3, s17
 800a5a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a5ae:	ec51 0b18 	vmov	r0, r1, d8
 800a5b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a5ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a5be:	4619      	mov	r1, r3
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4b75      	ldr	r3, [pc, #468]	; (800a798 <_dtoa_r+0x300>)
 800a5c4:	f7f5 fe78 	bl	80002b8 <__aeabi_dsub>
 800a5c8:	a367      	add	r3, pc, #412	; (adr r3, 800a768 <_dtoa_r+0x2d0>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f6 f82b 	bl	8000628 <__aeabi_dmul>
 800a5d2:	a367      	add	r3, pc, #412	; (adr r3, 800a770 <_dtoa_r+0x2d8>)
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f7f5 fe70 	bl	80002bc <__adddf3>
 800a5dc:	4606      	mov	r6, r0
 800a5de:	4628      	mov	r0, r5
 800a5e0:	460f      	mov	r7, r1
 800a5e2:	f7f5 ffb7 	bl	8000554 <__aeabi_i2d>
 800a5e6:	a364      	add	r3, pc, #400	; (adr r3, 800a778 <_dtoa_r+0x2e0>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f6 f81c 	bl	8000628 <__aeabi_dmul>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f7f5 fe60 	bl	80002bc <__adddf3>
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	460f      	mov	r7, r1
 800a600:	f7f6 fac2 	bl	8000b88 <__aeabi_d2iz>
 800a604:	2200      	movs	r2, #0
 800a606:	4683      	mov	fp, r0
 800a608:	2300      	movs	r3, #0
 800a60a:	4630      	mov	r0, r6
 800a60c:	4639      	mov	r1, r7
 800a60e:	f7f6 fa7d 	bl	8000b0c <__aeabi_dcmplt>
 800a612:	b148      	cbz	r0, 800a628 <_dtoa_r+0x190>
 800a614:	4658      	mov	r0, fp
 800a616:	f7f5 ff9d 	bl	8000554 <__aeabi_i2d>
 800a61a:	4632      	mov	r2, r6
 800a61c:	463b      	mov	r3, r7
 800a61e:	f7f6 fa6b 	bl	8000af8 <__aeabi_dcmpeq>
 800a622:	b908      	cbnz	r0, 800a628 <_dtoa_r+0x190>
 800a624:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a628:	f1bb 0f16 	cmp.w	fp, #22
 800a62c:	d857      	bhi.n	800a6de <_dtoa_r+0x246>
 800a62e:	4b5b      	ldr	r3, [pc, #364]	; (800a79c <_dtoa_r+0x304>)
 800a630:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	ec51 0b18 	vmov	r0, r1, d8
 800a63c:	f7f6 fa66 	bl	8000b0c <__aeabi_dcmplt>
 800a640:	2800      	cmp	r0, #0
 800a642:	d04e      	beq.n	800a6e2 <_dtoa_r+0x24a>
 800a644:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a648:	2300      	movs	r3, #0
 800a64a:	930c      	str	r3, [sp, #48]	; 0x30
 800a64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a64e:	1b5b      	subs	r3, r3, r5
 800a650:	1e5a      	subs	r2, r3, #1
 800a652:	bf45      	ittet	mi
 800a654:	f1c3 0301 	rsbmi	r3, r3, #1
 800a658:	9305      	strmi	r3, [sp, #20]
 800a65a:	2300      	movpl	r3, #0
 800a65c:	2300      	movmi	r3, #0
 800a65e:	9206      	str	r2, [sp, #24]
 800a660:	bf54      	ite	pl
 800a662:	9305      	strpl	r3, [sp, #20]
 800a664:	9306      	strmi	r3, [sp, #24]
 800a666:	f1bb 0f00 	cmp.w	fp, #0
 800a66a:	db3c      	blt.n	800a6e6 <_dtoa_r+0x24e>
 800a66c:	9b06      	ldr	r3, [sp, #24]
 800a66e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a672:	445b      	add	r3, fp
 800a674:	9306      	str	r3, [sp, #24]
 800a676:	2300      	movs	r3, #0
 800a678:	9308      	str	r3, [sp, #32]
 800a67a:	9b07      	ldr	r3, [sp, #28]
 800a67c:	2b09      	cmp	r3, #9
 800a67e:	d868      	bhi.n	800a752 <_dtoa_r+0x2ba>
 800a680:	2b05      	cmp	r3, #5
 800a682:	bfc4      	itt	gt
 800a684:	3b04      	subgt	r3, #4
 800a686:	9307      	strgt	r3, [sp, #28]
 800a688:	9b07      	ldr	r3, [sp, #28]
 800a68a:	f1a3 0302 	sub.w	r3, r3, #2
 800a68e:	bfcc      	ite	gt
 800a690:	2500      	movgt	r5, #0
 800a692:	2501      	movle	r5, #1
 800a694:	2b03      	cmp	r3, #3
 800a696:	f200 8085 	bhi.w	800a7a4 <_dtoa_r+0x30c>
 800a69a:	e8df f003 	tbb	[pc, r3]
 800a69e:	3b2e      	.short	0x3b2e
 800a6a0:	5839      	.short	0x5839
 800a6a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a6a6:	441d      	add	r5, r3
 800a6a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a6ac:	2b20      	cmp	r3, #32
 800a6ae:	bfc1      	itttt	gt
 800a6b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a6b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a6b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a6bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a6c0:	bfd6      	itet	le
 800a6c2:	f1c3 0320 	rsble	r3, r3, #32
 800a6c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a6ca:	fa06 f003 	lslle.w	r0, r6, r3
 800a6ce:	f7f5 ff31 	bl	8000534 <__aeabi_ui2d>
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a6d8:	3d01      	subs	r5, #1
 800a6da:	920e      	str	r2, [sp, #56]	; 0x38
 800a6dc:	e76f      	b.n	800a5be <_dtoa_r+0x126>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e7b3      	b.n	800a64a <_dtoa_r+0x1b2>
 800a6e2:	900c      	str	r0, [sp, #48]	; 0x30
 800a6e4:	e7b2      	b.n	800a64c <_dtoa_r+0x1b4>
 800a6e6:	9b05      	ldr	r3, [sp, #20]
 800a6e8:	eba3 030b 	sub.w	r3, r3, fp
 800a6ec:	9305      	str	r3, [sp, #20]
 800a6ee:	f1cb 0300 	rsb	r3, fp, #0
 800a6f2:	9308      	str	r3, [sp, #32]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6f8:	e7bf      	b.n	800a67a <_dtoa_r+0x1e2>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc52      	bgt.n	800a7aa <_dtoa_r+0x312>
 800a704:	2301      	movs	r3, #1
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	461a      	mov	r2, r3
 800a70c:	920a      	str	r2, [sp, #40]	; 0x28
 800a70e:	e00b      	b.n	800a728 <_dtoa_r+0x290>
 800a710:	2301      	movs	r3, #1
 800a712:	e7f3      	b.n	800a6fc <_dtoa_r+0x264>
 800a714:	2300      	movs	r3, #0
 800a716:	9309      	str	r3, [sp, #36]	; 0x24
 800a718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71a:	445b      	add	r3, fp
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	3301      	adds	r3, #1
 800a720:	2b01      	cmp	r3, #1
 800a722:	9304      	str	r3, [sp, #16]
 800a724:	bfb8      	it	lt
 800a726:	2301      	movlt	r3, #1
 800a728:	69e0      	ldr	r0, [r4, #28]
 800a72a:	2100      	movs	r1, #0
 800a72c:	2204      	movs	r2, #4
 800a72e:	f102 0614 	add.w	r6, r2, #20
 800a732:	429e      	cmp	r6, r3
 800a734:	d93d      	bls.n	800a7b2 <_dtoa_r+0x31a>
 800a736:	6041      	str	r1, [r0, #4]
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 fd9f 	bl	800b27c <_Balloc>
 800a73e:	9000      	str	r0, [sp, #0]
 800a740:	2800      	cmp	r0, #0
 800a742:	d139      	bne.n	800a7b8 <_dtoa_r+0x320>
 800a744:	4b16      	ldr	r3, [pc, #88]	; (800a7a0 <_dtoa_r+0x308>)
 800a746:	4602      	mov	r2, r0
 800a748:	f240 11af 	movw	r1, #431	; 0x1af
 800a74c:	e6bd      	b.n	800a4ca <_dtoa_r+0x32>
 800a74e:	2301      	movs	r3, #1
 800a750:	e7e1      	b.n	800a716 <_dtoa_r+0x27e>
 800a752:	2501      	movs	r5, #1
 800a754:	2300      	movs	r3, #0
 800a756:	9307      	str	r3, [sp, #28]
 800a758:	9509      	str	r5, [sp, #36]	; 0x24
 800a75a:	f04f 33ff 	mov.w	r3, #4294967295
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	2200      	movs	r2, #0
 800a764:	2312      	movs	r3, #18
 800a766:	e7d1      	b.n	800a70c <_dtoa_r+0x274>
 800a768:	636f4361 	.word	0x636f4361
 800a76c:	3fd287a7 	.word	0x3fd287a7
 800a770:	8b60c8b3 	.word	0x8b60c8b3
 800a774:	3fc68a28 	.word	0x3fc68a28
 800a778:	509f79fb 	.word	0x509f79fb
 800a77c:	3fd34413 	.word	0x3fd34413
 800a780:	0800c29d 	.word	0x0800c29d
 800a784:	0800c2b4 	.word	0x0800c2b4
 800a788:	7ff00000 	.word	0x7ff00000
 800a78c:	0800c299 	.word	0x0800c299
 800a790:	0800c290 	.word	0x0800c290
 800a794:	0800c26d 	.word	0x0800c26d
 800a798:	3ff80000 	.word	0x3ff80000
 800a79c:	0800c3a0 	.word	0x0800c3a0
 800a7a0:	0800c30c 	.word	0x0800c30c
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a8:	e7d7      	b.n	800a75a <_dtoa_r+0x2c2>
 800a7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	e7ba      	b.n	800a728 <_dtoa_r+0x290>
 800a7b2:	3101      	adds	r1, #1
 800a7b4:	0052      	lsls	r2, r2, #1
 800a7b6:	e7ba      	b.n	800a72e <_dtoa_r+0x296>
 800a7b8:	69e3      	ldr	r3, [r4, #28]
 800a7ba:	9a00      	ldr	r2, [sp, #0]
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	9b04      	ldr	r3, [sp, #16]
 800a7c0:	2b0e      	cmp	r3, #14
 800a7c2:	f200 80a8 	bhi.w	800a916 <_dtoa_r+0x47e>
 800a7c6:	2d00      	cmp	r5, #0
 800a7c8:	f000 80a5 	beq.w	800a916 <_dtoa_r+0x47e>
 800a7cc:	f1bb 0f00 	cmp.w	fp, #0
 800a7d0:	dd38      	ble.n	800a844 <_dtoa_r+0x3ac>
 800a7d2:	4bc0      	ldr	r3, [pc, #768]	; (800aad4 <_dtoa_r+0x63c>)
 800a7d4:	f00b 020f 	and.w	r2, fp, #15
 800a7d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a7e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a7e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a7e8:	d019      	beq.n	800a81e <_dtoa_r+0x386>
 800a7ea:	4bbb      	ldr	r3, [pc, #748]	; (800aad8 <_dtoa_r+0x640>)
 800a7ec:	ec51 0b18 	vmov	r0, r1, d8
 800a7f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7f4:	f7f6 f842 	bl	800087c <__aeabi_ddiv>
 800a7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7fc:	f008 080f 	and.w	r8, r8, #15
 800a800:	2503      	movs	r5, #3
 800a802:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aad8 <_dtoa_r+0x640>
 800a806:	f1b8 0f00 	cmp.w	r8, #0
 800a80a:	d10a      	bne.n	800a822 <_dtoa_r+0x38a>
 800a80c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a810:	4632      	mov	r2, r6
 800a812:	463b      	mov	r3, r7
 800a814:	f7f6 f832 	bl	800087c <__aeabi_ddiv>
 800a818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a81c:	e02b      	b.n	800a876 <_dtoa_r+0x3de>
 800a81e:	2502      	movs	r5, #2
 800a820:	e7ef      	b.n	800a802 <_dtoa_r+0x36a>
 800a822:	f018 0f01 	tst.w	r8, #1
 800a826:	d008      	beq.n	800a83a <_dtoa_r+0x3a2>
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a830:	f7f5 fefa 	bl	8000628 <__aeabi_dmul>
 800a834:	3501      	adds	r5, #1
 800a836:	4606      	mov	r6, r0
 800a838:	460f      	mov	r7, r1
 800a83a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a83e:	f109 0908 	add.w	r9, r9, #8
 800a842:	e7e0      	b.n	800a806 <_dtoa_r+0x36e>
 800a844:	f000 809f 	beq.w	800a986 <_dtoa_r+0x4ee>
 800a848:	f1cb 0600 	rsb	r6, fp, #0
 800a84c:	4ba1      	ldr	r3, [pc, #644]	; (800aad4 <_dtoa_r+0x63c>)
 800a84e:	4fa2      	ldr	r7, [pc, #648]	; (800aad8 <_dtoa_r+0x640>)
 800a850:	f006 020f 	and.w	r2, r6, #15
 800a854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	ec51 0b18 	vmov	r0, r1, d8
 800a860:	f7f5 fee2 	bl	8000628 <__aeabi_dmul>
 800a864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a868:	1136      	asrs	r6, r6, #4
 800a86a:	2300      	movs	r3, #0
 800a86c:	2502      	movs	r5, #2
 800a86e:	2e00      	cmp	r6, #0
 800a870:	d17e      	bne.n	800a970 <_dtoa_r+0x4d8>
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1d0      	bne.n	800a818 <_dtoa_r+0x380>
 800a876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a878:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 8084 	beq.w	800a98a <_dtoa_r+0x4f2>
 800a882:	4b96      	ldr	r3, [pc, #600]	; (800aadc <_dtoa_r+0x644>)
 800a884:	2200      	movs	r2, #0
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	f7f6 f93f 	bl	8000b0c <__aeabi_dcmplt>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d07b      	beq.n	800a98a <_dtoa_r+0x4f2>
 800a892:	9b04      	ldr	r3, [sp, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d078      	beq.n	800a98a <_dtoa_r+0x4f2>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dd39      	ble.n	800a912 <_dtoa_r+0x47a>
 800a89e:	4b90      	ldr	r3, [pc, #576]	; (800aae0 <_dtoa_r+0x648>)
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	f7f5 febf 	bl	8000628 <__aeabi_dmul>
 800a8aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ae:	9e01      	ldr	r6, [sp, #4]
 800a8b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f7f5 fe4a 	bl	8000554 <__aeabi_i2d>
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	f7f5 feb0 	bl	8000628 <__aeabi_dmul>
 800a8c8:	4b86      	ldr	r3, [pc, #536]	; (800aae4 <_dtoa_r+0x64c>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f7f5 fcf6 	bl	80002bc <__adddf3>
 800a8d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a8d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8d8:	9303      	str	r3, [sp, #12]
 800a8da:	2e00      	cmp	r6, #0
 800a8dc:	d158      	bne.n	800a990 <_dtoa_r+0x4f8>
 800a8de:	4b82      	ldr	r3, [pc, #520]	; (800aae8 <_dtoa_r+0x650>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	f7f5 fce7 	bl	80002b8 <__aeabi_dsub>
 800a8ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	4689      	mov	r9, r1
 800a8f2:	f7f6 f929 	bl	8000b48 <__aeabi_dcmpgt>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	f040 8296 	bne.w	800ae28 <_dtoa_r+0x990>
 800a8fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a900:	4640      	mov	r0, r8
 800a902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a906:	4649      	mov	r1, r9
 800a908:	f7f6 f900 	bl	8000b0c <__aeabi_dcmplt>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	f040 8289 	bne.w	800ae24 <_dtoa_r+0x98c>
 800a912:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f2c0 814e 	blt.w	800abba <_dtoa_r+0x722>
 800a91e:	f1bb 0f0e 	cmp.w	fp, #14
 800a922:	f300 814a 	bgt.w	800abba <_dtoa_r+0x722>
 800a926:	4b6b      	ldr	r3, [pc, #428]	; (800aad4 <_dtoa_r+0x63c>)
 800a928:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a92c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a932:	2b00      	cmp	r3, #0
 800a934:	f280 80dc 	bge.w	800aaf0 <_dtoa_r+0x658>
 800a938:	9b04      	ldr	r3, [sp, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f300 80d8 	bgt.w	800aaf0 <_dtoa_r+0x658>
 800a940:	f040 826f 	bne.w	800ae22 <_dtoa_r+0x98a>
 800a944:	4b68      	ldr	r3, [pc, #416]	; (800aae8 <_dtoa_r+0x650>)
 800a946:	2200      	movs	r2, #0
 800a948:	4640      	mov	r0, r8
 800a94a:	4649      	mov	r1, r9
 800a94c:	f7f5 fe6c 	bl	8000628 <__aeabi_dmul>
 800a950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a954:	f7f6 f8ee 	bl	8000b34 <__aeabi_dcmpge>
 800a958:	9e04      	ldr	r6, [sp, #16]
 800a95a:	4637      	mov	r7, r6
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f040 8245 	bne.w	800adec <_dtoa_r+0x954>
 800a962:	9d00      	ldr	r5, [sp, #0]
 800a964:	2331      	movs	r3, #49	; 0x31
 800a966:	f805 3b01 	strb.w	r3, [r5], #1
 800a96a:	f10b 0b01 	add.w	fp, fp, #1
 800a96e:	e241      	b.n	800adf4 <_dtoa_r+0x95c>
 800a970:	07f2      	lsls	r2, r6, #31
 800a972:	d505      	bpl.n	800a980 <_dtoa_r+0x4e8>
 800a974:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a978:	f7f5 fe56 	bl	8000628 <__aeabi_dmul>
 800a97c:	3501      	adds	r5, #1
 800a97e:	2301      	movs	r3, #1
 800a980:	1076      	asrs	r6, r6, #1
 800a982:	3708      	adds	r7, #8
 800a984:	e773      	b.n	800a86e <_dtoa_r+0x3d6>
 800a986:	2502      	movs	r5, #2
 800a988:	e775      	b.n	800a876 <_dtoa_r+0x3de>
 800a98a:	9e04      	ldr	r6, [sp, #16]
 800a98c:	465f      	mov	r7, fp
 800a98e:	e792      	b.n	800a8b6 <_dtoa_r+0x41e>
 800a990:	9900      	ldr	r1, [sp, #0]
 800a992:	4b50      	ldr	r3, [pc, #320]	; (800aad4 <_dtoa_r+0x63c>)
 800a994:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a998:	4431      	add	r1, r6
 800a99a:	9102      	str	r1, [sp, #8]
 800a99c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a99e:	eeb0 9a47 	vmov.f32	s18, s14
 800a9a2:	eef0 9a67 	vmov.f32	s19, s15
 800a9a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a9aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	d044      	beq.n	800aa3c <_dtoa_r+0x5a4>
 800a9b2:	494e      	ldr	r1, [pc, #312]	; (800aaec <_dtoa_r+0x654>)
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f7f5 ff61 	bl	800087c <__aeabi_ddiv>
 800a9ba:	ec53 2b19 	vmov	r2, r3, d9
 800a9be:	f7f5 fc7b 	bl	80002b8 <__aeabi_dsub>
 800a9c2:	9d00      	ldr	r5, [sp, #0]
 800a9c4:	ec41 0b19 	vmov	d9, r0, r1
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	f7f6 f8dc 	bl	8000b88 <__aeabi_d2iz>
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	f7f5 fdbf 	bl	8000554 <__aeabi_i2d>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4640      	mov	r0, r8
 800a9dc:	4649      	mov	r1, r9
 800a9de:	f7f5 fc6b 	bl	80002b8 <__aeabi_dsub>
 800a9e2:	3630      	adds	r6, #48	; 0x30
 800a9e4:	f805 6b01 	strb.w	r6, [r5], #1
 800a9e8:	ec53 2b19 	vmov	r2, r3, d9
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	4689      	mov	r9, r1
 800a9f0:	f7f6 f88c 	bl	8000b0c <__aeabi_dcmplt>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d164      	bne.n	800aac2 <_dtoa_r+0x62a>
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	4937      	ldr	r1, [pc, #220]	; (800aadc <_dtoa_r+0x644>)
 800a9fe:	2000      	movs	r0, #0
 800aa00:	f7f5 fc5a 	bl	80002b8 <__aeabi_dsub>
 800aa04:	ec53 2b19 	vmov	r2, r3, d9
 800aa08:	f7f6 f880 	bl	8000b0c <__aeabi_dcmplt>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f040 80b6 	bne.w	800ab7e <_dtoa_r+0x6e6>
 800aa12:	9b02      	ldr	r3, [sp, #8]
 800aa14:	429d      	cmp	r5, r3
 800aa16:	f43f af7c 	beq.w	800a912 <_dtoa_r+0x47a>
 800aa1a:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <_dtoa_r+0x648>)
 800aa1c:	ec51 0b19 	vmov	r0, r1, d9
 800aa20:	2200      	movs	r2, #0
 800aa22:	f7f5 fe01 	bl	8000628 <__aeabi_dmul>
 800aa26:	4b2e      	ldr	r3, [pc, #184]	; (800aae0 <_dtoa_r+0x648>)
 800aa28:	ec41 0b19 	vmov	d9, r0, r1
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	4640      	mov	r0, r8
 800aa30:	4649      	mov	r1, r9
 800aa32:	f7f5 fdf9 	bl	8000628 <__aeabi_dmul>
 800aa36:	4680      	mov	r8, r0
 800aa38:	4689      	mov	r9, r1
 800aa3a:	e7c5      	b.n	800a9c8 <_dtoa_r+0x530>
 800aa3c:	ec51 0b17 	vmov	r0, r1, d7
 800aa40:	f7f5 fdf2 	bl	8000628 <__aeabi_dmul>
 800aa44:	9b02      	ldr	r3, [sp, #8]
 800aa46:	9d00      	ldr	r5, [sp, #0]
 800aa48:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa4a:	ec41 0b19 	vmov	d9, r0, r1
 800aa4e:	4649      	mov	r1, r9
 800aa50:	4640      	mov	r0, r8
 800aa52:	f7f6 f899 	bl	8000b88 <__aeabi_d2iz>
 800aa56:	4606      	mov	r6, r0
 800aa58:	f7f5 fd7c 	bl	8000554 <__aeabi_i2d>
 800aa5c:	3630      	adds	r6, #48	; 0x30
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	4640      	mov	r0, r8
 800aa64:	4649      	mov	r1, r9
 800aa66:	f7f5 fc27 	bl	80002b8 <__aeabi_dsub>
 800aa6a:	f805 6b01 	strb.w	r6, [r5], #1
 800aa6e:	9b02      	ldr	r3, [sp, #8]
 800aa70:	429d      	cmp	r5, r3
 800aa72:	4680      	mov	r8, r0
 800aa74:	4689      	mov	r9, r1
 800aa76:	f04f 0200 	mov.w	r2, #0
 800aa7a:	d124      	bne.n	800aac6 <_dtoa_r+0x62e>
 800aa7c:	4b1b      	ldr	r3, [pc, #108]	; (800aaec <_dtoa_r+0x654>)
 800aa7e:	ec51 0b19 	vmov	r0, r1, d9
 800aa82:	f7f5 fc1b 	bl	80002bc <__adddf3>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	4649      	mov	r1, r9
 800aa8e:	f7f6 f85b 	bl	8000b48 <__aeabi_dcmpgt>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d173      	bne.n	800ab7e <_dtoa_r+0x6e6>
 800aa96:	ec53 2b19 	vmov	r2, r3, d9
 800aa9a:	4914      	ldr	r1, [pc, #80]	; (800aaec <_dtoa_r+0x654>)
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	f7f5 fc0b 	bl	80002b8 <__aeabi_dsub>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	f7f6 f82f 	bl	8000b0c <__aeabi_dcmplt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f43f af2f 	beq.w	800a912 <_dtoa_r+0x47a>
 800aab4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aab6:	1e6b      	subs	r3, r5, #1
 800aab8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aabe:	2b30      	cmp	r3, #48	; 0x30
 800aac0:	d0f8      	beq.n	800aab4 <_dtoa_r+0x61c>
 800aac2:	46bb      	mov	fp, r7
 800aac4:	e04a      	b.n	800ab5c <_dtoa_r+0x6c4>
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <_dtoa_r+0x648>)
 800aac8:	f7f5 fdae 	bl	8000628 <__aeabi_dmul>
 800aacc:	4680      	mov	r8, r0
 800aace:	4689      	mov	r9, r1
 800aad0:	e7bd      	b.n	800aa4e <_dtoa_r+0x5b6>
 800aad2:	bf00      	nop
 800aad4:	0800c3a0 	.word	0x0800c3a0
 800aad8:	0800c378 	.word	0x0800c378
 800aadc:	3ff00000 	.word	0x3ff00000
 800aae0:	40240000 	.word	0x40240000
 800aae4:	401c0000 	.word	0x401c0000
 800aae8:	40140000 	.word	0x40140000
 800aaec:	3fe00000 	.word	0x3fe00000
 800aaf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aaf4:	9d00      	ldr	r5, [sp, #0]
 800aaf6:	4642      	mov	r2, r8
 800aaf8:	464b      	mov	r3, r9
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 febd 	bl	800087c <__aeabi_ddiv>
 800ab02:	f7f6 f841 	bl	8000b88 <__aeabi_d2iz>
 800ab06:	9001      	str	r0, [sp, #4]
 800ab08:	f7f5 fd24 	bl	8000554 <__aeabi_i2d>
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	464b      	mov	r3, r9
 800ab10:	f7f5 fd8a 	bl	8000628 <__aeabi_dmul>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4630      	mov	r0, r6
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	f7f5 fbcc 	bl	80002b8 <__aeabi_dsub>
 800ab20:	9e01      	ldr	r6, [sp, #4]
 800ab22:	9f04      	ldr	r7, [sp, #16]
 800ab24:	3630      	adds	r6, #48	; 0x30
 800ab26:	f805 6b01 	strb.w	r6, [r5], #1
 800ab2a:	9e00      	ldr	r6, [sp, #0]
 800ab2c:	1bae      	subs	r6, r5, r6
 800ab2e:	42b7      	cmp	r7, r6
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	d134      	bne.n	800aba0 <_dtoa_r+0x708>
 800ab36:	f7f5 fbc1 	bl	80002bc <__adddf3>
 800ab3a:	4642      	mov	r2, r8
 800ab3c:	464b      	mov	r3, r9
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460f      	mov	r7, r1
 800ab42:	f7f6 f801 	bl	8000b48 <__aeabi_dcmpgt>
 800ab46:	b9c8      	cbnz	r0, 800ab7c <_dtoa_r+0x6e4>
 800ab48:	4642      	mov	r2, r8
 800ab4a:	464b      	mov	r3, r9
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	4639      	mov	r1, r7
 800ab50:	f7f5 ffd2 	bl	8000af8 <__aeabi_dcmpeq>
 800ab54:	b110      	cbz	r0, 800ab5c <_dtoa_r+0x6c4>
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	07db      	lsls	r3, r3, #31
 800ab5a:	d40f      	bmi.n	800ab7c <_dtoa_r+0x6e4>
 800ab5c:	4651      	mov	r1, sl
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 fbcc 	bl	800b2fc <_Bfree>
 800ab64:	2300      	movs	r3, #0
 800ab66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab68:	702b      	strb	r3, [r5, #0]
 800ab6a:	f10b 0301 	add.w	r3, fp, #1
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f43f ace2 	beq.w	800a53c <_dtoa_r+0xa4>
 800ab78:	601d      	str	r5, [r3, #0]
 800ab7a:	e4df      	b.n	800a53c <_dtoa_r+0xa4>
 800ab7c:	465f      	mov	r7, fp
 800ab7e:	462b      	mov	r3, r5
 800ab80:	461d      	mov	r5, r3
 800ab82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab86:	2a39      	cmp	r2, #57	; 0x39
 800ab88:	d106      	bne.n	800ab98 <_dtoa_r+0x700>
 800ab8a:	9a00      	ldr	r2, [sp, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d1f7      	bne.n	800ab80 <_dtoa_r+0x6e8>
 800ab90:	9900      	ldr	r1, [sp, #0]
 800ab92:	2230      	movs	r2, #48	; 0x30
 800ab94:	3701      	adds	r7, #1
 800ab96:	700a      	strb	r2, [r1, #0]
 800ab98:	781a      	ldrb	r2, [r3, #0]
 800ab9a:	3201      	adds	r2, #1
 800ab9c:	701a      	strb	r2, [r3, #0]
 800ab9e:	e790      	b.n	800aac2 <_dtoa_r+0x62a>
 800aba0:	4ba3      	ldr	r3, [pc, #652]	; (800ae30 <_dtoa_r+0x998>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	f7f5 fd40 	bl	8000628 <__aeabi_dmul>
 800aba8:	2200      	movs	r2, #0
 800abaa:	2300      	movs	r3, #0
 800abac:	4606      	mov	r6, r0
 800abae:	460f      	mov	r7, r1
 800abb0:	f7f5 ffa2 	bl	8000af8 <__aeabi_dcmpeq>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d09e      	beq.n	800aaf6 <_dtoa_r+0x65e>
 800abb8:	e7d0      	b.n	800ab5c <_dtoa_r+0x6c4>
 800abba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	f000 80ca 	beq.w	800ad56 <_dtoa_r+0x8be>
 800abc2:	9a07      	ldr	r2, [sp, #28]
 800abc4:	2a01      	cmp	r2, #1
 800abc6:	f300 80ad 	bgt.w	800ad24 <_dtoa_r+0x88c>
 800abca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abcc:	2a00      	cmp	r2, #0
 800abce:	f000 80a5 	beq.w	800ad1c <_dtoa_r+0x884>
 800abd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abd6:	9e08      	ldr	r6, [sp, #32]
 800abd8:	9d05      	ldr	r5, [sp, #20]
 800abda:	9a05      	ldr	r2, [sp, #20]
 800abdc:	441a      	add	r2, r3
 800abde:	9205      	str	r2, [sp, #20]
 800abe0:	9a06      	ldr	r2, [sp, #24]
 800abe2:	2101      	movs	r1, #1
 800abe4:	441a      	add	r2, r3
 800abe6:	4620      	mov	r0, r4
 800abe8:	9206      	str	r2, [sp, #24]
 800abea:	f000 fc3d 	bl	800b468 <__i2b>
 800abee:	4607      	mov	r7, r0
 800abf0:	b165      	cbz	r5, 800ac0c <_dtoa_r+0x774>
 800abf2:	9b06      	ldr	r3, [sp, #24]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	dd09      	ble.n	800ac0c <_dtoa_r+0x774>
 800abf8:	42ab      	cmp	r3, r5
 800abfa:	9a05      	ldr	r2, [sp, #20]
 800abfc:	bfa8      	it	ge
 800abfe:	462b      	movge	r3, r5
 800ac00:	1ad2      	subs	r2, r2, r3
 800ac02:	9205      	str	r2, [sp, #20]
 800ac04:	9a06      	ldr	r2, [sp, #24]
 800ac06:	1aed      	subs	r5, r5, r3
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	9306      	str	r3, [sp, #24]
 800ac0c:	9b08      	ldr	r3, [sp, #32]
 800ac0e:	b1f3      	cbz	r3, 800ac4e <_dtoa_r+0x7b6>
 800ac10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 80a3 	beq.w	800ad5e <_dtoa_r+0x8c6>
 800ac18:	2e00      	cmp	r6, #0
 800ac1a:	dd10      	ble.n	800ac3e <_dtoa_r+0x7a6>
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	4632      	mov	r2, r6
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fce1 	bl	800b5e8 <__pow5mult>
 800ac26:	4652      	mov	r2, sl
 800ac28:	4601      	mov	r1, r0
 800ac2a:	4607      	mov	r7, r0
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f000 fc31 	bl	800b494 <__multiply>
 800ac32:	4651      	mov	r1, sl
 800ac34:	4680      	mov	r8, r0
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 fb60 	bl	800b2fc <_Bfree>
 800ac3c:	46c2      	mov	sl, r8
 800ac3e:	9b08      	ldr	r3, [sp, #32]
 800ac40:	1b9a      	subs	r2, r3, r6
 800ac42:	d004      	beq.n	800ac4e <_dtoa_r+0x7b6>
 800ac44:	4651      	mov	r1, sl
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 fcce 	bl	800b5e8 <__pow5mult>
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	2101      	movs	r1, #1
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fc09 	bl	800b468 <__i2b>
 800ac56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	f340 8081 	ble.w	800ad62 <_dtoa_r+0x8ca>
 800ac60:	461a      	mov	r2, r3
 800ac62:	4601      	mov	r1, r0
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 fcbf 	bl	800b5e8 <__pow5mult>
 800ac6a:	9b07      	ldr	r3, [sp, #28]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	4606      	mov	r6, r0
 800ac70:	dd7a      	ble.n	800ad68 <_dtoa_r+0x8d0>
 800ac72:	f04f 0800 	mov.w	r8, #0
 800ac76:	6933      	ldr	r3, [r6, #16]
 800ac78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac7c:	6918      	ldr	r0, [r3, #16]
 800ac7e:	f000 fba5 	bl	800b3cc <__hi0bits>
 800ac82:	f1c0 0020 	rsb	r0, r0, #32
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	4418      	add	r0, r3
 800ac8a:	f010 001f 	ands.w	r0, r0, #31
 800ac8e:	f000 8094 	beq.w	800adba <_dtoa_r+0x922>
 800ac92:	f1c0 0320 	rsb	r3, r0, #32
 800ac96:	2b04      	cmp	r3, #4
 800ac98:	f340 8085 	ble.w	800ada6 <_dtoa_r+0x90e>
 800ac9c:	9b05      	ldr	r3, [sp, #20]
 800ac9e:	f1c0 001c 	rsb	r0, r0, #28
 800aca2:	4403      	add	r3, r0
 800aca4:	9305      	str	r3, [sp, #20]
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	4403      	add	r3, r0
 800acaa:	4405      	add	r5, r0
 800acac:	9306      	str	r3, [sp, #24]
 800acae:	9b05      	ldr	r3, [sp, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	dd05      	ble.n	800acc0 <_dtoa_r+0x828>
 800acb4:	4651      	mov	r1, sl
 800acb6:	461a      	mov	r2, r3
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 fcef 	bl	800b69c <__lshift>
 800acbe:	4682      	mov	sl, r0
 800acc0:	9b06      	ldr	r3, [sp, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	dd05      	ble.n	800acd2 <_dtoa_r+0x83a>
 800acc6:	4631      	mov	r1, r6
 800acc8:	461a      	mov	r2, r3
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fce6 	bl	800b69c <__lshift>
 800acd0:	4606      	mov	r6, r0
 800acd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d072      	beq.n	800adbe <_dtoa_r+0x926>
 800acd8:	4631      	mov	r1, r6
 800acda:	4650      	mov	r0, sl
 800acdc:	f000 fd4a 	bl	800b774 <__mcmp>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	da6c      	bge.n	800adbe <_dtoa_r+0x926>
 800ace4:	2300      	movs	r3, #0
 800ace6:	4651      	mov	r1, sl
 800ace8:	220a      	movs	r2, #10
 800acea:	4620      	mov	r0, r4
 800acec:	f000 fb28 	bl	800b340 <__multadd>
 800acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acf6:	4682      	mov	sl, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 81b0 	beq.w	800b05e <_dtoa_r+0xbc6>
 800acfe:	2300      	movs	r3, #0
 800ad00:	4639      	mov	r1, r7
 800ad02:	220a      	movs	r2, #10
 800ad04:	4620      	mov	r0, r4
 800ad06:	f000 fb1b 	bl	800b340 <__multadd>
 800ad0a:	9b01      	ldr	r3, [sp, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	4607      	mov	r7, r0
 800ad10:	f300 8096 	bgt.w	800ae40 <_dtoa_r+0x9a8>
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	dc59      	bgt.n	800adce <_dtoa_r+0x936>
 800ad1a:	e091      	b.n	800ae40 <_dtoa_r+0x9a8>
 800ad1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad22:	e758      	b.n	800abd6 <_dtoa_r+0x73e>
 800ad24:	9b04      	ldr	r3, [sp, #16]
 800ad26:	1e5e      	subs	r6, r3, #1
 800ad28:	9b08      	ldr	r3, [sp, #32]
 800ad2a:	42b3      	cmp	r3, r6
 800ad2c:	bfbf      	itttt	lt
 800ad2e:	9b08      	ldrlt	r3, [sp, #32]
 800ad30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ad32:	9608      	strlt	r6, [sp, #32]
 800ad34:	1af3      	sublt	r3, r6, r3
 800ad36:	bfb4      	ite	lt
 800ad38:	18d2      	addlt	r2, r2, r3
 800ad3a:	1b9e      	subge	r6, r3, r6
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	bfbc      	itt	lt
 800ad40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ad42:	2600      	movlt	r6, #0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfb7      	itett	lt
 800ad48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ad4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ad50:	1a9d      	sublt	r5, r3, r2
 800ad52:	2300      	movlt	r3, #0
 800ad54:	e741      	b.n	800abda <_dtoa_r+0x742>
 800ad56:	9e08      	ldr	r6, [sp, #32]
 800ad58:	9d05      	ldr	r5, [sp, #20]
 800ad5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad5c:	e748      	b.n	800abf0 <_dtoa_r+0x758>
 800ad5e:	9a08      	ldr	r2, [sp, #32]
 800ad60:	e770      	b.n	800ac44 <_dtoa_r+0x7ac>
 800ad62:	9b07      	ldr	r3, [sp, #28]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	dc19      	bgt.n	800ad9c <_dtoa_r+0x904>
 800ad68:	9b02      	ldr	r3, [sp, #8]
 800ad6a:	b9bb      	cbnz	r3, 800ad9c <_dtoa_r+0x904>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad72:	b99b      	cbnz	r3, 800ad9c <_dtoa_r+0x904>
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad7a:	0d1b      	lsrs	r3, r3, #20
 800ad7c:	051b      	lsls	r3, r3, #20
 800ad7e:	b183      	cbz	r3, 800ada2 <_dtoa_r+0x90a>
 800ad80:	9b05      	ldr	r3, [sp, #20]
 800ad82:	3301      	adds	r3, #1
 800ad84:	9305      	str	r3, [sp, #20]
 800ad86:	9b06      	ldr	r3, [sp, #24]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	9306      	str	r3, [sp, #24]
 800ad8c:	f04f 0801 	mov.w	r8, #1
 800ad90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f47f af6f 	bne.w	800ac76 <_dtoa_r+0x7de>
 800ad98:	2001      	movs	r0, #1
 800ad9a:	e774      	b.n	800ac86 <_dtoa_r+0x7ee>
 800ad9c:	f04f 0800 	mov.w	r8, #0
 800ada0:	e7f6      	b.n	800ad90 <_dtoa_r+0x8f8>
 800ada2:	4698      	mov	r8, r3
 800ada4:	e7f4      	b.n	800ad90 <_dtoa_r+0x8f8>
 800ada6:	d082      	beq.n	800acae <_dtoa_r+0x816>
 800ada8:	9a05      	ldr	r2, [sp, #20]
 800adaa:	331c      	adds	r3, #28
 800adac:	441a      	add	r2, r3
 800adae:	9205      	str	r2, [sp, #20]
 800adb0:	9a06      	ldr	r2, [sp, #24]
 800adb2:	441a      	add	r2, r3
 800adb4:	441d      	add	r5, r3
 800adb6:	9206      	str	r2, [sp, #24]
 800adb8:	e779      	b.n	800acae <_dtoa_r+0x816>
 800adba:	4603      	mov	r3, r0
 800adbc:	e7f4      	b.n	800ada8 <_dtoa_r+0x910>
 800adbe:	9b04      	ldr	r3, [sp, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dc37      	bgt.n	800ae34 <_dtoa_r+0x99c>
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	dd34      	ble.n	800ae34 <_dtoa_r+0x99c>
 800adca:	9b04      	ldr	r3, [sp, #16]
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	b963      	cbnz	r3, 800adec <_dtoa_r+0x954>
 800add2:	4631      	mov	r1, r6
 800add4:	2205      	movs	r2, #5
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fab2 	bl	800b340 <__multadd>
 800addc:	4601      	mov	r1, r0
 800adde:	4606      	mov	r6, r0
 800ade0:	4650      	mov	r0, sl
 800ade2:	f000 fcc7 	bl	800b774 <__mcmp>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f73f adbb 	bgt.w	800a962 <_dtoa_r+0x4ca>
 800adec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adee:	9d00      	ldr	r5, [sp, #0]
 800adf0:	ea6f 0b03 	mvn.w	fp, r3
 800adf4:	f04f 0800 	mov.w	r8, #0
 800adf8:	4631      	mov	r1, r6
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 fa7e 	bl	800b2fc <_Bfree>
 800ae00:	2f00      	cmp	r7, #0
 800ae02:	f43f aeab 	beq.w	800ab5c <_dtoa_r+0x6c4>
 800ae06:	f1b8 0f00 	cmp.w	r8, #0
 800ae0a:	d005      	beq.n	800ae18 <_dtoa_r+0x980>
 800ae0c:	45b8      	cmp	r8, r7
 800ae0e:	d003      	beq.n	800ae18 <_dtoa_r+0x980>
 800ae10:	4641      	mov	r1, r8
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 fa72 	bl	800b2fc <_Bfree>
 800ae18:	4639      	mov	r1, r7
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fa6e 	bl	800b2fc <_Bfree>
 800ae20:	e69c      	b.n	800ab5c <_dtoa_r+0x6c4>
 800ae22:	2600      	movs	r6, #0
 800ae24:	4637      	mov	r7, r6
 800ae26:	e7e1      	b.n	800adec <_dtoa_r+0x954>
 800ae28:	46bb      	mov	fp, r7
 800ae2a:	4637      	mov	r7, r6
 800ae2c:	e599      	b.n	800a962 <_dtoa_r+0x4ca>
 800ae2e:	bf00      	nop
 800ae30:	40240000 	.word	0x40240000
 800ae34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 80c8 	beq.w	800afcc <_dtoa_r+0xb34>
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	2d00      	cmp	r5, #0
 800ae42:	dd05      	ble.n	800ae50 <_dtoa_r+0x9b8>
 800ae44:	4639      	mov	r1, r7
 800ae46:	462a      	mov	r2, r5
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 fc27 	bl	800b69c <__lshift>
 800ae4e:	4607      	mov	r7, r0
 800ae50:	f1b8 0f00 	cmp.w	r8, #0
 800ae54:	d05b      	beq.n	800af0e <_dtoa_r+0xa76>
 800ae56:	6879      	ldr	r1, [r7, #4]
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f000 fa0f 	bl	800b27c <_Balloc>
 800ae5e:	4605      	mov	r5, r0
 800ae60:	b928      	cbnz	r0, 800ae6e <_dtoa_r+0x9d6>
 800ae62:	4b83      	ldr	r3, [pc, #524]	; (800b070 <_dtoa_r+0xbd8>)
 800ae64:	4602      	mov	r2, r0
 800ae66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ae6a:	f7ff bb2e 	b.w	800a4ca <_dtoa_r+0x32>
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	3202      	adds	r2, #2
 800ae72:	0092      	lsls	r2, r2, #2
 800ae74:	f107 010c 	add.w	r1, r7, #12
 800ae78:	300c      	adds	r0, #12
 800ae7a:	f001 f847 	bl	800bf0c <memcpy>
 800ae7e:	2201      	movs	r2, #1
 800ae80:	4629      	mov	r1, r5
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 fc0a 	bl	800b69c <__lshift>
 800ae88:	9b00      	ldr	r3, [sp, #0]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae92:	4413      	add	r3, r2
 800ae94:	9308      	str	r3, [sp, #32]
 800ae96:	9b02      	ldr	r3, [sp, #8]
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	46b8      	mov	r8, r7
 800ae9e:	9306      	str	r3, [sp, #24]
 800aea0:	4607      	mov	r7, r0
 800aea2:	9b04      	ldr	r3, [sp, #16]
 800aea4:	4631      	mov	r1, r6
 800aea6:	3b01      	subs	r3, #1
 800aea8:	4650      	mov	r0, sl
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	f7ff fa6b 	bl	800a386 <quorem>
 800aeb0:	4641      	mov	r1, r8
 800aeb2:	9002      	str	r0, [sp, #8]
 800aeb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aeb8:	4650      	mov	r0, sl
 800aeba:	f000 fc5b 	bl	800b774 <__mcmp>
 800aebe:	463a      	mov	r2, r7
 800aec0:	9005      	str	r0, [sp, #20]
 800aec2:	4631      	mov	r1, r6
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fc71 	bl	800b7ac <__mdiff>
 800aeca:	68c2      	ldr	r2, [r0, #12]
 800aecc:	4605      	mov	r5, r0
 800aece:	bb02      	cbnz	r2, 800af12 <_dtoa_r+0xa7a>
 800aed0:	4601      	mov	r1, r0
 800aed2:	4650      	mov	r0, sl
 800aed4:	f000 fc4e 	bl	800b774 <__mcmp>
 800aed8:	4602      	mov	r2, r0
 800aeda:	4629      	mov	r1, r5
 800aedc:	4620      	mov	r0, r4
 800aede:	9209      	str	r2, [sp, #36]	; 0x24
 800aee0:	f000 fa0c 	bl	800b2fc <_Bfree>
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee8:	9d04      	ldr	r5, [sp, #16]
 800aeea:	ea43 0102 	orr.w	r1, r3, r2
 800aeee:	9b06      	ldr	r3, [sp, #24]
 800aef0:	4319      	orrs	r1, r3
 800aef2:	d110      	bne.n	800af16 <_dtoa_r+0xa7e>
 800aef4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aef8:	d029      	beq.n	800af4e <_dtoa_r+0xab6>
 800aefa:	9b05      	ldr	r3, [sp, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dd02      	ble.n	800af06 <_dtoa_r+0xa6e>
 800af00:	9b02      	ldr	r3, [sp, #8]
 800af02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	f883 9000 	strb.w	r9, [r3]
 800af0c:	e774      	b.n	800adf8 <_dtoa_r+0x960>
 800af0e:	4638      	mov	r0, r7
 800af10:	e7ba      	b.n	800ae88 <_dtoa_r+0x9f0>
 800af12:	2201      	movs	r2, #1
 800af14:	e7e1      	b.n	800aeda <_dtoa_r+0xa42>
 800af16:	9b05      	ldr	r3, [sp, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	db04      	blt.n	800af26 <_dtoa_r+0xa8e>
 800af1c:	9907      	ldr	r1, [sp, #28]
 800af1e:	430b      	orrs	r3, r1
 800af20:	9906      	ldr	r1, [sp, #24]
 800af22:	430b      	orrs	r3, r1
 800af24:	d120      	bne.n	800af68 <_dtoa_r+0xad0>
 800af26:	2a00      	cmp	r2, #0
 800af28:	dded      	ble.n	800af06 <_dtoa_r+0xa6e>
 800af2a:	4651      	mov	r1, sl
 800af2c:	2201      	movs	r2, #1
 800af2e:	4620      	mov	r0, r4
 800af30:	f000 fbb4 	bl	800b69c <__lshift>
 800af34:	4631      	mov	r1, r6
 800af36:	4682      	mov	sl, r0
 800af38:	f000 fc1c 	bl	800b774 <__mcmp>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	dc03      	bgt.n	800af48 <_dtoa_r+0xab0>
 800af40:	d1e1      	bne.n	800af06 <_dtoa_r+0xa6e>
 800af42:	f019 0f01 	tst.w	r9, #1
 800af46:	d0de      	beq.n	800af06 <_dtoa_r+0xa6e>
 800af48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af4c:	d1d8      	bne.n	800af00 <_dtoa_r+0xa68>
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	2339      	movs	r3, #57	; 0x39
 800af52:	7013      	strb	r3, [r2, #0]
 800af54:	462b      	mov	r3, r5
 800af56:	461d      	mov	r5, r3
 800af58:	3b01      	subs	r3, #1
 800af5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af5e:	2a39      	cmp	r2, #57	; 0x39
 800af60:	d06c      	beq.n	800b03c <_dtoa_r+0xba4>
 800af62:	3201      	adds	r2, #1
 800af64:	701a      	strb	r2, [r3, #0]
 800af66:	e747      	b.n	800adf8 <_dtoa_r+0x960>
 800af68:	2a00      	cmp	r2, #0
 800af6a:	dd07      	ble.n	800af7c <_dtoa_r+0xae4>
 800af6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af70:	d0ed      	beq.n	800af4e <_dtoa_r+0xab6>
 800af72:	9a01      	ldr	r2, [sp, #4]
 800af74:	f109 0301 	add.w	r3, r9, #1
 800af78:	7013      	strb	r3, [r2, #0]
 800af7a:	e73d      	b.n	800adf8 <_dtoa_r+0x960>
 800af7c:	9b04      	ldr	r3, [sp, #16]
 800af7e:	9a08      	ldr	r2, [sp, #32]
 800af80:	f803 9c01 	strb.w	r9, [r3, #-1]
 800af84:	4293      	cmp	r3, r2
 800af86:	d043      	beq.n	800b010 <_dtoa_r+0xb78>
 800af88:	4651      	mov	r1, sl
 800af8a:	2300      	movs	r3, #0
 800af8c:	220a      	movs	r2, #10
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 f9d6 	bl	800b340 <__multadd>
 800af94:	45b8      	cmp	r8, r7
 800af96:	4682      	mov	sl, r0
 800af98:	f04f 0300 	mov.w	r3, #0
 800af9c:	f04f 020a 	mov.w	r2, #10
 800afa0:	4641      	mov	r1, r8
 800afa2:	4620      	mov	r0, r4
 800afa4:	d107      	bne.n	800afb6 <_dtoa_r+0xb1e>
 800afa6:	f000 f9cb 	bl	800b340 <__multadd>
 800afaa:	4680      	mov	r8, r0
 800afac:	4607      	mov	r7, r0
 800afae:	9b04      	ldr	r3, [sp, #16]
 800afb0:	3301      	adds	r3, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	e775      	b.n	800aea2 <_dtoa_r+0xa0a>
 800afb6:	f000 f9c3 	bl	800b340 <__multadd>
 800afba:	4639      	mov	r1, r7
 800afbc:	4680      	mov	r8, r0
 800afbe:	2300      	movs	r3, #0
 800afc0:	220a      	movs	r2, #10
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f9bc 	bl	800b340 <__multadd>
 800afc8:	4607      	mov	r7, r0
 800afca:	e7f0      	b.n	800afae <_dtoa_r+0xb16>
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	9d00      	ldr	r5, [sp, #0]
 800afd2:	4631      	mov	r1, r6
 800afd4:	4650      	mov	r0, sl
 800afd6:	f7ff f9d6 	bl	800a386 <quorem>
 800afda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	f805 9b01 	strb.w	r9, [r5], #1
 800afe4:	1aea      	subs	r2, r5, r3
 800afe6:	9b01      	ldr	r3, [sp, #4]
 800afe8:	4293      	cmp	r3, r2
 800afea:	dd07      	ble.n	800affc <_dtoa_r+0xb64>
 800afec:	4651      	mov	r1, sl
 800afee:	2300      	movs	r3, #0
 800aff0:	220a      	movs	r2, #10
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 f9a4 	bl	800b340 <__multadd>
 800aff8:	4682      	mov	sl, r0
 800affa:	e7ea      	b.n	800afd2 <_dtoa_r+0xb3a>
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfc8      	it	gt
 800b002:	461d      	movgt	r5, r3
 800b004:	9b00      	ldr	r3, [sp, #0]
 800b006:	bfd8      	it	le
 800b008:	2501      	movle	r5, #1
 800b00a:	441d      	add	r5, r3
 800b00c:	f04f 0800 	mov.w	r8, #0
 800b010:	4651      	mov	r1, sl
 800b012:	2201      	movs	r2, #1
 800b014:	4620      	mov	r0, r4
 800b016:	f000 fb41 	bl	800b69c <__lshift>
 800b01a:	4631      	mov	r1, r6
 800b01c:	4682      	mov	sl, r0
 800b01e:	f000 fba9 	bl	800b774 <__mcmp>
 800b022:	2800      	cmp	r0, #0
 800b024:	dc96      	bgt.n	800af54 <_dtoa_r+0xabc>
 800b026:	d102      	bne.n	800b02e <_dtoa_r+0xb96>
 800b028:	f019 0f01 	tst.w	r9, #1
 800b02c:	d192      	bne.n	800af54 <_dtoa_r+0xabc>
 800b02e:	462b      	mov	r3, r5
 800b030:	461d      	mov	r5, r3
 800b032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b036:	2a30      	cmp	r2, #48	; 0x30
 800b038:	d0fa      	beq.n	800b030 <_dtoa_r+0xb98>
 800b03a:	e6dd      	b.n	800adf8 <_dtoa_r+0x960>
 800b03c:	9a00      	ldr	r2, [sp, #0]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d189      	bne.n	800af56 <_dtoa_r+0xabe>
 800b042:	f10b 0b01 	add.w	fp, fp, #1
 800b046:	2331      	movs	r3, #49	; 0x31
 800b048:	e796      	b.n	800af78 <_dtoa_r+0xae0>
 800b04a:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <_dtoa_r+0xbdc>)
 800b04c:	f7ff ba99 	b.w	800a582 <_dtoa_r+0xea>
 800b050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b052:	2b00      	cmp	r3, #0
 800b054:	f47f aa6d 	bne.w	800a532 <_dtoa_r+0x9a>
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <_dtoa_r+0xbe0>)
 800b05a:	f7ff ba92 	b.w	800a582 <_dtoa_r+0xea>
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	dcb5      	bgt.n	800afd0 <_dtoa_r+0xb38>
 800b064:	9b07      	ldr	r3, [sp, #28]
 800b066:	2b02      	cmp	r3, #2
 800b068:	f73f aeb1 	bgt.w	800adce <_dtoa_r+0x936>
 800b06c:	e7b0      	b.n	800afd0 <_dtoa_r+0xb38>
 800b06e:	bf00      	nop
 800b070:	0800c30c 	.word	0x0800c30c
 800b074:	0800c26c 	.word	0x0800c26c
 800b078:	0800c290 	.word	0x0800c290

0800b07c <_free_r>:
 800b07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b07e:	2900      	cmp	r1, #0
 800b080:	d044      	beq.n	800b10c <_free_r+0x90>
 800b082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b086:	9001      	str	r0, [sp, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f1a1 0404 	sub.w	r4, r1, #4
 800b08e:	bfb8      	it	lt
 800b090:	18e4      	addlt	r4, r4, r3
 800b092:	f000 f8e7 	bl	800b264 <__malloc_lock>
 800b096:	4a1e      	ldr	r2, [pc, #120]	; (800b110 <_free_r+0x94>)
 800b098:	9801      	ldr	r0, [sp, #4]
 800b09a:	6813      	ldr	r3, [r2, #0]
 800b09c:	b933      	cbnz	r3, 800b0ac <_free_r+0x30>
 800b09e:	6063      	str	r3, [r4, #4]
 800b0a0:	6014      	str	r4, [r2, #0]
 800b0a2:	b003      	add	sp, #12
 800b0a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0a8:	f000 b8e2 	b.w	800b270 <__malloc_unlock>
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	d908      	bls.n	800b0c2 <_free_r+0x46>
 800b0b0:	6825      	ldr	r5, [r4, #0]
 800b0b2:	1961      	adds	r1, r4, r5
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	bf01      	itttt	eq
 800b0b8:	6819      	ldreq	r1, [r3, #0]
 800b0ba:	685b      	ldreq	r3, [r3, #4]
 800b0bc:	1949      	addeq	r1, r1, r5
 800b0be:	6021      	streq	r1, [r4, #0]
 800b0c0:	e7ed      	b.n	800b09e <_free_r+0x22>
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	b10b      	cbz	r3, 800b0cc <_free_r+0x50>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d9fa      	bls.n	800b0c2 <_free_r+0x46>
 800b0cc:	6811      	ldr	r1, [r2, #0]
 800b0ce:	1855      	adds	r5, r2, r1
 800b0d0:	42a5      	cmp	r5, r4
 800b0d2:	d10b      	bne.n	800b0ec <_free_r+0x70>
 800b0d4:	6824      	ldr	r4, [r4, #0]
 800b0d6:	4421      	add	r1, r4
 800b0d8:	1854      	adds	r4, r2, r1
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	6011      	str	r1, [r2, #0]
 800b0de:	d1e0      	bne.n	800b0a2 <_free_r+0x26>
 800b0e0:	681c      	ldr	r4, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	6053      	str	r3, [r2, #4]
 800b0e6:	440c      	add	r4, r1
 800b0e8:	6014      	str	r4, [r2, #0]
 800b0ea:	e7da      	b.n	800b0a2 <_free_r+0x26>
 800b0ec:	d902      	bls.n	800b0f4 <_free_r+0x78>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	e7d6      	b.n	800b0a2 <_free_r+0x26>
 800b0f4:	6825      	ldr	r5, [r4, #0]
 800b0f6:	1961      	adds	r1, r4, r5
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	bf04      	itt	eq
 800b0fc:	6819      	ldreq	r1, [r3, #0]
 800b0fe:	685b      	ldreq	r3, [r3, #4]
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	bf04      	itt	eq
 800b104:	1949      	addeq	r1, r1, r5
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	6054      	str	r4, [r2, #4]
 800b10a:	e7ca      	b.n	800b0a2 <_free_r+0x26>
 800b10c:	b003      	add	sp, #12
 800b10e:	bd30      	pop	{r4, r5, pc}
 800b110:	20000a24 	.word	0x20000a24

0800b114 <malloc>:
 800b114:	4b02      	ldr	r3, [pc, #8]	; (800b120 <malloc+0xc>)
 800b116:	4601      	mov	r1, r0
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	f000 b823 	b.w	800b164 <_malloc_r>
 800b11e:	bf00      	nop
 800b120:	20000064 	.word	0x20000064

0800b124 <sbrk_aligned>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	4e0e      	ldr	r6, [pc, #56]	; (800b160 <sbrk_aligned+0x3c>)
 800b128:	460c      	mov	r4, r1
 800b12a:	6831      	ldr	r1, [r6, #0]
 800b12c:	4605      	mov	r5, r0
 800b12e:	b911      	cbnz	r1, 800b136 <sbrk_aligned+0x12>
 800b130:	f000 fedc 	bl	800beec <_sbrk_r>
 800b134:	6030      	str	r0, [r6, #0]
 800b136:	4621      	mov	r1, r4
 800b138:	4628      	mov	r0, r5
 800b13a:	f000 fed7 	bl	800beec <_sbrk_r>
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	d00a      	beq.n	800b158 <sbrk_aligned+0x34>
 800b142:	1cc4      	adds	r4, r0, #3
 800b144:	f024 0403 	bic.w	r4, r4, #3
 800b148:	42a0      	cmp	r0, r4
 800b14a:	d007      	beq.n	800b15c <sbrk_aligned+0x38>
 800b14c:	1a21      	subs	r1, r4, r0
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 fecc 	bl	800beec <_sbrk_r>
 800b154:	3001      	adds	r0, #1
 800b156:	d101      	bne.n	800b15c <sbrk_aligned+0x38>
 800b158:	f04f 34ff 	mov.w	r4, #4294967295
 800b15c:	4620      	mov	r0, r4
 800b15e:	bd70      	pop	{r4, r5, r6, pc}
 800b160:	20000a28 	.word	0x20000a28

0800b164 <_malloc_r>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	1ccd      	adds	r5, r1, #3
 800b16a:	f025 0503 	bic.w	r5, r5, #3
 800b16e:	3508      	adds	r5, #8
 800b170:	2d0c      	cmp	r5, #12
 800b172:	bf38      	it	cc
 800b174:	250c      	movcc	r5, #12
 800b176:	2d00      	cmp	r5, #0
 800b178:	4607      	mov	r7, r0
 800b17a:	db01      	blt.n	800b180 <_malloc_r+0x1c>
 800b17c:	42a9      	cmp	r1, r5
 800b17e:	d905      	bls.n	800b18c <_malloc_r+0x28>
 800b180:	230c      	movs	r3, #12
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	2600      	movs	r6, #0
 800b186:	4630      	mov	r0, r6
 800b188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b18c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b260 <_malloc_r+0xfc>
 800b190:	f000 f868 	bl	800b264 <__malloc_lock>
 800b194:	f8d8 3000 	ldr.w	r3, [r8]
 800b198:	461c      	mov	r4, r3
 800b19a:	bb5c      	cbnz	r4, 800b1f4 <_malloc_r+0x90>
 800b19c:	4629      	mov	r1, r5
 800b19e:	4638      	mov	r0, r7
 800b1a0:	f7ff ffc0 	bl	800b124 <sbrk_aligned>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	d155      	bne.n	800b256 <_malloc_r+0xf2>
 800b1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800b1ae:	4626      	mov	r6, r4
 800b1b0:	2e00      	cmp	r6, #0
 800b1b2:	d145      	bne.n	800b240 <_malloc_r+0xdc>
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	d048      	beq.n	800b24a <_malloc_r+0xe6>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4638      	mov	r0, r7
 800b1be:	eb04 0903 	add.w	r9, r4, r3
 800b1c2:	f000 fe93 	bl	800beec <_sbrk_r>
 800b1c6:	4581      	cmp	r9, r0
 800b1c8:	d13f      	bne.n	800b24a <_malloc_r+0xe6>
 800b1ca:	6821      	ldr	r1, [r4, #0]
 800b1cc:	1a6d      	subs	r5, r5, r1
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	f7ff ffa7 	bl	800b124 <sbrk_aligned>
 800b1d6:	3001      	adds	r0, #1
 800b1d8:	d037      	beq.n	800b24a <_malloc_r+0xe6>
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	442b      	add	r3, r5
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d038      	beq.n	800b25a <_malloc_r+0xf6>
 800b1e8:	685a      	ldr	r2, [r3, #4]
 800b1ea:	42a2      	cmp	r2, r4
 800b1ec:	d12b      	bne.n	800b246 <_malloc_r+0xe2>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	605a      	str	r2, [r3, #4]
 800b1f2:	e00f      	b.n	800b214 <_malloc_r+0xb0>
 800b1f4:	6822      	ldr	r2, [r4, #0]
 800b1f6:	1b52      	subs	r2, r2, r5
 800b1f8:	d41f      	bmi.n	800b23a <_malloc_r+0xd6>
 800b1fa:	2a0b      	cmp	r2, #11
 800b1fc:	d917      	bls.n	800b22e <_malloc_r+0xca>
 800b1fe:	1961      	adds	r1, r4, r5
 800b200:	42a3      	cmp	r3, r4
 800b202:	6025      	str	r5, [r4, #0]
 800b204:	bf18      	it	ne
 800b206:	6059      	strne	r1, [r3, #4]
 800b208:	6863      	ldr	r3, [r4, #4]
 800b20a:	bf08      	it	eq
 800b20c:	f8c8 1000 	streq.w	r1, [r8]
 800b210:	5162      	str	r2, [r4, r5]
 800b212:	604b      	str	r3, [r1, #4]
 800b214:	4638      	mov	r0, r7
 800b216:	f104 060b 	add.w	r6, r4, #11
 800b21a:	f000 f829 	bl	800b270 <__malloc_unlock>
 800b21e:	f026 0607 	bic.w	r6, r6, #7
 800b222:	1d23      	adds	r3, r4, #4
 800b224:	1af2      	subs	r2, r6, r3
 800b226:	d0ae      	beq.n	800b186 <_malloc_r+0x22>
 800b228:	1b9b      	subs	r3, r3, r6
 800b22a:	50a3      	str	r3, [r4, r2]
 800b22c:	e7ab      	b.n	800b186 <_malloc_r+0x22>
 800b22e:	42a3      	cmp	r3, r4
 800b230:	6862      	ldr	r2, [r4, #4]
 800b232:	d1dd      	bne.n	800b1f0 <_malloc_r+0x8c>
 800b234:	f8c8 2000 	str.w	r2, [r8]
 800b238:	e7ec      	b.n	800b214 <_malloc_r+0xb0>
 800b23a:	4623      	mov	r3, r4
 800b23c:	6864      	ldr	r4, [r4, #4]
 800b23e:	e7ac      	b.n	800b19a <_malloc_r+0x36>
 800b240:	4634      	mov	r4, r6
 800b242:	6876      	ldr	r6, [r6, #4]
 800b244:	e7b4      	b.n	800b1b0 <_malloc_r+0x4c>
 800b246:	4613      	mov	r3, r2
 800b248:	e7cc      	b.n	800b1e4 <_malloc_r+0x80>
 800b24a:	230c      	movs	r3, #12
 800b24c:	603b      	str	r3, [r7, #0]
 800b24e:	4638      	mov	r0, r7
 800b250:	f000 f80e 	bl	800b270 <__malloc_unlock>
 800b254:	e797      	b.n	800b186 <_malloc_r+0x22>
 800b256:	6025      	str	r5, [r4, #0]
 800b258:	e7dc      	b.n	800b214 <_malloc_r+0xb0>
 800b25a:	605b      	str	r3, [r3, #4]
 800b25c:	deff      	udf	#255	; 0xff
 800b25e:	bf00      	nop
 800b260:	20000a24 	.word	0x20000a24

0800b264 <__malloc_lock>:
 800b264:	4801      	ldr	r0, [pc, #4]	; (800b26c <__malloc_lock+0x8>)
 800b266:	f7ff b88c 	b.w	800a382 <__retarget_lock_acquire_recursive>
 800b26a:	bf00      	nop
 800b26c:	20000a20 	.word	0x20000a20

0800b270 <__malloc_unlock>:
 800b270:	4801      	ldr	r0, [pc, #4]	; (800b278 <__malloc_unlock+0x8>)
 800b272:	f7ff b887 	b.w	800a384 <__retarget_lock_release_recursive>
 800b276:	bf00      	nop
 800b278:	20000a20 	.word	0x20000a20

0800b27c <_Balloc>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	69c6      	ldr	r6, [r0, #28]
 800b280:	4604      	mov	r4, r0
 800b282:	460d      	mov	r5, r1
 800b284:	b976      	cbnz	r6, 800b2a4 <_Balloc+0x28>
 800b286:	2010      	movs	r0, #16
 800b288:	f7ff ff44 	bl	800b114 <malloc>
 800b28c:	4602      	mov	r2, r0
 800b28e:	61e0      	str	r0, [r4, #28]
 800b290:	b920      	cbnz	r0, 800b29c <_Balloc+0x20>
 800b292:	4b18      	ldr	r3, [pc, #96]	; (800b2f4 <_Balloc+0x78>)
 800b294:	4818      	ldr	r0, [pc, #96]	; (800b2f8 <_Balloc+0x7c>)
 800b296:	216b      	movs	r1, #107	; 0x6b
 800b298:	f000 fe46 	bl	800bf28 <__assert_func>
 800b29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2a0:	6006      	str	r6, [r0, #0]
 800b2a2:	60c6      	str	r6, [r0, #12]
 800b2a4:	69e6      	ldr	r6, [r4, #28]
 800b2a6:	68f3      	ldr	r3, [r6, #12]
 800b2a8:	b183      	cbz	r3, 800b2cc <_Balloc+0x50>
 800b2aa:	69e3      	ldr	r3, [r4, #28]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2b2:	b9b8      	cbnz	r0, 800b2e4 <_Balloc+0x68>
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b2ba:	1d72      	adds	r2, r6, #5
 800b2bc:	0092      	lsls	r2, r2, #2
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 fe50 	bl	800bf64 <_calloc_r>
 800b2c4:	b160      	cbz	r0, 800b2e0 <_Balloc+0x64>
 800b2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ca:	e00e      	b.n	800b2ea <_Balloc+0x6e>
 800b2cc:	2221      	movs	r2, #33	; 0x21
 800b2ce:	2104      	movs	r1, #4
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fe47 	bl	800bf64 <_calloc_r>
 800b2d6:	69e3      	ldr	r3, [r4, #28]
 800b2d8:	60f0      	str	r0, [r6, #12]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e4      	bne.n	800b2aa <_Balloc+0x2e>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	6802      	ldr	r2, [r0, #0]
 800b2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2f0:	e7f7      	b.n	800b2e2 <_Balloc+0x66>
 800b2f2:	bf00      	nop
 800b2f4:	0800c29d 	.word	0x0800c29d
 800b2f8:	0800c31d 	.word	0x0800c31d

0800b2fc <_Bfree>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	69c6      	ldr	r6, [r0, #28]
 800b300:	4605      	mov	r5, r0
 800b302:	460c      	mov	r4, r1
 800b304:	b976      	cbnz	r6, 800b324 <_Bfree+0x28>
 800b306:	2010      	movs	r0, #16
 800b308:	f7ff ff04 	bl	800b114 <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	61e8      	str	r0, [r5, #28]
 800b310:	b920      	cbnz	r0, 800b31c <_Bfree+0x20>
 800b312:	4b09      	ldr	r3, [pc, #36]	; (800b338 <_Bfree+0x3c>)
 800b314:	4809      	ldr	r0, [pc, #36]	; (800b33c <_Bfree+0x40>)
 800b316:	218f      	movs	r1, #143	; 0x8f
 800b318:	f000 fe06 	bl	800bf28 <__assert_func>
 800b31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b320:	6006      	str	r6, [r0, #0]
 800b322:	60c6      	str	r6, [r0, #12]
 800b324:	b13c      	cbz	r4, 800b336 <_Bfree+0x3a>
 800b326:	69eb      	ldr	r3, [r5, #28]
 800b328:	6862      	ldr	r2, [r4, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b330:	6021      	str	r1, [r4, #0]
 800b332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	0800c29d 	.word	0x0800c29d
 800b33c:	0800c31d 	.word	0x0800c31d

0800b340 <__multadd>:
 800b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	690d      	ldr	r5, [r1, #16]
 800b346:	4607      	mov	r7, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	461e      	mov	r6, r3
 800b34c:	f101 0c14 	add.w	ip, r1, #20
 800b350:	2000      	movs	r0, #0
 800b352:	f8dc 3000 	ldr.w	r3, [ip]
 800b356:	b299      	uxth	r1, r3
 800b358:	fb02 6101 	mla	r1, r2, r1, r6
 800b35c:	0c1e      	lsrs	r6, r3, #16
 800b35e:	0c0b      	lsrs	r3, r1, #16
 800b360:	fb02 3306 	mla	r3, r2, r6, r3
 800b364:	b289      	uxth	r1, r1
 800b366:	3001      	adds	r0, #1
 800b368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b36c:	4285      	cmp	r5, r0
 800b36e:	f84c 1b04 	str.w	r1, [ip], #4
 800b372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b376:	dcec      	bgt.n	800b352 <__multadd+0x12>
 800b378:	b30e      	cbz	r6, 800b3be <__multadd+0x7e>
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	42ab      	cmp	r3, r5
 800b37e:	dc19      	bgt.n	800b3b4 <__multadd+0x74>
 800b380:	6861      	ldr	r1, [r4, #4]
 800b382:	4638      	mov	r0, r7
 800b384:	3101      	adds	r1, #1
 800b386:	f7ff ff79 	bl	800b27c <_Balloc>
 800b38a:	4680      	mov	r8, r0
 800b38c:	b928      	cbnz	r0, 800b39a <__multadd+0x5a>
 800b38e:	4602      	mov	r2, r0
 800b390:	4b0c      	ldr	r3, [pc, #48]	; (800b3c4 <__multadd+0x84>)
 800b392:	480d      	ldr	r0, [pc, #52]	; (800b3c8 <__multadd+0x88>)
 800b394:	21ba      	movs	r1, #186	; 0xba
 800b396:	f000 fdc7 	bl	800bf28 <__assert_func>
 800b39a:	6922      	ldr	r2, [r4, #16]
 800b39c:	3202      	adds	r2, #2
 800b39e:	f104 010c 	add.w	r1, r4, #12
 800b3a2:	0092      	lsls	r2, r2, #2
 800b3a4:	300c      	adds	r0, #12
 800b3a6:	f000 fdb1 	bl	800bf0c <memcpy>
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff ffa5 	bl	800b2fc <_Bfree>
 800b3b2:	4644      	mov	r4, r8
 800b3b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	615e      	str	r6, [r3, #20]
 800b3bc:	6125      	str	r5, [r4, #16]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c4:	0800c30c 	.word	0x0800c30c
 800b3c8:	0800c31d 	.word	0x0800c31d

0800b3cc <__hi0bits>:
 800b3cc:	0c03      	lsrs	r3, r0, #16
 800b3ce:	041b      	lsls	r3, r3, #16
 800b3d0:	b9d3      	cbnz	r3, 800b408 <__hi0bits+0x3c>
 800b3d2:	0400      	lsls	r0, r0, #16
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3da:	bf04      	itt	eq
 800b3dc:	0200      	lsleq	r0, r0, #8
 800b3de:	3308      	addeq	r3, #8
 800b3e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3e4:	bf04      	itt	eq
 800b3e6:	0100      	lsleq	r0, r0, #4
 800b3e8:	3304      	addeq	r3, #4
 800b3ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3ee:	bf04      	itt	eq
 800b3f0:	0080      	lsleq	r0, r0, #2
 800b3f2:	3302      	addeq	r3, #2
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	db05      	blt.n	800b404 <__hi0bits+0x38>
 800b3f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3fc:	f103 0301 	add.w	r3, r3, #1
 800b400:	bf08      	it	eq
 800b402:	2320      	moveq	r3, #32
 800b404:	4618      	mov	r0, r3
 800b406:	4770      	bx	lr
 800b408:	2300      	movs	r3, #0
 800b40a:	e7e4      	b.n	800b3d6 <__hi0bits+0xa>

0800b40c <__lo0bits>:
 800b40c:	6803      	ldr	r3, [r0, #0]
 800b40e:	f013 0207 	ands.w	r2, r3, #7
 800b412:	d00c      	beq.n	800b42e <__lo0bits+0x22>
 800b414:	07d9      	lsls	r1, r3, #31
 800b416:	d422      	bmi.n	800b45e <__lo0bits+0x52>
 800b418:	079a      	lsls	r2, r3, #30
 800b41a:	bf49      	itett	mi
 800b41c:	085b      	lsrmi	r3, r3, #1
 800b41e:	089b      	lsrpl	r3, r3, #2
 800b420:	6003      	strmi	r3, [r0, #0]
 800b422:	2201      	movmi	r2, #1
 800b424:	bf5c      	itt	pl
 800b426:	6003      	strpl	r3, [r0, #0]
 800b428:	2202      	movpl	r2, #2
 800b42a:	4610      	mov	r0, r2
 800b42c:	4770      	bx	lr
 800b42e:	b299      	uxth	r1, r3
 800b430:	b909      	cbnz	r1, 800b436 <__lo0bits+0x2a>
 800b432:	0c1b      	lsrs	r3, r3, #16
 800b434:	2210      	movs	r2, #16
 800b436:	b2d9      	uxtb	r1, r3
 800b438:	b909      	cbnz	r1, 800b43e <__lo0bits+0x32>
 800b43a:	3208      	adds	r2, #8
 800b43c:	0a1b      	lsrs	r3, r3, #8
 800b43e:	0719      	lsls	r1, r3, #28
 800b440:	bf04      	itt	eq
 800b442:	091b      	lsreq	r3, r3, #4
 800b444:	3204      	addeq	r2, #4
 800b446:	0799      	lsls	r1, r3, #30
 800b448:	bf04      	itt	eq
 800b44a:	089b      	lsreq	r3, r3, #2
 800b44c:	3202      	addeq	r2, #2
 800b44e:	07d9      	lsls	r1, r3, #31
 800b450:	d403      	bmi.n	800b45a <__lo0bits+0x4e>
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	f102 0201 	add.w	r2, r2, #1
 800b458:	d003      	beq.n	800b462 <__lo0bits+0x56>
 800b45a:	6003      	str	r3, [r0, #0]
 800b45c:	e7e5      	b.n	800b42a <__lo0bits+0x1e>
 800b45e:	2200      	movs	r2, #0
 800b460:	e7e3      	b.n	800b42a <__lo0bits+0x1e>
 800b462:	2220      	movs	r2, #32
 800b464:	e7e1      	b.n	800b42a <__lo0bits+0x1e>
	...

0800b468 <__i2b>:
 800b468:	b510      	push	{r4, lr}
 800b46a:	460c      	mov	r4, r1
 800b46c:	2101      	movs	r1, #1
 800b46e:	f7ff ff05 	bl	800b27c <_Balloc>
 800b472:	4602      	mov	r2, r0
 800b474:	b928      	cbnz	r0, 800b482 <__i2b+0x1a>
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <__i2b+0x24>)
 800b478:	4805      	ldr	r0, [pc, #20]	; (800b490 <__i2b+0x28>)
 800b47a:	f240 1145 	movw	r1, #325	; 0x145
 800b47e:	f000 fd53 	bl	800bf28 <__assert_func>
 800b482:	2301      	movs	r3, #1
 800b484:	6144      	str	r4, [r0, #20]
 800b486:	6103      	str	r3, [r0, #16]
 800b488:	bd10      	pop	{r4, pc}
 800b48a:	bf00      	nop
 800b48c:	0800c30c 	.word	0x0800c30c
 800b490:	0800c31d 	.word	0x0800c31d

0800b494 <__multiply>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	4691      	mov	r9, r2
 800b49a:	690a      	ldr	r2, [r1, #16]
 800b49c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	bfb8      	it	lt
 800b4a4:	460b      	movlt	r3, r1
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	bfbc      	itt	lt
 800b4aa:	464c      	movlt	r4, r9
 800b4ac:	4699      	movlt	r9, r3
 800b4ae:	6927      	ldr	r7, [r4, #16]
 800b4b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4b4:	68a3      	ldr	r3, [r4, #8]
 800b4b6:	6861      	ldr	r1, [r4, #4]
 800b4b8:	eb07 060a 	add.w	r6, r7, sl
 800b4bc:	42b3      	cmp	r3, r6
 800b4be:	b085      	sub	sp, #20
 800b4c0:	bfb8      	it	lt
 800b4c2:	3101      	addlt	r1, #1
 800b4c4:	f7ff feda 	bl	800b27c <_Balloc>
 800b4c8:	b930      	cbnz	r0, 800b4d8 <__multiply+0x44>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	4b44      	ldr	r3, [pc, #272]	; (800b5e0 <__multiply+0x14c>)
 800b4ce:	4845      	ldr	r0, [pc, #276]	; (800b5e4 <__multiply+0x150>)
 800b4d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b4d4:	f000 fd28 	bl	800bf28 <__assert_func>
 800b4d8:	f100 0514 	add.w	r5, r0, #20
 800b4dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4543      	cmp	r3, r8
 800b4e6:	d321      	bcc.n	800b52c <__multiply+0x98>
 800b4e8:	f104 0314 	add.w	r3, r4, #20
 800b4ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4f0:	f109 0314 	add.w	r3, r9, #20
 800b4f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4f8:	9202      	str	r2, [sp, #8]
 800b4fa:	1b3a      	subs	r2, r7, r4
 800b4fc:	3a15      	subs	r2, #21
 800b4fe:	f022 0203 	bic.w	r2, r2, #3
 800b502:	3204      	adds	r2, #4
 800b504:	f104 0115 	add.w	r1, r4, #21
 800b508:	428f      	cmp	r7, r1
 800b50a:	bf38      	it	cc
 800b50c:	2204      	movcc	r2, #4
 800b50e:	9201      	str	r2, [sp, #4]
 800b510:	9a02      	ldr	r2, [sp, #8]
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	429a      	cmp	r2, r3
 800b516:	d80c      	bhi.n	800b532 <__multiply+0x9e>
 800b518:	2e00      	cmp	r6, #0
 800b51a:	dd03      	ble.n	800b524 <__multiply+0x90>
 800b51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b520:	2b00      	cmp	r3, #0
 800b522:	d05b      	beq.n	800b5dc <__multiply+0x148>
 800b524:	6106      	str	r6, [r0, #16]
 800b526:	b005      	add	sp, #20
 800b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52c:	f843 2b04 	str.w	r2, [r3], #4
 800b530:	e7d8      	b.n	800b4e4 <__multiply+0x50>
 800b532:	f8b3 a000 	ldrh.w	sl, [r3]
 800b536:	f1ba 0f00 	cmp.w	sl, #0
 800b53a:	d024      	beq.n	800b586 <__multiply+0xf2>
 800b53c:	f104 0e14 	add.w	lr, r4, #20
 800b540:	46a9      	mov	r9, r5
 800b542:	f04f 0c00 	mov.w	ip, #0
 800b546:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b54a:	f8d9 1000 	ldr.w	r1, [r9]
 800b54e:	fa1f fb82 	uxth.w	fp, r2
 800b552:	b289      	uxth	r1, r1
 800b554:	fb0a 110b 	mla	r1, sl, fp, r1
 800b558:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b55c:	f8d9 2000 	ldr.w	r2, [r9]
 800b560:	4461      	add	r1, ip
 800b562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b566:	fb0a c20b 	mla	r2, sl, fp, ip
 800b56a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b56e:	b289      	uxth	r1, r1
 800b570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b574:	4577      	cmp	r7, lr
 800b576:	f849 1b04 	str.w	r1, [r9], #4
 800b57a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b57e:	d8e2      	bhi.n	800b546 <__multiply+0xb2>
 800b580:	9a01      	ldr	r2, [sp, #4]
 800b582:	f845 c002 	str.w	ip, [r5, r2]
 800b586:	9a03      	ldr	r2, [sp, #12]
 800b588:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b58c:	3304      	adds	r3, #4
 800b58e:	f1b9 0f00 	cmp.w	r9, #0
 800b592:	d021      	beq.n	800b5d8 <__multiply+0x144>
 800b594:	6829      	ldr	r1, [r5, #0]
 800b596:	f104 0c14 	add.w	ip, r4, #20
 800b59a:	46ae      	mov	lr, r5
 800b59c:	f04f 0a00 	mov.w	sl, #0
 800b5a0:	f8bc b000 	ldrh.w	fp, [ip]
 800b5a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5a8:	fb09 220b 	mla	r2, r9, fp, r2
 800b5ac:	4452      	add	r2, sl
 800b5ae:	b289      	uxth	r1, r1
 800b5b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5b4:	f84e 1b04 	str.w	r1, [lr], #4
 800b5b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b5bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5c0:	f8be 1000 	ldrh.w	r1, [lr]
 800b5c4:	fb09 110a 	mla	r1, r9, sl, r1
 800b5c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b5cc:	4567      	cmp	r7, ip
 800b5ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5d2:	d8e5      	bhi.n	800b5a0 <__multiply+0x10c>
 800b5d4:	9a01      	ldr	r2, [sp, #4]
 800b5d6:	50a9      	str	r1, [r5, r2]
 800b5d8:	3504      	adds	r5, #4
 800b5da:	e799      	b.n	800b510 <__multiply+0x7c>
 800b5dc:	3e01      	subs	r6, #1
 800b5de:	e79b      	b.n	800b518 <__multiply+0x84>
 800b5e0:	0800c30c 	.word	0x0800c30c
 800b5e4:	0800c31d 	.word	0x0800c31d

0800b5e8 <__pow5mult>:
 800b5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ec:	4615      	mov	r5, r2
 800b5ee:	f012 0203 	ands.w	r2, r2, #3
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	460f      	mov	r7, r1
 800b5f6:	d007      	beq.n	800b608 <__pow5mult+0x20>
 800b5f8:	4c25      	ldr	r4, [pc, #148]	; (800b690 <__pow5mult+0xa8>)
 800b5fa:	3a01      	subs	r2, #1
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b602:	f7ff fe9d 	bl	800b340 <__multadd>
 800b606:	4607      	mov	r7, r0
 800b608:	10ad      	asrs	r5, r5, #2
 800b60a:	d03d      	beq.n	800b688 <__pow5mult+0xa0>
 800b60c:	69f4      	ldr	r4, [r6, #28]
 800b60e:	b97c      	cbnz	r4, 800b630 <__pow5mult+0x48>
 800b610:	2010      	movs	r0, #16
 800b612:	f7ff fd7f 	bl	800b114 <malloc>
 800b616:	4602      	mov	r2, r0
 800b618:	61f0      	str	r0, [r6, #28]
 800b61a:	b928      	cbnz	r0, 800b628 <__pow5mult+0x40>
 800b61c:	4b1d      	ldr	r3, [pc, #116]	; (800b694 <__pow5mult+0xac>)
 800b61e:	481e      	ldr	r0, [pc, #120]	; (800b698 <__pow5mult+0xb0>)
 800b620:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b624:	f000 fc80 	bl	800bf28 <__assert_func>
 800b628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b62c:	6004      	str	r4, [r0, #0]
 800b62e:	60c4      	str	r4, [r0, #12]
 800b630:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b638:	b94c      	cbnz	r4, 800b64e <__pow5mult+0x66>
 800b63a:	f240 2171 	movw	r1, #625	; 0x271
 800b63e:	4630      	mov	r0, r6
 800b640:	f7ff ff12 	bl	800b468 <__i2b>
 800b644:	2300      	movs	r3, #0
 800b646:	f8c8 0008 	str.w	r0, [r8, #8]
 800b64a:	4604      	mov	r4, r0
 800b64c:	6003      	str	r3, [r0, #0]
 800b64e:	f04f 0900 	mov.w	r9, #0
 800b652:	07eb      	lsls	r3, r5, #31
 800b654:	d50a      	bpl.n	800b66c <__pow5mult+0x84>
 800b656:	4639      	mov	r1, r7
 800b658:	4622      	mov	r2, r4
 800b65a:	4630      	mov	r0, r6
 800b65c:	f7ff ff1a 	bl	800b494 <__multiply>
 800b660:	4639      	mov	r1, r7
 800b662:	4680      	mov	r8, r0
 800b664:	4630      	mov	r0, r6
 800b666:	f7ff fe49 	bl	800b2fc <_Bfree>
 800b66a:	4647      	mov	r7, r8
 800b66c:	106d      	asrs	r5, r5, #1
 800b66e:	d00b      	beq.n	800b688 <__pow5mult+0xa0>
 800b670:	6820      	ldr	r0, [r4, #0]
 800b672:	b938      	cbnz	r0, 800b684 <__pow5mult+0x9c>
 800b674:	4622      	mov	r2, r4
 800b676:	4621      	mov	r1, r4
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff ff0b 	bl	800b494 <__multiply>
 800b67e:	6020      	str	r0, [r4, #0]
 800b680:	f8c0 9000 	str.w	r9, [r0]
 800b684:	4604      	mov	r4, r0
 800b686:	e7e4      	b.n	800b652 <__pow5mult+0x6a>
 800b688:	4638      	mov	r0, r7
 800b68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68e:	bf00      	nop
 800b690:	0800c468 	.word	0x0800c468
 800b694:	0800c29d 	.word	0x0800c29d
 800b698:	0800c31d 	.word	0x0800c31d

0800b69c <__lshift>:
 800b69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	6849      	ldr	r1, [r1, #4]
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	4691      	mov	r9, r2
 800b6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6b4:	f108 0601 	add.w	r6, r8, #1
 800b6b8:	42b3      	cmp	r3, r6
 800b6ba:	db0b      	blt.n	800b6d4 <__lshift+0x38>
 800b6bc:	4638      	mov	r0, r7
 800b6be:	f7ff fddd 	bl	800b27c <_Balloc>
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	b948      	cbnz	r0, 800b6da <__lshift+0x3e>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	4b28      	ldr	r3, [pc, #160]	; (800b76c <__lshift+0xd0>)
 800b6ca:	4829      	ldr	r0, [pc, #164]	; (800b770 <__lshift+0xd4>)
 800b6cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b6d0:	f000 fc2a 	bl	800bf28 <__assert_func>
 800b6d4:	3101      	adds	r1, #1
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	e7ee      	b.n	800b6b8 <__lshift+0x1c>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f100 0114 	add.w	r1, r0, #20
 800b6e0:	f100 0210 	add.w	r2, r0, #16
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	4553      	cmp	r3, sl
 800b6e8:	db33      	blt.n	800b752 <__lshift+0xb6>
 800b6ea:	6920      	ldr	r0, [r4, #16]
 800b6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f0:	f104 0314 	add.w	r3, r4, #20
 800b6f4:	f019 091f 	ands.w	r9, r9, #31
 800b6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b700:	d02b      	beq.n	800b75a <__lshift+0xbe>
 800b702:	f1c9 0e20 	rsb	lr, r9, #32
 800b706:	468a      	mov	sl, r1
 800b708:	2200      	movs	r2, #0
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	fa00 f009 	lsl.w	r0, r0, r9
 800b710:	4310      	orrs	r0, r2
 800b712:	f84a 0b04 	str.w	r0, [sl], #4
 800b716:	f853 2b04 	ldr.w	r2, [r3], #4
 800b71a:	459c      	cmp	ip, r3
 800b71c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b720:	d8f3      	bhi.n	800b70a <__lshift+0x6e>
 800b722:	ebac 0304 	sub.w	r3, ip, r4
 800b726:	3b15      	subs	r3, #21
 800b728:	f023 0303 	bic.w	r3, r3, #3
 800b72c:	3304      	adds	r3, #4
 800b72e:	f104 0015 	add.w	r0, r4, #21
 800b732:	4584      	cmp	ip, r0
 800b734:	bf38      	it	cc
 800b736:	2304      	movcc	r3, #4
 800b738:	50ca      	str	r2, [r1, r3]
 800b73a:	b10a      	cbz	r2, 800b740 <__lshift+0xa4>
 800b73c:	f108 0602 	add.w	r6, r8, #2
 800b740:	3e01      	subs	r6, #1
 800b742:	4638      	mov	r0, r7
 800b744:	612e      	str	r6, [r5, #16]
 800b746:	4621      	mov	r1, r4
 800b748:	f7ff fdd8 	bl	800b2fc <_Bfree>
 800b74c:	4628      	mov	r0, r5
 800b74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b752:	f842 0f04 	str.w	r0, [r2, #4]!
 800b756:	3301      	adds	r3, #1
 800b758:	e7c5      	b.n	800b6e6 <__lshift+0x4a>
 800b75a:	3904      	subs	r1, #4
 800b75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b760:	f841 2f04 	str.w	r2, [r1, #4]!
 800b764:	459c      	cmp	ip, r3
 800b766:	d8f9      	bhi.n	800b75c <__lshift+0xc0>
 800b768:	e7ea      	b.n	800b740 <__lshift+0xa4>
 800b76a:	bf00      	nop
 800b76c:	0800c30c 	.word	0x0800c30c
 800b770:	0800c31d 	.word	0x0800c31d

0800b774 <__mcmp>:
 800b774:	b530      	push	{r4, r5, lr}
 800b776:	6902      	ldr	r2, [r0, #16]
 800b778:	690c      	ldr	r4, [r1, #16]
 800b77a:	1b12      	subs	r2, r2, r4
 800b77c:	d10e      	bne.n	800b79c <__mcmp+0x28>
 800b77e:	f100 0314 	add.w	r3, r0, #20
 800b782:	3114      	adds	r1, #20
 800b784:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b788:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b78c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b790:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b794:	42a5      	cmp	r5, r4
 800b796:	d003      	beq.n	800b7a0 <__mcmp+0x2c>
 800b798:	d305      	bcc.n	800b7a6 <__mcmp+0x32>
 800b79a:	2201      	movs	r2, #1
 800b79c:	4610      	mov	r0, r2
 800b79e:	bd30      	pop	{r4, r5, pc}
 800b7a0:	4283      	cmp	r3, r0
 800b7a2:	d3f3      	bcc.n	800b78c <__mcmp+0x18>
 800b7a4:	e7fa      	b.n	800b79c <__mcmp+0x28>
 800b7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7aa:	e7f7      	b.n	800b79c <__mcmp+0x28>

0800b7ac <__mdiff>:
 800b7ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	4690      	mov	r8, r2
 800b7ba:	f7ff ffdb 	bl	800b774 <__mcmp>
 800b7be:	1e05      	subs	r5, r0, #0
 800b7c0:	d110      	bne.n	800b7e4 <__mdiff+0x38>
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7ff fd59 	bl	800b27c <_Balloc>
 800b7ca:	b930      	cbnz	r0, 800b7da <__mdiff+0x2e>
 800b7cc:	4b3a      	ldr	r3, [pc, #232]	; (800b8b8 <__mdiff+0x10c>)
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	f240 2137 	movw	r1, #567	; 0x237
 800b7d4:	4839      	ldr	r0, [pc, #228]	; (800b8bc <__mdiff+0x110>)
 800b7d6:	f000 fba7 	bl	800bf28 <__assert_func>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e4:	bfa4      	itt	ge
 800b7e6:	4643      	movge	r3, r8
 800b7e8:	46a0      	movge	r8, r4
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7f0:	bfa6      	itte	ge
 800b7f2:	461c      	movge	r4, r3
 800b7f4:	2500      	movge	r5, #0
 800b7f6:	2501      	movlt	r5, #1
 800b7f8:	f7ff fd40 	bl	800b27c <_Balloc>
 800b7fc:	b920      	cbnz	r0, 800b808 <__mdiff+0x5c>
 800b7fe:	4b2e      	ldr	r3, [pc, #184]	; (800b8b8 <__mdiff+0x10c>)
 800b800:	4602      	mov	r2, r0
 800b802:	f240 2145 	movw	r1, #581	; 0x245
 800b806:	e7e5      	b.n	800b7d4 <__mdiff+0x28>
 800b808:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b80c:	6926      	ldr	r6, [r4, #16]
 800b80e:	60c5      	str	r5, [r0, #12]
 800b810:	f104 0914 	add.w	r9, r4, #20
 800b814:	f108 0514 	add.w	r5, r8, #20
 800b818:	f100 0e14 	add.w	lr, r0, #20
 800b81c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b820:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b824:	f108 0210 	add.w	r2, r8, #16
 800b828:	46f2      	mov	sl, lr
 800b82a:	2100      	movs	r1, #0
 800b82c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b830:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b834:	fa11 f88b 	uxtah	r8, r1, fp
 800b838:	b299      	uxth	r1, r3
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	eba8 0801 	sub.w	r8, r8, r1
 800b840:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b844:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b848:	fa1f f888 	uxth.w	r8, r8
 800b84c:	1419      	asrs	r1, r3, #16
 800b84e:	454e      	cmp	r6, r9
 800b850:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b854:	f84a 3b04 	str.w	r3, [sl], #4
 800b858:	d8e8      	bhi.n	800b82c <__mdiff+0x80>
 800b85a:	1b33      	subs	r3, r6, r4
 800b85c:	3b15      	subs	r3, #21
 800b85e:	f023 0303 	bic.w	r3, r3, #3
 800b862:	3304      	adds	r3, #4
 800b864:	3415      	adds	r4, #21
 800b866:	42a6      	cmp	r6, r4
 800b868:	bf38      	it	cc
 800b86a:	2304      	movcc	r3, #4
 800b86c:	441d      	add	r5, r3
 800b86e:	4473      	add	r3, lr
 800b870:	469e      	mov	lr, r3
 800b872:	462e      	mov	r6, r5
 800b874:	4566      	cmp	r6, ip
 800b876:	d30e      	bcc.n	800b896 <__mdiff+0xea>
 800b878:	f10c 0203 	add.w	r2, ip, #3
 800b87c:	1b52      	subs	r2, r2, r5
 800b87e:	f022 0203 	bic.w	r2, r2, #3
 800b882:	3d03      	subs	r5, #3
 800b884:	45ac      	cmp	ip, r5
 800b886:	bf38      	it	cc
 800b888:	2200      	movcc	r2, #0
 800b88a:	4413      	add	r3, r2
 800b88c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b890:	b17a      	cbz	r2, 800b8b2 <__mdiff+0x106>
 800b892:	6107      	str	r7, [r0, #16]
 800b894:	e7a4      	b.n	800b7e0 <__mdiff+0x34>
 800b896:	f856 8b04 	ldr.w	r8, [r6], #4
 800b89a:	fa11 f288 	uxtah	r2, r1, r8
 800b89e:	1414      	asrs	r4, r2, #16
 800b8a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8a4:	b292      	uxth	r2, r2
 800b8a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8aa:	f84e 2b04 	str.w	r2, [lr], #4
 800b8ae:	1421      	asrs	r1, r4, #16
 800b8b0:	e7e0      	b.n	800b874 <__mdiff+0xc8>
 800b8b2:	3f01      	subs	r7, #1
 800b8b4:	e7ea      	b.n	800b88c <__mdiff+0xe0>
 800b8b6:	bf00      	nop
 800b8b8:	0800c30c 	.word	0x0800c30c
 800b8bc:	0800c31d 	.word	0x0800c31d

0800b8c0 <__d2b>:
 800b8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	ec59 8b10 	vmov	r8, r9, d0
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	f7ff fcd5 	bl	800b27c <_Balloc>
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	b930      	cbnz	r0, 800b8e4 <__d2b+0x24>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	4b24      	ldr	r3, [pc, #144]	; (800b96c <__d2b+0xac>)
 800b8da:	4825      	ldr	r0, [pc, #148]	; (800b970 <__d2b+0xb0>)
 800b8dc:	f240 310f 	movw	r1, #783	; 0x30f
 800b8e0:	f000 fb22 	bl	800bf28 <__assert_func>
 800b8e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8ec:	bb2d      	cbnz	r5, 800b93a <__d2b+0x7a>
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b8f4:	d026      	beq.n	800b944 <__d2b+0x84>
 800b8f6:	4668      	mov	r0, sp
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	f7ff fd87 	bl	800b40c <__lo0bits>
 800b8fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b902:	b1e8      	cbz	r0, 800b940 <__d2b+0x80>
 800b904:	f1c0 0320 	rsb	r3, r0, #32
 800b908:	fa02 f303 	lsl.w	r3, r2, r3
 800b90c:	430b      	orrs	r3, r1
 800b90e:	40c2      	lsrs	r2, r0
 800b910:	6163      	str	r3, [r4, #20]
 800b912:	9201      	str	r2, [sp, #4]
 800b914:	9b01      	ldr	r3, [sp, #4]
 800b916:	61a3      	str	r3, [r4, #24]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	bf14      	ite	ne
 800b91c:	2202      	movne	r2, #2
 800b91e:	2201      	moveq	r2, #1
 800b920:	6122      	str	r2, [r4, #16]
 800b922:	b1bd      	cbz	r5, 800b954 <__d2b+0x94>
 800b924:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b928:	4405      	add	r5, r0
 800b92a:	603d      	str	r5, [r7, #0]
 800b92c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b930:	6030      	str	r0, [r6, #0]
 800b932:	4620      	mov	r0, r4
 800b934:	b003      	add	sp, #12
 800b936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b93e:	e7d6      	b.n	800b8ee <__d2b+0x2e>
 800b940:	6161      	str	r1, [r4, #20]
 800b942:	e7e7      	b.n	800b914 <__d2b+0x54>
 800b944:	a801      	add	r0, sp, #4
 800b946:	f7ff fd61 	bl	800b40c <__lo0bits>
 800b94a:	9b01      	ldr	r3, [sp, #4]
 800b94c:	6163      	str	r3, [r4, #20]
 800b94e:	3020      	adds	r0, #32
 800b950:	2201      	movs	r2, #1
 800b952:	e7e5      	b.n	800b920 <__d2b+0x60>
 800b954:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b958:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b95c:	6038      	str	r0, [r7, #0]
 800b95e:	6918      	ldr	r0, [r3, #16]
 800b960:	f7ff fd34 	bl	800b3cc <__hi0bits>
 800b964:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b968:	e7e2      	b.n	800b930 <__d2b+0x70>
 800b96a:	bf00      	nop
 800b96c:	0800c30c 	.word	0x0800c30c
 800b970:	0800c31d 	.word	0x0800c31d

0800b974 <__sfputc_r>:
 800b974:	6893      	ldr	r3, [r2, #8]
 800b976:	3b01      	subs	r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	b410      	push	{r4}
 800b97c:	6093      	str	r3, [r2, #8]
 800b97e:	da08      	bge.n	800b992 <__sfputc_r+0x1e>
 800b980:	6994      	ldr	r4, [r2, #24]
 800b982:	42a3      	cmp	r3, r4
 800b984:	db01      	blt.n	800b98a <__sfputc_r+0x16>
 800b986:	290a      	cmp	r1, #10
 800b988:	d103      	bne.n	800b992 <__sfputc_r+0x1e>
 800b98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b98e:	f000 ba17 	b.w	800bdc0 <__swbuf_r>
 800b992:	6813      	ldr	r3, [r2, #0]
 800b994:	1c58      	adds	r0, r3, #1
 800b996:	6010      	str	r0, [r2, #0]
 800b998:	7019      	strb	r1, [r3, #0]
 800b99a:	4608      	mov	r0, r1
 800b99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <__sfputs_r>:
 800b9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	460f      	mov	r7, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	18d5      	adds	r5, r2, r3
 800b9ac:	42ac      	cmp	r4, r5
 800b9ae:	d101      	bne.n	800b9b4 <__sfputs_r+0x12>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e007      	b.n	800b9c4 <__sfputs_r+0x22>
 800b9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b8:	463a      	mov	r2, r7
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7ff ffda 	bl	800b974 <__sfputc_r>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d1f3      	bne.n	800b9ac <__sfputs_r+0xa>
 800b9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9c8 <_vfiprintf_r>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	b09d      	sub	sp, #116	; 0x74
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	4698      	mov	r8, r3
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	b118      	cbz	r0, 800b9e0 <_vfiprintf_r+0x18>
 800b9d8:	6a03      	ldr	r3, [r0, #32]
 800b9da:	b90b      	cbnz	r3, 800b9e0 <_vfiprintf_r+0x18>
 800b9dc:	f7fe fbc0 	bl	800a160 <__sinit>
 800b9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9e2:	07d9      	lsls	r1, r3, #31
 800b9e4:	d405      	bmi.n	800b9f2 <_vfiprintf_r+0x2a>
 800b9e6:	89ab      	ldrh	r3, [r5, #12]
 800b9e8:	059a      	lsls	r2, r3, #22
 800b9ea:	d402      	bmi.n	800b9f2 <_vfiprintf_r+0x2a>
 800b9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ee:	f7fe fcc8 	bl	800a382 <__retarget_lock_acquire_recursive>
 800b9f2:	89ab      	ldrh	r3, [r5, #12]
 800b9f4:	071b      	lsls	r3, r3, #28
 800b9f6:	d501      	bpl.n	800b9fc <_vfiprintf_r+0x34>
 800b9f8:	692b      	ldr	r3, [r5, #16]
 800b9fa:	b99b      	cbnz	r3, 800ba24 <_vfiprintf_r+0x5c>
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f000 fa1c 	bl	800be3c <__swsetup_r>
 800ba04:	b170      	cbz	r0, 800ba24 <_vfiprintf_r+0x5c>
 800ba06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba08:	07dc      	lsls	r4, r3, #31
 800ba0a:	d504      	bpl.n	800ba16 <_vfiprintf_r+0x4e>
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	b01d      	add	sp, #116	; 0x74
 800ba12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	0598      	lsls	r0, r3, #22
 800ba1a:	d4f7      	bmi.n	800ba0c <_vfiprintf_r+0x44>
 800ba1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba1e:	f7fe fcb1 	bl	800a384 <__retarget_lock_release_recursive>
 800ba22:	e7f3      	b.n	800ba0c <_vfiprintf_r+0x44>
 800ba24:	2300      	movs	r3, #0
 800ba26:	9309      	str	r3, [sp, #36]	; 0x24
 800ba28:	2320      	movs	r3, #32
 800ba2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba32:	2330      	movs	r3, #48	; 0x30
 800ba34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bbe8 <_vfiprintf_r+0x220>
 800ba38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba3c:	f04f 0901 	mov.w	r9, #1
 800ba40:	4623      	mov	r3, r4
 800ba42:	469a      	mov	sl, r3
 800ba44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba48:	b10a      	cbz	r2, 800ba4e <_vfiprintf_r+0x86>
 800ba4a:	2a25      	cmp	r2, #37	; 0x25
 800ba4c:	d1f9      	bne.n	800ba42 <_vfiprintf_r+0x7a>
 800ba4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba52:	d00b      	beq.n	800ba6c <_vfiprintf_r+0xa4>
 800ba54:	465b      	mov	r3, fp
 800ba56:	4622      	mov	r2, r4
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ffa1 	bl	800b9a2 <__sfputs_r>
 800ba60:	3001      	adds	r0, #1
 800ba62:	f000 80a9 	beq.w	800bbb8 <_vfiprintf_r+0x1f0>
 800ba66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba68:	445a      	add	r2, fp
 800ba6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 80a1 	beq.w	800bbb8 <_vfiprintf_r+0x1f0>
 800ba76:	2300      	movs	r3, #0
 800ba78:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba80:	f10a 0a01 	add.w	sl, sl, #1
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	9307      	str	r3, [sp, #28]
 800ba88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba8e:	4654      	mov	r4, sl
 800ba90:	2205      	movs	r2, #5
 800ba92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba96:	4854      	ldr	r0, [pc, #336]	; (800bbe8 <_vfiprintf_r+0x220>)
 800ba98:	f7f4 fbb2 	bl	8000200 <memchr>
 800ba9c:	9a04      	ldr	r2, [sp, #16]
 800ba9e:	b9d8      	cbnz	r0, 800bad8 <_vfiprintf_r+0x110>
 800baa0:	06d1      	lsls	r1, r2, #27
 800baa2:	bf44      	itt	mi
 800baa4:	2320      	movmi	r3, #32
 800baa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baaa:	0713      	lsls	r3, r2, #28
 800baac:	bf44      	itt	mi
 800baae:	232b      	movmi	r3, #43	; 0x2b
 800bab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bab4:	f89a 3000 	ldrb.w	r3, [sl]
 800bab8:	2b2a      	cmp	r3, #42	; 0x2a
 800baba:	d015      	beq.n	800bae8 <_vfiprintf_r+0x120>
 800babc:	9a07      	ldr	r2, [sp, #28]
 800babe:	4654      	mov	r4, sl
 800bac0:	2000      	movs	r0, #0
 800bac2:	f04f 0c0a 	mov.w	ip, #10
 800bac6:	4621      	mov	r1, r4
 800bac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bacc:	3b30      	subs	r3, #48	; 0x30
 800bace:	2b09      	cmp	r3, #9
 800bad0:	d94d      	bls.n	800bb6e <_vfiprintf_r+0x1a6>
 800bad2:	b1b0      	cbz	r0, 800bb02 <_vfiprintf_r+0x13a>
 800bad4:	9207      	str	r2, [sp, #28]
 800bad6:	e014      	b.n	800bb02 <_vfiprintf_r+0x13a>
 800bad8:	eba0 0308 	sub.w	r3, r0, r8
 800badc:	fa09 f303 	lsl.w	r3, r9, r3
 800bae0:	4313      	orrs	r3, r2
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	46a2      	mov	sl, r4
 800bae6:	e7d2      	b.n	800ba8e <_vfiprintf_r+0xc6>
 800bae8:	9b03      	ldr	r3, [sp, #12]
 800baea:	1d19      	adds	r1, r3, #4
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	9103      	str	r1, [sp, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bfbb      	ittet	lt
 800baf4:	425b      	neglt	r3, r3
 800baf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bafa:	9307      	strge	r3, [sp, #28]
 800bafc:	9307      	strlt	r3, [sp, #28]
 800bafe:	bfb8      	it	lt
 800bb00:	9204      	strlt	r2, [sp, #16]
 800bb02:	7823      	ldrb	r3, [r4, #0]
 800bb04:	2b2e      	cmp	r3, #46	; 0x2e
 800bb06:	d10c      	bne.n	800bb22 <_vfiprintf_r+0x15a>
 800bb08:	7863      	ldrb	r3, [r4, #1]
 800bb0a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb0c:	d134      	bne.n	800bb78 <_vfiprintf_r+0x1b0>
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	1d1a      	adds	r2, r3, #4
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	9203      	str	r2, [sp, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bfb8      	it	lt
 800bb1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb1e:	3402      	adds	r4, #2
 800bb20:	9305      	str	r3, [sp, #20]
 800bb22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bbf8 <_vfiprintf_r+0x230>
 800bb26:	7821      	ldrb	r1, [r4, #0]
 800bb28:	2203      	movs	r2, #3
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	f7f4 fb68 	bl	8000200 <memchr>
 800bb30:	b138      	cbz	r0, 800bb42 <_vfiprintf_r+0x17a>
 800bb32:	9b04      	ldr	r3, [sp, #16]
 800bb34:	eba0 000a 	sub.w	r0, r0, sl
 800bb38:	2240      	movs	r2, #64	; 0x40
 800bb3a:	4082      	lsls	r2, r0
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	3401      	adds	r4, #1
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb46:	4829      	ldr	r0, [pc, #164]	; (800bbec <_vfiprintf_r+0x224>)
 800bb48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb4c:	2206      	movs	r2, #6
 800bb4e:	f7f4 fb57 	bl	8000200 <memchr>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d03f      	beq.n	800bbd6 <_vfiprintf_r+0x20e>
 800bb56:	4b26      	ldr	r3, [pc, #152]	; (800bbf0 <_vfiprintf_r+0x228>)
 800bb58:	bb1b      	cbnz	r3, 800bba2 <_vfiprintf_r+0x1da>
 800bb5a:	9b03      	ldr	r3, [sp, #12]
 800bb5c:	3307      	adds	r3, #7
 800bb5e:	f023 0307 	bic.w	r3, r3, #7
 800bb62:	3308      	adds	r3, #8
 800bb64:	9303      	str	r3, [sp, #12]
 800bb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb68:	443b      	add	r3, r7
 800bb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6c:	e768      	b.n	800ba40 <_vfiprintf_r+0x78>
 800bb6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb72:	460c      	mov	r4, r1
 800bb74:	2001      	movs	r0, #1
 800bb76:	e7a6      	b.n	800bac6 <_vfiprintf_r+0xfe>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	9305      	str	r3, [sp, #20]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	f04f 0c0a 	mov.w	ip, #10
 800bb84:	4620      	mov	r0, r4
 800bb86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb8a:	3a30      	subs	r2, #48	; 0x30
 800bb8c:	2a09      	cmp	r2, #9
 800bb8e:	d903      	bls.n	800bb98 <_vfiprintf_r+0x1d0>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0c6      	beq.n	800bb22 <_vfiprintf_r+0x15a>
 800bb94:	9105      	str	r1, [sp, #20]
 800bb96:	e7c4      	b.n	800bb22 <_vfiprintf_r+0x15a>
 800bb98:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e7f0      	b.n	800bb84 <_vfiprintf_r+0x1bc>
 800bba2:	ab03      	add	r3, sp, #12
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	462a      	mov	r2, r5
 800bba8:	4b12      	ldr	r3, [pc, #72]	; (800bbf4 <_vfiprintf_r+0x22c>)
 800bbaa:	a904      	add	r1, sp, #16
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7fd fe85 	bl	80098bc <_printf_float>
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	1c78      	adds	r0, r7, #1
 800bbb6:	d1d6      	bne.n	800bb66 <_vfiprintf_r+0x19e>
 800bbb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbba:	07d9      	lsls	r1, r3, #31
 800bbbc:	d405      	bmi.n	800bbca <_vfiprintf_r+0x202>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	059a      	lsls	r2, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_vfiprintf_r+0x202>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbc6:	f7fe fbdd 	bl	800a384 <__retarget_lock_release_recursive>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	065b      	lsls	r3, r3, #25
 800bbce:	f53f af1d 	bmi.w	800ba0c <_vfiprintf_r+0x44>
 800bbd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd4:	e71c      	b.n	800ba10 <_vfiprintf_r+0x48>
 800bbd6:	ab03      	add	r3, sp, #12
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <_vfiprintf_r+0x22c>)
 800bbde:	a904      	add	r1, sp, #16
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7fe f90f 	bl	8009e04 <_printf_i>
 800bbe6:	e7e4      	b.n	800bbb2 <_vfiprintf_r+0x1ea>
 800bbe8:	0800c474 	.word	0x0800c474
 800bbec:	0800c47e 	.word	0x0800c47e
 800bbf0:	080098bd 	.word	0x080098bd
 800bbf4:	0800b9a3 	.word	0x0800b9a3
 800bbf8:	0800c47a 	.word	0x0800c47a

0800bbfc <__sflush_r>:
 800bbfc:	898a      	ldrh	r2, [r1, #12]
 800bbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc02:	4605      	mov	r5, r0
 800bc04:	0710      	lsls	r0, r2, #28
 800bc06:	460c      	mov	r4, r1
 800bc08:	d458      	bmi.n	800bcbc <__sflush_r+0xc0>
 800bc0a:	684b      	ldr	r3, [r1, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	dc05      	bgt.n	800bc1c <__sflush_r+0x20>
 800bc10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dc02      	bgt.n	800bc1c <__sflush_r+0x20>
 800bc16:	2000      	movs	r0, #0
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	d0f9      	beq.n	800bc16 <__sflush_r+0x1a>
 800bc22:	2300      	movs	r3, #0
 800bc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc28:	682f      	ldr	r7, [r5, #0]
 800bc2a:	6a21      	ldr	r1, [r4, #32]
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	d032      	beq.n	800bc96 <__sflush_r+0x9a>
 800bc30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	075a      	lsls	r2, r3, #29
 800bc36:	d505      	bpl.n	800bc44 <__sflush_r+0x48>
 800bc38:	6863      	ldr	r3, [r4, #4]
 800bc3a:	1ac0      	subs	r0, r0, r3
 800bc3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc3e:	b10b      	cbz	r3, 800bc44 <__sflush_r+0x48>
 800bc40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc42:	1ac0      	subs	r0, r0, r3
 800bc44:	2300      	movs	r3, #0
 800bc46:	4602      	mov	r2, r0
 800bc48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc4a:	6a21      	ldr	r1, [r4, #32]
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	47b0      	blx	r6
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	d106      	bne.n	800bc64 <__sflush_r+0x68>
 800bc56:	6829      	ldr	r1, [r5, #0]
 800bc58:	291d      	cmp	r1, #29
 800bc5a:	d82b      	bhi.n	800bcb4 <__sflush_r+0xb8>
 800bc5c:	4a29      	ldr	r2, [pc, #164]	; (800bd04 <__sflush_r+0x108>)
 800bc5e:	410a      	asrs	r2, r1
 800bc60:	07d6      	lsls	r6, r2, #31
 800bc62:	d427      	bmi.n	800bcb4 <__sflush_r+0xb8>
 800bc64:	2200      	movs	r2, #0
 800bc66:	6062      	str	r2, [r4, #4]
 800bc68:	04d9      	lsls	r1, r3, #19
 800bc6a:	6922      	ldr	r2, [r4, #16]
 800bc6c:	6022      	str	r2, [r4, #0]
 800bc6e:	d504      	bpl.n	800bc7a <__sflush_r+0x7e>
 800bc70:	1c42      	adds	r2, r0, #1
 800bc72:	d101      	bne.n	800bc78 <__sflush_r+0x7c>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b903      	cbnz	r3, 800bc7a <__sflush_r+0x7e>
 800bc78:	6560      	str	r0, [r4, #84]	; 0x54
 800bc7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc7c:	602f      	str	r7, [r5, #0]
 800bc7e:	2900      	cmp	r1, #0
 800bc80:	d0c9      	beq.n	800bc16 <__sflush_r+0x1a>
 800bc82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc86:	4299      	cmp	r1, r3
 800bc88:	d002      	beq.n	800bc90 <__sflush_r+0x94>
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f7ff f9f6 	bl	800b07c <_free_r>
 800bc90:	2000      	movs	r0, #0
 800bc92:	6360      	str	r0, [r4, #52]	; 0x34
 800bc94:	e7c0      	b.n	800bc18 <__sflush_r+0x1c>
 800bc96:	2301      	movs	r3, #1
 800bc98:	4628      	mov	r0, r5
 800bc9a:	47b0      	blx	r6
 800bc9c:	1c41      	adds	r1, r0, #1
 800bc9e:	d1c8      	bne.n	800bc32 <__sflush_r+0x36>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0c5      	beq.n	800bc32 <__sflush_r+0x36>
 800bca6:	2b1d      	cmp	r3, #29
 800bca8:	d001      	beq.n	800bcae <__sflush_r+0xb2>
 800bcaa:	2b16      	cmp	r3, #22
 800bcac:	d101      	bne.n	800bcb2 <__sflush_r+0xb6>
 800bcae:	602f      	str	r7, [r5, #0]
 800bcb0:	e7b1      	b.n	800bc16 <__sflush_r+0x1a>
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	e7ad      	b.n	800bc18 <__sflush_r+0x1c>
 800bcbc:	690f      	ldr	r7, [r1, #16]
 800bcbe:	2f00      	cmp	r7, #0
 800bcc0:	d0a9      	beq.n	800bc16 <__sflush_r+0x1a>
 800bcc2:	0793      	lsls	r3, r2, #30
 800bcc4:	680e      	ldr	r6, [r1, #0]
 800bcc6:	bf08      	it	eq
 800bcc8:	694b      	ldreq	r3, [r1, #20]
 800bcca:	600f      	str	r7, [r1, #0]
 800bccc:	bf18      	it	ne
 800bcce:	2300      	movne	r3, #0
 800bcd0:	eba6 0807 	sub.w	r8, r6, r7
 800bcd4:	608b      	str	r3, [r1, #8]
 800bcd6:	f1b8 0f00 	cmp.w	r8, #0
 800bcda:	dd9c      	ble.n	800bc16 <__sflush_r+0x1a>
 800bcdc:	6a21      	ldr	r1, [r4, #32]
 800bcde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bce0:	4643      	mov	r3, r8
 800bce2:	463a      	mov	r2, r7
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b0      	blx	r6
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dc06      	bgt.n	800bcfa <__sflush_r+0xfe>
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	e78e      	b.n	800bc18 <__sflush_r+0x1c>
 800bcfa:	4407      	add	r7, r0
 800bcfc:	eba8 0800 	sub.w	r8, r8, r0
 800bd00:	e7e9      	b.n	800bcd6 <__sflush_r+0xda>
 800bd02:	bf00      	nop
 800bd04:	dfbffffe 	.word	0xdfbffffe

0800bd08 <_fflush_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	690b      	ldr	r3, [r1, #16]
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	b913      	cbnz	r3, 800bd18 <_fflush_r+0x10>
 800bd12:	2500      	movs	r5, #0
 800bd14:	4628      	mov	r0, r5
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	b118      	cbz	r0, 800bd22 <_fflush_r+0x1a>
 800bd1a:	6a03      	ldr	r3, [r0, #32]
 800bd1c:	b90b      	cbnz	r3, 800bd22 <_fflush_r+0x1a>
 800bd1e:	f7fe fa1f 	bl	800a160 <__sinit>
 800bd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0f3      	beq.n	800bd12 <_fflush_r+0xa>
 800bd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd2c:	07d0      	lsls	r0, r2, #31
 800bd2e:	d404      	bmi.n	800bd3a <_fflush_r+0x32>
 800bd30:	0599      	lsls	r1, r3, #22
 800bd32:	d402      	bmi.n	800bd3a <_fflush_r+0x32>
 800bd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd36:	f7fe fb24 	bl	800a382 <__retarget_lock_acquire_recursive>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	f7ff ff5d 	bl	800bbfc <__sflush_r>
 800bd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd44:	07da      	lsls	r2, r3, #31
 800bd46:	4605      	mov	r5, r0
 800bd48:	d4e4      	bmi.n	800bd14 <_fflush_r+0xc>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	059b      	lsls	r3, r3, #22
 800bd4e:	d4e1      	bmi.n	800bd14 <_fflush_r+0xc>
 800bd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd52:	f7fe fb17 	bl	800a384 <__retarget_lock_release_recursive>
 800bd56:	e7dd      	b.n	800bd14 <_fflush_r+0xc>

0800bd58 <_putc_r>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	4606      	mov	r6, r0
 800bd60:	b118      	cbz	r0, 800bd6a <_putc_r+0x12>
 800bd62:	6a03      	ldr	r3, [r0, #32]
 800bd64:	b90b      	cbnz	r3, 800bd6a <_putc_r+0x12>
 800bd66:	f7fe f9fb 	bl	800a160 <__sinit>
 800bd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd6c:	07d8      	lsls	r0, r3, #31
 800bd6e:	d405      	bmi.n	800bd7c <_putc_r+0x24>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	0599      	lsls	r1, r3, #22
 800bd74:	d402      	bmi.n	800bd7c <_putc_r+0x24>
 800bd76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd78:	f7fe fb03 	bl	800a382 <__retarget_lock_acquire_recursive>
 800bd7c:	68a3      	ldr	r3, [r4, #8]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	60a3      	str	r3, [r4, #8]
 800bd84:	da05      	bge.n	800bd92 <_putc_r+0x3a>
 800bd86:	69a2      	ldr	r2, [r4, #24]
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	db12      	blt.n	800bdb2 <_putc_r+0x5a>
 800bd8c:	b2eb      	uxtb	r3, r5
 800bd8e:	2b0a      	cmp	r3, #10
 800bd90:	d00f      	beq.n	800bdb2 <_putc_r+0x5a>
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	1c5a      	adds	r2, r3, #1
 800bd96:	6022      	str	r2, [r4, #0]
 800bd98:	701d      	strb	r5, [r3, #0]
 800bd9a:	b2ed      	uxtb	r5, r5
 800bd9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd9e:	07da      	lsls	r2, r3, #31
 800bda0:	d405      	bmi.n	800bdae <_putc_r+0x56>
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	059b      	lsls	r3, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_putc_r+0x56>
 800bda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdaa:	f7fe faeb 	bl	800a384 <__retarget_lock_release_recursive>
 800bdae:	4628      	mov	r0, r5
 800bdb0:	bd70      	pop	{r4, r5, r6, pc}
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f000 f802 	bl	800bdc0 <__swbuf_r>
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	e7ed      	b.n	800bd9c <_putc_r+0x44>

0800bdc0 <__swbuf_r>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	460e      	mov	r6, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	b118      	cbz	r0, 800bdd2 <__swbuf_r+0x12>
 800bdca:	6a03      	ldr	r3, [r0, #32]
 800bdcc:	b90b      	cbnz	r3, 800bdd2 <__swbuf_r+0x12>
 800bdce:	f7fe f9c7 	bl	800a160 <__sinit>
 800bdd2:	69a3      	ldr	r3, [r4, #24]
 800bdd4:	60a3      	str	r3, [r4, #8]
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	071a      	lsls	r2, r3, #28
 800bdda:	d525      	bpl.n	800be28 <__swbuf_r+0x68>
 800bddc:	6923      	ldr	r3, [r4, #16]
 800bdde:	b31b      	cbz	r3, 800be28 <__swbuf_r+0x68>
 800bde0:	6823      	ldr	r3, [r4, #0]
 800bde2:	6922      	ldr	r2, [r4, #16]
 800bde4:	1a98      	subs	r0, r3, r2
 800bde6:	6963      	ldr	r3, [r4, #20]
 800bde8:	b2f6      	uxtb	r6, r6
 800bdea:	4283      	cmp	r3, r0
 800bdec:	4637      	mov	r7, r6
 800bdee:	dc04      	bgt.n	800bdfa <__swbuf_r+0x3a>
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f7ff ff88 	bl	800bd08 <_fflush_r>
 800bdf8:	b9e0      	cbnz	r0, 800be34 <__swbuf_r+0x74>
 800bdfa:	68a3      	ldr	r3, [r4, #8]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	60a3      	str	r3, [r4, #8]
 800be00:	6823      	ldr	r3, [r4, #0]
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	6022      	str	r2, [r4, #0]
 800be06:	701e      	strb	r6, [r3, #0]
 800be08:	6962      	ldr	r2, [r4, #20]
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d004      	beq.n	800be1a <__swbuf_r+0x5a>
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	07db      	lsls	r3, r3, #31
 800be14:	d506      	bpl.n	800be24 <__swbuf_r+0x64>
 800be16:	2e0a      	cmp	r6, #10
 800be18:	d104      	bne.n	800be24 <__swbuf_r+0x64>
 800be1a:	4621      	mov	r1, r4
 800be1c:	4628      	mov	r0, r5
 800be1e:	f7ff ff73 	bl	800bd08 <_fflush_r>
 800be22:	b938      	cbnz	r0, 800be34 <__swbuf_r+0x74>
 800be24:	4638      	mov	r0, r7
 800be26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be28:	4621      	mov	r1, r4
 800be2a:	4628      	mov	r0, r5
 800be2c:	f000 f806 	bl	800be3c <__swsetup_r>
 800be30:	2800      	cmp	r0, #0
 800be32:	d0d5      	beq.n	800bde0 <__swbuf_r+0x20>
 800be34:	f04f 37ff 	mov.w	r7, #4294967295
 800be38:	e7f4      	b.n	800be24 <__swbuf_r+0x64>
	...

0800be3c <__swsetup_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4b2a      	ldr	r3, [pc, #168]	; (800bee8 <__swsetup_r+0xac>)
 800be40:	4605      	mov	r5, r0
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	460c      	mov	r4, r1
 800be46:	b118      	cbz	r0, 800be50 <__swsetup_r+0x14>
 800be48:	6a03      	ldr	r3, [r0, #32]
 800be4a:	b90b      	cbnz	r3, 800be50 <__swsetup_r+0x14>
 800be4c:	f7fe f988 	bl	800a160 <__sinit>
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be56:	0718      	lsls	r0, r3, #28
 800be58:	d422      	bmi.n	800bea0 <__swsetup_r+0x64>
 800be5a:	06d9      	lsls	r1, r3, #27
 800be5c:	d407      	bmi.n	800be6e <__swsetup_r+0x32>
 800be5e:	2309      	movs	r3, #9
 800be60:	602b      	str	r3, [r5, #0]
 800be62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be66:	81a3      	strh	r3, [r4, #12]
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	e034      	b.n	800bed8 <__swsetup_r+0x9c>
 800be6e:	0758      	lsls	r0, r3, #29
 800be70:	d512      	bpl.n	800be98 <__swsetup_r+0x5c>
 800be72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be74:	b141      	cbz	r1, 800be88 <__swsetup_r+0x4c>
 800be76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d002      	beq.n	800be84 <__swsetup_r+0x48>
 800be7e:	4628      	mov	r0, r5
 800be80:	f7ff f8fc 	bl	800b07c <_free_r>
 800be84:	2300      	movs	r3, #0
 800be86:	6363      	str	r3, [r4, #52]	; 0x34
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	2300      	movs	r3, #0
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	6923      	ldr	r3, [r4, #16]
 800be96:	6023      	str	r3, [r4, #0]
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	f043 0308 	orr.w	r3, r3, #8
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	b94b      	cbnz	r3, 800beb8 <__swsetup_r+0x7c>
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800beaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beae:	d003      	beq.n	800beb8 <__swsetup_r+0x7c>
 800beb0:	4621      	mov	r1, r4
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 f8c4 	bl	800c040 <__smakebuf_r>
 800beb8:	89a0      	ldrh	r0, [r4, #12]
 800beba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bebe:	f010 0301 	ands.w	r3, r0, #1
 800bec2:	d00a      	beq.n	800beda <__swsetup_r+0x9e>
 800bec4:	2300      	movs	r3, #0
 800bec6:	60a3      	str	r3, [r4, #8]
 800bec8:	6963      	ldr	r3, [r4, #20]
 800beca:	425b      	negs	r3, r3
 800becc:	61a3      	str	r3, [r4, #24]
 800bece:	6923      	ldr	r3, [r4, #16]
 800bed0:	b943      	cbnz	r3, 800bee4 <__swsetup_r+0xa8>
 800bed2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bed6:	d1c4      	bne.n	800be62 <__swsetup_r+0x26>
 800bed8:	bd38      	pop	{r3, r4, r5, pc}
 800beda:	0781      	lsls	r1, r0, #30
 800bedc:	bf58      	it	pl
 800bede:	6963      	ldrpl	r3, [r4, #20]
 800bee0:	60a3      	str	r3, [r4, #8]
 800bee2:	e7f4      	b.n	800bece <__swsetup_r+0x92>
 800bee4:	2000      	movs	r0, #0
 800bee6:	e7f7      	b.n	800bed8 <__swsetup_r+0x9c>
 800bee8:	20000064 	.word	0x20000064

0800beec <_sbrk_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d06      	ldr	r5, [pc, #24]	; (800bf08 <_sbrk_r+0x1c>)
 800bef0:	2300      	movs	r3, #0
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	602b      	str	r3, [r5, #0]
 800bef8:	f7f6 ff32 	bl	8002d60 <_sbrk>
 800befc:	1c43      	adds	r3, r0, #1
 800befe:	d102      	bne.n	800bf06 <_sbrk_r+0x1a>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	b103      	cbz	r3, 800bf06 <_sbrk_r+0x1a>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	bd38      	pop	{r3, r4, r5, pc}
 800bf08:	20000a1c 	.word	0x20000a1c

0800bf0c <memcpy>:
 800bf0c:	440a      	add	r2, r1
 800bf0e:	4291      	cmp	r1, r2
 800bf10:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf14:	d100      	bne.n	800bf18 <memcpy+0xc>
 800bf16:	4770      	bx	lr
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf22:	4291      	cmp	r1, r2
 800bf24:	d1f9      	bne.n	800bf1a <memcpy+0xe>
 800bf26:	bd10      	pop	{r4, pc}

0800bf28 <__assert_func>:
 800bf28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf2a:	4614      	mov	r4, r2
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <__assert_func+0x2c>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4605      	mov	r5, r0
 800bf34:	68d8      	ldr	r0, [r3, #12]
 800bf36:	b14c      	cbz	r4, 800bf4c <__assert_func+0x24>
 800bf38:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <__assert_func+0x30>)
 800bf3a:	9100      	str	r1, [sp, #0]
 800bf3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf40:	4906      	ldr	r1, [pc, #24]	; (800bf5c <__assert_func+0x34>)
 800bf42:	462b      	mov	r3, r5
 800bf44:	f000 f844 	bl	800bfd0 <fiprintf>
 800bf48:	f000 f8d8 	bl	800c0fc <abort>
 800bf4c:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <__assert_func+0x38>)
 800bf4e:	461c      	mov	r4, r3
 800bf50:	e7f3      	b.n	800bf3a <__assert_func+0x12>
 800bf52:	bf00      	nop
 800bf54:	20000064 	.word	0x20000064
 800bf58:	0800c48f 	.word	0x0800c48f
 800bf5c:	0800c49c 	.word	0x0800c49c
 800bf60:	0800c4ca 	.word	0x0800c4ca

0800bf64 <_calloc_r>:
 800bf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf66:	fba1 2402 	umull	r2, r4, r1, r2
 800bf6a:	b94c      	cbnz	r4, 800bf80 <_calloc_r+0x1c>
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	9201      	str	r2, [sp, #4]
 800bf70:	f7ff f8f8 	bl	800b164 <_malloc_r>
 800bf74:	9a01      	ldr	r2, [sp, #4]
 800bf76:	4605      	mov	r5, r0
 800bf78:	b930      	cbnz	r0, 800bf88 <_calloc_r+0x24>
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	b003      	add	sp, #12
 800bf7e:	bd30      	pop	{r4, r5, pc}
 800bf80:	220c      	movs	r2, #12
 800bf82:	6002      	str	r2, [r0, #0]
 800bf84:	2500      	movs	r5, #0
 800bf86:	e7f8      	b.n	800bf7a <_calloc_r+0x16>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	f7fe f97c 	bl	800a286 <memset>
 800bf8e:	e7f4      	b.n	800bf7a <_calloc_r+0x16>

0800bf90 <__ascii_mbtowc>:
 800bf90:	b082      	sub	sp, #8
 800bf92:	b901      	cbnz	r1, 800bf96 <__ascii_mbtowc+0x6>
 800bf94:	a901      	add	r1, sp, #4
 800bf96:	b142      	cbz	r2, 800bfaa <__ascii_mbtowc+0x1a>
 800bf98:	b14b      	cbz	r3, 800bfae <__ascii_mbtowc+0x1e>
 800bf9a:	7813      	ldrb	r3, [r2, #0]
 800bf9c:	600b      	str	r3, [r1, #0]
 800bf9e:	7812      	ldrb	r2, [r2, #0]
 800bfa0:	1e10      	subs	r0, r2, #0
 800bfa2:	bf18      	it	ne
 800bfa4:	2001      	movne	r0, #1
 800bfa6:	b002      	add	sp, #8
 800bfa8:	4770      	bx	lr
 800bfaa:	4610      	mov	r0, r2
 800bfac:	e7fb      	b.n	800bfa6 <__ascii_mbtowc+0x16>
 800bfae:	f06f 0001 	mvn.w	r0, #1
 800bfb2:	e7f8      	b.n	800bfa6 <__ascii_mbtowc+0x16>

0800bfb4 <__ascii_wctomb>:
 800bfb4:	b149      	cbz	r1, 800bfca <__ascii_wctomb+0x16>
 800bfb6:	2aff      	cmp	r2, #255	; 0xff
 800bfb8:	bf85      	ittet	hi
 800bfba:	238a      	movhi	r3, #138	; 0x8a
 800bfbc:	6003      	strhi	r3, [r0, #0]
 800bfbe:	700a      	strbls	r2, [r1, #0]
 800bfc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfc4:	bf98      	it	ls
 800bfc6:	2001      	movls	r0, #1
 800bfc8:	4770      	bx	lr
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4770      	bx	lr
	...

0800bfd0 <fiprintf>:
 800bfd0:	b40e      	push	{r1, r2, r3}
 800bfd2:	b503      	push	{r0, r1, lr}
 800bfd4:	4601      	mov	r1, r0
 800bfd6:	ab03      	add	r3, sp, #12
 800bfd8:	4805      	ldr	r0, [pc, #20]	; (800bff0 <fiprintf+0x20>)
 800bfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfde:	6800      	ldr	r0, [r0, #0]
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	f7ff fcf1 	bl	800b9c8 <_vfiprintf_r>
 800bfe6:	b002      	add	sp, #8
 800bfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfec:	b003      	add	sp, #12
 800bfee:	4770      	bx	lr
 800bff0:	20000064 	.word	0x20000064

0800bff4 <__swhatbuf_r>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	2900      	cmp	r1, #0
 800bffe:	b096      	sub	sp, #88	; 0x58
 800c000:	4615      	mov	r5, r2
 800c002:	461e      	mov	r6, r3
 800c004:	da0d      	bge.n	800c022 <__swhatbuf_r+0x2e>
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c00c:	f04f 0100 	mov.w	r1, #0
 800c010:	bf0c      	ite	eq
 800c012:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c016:	2340      	movne	r3, #64	; 0x40
 800c018:	2000      	movs	r0, #0
 800c01a:	6031      	str	r1, [r6, #0]
 800c01c:	602b      	str	r3, [r5, #0]
 800c01e:	b016      	add	sp, #88	; 0x58
 800c020:	bd70      	pop	{r4, r5, r6, pc}
 800c022:	466a      	mov	r2, sp
 800c024:	f000 f848 	bl	800c0b8 <_fstat_r>
 800c028:	2800      	cmp	r0, #0
 800c02a:	dbec      	blt.n	800c006 <__swhatbuf_r+0x12>
 800c02c:	9901      	ldr	r1, [sp, #4]
 800c02e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c032:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c036:	4259      	negs	r1, r3
 800c038:	4159      	adcs	r1, r3
 800c03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c03e:	e7eb      	b.n	800c018 <__swhatbuf_r+0x24>

0800c040 <__smakebuf_r>:
 800c040:	898b      	ldrh	r3, [r1, #12]
 800c042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c044:	079d      	lsls	r5, r3, #30
 800c046:	4606      	mov	r6, r0
 800c048:	460c      	mov	r4, r1
 800c04a:	d507      	bpl.n	800c05c <__smakebuf_r+0x1c>
 800c04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	6123      	str	r3, [r4, #16]
 800c054:	2301      	movs	r3, #1
 800c056:	6163      	str	r3, [r4, #20]
 800c058:	b002      	add	sp, #8
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	ab01      	add	r3, sp, #4
 800c05e:	466a      	mov	r2, sp
 800c060:	f7ff ffc8 	bl	800bff4 <__swhatbuf_r>
 800c064:	9900      	ldr	r1, [sp, #0]
 800c066:	4605      	mov	r5, r0
 800c068:	4630      	mov	r0, r6
 800c06a:	f7ff f87b 	bl	800b164 <_malloc_r>
 800c06e:	b948      	cbnz	r0, 800c084 <__smakebuf_r+0x44>
 800c070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c074:	059a      	lsls	r2, r3, #22
 800c076:	d4ef      	bmi.n	800c058 <__smakebuf_r+0x18>
 800c078:	f023 0303 	bic.w	r3, r3, #3
 800c07c:	f043 0302 	orr.w	r3, r3, #2
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	e7e3      	b.n	800c04c <__smakebuf_r+0xc>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	6020      	str	r0, [r4, #0]
 800c088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	6163      	str	r3, [r4, #20]
 800c092:	9b01      	ldr	r3, [sp, #4]
 800c094:	6120      	str	r0, [r4, #16]
 800c096:	b15b      	cbz	r3, 800c0b0 <__smakebuf_r+0x70>
 800c098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09c:	4630      	mov	r0, r6
 800c09e:	f000 f81d 	bl	800c0dc <_isatty_r>
 800c0a2:	b128      	cbz	r0, 800c0b0 <__smakebuf_r+0x70>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f023 0303 	bic.w	r3, r3, #3
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	431d      	orrs	r5, r3
 800c0b4:	81a5      	strh	r5, [r4, #12]
 800c0b6:	e7cf      	b.n	800c058 <__smakebuf_r+0x18>

0800c0b8 <_fstat_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d07      	ldr	r5, [pc, #28]	; (800c0d8 <_fstat_r+0x20>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	602b      	str	r3, [r5, #0]
 800c0c6:	f7f6 fe22 	bl	8002d0e <_fstat>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	d102      	bne.n	800c0d4 <_fstat_r+0x1c>
 800c0ce:	682b      	ldr	r3, [r5, #0]
 800c0d0:	b103      	cbz	r3, 800c0d4 <_fstat_r+0x1c>
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	bd38      	pop	{r3, r4, r5, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20000a1c 	.word	0x20000a1c

0800c0dc <_isatty_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d06      	ldr	r5, [pc, #24]	; (800c0f8 <_isatty_r+0x1c>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	f7f6 fe21 	bl	8002d2e <_isatty>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_isatty_r+0x1a>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_isatty_r+0x1a>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20000a1c 	.word	0x20000a1c

0800c0fc <abort>:
 800c0fc:	b508      	push	{r3, lr}
 800c0fe:	2006      	movs	r0, #6
 800c100:	f000 f82c 	bl	800c15c <raise>
 800c104:	2001      	movs	r0, #1
 800c106:	f7f6 fdb3 	bl	8002c70 <_exit>

0800c10a <_raise_r>:
 800c10a:	291f      	cmp	r1, #31
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4604      	mov	r4, r0
 800c110:	460d      	mov	r5, r1
 800c112:	d904      	bls.n	800c11e <_raise_r+0x14>
 800c114:	2316      	movs	r3, #22
 800c116:	6003      	str	r3, [r0, #0]
 800c118:	f04f 30ff 	mov.w	r0, #4294967295
 800c11c:	bd38      	pop	{r3, r4, r5, pc}
 800c11e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c120:	b112      	cbz	r2, 800c128 <_raise_r+0x1e>
 800c122:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c126:	b94b      	cbnz	r3, 800c13c <_raise_r+0x32>
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 f831 	bl	800c190 <_getpid_r>
 800c12e:	462a      	mov	r2, r5
 800c130:	4601      	mov	r1, r0
 800c132:	4620      	mov	r0, r4
 800c134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c138:	f000 b818 	b.w	800c16c <_kill_r>
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d00a      	beq.n	800c156 <_raise_r+0x4c>
 800c140:	1c59      	adds	r1, r3, #1
 800c142:	d103      	bne.n	800c14c <_raise_r+0x42>
 800c144:	2316      	movs	r3, #22
 800c146:	6003      	str	r3, [r0, #0]
 800c148:	2001      	movs	r0, #1
 800c14a:	e7e7      	b.n	800c11c <_raise_r+0x12>
 800c14c:	2400      	movs	r4, #0
 800c14e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c152:	4628      	mov	r0, r5
 800c154:	4798      	blx	r3
 800c156:	2000      	movs	r0, #0
 800c158:	e7e0      	b.n	800c11c <_raise_r+0x12>
	...

0800c15c <raise>:
 800c15c:	4b02      	ldr	r3, [pc, #8]	; (800c168 <raise+0xc>)
 800c15e:	4601      	mov	r1, r0
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	f7ff bfd2 	b.w	800c10a <_raise_r>
 800c166:	bf00      	nop
 800c168:	20000064 	.word	0x20000064

0800c16c <_kill_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d07      	ldr	r5, [pc, #28]	; (800c18c <_kill_r+0x20>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	4611      	mov	r1, r2
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	f7f6 fd69 	bl	8002c50 <_kill>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d102      	bne.n	800c188 <_kill_r+0x1c>
 800c182:	682b      	ldr	r3, [r5, #0]
 800c184:	b103      	cbz	r3, 800c188 <_kill_r+0x1c>
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	bf00      	nop
 800c18c:	20000a1c 	.word	0x20000a1c

0800c190 <_getpid_r>:
 800c190:	f7f6 bd56 	b.w	8002c40 <_getpid>

0800c194 <_init>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	bf00      	nop
 800c198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19a:	bc08      	pop	{r3}
 800c19c:	469e      	mov	lr, r3
 800c19e:	4770      	bx	lr

0800c1a0 <_fini>:
 800c1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a2:	bf00      	nop
 800c1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a6:	bc08      	pop	{r3}
 800c1a8:	469e      	mov	lr, r3
 800c1aa:	4770      	bx	lr

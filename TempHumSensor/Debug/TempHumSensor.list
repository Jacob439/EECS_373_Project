
TempHumSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031cc  080031cc  000041cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800320c  0800320c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800320c  0800320c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800320c  0800320c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800320c  0800320c  0000420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003210  08003210  00004210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003214  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08003220  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08003220  00005084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a017  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab3  00000000  00000000  0000f053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00010b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078e  00000000  00000000  00011500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283e8  00000000  00000000  00011c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c61c  00000000  00000000  0003a076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5faf  00000000  00000000  00046692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a4  00000000  00000000  0013c684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0013ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080031b4 	.word	0x080031b4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080031b4 	.word	0x080031b4

080001fc <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000204:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <initTempHumSensor+0x1c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6013      	str	r3, [r2, #0]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000028 	.word	0x20000028

0800021c <req_measurements>:

// send command to sensor
void req_measurements() {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000222:	f640 532c 	movw	r3, #3372	@ 0xd2c
 8000226:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <req_measurements+0x28>)
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	1d3a      	adds	r2, r7, #4
 800022e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2302      	movs	r3, #2
 8000236:	2188      	movs	r1, #136	@ 0x88
 8000238:	f000 fddc 	bl	8000df4 <HAL_I2C_Master_Transmit>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000028 	.word	0x20000028

08000248 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[4];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 4, 1000);
 800024e:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <read_raw_measurements+0x58>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	1d3a      	adds	r2, r7, #4
 8000254:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	2304      	movs	r3, #4
 800025c:	2189      	movs	r1, #137	@ 0x89
 800025e:	f000 fee1 	bl	8001024 <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000262:	793b      	ldrb	r3, [r7, #4]
 8000264:	021b      	lsls	r3, r3, #8
 8000266:	b21a      	sxth	r2, r3
 8000268:	797b      	ldrb	r3, [r7, #5]
 800026a:	b21b      	sxth	r3, r3
 800026c:	4313      	orrs	r3, r2
 800026e:	b21b      	sxth	r3, r3
 8000270:	b29b      	uxth	r3, r3
 8000272:	813b      	strh	r3, [r7, #8]
	data.hum = buf[2] << 8 | buf[3];
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	021b      	lsls	r3, r3, #8
 8000278:	b21a      	sxth	r2, r3
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	b21b      	sxth	r3, r3
 800027e:	4313      	orrs	r3, r2
 8000280:	b21b      	sxth	r3, r3
 8000282:	b29b      	uxth	r3, r3
 8000284:	817b      	strh	r3, [r7, #10]
	return data;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	2300      	movs	r3, #0
 800028c:	89ba      	ldrh	r2, [r7, #12]
 800028e:	f362 030f 	bfi	r3, r2, #0, #16
 8000292:	89fa      	ldrh	r2, [r7, #14]
 8000294:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000298:	4618      	mov	r0, r3
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000028 	.word	0x20000028

080002a4 <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	@ 0x28
 80002a8:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 80002aa:	f7ff ffb7 	bl	800021c <req_measurements>
	raw_data = read_raw_measurements();
 80002ae:	f7ff ffcb 	bl	8000248 <read_raw_measurements>
 80002b2:	4603      	mov	r3, r0
 80002b4:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 80002b6:	8abb      	ldrh	r3, [r7, #20]
 80002b8:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 80002ba:	8afb      	ldrh	r3, [r7, #22]
 80002bc:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 80002be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002c0:	ee07 3a90 	vmov	s15, r3
 80002c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002c8:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800032c <get_temp_hum+0x88>
 80002cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002d0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000330 <get_temp_hum+0x8c>
 80002d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002d8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000334 <get_temp_hum+0x90>
 80002dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80002e0:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 80002e4:	6a3b      	ldr	r3, [r7, #32]
 80002e6:	ee07 3a90 	vmov	s15, r3
 80002ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002ee:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800032c <get_temp_hum+0x88>
 80002f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002f6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000338 <get_temp_hum+0x94>
 80002fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002fe:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	f107 020c 	add.w	r2, r7, #12
 800030a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800030e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000312:	69ba      	ldr	r2, [r7, #24]
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	ee07 2a10 	vmov	s14, r2
 800031a:	ee07 3a90 	vmov	s15, r3
}
 800031e:	eeb0 0a47 	vmov.f32	s0, s14
 8000322:	eef0 0a67 	vmov.f32	s1, s15
 8000326:	3728      	adds	r7, #40	@ 0x28
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	477fff00 	.word	0x477fff00
 8000330:	439d8000 	.word	0x439d8000
 8000334:	42340000 	.word	0x42340000
 8000338:	42c80000 	.word	0x42c80000

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000342:	f000 f9aa 	bl	800069a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000346:	f000 f819 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034a:	f000 f89b 	bl	8000484 <MX_GPIO_Init>
  MX_I2C2_Init();
 800034e:	f000 f85b 	bl	8000408 <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TempHum_t data;
  initTempHumSensor(&hi2c2);
 8000352:	4809      	ldr	r0, [pc, #36]	@ (8000378 <main+0x3c>)
 8000354:	f7ff ff52 	bl	80001fc <initTempHumSensor>
  while (1)
  {
	  HAL_Delay(3000);
 8000358:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800035c:	f000 fa12 	bl	8000784 <HAL_Delay>
	  data = get_temp_hum();
 8000360:	f7ff ffa0 	bl	80002a4 <get_temp_hum>
 8000364:	eeb0 7a40 	vmov.f32	s14, s0
 8000368:	eef0 7a60 	vmov.f32	s15, s1
 800036c:	ed87 7a00 	vstr	s14, [r7]
 8000370:	edc7 7a01 	vstr	s15, [r7, #4]
	  HAL_Delay(3000);
 8000374:	bf00      	nop
 8000376:	e7ef      	b.n	8000358 <main+0x1c>
 8000378:	2000002c 	.word	0x2000002c

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	@ 0x58
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2244      	movs	r2, #68	@ 0x44
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f002 fee6 	bl	800315c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003a2:	f001 fa7f 	bl	80018a4 <HAL_PWREx_ControlVoltageScaling>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003ac:	f000 f882 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003b0:	2310      	movs	r3, #16
 80003b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003bc:	2360      	movs	r3, #96	@ 0x60
 80003be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fb0f 	bl	80019ec <HAL_RCC_OscConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003d4:	f000 f86e 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d8:	230f      	movs	r3, #15
 80003da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003dc:	2300      	movs	r3, #0
 80003de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ec:	463b      	mov	r3, r7
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 ff15 	bl	8002220 <HAL_RCC_ClockConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003fc:	f000 f85a 	bl	80004b4 <Error_Handler>
  }
}
 8000400:	bf00      	nop
 8000402:	3758      	adds	r7, #88	@ 0x58
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800040c:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <MX_I2C2_Init+0x74>)
 800040e:	4a1c      	ldr	r2, [pc, #112]	@ (8000480 <MX_I2C2_Init+0x78>)
 8000410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000412:	4b1a      	ldr	r3, [pc, #104]	@ (800047c <MX_I2C2_Init+0x74>)
 8000414:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000418:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800041a:	4b18      	ldr	r3, [pc, #96]	@ (800047c <MX_I2C2_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000420:	4b16      	ldr	r3, [pc, #88]	@ (800047c <MX_I2C2_Init+0x74>)
 8000422:	2201      	movs	r2, #1
 8000424:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000426:	4b15      	ldr	r3, [pc, #84]	@ (800047c <MX_I2C2_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <MX_I2C2_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000432:	4b12      	ldr	r3, [pc, #72]	@ (800047c <MX_I2C2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000438:	4b10      	ldr	r3, [pc, #64]	@ (800047c <MX_I2C2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043e:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <MX_I2C2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000444:	480d      	ldr	r0, [pc, #52]	@ (800047c <MX_I2C2_Init+0x74>)
 8000446:	f000 fc39 	bl	8000cbc <HAL_I2C_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000450:	f000 f830 	bl	80004b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000454:	2100      	movs	r1, #0
 8000456:	4809      	ldr	r0, [pc, #36]	@ (800047c <MX_I2C2_Init+0x74>)
 8000458:	f001 f96c 	bl	8001734 <HAL_I2CEx_ConfigAnalogFilter>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000462:	f000 f827 	bl	80004b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000466:	2100      	movs	r1, #0
 8000468:	4804      	ldr	r0, [pc, #16]	@ (800047c <MX_I2C2_Init+0x74>)
 800046a:	f001 f9ae 	bl	80017ca <HAL_I2CEx_ConfigDigitalFilter>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000474:	f000 f81e 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000002c 	.word	0x2000002c
 8000480:	40005800 	.word	0x40005800

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_GPIO_Init+0x2c>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <MX_GPIO_Init+0x2c>)
 8000490:	f043 0320 	orr.w	r3, r3, #32
 8000494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000496:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_GPIO_Init+0x2c>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049a:	f003 0320 	and.w	r3, r3, #32
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <Error_Handler+0x8>

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <HAL_MspInit+0x44>)
 80004c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <HAL_MspInit+0x44>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <HAL_MspInit+0x44>)
 80004d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <HAL_MspInit+0x44>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <HAL_MspInit+0x44>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_MspInit+0x44>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b0ae      	sub	sp, #184	@ 0xb8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	2294      	movs	r2, #148	@ 0x94
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f002 fe17 	bl	800315c <memset>
  if(hi2c->Instance==I2C2)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <HAL_I2C_MspInit+0xb0>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d13a      	bne.n	80005ae <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800053c:	2300      	movs	r3, #0
 800053e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4618      	mov	r0, r3
 8000546:	f002 f8f1 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000550:	f7ff ffb0 	bl	80004b4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000554:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <HAL_I2C_MspInit+0xb4>)
 8000556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000558:	4a18      	ldr	r2, [pc, #96]	@ (80005bc <HAL_I2C_MspInit+0xb4>)
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000560:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <HAL_I2C_MspInit+0xb4>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800056c:	2303      	movs	r3, #3
 800056e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000572:	2312      	movs	r3, #18
 8000574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000584:	2304      	movs	r3, #4
 8000586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800058a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800058e:	4619      	mov	r1, r3
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <HAL_I2C_MspInit+0xb8>)
 8000592:	f000 fa01 	bl	8000998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <HAL_I2C_MspInit+0xb4>)
 8000598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800059a:	4a08      	ldr	r2, [pc, #32]	@ (80005bc <HAL_I2C_MspInit+0xb4>)
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <HAL_I2C_MspInit+0xb4>)
 80005a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	37b8      	adds	r7, #184	@ 0xb8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40005800 	.word	0x40005800
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48001400 	.word	0x48001400

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <NMI_Handler+0x4>

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <MemManage_Handler+0x4>

080005dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f893 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <SystemInit+0x20>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800062e:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <SystemInit+0x20>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000680 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800064c:	f7ff ffea 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000676:	f002 fd79 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800067a:	f7ff fe5f 	bl	800033c <main>

0800067e <LoopForever>:

LoopForever:
    b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000680:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800068c:	08003214 	.word	0x08003214
  ldr r2, =_sbss
 8000690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000694:	20000084 	.word	0x20000084

08000698 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_IRQHandler>

0800069a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f943 	bl	8000930 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f80e 	bl	80006cc <HAL_InitTick>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	e001      	b.n	80006c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006bc:	f7ff ff00 	bl	80004c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <HAL_InitTick+0x6c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d023      	beq.n	8000728 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <HAL_InitTick+0x70>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <HAL_InitTick+0x6c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f941 	bl	800097e <HAL_SYSTICK_Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d10f      	bne.n	8000722 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d809      	bhi.n	800071c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000708:	2200      	movs	r2, #0
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	f000 f919 	bl	8000946 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000714:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <HAL_InitTick+0x74>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	e007      	b.n	800072c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e004      	b.n	800072c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	e001      	b.n	800072c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000008 	.word	0x20000008
 800073c:	20000000 	.word	0x20000000
 8000740:	20000004 	.word	0x20000004

08000744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_IncTick+0x20>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_IncTick+0x24>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a04      	ldr	r2, [pc, #16]	@ (8000768 <HAL_IncTick+0x24>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000008 	.word	0x20000008
 8000768:	20000080 	.word	0x20000080

0800076c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <HAL_GetTick+0x14>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000080 	.word	0x20000080

08000784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800078c:	f7ff ffee 	bl	800076c <HAL_GetTick>
 8000790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800079c:	d005      	beq.n	80007aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <HAL_Delay+0x44>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007aa:	bf00      	nop
 80007ac:	f7ff ffde 	bl	800076c <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d8f7      	bhi.n	80007ac <HAL_Delay+0x28>
  {
  }
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	@ (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	@ (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	@ (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	@ 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	@ 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008fc:	d301      	bcc.n	8000902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fe:	2301      	movs	r3, #1
 8000900:	e00f      	b.n	8000922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <SysTick_Config+0x40>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3b01      	subs	r3, #1
 8000908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090a:	210f      	movs	r1, #15
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f7ff ff8e 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <SysTick_Config+0x40>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <SysTick_Config+0x40>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	e000e010 	.word	0xe000e010

08000930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff47 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000958:	f7ff ff5c 	bl	8000814 <__NVIC_GetPriorityGrouping>
 800095c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	6978      	ldr	r0, [r7, #20]
 8000964:	f7ff ff8e 	bl	8000884 <NVIC_EncodePriority>
 8000968:	4602      	mov	r2, r0
 800096a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff5d 	bl	8000830 <__NVIC_SetPriority>
}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffb0 	bl	80008ec <SysTick_Config>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a6:	e166      	b.n	8000c76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 8158 	beq.w	8000c70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d005      	beq.n	80009d8 <HAL_GPIO_Init+0x40>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d130      	bne.n	8000a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68da      	ldr	r2, [r3, #12]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a0e:	2201      	movs	r2, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	091b      	lsrs	r3, r3, #4
 8000a24:	f003 0201 	and.w	r2, r3, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d017      	beq.n	8000a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d123      	bne.n	8000aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	08da      	lsrs	r2, r3, #3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3208      	adds	r2, #8
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	220f      	movs	r2, #15
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	f003 0307 	and.w	r3, r3, #7
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	08da      	lsrs	r2, r3, #3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3208      	adds	r2, #8
 8000ac4:	6939      	ldr	r1, [r7, #16]
 8000ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0203 	and.w	r2, r3, #3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 80b2 	beq.w	8000c70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	4b61      	ldr	r3, [pc, #388]	@ (8000c94 <HAL_GPIO_Init+0x2fc>)
 8000b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b10:	4a60      	ldr	r2, [pc, #384]	@ (8000c94 <HAL_GPIO_Init+0x2fc>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b18:	4b5e      	ldr	r3, [pc, #376]	@ (8000c94 <HAL_GPIO_Init+0x2fc>)
 8000b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b24:	4a5c      	ldr	r2, [pc, #368]	@ (8000c98 <HAL_GPIO_Init+0x300>)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b4e:	d02b      	beq.n	8000ba8 <HAL_GPIO_Init+0x210>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a52      	ldr	r2, [pc, #328]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d025      	beq.n	8000ba4 <HAL_GPIO_Init+0x20c>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a51      	ldr	r2, [pc, #324]	@ (8000ca0 <HAL_GPIO_Init+0x308>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d01f      	beq.n	8000ba0 <HAL_GPIO_Init+0x208>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a50      	ldr	r2, [pc, #320]	@ (8000ca4 <HAL_GPIO_Init+0x30c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d019      	beq.n	8000b9c <HAL_GPIO_Init+0x204>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ca8 <HAL_GPIO_Init+0x310>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d013      	beq.n	8000b98 <HAL_GPIO_Init+0x200>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a4e      	ldr	r2, [pc, #312]	@ (8000cac <HAL_GPIO_Init+0x314>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d00d      	beq.n	8000b94 <HAL_GPIO_Init+0x1fc>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a4d      	ldr	r2, [pc, #308]	@ (8000cb0 <HAL_GPIO_Init+0x318>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d007      	beq.n	8000b90 <HAL_GPIO_Init+0x1f8>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb4 <HAL_GPIO_Init+0x31c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d101      	bne.n	8000b8c <HAL_GPIO_Init+0x1f4>
 8000b88:	2307      	movs	r3, #7
 8000b8a:	e00e      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	e00c      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000b90:	2306      	movs	r3, #6
 8000b92:	e00a      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000b94:	2305      	movs	r3, #5
 8000b96:	e008      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000b98:	2304      	movs	r3, #4
 8000b9a:	e006      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e004      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e002      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <HAL_GPIO_Init+0x212>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	f002 0203 	and.w	r2, r2, #3
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bba:	4937      	ldr	r1, [pc, #220]	@ (8000c98 <HAL_GPIO_Init+0x300>)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bec:	4a32      	ldr	r2, [pc, #200]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bf2:	4b31      	ldr	r3, [pc, #196]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c16:	4a28      	ldr	r2, [pc, #160]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c1c:	4b26      	ldr	r3, [pc, #152]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c40:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c6a:	4a13      	ldr	r2, [pc, #76]	@ (8000cb8 <HAL_GPIO_Init+0x320>)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f47f ae91 	bne.w	80009a8 <HAL_GPIO_Init+0x10>
  }
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000
 8000c9c:	48000400 	.word	0x48000400
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	48000c00 	.word	0x48000c00
 8000ca8:	48001000 	.word	0x48001000
 8000cac:	48001400 	.word	0x48001400
 8000cb0:	48001800 	.word	0x48001800
 8000cb4:	48001c00 	.word	0x48001c00
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e08d      	b.n	8000dea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fc10 	bl	8000508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2224      	movs	r2, #36	@ 0x24
 8000cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000d0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d107      	bne.n	8000d36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	e006      	b.n	8000d44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000d42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d108      	bne.n	8000d5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	e007      	b.n	8000d6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69d9      	ldr	r1, [r3, #28]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0201 	orr.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	817b      	strh	r3, [r7, #10]
 8000e04:	4613      	mov	r3, r2
 8000e06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b20      	cmp	r3, #32
 8000e12:	f040 80fd 	bne.w	8001010 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_I2C_Master_Transmit+0x30>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e0f6      	b.n	8001012 <HAL_I2C_Master_Transmit+0x21e>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e2c:	f7ff fc9e 	bl	800076c <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2319      	movs	r3, #25
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f000 fa0a 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0e1      	b.n	8001012 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2221      	movs	r2, #33	@ 0x21
 8000e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2210      	movs	r2, #16
 8000e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2200      	movs	r2, #0
 8000e62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	893a      	ldrh	r2, [r7, #8]
 8000e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	2bff      	cmp	r3, #255	@ 0xff
 8000e7e:	d906      	bls.n	8000e8e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	22ff      	movs	r2, #255	@ 0xff
 8000e84:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e007      	b.n	8000e9e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000e98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e9c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d024      	beq.n	8000ef0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	8979      	ldrh	r1, [r7, #10]
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800101c <HAL_I2C_Master_Transmit+0x228>)
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 fbf1 	bl	80016d0 <I2C_TransferConfig>
 8000eee:	e066      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	8979      	ldrh	r1, [r7, #10]
 8000ef8:	4b48      	ldr	r3, [pc, #288]	@ (800101c <HAL_I2C_Master_Transmit+0x228>)
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 fbe6 	bl	80016d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f04:	e05b      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	6a39      	ldr	r1, [r7, #32]
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f000 f9f3 	bl	80012f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e07b      	b.n	8001012 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d034      	beq.n	8000fbe <HAL_I2C_Master_Transmit+0x1ca>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d130      	bne.n	8000fbe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	2200      	movs	r2, #0
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f976 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e04d      	b.n	8001012 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2bff      	cmp	r3, #255	@ 0xff
 8000f7e:	d90e      	bls.n	8000f9e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	22ff      	movs	r2, #255	@ 0xff
 8000f84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	8979      	ldrh	r1, [r7, #10]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 fb9a 	bl	80016d0 <I2C_TransferConfig>
 8000f9c:	e00f      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	8979      	ldrh	r1, [r7, #10]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 fb89 	bl	80016d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d19e      	bne.n	8000f06 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	6a39      	ldr	r1, [r7, #32]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 f9d9 	bl	8001384 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e01a      	b.n	8001012 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6859      	ldr	r1, [r3, #4]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <HAL_I2C_Master_Transmit+0x22c>)
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001010:	2302      	movs	r3, #2
  }
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	80002000 	.word	0x80002000
 8001020:	fe00e800 	.word	0xfe00e800

08001024 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	817b      	strh	r3, [r7, #10]
 8001034:	4613      	mov	r3, r2
 8001036:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b20      	cmp	r3, #32
 8001042:	f040 80db 	bne.w	80011fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_I2C_Master_Receive+0x30>
 8001050:	2302      	movs	r3, #2
 8001052:	e0d4      	b.n	80011fe <HAL_I2C_Master_Receive+0x1da>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800105c:	f7ff fb86 	bl	800076c <HAL_GetTick>
 8001060:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2319      	movs	r3, #25
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f8f2 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0bf      	b.n	80011fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2222      	movs	r2, #34	@ 0x22
 8001082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2210      	movs	r2, #16
 800108a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	893a      	ldrh	r2, [r7, #8]
 800109e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2bff      	cmp	r3, #255	@ 0xff
 80010ae:	d90e      	bls.n	80010ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	22ff      	movs	r2, #255	@ 0xff
 80010b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	8979      	ldrh	r1, [r7, #10]
 80010be:	4b52      	ldr	r3, [pc, #328]	@ (8001208 <HAL_I2C_Master_Receive+0x1e4>)
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 fb02 	bl	80016d0 <I2C_TransferConfig>
 80010cc:	e06d      	b.n	80011aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	8979      	ldrh	r1, [r7, #10]
 80010e0:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <HAL_I2C_Master_Receive+0x1e4>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 faf1 	bl	80016d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80010ee:	e05c      	b.n	80011aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	6a39      	ldr	r1, [r7, #32]
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 f989 	bl	800140c <I2C_WaitOnRXNEFlagUntilTimeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e07c      	b.n	80011fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001120:	3b01      	subs	r3, #1
 8001122:	b29a      	uxth	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800112c:	b29b      	uxth	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800113a:	b29b      	uxth	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d034      	beq.n	80011aa <HAL_I2C_Master_Receive+0x186>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	d130      	bne.n	80011aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	@ 0x80
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f880 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e04d      	b.n	80011fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001166:	b29b      	uxth	r3, r3
 8001168:	2bff      	cmp	r3, #255	@ 0xff
 800116a:	d90e      	bls.n	800118a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	22ff      	movs	r2, #255	@ 0xff
 8001170:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001176:	b2da      	uxtb	r2, r3
 8001178:	8979      	ldrh	r1, [r7, #10]
 800117a:	2300      	movs	r3, #0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f000 faa4 	bl	80016d0 <I2C_TransferConfig>
 8001188:	e00f      	b.n	80011aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800118e:	b29a      	uxth	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001198:	b2da      	uxtb	r2, r3
 800119a:	8979      	ldrh	r1, [r7, #10]
 800119c:	2300      	movs	r3, #0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 fa93 	bl	80016d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d19d      	bne.n	80010f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	6a39      	ldr	r1, [r7, #32]
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f000 f8e3 	bl	8001384 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e01a      	b.n	80011fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2220      	movs	r2, #32
 80011ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <HAL_I2C_Master_Receive+0x1e8>)
 80011dc:	400b      	ands	r3, r1
 80011de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2220      	movs	r2, #32
 80011e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e000      	b.n	80011fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80011fc:	2302      	movs	r3, #2
  }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	80002400 	.word	0x80002400
 800120c:	fe00e800 	.word	0xfe00e800

08001210 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d103      	bne.n	800122e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b01      	cmp	r3, #1
 800123a:	d007      	beq.n	800124c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	619a      	str	r2, [r3, #24]
  }
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4613      	mov	r3, r2
 8001266:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001268:	e031      	b.n	80012ce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d02d      	beq.n	80012ce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001272:	f7ff fa7b 	bl	800076c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d302      	bcc.n	8001288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d122      	bne.n	80012ce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4013      	ands	r3, r2
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d113      	bne.n	80012ce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f043 0220 	orr.w	r2, r3, #32
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2220      	movs	r2, #32
 80012b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4013      	ands	r3, r2
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	429a      	cmp	r2, r3
 80012dc:	bf0c      	ite	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	2300      	movne	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d0be      	beq.n	800126a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001302:	e033      	b.n	800136c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f901 	bl	8001510 <I2C_IsErrorOccurred>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e031      	b.n	800137c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d025      	beq.n	800136c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001320:	f7ff fa24 	bl	800076c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	d302      	bcc.n	8001336 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11a      	bne.n	800136c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b02      	cmp	r3, #2
 8001342:	d013      	beq.n	800136c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001348:	f043 0220 	orr.w	r2, r3, #32
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2220      	movs	r2, #32
 8001354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e007      	b.n	800137c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b02      	cmp	r3, #2
 8001378:	d1c4      	bne.n	8001304 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001390:	e02f      	b.n	80013f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f8ba 	bl	8001510 <I2C_IsErrorOccurred>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e02d      	b.n	8001402 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013a6:	f7ff f9e1 	bl	800076c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d302      	bcc.n	80013bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11a      	bne.n	80013f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d013      	beq.n	80013f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f043 0220 	orr.w	r2, r3, #32
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2220      	movs	r2, #32
 80013da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e007      	b.n	8001402 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	2b20      	cmp	r3, #32
 80013fe:	d1c8      	bne.n	8001392 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001418:	e06b      	b.n	80014f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 f876 	bl	8001510 <I2C_IsErrorOccurred>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e069      	b.n	8001502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	2b20      	cmp	r3, #32
 800143a:	d138      	bne.n	80014ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b04      	cmp	r3, #4
 8001448:	d105      	bne.n	8001456 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e055      	b.n	8001502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b10      	cmp	r3, #16
 8001462:	d107      	bne.n	8001474 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2210      	movs	r2, #16
 800146a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2204      	movs	r2, #4
 8001470:	645a      	str	r2, [r3, #68]	@ 0x44
 8001472:	e002      	b.n	800147a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800148e:	400b      	ands	r3, r1
 8001490:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2220      	movs	r2, #32
 8001496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e029      	b.n	8001502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ae:	f7ff f95d 	bl	800076c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d302      	bcc.n	80014c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d116      	bne.n	80014f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d00f      	beq.n	80014f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f043 0220 	orr.w	r2, r3, #32
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2220      	movs	r2, #32
 80014e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e007      	b.n	8001502 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d18c      	bne.n	800141a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	fe00e800 	.word	0xfe00e800

08001510 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d068      	beq.n	800160e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2210      	movs	r2, #16
 8001542:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001544:	e049      	b.n	80015da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d045      	beq.n	80015da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800154e:	f7ff f90d 	bl	800076c <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	429a      	cmp	r2, r3
 800155c:	d302      	bcc.n	8001564 <I2C_IsErrorOccurred+0x54>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d13a      	bne.n	80015da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001576:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001586:	d121      	bne.n	80015cc <I2C_IsErrorOccurred+0xbc>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800158e:	d01d      	beq.n	80015cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001590:	7cfb      	ldrb	r3, [r7, #19]
 8001592:	2b20      	cmp	r3, #32
 8001594:	d01a      	beq.n	80015cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015a6:	f7ff f8e1 	bl	800076c <HAL_GetTick>
 80015aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ac:	e00e      	b.n	80015cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015ae:	f7ff f8dd 	bl	800076c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b19      	cmp	r3, #25
 80015ba:	d907      	bls.n	80015cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80015ca:	e006      	b.n	80015da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d1e9      	bne.n	80015ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d003      	beq.n	80015f0 <I2C_IsErrorOccurred+0xe0>
 80015e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0aa      	beq.n	8001546 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80015f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2220      	movs	r2, #32
 80015fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001652:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001674:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800167c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001680:	2b00      	cmp	r3, #0
 8001682:	d01c      	beq.n	80016be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fdc3 	bl	8001210 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <I2C_IsErrorOccurred+0x1bc>)
 8001696:	400b      	ands	r3, r1
 8001698:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80016be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3728      	adds	r7, #40	@ 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	fe00e800 	.word	0xfe00e800

080016d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	817b      	strh	r3, [r7, #10]
 80016de:	4613      	mov	r3, r2
 80016e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016e2:	897b      	ldrh	r3, [r7, #10]
 80016e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016e8:	7a7b      	ldrb	r3, [r7, #9]
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	0d5b      	lsrs	r3, r3, #21
 800170a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <I2C_TransferConfig+0x60>)
 8001710:	430b      	orrs	r3, r1
 8001712:	43db      	mvns	r3, r3
 8001714:	ea02 0103 	and.w	r1, r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	03ff63ff 	.word	0x03ff63ff

08001734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b20      	cmp	r3, #32
 8001748:	d138      	bne.n	80017bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001754:	2302      	movs	r3, #2
 8001756:	e032      	b.n	80017be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	@ 0x24
 8001764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e000      	b.n	80017be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017bc:	2302      	movs	r3, #2
  }
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d139      	bne.n	8001854 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e033      	b.n	8001856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2224      	movs	r2, #36	@ 0x24
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800181c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2220      	movs	r2, #32
 8001844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001874:	d102      	bne.n	800187c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187a:	e00b      	b.n	8001894 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800187e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800188a:	d102      	bne.n	8001892 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800188c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001890:	e000      	b.n	8001894 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001892:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d141      	bne.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018b2:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018be:	d131      	bne.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c0:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018c6:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018d8:	4a41      	ldr	r2, [pc, #260]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018e0:	4b40      	ldr	r3, [pc, #256]	@ (80019e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2232      	movs	r2, #50	@ 0x32
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	4a3f      	ldr	r2, [pc, #252]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	0c9b      	lsrs	r3, r3, #18
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018f6:	e002      	b.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fe:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800190a:	d102      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f2      	bne.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001912:	4b33      	ldr	r3, [pc, #204]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800191e:	d158      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e057      	b.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001924:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800192a:	4a2d      	ldr	r2, [pc, #180]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001930:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001934:	e04d      	b.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800193c:	d141      	bne.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800194a:	d131      	bne.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001958:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800195c:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001964:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800196a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800196c:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2232      	movs	r2, #50	@ 0x32
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001982:	e002      	b.n	800198a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3b01      	subs	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001996:	d102      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f2      	bne.n	8001984 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d112      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e011      	b.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019c0:	e007      	b.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40007000 	.word	0x40007000
 80019e4:	20000000 	.word	0x20000000
 80019e8:	431bde83 	.word	0x431bde83

080019ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f000 bc08 	b.w	8002210 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a00:	4b96      	ldr	r3, [pc, #600]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a0a:	4b94      	ldr	r3, [pc, #592]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80e4 	beq.w	8001bea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4c>
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	f040 808b 	bne.w	8001b46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	f040 8087 	bne.w	8001b46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a38:	4b88      	ldr	r3, [pc, #544]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_OscConfig+0x64>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e3df      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1a      	ldr	r2, [r3, #32]
 8001a54:	4b81      	ldr	r3, [pc, #516]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_RCC_OscConfig+0x7e>
 8001a60:	4b7e      	ldr	r3, [pc, #504]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a68:	e005      	b.n	8001a76 <HAL_RCC_OscConfig+0x8a>
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d223      	bcs.n	8001ac2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fd94 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e3c0      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a8e:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a72      	ldr	r2, [pc, #456]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b70      	ldr	r3, [pc, #448]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	496d      	ldr	r1, [pc, #436]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aac:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	4968      	ldr	r1, [pc, #416]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e025      	b.n	8001b0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac2:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a65      	ldr	r2, [pc, #404]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4960      	ldr	r1, [pc, #384]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	495b      	ldr	r1, [pc, #364]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fd54 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e380      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b0e:	f000 fcc1 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b51      	ldr	r3, [pc, #324]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	4950      	ldr	r1, [pc, #320]	@ (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	4a4e      	ldr	r2, [pc, #312]	@ (8001c64 <HAL_RCC_OscConfig+0x278>)
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fdca 	bl	80006cc <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d052      	beq.n	8001be8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	e364      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d032      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b4e:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a42      	ldr	r2, [pc, #264]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe fe07 	bl	800076c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b62:	f7fe fe03 	bl	800076c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e34d      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b74:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b80:	4b36      	ldr	r3, [pc, #216]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a35      	ldr	r2, [pc, #212]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4930      	ldr	r1, [pc, #192]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	492b      	ldr	r1, [pc, #172]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
 8001bb2:	e01a      	b.n	8001bea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bb4:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a28      	ldr	r2, [pc, #160]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fdd4 	bl	800076c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc8:	f7fe fdd0 	bl	800076c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e31a      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1dc>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d073      	beq.n	8001cde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_OscConfig+0x21c>
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d10e      	bne.n	8001c20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d10b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d063      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2f0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d15f      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e2f7      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c28:	d106      	bne.n	8001c38 <HAL_RCC_OscConfig+0x24c>
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e025      	b.n	8001c84 <HAL_RCC_OscConfig+0x298>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c40:	d114      	bne.n	8001c6c <HAL_RCC_OscConfig+0x280>
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a02      	ldr	r2, [pc, #8]	@ (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e013      	b.n	8001c84 <HAL_RCC_OscConfig+0x298>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	080031cc 	.word	0x080031cc
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a9f      	ldr	r2, [pc, #636]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fd6e 	bl	800076c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7fe fd6a 	bl	800076c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e2b4      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca6:	4b92      	ldr	r3, [pc, #584]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2a8>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe fd5a 	bl	800076c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7fe fd56 	bl	800076c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	@ 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e2a0      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cce:	4b88      	ldr	r3, [pc, #544]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2d0>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d060      	beq.n	8001dac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_OscConfig+0x310>
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d119      	bne.n	8001d2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d116      	bne.n	8001d2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfc:	4b7c      	ldr	r3, [pc, #496]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_OscConfig+0x328>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e27d      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b76      	ldr	r3, [pc, #472]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	4973      	ldr	r1, [pc, #460]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d28:	e040      	b.n	8001dac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d023      	beq.n	8001d7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d32:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7fe fd15 	bl	800076c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7fe fd11 	bl	800076c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e25b      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	4b65      	ldr	r3, [pc, #404]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b62      	ldr	r3, [pc, #392]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	495f      	ldr	r1, [pc, #380]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
 8001d78:	e018      	b.n	8001dac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7fe fcf1 	bl	800076c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7fe fced 	bl	800076c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e237      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da0:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d03c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7fe fccc 	bl	800076c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7fe fcc8 	bl	800076c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e212      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dea:	4b41      	ldr	r3, [pc, #260]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ef      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x3ec>
 8001df8:	e01b      	b.n	8001e32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e00:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fcaf 	bl	800076c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e12:	f7fe fcab 	bl	800076c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1f5      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e24:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1ef      	bne.n	8001e12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80a6 	beq.w	8001f8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10d      	bne.n	8001e6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	4a26      	ldr	r2, [pc, #152]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <HAL_RCC_OscConfig+0x508>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d118      	bne.n	8001eaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <HAL_RCC_OscConfig+0x508>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_RCC_OscConfig+0x508>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e84:	f7fe fc72 	bl	800076c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7fe fc6e 	bl	800076c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1b8      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_RCC_OscConfig+0x508>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4d8>
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec2:	e029      	b.n	8001f18 <HAL_RCC_OscConfig+0x52c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d115      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x50c>
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed2:	4a07      	ldr	r2, [pc, #28]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee2:	4a03      	ldr	r2, [pc, #12]	@ (8001ef0 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eec:	e014      	b.n	8001f18 <HAL_RCC_OscConfig+0x52c>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	4b9d      	ldr	r3, [pc, #628]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	4a9c      	ldr	r2, [pc, #624]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f08:	4b99      	ldr	r3, [pc, #612]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	4a98      	ldr	r2, [pc, #608]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d016      	beq.n	8001f4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7fe fc24 	bl	800076c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe fc20 	bl	800076c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e168      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b8c      	ldr	r3, [pc, #560]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ed      	beq.n	8001f28 <HAL_RCC_OscConfig+0x53c>
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7fe fc0d 	bl	800076c <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7fe fc09 	bl	800076c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e151      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f6c:	4b80      	ldr	r3, [pc, #512]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ed      	bne.n	8001f56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7a:	7ffb      	ldrb	r3, [r7, #31]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f80:	4b7b      	ldr	r3, [pc, #492]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	4a7a      	ldr	r2, [pc, #488]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03c      	beq.n	8002012 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01c      	beq.n	8001fda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fa0:	4b73      	ldr	r3, [pc, #460]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fa6:	4a72      	ldr	r2, [pc, #456]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fbdc 	bl	800076c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb8:	f7fe fbd8 	bl	800076c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e122      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fca:	4b69      	ldr	r3, [pc, #420]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ef      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x5cc>
 8001fd8:	e01b      	b.n	8002012 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fda:	4b65      	ldr	r3, [pc, #404]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fe0:	4a63      	ldr	r2, [pc, #396]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7fe fbbf 	bl	800076c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff2:	f7fe fbbb 	bl	800076c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e105      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002004:	4b5a      	ldr	r3, [pc, #360]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8002006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ef      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80f9 	beq.w	800220e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	2b02      	cmp	r3, #2
 8002022:	f040 80cf 	bne.w	80021c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002026:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	429a      	cmp	r2, r3
 8002038:	d12c      	bne.n	8002094 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	3b01      	subs	r3, #1
 8002046:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d123      	bne.n	8002094 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002056:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d11b      	bne.n	8002094 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002066:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d113      	bne.n	8002094 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	3b01      	subs	r3, #1
 800207a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d109      	bne.n	8002094 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	3b01      	subs	r3, #1
 800208e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d071      	beq.n	8002178 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d068      	beq.n	800216c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800209a:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020a6:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0ac      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 80020bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c2:	f7fe fb53 	bl	800076c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7fe fb4f 	bl	800076c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e099      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020dc:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <HAL_RCC_OscConfig+0x788>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020f8:	3a01      	subs	r2, #1
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002102:	0212      	lsls	r2, r2, #8
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800210a:	0852      	lsrs	r2, r2, #1
 800210c:	3a01      	subs	r2, #1
 800210e:	0552      	lsls	r2, r2, #21
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	0652      	lsls	r2, r2, #25
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002122:	06d2      	lsls	r2, r2, #27
 8002124:	430a      	orrs	r2, r1
 8002126:	4912      	ldr	r1, [pc, #72]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800212c:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0f      	ldr	r2, [pc, #60]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002138:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002144:	f7fe fb12 	bl	800076c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe fb0e 	bl	800076c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e058      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <HAL_RCC_OscConfig+0x784>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216a:	e050      	b.n	800220e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e04f      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
 8002170:	40021000 	.word	0x40021000
 8002174:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d144      	bne.n	800220e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002184:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a20      	ldr	r2, [pc, #128]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800219a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800219c:	f7fe fae6 	bl	800076c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fae2 	bl	800076c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e02c      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x7b8>
 80021c2:	e024      	b.n	800220e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d01f      	beq.n	800220a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 80021d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe fac9 	bl	800076c <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe fac5 	bl	800076c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4905      	ldr	r1, [pc, #20]	@ (8002218 <HAL_RCC_OscConfig+0x82c>)
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_RCC_OscConfig+0x830>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
 8002208:	e001      	b.n	800220e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	feeefffc 	.word	0xfeeefffc

08002220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e11d      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b90      	ldr	r3, [pc, #576]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d910      	bls.n	8002268 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b8d      	ldr	r3, [pc, #564]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 020f 	bic.w	r2, r3, #15
 800224e:	498b      	ldr	r1, [pc, #556]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b89      	ldr	r3, [pc, #548]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e105      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d010      	beq.n	8002296 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	4b81      	ldr	r3, [pc, #516]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002280:	429a      	cmp	r2, r3
 8002282:	d908      	bls.n	8002296 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b7e      	ldr	r3, [pc, #504]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	497b      	ldr	r1, [pc, #492]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d079      	beq.n	8002396 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d11e      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022aa:	4b75      	ldr	r3, [pc, #468]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e0dc      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80022ba:	f000 f9d1 	bl	8002660 <RCC_GetSysClockFreqFromPLLSource>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a70      	ldr	r2, [pc, #448]	@ (8002484 <HAL_RCC_ClockConfig+0x264>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d946      	bls.n	8002354 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d140      	bne.n	8002354 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022da:	4a69      	ldr	r2, [pc, #420]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80022dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e035      	b.n	8002354 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f0:	4b63      	ldr	r3, [pc, #396]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d115      	bne.n	8002328 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b9      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002308:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d109      	bne.n	8002328 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0ad      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002318:	4b59      	ldr	r3, [pc, #356]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0a5      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002328:	f000 f8b4 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 800232c:	4603      	mov	r3, r0
 800232e:	4a55      	ldr	r2, [pc, #340]	@ (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d90f      	bls.n	8002354 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002334:	4b52      	ldr	r3, [pc, #328]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002340:	4b4f      	ldr	r3, [pc, #316]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002348:	4a4d      	ldr	r2, [pc, #308]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 800234a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800234e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002354:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 0203 	bic.w	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4947      	ldr	r1, [pc, #284]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002366:	f7fe fa01 	bl	800076c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236c:	e00a      	b.n	8002384 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236e:	f7fe f9fd 	bl	800076c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e077      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002384:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 020c 	and.w	r2, r3, #12
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	429a      	cmp	r2, r3
 8002394:	d1eb      	bne.n	800236e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b80      	cmp	r3, #128	@ 0x80
 800239a:	d105      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800239c:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a37      	ldr	r2, [pc, #220]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80023a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d208      	bcs.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	492b      	ldr	r1, [pc, #172]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d6:	4b29      	ldr	r3, [pc, #164]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d210      	bcs.n	8002406 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e4:	4b25      	ldr	r3, [pc, #148]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 020f 	bic.w	r2, r3, #15
 80023ec:	4923      	ldr	r1, [pc, #140]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f4:	4b21      	ldr	r3, [pc, #132]	@ (800247c <HAL_RCC_ClockConfig+0x25c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d001      	beq.n	8002406 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e036      	b.n	8002474 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002412:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4918      	ldr	r1, [pc, #96]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4910      	ldr	r1, [pc, #64]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002444:	f000 f826 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_RCC_ClockConfig+0x260>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	490c      	ldr	r1, [pc, #48]	@ (8002488 <HAL_RCC_ClockConfig+0x268>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
 8002460:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <HAL_RCC_ClockConfig+0x26c>)
 8002462:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002464:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_RCC_ClockConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f92f 	bl	80006cc <HAL_InitTick>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

  return status;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40022000 	.word	0x40022000
 8002480:	40021000 	.word	0x40021000
 8002484:	04c4b400 	.word	0x04c4b400
 8002488:	080031cc 	.word	0x080031cc
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a2:	4b3e      	ldr	r3, [pc, #248]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ac:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d11e      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024c8:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d4:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f0:	4a2b      	ldr	r2, [pc, #172]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002504:	e00a      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d102      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e004      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d101      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800251a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d134      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002522:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0xa6>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d003      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0xac>
 8002538:	e005      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800253a:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800253c:	617b      	str	r3, [r7, #20]
      break;
 800253e:	e005      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002542:	617b      	str	r3, [r7, #20]
      break;
 8002544:	e002      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	617b      	str	r3, [r7, #20]
      break;
 800254a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800254c:	4b13      	ldr	r3, [pc, #76]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3301      	adds	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	fb03 f202 	mul.w	r2, r3, r2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	0e5b      	lsrs	r3, r3, #25
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	3301      	adds	r3, #1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800258c:	69bb      	ldr	r3, [r7, #24]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	080031dc 	.word	0x080031dc
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200

080025ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025b8:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025c4:	f7ff f94e 	bl	8001864 <HAL_PWREx_GetVoltageRange>
 80025c8:	6178      	str	r0, [r7, #20]
 80025ca:	e014      	b.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	4a21      	ldr	r2, [pc, #132]	@ (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff f93e 	bl	8001864 <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025fc:	d10b      	bne.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b80      	cmp	r3, #128	@ 0x80
 8002602:	d913      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2ba0      	cmp	r3, #160	@ 0xa0
 8002608:	d902      	bls.n	8002610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800260a:	2302      	movs	r3, #2
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e00d      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e00a      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b7f      	cmp	r3, #127	@ 0x7f
 800261a:	d902      	bls.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800261c:	2302      	movs	r3, #2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e004      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b70      	cmp	r3, #112	@ 0x70
 8002626:	d101      	bne.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002628:	2301      	movs	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 020f 	bic.w	r2, r3, #15
 8002634:	4909      	ldr	r1, [pc, #36]	@ (800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800263c:	4b07      	ldr	r3, [pc, #28]	@ (800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	40022000 	.word	0x40022000

08002660 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002666:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d00b      	beq.n	800268e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d825      	bhi.n	80026c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d008      	beq.n	8002694 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d11f      	bne.n	80026c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002688:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800268a:	613b      	str	r3, [r7, #16]
    break;
 800268c:	e01f      	b.n	80026ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800268e:	4b25      	ldr	r3, [pc, #148]	@ (8002724 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002690:	613b      	str	r3, [r7, #16]
    break;
 8002692:	e01c      	b.n	80026ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002694:	4b21      	ldr	r3, [pc, #132]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e005      	b.n	80026bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80026bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	613b      	str	r3, [r7, #16]
    break;
 80026c6:	e002      	b.n	80026ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
    break;
 80026cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	3301      	adds	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	fb03 f202 	mul.w	r2, r3, r2
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f4:	4b09      	ldr	r3, [pc, #36]	@ (800271c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0e5b      	lsrs	r3, r3, #25
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800270e:	683b      	ldr	r3, [r7, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000
 8002720:	00f42400 	.word	0x00f42400
 8002724:	007a1200 	.word	0x007a1200
 8002728:	080031dc 	.word	0x080031dc

0800272c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002734:	2300      	movs	r3, #0
 8002736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002738:	2300      	movs	r3, #0
 800273a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002744:	2b00      	cmp	r3, #0
 8002746:	d040      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800274c:	2b80      	cmp	r3, #128	@ 0x80
 800274e:	d02a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002750:	2b80      	cmp	r3, #128	@ 0x80
 8002752:	d825      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002754:	2b60      	cmp	r3, #96	@ 0x60
 8002756:	d026      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002758:	2b60      	cmp	r3, #96	@ 0x60
 800275a:	d821      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800275c:	2b40      	cmp	r3, #64	@ 0x40
 800275e:	d006      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002760:	2b40      	cmp	r3, #64	@ 0x40
 8002762:	d81d      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d010      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800276c:	e018      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800276e:	4b89      	ldr	r3, [pc, #548]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	4a88      	ldr	r2, [pc, #544]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800277a:	e015      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fb02 	bl	8002d8c <RCCEx_PLLSAI1_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800278c:	e00c      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3320      	adds	r3, #32
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fbed 	bl	8002f74 <RCCEx_PLLSAI2_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800279e:	e003      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	74fb      	strb	r3, [r7, #19]
      break;
 80027a4:	e000      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80027a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ae:	4b79      	ldr	r3, [pc, #484]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027b4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027bc:	4975      	ldr	r1, [pc, #468]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80027c4:	e001      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d047      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027de:	d030      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e4:	d82a      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027ea:	d02a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80027ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027f0:	d824      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f6:	d008      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80027f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027fc:	d81e      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002806:	d010      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002808:	e018      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800280a:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a61      	ldr	r2, [pc, #388]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002816:	e015      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fab4 	bl	8002d8c <RCCEx_PLLSAI1_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002828:	e00c      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3320      	adds	r3, #32
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fb9f 	bl	8002f74 <RCCEx_PLLSAI2_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800283a:	e003      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	74fb      	strb	r3, [r7, #19]
      break;
 8002840:	e000      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800284a:	4b52      	ldr	r3, [pc, #328]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800284c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	494e      	ldr	r1, [pc, #312]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002860:	e001      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 809f 	beq.w	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002874:	2300      	movs	r3, #0
 8002876:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002878:	4b46      	ldr	r3, [pc, #280]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002888:	2300      	movs	r3, #0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	4a40      	ldr	r2, [pc, #256]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002898:	6593      	str	r3, [r2, #88]	@ 0x58
 800289a:	4b3e      	ldr	r3, [pc, #248]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a6:	2301      	movs	r3, #1
 80028a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b6:	f7fd ff59 	bl	800076c <HAL_GetTick>
 80028ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028bc:	e009      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fd ff55 	bl	800076c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d902      	bls.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	74fb      	strb	r3, [r7, #19]
        break;
 80028d0:	e005      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0ef      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d15b      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01f      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d019      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002902:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002914:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800291e:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	4a1b      	ldr	r2, [pc, #108]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800292a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800292e:	4a19      	ldr	r2, [pc, #100]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d016      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fd ff14 	bl	800076c <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002946:	e00b      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fd ff10 	bl	800076c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d902      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	74fb      	strb	r3, [r7, #19]
            break;
 800295e:	e006      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ec      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10c      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002984:	4903      	ldr	r1, [pc, #12]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800298c:	e008      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	74bb      	strb	r3, [r7, #18]
 8002992:	e005      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a0:	7c7b      	ldrb	r3, [r7, #17]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4ba0      	ldr	r3, [pc, #640]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	4a9f      	ldr	r2, [pc, #636]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029be:	4b9a      	ldr	r3, [pc, #616]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c4:	f023 0203 	bic.w	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029cc:	4996      	ldr	r1, [pc, #600]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e0:	4b91      	ldr	r3, [pc, #580]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f023 020c 	bic.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	498e      	ldr	r1, [pc, #568]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a02:	4b89      	ldr	r3, [pc, #548]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	4985      	ldr	r1, [pc, #532]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a24:	4b80      	ldr	r3, [pc, #512]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a32:	497d      	ldr	r1, [pc, #500]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a46:	4b78      	ldr	r3, [pc, #480]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a54:	4974      	ldr	r1, [pc, #464]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a68:	4b6f      	ldr	r3, [pc, #444]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a76:	496c      	ldr	r1, [pc, #432]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8a:	4b67      	ldr	r3, [pc, #412]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a98:	4963      	ldr	r1, [pc, #396]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aac:	4b5e      	ldr	r3, [pc, #376]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aba:	495b      	ldr	r1, [pc, #364]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ace:	4b56      	ldr	r3, [pc, #344]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	4952      	ldr	r1, [pc, #328]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	494a      	ldr	r1, [pc, #296]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b12:	4b45      	ldr	r3, [pc, #276]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b20:	4941      	ldr	r1, [pc, #260]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b34:	4b3c      	ldr	r3, [pc, #240]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	4939      	ldr	r1, [pc, #228]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d028      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b56:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b64:	4930      	ldr	r1, [pc, #192]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b74:	d106      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b76:	4b2c      	ldr	r3, [pc, #176]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b80:	60d3      	str	r3, [r2, #12]
 8002b82:	e011      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f8f9 	bl	8002d8c <RCCEx_PLLSAI1_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d04d      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bbc:	d108      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bc4:	4a18      	ldr	r2, [pc, #96]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002bce:	e012      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002bd0:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bd6:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bdc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bee:	490e      	ldr	r1, [pc, #56]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a08      	ldr	r2, [pc, #32]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]
 8002c0c:	e020      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c16:	d109      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4a02      	ldr	r2, [pc, #8]	@ (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c22:	60d3      	str	r3, [r2, #12]
 8002c24:	e014      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f8a5 	bl	8002d8c <RCCEx_PLLSAI1_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d028      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c6a:	4947      	ldr	r1, [pc, #284]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7c:	4b42      	ldr	r3, [pc, #264]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a41      	ldr	r2, [pc, #260]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c86:	60d3      	str	r3, [r2, #12]
 8002c88:	e011      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c92:	d10c      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f876 	bl	8002d8c <RCCEx_PLLSAI1_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01e      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cba:	4b33      	ldr	r3, [pc, #204]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cca:	492f      	ldr	r1, [pc, #188]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f851 	bl	8002d8c <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d04:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d0a:	f023 0204 	bic.w	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d14:	491c      	ldr	r1, [pc, #112]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d28:	4b17      	ldr	r3, [pc, #92]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d2e:	f023 0218 	bic.w	r2, r3, #24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d38:	4913      	ldr	r1, [pc, #76]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d017      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5c:	490a      	ldr	r1, [pc, #40]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a04      	ldr	r2, [pc, #16]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000

08002d8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d9a:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002da6:	4b6f      	ldr	r3, [pc, #444]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0203 	and.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d103      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d142      	bne.n	8002e44 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e03f      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d018      	beq.n	8002dfe <RCCEx_PLLSAI1_Config+0x72>
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d825      	bhi.n	8002e1c <RCCEx_PLLSAI1_Config+0x90>
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d002      	beq.n	8002dda <RCCEx_PLLSAI1_Config+0x4e>
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d009      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0x60>
 8002dd8:	e020      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dda:	4b62      	ldr	r3, [pc, #392]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11d      	bne.n	8002e22 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dea:	e01a      	b.n	8002e22 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dec:	4b5d      	ldr	r3, [pc, #372]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d116      	bne.n	8002e26 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfc:	e013      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dfe:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e0a:	4b56      	ldr	r3, [pc, #344]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e1a:	e006      	b.n	8002e2a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e20:	e004      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002e2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002e32:	4b4c      	ldr	r3, [pc, #304]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4949      	ldr	r1, [pc, #292]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 8086 	bne.w	8002f58 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e4c:	4b45      	ldr	r3, [pc, #276]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a44      	ldr	r2, [pc, #272]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e58:	f7fd fc88 	bl	800076c <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e5e:	e009      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e60:	f7fd fc84 	bl	800076c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	73fb      	strb	r3, [r7, #15]
        break;
 8002e72:	e005      	b.n	8002e80 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e74:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ef      	bne.n	8002e60 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d168      	bne.n	8002f58 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d113      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8c:	4b35      	ldr	r3, [pc, #212]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	4b35      	ldr	r3, [pc, #212]	@ (8002f68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	0211      	lsls	r1, r2, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68d2      	ldr	r2, [r2, #12]
 8002e9e:	06d2      	lsls	r2, r2, #27
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6852      	ldr	r2, [r2, #4]
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	492d      	ldr	r1, [pc, #180]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	610b      	str	r3, [r1, #16]
 8002eb2:	e02d      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d115      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eba:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8002f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6892      	ldr	r2, [r2, #8]
 8002ec6:	0211      	lsls	r1, r2, #8
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6912      	ldr	r2, [r2, #16]
 8002ecc:	0852      	lsrs	r2, r2, #1
 8002ece:	3a01      	subs	r2, #1
 8002ed0:	0552      	lsls	r2, r2, #21
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6852      	ldr	r2, [r2, #4]
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	430a      	orrs	r2, r1
 8002ede:	4921      	ldr	r1, [pc, #132]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	610b      	str	r3, [r1, #16]
 8002ee4:	e014      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6892      	ldr	r2, [r2, #8]
 8002ef2:	0211      	lsls	r1, r2, #8
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6952      	ldr	r2, [r2, #20]
 8002ef8:	0852      	lsrs	r2, r2, #1
 8002efa:	3a01      	subs	r2, #1
 8002efc:	0652      	lsls	r2, r2, #25
 8002efe:	4311      	orrs	r1, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6852      	ldr	r2, [r2, #4]
 8002f04:	3a01      	subs	r2, #1
 8002f06:	0112      	lsls	r2, r2, #4
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	4916      	ldr	r1, [pc, #88]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f10:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fd fc26 	bl	800076c <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f24:	f7fd fc22 	bl	800076c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
          break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f38:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ef      	beq.n	8002f24 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	4904      	ldr	r1, [pc, #16]	@ (8002f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	07ff800f 	.word	0x07ff800f
 8002f6c:	ff9f800f 	.word	0xff9f800f
 8002f70:	f9ff800f 	.word	0xf9ff800f

08002f74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f82:	4b72      	ldr	r3, [pc, #456]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00e      	beq.n	8002fac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0203 	and.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d103      	bne.n	8002fa6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d142      	bne.n	800302c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
 8002faa:	e03f      	b.n	800302c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d018      	beq.n	8002fe6 <RCCEx_PLLSAI2_Config+0x72>
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d825      	bhi.n	8003004 <RCCEx_PLLSAI2_Config+0x90>
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d002      	beq.n	8002fc2 <RCCEx_PLLSAI2_Config+0x4e>
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d009      	beq.n	8002fd4 <RCCEx_PLLSAI2_Config+0x60>
 8002fc0:	e020      	b.n	8003004 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fc2:	4b62      	ldr	r3, [pc, #392]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11d      	bne.n	800300a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd2:	e01a      	b.n	800300a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fd4:	4b5d      	ldr	r3, [pc, #372]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d116      	bne.n	800300e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe4:	e013      	b.n	800300e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fe6:	4b59      	ldr	r3, [pc, #356]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10f      	bne.n	8003012 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ff2:	4b56      	ldr	r3, [pc, #344]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003002:	e006      	b.n	8003012 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e004      	b.n	8003014 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800300a:	bf00      	nop
 800300c:	e002      	b.n	8003014 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003012:	bf00      	nop
    }

    if(status == HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800301a:	4b4c      	ldr	r3, [pc, #304]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4949      	ldr	r1, [pc, #292]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 8086 	bne.w	8003140 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003034:	4b45      	ldr	r3, [pc, #276]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a44      	ldr	r2, [pc, #272]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003040:	f7fd fb94 	bl	800076c <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003046:	e009      	b.n	800305c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003048:	f7fd fb90 	bl	800076c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d902      	bls.n	800305c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	73fb      	strb	r3, [r7, #15]
        break;
 800305a:	e005      	b.n	8003068 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800305c:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ef      	bne.n	8003048 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d168      	bne.n	8003140 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d113      	bne.n	800309c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003074:	4b35      	ldr	r3, [pc, #212]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	4b35      	ldr	r3, [pc, #212]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1dc>)
 800307a:	4013      	ands	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	0211      	lsls	r1, r2, #8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68d2      	ldr	r2, [r2, #12]
 8003086:	06d2      	lsls	r2, r2, #27
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6852      	ldr	r2, [r2, #4]
 800308e:	3a01      	subs	r2, #1
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	430a      	orrs	r2, r1
 8003094:	492d      	ldr	r1, [pc, #180]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	614b      	str	r3, [r1, #20]
 800309a:	e02d      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d115      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a2:	4b2a      	ldr	r3, [pc, #168]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <RCCEx_PLLSAI2_Config+0x1e0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6892      	ldr	r2, [r2, #8]
 80030ae:	0211      	lsls	r1, r2, #8
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6912      	ldr	r2, [r2, #16]
 80030b4:	0852      	lsrs	r2, r2, #1
 80030b6:	3a01      	subs	r2, #1
 80030b8:	0552      	lsls	r2, r2, #21
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6852      	ldr	r2, [r2, #4]
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	430a      	orrs	r2, r1
 80030c6:	4921      	ldr	r1, [pc, #132]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	614b      	str	r3, [r1, #20]
 80030cc:	e014      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030ce:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	4b21      	ldr	r3, [pc, #132]	@ (8003158 <RCCEx_PLLSAI2_Config+0x1e4>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6892      	ldr	r2, [r2, #8]
 80030da:	0211      	lsls	r1, r2, #8
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6952      	ldr	r2, [r2, #20]
 80030e0:	0852      	lsrs	r2, r2, #1
 80030e2:	3a01      	subs	r2, #1
 80030e4:	0652      	lsls	r2, r2, #25
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6852      	ldr	r2, [r2, #4]
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0112      	lsls	r2, r2, #4
 80030f0:	430a      	orrs	r2, r1
 80030f2:	4916      	ldr	r1, [pc, #88]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030f8:	4b14      	ldr	r3, [pc, #80]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a13      	ldr	r2, [pc, #76]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003102:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fd fb32 	bl	800076c <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310a:	e009      	b.n	8003120 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800310c:	f7fd fb2e 	bl	800076c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d902      	bls.n	8003120 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	73fb      	strb	r3, [r7, #15]
          break;
 800311e:	e005      	b.n	800312c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003120:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ef      	beq.n	800310c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003132:	4b06      	ldr	r3, [pc, #24]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	4904      	ldr	r1, [pc, #16]	@ (800314c <RCCEx_PLLSAI2_Config+0x1d8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	07ff800f 	.word	0x07ff800f
 8003154:	ff9f800f 	.word	0xff9f800f
 8003158:	f9ff800f 	.word	0xf9ff800f

0800315c <memset>:
 800315c:	4402      	add	r2, r0
 800315e:	4603      	mov	r3, r0
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <memset+0xa>
 8003164:	4770      	bx	lr
 8003166:	f803 1b01 	strb.w	r1, [r3], #1
 800316a:	e7f9      	b.n	8003160 <memset+0x4>

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4d0d      	ldr	r5, [pc, #52]	@ (80031a4 <__libc_init_array+0x38>)
 8003170:	4c0d      	ldr	r4, [pc, #52]	@ (80031a8 <__libc_init_array+0x3c>)
 8003172:	1b64      	subs	r4, r4, r5
 8003174:	10a4      	asrs	r4, r4, #2
 8003176:	2600      	movs	r6, #0
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	4d0b      	ldr	r5, [pc, #44]	@ (80031ac <__libc_init_array+0x40>)
 800317e:	4c0c      	ldr	r4, [pc, #48]	@ (80031b0 <__libc_init_array+0x44>)
 8003180:	f000 f818 	bl	80031b4 <_init>
 8003184:	1b64      	subs	r4, r4, r5
 8003186:	10a4      	asrs	r4, r4, #2
 8003188:	2600      	movs	r6, #0
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f855 3b04 	ldr.w	r3, [r5], #4
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f855 3b04 	ldr.w	r3, [r5], #4
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	0800320c 	.word	0x0800320c
 80031a8:	0800320c 	.word	0x0800320c
 80031ac:	0800320c 	.word	0x0800320c
 80031b0:	08003210 	.word	0x08003210

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr


JOYSTICK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800969c  0800969c  0000a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800970c  0800970c  0000b00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009714  08009714  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009714  08009714  0000a714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009718  08009718  0000a718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800971c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08009728  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08009728  0000b780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef01  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003558  00000000  00000000  00029f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca0  00000000  00000000  0002d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000168d  00000000  00000000  0002f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e2f4  00000000  00000000  000307c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a09  00000000  00000000  0005eab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001247ab  00000000  00000000  000814c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a5c6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ccc  00000000  00000000  001a5cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001ad97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08009684 	.word	0x08009684

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08009684 	.word	0x08009684

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <writeRegister>:
	uint8_t _deviceAddress;


	//Write a byte value to a spot in the Joystick
  int writeRegister(uint8_t reg, uint8_t val)
  {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	4603      	mov	r3, r0
 80004f4:	460a      	mov	r2, r1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
	  uint8_t buf[10] = {reg, val};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	811a      	strh	r2, [r3, #8]
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	737b      	strb	r3, [r7, #13]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, JOYSTICK_ADDRESS, &buf[0], 2, 1000);
 8000510:	f107 020c 	add.w	r2, r7, #12
 8000514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2302      	movs	r3, #2
 800051c:	2140      	movs	r1, #64	@ 0x40
 800051e:	480a      	ldr	r0, [pc, #40]	@ (8000548 <writeRegister+0x5c>)
 8000520:	f003 fbf8 	bl	8003d14 <HAL_I2C_Master_Transmit>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <writeRegister+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]


    if (ret != 0)
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <writeRegister+0x60>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <writeRegister+0x4c>
    {
      //Serial.println("No write ack!");
      return (0); //Device failed to ack
 8000534:	2300      	movs	r3, #0
 8000536:	e003      	b.n	8000540 <writeRegister+0x54>
    }

    HAL_Delay(30); // allow EPROM time to store value
 8000538:	201e      	movs	r0, #30
 800053a:	f001 ff3b 	bl	80023b4 <HAL_Delay>

    return (1);
 800053e:	2301      	movs	r3, #1
  }
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000110 	.word	0x20000110
 800054c:	20000770 	.word	0x20000770

08000550 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	@ 0x28
 8000554:	af02      	add	r7, sp, #8
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	811a      	strh	r2, [r3, #8]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8000578:	f107 0214 	add.w	r2, r7, #20
 800057c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2140      	movs	r1, #64	@ 0x40
 8000586:	4810      	ldr	r0, [pc, #64]	@ (80005c8 <readRegister+0x78>)
 8000588:	f003 fbc4 	bl	8003d14 <HAL_I2C_Master_Transmit>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <readRegister+0x7c>)
 8000592:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 8000594:	f107 0208 	add.w	r2, r7, #8
 8000598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	2140      	movs	r1, #64	@ 0x40
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <readRegister+0x78>)
 80005a4:	f003 fcce 	bl	8003f44 <HAL_I2C_Master_Receive>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <readRegister+0x7c>)
 80005ae:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <readRegister+0x7c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80005b8:	2300      	movs	r3, #0
 80005ba:	e000      	b.n	80005be <readRegister+0x6e>
    }
    return buf0[0];
 80005bc:	7a3b      	ldrb	r3, [r7, #8]
  }
 80005be:	4618      	mov	r0, r3
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000110 	.word	0x20000110
 80005cc:	20000770 	.word	0x20000770

080005d0 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80005d6:	2003      	movs	r0, #3
 80005d8:	f7ff ffba 	bl	8000550 <readRegister>
 80005dc:	4603      	mov	r3, r0
 80005de:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80005e0:	2004      	movs	r0, #4
 80005e2:	f7ff ffb5 	bl	8000550 <readRegister>
 80005e6:	4603      	mov	r3, r0
 80005e8:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	021a      	lsls	r2, r3, #8
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	119b      	asrs	r3, r3, #6
 80005f4:	b29b      	uxth	r3, r3
  }
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 8000604:	2005      	movs	r0, #5
 8000606:	f7ff ffa3 	bl	8000550 <readRegister>
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 800060e:	2006      	movs	r0, #6
 8000610:	f7ff ff9e 	bl	8000550 <readRegister>
 8000614:	4603      	mov	r3, r0
 8000616:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	021a      	lsls	r2, r3, #8
 800061c:	88bb      	ldrh	r3, [r7, #4]
 800061e:	4313      	orrs	r3, r2
 8000620:	119b      	asrs	r3, r3, #6
 8000622:	b29b      	uxth	r3, r3
  }
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <getButton>:
  //Returns 0 button is currently being pressed
  uint8_t getButton()
  {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	  uint8_t button = readRegister(JOYSTICK_BUTTON);
 8000632:	2007      	movs	r0, #7
 8000634:	f7ff ff8c 	bl	8000550 <readRegister>
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
    //boolean pressed = status & (1<<statusButtonPressedBit);

    return(button);
 800063c:	79fb      	ldrb	r3, [r7, #7]
  }
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <checkButton>:

  //Returns 1 if button was pressed between reads of .getButton() or .checkButton()
  //the register is then cleared after read.
  //The joystick has a register where it saves if a button was pressed after the getbutton or checkbutton function was used
  uint8_t checkButton()
  {
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
	  uint8_t status = readRegister(JOYSTICK_STATUS);
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff7f 	bl	8000550 <readRegister>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]

    writeRegister(JOYSTICK_STATUS, 0x00); //We've read this status bit, now clear it
 8000656:	2100      	movs	r1, #0
 8000658:	2008      	movs	r0, #8
 800065a:	f7ff ff47 	bl	80004ec <writeRegister>

    return(status);
 800065e:	79fb      	ldrb	r3, [r7, #7]
  }
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f001 fe2c 	bl	80022ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f83d 	bl	80006f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000676:	f000 f89d 	bl	80007b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 ff33 	bl	80014e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800067e:	f000 f8cd 	bl	800081c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000682:	f000 f92f 	bl	80008e4 <MX_CAN1_Init>
  MX_COMP1_Init();
 8000686:	f000 f961 	bl	800094c <MX_COMP1_Init>
  MX_COMP2_Init();
 800068a:	f000 f98d 	bl	80009a8 <MX_COMP2_Init>
  MX_I2C2_SMBUS_Init();
 800068e:	f000 f9f7 	bl	8000a80 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8000692:	f000 fa37 	bl	8000b04 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000696:	f000 fa83 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800069a:	f000 facf 	bl	8000c3c <MX_USART3_UART_Init>
  MX_SAI1_Init();
 800069e:	f000 fb19 	bl	8000cd4 <MX_SAI1_Init>
  MX_SAI2_Init();
 80006a2:	f000 fbaf 	bl	8000e04 <MX_SAI2_Init>
  MX_SPI1_Init();
 80006a6:	f000 fc15 	bl	8000ed4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80006aa:	f000 fc51 	bl	8000f50 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006ae:	f000 fc8d 	bl	8000fcc <MX_TIM1_Init>
  MX_TIM2_Init();
 80006b2:	f000 fd5b 	bl	800116c <MX_TIM2_Init>
  MX_TIM3_Init();
 80006b6:	f000 fdbd 	bl	8001234 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006ba:	f000 fe21 	bl	8001300 <MX_TIM4_Init>
  MX_TIM15_Init();
 80006be:	f000 fe85 	bl	80013cc <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80006c2:	f000 ff07 	bl	80014d4 <MX_USB_OTG_FS_USB_Init>
  MX_I2C1_Init();
 80006c6:	f000 f99b 	bl	8000a00 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint16_t xval = getHorizontal();
 80006ca:	f7ff ff81 	bl	80005d0 <getHorizontal>
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
	  uint16_t yval = getVertical();
 80006d2:	f7ff ff94 	bl	80005fe <getVertical>
 80006d6:	4603      	mov	r3, r0
 80006d8:	80bb      	strh	r3, [r7, #4]
	  uint8_t buttonval = getButton();
 80006da:	f7ff ffa7 	bl	800062c <getButton>
 80006de:	4603      	mov	r3, r0
 80006e0:	70fb      	strb	r3, [r7, #3]
	  uint8_t buttoncheck = checkButton();
 80006e2:	f7ff ffb0 	bl	8000646 <checkButton>
 80006e6:	4603      	mov	r3, r0
 80006e8:	70bb      	strb	r3, [r7, #2]
  {
 80006ea:	bf00      	nop
 80006ec:	e7ed      	b.n	80006ca <main+0x62>
	...

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	@ 0x58
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2244      	movs	r2, #68	@ 0x44
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 ff94 	bl	800962c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000712:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000716:	f004 f865 	bl	80047e4 <HAL_PWREx_ControlVoltageScaling>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000720:	f000 ff98 	bl	8001654 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000724:	f004 f82e 	bl	8004784 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <SystemClock_Config+0xc0>)
 800072a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800072e:	4a20      	ldr	r2, [pc, #128]	@ (80007b0 <SystemClock_Config+0xc0>)
 8000730:	f023 0318 	bic.w	r3, r3, #24
 8000734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000738:	2314      	movs	r3, #20
 800073a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000748:	2360      	movs	r3, #96	@ 0x60
 800074a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000750:	2301      	movs	r3, #1
 8000752:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f8ed 	bl	800494c <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000778:	f000 ff6c 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2303      	movs	r3, #3
 8000782:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fcf3 	bl	8005180 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a0:	f000 ff58 	bl	8001654 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a4:	f006 f9fc 	bl	8006ba0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007a8:	bf00      	nop
 80007aa:	3758      	adds	r7, #88	@ 0x58
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000

080007b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0a6      	sub	sp, #152	@ 0x98
 80007b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2294      	movs	r2, #148	@ 0x94
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f008 ff33 	bl	800962c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80007c6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80007e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007e2:	2301      	movs	r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80007ea:	2318      	movs	r3, #24
 80007ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80007fa:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <PeriphCommonClock_Config+0x64>)
 80007fc:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f004 ff7b 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800080c:	f000 ff22 	bl	8001654 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3798      	adds	r7, #152	@ 0x98
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	01110000 	.word	0x01110000

0800081c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000832:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000834:	4a29      	ldr	r2, [pc, #164]	@ (80008dc <MX_ADC1_Init+0xc0>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000838:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083e:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000852:	2204      	movs	r2, #4
 8000854:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000858:	2200      	movs	r2, #0
 800085a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800085e:	2200      	movs	r2, #0
 8000860:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000864:	2201      	movs	r2, #1
 8000866:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 8000894:	f001 ff52 	bl	800273c <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800089e:	f000 fed9 	bl	8001654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_ADC1_Init+0xc4>)
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2306      	movs	r3, #6
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ae:	237f      	movs	r3, #127	@ 0x7f
 80008b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b2:	2304      	movs	r3, #4
 80008b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_ADC1_Init+0xbc>)
 80008c0:	f002 f882 	bl	80029c8 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ca:	f000 fec3 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000028 	.word	0x20000028
 80008dc:	50040000 	.word	0x50040000
 80008e0:	04300002 	.word	0x04300002

080008e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_CAN1_Init+0x60>)
 80008ea:	4a17      	ldr	r2, [pc, #92]	@ (8000948 <MX_CAN1_Init+0x64>)
 80008ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_CAN1_Init+0x60>)
 80008f0:	2210      	movs	r2, #16
 80008f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_CAN1_Init+0x60>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_CAN1_Init+0x60>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000900:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_CAN1_Init+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_CAN1_Init+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800090c:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <MX_CAN1_Init+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_CAN1_Init+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <MX_CAN1_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_CAN1_Init+0x60>)
 8000920:	2200      	movs	r2, #0
 8000922:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <MX_CAN1_Init+0x60>)
 8000926:	2200      	movs	r2, #0
 8000928:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_CAN1_Init+0x60>)
 800092c:	2200      	movs	r2, #0
 800092e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <MX_CAN1_Init+0x60>)
 8000932:	f002 fc45 	bl	80031c0 <HAL_CAN_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 fe8a 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000090 	.word	0x20000090
 8000948:	40006400 	.word	0x40006400

0800094c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_COMP1_Init+0x50>)
 8000952:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <MX_COMP1_Init+0x54>)
 8000954:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_COMP1_Init+0x50>)
 8000958:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <MX_COMP1_Init+0x58>)
 800095a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_COMP1_Init+0x50>)
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_COMP1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_COMP1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_COMP1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_COMP1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_COMP1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_COMP1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_COMP1_Init+0x50>)
 8000988:	f002 fdbe 	bl	8003508 <HAL_COMP_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000992:	f000 fe5f 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000b8 	.word	0x200000b8
 80009a0:	40010200 	.word	0x40010200
 80009a4:	00800030 	.word	0x00800030

080009a8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009ae:	4a13      	ldr	r2, [pc, #76]	@ (80009fc <MX_COMP2_Init+0x54>)
 80009b0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009b4:	2270      	movs	r2, #112	@ 0x70
 80009b6:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_COMP2_Init+0x50>)
 80009e4:	f002 fd90 	bl	8003508 <HAL_COMP_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80009ee:	f000 fe31 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000e4 	.word	0x200000e4
 80009fc:	40010204 	.word	0x40010204

08000a00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <MX_I2C1_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a3c:	f003 f8ce 	bl	8003bdc <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 fe05 	bl	8001654 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a4e:	f003 fe01 	bl	8004654 <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 fdfc 	bl	8001654 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_I2C1_Init+0x74>)
 8000a60:	f003 fe43 	bl	80046ea <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fdf3 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000110 	.word	0x20000110
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	00707cbb 	.word	0x00707cbb

08000a80 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000a86:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <MX_I2C2_SMBUS_Init+0x7c>)
 8000a88:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <MX_I2C2_SMBUS_Init+0x80>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ace:	f248 1286 	movw	r2, #33158	@ 0x8186
 8000ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000ad4:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ad6:	f006 feeb 	bl	80078b0 <HAL_SMBUS_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000ae0:	f000 fdb8 	bl	8001654 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_I2C2_SMBUS_Init+0x78>)
 8000ae6:	f006 ff9b 	bl	8007a20 <HAL_SMBUS_EnableAlert_IT>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000af0:	f000 fdb0 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000164 	.word	0x20000164
 8000afc:	40005800 	.word	0x40005800
 8000b00:	00707cbb 	.word	0x00707cbb

08000b04 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <MX_LPUART1_UART_Init+0x94>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b10:	4a22      	ldr	r2, [pc, #136]	@ (8000b9c <MX_LPUART1_UART_Init+0x98>)
 8000b12:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b4c:	4811      	ldr	r0, [pc, #68]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b4e:	f007 ff05 	bl	800895c <HAL_UART_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b58:	f000 fd7c 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b60:	f008 fc9a 	bl	8009498 <HAL_UARTEx_SetTxFifoThreshold>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6a:	f000 fd73 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4808      	ldr	r0, [pc, #32]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b72:	f008 fccf 	bl	8009514 <HAL_UARTEx_SetRxFifoThreshold>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b7c:	f000 fd6a 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_LPUART1_UART_Init+0x90>)
 8000b82:	f008 fc50 	bl	8009426 <HAL_UARTEx_DisableFifoMode>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f000 fd62 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200001b4 	.word	0x200001b4
 8000b98:	40008000 	.word	0x40008000
 8000b9c:	00033324 	.word	0x00033324

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000ba6:	4a24      	ldr	r2, [pc, #144]	@ (8000c38 <MX_USART2_UART_Init+0x98>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bcc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bd0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bec:	f007 feb6 	bl	800895c <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000bf6:	f000 fd2d 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000bfe:	f008 fc4b 	bl	8009498 <HAL_UARTEx_SetTxFifoThreshold>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c08:	f000 fd24 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000c10:	f008 fc80 	bl	8009514 <HAL_UARTEx_SetRxFifoThreshold>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c1a:	f000 fd1b 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_USART2_UART_Init+0x94>)
 8000c20:	f008 fc01 	bl	8009426 <HAL_UARTEx_DisableFifoMode>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c2a:	f000 fd13 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000248 	.word	0x20000248
 8000c38:	40004400 	.word	0x40004400

08000c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c42:	4a23      	ldr	r2, [pc, #140]	@ (8000cd0 <MX_USART3_UART_Init+0x94>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c84:	4811      	ldr	r0, [pc, #68]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c86:	f007 fe69 	bl	800895c <HAL_UART_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 fce0 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000c98:	f008 fbfe 	bl	8009498 <HAL_UARTEx_SetTxFifoThreshold>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ca2:	f000 fcd7 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4808      	ldr	r0, [pc, #32]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000caa:	f008 fc33 	bl	8009514 <HAL_UARTEx_SetRxFifoThreshold>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb4:	f000 fcce 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <MX_USART3_UART_Init+0x90>)
 8000cba:	f008 fbb4 	bl	8009426 <HAL_UARTEx_DisableFifoMode>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 fcc6 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200002dc 	.word	0x200002dc
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000cd8:	4b45      	ldr	r3, [pc, #276]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000cda:	4a46      	ldr	r2, [pc, #280]	@ (8000df4 <MX_SAI1_Init+0x120>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cde:	4b44      	ldr	r3, [pc, #272]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ce4:	4b42      	ldr	r3, [pc, #264]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000cea:	4b41      	ldr	r3, [pc, #260]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000cec:	2240      	movs	r2, #64	@ 0x40
 8000cee:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d02:	4b3b      	ldr	r3, [pc, #236]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d08:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000d0e:	4b38      	ldr	r3, [pc, #224]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d14:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d1a:	4b35      	ldr	r3, [pc, #212]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d1c:	4a36      	ldr	r2, [pc, #216]	@ (8000df8 <MX_SAI1_Init+0x124>)
 8000d1e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d20:	4b33      	ldr	r3, [pc, #204]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d26:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000d38:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d50:	2208      	movs	r2, #8
 8000d52:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000d54:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d66:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000d84:	481a      	ldr	r0, [pc, #104]	@ (8000df0 <MX_SAI1_Init+0x11c>)
 8000d86:	f006 fa47 	bl	8007218 <HAL_SAI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8000d90:	f000 fc60 	bl	8001654 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000d96:	4a1a      	ldr	r2, [pc, #104]	@ (8000e00 <MX_SAI1_Init+0x12c>)
 8000d98:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000dba:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <MX_SAI1_Init+0x124>)
 8000dbc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4807      	ldr	r0, [pc, #28]	@ (8000dfc <MX_SAI1_Init+0x128>)
 8000dde:	f006 f9e9 	bl	80071b4 <HAL_SAI_InitProtocol>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8000de8:	f000 fc34 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000370 	.word	0x20000370
 8000df4:	40015424 	.word	0x40015424
 8000df8:	0002ee00 	.word	0x0002ee00
 8000dfc:	20000404 	.word	0x20000404
 8000e00:	40015404 	.word	0x40015404

08000e04 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e0a:	4a30      	ldr	r2, [pc, #192]	@ (8000ecc <MX_SAI2_Init+0xc8>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e14:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e1c:	2240      	movs	r2, #64	@ 0x40
 8000e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e20:	4b29      	ldr	r3, [pc, #164]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e26:	4b28      	ldr	r3, [pc, #160]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e32:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e44:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e4c:	4a20      	ldr	r2, [pc, #128]	@ (8000ed0 <MX_SAI2_Init+0xcc>)
 8000e4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e80:	2208      	movs	r2, #8
 8000e82:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e84:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <MX_SAI2_Init+0xc4>)
 8000eb6:	f006 f9af 	bl	8007218 <HAL_SAI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8000ec0:	f000 fbc8 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000498 	.word	0x20000498
 8000ecc:	40015804 	.word	0x40015804
 8000ed0:	0002ee00 	.word	0x0002ee00

08000ed4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <MX_SPI1_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000ee0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000eee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ef2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f02:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f22:	2207      	movs	r2, #7
 8000f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f2e:	2208      	movs	r2, #8
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_SPI1_Init+0x74>)
 8000f34:	f006 fdc7 	bl	8007ac6 <HAL_SPI_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 fb89 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000052c 	.word	0x2000052c
 8000f4c:	40013000 	.word	0x40013000

08000f50 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <MX_SPI3_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f62:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f6a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f6e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f82:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_SPI3_Init+0x74>)
 8000fb0:	f006 fd89 	bl	8007ac6 <HAL_SPI_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 fb4b 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000590 	.word	0x20000590
 8000fc8:	40003c00 	.word	0x40003c00

08000fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b098      	sub	sp, #96	@ 0x60
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000fde:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	222c      	movs	r2, #44	@ 0x2c
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f008 fb11 	bl	800962c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100a:	4b56      	ldr	r3, [pc, #344]	@ (8001164 <MX_TIM1_Init+0x198>)
 800100c:	4a56      	ldr	r2, [pc, #344]	@ (8001168 <MX_TIM1_Init+0x19c>)
 800100e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001010:	4b54      	ldr	r3, [pc, #336]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b53      	ldr	r3, [pc, #332]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800101c:	4b51      	ldr	r3, [pc, #324]	@ (8001164 <MX_TIM1_Init+0x198>)
 800101e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001022:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b4f      	ldr	r3, [pc, #316]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102a:	4b4e      	ldr	r3, [pc, #312]	@ (8001164 <MX_TIM1_Init+0x198>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001030:	4b4c      	ldr	r3, [pc, #304]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001036:	484b      	ldr	r0, [pc, #300]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001038:	f006 fde8 	bl	8007c0c <HAL_TIM_PWM_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001042:	f000 fb07 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001052:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001056:	4619      	mov	r1, r3
 8001058:	4842      	ldr	r0, [pc, #264]	@ (8001164 <MX_TIM1_Init+0x198>)
 800105a:	f007 fab3 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001064:	f000 faf6 	bl	8001654 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001068:	2301      	movs	r3, #1
 800106a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800106c:	2301      	movs	r3, #1
 800106e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001070:	2300      	movs	r3, #0
 8001072:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001074:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001078:	461a      	mov	r2, r3
 800107a:	2101      	movs	r1, #1
 800107c:	4839      	ldr	r0, [pc, #228]	@ (8001164 <MX_TIM1_Init+0x198>)
 800107e:	f007 fba7 	bl	80087d0 <HAL_TIMEx_ConfigBreakInput>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001088:	f000 fae4 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800108c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001090:	461a      	mov	r2, r3
 8001092:	2102      	movs	r1, #2
 8001094:	4833      	ldr	r0, [pc, #204]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001096:	f007 fb9b 	bl	80087d0 <HAL_TIMEx_ConfigBreakInput>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80010a0:	f000 fad8 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	@ 0x60
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	4826      	ldr	r0, [pc, #152]	@ (8001164 <MX_TIM1_Init+0x198>)
 80010ca:	f006 fdf7 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80010d4:	f000 fabe 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010dc:	2204      	movs	r2, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4820      	ldr	r0, [pc, #128]	@ (8001164 <MX_TIM1_Init+0x198>)
 80010e2:	f006 fdeb 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80010ec:	f000 fab2 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f4:	2208      	movs	r2, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	481a      	ldr	r0, [pc, #104]	@ (8001164 <MX_TIM1_Init+0x198>)
 80010fa:	f006 fddf 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001104:	f000 faa6 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800110c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800110e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001112:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800111c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001120:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001126:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800112c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001130:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001136:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4807      	ldr	r0, [pc, #28]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001146:	f007 fac5 	bl	80086d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001150:	f000 fa80 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <MX_TIM1_Init+0x198>)
 8001156:	f000 fe89 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 800115a:	bf00      	nop
 800115c:	3760      	adds	r7, #96	@ 0x60
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200005f4 	.word	0x200005f4
 8001168:	40012c00 	.word	0x40012c00

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <MX_TIM2_Init+0xc4>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001196:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001198:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <MX_TIM2_Init+0xc4>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <MX_TIM2_Init+0xc4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_TIM2_Init+0xc4>)
 80011a6:	f04f 32ff 	mov.w	r2, #4294967295
 80011aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_TIM2_Init+0xc4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <MX_TIM2_Init+0xc4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b8:	481d      	ldr	r0, [pc, #116]	@ (8001230 <MX_TIM2_Init+0xc4>)
 80011ba:	f006 fd27 	bl	8007c0c <HAL_TIM_PWM_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011c4:	f000 fa46 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	4816      	ldr	r0, [pc, #88]	@ (8001230 <MX_TIM2_Init+0xc4>)
 80011d8:	f007 f9f4 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011e2:	f000 fa37 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	@ 0x60
 80011e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <MX_TIM2_Init+0xc4>)
 80011fe:	f006 fd5d 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001208:	f000 fa24 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	2208      	movs	r2, #8
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	@ (8001230 <MX_TIM2_Init+0xc4>)
 8001214:	f006 fd52 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800121e:	f000 fa19 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <MX_TIM2_Init+0xc4>)
 8001224:	f000 fe22 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000640 	.word	0x20000640

08001234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 800125a:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <MX_TIM3_Init+0xc8>)
 800125c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800125e:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800126a:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 800126c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800127e:	481e      	ldr	r0, [pc, #120]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 8001280:	f006 fcc4 	bl	8007c0c <HAL_TIM_PWM_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800128a:	f000 f9e3 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4816      	ldr	r0, [pc, #88]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 800129e:	f007 f991 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012a8:	f000 f9d4 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ac:	2360      	movs	r3, #96	@ 0x60
 80012ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	2204      	movs	r2, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 80012c4:	f006 fcfa 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012ce:	f000 f9c1 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	2208      	movs	r2, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 80012da:	f006 fcef 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80012e4:	f000 f9b6 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM3_Init+0xc4>)
 80012ea:	f000 fdbf 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	@ 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000068c 	.word	0x2000068c
 80012fc:	40000400 	.word	0x40000400

08001300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 8001326:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <MX_TIM4_Init+0xc8>)
 8001328:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800132a:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 8001338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800134a:	481e      	ldr	r0, [pc, #120]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 800134c:	f006 fc5e 	bl	8007c0c <HAL_TIM_PWM_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001356:	f000 f97d 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 800136a:	f007 f92b 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001374:	f000 f96e 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001378:	2360      	movs	r3, #96	@ 0x60
 800137a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	2208      	movs	r2, #8
 800138c:	4619      	mov	r1, r3
 800138e:	480d      	ldr	r0, [pc, #52]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 8001390:	f006 fc94 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800139a:	f000 f95b 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	220c      	movs	r2, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 80013a6:	f006 fc89 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80013b0:	f000 f950 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM4_Init+0xc4>)
 80013b6:	f000 fd59 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200006d8 	.word	0x200006d8
 80013c8:	40000800 	.word	0x40000800

080013cc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b096      	sub	sp, #88	@ 0x58
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	222c      	movs	r2, #44	@ 0x2c
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f008 f917 	bl	800962c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013fe:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <MX_TIM15_Init+0x100>)
 8001400:	4a33      	ldr	r2, [pc, #204]	@ (80014d0 <MX_TIM15_Init+0x104>)
 8001402:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <MX_TIM15_Init+0x100>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <MX_TIM15_Init+0x100>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001410:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <MX_TIM15_Init+0x100>)
 8001412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001416:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <MX_TIM15_Init+0x100>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <MX_TIM15_Init+0x100>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <MX_TIM15_Init+0x100>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800142a:	4828      	ldr	r0, [pc, #160]	@ (80014cc <MX_TIM15_Init+0x100>)
 800142c:	f006 fbee 	bl	8007c0c <HAL_TIM_PWM_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 f90d 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001442:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001446:	4619      	mov	r1, r3
 8001448:	4820      	ldr	r0, [pc, #128]	@ (80014cc <MX_TIM15_Init+0x100>)
 800144a:	f007 f8bb 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001454:	f000 f8fe 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001458:	2360      	movs	r3, #96	@ 0x60
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_TIM15_Init+0x100>)
 800147e:	f006 fc1d 	bl	8007cbc <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001488:	f000 f8e4 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM15_Init+0x100>)
 80014b0:	f007 f910 	bl	80086d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80014ba:	f000 f8cb 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014be:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM15_Init+0x100>)
 80014c0:	f000 fcd4 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3758      	adds	r7, #88	@ 0x58
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000724 	.word	0x20000724
 80014d0:	40014000 	.word	0x40014000

080014d4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	@ 0x38
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <MX_GPIO_Init+0x164>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	4a52      	ldr	r2, [pc, #328]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001506:	4b50      	ldr	r3, [pc, #320]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	623b      	str	r3, [r7, #32]
 8001510:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b4d      	ldr	r3, [pc, #308]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	4a4c      	ldr	r2, [pc, #304]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151e:	4b4a      	ldr	r3, [pc, #296]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152a:	4b47      	ldr	r3, [pc, #284]	@ (8001648 <MX_GPIO_Init+0x164>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a46      	ldr	r2, [pc, #280]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	4b41      	ldr	r3, [pc, #260]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a40      	ldr	r2, [pc, #256]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b3b      	ldr	r3, [pc, #236]	@ (8001648 <MX_GPIO_Init+0x164>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a3a      	ldr	r2, [pc, #232]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a34      	ldr	r2, [pc, #208]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <MX_GPIO_Init+0x164>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a2e      	ldr	r2, [pc, #184]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b2c      	ldr	r3, [pc, #176]	@ (8001648 <MX_GPIO_Init+0x164>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <MX_GPIO_Init+0x164>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a28      	ldr	r2, [pc, #160]	@ (8001648 <MX_GPIO_Init+0x164>)
 80015a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <MX_GPIO_Init+0x164>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80015ba:	f003 f9b7 	bl	800492c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015be:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015d0:	230c      	movs	r3, #12
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	481c      	ldr	r0, [pc, #112]	@ (800164c <MX_GPIO_Init+0x168>)
 80015dc:	f002 f96c 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015e0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015f2:	230a      	movs	r3, #10
 80015f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001600:	f002 f95a 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161c:	f002 f94c 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001620:	2304      	movs	r3, #4
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001630:	230c      	movs	r3, #12
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_GPIO_Init+0x16c>)
 800163c:	f002 f93c 	bl	80038b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001640:	bf00      	nop
 8001642:	3738      	adds	r7, #56	@ 0x38
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	48000800 	.word	0x48000800
 8001650:	48000c00 	.word	0x48000c00

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <Error_Handler+0x8>

08001660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_MspInit+0x44>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	4a0e      	ldr	r2, [pc, #56]	@ (80016a4 <HAL_MspInit+0x44>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6613      	str	r3, [r2, #96]	@ 0x60
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_MspInit+0x44>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_MspInit+0x44>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <HAL_MspInit+0x44>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001688:	6593      	str	r3, [r2, #88]	@ 0x58
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_MspInit+0x44>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a2d      	ldr	r2, [pc, #180]	@ (800177c <HAL_ADC_MspInit+0xd4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d154      	bne.n	8001774 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 80016d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a26      	ldr	r2, [pc, #152]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <HAL_ADC_MspInit+0xd8>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800172a:	233f      	movs	r3, #63	@ 0x3f
 800172c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800172e:	230b      	movs	r3, #11
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4811      	ldr	r0, [pc, #68]	@ (8001784 <HAL_ADC_MspInit+0xdc>)
 800173e:	f002 f8bb 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001742:	230a      	movs	r3, #10
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001746:	230b      	movs	r3, #11
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001758:	f002 f8ae 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001760:	230b      	movs	r3, #11
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	@ (8001788 <HAL_ADC_MspInit+0xe0>)
 8001770:	f002 f8a2 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3730      	adds	r7, #48	@ 0x30
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	50040000 	.word	0x50040000
 8001780:	40021000 	.word	0x40021000
 8001784:	48000800 	.word	0x48000800
 8001788:	48000400 	.word	0x48000400

0800178c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <HAL_CAN_MspInit+0x7c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d127      	bne.n	80017fe <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <HAL_CAN_MspInit+0x80>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	4a16      	ldr	r2, [pc, #88]	@ (800180c <HAL_CAN_MspInit+0x80>)
 80017b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <HAL_CAN_MspInit+0x80>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_CAN_MspInit+0x80>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <HAL_CAN_MspInit+0x80>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_CAN_MspInit+0x80>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017de:	2303      	movs	r3, #3
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017ee:	2309      	movs	r3, #9
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <HAL_CAN_MspInit+0x84>)
 80017fa:	f002 f85d 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	@ 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40006400 	.word	0x40006400
 800180c:	40021000 	.word	0x40021000
 8001810:	48000c00 	.word	0x48000c00

08001814 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1e      	ldr	r2, [pc, #120]	@ (80018ac <HAL_COMP_MspInit+0x98>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d118      	bne.n	8001868 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <HAL_COMP_MspInit+0x9c>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a1d      	ldr	r2, [pc, #116]	@ (80018b0 <HAL_COMP_MspInit+0x9c>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_COMP_MspInit+0x9c>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184e:	2304      	movs	r3, #4
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001852:	2303      	movs	r3, #3
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4814      	ldr	r0, [pc, #80]	@ (80018b4 <HAL_COMP_MspInit+0xa0>)
 8001862:	f002 f829 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001866:	e01c      	b.n	80018a2 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <HAL_COMP_MspInit+0xa4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d117      	bne.n	80018a2 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_COMP_MspInit+0x9c>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <HAL_COMP_MspInit+0x9c>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <HAL_COMP_MspInit+0x9c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800188a:	23c0      	movs	r3, #192	@ 0xc0
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188e:	2303      	movs	r3, #3
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <HAL_COMP_MspInit+0xa0>)
 800189e:	f002 f80b 	bl	80038b8 <HAL_GPIO_Init>
}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40010200 	.word	0x40010200
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000400 	.word	0x48000400
 80018b8:	40010204 	.word	0x40010204

080018bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ae      	sub	sp, #184	@ 0xb8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2294      	movs	r2, #148	@ 0x94
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f007 fea5 	bl	800962c <memset>
  if(hi2c->Instance==I2C1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	@ (800196c <HAL_I2C_MspInit+0xb0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d13b      	bne.n	8001964 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018ec:	2340      	movs	r3, #64	@ 0x40
 80018ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 feff 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001904:	f7ff fea6 	bl	8001654 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_I2C_MspInit+0xb4>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <HAL_I2C_MspInit+0xb4>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_I2C_MspInit+0xb4>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001924:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193a:	2304      	movs	r3, #4
 800193c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001944:	4619      	mov	r1, r3
 8001946:	480b      	ldr	r0, [pc, #44]	@ (8001974 <HAL_I2C_MspInit+0xb8>)
 8001948:	f001 ffb6 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <HAL_I2C_MspInit+0xb4>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <HAL_I2C_MspInit+0xb4>)
 8001952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001956:	6593      	str	r3, [r2, #88]	@ 0x58
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_I2C_MspInit+0xb4>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	37b8      	adds	r7, #184	@ 0xb8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40005400 	.word	0x40005400
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400

08001978 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b0ae      	sub	sp, #184	@ 0xb8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2294      	movs	r2, #148	@ 0x94
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f007 fe47 	bl	800962c <memset>
  if(hsmbus->Instance==I2C2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a21      	ldr	r2, [pc, #132]	@ (8001a28 <HAL_SMBUS_MspInit+0xb0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d13a      	bne.n	8001a1e <HAL_SMBUS_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019a8:	2380      	movs	r3, #128	@ 0x80
 80019aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fea1 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 80019c0:	f7ff fe48 	bl	8001654 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_SMBUS_MspInit+0xb4>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c8:	4a18      	ldr	r2, [pc, #96]	@ (8001a2c <HAL_SMBUS_MspInit+0xb4>)
 80019ca:	f043 0320 	orr.w	r3, r3, #32
 80019ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <HAL_SMBUS_MspInit+0xb4>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019dc:	2307      	movs	r3, #7
 80019de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	2312      	movs	r3, #18
 80019e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019f4:	2304      	movs	r3, #4
 80019f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019fa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019fe:	4619      	mov	r1, r3
 8001a00:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <HAL_SMBUS_MspInit+0xb8>)
 8001a02:	f001 ff59 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_SMBUS_MspInit+0xb4>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_SMBUS_MspInit+0xb4>)
 8001a0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_SMBUS_MspInit+0xb4>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	37b8      	adds	r7, #184	@ 0xb8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40005800 	.word	0x40005800
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48001400 	.word	0x48001400

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0b2      	sub	sp, #200	@ 0xc8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	2294      	movs	r2, #148	@ 0x94
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f007 fde9 	bl	800962c <memset>
  if(huart->Instance==LPUART1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a64      	ldr	r2, [pc, #400]	@ (8001bf0 <HAL_UART_MspInit+0x1bc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d13e      	bne.n	8001ae2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a64:	2320      	movs	r3, #32
 8001a66:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fe43 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a7c:	f7ff fdea 	bl	8001654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a80:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a84:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a8c:	4b59      	ldr	r3, [pc, #356]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a98:	4b56      	ldr	r3, [pc, #344]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a55      	ldr	r2, [pc, #340]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001ab0:	f002 ff3c 	bl	800492c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ab4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ad4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4847      	ldr	r0, [pc, #284]	@ (8001bf8 <HAL_UART_MspInit+0x1c4>)
 8001adc:	f001 feec 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae0:	e081      	b.n	8001be6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a45      	ldr	r2, [pc, #276]	@ (8001bfc <HAL_UART_MspInit+0x1c8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d13b      	bne.n	8001b64 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af4:	f107 0320 	add.w	r3, r7, #32
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fdff 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b04:	f7ff fda6 	bl	8001654 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b08:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b14:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b20:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b24:	4a33      	ldr	r2, [pc, #204]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2c:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b38:	2378      	movs	r3, #120	@ 0x78
 8001b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b50:	2307      	movs	r3, #7
 8001b52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b56:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4828      	ldr	r0, [pc, #160]	@ (8001c00 <HAL_UART_MspInit+0x1cc>)
 8001b5e:	f001 feab 	bl	80038b8 <HAL_GPIO_Init>
}
 8001b62:	e040      	b.n	8001be6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a26      	ldr	r2, [pc, #152]	@ (8001c04 <HAL_UART_MspInit+0x1d0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d13b      	bne.n	8001be6 <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fdbe 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001b86:	f7ff fd65 	bl	8001654 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba2:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bda:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	@ (8001c00 <HAL_UART_MspInit+0x1cc>)
 8001be2:	f001 fe69 	bl	80038b8 <HAL_GPIO_Init>
}
 8001be6:	bf00      	nop
 8001be8:	37c8      	adds	r7, #200	@ 0xc8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40008000 	.word	0x40008000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48001800 	.word	0x48001800
 8001bfc:	40004400 	.word	0x40004400
 8001c00:	48000c00 	.word	0x48000c00
 8001c04:	40004800 	.word	0x40004800

08001c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	@ 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce0 <HAL_SPI_MspInit+0xd8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d129      	bne.n	8001c7e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a27      	ldr	r2, [pc, #156]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c5a:	23f0      	movs	r3, #240	@ 0xf0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f001 fe1e 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c7c:	e02c      	b.n	8001cd8 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a19      	ldr	r2, [pc, #100]	@ (8001ce8 <HAL_SPI_MspInit+0xe0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d127      	bne.n	8001cd8 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c88:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_SPI_MspInit+0xdc>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001cb8:	2338      	movs	r3, #56	@ 0x38
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	@ (8001cec <HAL_SPI_MspInit+0xe4>)
 8001cd4:	f001 fdf0 	bl	80038b8 <HAL_GPIO_Init>
}
 8001cd8:	bf00      	nop
 8001cda:	3730      	adds	r7, #48	@ 0x30
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40013000 	.word	0x40013000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40003c00 	.word	0x40003c00
 8001cec:	48000400 	.word	0x48000400

08001cf0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	@ 0x38
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	@ (8001e54 <HAL_TIM_PWM_MspInit+0x164>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d139      	bne.n	8001d86 <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d12:	4b51      	ldr	r3, [pc, #324]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d16:	4a50      	ldr	r2, [pc, #320]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d36:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	483f      	ldr	r0, [pc, #252]	@ (8001e5c <HAL_TIM_PWM_MspInit+0x16c>)
 8001d5e:	f001 fdab 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d62:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d74:	2303      	movs	r3, #3
 8001d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4837      	ldr	r0, [pc, #220]	@ (8001e5c <HAL_TIM_PWM_MspInit+0x16c>)
 8001d80:	f001 fd9a 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d84:	e062      	b.n	8001e4c <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8e:	d10c      	bne.n	8001daa <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d90:	4b31      	ldr	r3, [pc, #196]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	4a30      	ldr	r2, [pc, #192]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	69bb      	ldr	r3, [r7, #24]
}
 8001da8:	e050      	b.n	8001e4c <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <HAL_TIM_PWM_MspInit+0x170>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d10c      	bne.n	8001dce <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db4:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc0:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
}
 8001dcc:	e03e      	b.n	8001e4c <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a24      	ldr	r2, [pc, #144]	@ (8001e64 <HAL_TIM_PWM_MspInit+0x174>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d128      	bne.n	8001e2a <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df4:	4a18      	ldr	r2, [pc, #96]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	480e      	ldr	r0, [pc, #56]	@ (8001e5c <HAL_TIM_PWM_MspInit+0x16c>)
 8001e24:	f001 fd48 	bl	80038b8 <HAL_GPIO_Init>
}
 8001e28:	e010      	b.n	8001e4c <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e68 <HAL_TIM_PWM_MspInit+0x178>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d10b      	bne.n	8001e4c <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e38:	4a07      	ldr	r2, [pc, #28]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_TIM_PWM_MspInit+0x168>)
 8001e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	3738      	adds	r7, #56	@ 0x38
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48001000 	.word	0x48001000
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40000800 	.word	0x40000800
 8001e68:	40014000 	.word	0x40014000

08001e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08e      	sub	sp, #56	@ 0x38
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a73      	ldr	r2, [pc, #460]	@ (8002058 <HAL_TIM_MspPostInit+0x1ec>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d11d      	bne.n	8001eca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8e:	4b73      	ldr	r3, [pc, #460]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	4a72      	ldr	r2, [pc, #456]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001e94:	f043 0310 	orr.w	r3, r3, #16
 8001e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e9a:	4b70      	ldr	r3, [pc, #448]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	623b      	str	r3, [r7, #32]
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ea6:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4867      	ldr	r0, [pc, #412]	@ (8002060 <HAL_TIM_MspPostInit+0x1f4>)
 8001ec4:	f001 fcf8 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001ec8:	e0c2      	b.n	8002050 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed2:	d13a      	bne.n	8001f4a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b61      	ldr	r3, [pc, #388]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	4a60      	ldr	r2, [pc, #384]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b5b      	ldr	r3, [pc, #364]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef8:	4b58      	ldr	r3, [pc, #352]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f04:	2301      	movs	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f14:	2301      	movs	r3, #1
 8001f16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f22:	f001 fcc9 	bl	80038b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	4848      	ldr	r0, [pc, #288]	@ (8002064 <HAL_TIM_MspPostInit+0x1f8>)
 8001f44:	f001 fcb8 	bl	80038b8 <HAL_GPIO_Init>
}
 8001f48:	e082      	b.n	8002050 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a46      	ldr	r2, [pc, #280]	@ (8002068 <HAL_TIM_MspPostInit+0x1fc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d138      	bne.n	8001fc6 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b41      	ldr	r3, [pc, #260]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	4a40      	ldr	r2, [pc, #256]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f60:	4b3e      	ldr	r3, [pc, #248]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	4a3a      	ldr	r2, [pc, #232]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f78:	4b38      	ldr	r3, [pc, #224]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f94:	2302      	movs	r3, #2
 8001f96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4831      	ldr	r0, [pc, #196]	@ (8002064 <HAL_TIM_MspPostInit+0x1f8>)
 8001fa0:	f001 fc8a 	bl	80038b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482b      	ldr	r0, [pc, #172]	@ (800206c <HAL_TIM_MspPostInit+0x200>)
 8001fc0:	f001 fc7a 	bl	80038b8 <HAL_GPIO_Init>
}
 8001fc4:	e044      	b.n	8002050 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a29      	ldr	r2, [pc, #164]	@ (8002070 <HAL_TIM_MspPostInit+0x204>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d11d      	bne.n	800200c <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd4:	4a21      	ldr	r2, [pc, #132]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fe8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	481b      	ldr	r0, [pc, #108]	@ (8002074 <HAL_TIM_MspPostInit+0x208>)
 8002006:	f001 fc57 	bl	80038b8 <HAL_GPIO_Init>
}
 800200a:	e021      	b.n	8002050 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_TIM_MspPostInit+0x20c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d11c      	bne.n	8002050 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_TIM_MspPostInit+0x1f0>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800202e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002040:	230e      	movs	r3, #14
 8002042:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	@ (8002064 <HAL_TIM_MspPostInit+0x1f8>)
 800204c:	f001 fc34 	bl	80038b8 <HAL_GPIO_Init>
}
 8002050:	bf00      	nop
 8002052:	3738      	adds	r7, #56	@ 0x38
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40021000 	.word	0x40021000
 8002060:	48001000 	.word	0x48001000
 8002064:	48000400 	.word	0x48000400
 8002068:	40000400 	.word	0x40000400
 800206c:	48000800 	.word	0x48000800
 8002070:	40000800 	.word	0x40000800
 8002074:	48000c00 	.word	0x48000c00
 8002078:	40014000 	.word	0x40014000

0800207c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a50      	ldr	r2, [pc, #320]	@ (80021cc <HAL_SAI_MspInit+0x150>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d124      	bne.n	80020d8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800208e:	4b50      	ldr	r3, [pc, #320]	@ (80021d0 <HAL_SAI_MspInit+0x154>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10b      	bne.n	80020ae <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002096:	4b4f      	ldr	r3, [pc, #316]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 8002098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209a:	4a4e      	ldr	r2, [pc, #312]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 800209c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020a2:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80020ae:	4b48      	ldr	r3, [pc, #288]	@ (80021d0 <HAL_SAI_MspInit+0x154>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	4a46      	ldr	r2, [pc, #280]	@ (80021d0 <HAL_SAI_MspInit+0x154>)
 80020b6:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80020b8:	2374      	movs	r3, #116	@ 0x74
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80020c8:	230d      	movs	r3, #13
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4841      	ldr	r0, [pc, #260]	@ (80021d8 <HAL_SAI_MspInit+0x15c>)
 80020d4:	f001 fbf0 	bl	80038b8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3f      	ldr	r2, [pc, #252]	@ (80021dc <HAL_SAI_MspInit+0x160>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d135      	bne.n	800214e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80020e2:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_SAI_MspInit+0x154>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10b      	bne.n	8002102 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020ea:	4b3a      	ldr	r3, [pc, #232]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ee:	4a39      	ldr	r2, [pc, #228]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 80020f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002102:	4b33      	ldr	r3, [pc, #204]	@ (80021d0 <HAL_SAI_MspInit+0x154>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	4a31      	ldr	r2, [pc, #196]	@ (80021d0 <HAL_SAI_MspInit+0x154>)
 800210a:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800210c:	2308      	movs	r3, #8
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800211c:	230d      	movs	r3, #13
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	482c      	ldr	r0, [pc, #176]	@ (80021d8 <HAL_SAI_MspInit+0x15c>)
 8002128:	f001 fbc6 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800212c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800213e:	230d      	movs	r3, #13
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4825      	ldr	r0, [pc, #148]	@ (80021e0 <HAL_SAI_MspInit+0x164>)
 800214a:	f001 fbb5 	bl	80038b8 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a24      	ldr	r2, [pc, #144]	@ (80021e4 <HAL_SAI_MspInit+0x168>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d135      	bne.n	80021c4 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002158:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <HAL_SAI_MspInit+0x16c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002160:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 8002162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002164:	4a1b      	ldr	r2, [pc, #108]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 8002166:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800216a:	6613      	str	r3, [r2, #96]	@ 0x60
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_SAI_MspInit+0x158>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_SAI_MspInit+0x16c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a1a      	ldr	r2, [pc, #104]	@ (80021e8 <HAL_SAI_MspInit+0x16c>)
 8002180:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002182:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002194:	230d      	movs	r3, #13
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	4813      	ldr	r0, [pc, #76]	@ (80021ec <HAL_SAI_MspInit+0x170>)
 80021a0:	f001 fb8a 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a4:	2340      	movs	r3, #64	@ 0x40
 80021a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80021b4:	230d      	movs	r3, #13
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	480c      	ldr	r0, [pc, #48]	@ (80021f0 <HAL_SAI_MspInit+0x174>)
 80021c0:	f001 fb7a 	bl	80038b8 <HAL_GPIO_Init>

    }
}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	@ 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40015404 	.word	0x40015404
 80021d0:	20000774 	.word	0x20000774
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48001000 	.word	0x48001000
 80021dc:	40015424 	.word	0x40015424
 80021e0:	48001400 	.word	0x48001400
 80021e4:	40015804 	.word	0x40015804
 80021e8:	20000778 	.word	0x20000778
 80021ec:	48000400 	.word	0x48000400
 80021f0:	48000800 	.word	0x48000800

080021f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <NMI_Handler+0x4>

080021fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <MemManage_Handler+0x4>

0800220c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <UsageFault_Handler+0x4>

0800221c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224a:	f000 f893 	bl	8002374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800227c:	f7ff ffea 	bl	8002254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002280:	480c      	ldr	r0, [pc, #48]	@ (80022b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002282:	490d      	ldr	r1, [pc, #52]	@ (80022b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <LoopForever+0xe>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002298:	4c0a      	ldr	r4, [pc, #40]	@ (80022c4 <LoopForever+0x16>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a6:	f007 f9c9 	bl	800963c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022aa:	f7fe f9dd 	bl	8000668 <main>

080022ae <LoopForever>:

LoopForever:
    b LoopForever
 80022ae:	e7fe      	b.n	80022ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022b0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022bc:	0800971c 	.word	0x0800971c
  ldr r2, =_sbss
 80022c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022c4:	20000780 	.word	0x20000780

080022c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC1_IRQHandler>

080022ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f001 fabb 	bl	8003850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 f80e 	bl	80022fc <HAL_InitTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e001      	b.n	80022f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ec:	f7ff f9b8 	bl	8001660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022f0:	79fb      	ldrb	r3, [r7, #7]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002308:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <HAL_InitTick+0x6c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <HAL_InitTick+0x70>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <HAL_InitTick+0x6c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f001 fab9 	bl	800389e <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10f      	bne.n	8002352 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b0f      	cmp	r3, #15
 8002336:	d809      	bhi.n	800234c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002338:	2200      	movs	r2, #0
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f001 fa91 	bl	8003866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002344:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <HAL_InitTick+0x74>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e007      	b.n	800235c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e004      	b.n	800235c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e001      	b.n	800235c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000008 	.word	0x20000008
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000008 	.word	0x20000008
 8002398:	2000077c 	.word	0x2000077c

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	2000077c 	.word	0x2000077c

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff ffee 	bl	800239c <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffde 	bl	800239c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000008 	.word	0x20000008

080023fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3360      	adds	r3, #96	@ 0x60
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <LL_ADC_SetOffset+0x44>)
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	4313      	orrs	r3, r2
 8002494:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	03fff000 	.word	0x03fff000

080024ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3360      	adds	r3, #96	@ 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3360      	adds	r3, #96	@ 0x60
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	615a      	str	r2, [r3, #20]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3330      	adds	r3, #48	@ 0x30
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	211f      	movs	r1, #31
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0e9b      	lsrs	r3, r3, #26
 800256c:	f003 011f 	and.w	r1, r3, #31
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	431a      	orrs	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3314      	adds	r3, #20
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0e5b      	lsrs	r3, r3, #25
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	4413      	add	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0d1b      	lsrs	r3, r3, #20
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2107      	movs	r1, #7
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	0d1b      	lsrs	r3, r3, #20
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	431a      	orrs	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0318 	and.w	r3, r3, #24
 8002606:	4908      	ldr	r1, [pc, #32]	@ (8002628 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002608:	40d9      	lsrs	r1, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	400b      	ands	r3, r1
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	431a      	orrs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	0007ffff 	.word	0x0007ffff

0800262c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800263c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6093      	str	r3, [r2, #8]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002664:	d101      	bne.n	800266a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002688:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800268c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026b4:	d101      	bne.n	80026ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <LL_ADC_IsEnabled+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_ADC_IsEnabled+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d101      	bne.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d101      	bne.n	800272c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e129      	b.n	80029aa <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7fe ff9f 	bl	80016a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff67 	bl	8002650 <LL_ADC_IsDeepPowerDownEnabled>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff4d 	bl	800262c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff82 	bl	80026a0 <LL_ADC_IsInternalRegulatorEnabled>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d115      	bne.n	80027ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff66 	bl	8002678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027ac:	4b81      	ldr	r3, [pc, #516]	@ (80029b4 <HAL_ADC_Init+0x278>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	4a81      	ldr	r2, [pc, #516]	@ (80029b8 <HAL_ADC_Init+0x27c>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	3301      	adds	r3, #1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff64 	bl	80026a0 <LL_ADC_IsInternalRegulatorEnabled>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10d      	bne.n	80027fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	f043 0210 	orr.w	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff75 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002804:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 80c2 	bne.w	8002998 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 80be 	bne.w	8002998 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002824:	f043 0202 	orr.w	r2, r3, #2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff49 	bl	80026c8 <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800283c:	485f      	ldr	r0, [pc, #380]	@ (80029bc <HAL_ADC_Init+0x280>)
 800283e:	f7ff ff43 	bl	80026c8 <LL_ADC_IsEnabled>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4619      	mov	r1, r3
 800284e:	485c      	ldr	r0, [pc, #368]	@ (80029c0 <HAL_ADC_Init+0x284>)
 8002850:	f7ff fdd4 	bl	80023fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7e5b      	ldrb	r3, [r3, #25]
 8002858:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002864:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800286a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002872:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	3b01      	subs	r3, #1
 8002888:	045b      	lsls	r3, r3, #17
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_ADC_Init+0x288>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	430b      	orrs	r3, r1
 80028be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff25 	bl	8002714 <LL_ADC_INJ_IsConversionOngoing>
 80028ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d140      	bne.n	8002954 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d13d      	bne.n	8002954 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7e1b      	ldrb	r3, [r3, #24]
 80028e0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028e2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028fa:	f023 0306 	bic.w	r3, r3, #6
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	430b      	orrs	r3, r1
 8002906:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800290e:	2b01      	cmp	r3, #1
 8002910:	d118      	bne.n	8002944 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002934:	430a      	orrs	r2, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e007      	b.n	8002954 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10c      	bne.n	8002976 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f023 010f 	bic.w	r1, r3, #15
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
 8002974:	e007      	b.n	8002986 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 020f 	bic.w	r2, r2, #15
 8002984:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	659a      	str	r2, [r3, #88]	@ 0x58
 8002996:	e007      	b.n	80029a8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000000 	.word	0x20000000
 80029b8:	053e2d63 	.word	0x053e2d63
 80029bc:	50040000 	.word	0x50040000
 80029c0:	50040300 	.word	0x50040300
 80029c4:	fff0c007 	.word	0xfff0c007

080029c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0b6      	sub	sp, #216	@ 0xd8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x22>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e3d5      	b.n	8003196 <HAL_ADC_ConfigChannel+0x7ce>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fe79 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 83ba 	bne.w	8003178 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d824      	bhi.n	8002a5e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	3b02      	subs	r3, #2
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d81b      	bhi.n	8002a56 <HAL_ADC_ConfigChannel+0x8e>
 8002a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <HAL_ADC_ConfigChannel+0x5c>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a3d 	.word	0x08002a3d
 8002a2c:	08002a45 	.word	0x08002a45
 8002a30:	08002a4d 	.word	0x08002a4d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a34:	230c      	movs	r3, #12
 8002a36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a3a:	e010      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a3c:	2312      	movs	r3, #18
 8002a3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a42:	e00c      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a44:	2318      	movs	r3, #24
 8002a46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a4a:	e008      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a54:	e003      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a56:	2306      	movs	r3, #6
 8002a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a5c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a6c:	f7ff fd62 	bl	8002534 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fe3a 	bl	80026ee <LL_ADC_REG_IsConversionOngoing>
 8002a7a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fe46 	bl	8002714 <LL_ADC_INJ_IsConversionOngoing>
 8002a88:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 81bf 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 81ba 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002aa8:	d10f      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7ff fd69 	bl	800258c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fd23 	bl	800250e <LL_ADC_SetSamplingTimeCommonConfig>
 8002ac8:	e00e      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f7ff fd58 	bl	800258c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fd13 	bl	800250e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d00a      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b1a:	f7ff fca3 	bl	8002464 <LL_ADC_SetOffset>
 8002b1e:	e179      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fcc0 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x184>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fcb5 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	f003 021f 	and.w	r2, r3, #31
 8002b4a:	e01e      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x1c2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fcaa 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	e004      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x1da>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	e018      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x20c>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002bbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e004      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002bca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d106      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fc79 	bl	80024d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2101      	movs	r1, #1
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fc5d 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x24a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fc52 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	e01e      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x288>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fc47 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e004      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002c44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x2a0>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	e018      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x2d2>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e004      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fc16 	bl	80024d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fbfa 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x310>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fbef 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	f003 021f 	and.w	r2, r3, #31
 8002cd6:	e01e      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x34e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fbe4 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e004      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x366>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	e014      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x390>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	e004      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d106      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2102      	movs	r1, #2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fbb7 	bl	80024d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2103      	movs	r1, #3
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fb9b 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x3ce>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2103      	movs	r1, #3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fb90 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	e017      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x3fe>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fb85 	bl	80024ac <LL_ADC_GetOffsetChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002db0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002db8:	2320      	movs	r3, #32
 8002dba:	e003      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002dbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x416>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	e011      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x43a>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dee:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e003      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d106      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fb62 	bl	80024d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fc55 	bl	80026c8 <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 813f 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f7ff fbd6 	bl	80025e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a8e      	ldr	r2, [pc, #568]	@ (8003078 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	f040 8130 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x4a4>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	bf94      	ite	ls
 8002e64:	2301      	movls	r3, #1
 8002e66:	2300      	movhi	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e019      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x4d8>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2b09      	cmp	r3, #9
 8002e98:	bf94      	ite	ls
 8002e9a:	2301      	movls	r3, #1
 8002e9c:	2300      	movhi	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d079      	beq.n	8002f98 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x4f8>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	069b      	lsls	r3, r3, #26
 8002eba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ebe:	e015      	b.n	8002eec <HAL_ADC_ConfigChannel+0x524>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ed0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	069b      	lsls	r3, r3, #26
 8002ee8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x544>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	e017      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x574>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	ea42 0103 	orr.w	r1, r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x59a>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	051b      	lsls	r3, r3, #20
 8002f60:	e018      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x5cc>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f94:	430b      	orrs	r3, r1
 8002f96:	e080      	b.n	800309a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x5ec>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	3301      	adds	r3, #1
 8002fac:	069b      	lsls	r3, r3, #26
 8002fae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fb2:	e015      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x618>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e003      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	069b      	lsls	r3, r3, #26
 8002fdc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x638>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	e017      	b.n	8003030 <HAL_ADC_ConfigChannel+0x668>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	61bb      	str	r3, [r7, #24]
  return result;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	ea42 0103 	orr.w	r1, r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_ADC_ConfigChannel+0x694>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	3301      	adds	r3, #1
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	3b1e      	subs	r3, #30
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800305a:	e01d      	b.n	8003098 <HAL_ADC_ConfigChannel+0x6d0>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	60fb      	str	r3, [r7, #12]
  return result;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e005      	b.n	8003084 <HAL_ADC_ConfigChannel+0x6bc>
 8003078:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 021f 	and.w	r2, r3, #31
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	3b1e      	subs	r3, #30
 8003092:	051b      	lsls	r3, r3, #20
 8003094:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003098:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800309e:	4619      	mov	r1, r3
 80030a0:	f7ff fa74 	bl	800258c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b3d      	ldr	r3, [pc, #244]	@ (80031a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d06c      	beq.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b0:	483c      	ldr	r0, [pc, #240]	@ (80031a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80030b2:	f7ff f9c9 	bl	8002448 <LL_ADC_GetCommonPathInternalCh>
 80030b6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3a      	ldr	r2, [pc, #232]	@ (80031a8 <HAL_ADC_ConfigChannel+0x7e0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d127      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d121      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a35      	ldr	r2, [pc, #212]	@ (80031ac <HAL_ADC_ConfigChannel+0x7e4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d157      	bne.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030e2:	4619      	mov	r1, r3
 80030e4:	482f      	ldr	r0, [pc, #188]	@ (80031a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80030e6:	f7ff f99c 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ea:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <HAL_ADC_ConfigChannel+0x7e8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	099b      	lsrs	r3, r3, #6
 80030f0:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <HAL_ADC_ConfigChannel+0x7ec>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	099b      	lsrs	r3, r3, #6
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003104:	e002      	b.n	800310c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3b01      	subs	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f9      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003112:	e03a      	b.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a27      	ldr	r2, [pc, #156]	@ (80031b8 <HAL_ADC_ConfigChannel+0x7f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d113      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800311e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003122:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1f      	ldr	r2, [pc, #124]	@ (80031ac <HAL_ADC_ConfigChannel+0x7e4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d12a      	bne.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003138:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800313c:	4619      	mov	r1, r3
 800313e:	4819      	ldr	r0, [pc, #100]	@ (80031a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003140:	f7ff f96f 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003144:	e021      	b.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1c      	ldr	r2, [pc, #112]	@ (80031bc <HAL_ADC_ConfigChannel+0x7f4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d11c      	bne.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <HAL_ADC_ConfigChannel+0x7e4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d111      	bne.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800316a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800316e:	4619      	mov	r1, r3
 8003170:	480c      	ldr	r0, [pc, #48]	@ (80031a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003172:	f7ff f956 	bl	8002422 <LL_ADC_SetCommonPathInternalCh>
 8003176:	e008      	b.n	800318a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003192:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003196:	4618      	mov	r0, r3
 8003198:	37d8      	adds	r7, #216	@ 0xd8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	80080000 	.word	0x80080000
 80031a4:	50040300 	.word	0x50040300
 80031a8:	c7520000 	.word	0xc7520000
 80031ac:	50040000 	.word	0x50040000
 80031b0:	20000000 	.word	0x20000000
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	cb840000 	.word	0xcb840000
 80031bc:	80000001 	.word	0x80000001

080031c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0ed      	b.n	80033ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe fad4 	bl	800178c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f4:	f7ff f8d2 	bl	800239c <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031fa:	e012      	b.n	8003222 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031fc:	f7ff f8ce 	bl	800239c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b0a      	cmp	r3, #10
 8003208:	d90b      	bls.n	8003222 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2205      	movs	r2, #5
 800321a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0c5      	b.n	80033ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0e5      	beq.n	80031fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0202 	bic.w	r2, r2, #2
 800323e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003240:	f7ff f8ac 	bl	800239c <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003246:	e012      	b.n	800326e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003248:	f7ff f8a8 	bl	800239c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b0a      	cmp	r3, #10
 8003254:	d90b      	bls.n	800326e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2205      	movs	r2, #5
 8003266:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e09f      	b.n	80033ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1e5      	bne.n	8003248 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7e1b      	ldrb	r3, [r3, #24]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d108      	bne.n	8003296 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e007      	b.n	80032a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7e5b      	ldrb	r3, [r3, #25]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d108      	bne.n	80032c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e007      	b.n	80032d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7e9b      	ldrb	r3, [r3, #26]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d108      	bne.n	80032ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e007      	b.n	80032fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0220 	bic.w	r2, r2, #32
 80032f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7edb      	ldrb	r3, [r3, #27]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0210 	bic.w	r2, r2, #16
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e007      	b.n	8003324 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0210 	orr.w	r2, r2, #16
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7f1b      	ldrb	r3, [r3, #28]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d108      	bne.n	800333e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0208 	orr.w	r2, r2, #8
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e007      	b.n	800334e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0208 	bic.w	r2, r2, #8
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7f5b      	ldrb	r3, [r3, #29]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d108      	bne.n	8003368 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0204 	orr.w	r2, r2, #4
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e007      	b.n	8003378 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	ea42 0103 	orr.w	r1, r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	1e5a      	subs	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <LL_EXTI_EnableIT_0_31+0x20>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4904      	ldr	r1, [pc, #16]	@ (80033d8 <LL_EXTI_EnableIT_0_31+0x20>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40010400 	.word	0x40010400

080033dc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <LL_EXTI_DisableIT_0_31+0x24>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	4904      	ldr	r1, [pc, #16]	@ (8003400 <LL_EXTI_DisableIT_0_31+0x24>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010400 	.word	0x40010400

08003404 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <LL_EXTI_EnableEvent_0_31+0x20>)
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4904      	ldr	r1, [pc, #16]	@ (8003424 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]

}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40010400 	.word	0x40010400

08003428 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	43db      	mvns	r3, r3
 8003438:	4904      	ldr	r1, [pc, #16]	@ (800344c <LL_EXTI_DisableEvent_0_31+0x24>)
 800343a:	4013      	ands	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010400 	.word	0x40010400

08003450 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4904      	ldr	r1, [pc, #16]	@ (8003470 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40010400 	.word	0x40010400

08003474 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	43db      	mvns	r3, r3
 8003484:	4904      	ldr	r1, [pc, #16]	@ (8003498 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003486:	4013      	ands	r3, r2
 8003488:	608b      	str	r3, [r1, #8]

}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40010400 	.word	0x40010400

0800349c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	4904      	ldr	r1, [pc, #16]	@ (80034bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60cb      	str	r3, [r1, #12]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40010400 	.word	0x40010400

080034c0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80034c8:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	4904      	ldr	r1, [pc, #16]	@ (80034e4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	60cb      	str	r3, [r1, #12]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40010400 	.word	0x40010400

080034e8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80034f0:	4a04      	ldr	r2, [pc, #16]	@ (8003504 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6153      	str	r3, [r2, #20]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	77fb      	strb	r3, [r7, #31]
 8003522:	e0d1      	b.n	80036c8 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800352e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003532:	d102      	bne.n	800353a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e0c6      	b.n	80036c8 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d115      	bne.n	8003572 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003554:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_COMP_Init+0x1cc>)
 8003556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003558:	4a5e      	ldr	r2, [pc, #376]	@ (80036d4 <HAL_COMP_Init+0x1cc>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003560:	4b5c      	ldr	r3, [pc, #368]	@ (80036d4 <HAL_COMP_Init+0x1cc>)
 8003562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fe f951 	bl	8001814 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800357c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b4b      	ldr	r3, [pc, #300]	@ (80036d8 <HAL_COMP_Init+0x1d0>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	6979      	ldr	r1, [r7, #20]
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035be:	d106      	bne.n	80035ce <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80035c0:	4b46      	ldr	r3, [pc, #280]	@ (80036dc <HAL_COMP_Init+0x1d4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a45      	ldr	r2, [pc, #276]	@ (80036dc <HAL_COMP_Init+0x1d4>)
 80035c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e005      	b.n	80035da <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80035ce:	4b43      	ldr	r3, [pc, #268]	@ (80036dc <HAL_COMP_Init+0x1d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a42      	ldr	r2, [pc, #264]	@ (80036dc <HAL_COMP_Init+0x1d4>)
 80035d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035d8:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d016      	beq.n	8003616 <HAL_COMP_Init+0x10e>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d113      	bne.n	8003616 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ee:	4b3c      	ldr	r3, [pc, #240]	@ (80036e0 <HAL_COMP_Init+0x1d8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	4a3b      	ldr	r2, [pc, #236]	@ (80036e4 <HAL_COMP_Init+0x1dc>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003608:	e002      	b.n	8003610 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3b01      	subs	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f9      	bne.n	800360a <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	@ (80036e8 <HAL_COMP_Init+0x1e0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d102      	bne.n	8003626 <HAL_COMP_Init+0x11e>
 8003620:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003624:	e001      	b.n	800362a <HAL_COMP_Init+0x122>
 8003626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800362a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d037      	beq.n	80036a8 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003644:	6938      	ldr	r0, [r7, #16]
 8003646:	f7ff ff03 	bl	8003450 <LL_EXTI_EnableRisingTrig_0_31>
 800364a:	e002      	b.n	8003652 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800364c:	6938      	ldr	r0, [r7, #16]
 800364e:	f7ff ff11 	bl	8003474 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800365e:	6938      	ldr	r0, [r7, #16]
 8003660:	f7ff ff1c 	bl	800349c <LL_EXTI_EnableFallingTrig_0_31>
 8003664:	e002      	b.n	800366c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003666:	6938      	ldr	r0, [r7, #16]
 8003668:	f7ff ff2a 	bl	80034c0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800366c:	6938      	ldr	r0, [r7, #16]
 800366e:	f7ff ff3b 	bl	80034e8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800367e:	6938      	ldr	r0, [r7, #16]
 8003680:	f7ff fec0 	bl	8003404 <LL_EXTI_EnableEvent_0_31>
 8003684:	e002      	b.n	800368c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003686:	6938      	ldr	r0, [r7, #16]
 8003688:	f7ff fece 	bl	8003428 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8003698:	6938      	ldr	r0, [r7, #16]
 800369a:	f7ff fe8d 	bl	80033b8 <LL_EXTI_EnableIT_0_31>
 800369e:	e009      	b.n	80036b4 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80036a0:	6938      	ldr	r0, [r7, #16]
 80036a2:	f7ff fe9b 	bl	80033dc <LL_EXTI_DisableIT_0_31>
 80036a6:	e005      	b.n	80036b4 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80036a8:	6938      	ldr	r0, [r7, #16]
 80036aa:	f7ff febd 	bl	8003428 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80036ae:	6938      	ldr	r0, [r7, #16]
 80036b0:	f7ff fe94 	bl	80033dc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d103      	bne.n	80036c8 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	ff207d03 	.word	0xff207d03
 80036dc:	40010204 	.word	0x40010204
 80036e0:	20000000 	.word	0x20000000
 80036e4:	053e2d63 	.word	0x053e2d63
 80036e8:	40010200 	.word	0x40010200

080036ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800371c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371e:	4a04      	ldr	r2, [pc, #16]	@ (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	60d3      	str	r3, [r2, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003738:	4b04      	ldr	r3, [pc, #16]	@ (800374c <__NVIC_GetPriorityGrouping+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	@ (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	@ (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800381c:	d301      	bcc.n	8003822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <SysTick_Config+0x40>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382a:	210f      	movs	r1, #15
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	f7ff ff8e 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <SysTick_Config+0x40>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383a:	4b04      	ldr	r3, [pc, #16]	@ (800384c <SysTick_Config+0x40>)
 800383c:	2207      	movs	r2, #7
 800383e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff47 	bl	80036ec <__NVIC_SetPriorityGrouping>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003878:	f7ff ff5c 	bl	8003734 <__NVIC_GetPriorityGrouping>
 800387c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff8e 	bl	80037a4 <NVIC_EncodePriority>
 8003888:	4602      	mov	r2, r0
 800388a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff5d 	bl	8003750 <__NVIC_SetPriority>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ffb0 	bl	800380c <SysTick_Config>
 80038ac:	4603      	mov	r3, r0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c6:	e166      	b.n	8003b96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8158 	beq.w	8003b90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d005      	beq.n	80038f8 <HAL_GPIO_Init+0x40>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d130      	bne.n	800395a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800392e:	2201      	movs	r2, #1
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0201 	and.w	r2, r3, #1
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b03      	cmp	r3, #3
 8003964:	d017      	beq.n	8003996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	6939      	ldr	r1, [r7, #16]
 80039e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0203 	and.w	r2, r3, #3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80b2 	beq.w	8003b90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2c:	4b61      	ldr	r3, [pc, #388]	@ (8003bb4 <HAL_GPIO_Init+0x2fc>)
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	4a60      	ldr	r2, [pc, #384]	@ (8003bb4 <HAL_GPIO_Init+0x2fc>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a38:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb4 <HAL_GPIO_Init+0x2fc>)
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a44:	4a5c      	ldr	r2, [pc, #368]	@ (8003bb8 <HAL_GPIO_Init+0x300>)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	220f      	movs	r2, #15
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a6e:	d02b      	beq.n	8003ac8 <HAL_GPIO_Init+0x210>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a52      	ldr	r2, [pc, #328]	@ (8003bbc <HAL_GPIO_Init+0x304>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d025      	beq.n	8003ac4 <HAL_GPIO_Init+0x20c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a51      	ldr	r2, [pc, #324]	@ (8003bc0 <HAL_GPIO_Init+0x308>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d01f      	beq.n	8003ac0 <HAL_GPIO_Init+0x208>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a50      	ldr	r2, [pc, #320]	@ (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d019      	beq.n	8003abc <HAL_GPIO_Init+0x204>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc8 <HAL_GPIO_Init+0x310>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <HAL_GPIO_Init+0x200>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a4e      	ldr	r2, [pc, #312]	@ (8003bcc <HAL_GPIO_Init+0x314>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00d      	beq.n	8003ab4 <HAL_GPIO_Init+0x1fc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd0 <HAL_GPIO_Init+0x318>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <HAL_GPIO_Init+0x1f8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd4 <HAL_GPIO_Init+0x31c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_GPIO_Init+0x1f4>
 8003aa8:	2307      	movs	r3, #7
 8003aaa:	e00e      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003aac:	2308      	movs	r3, #8
 8003aae:	e00c      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	e00a      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003ab4:	2305      	movs	r3, #5
 8003ab6:	e008      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	e006      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003abc:	2303      	movs	r3, #3
 8003abe:	e004      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e002      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_GPIO_Init+0x212>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	f002 0203 	and.w	r2, r2, #3
 8003ad0:	0092      	lsls	r2, r2, #2
 8003ad2:	4093      	lsls	r3, r2
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ada:	4937      	ldr	r1, [pc, #220]	@ (8003bb8 <HAL_GPIO_Init+0x300>)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b0c:	4a32      	ldr	r2, [pc, #200]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b12:	4b31      	ldr	r3, [pc, #196]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b36:	4a28      	ldr	r2, [pc, #160]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b3c:	4b26      	ldr	r3, [pc, #152]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b66:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b8a:	4a13      	ldr	r2, [pc, #76]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3301      	adds	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f ae91 	bne.w	80038c8 <HAL_GPIO_Init+0x10>
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	48000400 	.word	0x48000400
 8003bc0:	48000800 	.word	0x48000800
 8003bc4:	48000c00 	.word	0x48000c00
 8003bc8:	48001000 	.word	0x48001000
 8003bcc:	48001400 	.word	0x48001400
 8003bd0:	48001800 	.word	0x48001800
 8003bd4:	48001c00 	.word	0x48001c00
 8003bd8:	40010400 	.word	0x40010400

08003bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e08d      	b.n	8003d0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fe5a 	bl	80018bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	@ 0x24
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	e006      	b.n	8003c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d108      	bne.n	8003c7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	e007      	b.n	8003c8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	460b      	mov	r3, r1
 8003d22:	817b      	strh	r3, [r7, #10]
 8003d24:	4613      	mov	r3, r2
 8003d26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	f040 80fd 	bne.w	8003f30 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_I2C_Master_Transmit+0x30>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0f6      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x21e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d4c:	f7fe fb26 	bl	800239c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2319      	movs	r3, #25
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa0a 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0e1      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2221      	movs	r2, #33	@ 0x21
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2bff      	cmp	r3, #255	@ 0xff
 8003d9e:	d906      	bls.n	8003dae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	22ff      	movs	r2, #255	@ 0xff
 8003da4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003da6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e007      	b.n	8003dbe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003db8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dbc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d024      	beq.n	8003e10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	8979      	ldrh	r1, [r7, #10]
 8003e02:	4b4e      	ldr	r3, [pc, #312]	@ (8003f3c <HAL_I2C_Master_Transmit+0x228>)
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fbf1 	bl	80045f0 <I2C_TransferConfig>
 8003e0e:	e066      	b.n	8003ede <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	8979      	ldrh	r1, [r7, #10]
 8003e18:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_I2C_Master_Transmit+0x228>)
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fbe6 	bl	80045f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e24:	e05b      	b.n	8003ede <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	6a39      	ldr	r1, [r7, #32]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f9f3 	bl	8004216 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e07b      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d034      	beq.n	8003ede <HAL_I2C_Master_Transmit+0x1ca>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d130      	bne.n	8003ede <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2180      	movs	r1, #128	@ 0x80
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f976 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e04d      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2bff      	cmp	r3, #255	@ 0xff
 8003e9e:	d90e      	bls.n	8003ebe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	22ff      	movs	r2, #255	@ 0xff
 8003ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fb9a 	bl	80045f0 <I2C_TransferConfig>
 8003ebc:	e00f      	b.n	8003ede <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	8979      	ldrh	r1, [r7, #10]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fb89 	bl	80045f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d19e      	bne.n	8003e26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	6a39      	ldr	r1, [r7, #32]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f9d9 	bl	80042a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e01a      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2220      	movs	r2, #32
 8003f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <HAL_I2C_Master_Transmit+0x22c>)
 8003f10:	400b      	ands	r3, r1
 8003f12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	80002000 	.word	0x80002000
 8003f40:	fe00e800 	.word	0xfe00e800

08003f44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	460b      	mov	r3, r1
 8003f52:	817b      	strh	r3, [r7, #10]
 8003f54:	4613      	mov	r3, r2
 8003f56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	f040 80db 	bne.w	800411c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Master_Receive+0x30>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0d4      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f7c:	f7fe fa0e 	bl	800239c <HAL_GetTick>
 8003f80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2319      	movs	r3, #25
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f8f2 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0bf      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2222      	movs	r2, #34	@ 0x22
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	893a      	ldrh	r2, [r7, #8]
 8003fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2bff      	cmp	r3, #255	@ 0xff
 8003fce:	d90e      	bls.n	8003fee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	22ff      	movs	r2, #255	@ 0xff
 8003fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	4b52      	ldr	r3, [pc, #328]	@ (8004128 <HAL_I2C_Master_Receive+0x1e4>)
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fb02 	bl	80045f0 <I2C_TransferConfig>
 8003fec:	e06d      	b.n	80040ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	4b49      	ldr	r3, [pc, #292]	@ (8004128 <HAL_I2C_Master_Receive+0x1e4>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 faf1 	bl	80045f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800400e:	e05c      	b.n	80040ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	6a39      	ldr	r1, [r7, #32]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f989 	bl	800432c <I2C_WaitOnRXNEFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e07c      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d034      	beq.n	80040ca <HAL_I2C_Master_Receive+0x186>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d130      	bne.n	80040ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	@ 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f880 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e04d      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2bff      	cmp	r3, #255	@ 0xff
 800408a:	d90e      	bls.n	80040aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	22ff      	movs	r2, #255	@ 0xff
 8004090:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004096:	b2da      	uxtb	r2, r3
 8004098:	8979      	ldrh	r1, [r7, #10]
 800409a:	2300      	movs	r3, #0
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 faa4 	bl	80045f0 <I2C_TransferConfig>
 80040a8:	e00f      	b.n	80040ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa93 	bl	80045f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d19d      	bne.n	8004010 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	6a39      	ldr	r1, [r7, #32]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8e3 	bl	80042a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e01a      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2220      	movs	r2, #32
 80040ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <HAL_I2C_Master_Receive+0x1e8>)
 80040fc:	400b      	ands	r3, r1
 80040fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	80002400 	.word	0x80002400
 800412c:	fe00e800 	.word	0xfe00e800

08004130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d103      	bne.n	800414e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d007      	beq.n	800416c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	619a      	str	r2, [r3, #24]
  }
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004188:	e031      	b.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d02d      	beq.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fe f903 	bl	800239c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d122      	bne.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d113      	bne.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e00f      	b.n	800420e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	bf0c      	ite	eq
 80041fe:	2301      	moveq	r3, #1
 8004200:	2300      	movne	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	429a      	cmp	r2, r3
 800420a:	d0be      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004222:	e033      	b.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f901 	bl	8004430 <I2C_IsErrorOccurred>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e031      	b.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d025      	beq.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004240:	f7fe f8ac 	bl	800239c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	d302      	bcc.n	8004256 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11a      	bne.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b02      	cmp	r3, #2
 8004262:	d013      	beq.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d1c4      	bne.n	8004224 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042b0:	e02f      	b.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f8ba 	bl	8004430 <I2C_IsErrorOccurred>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e02d      	b.n	8004322 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe f869 	bl	800239c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11a      	bne.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d013      	beq.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e007      	b.n	8004322 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b20      	cmp	r3, #32
 800431e:	d1c8      	bne.n	80042b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004338:	e06b      	b.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f876 	bl	8004430 <I2C_IsErrorOccurred>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e069      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b20      	cmp	r3, #32
 800435a:	d138      	bne.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d105      	bne.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e055      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b10      	cmp	r3, #16
 8004382:	d107      	bne.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2210      	movs	r2, #16
 800438a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2204      	movs	r2, #4
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
 8004392:	e002      	b.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2220      	movs	r2, #32
 80043a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b1f      	ldr	r3, [pc, #124]	@ (800442c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80043ae:	400b      	ands	r3, r1
 80043b0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e029      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fd ffe5 	bl	800239c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d00f      	beq.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e007      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b04      	cmp	r3, #4
 800441e:	d18c      	bne.n	800433a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	fe00e800 	.word	0xfe00e800

08004430 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	@ 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d068      	beq.n	800452e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2210      	movs	r2, #16
 8004462:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004464:	e049      	b.n	80044fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d045      	beq.n	80044fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800446e:	f7fd ff95 	bl	800239c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <I2C_IsErrorOccurred+0x54>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d13a      	bne.n	80044fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800448e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004496:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a6:	d121      	bne.n	80044ec <I2C_IsErrorOccurred+0xbc>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ae:	d01d      	beq.n	80044ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d01a      	beq.n	80044ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044c6:	f7fd ff69 	bl	800239c <HAL_GetTick>
 80044ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044cc:	e00e      	b.n	80044ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ce:	f7fd ff65 	bl	800239c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b19      	cmp	r3, #25
 80044da:	d907      	bls.n	80044ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f043 0320 	orr.w	r3, r3, #32
 80044e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044ea:	e006      	b.n	80044fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d1e9      	bne.n	80044ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b20      	cmp	r3, #32
 8004506:	d003      	beq.n	8004510 <I2C_IsErrorOccurred+0xe0>
 8004508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0aa      	beq.n	8004466 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2220      	movs	r2, #32
 800451e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	f043 0308 	orr.w	r3, r3, #8
 8004568:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004572:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004594:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800459c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01c      	beq.n	80045de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff fdc3 	bl	8004130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b0d      	ldr	r3, [pc, #52]	@ (80045ec <I2C_IsErrorOccurred+0x1bc>)
 80045b6:	400b      	ands	r3, r1
 80045b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3728      	adds	r7, #40	@ 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	fe00e800 	.word	0xfe00e800

080045f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	4613      	mov	r3, r2
 8004600:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004608:	7a7b      	ldrb	r3, [r7, #9]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004610:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	4313      	orrs	r3, r2
 800461a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800461e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	0d5b      	lsrs	r3, r3, #21
 800462a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800462e:	4b08      	ldr	r3, [pc, #32]	@ (8004650 <I2C_TransferConfig+0x60>)
 8004630:	430b      	orrs	r3, r1
 8004632:	43db      	mvns	r3, r3
 8004634:	ea02 0103 	and.w	r1, r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	03ff63ff 	.word	0x03ff63ff

08004654 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b20      	cmp	r3, #32
 8004668:	d138      	bne.n	80046dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004674:	2302      	movs	r3, #2
 8004676:	e032      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	@ 0x24
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d139      	bne.n	8004774 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800470a:	2302      	movs	r3, #2
 800470c:	e033      	b.n	8004776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2224      	movs	r2, #36	@ 0x24
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800473c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40007000 	.word	0x40007000

080047a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047a8:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b4:	d102      	bne.n	80047bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80047b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047ba:	e00b      	b.n	80047d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80047bc:	4b08      	ldr	r3, [pc, #32]	@ (80047e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ca:	d102      	bne.n	80047d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80047cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047d0:	e000      	b.n	80047d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80047d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40007000 	.word	0x40007000

080047e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d141      	bne.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fe:	d131      	bne.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004800:	4b47      	ldr	r3, [pc, #284]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004806:	4a46      	ldr	r2, [pc, #280]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800480c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004810:	4b43      	ldr	r3, [pc, #268]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004818:	4a41      	ldr	r2, [pc, #260]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800481e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004820:	4b40      	ldr	r3, [pc, #256]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2232      	movs	r2, #50	@ 0x32
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	4a3f      	ldr	r2, [pc, #252]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	0c9b      	lsrs	r3, r3, #18
 8004832:	3301      	adds	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004836:	e002      	b.n	800483e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3b01      	subs	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800483e:	4b38      	ldr	r3, [pc, #224]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d102      	bne.n	8004852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f2      	bne.n	8004838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004852:	4b33      	ldr	r3, [pc, #204]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485e:	d158      	bne.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e057      	b.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004864:	4b2e      	ldr	r3, [pc, #184]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800486a:	4a2d      	ldr	r2, [pc, #180]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004870:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004874:	e04d      	b.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800487c:	d141      	bne.n	8004902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800487e:	4b28      	ldr	r3, [pc, #160]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800488a:	d131      	bne.n	80048f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800488c:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004892:	4a23      	ldr	r2, [pc, #140]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004898:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800489c:	4b20      	ldr	r3, [pc, #128]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80048ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2232      	movs	r2, #50	@ 0x32
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	0c9b      	lsrs	r3, r3, #18
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c2:	e002      	b.n	80048ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d6:	d102      	bne.n	80048de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f2      	bne.n	80048c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ea:	d112      	bne.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e011      	b.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004900:	e007      	b.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004902:	4b07      	ldr	r3, [pc, #28]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800490a:	4a05      	ldr	r2, [pc, #20]	@ (8004920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004910:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40007000 	.word	0x40007000
 8004924:	20000000 	.word	0x20000000
 8004928:	431bde83 	.word	0x431bde83

0800492c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a04      	ldr	r2, [pc, #16]	@ (8004948 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800493a:	6053      	str	r3, [r2, #4]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40007000 	.word	0x40007000

0800494c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f000 bc08 	b.w	8005170 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004960:	4b96      	ldr	r3, [pc, #600]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496a:	4b94      	ldr	r3, [pc, #592]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80e4 	beq.w	8004b4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <HAL_RCC_OscConfig+0x4c>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	f040 808b 	bne.w	8004aa6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b01      	cmp	r3, #1
 8004994:	f040 8087 	bne.w	8004aa6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004998:	4b88      	ldr	r3, [pc, #544]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_OscConfig+0x64>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e3df      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	4b81      	ldr	r3, [pc, #516]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_RCC_OscConfig+0x7e>
 80049c0:	4b7e      	ldr	r3, [pc, #504]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049c8:	e005      	b.n	80049d6 <HAL_RCC_OscConfig+0x8a>
 80049ca:	4b7c      	ldr	r3, [pc, #496]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 80049cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d223      	bcs.n	8004a22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fdcc 	bl	800557c <RCC_SetFlashLatencyFromMSIRange>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e3c0      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ee:	4b73      	ldr	r3, [pc, #460]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a72      	ldr	r2, [pc, #456]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 80049f4:	f043 0308 	orr.w	r3, r3, #8
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b70      	ldr	r3, [pc, #448]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	496d      	ldr	r1, [pc, #436]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	4968      	ldr	r1, [pc, #416]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
 8004a20:	e025      	b.n	8004a6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a22:	4b66      	ldr	r3, [pc, #408]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a65      	ldr	r2, [pc, #404]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a28:	f043 0308 	orr.w	r3, r3, #8
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	4b63      	ldr	r3, [pc, #396]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4960      	ldr	r1, [pc, #384]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a40:	4b5e      	ldr	r3, [pc, #376]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	495b      	ldr	r1, [pc, #364]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fd8c 	bl	800557c <RCC_SetFlashLatencyFromMSIRange>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e380      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a6e:	f000 fcc1 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8004a72:	4602      	mov	r2, r0
 8004a74:	4b51      	ldr	r3, [pc, #324]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	4950      	ldr	r1, [pc, #320]	@ (8004bc0 <HAL_RCC_OscConfig+0x274>)
 8004a80:	5ccb      	ldrb	r3, [r1, r3]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8004bc4 <HAL_RCC_OscConfig+0x278>)
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8004bc8 <HAL_RCC_OscConfig+0x27c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd fc32 	bl	80022fc <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d052      	beq.n	8004b48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	e364      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d032      	beq.n	8004b14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004aae:	4b43      	ldr	r3, [pc, #268]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a42      	ldr	r2, [pc, #264]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aba:	f7fd fc6f 	bl	800239c <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac2:	f7fd fc6b 	bl	800239c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e34d      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad4:	4b39      	ldr	r3, [pc, #228]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae0:	4b36      	ldr	r3, [pc, #216]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a35      	ldr	r2, [pc, #212]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ae6:	f043 0308 	orr.w	r3, r3, #8
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b33      	ldr	r3, [pc, #204]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	4930      	ldr	r1, [pc, #192]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004afe:	4b2f      	ldr	r3, [pc, #188]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	492b      	ldr	r1, [pc, #172]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	604b      	str	r3, [r1, #4]
 8004b12:	e01a      	b.n	8004b4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b14:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a28      	ldr	r2, [pc, #160]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fc3c 	bl	800239c <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b28:	f7fd fc38 	bl	800239c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e31a      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x1dc>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d073      	beq.n	8004c3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_OscConfig+0x21c>
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d10e      	bne.n	8004b80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d10b      	bne.n	8004b80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d063      	beq.n	8004c3c <HAL_RCC_OscConfig+0x2f0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d15f      	bne.n	8004c3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e2f7      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b88:	d106      	bne.n	8004b98 <HAL_RCC_OscConfig+0x24c>
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e025      	b.n	8004be4 <HAL_RCC_OscConfig+0x298>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba0:	d114      	bne.n	8004bcc <HAL_RCC_OscConfig+0x280>
 8004ba2:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a05      	ldr	r2, [pc, #20]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a02      	ldr	r2, [pc, #8]	@ (8004bbc <HAL_RCC_OscConfig+0x270>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e013      	b.n	8004be4 <HAL_RCC_OscConfig+0x298>
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	0800969c 	.word	0x0800969c
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	20000004 	.word	0x20000004
 8004bcc:	4ba0      	ldr	r3, [pc, #640]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a9f      	ldr	r2, [pc, #636]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b9d      	ldr	r3, [pc, #628]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a9c      	ldr	r2, [pc, #624]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fd fbd6 	bl	800239c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fd fbd2 	bl	800239c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	@ 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e2b4      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c06:	4b92      	ldr	r3, [pc, #584]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x2a8>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fd fbc2 	bl	800239c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fbbe 	bl	800239c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	@ 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e2a0      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c2e:	4b88      	ldr	r3, [pc, #544]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x2d0>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d060      	beq.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x310>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d119      	bne.n	8004c8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d116      	bne.n	8004c8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5c:	4b7c      	ldr	r3, [pc, #496]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_OscConfig+0x328>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e27d      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c74:	4b76      	ldr	r3, [pc, #472]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	4973      	ldr	r1, [pc, #460]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	e040      	b.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d023      	beq.n	8004cda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c92:	4b6f      	ldr	r3, [pc, #444]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6e      	ldr	r2, [pc, #440]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fd fb7d 	bl	800239c <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fd fb79 	bl	800239c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e25b      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb8:	4b65      	ldr	r3, [pc, #404]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b62      	ldr	r3, [pc, #392]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	495f      	ldr	r1, [pc, #380]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	e018      	b.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cda:	4b5d      	ldr	r3, [pc, #372]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5c      	ldr	r2, [pc, #368]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fb59 	bl	800239c <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fd fb55 	bl	800239c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e237      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d00:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d03c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01c      	beq.n	8004d5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d20:	4b4b      	ldr	r3, [pc, #300]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d26:	4a4a      	ldr	r2, [pc, #296]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fd fb34 	bl	800239c <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d38:	f7fd fb30 	bl	800239c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e212      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d4a:	4b41      	ldr	r3, [pc, #260]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ef      	beq.n	8004d38 <HAL_RCC_OscConfig+0x3ec>
 8004d58:	e01b      	b.n	8004d92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d60:	4a3b      	ldr	r2, [pc, #236]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6a:	f7fd fb17 	bl	800239c <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d72:	f7fd fb13 	bl	800239c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e1f5      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d84:	4b32      	ldr	r3, [pc, #200]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ef      	bne.n	8004d72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80a6 	beq.w	8004eec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004da4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db0:	4b27      	ldr	r3, [pc, #156]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db4:	4a26      	ldr	r2, [pc, #152]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dbc:	4b24      	ldr	r3, [pc, #144]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dcc:	4b21      	ldr	r3, [pc, #132]	@ (8004e54 <HAL_RCC_OscConfig+0x508>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d118      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e54 <HAL_RCC_OscConfig+0x508>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e54 <HAL_RCC_OscConfig+0x508>)
 8004dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de4:	f7fd fada 	bl	800239c <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dec:	f7fd fad6 	bl	800239c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1b8      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfe:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <HAL_RCC_OscConfig+0x508>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d108      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4d8>
 8004e12:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e18:	4a0d      	ldr	r2, [pc, #52]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e22:	e029      	b.n	8004e78 <HAL_RCC_OscConfig+0x52c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b05      	cmp	r3, #5
 8004e2a:	d115      	bne.n	8004e58 <HAL_RCC_OscConfig+0x50c>
 8004e2c:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e32:	4a07      	ldr	r2, [pc, #28]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004e34:	f043 0304 	orr.w	r3, r3, #4
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e3c:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e42:	4a03      	ldr	r2, [pc, #12]	@ (8004e50 <HAL_RCC_OscConfig+0x504>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e4c:	e014      	b.n	8004e78 <HAL_RCC_OscConfig+0x52c>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40007000 	.word	0x40007000
 8004e58:	4b9d      	ldr	r3, [pc, #628]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5e:	4a9c      	ldr	r2, [pc, #624]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e68:	4b99      	ldr	r3, [pc, #612]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6e:	4a98      	ldr	r2, [pc, #608]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d016      	beq.n	8004eae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fd fa8c 	bl	800239c <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e88:	f7fd fa88 	bl	800239c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e168      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9e:	4b8c      	ldr	r3, [pc, #560]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ed      	beq.n	8004e88 <HAL_RCC_OscConfig+0x53c>
 8004eac:	e015      	b.n	8004eda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fd fa75 	bl	800239c <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fd fa71 	bl	800239c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e151      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ecc:	4b80      	ldr	r3, [pc, #512]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ed      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eda:	7ffb      	ldrb	r3, [r7, #31]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b7b      	ldr	r3, [pc, #492]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee4:	4a7a      	ldr	r2, [pc, #488]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d03c      	beq.n	8004f72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01c      	beq.n	8004f3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f00:	4b73      	ldr	r3, [pc, #460]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f06:	4a72      	ldr	r2, [pc, #456]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fd fa44 	bl	800239c <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f18:	f7fd fa40 	bl	800239c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e122      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f2a:	4b69      	ldr	r3, [pc, #420]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ef      	beq.n	8004f18 <HAL_RCC_OscConfig+0x5cc>
 8004f38:	e01b      	b.n	8004f72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f3a:	4b65      	ldr	r3, [pc, #404]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f40:	4a63      	ldr	r2, [pc, #396]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4a:	f7fd fa27 	bl	800239c <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f52:	f7fd fa23 	bl	800239c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e105      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f64:	4b5a      	ldr	r3, [pc, #360]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ef      	bne.n	8004f52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80f9 	beq.w	800516e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	f040 80cf 	bne.w	8005124 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f86:	4b52      	ldr	r3, [pc, #328]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f003 0203 	and.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d12c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d123      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d11b      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d113      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d109      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	3b01      	subs	r3, #1
 8004fee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d071      	beq.n	80050d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d068      	beq.n	80050cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ffa:	4b35      	ldr	r3, [pc, #212]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d105      	bne.n	8005012 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005006:	4b32      	ldr	r3, [pc, #200]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0ac      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005016:	4b2e      	ldr	r3, [pc, #184]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 800501c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005020:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005022:	f7fd f9bb 	bl	800239c <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502a:	f7fd f9b7 	bl	800239c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e099      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503c:	4b24      	ldr	r3, [pc, #144]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005048:	4b21      	ldr	r3, [pc, #132]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	4b21      	ldr	r3, [pc, #132]	@ (80050d4 <HAL_RCC_OscConfig+0x788>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005058:	3a01      	subs	r2, #1
 800505a:	0112      	lsls	r2, r2, #4
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005062:	0212      	lsls	r2, r2, #8
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800506a:	0852      	lsrs	r2, r2, #1
 800506c:	3a01      	subs	r2, #1
 800506e:	0552      	lsls	r2, r2, #21
 8005070:	4311      	orrs	r1, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0652      	lsls	r2, r2, #25
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005082:	06d2      	lsls	r2, r2, #27
 8005084:	430a      	orrs	r2, r1
 8005086:	4912      	ldr	r1, [pc, #72]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8005088:	4313      	orrs	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800508c:	4b10      	ldr	r3, [pc, #64]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0f      	ldr	r2, [pc, #60]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005098:	4b0d      	ldr	r3, [pc, #52]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a0c      	ldr	r2, [pc, #48]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050a4:	f7fd f97a 	bl	800239c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd f976 	bl	800239c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e058      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <HAL_RCC_OscConfig+0x784>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ca:	e050      	b.n	800516e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e04f      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
 80050d0:	40021000 	.word	0x40021000
 80050d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d8:	4b27      	ldr	r3, [pc, #156]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d144      	bne.n	800516e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050e4:	4b24      	ldr	r3, [pc, #144]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a23      	ldr	r2, [pc, #140]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 80050ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050f0:	4b21      	ldr	r3, [pc, #132]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4a20      	ldr	r2, [pc, #128]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 80050f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050fc:	f7fd f94e 	bl	800239c <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7fd f94a 	bl	800239c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e02c      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005116:	4b18      	ldr	r3, [pc, #96]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x7b8>
 8005122:	e024      	b.n	800516e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b0c      	cmp	r3, #12
 8005128:	d01f      	beq.n	800516a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512a:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a12      	ldr	r2, [pc, #72]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 8005130:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7fd f931 	bl	800239c <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513e:	f7fd f92d 	bl	800239c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e00f      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005150:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f0      	bne.n	800513e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	4905      	ldr	r1, [pc, #20]	@ (8005178 <HAL_RCC_OscConfig+0x82c>)
 8005162:	4b06      	ldr	r3, [pc, #24]	@ (800517c <HAL_RCC_OscConfig+0x830>)
 8005164:	4013      	ands	r3, r2
 8005166:	60cb      	str	r3, [r1, #12]
 8005168:	e001      	b.n	800516e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	feeefffc 	.word	0xfeeefffc

08005180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e11d      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b90      	ldr	r3, [pc, #576]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d910      	bls.n	80051c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b8d      	ldr	r3, [pc, #564]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 020f 	bic.w	r2, r3, #15
 80051ae:	498b      	ldr	r1, [pc, #556]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b89      	ldr	r3, [pc, #548]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e105      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d010      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	4b81      	ldr	r3, [pc, #516]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d908      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e4:	4b7e      	ldr	r3, [pc, #504]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	497b      	ldr	r1, [pc, #492]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d079      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d11e      	bne.n	8005248 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520a:	4b75      	ldr	r3, [pc, #468]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0dc      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800521a:	f000 fa09 	bl	8005630 <RCC_GetSysClockFreqFromPLLSource>
 800521e:	4603      	mov	r3, r0
 8005220:	4a70      	ldr	r2, [pc, #448]	@ (80053e4 <HAL_RCC_ClockConfig+0x264>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d946      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005226:	4b6e      	ldr	r3, [pc, #440]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d140      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005232:	4b6b      	ldr	r3, [pc, #428]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800523a:	4a69      	ldr	r2, [pc, #420]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 800523c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005240:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005242:	2380      	movs	r3, #128	@ 0x80
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e035      	b.n	80052b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d107      	bne.n	8005260 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005250:	4b63      	ldr	r3, [pc, #396]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d115      	bne.n	8005288 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0b9      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005268:	4b5d      	ldr	r3, [pc, #372]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d109      	bne.n	8005288 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0ad      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005278:	4b59      	ldr	r3, [pc, #356]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0a5      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005288:	f000 f8b4 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800528c:	4603      	mov	r3, r0
 800528e:	4a55      	ldr	r2, [pc, #340]	@ (80053e4 <HAL_RCC_ClockConfig+0x264>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d90f      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005294:	4b52      	ldr	r3, [pc, #328]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052a0:	4b4f      	ldr	r3, [pc, #316]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052a8:	4a4d      	ldr	r2, [pc, #308]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052b0:	2380      	movs	r3, #128	@ 0x80
 80052b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052b4:	4b4a      	ldr	r3, [pc, #296]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f023 0203 	bic.w	r2, r3, #3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4947      	ldr	r1, [pc, #284]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c6:	f7fd f869 	bl	800239c <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052cc:	e00a      	b.n	80052e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ce:	f7fd f865 	bl	800239c <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e077      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e4:	4b3e      	ldr	r3, [pc, #248]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 020c 	and.w	r2, r3, #12
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d1eb      	bne.n	80052ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b80      	cmp	r3, #128	@ 0x80
 80052fa:	d105      	bne.n	8005308 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052fc:	4b38      	ldr	r3, [pc, #224]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a37      	ldr	r2, [pc, #220]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005306:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	4b31      	ldr	r3, [pc, #196]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005320:	429a      	cmp	r2, r3
 8005322:	d208      	bcs.n	8005336 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005324:	4b2e      	ldr	r3, [pc, #184]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	492b      	ldr	r1, [pc, #172]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005336:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d210      	bcs.n	8005366 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005344:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 020f 	bic.w	r2, r3, #15
 800534c:	4923      	ldr	r1, [pc, #140]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005354:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <HAL_RCC_ClockConfig+0x25c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e036      	b.n	80053d4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005372:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4918      	ldr	r1, [pc, #96]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005390:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4910      	ldr	r1, [pc, #64]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053a4:	f000 f826 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <HAL_RCC_ClockConfig+0x260>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	091b      	lsrs	r3, r3, #4
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	490c      	ldr	r1, [pc, #48]	@ (80053e8 <HAL_RCC_ClockConfig+0x268>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	4a0a      	ldr	r2, [pc, #40]	@ (80053ec <HAL_RCC_ClockConfig+0x26c>)
 80053c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <HAL_RCC_ClockConfig+0x270>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fc ff97 	bl	80022fc <HAL_InitTick>
 80053ce:	4603      	mov	r3, r0
 80053d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40021000 	.word	0x40021000
 80053e4:	04c4b400 	.word	0x04c4b400
 80053e8:	0800969c 	.word	0x0800969c
 80053ec:	20000000 	.word	0x20000000
 80053f0:	20000004 	.word	0x20000004

080053f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	@ 0x24
 80053f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	2300      	movs	r3, #0
 8005400:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005402:	4b3e      	ldr	r3, [pc, #248]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 030c 	and.w	r3, r3, #12
 800540a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800540c:	4b3b      	ldr	r3, [pc, #236]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x34>
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d121      	bne.n	8005466 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d11e      	bne.n	8005466 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005428:	4b34      	ldr	r3, [pc, #208]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d107      	bne.n	8005444 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005434:	4b31      	ldr	r3, [pc, #196]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	e005      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005444:	4b2d      	ldr	r3, [pc, #180]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005450:	4a2b      	ldr	r2, [pc, #172]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005458:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10d      	bne.n	800547c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005464:	e00a      	b.n	800547c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b04      	cmp	r3, #4
 800546a:	d102      	bne.n	8005472 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800546c:	4b25      	ldr	r3, [pc, #148]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x110>)
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	e004      	b.n	800547c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d101      	bne.n	800547c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005478:	4b23      	ldr	r3, [pc, #140]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x114>)
 800547a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d134      	bne.n	80054ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005482:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d003      	beq.n	800549a <HAL_RCC_GetSysClockFreq+0xa6>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d003      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005498:	e005      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800549a:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x110>)
 800549c:	617b      	str	r3, [r7, #20]
      break;
 800549e:	e005      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054a0:	4b19      	ldr	r3, [pc, #100]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x114>)
 80054a2:	617b      	str	r3, [r7, #20]
      break;
 80054a4:	e002      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	617b      	str	r3, [r7, #20]
      break;
 80054aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054ac:	4b13      	ldr	r3, [pc, #76]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	3301      	adds	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054ba:	4b10      	ldr	r3, [pc, #64]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	fb03 f202 	mul.w	r2, r3, r2
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054d2:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x108>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	0e5b      	lsrs	r3, r3, #25
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	3301      	adds	r3, #1
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054ec:	69bb      	ldr	r3, [r7, #24]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3724      	adds	r7, #36	@ 0x24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000
 8005500:	080096b4 	.word	0x080096b4
 8005504:	00f42400 	.word	0x00f42400
 8005508:	007a1200 	.word	0x007a1200

0800550c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005510:	4b03      	ldr	r3, [pc, #12]	@ (8005520 <HAL_RCC_GetHCLKFreq+0x14>)
 8005512:	681b      	ldr	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000000 	.word	0x20000000

08005524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005528:	f7ff fff0 	bl	800550c <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4904      	ldr	r1, [pc, #16]	@ (800554c <HAL_RCC_GetPCLK1Freq+0x28>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	080096ac 	.word	0x080096ac

08005550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005554:	f7ff ffda 	bl	800550c <HAL_RCC_GetHCLKFreq>
 8005558:	4602      	mov	r2, r0
 800555a:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	0adb      	lsrs	r3, r3, #11
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	4904      	ldr	r1, [pc, #16]	@ (8005578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005566:	5ccb      	ldrb	r3, [r1, r3]
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40021000 	.word	0x40021000
 8005578:	080096ac 	.word	0x080096ac

0800557c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005588:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800558a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005594:	f7ff f906 	bl	80047a4 <HAL_PWREx_GetVoltageRange>
 8005598:	6178      	str	r0, [r7, #20]
 800559a:	e014      	b.n	80055c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800559c:	4b22      	ldr	r3, [pc, #136]	@ (8005628 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a0:	4a21      	ldr	r2, [pc, #132]	@ (8005628 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005628 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055b4:	f7ff f8f6 	bl	80047a4 <HAL_PWREx_GetVoltageRange>
 80055b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005628 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	4a1a      	ldr	r2, [pc, #104]	@ (8005628 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055cc:	d10b      	bne.n	80055e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b80      	cmp	r3, #128	@ 0x80
 80055d2:	d913      	bls.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80055d8:	d902      	bls.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055da:	2302      	movs	r3, #2
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	e00d      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055e0:	2301      	movs	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	e00a      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ea:	d902      	bls.n	80055f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80055ec:	2302      	movs	r3, #2
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	e004      	b.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b70      	cmp	r3, #112	@ 0x70
 80055f6:	d101      	bne.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055f8:	2301      	movs	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055fc:	4b0b      	ldr	r3, [pc, #44]	@ (800562c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 020f 	bic.w	r2, r3, #15
 8005604:	4909      	ldr	r1, [pc, #36]	@ (800562c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800560c:	4b07      	ldr	r3, [pc, #28]	@ (800562c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d001      	beq.n	800561e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	40022000 	.word	0x40022000

08005630 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005636:	4b2d      	ldr	r3, [pc, #180]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d00b      	beq.n	800565e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d825      	bhi.n	8005698 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d008      	beq.n	8005664 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d11f      	bne.n	8005698 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005658:	4b25      	ldr	r3, [pc, #148]	@ (80056f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800565a:	613b      	str	r3, [r7, #16]
    break;
 800565c:	e01f      	b.n	800569e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800565e:	4b25      	ldr	r3, [pc, #148]	@ (80056f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005660:	613b      	str	r3, [r7, #16]
    break;
 8005662:	e01c      	b.n	800569e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005664:	4b21      	ldr	r3, [pc, #132]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d107      	bne.n	8005680 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005670:	4b1e      	ldr	r3, [pc, #120]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	e005      	b.n	800568c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005680:	4b1a      	ldr	r3, [pc, #104]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800568c:	4a1a      	ldr	r2, [pc, #104]	@ (80056f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005694:	613b      	str	r3, [r7, #16]
    break;
 8005696:	e002      	b.n	800569e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
    break;
 800569c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800569e:	4b13      	ldr	r3, [pc, #76]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	3301      	adds	r3, #1
 80056aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056ac:	4b0f      	ldr	r3, [pc, #60]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	fb03 f202 	mul.w	r2, r3, r2
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056c4:	4b09      	ldr	r3, [pc, #36]	@ (80056ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	0e5b      	lsrs	r3, r3, #25
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	3301      	adds	r3, #1
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80056de:	683b      	ldr	r3, [r7, #0]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40021000 	.word	0x40021000
 80056f0:	00f42400 	.word	0x00f42400
 80056f4:	007a1200 	.word	0x007a1200
 80056f8:	080096b4 	.word	0x080096b4

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005704:	2300      	movs	r3, #0
 8005706:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005708:	2300      	movs	r3, #0
 800570a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005714:	2b00      	cmp	r3, #0
 8005716:	d040      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571c:	2b80      	cmp	r3, #128	@ 0x80
 800571e:	d02a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005720:	2b80      	cmp	r3, #128	@ 0x80
 8005722:	d825      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005724:	2b60      	cmp	r3, #96	@ 0x60
 8005726:	d026      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005728:	2b60      	cmp	r3, #96	@ 0x60
 800572a:	d821      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800572c:	2b40      	cmp	r3, #64	@ 0x40
 800572e:	d006      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	d81d      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005738:	2b20      	cmp	r3, #32
 800573a:	d010      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800573c:	e018      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800573e:	4b89      	ldr	r3, [pc, #548]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4a88      	ldr	r2, [pc, #544]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800574a:	e015      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fa34 	bl	8006bc0 <RCCEx_PLLSAI1_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800575c:	e00c      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3320      	adds	r3, #32
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fb1f 	bl	8006da8 <RCCEx_PLLSAI2_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800576e:	e003      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	74fb      	strb	r3, [r7, #19]
      break;
 8005774:	e000      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005778:	7cfb      	ldrb	r3, [r7, #19]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800577e:	4b79      	ldr	r3, [pc, #484]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005780:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005784:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800578c:	4975      	ldr	r1, [pc, #468]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005794:	e001      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005796:	7cfb      	ldrb	r3, [r7, #19]
 8005798:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d047      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ae:	d030      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b4:	d82a      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ba:	d02a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057c0:	d824      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c6:	d008      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057cc:	d81e      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80057d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d6:	d010      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057d8:	e018      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057da:	4b62      	ldr	r3, [pc, #392]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4a61      	ldr	r2, [pc, #388]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057e6:	e015      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 f9e6 	bl	8006bc0 <RCCEx_PLLSAI1_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057f8:	e00c      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3320      	adds	r3, #32
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fad1 	bl	8006da8 <RCCEx_PLLSAI2_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800580a:	e003      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	74fb      	strb	r3, [r7, #19]
      break;
 8005810:	e000      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800581a:	4b52      	ldr	r3, [pc, #328]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800581c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	494e      	ldr	r1, [pc, #312]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005830:	e001      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	7cfb      	ldrb	r3, [r7, #19]
 8005834:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 809f 	beq.w	8005982 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005844:	2300      	movs	r3, #0
 8005846:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005848:	4b46      	ldr	r3, [pc, #280]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800584a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	4b41      	ldr	r3, [pc, #260]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005862:	4a40      	ldr	r2, [pc, #256]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005868:	6593      	str	r3, [r2, #88]	@ 0x58
 800586a:	4b3e      	ldr	r3, [pc, #248]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800586c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800586e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005876:	2301      	movs	r3, #1
 8005878:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587a:	4b3b      	ldr	r3, [pc, #236]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a3a      	ldr	r2, [pc, #232]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005886:	f7fc fd89 	bl	800239c <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800588c:	e009      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588e:	f7fc fd85 	bl	800239c <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d902      	bls.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	74fb      	strb	r3, [r7, #19]
        break;
 80058a0:	e005      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058a2:	4b31      	ldr	r3, [pc, #196]	@ (8005968 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ef      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80058ae:	7cfb      	ldrb	r3, [r7, #19]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d15b      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01f      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d019      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058d2:	4b24      	ldr	r3, [pc, #144]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058de:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058fe:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d016      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fc fd44 	bl	800239c <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005916:	e00b      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005918:	f7fc fd40 	bl	800239c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d902      	bls.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	74fb      	strb	r3, [r7, #19]
            break;
 800592e:	e006      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005930:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ec      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10c      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005944:	4b07      	ldr	r3, [pc, #28]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005954:	4903      	ldr	r1, [pc, #12]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800595c:	e008      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800595e:	7cfb      	ldrb	r3, [r7, #19]
 8005960:	74bb      	strb	r3, [r7, #18]
 8005962:	e005      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005964:	40021000 	.word	0x40021000
 8005968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596c:	7cfb      	ldrb	r3, [r7, #19]
 800596e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005970:	7c7b      	ldrb	r3, [r7, #17]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d105      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005976:	4ba0      	ldr	r3, [pc, #640]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	4a9f      	ldr	r2, [pc, #636]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005980:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800598e:	4b9a      	ldr	r3, [pc, #616]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005994:	f023 0203 	bic.w	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599c:	4996      	ldr	r1, [pc, #600]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059b0:	4b91      	ldr	r3, [pc, #580]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b6:	f023 020c 	bic.w	r2, r3, #12
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	498e      	ldr	r1, [pc, #568]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059d2:	4b89      	ldr	r3, [pc, #548]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e0:	4985      	ldr	r1, [pc, #532]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059f4:	4b80      	ldr	r3, [pc, #512]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a02:	497d      	ldr	r1, [pc, #500]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0310 	and.w	r3, r3, #16
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a16:	4b78      	ldr	r3, [pc, #480]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a24:	4974      	ldr	r1, [pc, #464]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a38:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a46:	496c      	ldr	r1, [pc, #432]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a5a:	4b67      	ldr	r3, [pc, #412]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a68:	4963      	ldr	r1, [pc, #396]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a8a:	495b      	ldr	r1, [pc, #364]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a9e:	4b56      	ldr	r3, [pc, #344]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aac:	4952      	ldr	r1, [pc, #328]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	494a      	ldr	r1, [pc, #296]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ae2:	4b45      	ldr	r3, [pc, #276]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af0:	4941      	ldr	r1, [pc, #260]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b04:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b0a:	f023 0203 	bic.w	r2, r3, #3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b12:	4939      	ldr	r1, [pc, #228]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d028      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b26:	4b34      	ldr	r3, [pc, #208]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b34:	4930      	ldr	r1, [pc, #192]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b44:	d106      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b46:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b50:	60d3      	str	r3, [r2, #12]
 8005b52:	e011      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	2101      	movs	r1, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 f82b 	bl	8006bc0 <RCCEx_PLLSAI1_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b6e:	7cfb      	ldrb	r3, [r7, #19]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d04d      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b8c:	d108      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b94:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b9a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005b9e:	e012      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ba0:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba6:	4a14      	ldr	r2, [pc, #80]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005bb0:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bbe:	490e      	ldr	r1, [pc, #56]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bce:	d106      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd0:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a08      	ldr	r2, [pc, #32]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bda:	60d3      	str	r3, [r2, #12]
 8005bdc:	e020      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005be2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005be6:	d109      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005be8:	4b03      	ldr	r3, [pc, #12]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a02      	ldr	r2, [pc, #8]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf2:	60d3      	str	r3, [r2, #12]
 8005bf4:	e014      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 ffd7 	bl	8006bc0 <RCCEx_PLLSAI1_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d028      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c3a:	4947      	ldr	r1, [pc, #284]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c4a:	d106      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c4c:	4b42      	ldr	r3, [pc, #264]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4a41      	ldr	r2, [pc, #260]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c56:	60d3      	str	r3, [r2, #12]
 8005c58:	e011      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 ffa8 	bl	8006bc0 <RCCEx_PLLSAI1_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005c7a:	7cfb      	ldrb	r3, [r7, #19]
 8005c7c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01e      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c8a:	4b33      	ldr	r3, [pc, #204]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c9a:	492f      	ldr	r1, [pc, #188]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 ff83 	bl	8006bc0 <RCCEx_PLLSAI1_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cd4:	4b20      	ldr	r3, [pc, #128]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cda:	f023 0204 	bic.w	r2, r3, #4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce4:	491c      	ldr	r1, [pc, #112]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cf8:	4b17      	ldr	r3, [pc, #92]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cfe:	f023 0218 	bic.w	r2, r3, #24
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d08:	4913      	ldr	r1, [pc, #76]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d2c:	490a      	ldr	r1, [pc, #40]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d3e:	d105      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a04      	ldr	r2, [pc, #16]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000

08005d5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d6e:	d13e      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d70:	4bb6      	ldr	r3, [pc, #728]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d82:	d028      	beq.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d8a:	f200 86f4 	bhi.w	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d94:	d005      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d9c:	d00e      	beq.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005d9e:	f000 beea 	b.w	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005da2:	4baa      	ldr	r3, [pc, #680]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	f040 86e4 	bne.w	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db6:	61fb      	str	r3, [r7, #28]
      break;
 8005db8:	f000 bedf 	b.w	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005dbc:	4ba3      	ldr	r3, [pc, #652]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	f040 86d9 	bne.w	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005dcc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005dd0:	61fb      	str	r3, [r7, #28]
      break;
 8005dd2:	f000 bed4 	b.w	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005dd6:	4b9d      	ldr	r3, [pc, #628]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de2:	f040 86ce 	bne.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005de6:	4b9a      	ldr	r3, [pc, #616]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005de8:	61fb      	str	r3, [r7, #28]
      break;
 8005dea:	f000 beca 	b.w	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dee:	4b97      	ldr	r3, [pc, #604]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d036      	beq.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d840      	bhi.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d003      	beq.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d020      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005e10:	e039      	b.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e12:	4b8e      	ldr	r3, [pc, #568]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d116      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005e2a:	4b88      	ldr	r3, [pc, #544]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	e005      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005e36:	4b85      	ldr	r3, [pc, #532]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	4a84      	ldr	r2, [pc, #528]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e4a:	e01f      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61bb      	str	r3, [r7, #24]
      break;
 8005e50:	e01c      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e52:	4b7e      	ldr	r3, [pc, #504]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005e60:	4b7d      	ldr	r3, [pc, #500]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005e62:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e64:	e012      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
      break;
 8005e6a:	e00f      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e6c:	4b77      	ldr	r3, [pc, #476]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e78:	d102      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005e7a:	4b78      	ldr	r3, [pc, #480]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005e7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e7e:	e005      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
      break;
 8005e84:	e002      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
      break;
 8005e8a:	bf00      	nop
    }

    switch(PeriphClk)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e92:	f000 8606 	beq.w	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e9c:	f200 8673 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ea6:	f000 8469 	beq.w	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005eb0:	f200 8669 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eba:	f000 8531 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ec4:	f200 865f 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ece:	f000 8187 	beq.w	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ed8:	f200 8655 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ee2:	f000 80cd 	beq.w	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eec:	f200 864b 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef6:	f000 8430 	beq.w	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f00:	f200 8641 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f0a:	f000 83e4 	beq.w	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f14:	f200 8637 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1e:	f000 80af 	beq.w	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f28:	f200 862d 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f32:	f000 809d 	beq.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3c:	f200 8623 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f46:	f000 808b 	beq.w	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	f200 8619 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5a:	f000 8554 	beq.w	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f64:	f200 860f 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6e:	f000 8500 	beq.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f78:	f200 8605 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f82:	f000 84a1 	beq.w	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f8c:	f200 85fb 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b80      	cmp	r3, #128	@ 0x80
 8005f94:	f000 846c 	beq.w	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b80      	cmp	r3, #128	@ 0x80
 8005f9c:	f200 85f3 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d84c      	bhi.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 85ec 	beq.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	2b1f      	cmp	r3, #31
 8005fb4:	f200 85e7 	bhi.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	080063d5 	.word	0x080063d5
 8005fc4:	08006443 	.word	0x08006443
 8005fc8:	08006b87 	.word	0x08006b87
 8005fcc:	080064d7 	.word	0x080064d7
 8005fd0:	08006b87 	.word	0x08006b87
 8005fd4:	08006b87 	.word	0x08006b87
 8005fd8:	08006b87 	.word	0x08006b87
 8005fdc:	0800654f 	.word	0x0800654f
 8005fe0:	08006b87 	.word	0x08006b87
 8005fe4:	08006b87 	.word	0x08006b87
 8005fe8:	08006b87 	.word	0x08006b87
 8005fec:	08006b87 	.word	0x08006b87
 8005ff0:	08006b87 	.word	0x08006b87
 8005ff4:	08006b87 	.word	0x08006b87
 8005ff8:	08006b87 	.word	0x08006b87
 8005ffc:	080065d3 	.word	0x080065d3
 8006000:	08006b87 	.word	0x08006b87
 8006004:	08006b87 	.word	0x08006b87
 8006008:	08006b87 	.word	0x08006b87
 800600c:	08006b87 	.word	0x08006b87
 8006010:	08006b87 	.word	0x08006b87
 8006014:	08006b87 	.word	0x08006b87
 8006018:	08006b87 	.word	0x08006b87
 800601c:	08006b87 	.word	0x08006b87
 8006020:	08006b87 	.word	0x08006b87
 8006024:	08006b87 	.word	0x08006b87
 8006028:	08006b87 	.word	0x08006b87
 800602c:	08006b87 	.word	0x08006b87
 8006030:	08006b87 	.word	0x08006b87
 8006034:	08006b87 	.word	0x08006b87
 8006038:	08006b87 	.word	0x08006b87
 800603c:	08006655 	.word	0x08006655
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b40      	cmp	r3, #64	@ 0x40
 8006044:	f000 83e8 	beq.w	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006048:	f000 bd9d 	b.w	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800604c:	40021000 	.word	0x40021000
 8006050:	0003d090 	.word	0x0003d090
 8006054:	080096b4 	.word	0x080096b4
 8006058:	00f42400 	.word	0x00f42400
 800605c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006066:	f000 ff93 	bl	8006f90 <RCCEx_GetSAIxPeriphCLKFreq>
 800606a:	61f8      	str	r0, [r7, #28]
      break;
 800606c:	f000 bd8e 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006076:	f000 ff8b 	bl	8006f90 <RCCEx_GetSAIxPeriphCLKFreq>
 800607a:	61f8      	str	r0, [r7, #28]
      break;
 800607c:	f000 bd86 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006080:	4b9a      	ldr	r3, [pc, #616]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006086:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006092:	d015      	beq.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800609a:	f200 8092 	bhi.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060a4:	d029      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ac:	f200 8089 	bhi.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d07b      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060bc:	d04a      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80060be:	e080      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80060c0:	4b8a      	ldr	r3, [pc, #552]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d17d      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80060cc:	4b87      	ldr	r3, [pc, #540]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80060d8:	4b84      	ldr	r3, [pc, #528]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	e005      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80060e4:	4b81      	ldr	r3, [pc, #516]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	4a7f      	ldr	r2, [pc, #508]	@ (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f6:	61fb      	str	r3, [r7, #28]
          break;
 80060f8:	e066      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80060fa:	4b7c      	ldr	r3, [pc, #496]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006106:	d162      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006108:	4b78      	ldr	r3, [pc, #480]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006114:	d15b      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006116:	4b75      	ldr	r3, [pc, #468]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	0a1b      	lsrs	r3, r3, #8
 800611c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006120:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	fb03 f202 	mul.w	r2, r3, r2
 800612a:	4b70      	ldr	r3, [pc, #448]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	091b      	lsrs	r3, r3, #4
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	3301      	adds	r3, #1
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800613c:	4b6b      	ldr	r3, [pc, #428]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	0d5b      	lsrs	r3, r3, #21
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	3301      	adds	r3, #1
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	61fb      	str	r3, [r7, #28]
          break;
 8006152:	e03c      	b.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006154:	4b65      	ldr	r3, [pc, #404]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800615c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006160:	d138      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006162:	4b62      	ldr	r3, [pc, #392]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800616a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800616e:	d131      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006170:	4b5e      	ldr	r3, [pc, #376]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800617a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	fb03 f202 	mul.w	r2, r3, r2
 8006184:	4b59      	ldr	r3, [pc, #356]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	3301      	adds	r3, #1
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006196:	4b55      	ldr	r3, [pc, #340]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	0d5b      	lsrs	r3, r3, #21
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	3301      	adds	r3, #1
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	61fb      	str	r3, [r7, #28]
          break;
 80061ac:	e012      	b.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80061ae:	4b4f      	ldr	r3, [pc, #316]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d10e      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80061bc:	4b4d      	ldr	r3, [pc, #308]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80061be:	61fb      	str	r3, [r7, #28]
          break;
 80061c0:	e00b      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80061c2:	bf00      	nop
 80061c4:	f000 bce2 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061c8:	bf00      	nop
 80061ca:	f000 bcdf 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061ce:	bf00      	nop
 80061d0:	f000 bcdc 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061d4:	bf00      	nop
 80061d6:	f000 bcd9 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061da:	bf00      	nop
        break;
 80061dc:	f000 bcd6 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80061e0:	4b42      	ldr	r3, [pc, #264]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ee:	d13d      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061f0:	4b3e      	ldr	r3, [pc, #248]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061fc:	f040 84c5 	bne.w	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006200:	4b3a      	ldr	r3, [pc, #232]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800620c:	f040 84bd 	bne.w	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006210:	4b36      	ldr	r3, [pc, #216]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800621a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	fb03 f202 	mul.w	r2, r3, r2
 8006224:	4b31      	ldr	r3, [pc, #196]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	3301      	adds	r3, #1
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006236:	4b2d      	ldr	r3, [pc, #180]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	0edb      	lsrs	r3, r3, #27
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006248:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006254:	2311      	movs	r3, #17
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e001      	b.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800625a:	2307      	movs	r3, #7
 800625c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	61fb      	str	r3, [r7, #28]
      break;
 8006268:	f000 bc8f 	b.w	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800626c:	4b1f      	ldr	r3, [pc, #124]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006272:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800627e:	d016      	beq.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006286:	f200 809b 	bhi.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006290:	d032      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006298:	f200 8092 	bhi.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8084 	beq.w	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062aa:	d052      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 80062ac:	e088      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062ae:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	f040 8084 	bne.w	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80062c8:	4b08      	ldr	r3, [pc, #32]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	e005      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	4a03      	ldr	r2, [pc, #12]	@ (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80062e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e6:	61fb      	str	r3, [r7, #28]
          break;
 80062e8:	e06c      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80062ea:	bf00      	nop
 80062ec:	40021000 	.word	0x40021000
 80062f0:	080096b4 	.word	0x080096b4
 80062f4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80062f8:	4ba5      	ldr	r3, [pc, #660]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006304:	d160      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006306:	4ba2      	ldr	r3, [pc, #648]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006312:	d159      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006314:	4b9e      	ldr	r3, [pc, #632]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	fb03 f202 	mul.w	r2, r3, r2
 8006328:	4b99      	ldr	r3, [pc, #612]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	3301      	adds	r3, #1
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800633a:	4b95      	ldr	r3, [pc, #596]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	0d5b      	lsrs	r3, r3, #21
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	3301      	adds	r3, #1
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	fbb2 f3f3 	udiv	r3, r2, r3
 800634e:	61fb      	str	r3, [r7, #28]
          break;
 8006350:	e03a      	b.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006352:	4b8f      	ldr	r3, [pc, #572]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800635a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635e:	d135      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006360:	4b8b      	ldr	r3, [pc, #556]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006368:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636c:	d12e      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800636e:	4b88      	ldr	r3, [pc, #544]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	0a1b      	lsrs	r3, r3, #8
 8006374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006378:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	fb03 f202 	mul.w	r2, r3, r2
 8006382:	4b83      	ldr	r3, [pc, #524]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	3301      	adds	r3, #1
 800638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006392:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006394:	4b7e      	ldr	r3, [pc, #504]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	0d5b      	lsrs	r3, r3, #21
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	3301      	adds	r3, #1
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	61fb      	str	r3, [r7, #28]
          break;
 80063aa:	e00f      	b.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80063ac:	4b78      	ldr	r3, [pc, #480]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d10a      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80063ba:	4b76      	ldr	r3, [pc, #472]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80063bc:	61fb      	str	r3, [r7, #28]
          break;
 80063be:	e007      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80063c0:	bf00      	nop
 80063c2:	e3e2      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063c4:	bf00      	nop
 80063c6:	e3e0      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063c8:	bf00      	nop
 80063ca:	e3de      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063cc:	bf00      	nop
 80063ce:	e3dc      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063d0:	bf00      	nop
      break;
 80063d2:	e3da      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80063d4:	4b6e      	ldr	r3, [pc, #440]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d827      	bhi.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	08006405 	.word	0x08006405
 80063f4:	0800640d 	.word	0x0800640d
 80063f8:	08006421 	.word	0x08006421
          frequency = HAL_RCC_GetPCLK2Freq();
 80063fc:	f7ff f8a8 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006400:	61f8      	str	r0, [r7, #28]
          break;
 8006402:	e01d      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006404:	f7fe fff6 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8006408:	61f8      	str	r0, [r7, #28]
          break;
 800640a:	e019      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800640c:	4b60      	ldr	r3, [pc, #384]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006418:	d10f      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800641a:	4b5f      	ldr	r3, [pc, #380]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800641c:	61fb      	str	r3, [r7, #28]
          break;
 800641e:	e00c      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006420:	4b5b      	ldr	r3, [pc, #364]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d107      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006432:	61fb      	str	r3, [r7, #28]
          break;
 8006434:	e003      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006436:	bf00      	nop
 8006438:	e3a8      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643a:	bf00      	nop
 800643c:	e3a6      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643e:	bf00      	nop
        break;
 8006440:	e3a4      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006442:	4b53      	ldr	r3, [pc, #332]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006448:	f003 030c 	and.w	r3, r3, #12
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b0c      	cmp	r3, #12
 8006452:	d83a      	bhi.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006454:	a201      	add	r2, pc, #4	@ (adr r2, 800645c <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645a:	bf00      	nop
 800645c:	08006491 	.word	0x08006491
 8006460:	080064cb 	.word	0x080064cb
 8006464:	080064cb 	.word	0x080064cb
 8006468:	080064cb 	.word	0x080064cb
 800646c:	08006499 	.word	0x08006499
 8006470:	080064cb 	.word	0x080064cb
 8006474:	080064cb 	.word	0x080064cb
 8006478:	080064cb 	.word	0x080064cb
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064cb 	.word	0x080064cb
 8006484:	080064cb 	.word	0x080064cb
 8006488:	080064cb 	.word	0x080064cb
 800648c:	080064b5 	.word	0x080064b5
          frequency = HAL_RCC_GetPCLK1Freq();
 8006490:	f7ff f848 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8006494:	61f8      	str	r0, [r7, #28]
          break;
 8006496:	e01d      	b.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006498:	f7fe ffac 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800649c:	61f8      	str	r0, [r7, #28]
          break;
 800649e:	e019      	b.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ac:	d10f      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 80064ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064b0:	61fb      	str	r3, [r7, #28]
          break;
 80064b2:	e00c      	b.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064b4:	4b36      	ldr	r3, [pc, #216]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d107      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 80064c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c6:	61fb      	str	r3, [r7, #28]
          break;
 80064c8:	e003      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80064ca:	bf00      	nop
 80064cc:	e35e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ce:	bf00      	nop
 80064d0:	e35c      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064d2:	bf00      	nop
        break;
 80064d4:	e35a      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80064d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d021      	beq.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b30      	cmp	r3, #48	@ 0x30
 80064ec:	d829      	bhi.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d011      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d823      	bhi.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b10      	cmp	r3, #16
 8006504:	d004      	beq.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006506:	e01c      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006508:	f7ff f80c 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 800650c:	61f8      	str	r0, [r7, #28]
          break;
 800650e:	e01d      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006510:	f7fe ff70 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8006514:	61f8      	str	r0, [r7, #28]
          break;
 8006516:	e019      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006518:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006524:	d10f      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006526:	4b1c      	ldr	r3, [pc, #112]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006528:	61fb      	str	r3, [r7, #28]
          break;
 800652a:	e00c      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800652c:	4b18      	ldr	r3, [pc, #96]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b02      	cmp	r3, #2
 8006538:	d107      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800653a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800653e:	61fb      	str	r3, [r7, #28]
          break;
 8006540:	e003      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8006542:	bf00      	nop
 8006544:	e322      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006546:	bf00      	nop
 8006548:	e320      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800654a:	bf00      	nop
        break;
 800654c:	e31e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800654e:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006554:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2bc0      	cmp	r3, #192	@ 0xc0
 800655e:	d027      	beq.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2bc0      	cmp	r3, #192	@ 0xc0
 8006564:	d82f      	bhi.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b80      	cmp	r3, #128	@ 0x80
 800656a:	d017      	beq.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b80      	cmp	r3, #128	@ 0x80
 8006570:	d829      	bhi.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b40      	cmp	r3, #64	@ 0x40
 800657c:	d004      	beq.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800657e:	e022      	b.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006580:	f7fe ffd0 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8006584:	61f8      	str	r0, [r7, #28]
          break;
 8006586:	e023      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006588:	f7fe ff34 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800658c:	61f8      	str	r0, [r7, #28]
          break;
 800658e:	e01f      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006590:	40021000 	.word	0x40021000
 8006594:	02dc6c00 	.word	0x02dc6c00
 8006598:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800659c:	4b9b      	ldr	r3, [pc, #620]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a8:	d10f      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 80065aa:	4b99      	ldr	r3, [pc, #612]	@ (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80065ac:	61fb      	str	r3, [r7, #28]
          break;
 80065ae:	e00c      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065b0:	4b96      	ldr	r3, [pc, #600]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d107      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 80065be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065c2:	61fb      	str	r3, [r7, #28]
          break;
 80065c4:	e003      	b.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80065c6:	bf00      	nop
 80065c8:	e2e0      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065ca:	bf00      	nop
 80065cc:	e2de      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065ce:	bf00      	nop
        break;
 80065d0:	e2dc      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80065d2:	4b8e      	ldr	r3, [pc, #568]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e4:	d025      	beq.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ec:	d82c      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065f4:	d013      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065fc:	d824      	bhi.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660a:	d004      	beq.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800660c:	e01c      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800660e:	f7fe ff89 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8006612:	61f8      	str	r0, [r7, #28]
          break;
 8006614:	e01d      	b.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006616:	f7fe feed 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800661a:	61f8      	str	r0, [r7, #28]
          break;
 800661c:	e019      	b.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800661e:	4b7b      	ldr	r3, [pc, #492]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662a:	d10f      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800662c:	4b78      	ldr	r3, [pc, #480]	@ (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800662e:	61fb      	str	r3, [r7, #28]
          break;
 8006630:	e00c      	b.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006632:	4b76      	ldr	r3, [pc, #472]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d107      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8006640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006644:	61fb      	str	r3, [r7, #28]
          break;
 8006646:	e003      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8006648:	bf00      	nop
 800664a:	e29f      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800664c:	bf00      	nop
 800664e:	e29d      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006650:	bf00      	nop
        break;
 8006652:	e29b      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006654:	4b6d      	ldr	r3, [pc, #436]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006666:	d025      	beq.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800666e:	d82c      	bhi.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006676:	d013      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800667e:	d824      	bhi.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800668c:	d004      	beq.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800668e:	e01c      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006690:	f7fe ff48 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8006694:	61f8      	str	r0, [r7, #28]
          break;
 8006696:	e01d      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006698:	f7fe feac 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 800669c:	61f8      	str	r0, [r7, #28]
          break;
 800669e:	e019      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066a0:	4b5a      	ldr	r3, [pc, #360]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ac:	d10f      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 80066ae:	4b58      	ldr	r3, [pc, #352]	@ (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80066b0:	61fb      	str	r3, [r7, #28]
          break;
 80066b2:	e00c      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066b4:	4b55      	ldr	r3, [pc, #340]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d107      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c6:	61fb      	str	r3, [r7, #28]
          break;
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80066ca:	bf00      	nop
 80066cc:	e25e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066ce:	bf00      	nop
 80066d0:	e25c      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066d2:	bf00      	nop
        break;
 80066d4:	e25a      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80066d6:	4b4d      	ldr	r3, [pc, #308]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e8:	d007      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066f0:	d12f      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80066f2:	f7fe fe7f 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80066f6:	61f8      	str	r0, [r7, #28]
          break;
 80066f8:	e02e      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80066fa:	4b44      	ldr	r3, [pc, #272]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006706:	d126      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006708:	4b40      	ldr	r3, [pc, #256]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006714:	4b3d      	ldr	r3, [pc, #244]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	fb03 f202 	mul.w	r2, r3, r2
 8006728:	4b38      	ldr	r3, [pc, #224]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	3301      	adds	r3, #1
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800673a:	4b34      	ldr	r3, [pc, #208]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	0e5b      	lsrs	r3, r3, #25
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	3301      	adds	r3, #1
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	fbb2 f3f3 	udiv	r3, r2, r3
 800674e:	61fb      	str	r3, [r7, #28]
          break;
 8006750:	e001      	b.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006752:	bf00      	nop
 8006754:	e21a      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006756:	bf00      	nop
        break;
 8006758:	e218      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800675a:	4b2c      	ldr	r3, [pc, #176]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800675c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800676c:	f7fe fef0 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8006770:	61f8      	str	r0, [r7, #28]
        break;
 8006772:	e20b      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006774:	f7fe fe3e 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8006778:	61f8      	str	r0, [r7, #28]
        break;
 800677a:	e207      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800677c:	4b23      	ldr	r3, [pc, #140]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800677e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006782:	f003 0318 	and.w	r3, r3, #24
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b10      	cmp	r3, #16
 800678c:	d010      	beq.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b10      	cmp	r3, #16
 8006792:	d834      	bhi.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d024      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 80067a0:	e02d      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80067a2:	69b9      	ldr	r1, [r7, #24]
 80067a4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80067a8:	f000 fbf2 	bl	8006f90 <RCCEx_GetSAIxPeriphCLKFreq>
 80067ac:	61f8      	str	r0, [r7, #28]
          break;
 80067ae:	e02b      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067b0:	4b16      	ldr	r3, [pc, #88]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d122      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067bc:	4b13      	ldr	r3, [pc, #76]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80067c8:	4b10      	ldr	r3, [pc, #64]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	091b      	lsrs	r3, r3, #4
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	e005      	b.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80067d4:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067da:	0a1b      	lsrs	r3, r3, #8
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80067e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e6:	61fb      	str	r3, [r7, #28]
          break;
 80067e8:	e00b      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067ea:	4b08      	ldr	r3, [pc, #32]	@ (800680c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f6:	d106      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80067f8:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80067fa:	61fb      	str	r3, [r7, #28]
          break;
 80067fc:	e003      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80067fe:	bf00      	nop
 8006800:	e1c4      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006802:	bf00      	nop
 8006804:	e1c2      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006806:	bf00      	nop
        break;
 8006808:	e1c0      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	00f42400 	.word	0x00f42400
 8006814:	080096b4 	.word	0x080096b4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006818:	4b96      	ldr	r3, [pc, #600]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800682a:	d013      	beq.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006832:	d819      	bhi.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006840:	d004      	beq.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006842:	e011      	b.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006844:	f7fe fe6e 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8006848:	61f8      	str	r0, [r7, #28]
          break;
 800684a:	e010      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800684c:	f7fe fdd2 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8006850:	61f8      	str	r0, [r7, #28]
          break;
 8006852:	e00c      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006854:	4b87      	ldr	r3, [pc, #540]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006860:	d104      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006862:	4b85      	ldr	r3, [pc, #532]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006864:	61fb      	str	r3, [r7, #28]
          break;
 8006866:	e001      	b.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006868:	bf00      	nop
 800686a:	e18f      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800686c:	bf00      	nop
        break;
 800686e:	e18d      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006870:	4b80      	ldr	r3, [pc, #512]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006876:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006882:	d013      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800688a:	d819      	bhi.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006898:	d004      	beq.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800689a:	e011      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800689c:	f7fe fe42 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 80068a0:	61f8      	str	r0, [r7, #28]
          break;
 80068a2:	e010      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 80068a4:	f7fe fda6 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80068a8:	61f8      	str	r0, [r7, #28]
          break;
 80068aa:	e00c      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ac:	4b71      	ldr	r3, [pc, #452]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b8:	d104      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 80068ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80068bc:	61fb      	str	r3, [r7, #28]
          break;
 80068be:	e001      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80068c0:	bf00      	nop
 80068c2:	e163      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068c4:	bf00      	nop
        break;
 80068c6:	e161      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80068c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068da:	d013      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068e2:	d819      	bhi.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d004      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 80068f2:	e011      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068f4:	f7fe fe16 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 80068f8:	61f8      	str	r0, [r7, #28]
          break;
 80068fa:	e010      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80068fc:	f7fe fd7a 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8006900:	61f8      	str	r0, [r7, #28]
          break;
 8006902:	e00c      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006904:	4b5b      	ldr	r3, [pc, #364]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006910:	d104      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006912:	4b59      	ldr	r3, [pc, #356]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006914:	61fb      	str	r3, [r7, #28]
          break;
 8006916:	e001      	b.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006918:	bf00      	nop
 800691a:	e137      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800691c:	bf00      	nop
        break;
 800691e:	e135      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006920:	4b54      	ldr	r3, [pc, #336]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006922:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d011      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d818      	bhi.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d004      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006944:	e011      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006946:	f7fe fded 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 800694a:	61f8      	str	r0, [r7, #28]
          break;
 800694c:	e010      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800694e:	f7fe fd51 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8006952:	61f8      	str	r0, [r7, #28]
          break;
 8006954:	e00c      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006956:	4b47      	ldr	r3, [pc, #284]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006962:	d104      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006964:	4b44      	ldr	r3, [pc, #272]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006966:	61fb      	str	r3, [r7, #28]
          break;
 8006968:	e001      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800696a:	bf00      	nop
 800696c:	e10e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800696e:	bf00      	nop
        break;
 8006970:	e10c      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006972:	4b40      	ldr	r3, [pc, #256]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006978:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006984:	d02c      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800698c:	d833      	bhi.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006994:	d01a      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800699c:	d82b      	bhi.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069aa:	d004      	beq.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 80069ac:	e023      	b.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069ae:	f7fe fdb9 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 80069b2:	61f8      	str	r0, [r7, #28]
          break;
 80069b4:	e026      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d11a      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 80069c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069c8:	61fb      	str	r3, [r7, #28]
          break;
 80069ca:	e016      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069cc:	4b29      	ldr	r3, [pc, #164]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d8:	d111      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 80069da:	4b27      	ldr	r3, [pc, #156]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80069dc:	61fb      	str	r3, [r7, #28]
          break;
 80069de:	e00e      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069e0:	4b24      	ldr	r3, [pc, #144]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d109      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 80069ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f2:	61fb      	str	r3, [r7, #28]
          break;
 80069f4:	e005      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 80069f6:	bf00      	nop
 80069f8:	e0c8      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069fa:	bf00      	nop
 80069fc:	e0c6      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069fe:	bf00      	nop
 8006a00:	e0c4      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a02:	bf00      	nop
        break;
 8006a04:	e0c2      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a06:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a18:	d030      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a20:	d837      	bhi.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a28:	d01a      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a30:	d82f      	bhi.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3e:	d004      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006a40:	e027      	b.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a42:	f7fe fd6f 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8006a46:	61f8      	str	r0, [r7, #28]
          break;
 8006a48:	e02a      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d11e      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006a58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a5c:	61fb      	str	r3, [r7, #28]
          break;
 8006a5e:	e01a      	b.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a60:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a6c:	d115      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006a6e:	4b02      	ldr	r3, [pc, #8]	@ (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a70:	61fb      	str	r3, [r7, #28]
          break;
 8006a72:	e012      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006a74:	40021000 	.word	0x40021000
 8006a78:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a7c:	4b46      	ldr	r3, [pc, #280]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d109      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a8e:	61fb      	str	r3, [r7, #28]
          break;
 8006a90:	e005      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006a92:	bf00      	nop
 8006a94:	e07a      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a96:	bf00      	nop
 8006a98:	e078      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a9a:	bf00      	nop
 8006a9c:	e076      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a9e:	bf00      	nop
        break;
 8006aa0:	e074      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aa8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ab4:	d02c      	beq.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006abc:	d855      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aca:	d004      	beq.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006acc:	e04d      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ace:	f7fe fc91 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8006ad2:	61f8      	str	r0, [r7, #28]
          break;
 8006ad4:	e04e      	b.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006ad6:	4b30      	ldr	r3, [pc, #192]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d145      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006aee:	4b2a      	ldr	r3, [pc, #168]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	f003 030f 	and.w	r3, r3, #15
 8006af8:	e005      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006afa:	4b27      	ldr	r3, [pc, #156]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b00:	0a1b      	lsrs	r3, r3, #8
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	4a25      	ldr	r2, [pc, #148]	@ (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b0c:	61fb      	str	r3, [r7, #28]
          break;
 8006b0e:	e02e      	b.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b10:	4b21      	ldr	r3, [pc, #132]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b1c:	d129      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b2a:	d122      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	0a1b      	lsrs	r3, r3, #8
 8006b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b36:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	fb03 f202 	mul.w	r2, r3, r2
 8006b40:	4b15      	ldr	r3, [pc, #84]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006b52:	4b11      	ldr	r3, [pc, #68]	@ (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	0d5b      	lsrs	r3, r3, #21
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	61fb      	str	r3, [r7, #28]
          break;
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006b6a:	bf00      	nop
 8006b6c:	e00e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b6e:	bf00      	nop
 8006b70:	e00c      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b72:	bf00      	nop
        break;
 8006b74:	e00a      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b76:	bf00      	nop
 8006b78:	e008      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e006      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e004      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006b8a:	bf00      	nop
    }
  }

  return(frequency);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	080096b4 	.word	0x080096b4

08006ba0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006ba4:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a04      	ldr	r2, [pc, #16]	@ (8006bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006baa:	f043 0304 	orr.w	r3, r3, #4
 8006bae:	6013      	str	r3, [r2, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40021000 	.word	0x40021000

08006bc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bce:	4b72      	ldr	r3, [pc, #456]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006bda:	4b6f      	ldr	r3, [pc, #444]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0203 	and.w	r2, r3, #3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d103      	bne.n	8006bf2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
       ||
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d142      	bne.n	8006c78 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	73fb      	strb	r3, [r7, #15]
 8006bf6:	e03f      	b.n	8006c78 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d018      	beq.n	8006c32 <RCCEx_PLLSAI1_Config+0x72>
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d825      	bhi.n	8006c50 <RCCEx_PLLSAI1_Config+0x90>
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d002      	beq.n	8006c0e <RCCEx_PLLSAI1_Config+0x4e>
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d009      	beq.n	8006c20 <RCCEx_PLLSAI1_Config+0x60>
 8006c0c:	e020      	b.n	8006c50 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c0e:	4b62      	ldr	r3, [pc, #392]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d11d      	bne.n	8006c56 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c1e:	e01a      	b.n	8006c56 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c20:	4b5d      	ldr	r3, [pc, #372]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d116      	bne.n	8006c5a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c30:	e013      	b.n	8006c5a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c32:	4b59      	ldr	r3, [pc, #356]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10f      	bne.n	8006c5e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c3e:	4b56      	ldr	r3, [pc, #344]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c4e:	e006      	b.n	8006c5e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	73fb      	strb	r3, [r7, #15]
      break;
 8006c54:	e004      	b.n	8006c60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c56:	bf00      	nop
 8006c58:	e002      	b.n	8006c60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c5a:	bf00      	nop
 8006c5c:	e000      	b.n	8006c60 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d108      	bne.n	8006c78 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006c66:	4b4c      	ldr	r3, [pc, #304]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f023 0203 	bic.w	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4949      	ldr	r1, [pc, #292]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f040 8086 	bne.w	8006d8c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c80:	4b45      	ldr	r3, [pc, #276]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a44      	ldr	r2, [pc, #272]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c8c:	f7fb fb86 	bl	800239c <HAL_GetTick>
 8006c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c92:	e009      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c94:	f7fb fb82 	bl	800239c <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d902      	bls.n	8006ca8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ca6:	e005      	b.n	8006cb4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ef      	bne.n	8006c94 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d168      	bne.n	8006d8c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d113      	bne.n	8006ce8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cc0:	4b35      	ldr	r3, [pc, #212]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	4b35      	ldr	r3, [pc, #212]	@ (8006d9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6892      	ldr	r2, [r2, #8]
 8006ccc:	0211      	lsls	r1, r2, #8
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	68d2      	ldr	r2, [r2, #12]
 8006cd2:	06d2      	lsls	r2, r2, #27
 8006cd4:	4311      	orrs	r1, r2
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6852      	ldr	r2, [r2, #4]
 8006cda:	3a01      	subs	r2, #1
 8006cdc:	0112      	lsls	r2, r2, #4
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	492d      	ldr	r1, [pc, #180]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	610b      	str	r3, [r1, #16]
 8006ce6:	e02d      	b.n	8006d44 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d115      	bne.n	8006d1a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cee:	4b2a      	ldr	r3, [pc, #168]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8006da0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6892      	ldr	r2, [r2, #8]
 8006cfa:	0211      	lsls	r1, r2, #8
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6912      	ldr	r2, [r2, #16]
 8006d00:	0852      	lsrs	r2, r2, #1
 8006d02:	3a01      	subs	r2, #1
 8006d04:	0552      	lsls	r2, r2, #21
 8006d06:	4311      	orrs	r1, r2
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6852      	ldr	r2, [r2, #4]
 8006d0c:	3a01      	subs	r2, #1
 8006d0e:	0112      	lsls	r2, r2, #4
 8006d10:	430a      	orrs	r2, r1
 8006d12:	4921      	ldr	r1, [pc, #132]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	610b      	str	r3, [r1, #16]
 8006d18:	e014      	b.n	8006d44 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	4b21      	ldr	r3, [pc, #132]	@ (8006da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6892      	ldr	r2, [r2, #8]
 8006d26:	0211      	lsls	r1, r2, #8
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6952      	ldr	r2, [r2, #20]
 8006d2c:	0852      	lsrs	r2, r2, #1
 8006d2e:	3a01      	subs	r2, #1
 8006d30:	0652      	lsls	r2, r2, #25
 8006d32:	4311      	orrs	r1, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6852      	ldr	r2, [r2, #4]
 8006d38:	3a01      	subs	r2, #1
 8006d3a:	0112      	lsls	r2, r2, #4
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	4916      	ldr	r1, [pc, #88]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d44:	4b14      	ldr	r3, [pc, #80]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a13      	ldr	r2, [pc, #76]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d50:	f7fb fb24 	bl	800239c <HAL_GetTick>
 8006d54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d56:	e009      	b.n	8006d6c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d58:	f7fb fb20 	bl	800239c <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d902      	bls.n	8006d6c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	73fb      	strb	r3, [r7, #15]
          break;
 8006d6a:	e005      	b.n	8006d78 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0ef      	beq.n	8006d58 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d7e:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	4904      	ldr	r1, [pc, #16]	@ (8006d98 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	07ff800f 	.word	0x07ff800f
 8006da0:	ff9f800f 	.word	0xff9f800f
 8006da4:	f9ff800f 	.word	0xf9ff800f

08006da8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006db6:	4b72      	ldr	r3, [pc, #456]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f003 0203 	and.w	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d103      	bne.n	8006dda <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d142      	bne.n	8006e60 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	e03f      	b.n	8006e60 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d018      	beq.n	8006e1a <RCCEx_PLLSAI2_Config+0x72>
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d825      	bhi.n	8006e38 <RCCEx_PLLSAI2_Config+0x90>
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d002      	beq.n	8006df6 <RCCEx_PLLSAI2_Config+0x4e>
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d009      	beq.n	8006e08 <RCCEx_PLLSAI2_Config+0x60>
 8006df4:	e020      	b.n	8006e38 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006df6:	4b62      	ldr	r3, [pc, #392]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d11d      	bne.n	8006e3e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e06:	e01a      	b.n	8006e3e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e08:	4b5d      	ldr	r3, [pc, #372]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d116      	bne.n	8006e42 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e18:	e013      	b.n	8006e42 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e1a:	4b59      	ldr	r3, [pc, #356]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10f      	bne.n	8006e46 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e26:	4b56      	ldr	r3, [pc, #344]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e36:	e006      	b.n	8006e46 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3c:	e004      	b.n	8006e48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e3e:	bf00      	nop
 8006e40:	e002      	b.n	8006e48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e42:	bf00      	nop
 8006e44:	e000      	b.n	8006e48 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006e46:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f023 0203 	bic.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4949      	ldr	r1, [pc, #292]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f040 8086 	bne.w	8006f74 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e68:	4b45      	ldr	r3, [pc, #276]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a44      	ldr	r2, [pc, #272]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e74:	f7fb fa92 	bl	800239c <HAL_GetTick>
 8006e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e7a:	e009      	b.n	8006e90 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e7c:	f7fb fa8e 	bl	800239c <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d902      	bls.n	8006e90 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006e8e:	e005      	b.n	8006e9c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e90:	4b3b      	ldr	r3, [pc, #236]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ef      	bne.n	8006e7c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d168      	bne.n	8006f74 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d113      	bne.n	8006ed0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ea8:	4b35      	ldr	r3, [pc, #212]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eaa:	695a      	ldr	r2, [r3, #20]
 8006eac:	4b35      	ldr	r3, [pc, #212]	@ (8006f84 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006eae:	4013      	ands	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6892      	ldr	r2, [r2, #8]
 8006eb4:	0211      	lsls	r1, r2, #8
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68d2      	ldr	r2, [r2, #12]
 8006eba:	06d2      	lsls	r2, r2, #27
 8006ebc:	4311      	orrs	r1, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6852      	ldr	r2, [r2, #4]
 8006ec2:	3a01      	subs	r2, #1
 8006ec4:	0112      	lsls	r2, r2, #4
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	492d      	ldr	r1, [pc, #180]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	614b      	str	r3, [r1, #20]
 8006ece:	e02d      	b.n	8006f2c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d115      	bne.n	8006f02 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	4b2b      	ldr	r3, [pc, #172]	@ (8006f88 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6892      	ldr	r2, [r2, #8]
 8006ee2:	0211      	lsls	r1, r2, #8
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6912      	ldr	r2, [r2, #16]
 8006ee8:	0852      	lsrs	r2, r2, #1
 8006eea:	3a01      	subs	r2, #1
 8006eec:	0552      	lsls	r2, r2, #21
 8006eee:	4311      	orrs	r1, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6852      	ldr	r2, [r2, #4]
 8006ef4:	3a01      	subs	r2, #1
 8006ef6:	0112      	lsls	r2, r2, #4
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	4921      	ldr	r1, [pc, #132]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	614b      	str	r3, [r1, #20]
 8006f00:	e014      	b.n	8006f2c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f02:	4b1f      	ldr	r3, [pc, #124]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	4b21      	ldr	r3, [pc, #132]	@ (8006f8c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6892      	ldr	r2, [r2, #8]
 8006f0e:	0211      	lsls	r1, r2, #8
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6952      	ldr	r2, [r2, #20]
 8006f14:	0852      	lsrs	r2, r2, #1
 8006f16:	3a01      	subs	r2, #1
 8006f18:	0652      	lsls	r2, r2, #25
 8006f1a:	4311      	orrs	r1, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6852      	ldr	r2, [r2, #4]
 8006f20:	3a01      	subs	r2, #1
 8006f22:	0112      	lsls	r2, r2, #4
 8006f24:	430a      	orrs	r2, r1
 8006f26:	4916      	ldr	r1, [pc, #88]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006f2c:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a13      	ldr	r2, [pc, #76]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f38:	f7fb fa30 	bl	800239c <HAL_GetTick>
 8006f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f3e:	e009      	b.n	8006f54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f40:	f7fb fa2c 	bl	800239c <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d902      	bls.n	8006f54 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	73fb      	strb	r3, [r7, #15]
          break;
 8006f52:	e005      	b.n	8006f60 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f54:	4b0a      	ldr	r3, [pc, #40]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0ef      	beq.n	8006f40 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f66:	4b06      	ldr	r3, [pc, #24]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	4904      	ldr	r1, [pc, #16]	@ (8006f80 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40021000 	.word	0x40021000
 8006f84:	07ff800f 	.word	0x07ff800f
 8006f88:	ff9f800f 	.word	0xff9f800f
 8006f8c:	f9ff800f 	.word	0xf9ff800f

08006f90 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	@ 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fac:	d10b      	bne.n	8006fc6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006fae:	4b7e      	ldr	r3, [pc, #504]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fb4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006fb8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b60      	cmp	r3, #96	@ 0x60
 8006fbe:	d112      	bne.n	8006fe6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006fc0:	4b7a      	ldr	r3, [pc, #488]	@ (80071ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006fc2:	61fb      	str	r3, [r7, #28]
 8006fc4:	e00f      	b.n	8006fe6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fcc:	d10b      	bne.n	8006fe6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006fce:	4b76      	ldr	r3, [pc, #472]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fd8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe0:	d101      	bne.n	8006fe6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006fe2:	4b72      	ldr	r3, [pc, #456]	@ (80071ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006fe4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f040 80d6 	bne.w	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b40      	cmp	r3, #64	@ 0x40
 8006ff6:	d003      	beq.n	8007000 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ffe:	d13b      	bne.n	8007078 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007000:	4b69      	ldr	r3, [pc, #420]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800700c:	f040 80c4 	bne.w	8007198 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007010:	4b65      	ldr	r3, [pc, #404]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80bd 	beq.w	8007198 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800701e:	4b62      	ldr	r3, [pc, #392]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	091b      	lsrs	r3, r3, #4
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	3301      	adds	r3, #1
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007030:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007032:	4b5d      	ldr	r3, [pc, #372]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800703e:	4b5a      	ldr	r3, [pc, #360]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	0edb      	lsrs	r3, r3, #27
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007050:	4b55      	ldr	r3, [pc, #340]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800705c:	2311      	movs	r3, #17
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	e001      	b.n	8007066 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8007062:	2307      	movs	r3, #7
 8007064:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	fb03 f202 	mul.w	r2, r3, r2
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007076:	e08f      	b.n	8007198 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d13a      	bne.n	80070f4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800707e:	4b4a      	ldr	r3, [pc, #296]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800708a:	f040 8086 	bne.w	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800708e:	4b46      	ldr	r3, [pc, #280]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d07f      	beq.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800709a:	4b43      	ldr	r3, [pc, #268]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	3301      	adds	r3, #1
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80070ae:	4b3e      	ldr	r3, [pc, #248]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	0a1b      	lsrs	r3, r3, #8
 80070b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80070ba:	4b3b      	ldr	r3, [pc, #236]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	0edb      	lsrs	r3, r3, #27
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80070cc:	4b36      	ldr	r3, [pc, #216]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80070d8:	2311      	movs	r3, #17
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	e001      	b.n	80070e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80070de:	2307      	movs	r3, #7
 80070e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	fb03 f202 	mul.w	r2, r3, r2
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e052      	b.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b80      	cmp	r3, #128	@ 0x80
 80070f8:	d003      	beq.n	8007102 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007100:	d109      	bne.n	8007116 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007102:	4b29      	ldr	r3, [pc, #164]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800710e:	d144      	bne.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007110:	4b27      	ldr	r3, [pc, #156]	@ (80071b0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007112:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007114:	e041      	b.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b20      	cmp	r3, #32
 800711a:	d003      	beq.n	8007124 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007122:	d13a      	bne.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007124:	4b20      	ldr	r3, [pc, #128]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800712c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007130:	d133      	bne.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007132:	4b1d      	ldr	r3, [pc, #116]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d02d      	beq.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800713e:	4b1a      	ldr	r3, [pc, #104]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	091b      	lsrs	r3, r3, #4
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	3301      	adds	r3, #1
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007150:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007152:	4b15      	ldr	r3, [pc, #84]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800715c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800715e:	4b12      	ldr	r3, [pc, #72]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	0edb      	lsrs	r3, r3, #27
 8007164:	f003 031f 	and.w	r3, r3, #31
 8007168:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007170:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800717c:	2311      	movs	r3, #17
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	e001      	b.n	8007186 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007182:	2307      	movs	r3, #7
 8007184:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	fb03 f202 	mul.w	r2, r3, r2
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	e000      	b.n	800719a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007198:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800719a:	69fb      	ldr	r3, [r7, #28]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3724      	adds	r7, #36	@ 0x24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	40021000 	.word	0x40021000
 80071ac:	001fff68 	.word	0x001fff68
 80071b0:	00f42400 	.word	0x00f42400

080071b4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d904      	bls.n	80071d2 <HAL_SAI_InitProtocol+0x1e>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	3b03      	subs	r3, #3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d812      	bhi.n	80071f6 <HAL_SAI_InitProtocol+0x42>
 80071d0:	e008      	b.n	80071e4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f9fb 	bl	80075d4 <SAI_InitI2S>
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]
      break;
 80071e2:	e00b      	b.n	80071fc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 faa4 	bl	8007738 <SAI_InitPCM>
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]
      break;
 80071f4:	e002      	b.n	80071fc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
      break;
 80071fa:	bf00      	nop
  }

  if (status == HAL_OK)
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f808 	bl	8007218 <HAL_SAI_Init>
 8007208:	4603      	mov	r3, r0
 800720a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	@ 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e1c7      	b.n	80075ba <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10e      	bne.n	8007252 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a81      	ldr	r2, [pc, #516]	@ (8007440 <HAL_SAI_Init+0x228>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d107      	bne.n	800724e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007242:	2b01      	cmp	r3, #1
 8007244:	d103      	bne.n	800724e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e1b3      	b.n	80075ba <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fa ff08 	bl	800207c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fae5 	bl	800783c <SAI_Disable>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e19e      	b.n	80075ba <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d00c      	beq.n	80072a6 <HAL_SAI_Init+0x8e>
 800728c:	2b02      	cmp	r3, #2
 800728e:	d80d      	bhi.n	80072ac <HAL_SAI_Init+0x94>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_SAI_Init+0x82>
 8007294:	2b01      	cmp	r3, #1
 8007296:	d003      	beq.n	80072a0 <HAL_SAI_Init+0x88>
 8007298:	e008      	b.n	80072ac <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800729e:	e008      	b.n	80072b2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80072a0:	2310      	movs	r3, #16
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072a4:	e005      	b.n	80072b2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072a6:	2320      	movs	r3, #32
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072aa:	e002      	b.n	80072b2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072b0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d81d      	bhi.n	80072f6 <HAL_SAI_Init+0xde>
 80072ba:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <HAL_SAI_Init+0xa8>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072d1 	.word	0x080072d1
 80072c4:	080072d7 	.word	0x080072d7
 80072c8:	080072df 	.word	0x080072df
 80072cc:	080072e7 	.word	0x080072e7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
      break;
 80072d4:	e012      	b.n	80072fc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80072d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072da:	61fb      	str	r3, [r7, #28]
      break;
 80072dc:	e00e      	b.n	80072fc <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80072de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80072e2:	61fb      	str	r3, [r7, #28]
      break;
 80072e4:	e00a      	b.n	80072fc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80072e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80072ea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072f4:	e002      	b.n	80072fc <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
      break;
 80072fa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a4f      	ldr	r2, [pc, #316]	@ (8007440 <HAL_SAI_Init+0x228>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_SAI_Init+0xf8>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a4e      	ldr	r2, [pc, #312]	@ (8007444 <HAL_SAI_Init+0x22c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d103      	bne.n	8007318 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007310:	4a4d      	ldr	r2, [pc, #308]	@ (8007448 <HAL_SAI_Init+0x230>)
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	e002      	b.n	800731e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007318:	4a4c      	ldr	r2, [pc, #304]	@ (800744c <HAL_SAI_Init+0x234>)
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d073      	beq.n	800740e <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a45      	ldr	r2, [pc, #276]	@ (8007440 <HAL_SAI_Init+0x228>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_SAI_Init+0x122>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a43      	ldr	r2, [pc, #268]	@ (8007444 <HAL_SAI_Init+0x22c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d105      	bne.n	8007346 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800733a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800733e:	f7fe fd0d 	bl	8005d5c <HAL_RCCEx_GetPeriphCLKFreq>
 8007342:	61b8      	str	r0, [r7, #24]
 8007344:	e004      	b.n	8007350 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007346:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800734a:	f7fe fd07 	bl	8005d5c <HAL_RCCEx_GetPeriphCLKFreq>
 800734e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007358:	d120      	bne.n	800739c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735e:	2b04      	cmp	r3, #4
 8007360:	d102      	bne.n	8007368 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007362:	2340      	movs	r3, #64	@ 0x40
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	e00a      	b.n	800737e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736c:	2b08      	cmp	r3, #8
 800736e:	d103      	bne.n	8007378 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	e002      	b.n	800737e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	4619      	mov	r1, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	fbb1 f3f3 	udiv	r3, r1, r3
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e017      	b.n	80073cc <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073a4:	d101      	bne.n	80073aa <HAL_SAI_Init+0x192>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e000      	b.n	80073ac <HAL_SAI_Init+0x194>
 80073aa:	2301      	movs	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	4619      	mov	r1, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	fb02 f303 	mul.w	r3, r2, r3
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073ca:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4a20      	ldr	r2, [pc, #128]	@ (8007450 <HAL_SAI_Init+0x238>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	08da      	lsrs	r2, r3, #3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80073da:	6979      	ldr	r1, [r7, #20]
 80073dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007450 <HAL_SAI_Init+0x238>)
 80073de:	fba3 2301 	umull	r2, r3, r3, r1
 80073e2:	08da      	lsrs	r2, r3, #3
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	1aca      	subs	r2, r1, r3
 80073ee:	2a08      	cmp	r2, #8
 80073f0:	d904      	bls.n	80073fc <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007400:	2b04      	cmp	r3, #4
 8007402:	d104      	bne.n	800740e <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	085a      	lsrs	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_SAI_Init+0x206>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d109      	bne.n	8007432 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_SAI_Init+0x212>
 8007426:	2300      	movs	r3, #0
 8007428:	e001      	b.n	800742e <HAL_SAI_Init+0x216>
 800742a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800742e:	623b      	str	r3, [r7, #32]
 8007430:	e012      	b.n	8007458 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d10c      	bne.n	8007454 <HAL_SAI_Init+0x23c>
 800743a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800743e:	e00a      	b.n	8007456 <HAL_SAI_Init+0x23e>
 8007440:	40015404 	.word	0x40015404
 8007444:	40015424 	.word	0x40015424
 8007448:	40015400 	.word	0x40015400
 800744c:	40015800 	.word	0x40015800
 8007450:	cccccccd 	.word	0xcccccccd
 8007454:	2300      	movs	r3, #0
 8007456:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b58      	ldr	r3, [pc, #352]	@ (80075c4 <HAL_SAI_Init+0x3ac>)
 8007464:	400b      	ands	r3, r1
 8007466:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6819      	ldr	r1, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800747c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007482:	431a      	orrs	r2, r3
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007490:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800749c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	051b      	lsls	r3, r3, #20
 80074a4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074aa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6812      	ldr	r2, [r2, #0]
 80074be:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80074c2:	f023 030f 	bic.w	r3, r3, #15
 80074c6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6859      	ldr	r1, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4b35      	ldr	r3, [pc, #212]	@ (80075c8 <HAL_SAI_Init+0x3b0>)
 80074f2:	400b      	ands	r3, r1
 80074f4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6899      	ldr	r1, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007500:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007506:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800750c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8007512:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	3b01      	subs	r3, #1
 800751a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800751c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68d9      	ldr	r1, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007534:	400b      	ands	r3, r1
 8007536:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68d9      	ldr	r1, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007546:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800754e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007554:	3b01      	subs	r3, #1
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a19      	ldr	r2, [pc, #100]	@ (80075cc <HAL_SAI_Init+0x3b4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d119      	bne.n	80075a0 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800756c:	4b18      	ldr	r3, [pc, #96]	@ (80075d0 <HAL_SAI_Init+0x3b8>)
 800756e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007570:	4a17      	ldr	r2, [pc, #92]	@ (80075d0 <HAL_SAI_Init+0x3b8>)
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10e      	bne.n	80075a0 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758a:	3b01      	subs	r3, #1
 800758c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800758e:	4910      	ldr	r1, [pc, #64]	@ (80075d0 <HAL_SAI_Init+0x3b8>)
 8007590:	4313      	orrs	r3, r2
 8007592:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007594:	4b0e      	ldr	r3, [pc, #56]	@ (80075d0 <HAL_SAI_Init+0x3b8>)
 8007596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007598:	4a0d      	ldr	r2, [pc, #52]	@ (80075d0 <HAL_SAI_Init+0x3b8>)
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3728      	adds	r7, #40	@ 0x28
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	f805c010 	.word	0xf805c010
 80075c8:	fff88000 	.word	0xfff88000
 80075cc:	40015404 	.word	0x40015404
 80075d0:	40015400 	.word	0x40015400

080075d4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <SAI_InitI2S+0x2e>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d103      	bne.n	800760a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007608:	e002      	b.n	8007610 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007616:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800761e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e077      	b.n	800772a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d107      	bne.n	8007650 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800764c:	661a      	str	r2, [r3, #96]	@ 0x60
 800764e:	e006      	b.n	800765e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007656:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d84f      	bhi.n	8007704 <SAI_InitI2S+0x130>
 8007664:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <SAI_InitI2S+0x98>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	0800767d 	.word	0x0800767d
 8007670:	0800769f 	.word	0x0800769f
 8007674:	080076c1 	.word	0x080076c1
 8007678:	080076e3 	.word	0x080076e3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2280      	movs	r2, #128	@ 0x80
 8007680:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	011a      	lsls	r2, r3, #4
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2240      	movs	r2, #64	@ 0x40
 800769a:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800769c:	e035      	b.n	800770a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2280      	movs	r2, #128	@ 0x80
 80076a2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	019a      	lsls	r2, r3, #6
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2280      	movs	r2, #128	@ 0x80
 80076bc:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80076be:	e024      	b.n	800770a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	22c0      	movs	r2, #192	@ 0xc0
 80076c4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	019a      	lsls	r2, r3, #6
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2280      	movs	r2, #128	@ 0x80
 80076de:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80076e0:	e013      	b.n	800770a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	22e0      	movs	r2, #224	@ 0xe0
 80076e6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	085b      	lsrs	r3, r3, #1
 80076ec:	019a      	lsls	r2, r3, #6
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	085b      	lsrs	r3, r3, #1
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2280      	movs	r2, #128	@ 0x80
 8007700:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007702:	e002      	b.n	800770a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
      break;
 8007708:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d10b      	bne.n	8007728 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d102      	bne.n	800771c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2210      	movs	r2, #16
 800771a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d102      	bne.n	8007728 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2208      	movs	r2, #8
 8007726:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop

08007738 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <SAI_InitPCM+0x2e>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d103      	bne.n	800776e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800776c:	e002      	b.n	8007774 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007780:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007788:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800779c:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d103      	bne.n	80077ac <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80077aa:	e002      	b.n	80077b2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	220d      	movs	r2, #13
 80077b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d837      	bhi.n	8007828 <SAI_InitPCM+0xf0>
 80077b8:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <SAI_InitPCM+0x88>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	080077e7 	.word	0x080077e7
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	08007813 	.word	0x08007813
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2280      	movs	r2, #128	@ 0x80
 80077d4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	011a      	lsls	r2, r3, #4
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2240      	movs	r2, #64	@ 0x40
 80077e2:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80077e4:	e023      	b.n	800782e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2280      	movs	r2, #128	@ 0x80
 80077ea:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2280      	movs	r2, #128	@ 0x80
 80077f8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80077fa:	e018      	b.n	800782e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	22c0      	movs	r2, #192	@ 0xc0
 8007800:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2280      	movs	r2, #128	@ 0x80
 800780e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007810:	e00d      	b.n	800782e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	22e0      	movs	r2, #224	@ 0xe0
 8007816:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2280      	movs	r2, #128	@ 0x80
 8007824:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8007826:	e002      	b.n	800782e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
      break;
 800782c:	bf00      	nop
  }

  return status;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007830:	4618      	mov	r0, r3
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007844:	4b18      	ldr	r3, [pc, #96]	@ (80078a8 <SAI_Disable+0x6c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a18      	ldr	r2, [pc, #96]	@ (80078ac <SAI_Disable+0x70>)
 800784a:	fba2 2303 	umull	r2, r3, r2, r3
 800784e:	0b1b      	lsrs	r3, r3, #12
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007866:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007874:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	72fb      	strb	r3, [r7, #11]
      break;
 8007882:	e009      	b.n	8007898 <SAI_Disable+0x5c>
    }
    count--;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b01      	subs	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e7      	bne.n	8007868 <SAI_Disable+0x2c>

  return status;
 8007898:	7afb      	ldrb	r3, [r7, #11]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000000 	.word	0x20000000
 80078ac:	95cbec1b 	.word	0x95cbec1b

080078b0 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e0aa      	b.n	8007a18 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fa f850 	bl	8001978 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80078fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695a      	ldr	r2, [r3, #20]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800790a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695a      	ldr	r2, [r3, #20]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800791a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007924:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007934:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d012      	beq.n	8007964 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d107      	bne.n	8007956 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	e006      	b.n	8007964 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007962:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d104      	bne.n	8007976 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007988:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695a      	ldr	r2, [r3, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1a      	ldr	r2, [r3, #32]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ac:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079b2:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80079c4:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80079c6:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079d0:	d110      	bne.n	80079f4 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80079de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079e2:	d107      	bne.n	80079f4 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80079f2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0201 	orr.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007a36:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007a40:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007a42:	2180      	movs	r1, #128	@ 0x80
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f805 	bl	8007a54 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a72:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a7a:	2b38      	cmp	r3, #56	@ 0x38
 8007a7c:	d103      	bne.n	8007a86 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007a84:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8007a8c:	2bf2      	cmp	r3, #242	@ 0xf2
 8007a8e:	d103      	bne.n	8007a98 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007a96:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 8007a9e:	2bd4      	cmp	r3, #212	@ 0xd4
 8007aa0:	d103      	bne.n	8007aaa <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	601a      	str	r2, [r3, #0]
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e095      	b.n	8007c04 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d108      	bne.n	8007af2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ae8:	d009      	beq.n	8007afe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	61da      	str	r2, [r3, #28]
 8007af0:	e005      	b.n	8007afe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fa f875 	bl	8001c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b34:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b3e:	d902      	bls.n	8007b46 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e002      	b.n	8007b4c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007b54:	d007      	beq.n	8007b66 <HAL_SPI_Init+0xa0>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b5e:	d002      	beq.n	8007b66 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba8:	ea42 0103 	orr.w	r1, r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	f003 0204 	and.w	r2, r3, #4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bca:	f003 0310 	and.w	r3, r3, #16
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007be2:	ea42 0103 	orr.w	r1, r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e049      	b.n	8007cb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7fa f85c 	bl	8001cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f000 f94a 	bl	8007ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e0ff      	b.n	8007eda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b14      	cmp	r3, #20
 8007ce6:	f200 80f0 	bhi.w	8007eca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cea:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d45 	.word	0x08007d45
 8007cf4:	08007ecb 	.word	0x08007ecb
 8007cf8:	08007ecb 	.word	0x08007ecb
 8007cfc:	08007ecb 	.word	0x08007ecb
 8007d00:	08007d85 	.word	0x08007d85
 8007d04:	08007ecb 	.word	0x08007ecb
 8007d08:	08007ecb 	.word	0x08007ecb
 8007d0c:	08007ecb 	.word	0x08007ecb
 8007d10:	08007dc7 	.word	0x08007dc7
 8007d14:	08007ecb 	.word	0x08007ecb
 8007d18:	08007ecb 	.word	0x08007ecb
 8007d1c:	08007ecb 	.word	0x08007ecb
 8007d20:	08007e07 	.word	0x08007e07
 8007d24:	08007ecb 	.word	0x08007ecb
 8007d28:	08007ecb 	.word	0x08007ecb
 8007d2c:	08007ecb 	.word	0x08007ecb
 8007d30:	08007e49 	.word	0x08007e49
 8007d34:	08007ecb 	.word	0x08007ecb
 8007d38:	08007ecb 	.word	0x08007ecb
 8007d3c:	08007ecb 	.word	0x08007ecb
 8007d40:	08007e89 	.word	0x08007e89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f964 	bl	8008018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0208 	orr.w	r2, r2, #8
 8007d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0204 	bic.w	r2, r2, #4
 8007d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6999      	ldr	r1, [r3, #24]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	619a      	str	r2, [r3, #24]
      break;
 8007d82:	e0a5      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f9d4 	bl	8008138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6999      	ldr	r1, [r3, #24]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	021a      	lsls	r2, r3, #8
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	619a      	str	r2, [r3, #24]
      break;
 8007dc4:	e084      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fa3d 	bl	800824c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0208 	orr.w	r2, r2, #8
 8007de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0204 	bic.w	r2, r2, #4
 8007df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69d9      	ldr	r1, [r3, #28]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	61da      	str	r2, [r3, #28]
      break;
 8007e04:	e064      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 faa5 	bl	800835c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69d9      	ldr	r1, [r3, #28]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	021a      	lsls	r2, r3, #8
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	61da      	str	r2, [r3, #28]
      break;
 8007e46:	e043      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 faee 	bl	8008430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0208 	orr.w	r2, r2, #8
 8007e62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 0204 	bic.w	r2, r2, #4
 8007e72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007e86:	e023      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68b9      	ldr	r1, [r7, #8]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fb32 	bl	80084f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	021a      	lsls	r2, r3, #8
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ec8:	e002      	b.n	8007ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop

08007ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a40      	ldr	r2, [pc, #256]	@ (8007ff8 <TIM_Base_SetConfig+0x114>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d013      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d00f      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a3d      	ldr	r2, [pc, #244]	@ (8007ffc <TIM_Base_SetConfig+0x118>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00b      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a3c      	ldr	r2, [pc, #240]	@ (8008000 <TIM_Base_SetConfig+0x11c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d007      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3b      	ldr	r2, [pc, #236]	@ (8008004 <TIM_Base_SetConfig+0x120>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8008008 <TIM_Base_SetConfig+0x124>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d108      	bne.n	8007f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a2f      	ldr	r2, [pc, #188]	@ (8007ff8 <TIM_Base_SetConfig+0x114>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d01f      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f44:	d01b      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a2c      	ldr	r2, [pc, #176]	@ (8007ffc <TIM_Base_SetConfig+0x118>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d017      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2b      	ldr	r2, [pc, #172]	@ (8008000 <TIM_Base_SetConfig+0x11c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2a      	ldr	r2, [pc, #168]	@ (8008004 <TIM_Base_SetConfig+0x120>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00f      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a29      	ldr	r2, [pc, #164]	@ (8008008 <TIM_Base_SetConfig+0x124>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00b      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a28      	ldr	r2, [pc, #160]	@ (800800c <TIM_Base_SetConfig+0x128>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d007      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a27      	ldr	r2, [pc, #156]	@ (8008010 <TIM_Base_SetConfig+0x12c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_Base_SetConfig+0x9a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a26      	ldr	r2, [pc, #152]	@ (8008014 <TIM_Base_SetConfig+0x130>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d108      	bne.n	8007f90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a10      	ldr	r2, [pc, #64]	@ (8007ff8 <TIM_Base_SetConfig+0x114>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00f      	beq.n	8007fdc <TIM_Base_SetConfig+0xf8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a12      	ldr	r2, [pc, #72]	@ (8008008 <TIM_Base_SetConfig+0x124>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00b      	beq.n	8007fdc <TIM_Base_SetConfig+0xf8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a11      	ldr	r2, [pc, #68]	@ (800800c <TIM_Base_SetConfig+0x128>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d007      	beq.n	8007fdc <TIM_Base_SetConfig+0xf8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a10      	ldr	r2, [pc, #64]	@ (8008010 <TIM_Base_SetConfig+0x12c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d003      	beq.n	8007fdc <TIM_Base_SetConfig+0xf8>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008014 <TIM_Base_SetConfig+0x130>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d103      	bne.n	8007fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	615a      	str	r2, [r3, #20]
}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	40012c00 	.word	0x40012c00
 8007ffc:	40000400 	.word	0x40000400
 8008000:	40000800 	.word	0x40000800
 8008004:	40000c00 	.word	0x40000c00
 8008008:	40013400 	.word	0x40013400
 800800c:	40014000 	.word	0x40014000
 8008010:	40014400 	.word	0x40014400
 8008014:	40014800 	.word	0x40014800

08008018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f023 0201 	bic.w	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f023 0302 	bic.w	r3, r3, #2
 8008064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a2c      	ldr	r2, [pc, #176]	@ (8008124 <TIM_OC1_SetConfig+0x10c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00f      	beq.n	8008098 <TIM_OC1_SetConfig+0x80>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a2b      	ldr	r2, [pc, #172]	@ (8008128 <TIM_OC1_SetConfig+0x110>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00b      	beq.n	8008098 <TIM_OC1_SetConfig+0x80>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a2a      	ldr	r2, [pc, #168]	@ (800812c <TIM_OC1_SetConfig+0x114>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d007      	beq.n	8008098 <TIM_OC1_SetConfig+0x80>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a29      	ldr	r2, [pc, #164]	@ (8008130 <TIM_OC1_SetConfig+0x118>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC1_SetConfig+0x80>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a28      	ldr	r2, [pc, #160]	@ (8008134 <TIM_OC1_SetConfig+0x11c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d10c      	bne.n	80080b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0308 	bic.w	r3, r3, #8
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 0304 	bic.w	r3, r3, #4
 80080b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008124 <TIM_OC1_SetConfig+0x10c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00f      	beq.n	80080da <TIM_OC1_SetConfig+0xc2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008128 <TIM_OC1_SetConfig+0x110>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00b      	beq.n	80080da <TIM_OC1_SetConfig+0xc2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a19      	ldr	r2, [pc, #100]	@ (800812c <TIM_OC1_SetConfig+0x114>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d007      	beq.n	80080da <TIM_OC1_SetConfig+0xc2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a18      	ldr	r2, [pc, #96]	@ (8008130 <TIM_OC1_SetConfig+0x118>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d003      	beq.n	80080da <TIM_OC1_SetConfig+0xc2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a17      	ldr	r2, [pc, #92]	@ (8008134 <TIM_OC1_SetConfig+0x11c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d111      	bne.n	80080fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	621a      	str	r2, [r3, #32]
}
 8008118:	bf00      	nop
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	40012c00 	.word	0x40012c00
 8008128:	40013400 	.word	0x40013400
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400
 8008134:	40014800 	.word	0x40014800

08008138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f023 0210 	bic.w	r2, r3, #16
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f023 0320 	bic.w	r3, r3, #32
 8008186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a28      	ldr	r2, [pc, #160]	@ (8008238 <TIM_OC2_SetConfig+0x100>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d003      	beq.n	80081a4 <TIM_OC2_SetConfig+0x6c>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a27      	ldr	r2, [pc, #156]	@ (800823c <TIM_OC2_SetConfig+0x104>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d10d      	bne.n	80081c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008238 <TIM_OC2_SetConfig+0x100>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00f      	beq.n	80081e8 <TIM_OC2_SetConfig+0xb0>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a1c      	ldr	r2, [pc, #112]	@ (800823c <TIM_OC2_SetConfig+0x104>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00b      	beq.n	80081e8 <TIM_OC2_SetConfig+0xb0>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008240 <TIM_OC2_SetConfig+0x108>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d007      	beq.n	80081e8 <TIM_OC2_SetConfig+0xb0>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a1a      	ldr	r2, [pc, #104]	@ (8008244 <TIM_OC2_SetConfig+0x10c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d003      	beq.n	80081e8 <TIM_OC2_SetConfig+0xb0>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a19      	ldr	r2, [pc, #100]	@ (8008248 <TIM_OC2_SetConfig+0x110>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d113      	bne.n	8008210 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40013400 	.word	0x40013400
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800

0800824c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800827a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a27      	ldr	r2, [pc, #156]	@ (8008348 <TIM_OC3_SetConfig+0xfc>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_OC3_SetConfig+0x6a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a26      	ldr	r2, [pc, #152]	@ (800834c <TIM_OC3_SetConfig+0x100>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d10d      	bne.n	80082d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008348 <TIM_OC3_SetConfig+0xfc>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00f      	beq.n	80082fa <TIM_OC3_SetConfig+0xae>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a1b      	ldr	r2, [pc, #108]	@ (800834c <TIM_OC3_SetConfig+0x100>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00b      	beq.n	80082fa <TIM_OC3_SetConfig+0xae>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008350 <TIM_OC3_SetConfig+0x104>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d007      	beq.n	80082fa <TIM_OC3_SetConfig+0xae>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a19      	ldr	r2, [pc, #100]	@ (8008354 <TIM_OC3_SetConfig+0x108>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d003      	beq.n	80082fa <TIM_OC3_SetConfig+0xae>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a18      	ldr	r2, [pc, #96]	@ (8008358 <TIM_OC3_SetConfig+0x10c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d113      	bne.n	8008322 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	621a      	str	r2, [r3, #32]
}
 800833c:	bf00      	nop
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	40012c00 	.word	0x40012c00
 800834c:	40013400 	.word	0x40013400
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400
 8008358:	40014800 	.word	0x40014800

0800835c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800838a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800838e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	021b      	lsls	r3, r3, #8
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	031b      	lsls	r3, r3, #12
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a18      	ldr	r2, [pc, #96]	@ (800841c <TIM_OC4_SetConfig+0xc0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00f      	beq.n	80083e0 <TIM_OC4_SetConfig+0x84>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a17      	ldr	r2, [pc, #92]	@ (8008420 <TIM_OC4_SetConfig+0xc4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_OC4_SetConfig+0x84>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a16      	ldr	r2, [pc, #88]	@ (8008424 <TIM_OC4_SetConfig+0xc8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_OC4_SetConfig+0x84>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <TIM_OC4_SetConfig+0xcc>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC4_SetConfig+0x84>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a14      	ldr	r2, [pc, #80]	@ (800842c <TIM_OC4_SetConfig+0xd0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d109      	bne.n	80083f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	019b      	lsls	r3, r3, #6
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40012c00 	.word	0x40012c00
 8008420:	40013400 	.word	0x40013400
 8008424:	40014000 	.word	0x40014000
 8008428:	40014400 	.word	0x40014400
 800842c:	40014800 	.word	0x40014800

08008430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800845e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008474:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	041b      	lsls	r3, r3, #16
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a17      	ldr	r2, [pc, #92]	@ (80084e4 <TIM_OC5_SetConfig+0xb4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00f      	beq.n	80084aa <TIM_OC5_SetConfig+0x7a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a16      	ldr	r2, [pc, #88]	@ (80084e8 <TIM_OC5_SetConfig+0xb8>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00b      	beq.n	80084aa <TIM_OC5_SetConfig+0x7a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a15      	ldr	r2, [pc, #84]	@ (80084ec <TIM_OC5_SetConfig+0xbc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d007      	beq.n	80084aa <TIM_OC5_SetConfig+0x7a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a14      	ldr	r2, [pc, #80]	@ (80084f0 <TIM_OC5_SetConfig+0xc0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d003      	beq.n	80084aa <TIM_OC5_SetConfig+0x7a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a13      	ldr	r2, [pc, #76]	@ (80084f4 <TIM_OC5_SetConfig+0xc4>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d109      	bne.n	80084be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	621a      	str	r2, [r3, #32]
}
 80084d8:	bf00      	nop
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800

080084f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800852a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800853e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	051b      	lsls	r3, r3, #20
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a18      	ldr	r2, [pc, #96]	@ (80085b0 <TIM_OC6_SetConfig+0xb8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00f      	beq.n	8008574 <TIM_OC6_SetConfig+0x7c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a17      	ldr	r2, [pc, #92]	@ (80085b4 <TIM_OC6_SetConfig+0xbc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00b      	beq.n	8008574 <TIM_OC6_SetConfig+0x7c>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a16      	ldr	r2, [pc, #88]	@ (80085b8 <TIM_OC6_SetConfig+0xc0>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d007      	beq.n	8008574 <TIM_OC6_SetConfig+0x7c>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a15      	ldr	r2, [pc, #84]	@ (80085bc <TIM_OC6_SetConfig+0xc4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d003      	beq.n	8008574 <TIM_OC6_SetConfig+0x7c>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a14      	ldr	r2, [pc, #80]	@ (80085c0 <TIM_OC6_SetConfig+0xc8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d109      	bne.n	8008588 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800857a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	029b      	lsls	r3, r3, #10
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	621a      	str	r2, [r3, #32]
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	40012c00 	.word	0x40012c00
 80085b4:	40013400 	.word	0x40013400
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800

080085c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e068      	b.n	80086ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a2e      	ldr	r2, [pc, #184]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a2d      	ldr	r2, [pc, #180]	@ (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d108      	bne.n	8008622 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008616:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008628:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1e      	ldr	r2, [pc, #120]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01d      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864e:	d018      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a1b      	ldr	r2, [pc, #108]	@ (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d013      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1a      	ldr	r2, [pc, #104]	@ (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00e      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a18      	ldr	r2, [pc, #96]	@ (80086cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a13      	ldr	r2, [pc, #76]	@ (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d004      	beq.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a14      	ldr	r2, [pc, #80]	@ (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d10c      	bne.n	800869c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4313      	orrs	r3, r2
 8008692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40012c00 	.word	0x40012c00
 80086c0:	40013400 	.word	0x40013400
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	40000c00 	.word	0x40000c00
 80086d0:	40014000 	.word	0x40014000

080086d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e065      	b.n	80087bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	4313      	orrs	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	041b      	lsls	r3, r3, #16
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a16      	ldr	r2, [pc, #88]	@ (80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d004      	beq.n	800877e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a14      	ldr	r2, [pc, #80]	@ (80087cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d115      	bne.n	80087aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008788:	051b      	lsls	r3, r3, #20
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40013400 	.word	0x40013400

080087d0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80087d0:	b480      	push	{r7}
 80087d2:	b08b      	sub	sp, #44	@ 0x2c
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_TIMEx_ConfigBreakInput+0x20>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e0af      	b.n	8008950 <HAL_TIMEx_ConfigBreakInput+0x180>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	2b07      	cmp	r3, #7
 8008800:	d83a      	bhi.n	8008878 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8008802:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008829 	.word	0x08008829
 800880c:	0800883d 	.word	0x0800883d
 8008810:	08008879 	.word	0x08008879
 8008814:	08008851 	.word	0x08008851
 8008818:	08008879 	.word	0x08008879
 800881c:	08008879 	.word	0x08008879
 8008820:	08008879 	.word	0x08008879
 8008824:	08008865 	.word	0x08008865
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8008828:	2301      	movs	r3, #1
 800882a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8008830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008834:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8008836:	2309      	movs	r3, #9
 8008838:	613b      	str	r3, [r7, #16]
      break;
 800883a:	e026      	b.n	800888a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800883c:	2302      	movs	r3, #2
 800883e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8008840:	2301      	movs	r3, #1
 8008842:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8008844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008848:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800884a:	230a      	movs	r3, #10
 800884c:	613b      	str	r3, [r7, #16]
      break;
 800884e:	e01c      	b.n	800888a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8008850:	2304      	movs	r3, #4
 8008852:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008854:	2302      	movs	r3, #2
 8008856:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800885c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800885e:	230b      	movs	r3, #11
 8008860:	613b      	str	r3, [r7, #16]
      break;
 8008862:	e012      	b.n	800888a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008868:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800886a:	2308      	movs	r3, #8
 800886c:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	613b      	str	r3, [r7, #16]
      break;
 8008876:	e008      	b.n	800888a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
      break;
 8008888:	bf00      	nop
    }
  }

  switch (BreakInput)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d003      	beq.n	8008898 <HAL_TIMEx_ConfigBreakInput+0xc8>
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d029      	beq.n	80088ea <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008896:	e051      	b.n	800893c <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800889e:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	43db      	mvns	r3, r3
 80088a4:	6a3a      	ldr	r2, [r7, #32]
 80088a6:	4013      	ands	r3, r2
 80088a8:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	409a      	lsls	r2, r3
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4013      	ands	r3, r2
 80088b6:	6a3a      	ldr	r2, [r7, #32]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d00d      	beq.n	80088e0 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	43db      	mvns	r3, r3
 80088c8:	6a3a      	ldr	r2, [r7, #32]
 80088ca:	4013      	ands	r3, r2
 80088cc:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	409a      	lsls	r2, r3
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	4013      	ands	r3, r2
 80088da:	6a3a      	ldr	r2, [r7, #32]
 80088dc:	4313      	orrs	r3, r2
 80088de:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6a3a      	ldr	r2, [r7, #32]
 80088e6:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 80088e8:	e02c      	b.n	8008944 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088f0:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	43db      	mvns	r3, r3
 80088f6:	6a3a      	ldr	r2, [r7, #32]
 80088f8:	4013      	ands	r3, r2
 80088fa:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	409a      	lsls	r2, r3
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4013      	ands	r3, r2
 8008908:	6a3a      	ldr	r2, [r7, #32]
 800890a:	4313      	orrs	r3, r2
 800890c:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b08      	cmp	r3, #8
 8008914:	d00d      	beq.n	8008932 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	43db      	mvns	r3, r3
 800891a:	6a3a      	ldr	r2, [r7, #32]
 800891c:	4013      	ands	r3, r2
 800891e:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	409a      	lsls	r2, r3
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	4013      	ands	r3, r2
 800892c:	6a3a      	ldr	r2, [r7, #32]
 800892e:	4313      	orrs	r3, r2
 8008930:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6a3a      	ldr	r2, [r7, #32]
 8008938:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800893a:	e003      	b.n	8008944 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8008942:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800894c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008950:	4618      	mov	r0, r3
 8008952:	372c      	adds	r7, #44	@ 0x2c
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e042      	b.n	80089f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7f9 f857 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2224      	movs	r2, #36	@ 0x24
 800898a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0201 	bic.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fb24 	bl	8008ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f825 	bl	80089fc <UART_SetConfig>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e01b      	b.n	80089f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fba3 	bl	8009138 <UART_CheckIdleState>
 80089f2:	4603      	mov	r3, r0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a00:	b08c      	sub	sp, #48	@ 0x30
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	4baa      	ldr	r3, [pc, #680]	@ (8008cd4 <UART_SetConfig+0x2d8>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a9f      	ldr	r2, [pc, #636]	@ (8008cd8 <UART_SetConfig+0x2dc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d004      	beq.n	8008a68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a64:	4313      	orrs	r3, r2
 8008a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008a72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	6812      	ldr	r2, [r2, #0]
 8008a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a7c:	430b      	orrs	r3, r1
 8008a7e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	f023 010f 	bic.w	r1, r3, #15
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a90      	ldr	r2, [pc, #576]	@ (8008cdc <UART_SetConfig+0x2e0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d125      	bne.n	8008aec <UART_SetConfig+0xf0>
 8008aa0:	4b8f      	ldr	r3, [pc, #572]	@ (8008ce0 <UART_SetConfig+0x2e4>)
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d81a      	bhi.n	8008ae4 <UART_SetConfig+0xe8>
 8008aae:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab4 <UART_SetConfig+0xb8>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008ac5 	.word	0x08008ac5
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008add 	.word	0x08008add
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aca:	e116      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008acc:	2302      	movs	r3, #2
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ad2:	e112      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ada:	e10e      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008adc:	2308      	movs	r3, #8
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ae2:	e10a      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aea:	e106      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a7c      	ldr	r2, [pc, #496]	@ (8008ce4 <UART_SetConfig+0x2e8>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d138      	bne.n	8008b68 <UART_SetConfig+0x16c>
 8008af6:	4b7a      	ldr	r3, [pc, #488]	@ (8008ce0 <UART_SetConfig+0x2e4>)
 8008af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afc:	f003 030c 	and.w	r3, r3, #12
 8008b00:	2b0c      	cmp	r3, #12
 8008b02:	d82d      	bhi.n	8008b60 <UART_SetConfig+0x164>
 8008b04:	a201      	add	r2, pc, #4	@ (adr r2, 8008b0c <UART_SetConfig+0x110>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b41 	.word	0x08008b41
 8008b10:	08008b61 	.word	0x08008b61
 8008b14:	08008b61 	.word	0x08008b61
 8008b18:	08008b61 	.word	0x08008b61
 8008b1c:	08008b51 	.word	0x08008b51
 8008b20:	08008b61 	.word	0x08008b61
 8008b24:	08008b61 	.word	0x08008b61
 8008b28:	08008b61 	.word	0x08008b61
 8008b2c:	08008b49 	.word	0x08008b49
 8008b30:	08008b61 	.word	0x08008b61
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	08008b61 	.word	0x08008b61
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	2300      	movs	r3, #0
 8008b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b46:	e0d8      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b4e:	e0d4      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b56:	e0d0      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5e:	e0cc      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b66:	e0c8      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ce8 <UART_SetConfig+0x2ec>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d125      	bne.n	8008bbe <UART_SetConfig+0x1c2>
 8008b72:	4b5b      	ldr	r3, [pc, #364]	@ (8008ce0 <UART_SetConfig+0x2e4>)
 8008b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008b7c:	2b30      	cmp	r3, #48	@ 0x30
 8008b7e:	d016      	beq.n	8008bae <UART_SetConfig+0x1b2>
 8008b80:	2b30      	cmp	r3, #48	@ 0x30
 8008b82:	d818      	bhi.n	8008bb6 <UART_SetConfig+0x1ba>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d00a      	beq.n	8008b9e <UART_SetConfig+0x1a2>
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d814      	bhi.n	8008bb6 <UART_SetConfig+0x1ba>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <UART_SetConfig+0x19a>
 8008b90:	2b10      	cmp	r3, #16
 8008b92:	d008      	beq.n	8008ba6 <UART_SetConfig+0x1aa>
 8008b94:	e00f      	b.n	8008bb6 <UART_SetConfig+0x1ba>
 8008b96:	2300      	movs	r3, #0
 8008b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b9c:	e0ad      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ba4:	e0a9      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bac:	e0a5      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008bae:	2308      	movs	r3, #8
 8008bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb4:	e0a1      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008bb6:	2310      	movs	r3, #16
 8008bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bbc:	e09d      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a4a      	ldr	r2, [pc, #296]	@ (8008cec <UART_SetConfig+0x2f0>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d125      	bne.n	8008c14 <UART_SetConfig+0x218>
 8008bc8:	4b45      	ldr	r3, [pc, #276]	@ (8008ce0 <UART_SetConfig+0x2e4>)
 8008bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bd4:	d016      	beq.n	8008c04 <UART_SetConfig+0x208>
 8008bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bd8:	d818      	bhi.n	8008c0c <UART_SetConfig+0x210>
 8008bda:	2b80      	cmp	r3, #128	@ 0x80
 8008bdc:	d00a      	beq.n	8008bf4 <UART_SetConfig+0x1f8>
 8008bde:	2b80      	cmp	r3, #128	@ 0x80
 8008be0:	d814      	bhi.n	8008c0c <UART_SetConfig+0x210>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <UART_SetConfig+0x1f0>
 8008be6:	2b40      	cmp	r3, #64	@ 0x40
 8008be8:	d008      	beq.n	8008bfc <UART_SetConfig+0x200>
 8008bea:	e00f      	b.n	8008c0c <UART_SetConfig+0x210>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bf2:	e082      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bfa:	e07e      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c02:	e07a      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	e076      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c12:	e072      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a35      	ldr	r2, [pc, #212]	@ (8008cf0 <UART_SetConfig+0x2f4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d12a      	bne.n	8008c74 <UART_SetConfig+0x278>
 8008c1e:	4b30      	ldr	r3, [pc, #192]	@ (8008ce0 <UART_SetConfig+0x2e4>)
 8008c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c2c:	d01a      	beq.n	8008c64 <UART_SetConfig+0x268>
 8008c2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c32:	d81b      	bhi.n	8008c6c <UART_SetConfig+0x270>
 8008c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c38:	d00c      	beq.n	8008c54 <UART_SetConfig+0x258>
 8008c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c3e:	d815      	bhi.n	8008c6c <UART_SetConfig+0x270>
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <UART_SetConfig+0x250>
 8008c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c48:	d008      	beq.n	8008c5c <UART_SetConfig+0x260>
 8008c4a:	e00f      	b.n	8008c6c <UART_SetConfig+0x270>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c52:	e052      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c54:	2302      	movs	r3, #2
 8008c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c5a:	e04e      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c62:	e04a      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c6a:	e046      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c72:	e042      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a17      	ldr	r2, [pc, #92]	@ (8008cd8 <UART_SetConfig+0x2dc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d13a      	bne.n	8008cf4 <UART_SetConfig+0x2f8>
 8008c7e:	4b18      	ldr	r3, [pc, #96]	@ (8008ce0 <UART_SetConfig+0x2e4>)
 8008c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c8c:	d01a      	beq.n	8008cc4 <UART_SetConfig+0x2c8>
 8008c8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008c92:	d81b      	bhi.n	8008ccc <UART_SetConfig+0x2d0>
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c98:	d00c      	beq.n	8008cb4 <UART_SetConfig+0x2b8>
 8008c9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c9e:	d815      	bhi.n	8008ccc <UART_SetConfig+0x2d0>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <UART_SetConfig+0x2b0>
 8008ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ca8:	d008      	beq.n	8008cbc <UART_SetConfig+0x2c0>
 8008caa:	e00f      	b.n	8008ccc <UART_SetConfig+0x2d0>
 8008cac:	2300      	movs	r3, #0
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb2:	e022      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cba:	e01e      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008cbc:	2304      	movs	r3, #4
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cc2:	e01a      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cca:	e016      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cd2:	e012      	b.n	8008cfa <UART_SetConfig+0x2fe>
 8008cd4:	cfff69f3 	.word	0xcfff69f3
 8008cd8:	40008000 	.word	0x40008000
 8008cdc:	40013800 	.word	0x40013800
 8008ce0:	40021000 	.word	0x40021000
 8008ce4:	40004400 	.word	0x40004400
 8008ce8:	40004800 	.word	0x40004800
 8008cec:	40004c00 	.word	0x40004c00
 8008cf0:	40005000 	.word	0x40005000
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4aae      	ldr	r2, [pc, #696]	@ (8008fb8 <UART_SetConfig+0x5bc>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	f040 8097 	bne.w	8008e34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d823      	bhi.n	8008d56 <UART_SetConfig+0x35a>
 8008d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <UART_SetConfig+0x318>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d57 	.word	0x08008d57
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d57 	.word	0x08008d57
 8008d24:	08008d47 	.word	0x08008d47
 8008d28:	08008d57 	.word	0x08008d57
 8008d2c:	08008d57 	.word	0x08008d57
 8008d30:	08008d57 	.word	0x08008d57
 8008d34:	08008d4f 	.word	0x08008d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d38:	f7fc fbf4 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8008d3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d3e:	e010      	b.n	8008d62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d40:	4b9e      	ldr	r3, [pc, #632]	@ (8008fbc <UART_SetConfig+0x5c0>)
 8008d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d44:	e00d      	b.n	8008d62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d46:	f7fc fb55 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8008d4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d4c:	e009      	b.n	8008d62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d54:	e005      	b.n	8008d62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8130 	beq.w	8008fca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6e:	4a94      	ldr	r2, [pc, #592]	@ (8008fc0 <UART_SetConfig+0x5c4>)
 8008d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d74:	461a      	mov	r2, r3
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	4413      	add	r3, r2
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d305      	bcc.n	8008d9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d903      	bls.n	8008da2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008da0:	e113      	b.n	8008fca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	2200      	movs	r2, #0
 8008da6:	60bb      	str	r3, [r7, #8]
 8008da8:	60fa      	str	r2, [r7, #12]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dae:	4a84      	ldr	r2, [pc, #528]	@ (8008fc0 <UART_SetConfig+0x5c4>)
 8008db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2200      	movs	r2, #0
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dc4:	f7f7 fa1a 	bl	80001fc <__aeabi_uldivmod>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4619      	mov	r1, r3
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	020b      	lsls	r3, r1, #8
 8008dda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dde:	0202      	lsls	r2, r0, #8
 8008de0:	6979      	ldr	r1, [r7, #20]
 8008de2:	6849      	ldr	r1, [r1, #4]
 8008de4:	0849      	lsrs	r1, r1, #1
 8008de6:	2000      	movs	r0, #0
 8008de8:	460c      	mov	r4, r1
 8008dea:	4605      	mov	r5, r0
 8008dec:	eb12 0804 	adds.w	r8, r2, r4
 8008df0:	eb43 0905 	adc.w	r9, r3, r5
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	469a      	mov	sl, r3
 8008dfc:	4693      	mov	fp, r2
 8008dfe:	4652      	mov	r2, sl
 8008e00:	465b      	mov	r3, fp
 8008e02:	4640      	mov	r0, r8
 8008e04:	4649      	mov	r1, r9
 8008e06:	f7f7 f9f9 	bl	80001fc <__aeabi_uldivmod>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4613      	mov	r3, r2
 8008e10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e18:	d308      	bcc.n	8008e2c <UART_SetConfig+0x430>
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e20:	d204      	bcs.n	8008e2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	60da      	str	r2, [r3, #12]
 8008e2a:	e0ce      	b.n	8008fca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e32:	e0ca      	b.n	8008fca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e3c:	d166      	bne.n	8008f0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	d827      	bhi.n	8008e96 <UART_SetConfig+0x49a>
 8008e46:	a201      	add	r2, pc, #4	@ (adr r2, 8008e4c <UART_SetConfig+0x450>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008e71 	.word	0x08008e71
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e81 	.word	0x08008e81
 8008e58:	08008e97 	.word	0x08008e97
 8008e5c:	08008e87 	.word	0x08008e87
 8008e60:	08008e97 	.word	0x08008e97
 8008e64:	08008e97 	.word	0x08008e97
 8008e68:	08008e97 	.word	0x08008e97
 8008e6c:	08008e8f 	.word	0x08008e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e70:	f7fc fb58 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8008e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e76:	e014      	b.n	8008ea2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e78:	f7fc fb6a 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8008e7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e7e:	e010      	b.n	8008ea2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e80:	4b4e      	ldr	r3, [pc, #312]	@ (8008fbc <UART_SetConfig+0x5c0>)
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e84:	e00d      	b.n	8008ea2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e86:	f7fc fab5 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8008e8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e8c:	e009      	b.n	8008ea2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e94:	e005      	b.n	8008ea2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8090 	beq.w	8008fca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eae:	4a44      	ldr	r2, [pc, #272]	@ (8008fc0 <UART_SetConfig+0x5c4>)
 8008eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ebc:	005a      	lsls	r2, r3, #1
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	085b      	lsrs	r3, r3, #1
 8008ec4:	441a      	add	r2, r3
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ece:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	2b0f      	cmp	r3, #15
 8008ed4:	d916      	bls.n	8008f04 <UART_SetConfig+0x508>
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008edc:	d212      	bcs.n	8008f04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f023 030f 	bic.w	r3, r3, #15
 8008ee6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	085b      	lsrs	r3, r3, #1
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	8bfb      	ldrh	r3, [r7, #30]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	8bfa      	ldrh	r2, [r7, #30]
 8008f00:	60da      	str	r2, [r3, #12]
 8008f02:	e062      	b.n	8008fca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f0a:	e05e      	b.n	8008fca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d828      	bhi.n	8008f66 <UART_SetConfig+0x56a>
 8008f14:	a201      	add	r2, pc, #4	@ (adr r2, 8008f1c <UART_SetConfig+0x520>)
 8008f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1a:	bf00      	nop
 8008f1c:	08008f41 	.word	0x08008f41
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	08008f67 	.word	0x08008f67
 8008f2c:	08008f57 	.word	0x08008f57
 8008f30:	08008f67 	.word	0x08008f67
 8008f34:	08008f67 	.word	0x08008f67
 8008f38:	08008f67 	.word	0x08008f67
 8008f3c:	08008f5f 	.word	0x08008f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f40:	f7fc faf0 	bl	8005524 <HAL_RCC_GetPCLK1Freq>
 8008f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f46:	e014      	b.n	8008f72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f48:	f7fc fb02 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8008f4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f4e:	e010      	b.n	8008f72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f50:	4b1a      	ldr	r3, [pc, #104]	@ (8008fbc <UART_SetConfig+0x5c0>)
 8008f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f54:	e00d      	b.n	8008f72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f56:	f7fc fa4d 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 8008f5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f5c:	e009      	b.n	8008f72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f64:	e005      	b.n	8008f72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f70:	bf00      	nop
    }

    if (pclk != 0U)
 8008f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d028      	beq.n	8008fca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	4a10      	ldr	r2, [pc, #64]	@ (8008fc0 <UART_SetConfig+0x5c4>)
 8008f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f86:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	085b      	lsrs	r3, r3, #1
 8008f90:	441a      	add	r2, r3
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f9a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	2b0f      	cmp	r3, #15
 8008fa0:	d910      	bls.n	8008fc4 <UART_SetConfig+0x5c8>
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa8:	d20c      	bcs.n	8008fc4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60da      	str	r2, [r3, #12]
 8008fb4:	e009      	b.n	8008fca <UART_SetConfig+0x5ce>
 8008fb6:	bf00      	nop
 8008fb8:	40008000 	.word	0x40008000
 8008fbc:	00f42400 	.word	0x00f42400
 8008fc0:	080096e4 	.word	0x080096e4
      }
      else
      {
        ret = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008fe6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3730      	adds	r7, #48	@ 0x30
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d01a      	beq.n	800910a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090f2:	d10a      	bne.n	800910a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	605a      	str	r2, [r3, #4]
  }
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b098      	sub	sp, #96	@ 0x60
 800913c:	af02      	add	r7, sp, #8
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009148:	f7f9 f928 	bl	800239c <HAL_GetTick>
 800914c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b08      	cmp	r3, #8
 800915a:	d12f      	bne.n	80091bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800915c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009164:	2200      	movs	r2, #0
 8009166:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f88e 	bl	800928c <UART_WaitOnFlagUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d022      	beq.n	80091bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800918a:	653b      	str	r3, [r7, #80]	@ 0x50
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009194:	647b      	str	r3, [r7, #68]	@ 0x44
 8009196:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800919a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e6      	bne.n	8009176 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e063      	b.n	8009284 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d149      	bne.n	800925e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091d2:	2200      	movs	r2, #0
 80091d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f857 	bl	800928c <UART_WaitOnFlagUntilTimeout>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d03c      	beq.n	800925e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	623b      	str	r3, [r7, #32]
   return(result);
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009202:	633b      	str	r3, [r7, #48]	@ 0x30
 8009204:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e6      	bne.n	80091e4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3308      	adds	r3, #8
 800921c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	60fb      	str	r3, [r7, #12]
   return(result);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f023 0301 	bic.w	r3, r3, #1
 800922c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009236:	61fa      	str	r2, [r7, #28]
 8009238:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	69b9      	ldr	r1, [r7, #24]
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	617b      	str	r3, [r7, #20]
   return(result);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e5      	bne.n	8009216 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e012      	b.n	8009284 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3758      	adds	r7, #88	@ 0x58
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	4613      	mov	r3, r2
 800929a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800929c:	e049      	b.n	8009332 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a4:	d045      	beq.n	8009332 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092a6:	f7f9 f879 	bl	800239c <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d302      	bcc.n	80092bc <UART_WaitOnFlagUntilTimeout+0x30>
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e048      	b.n	8009352 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d031      	beq.n	8009332 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	f003 0308 	and.w	r3, r3, #8
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d110      	bne.n	80092fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2208      	movs	r2, #8
 80092e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 f838 	bl	800935a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2208      	movs	r2, #8
 80092ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e029      	b.n	8009352 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800930c:	d111      	bne.n	8009332 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f81e 	bl	800935a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2220      	movs	r2, #32
 8009322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e00f      	b.n	8009352 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69da      	ldr	r2, [r3, #28]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4013      	ands	r3, r2
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	429a      	cmp	r2, r3
 8009340:	bf0c      	ite	eq
 8009342:	2301      	moveq	r3, #1
 8009344:	2300      	movne	r3, #0
 8009346:	b2db      	uxtb	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	429a      	cmp	r2, r3
 800934e:	d0a6      	beq.n	800929e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800935a:	b480      	push	{r7}
 800935c:	b095      	sub	sp, #84	@ 0x54
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009380:	643b      	str	r3, [r7, #64]	@ 0x40
 8009382:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3308      	adds	r3, #8
 800939a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093aa:	f023 0301 	bic.w	r3, r3, #1
 80093ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e3      	bne.n	8009394 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d118      	bne.n	8009406 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f023 0310 	bic.w	r3, r3, #16
 80093e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093f2:	61bb      	str	r3, [r7, #24]
 80093f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6979      	ldr	r1, [r7, #20]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e6      	bne.n	80093d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800941a:	bf00      	nop
 800941c:	3754      	adds	r7, #84	@ 0x54
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009434:	2b01      	cmp	r3, #1
 8009436:	d101      	bne.n	800943c <HAL_UARTEx_DisableFifoMode+0x16>
 8009438:	2302      	movs	r3, #2
 800943a:	e027      	b.n	800948c <HAL_UARTEx_DisableFifoMode+0x66>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2224      	movs	r2, #36	@ 0x24
 8009448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0201 	bic.w	r2, r2, #1
 8009462:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800946a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e02d      	b.n	800950c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2224      	movs	r2, #36	@ 0x24
 80094bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0201 	bic.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f84f 	bl	8009590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009528:	2302      	movs	r3, #2
 800952a:	e02d      	b.n	8009588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2224      	movs	r2, #36	@ 0x24
 8009538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f811 	bl	8009590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800959c:	2b00      	cmp	r3, #0
 800959e:	d108      	bne.n	80095b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095b0:	e031      	b.n	8009616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095b2:	2308      	movs	r3, #8
 80095b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095b6:	2308      	movs	r3, #8
 80095b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	0e5b      	lsrs	r3, r3, #25
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	0f5b      	lsrs	r3, r3, #29
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0307 	and.w	r3, r3, #7
 80095d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	7b3a      	ldrb	r2, [r7, #12]
 80095de:	4911      	ldr	r1, [pc, #68]	@ (8009624 <UARTEx_SetNbDataToProcess+0x94>)
 80095e0:	5c8a      	ldrb	r2, [r1, r2]
 80095e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095e6:	7b3a      	ldrb	r2, [r7, #12]
 80095e8:	490f      	ldr	r1, [pc, #60]	@ (8009628 <UARTEx_SetNbDataToProcess+0x98>)
 80095ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	7b7a      	ldrb	r2, [r7, #13]
 80095fc:	4909      	ldr	r1, [pc, #36]	@ (8009624 <UARTEx_SetNbDataToProcess+0x94>)
 80095fe:	5c8a      	ldrb	r2, [r1, r2]
 8009600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009604:	7b7a      	ldrb	r2, [r7, #13]
 8009606:	4908      	ldr	r1, [pc, #32]	@ (8009628 <UARTEx_SetNbDataToProcess+0x98>)
 8009608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800960a:	fb93 f3f2 	sdiv	r3, r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	080096fc 	.word	0x080096fc
 8009628:	08009704 	.word	0x08009704

0800962c <memset>:
 800962c:	4402      	add	r2, r0
 800962e:	4603      	mov	r3, r0
 8009630:	4293      	cmp	r3, r2
 8009632:	d100      	bne.n	8009636 <memset+0xa>
 8009634:	4770      	bx	lr
 8009636:	f803 1b01 	strb.w	r1, [r3], #1
 800963a:	e7f9      	b.n	8009630 <memset+0x4>

0800963c <__libc_init_array>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	4d0d      	ldr	r5, [pc, #52]	@ (8009674 <__libc_init_array+0x38>)
 8009640:	4c0d      	ldr	r4, [pc, #52]	@ (8009678 <__libc_init_array+0x3c>)
 8009642:	1b64      	subs	r4, r4, r5
 8009644:	10a4      	asrs	r4, r4, #2
 8009646:	2600      	movs	r6, #0
 8009648:	42a6      	cmp	r6, r4
 800964a:	d109      	bne.n	8009660 <__libc_init_array+0x24>
 800964c:	4d0b      	ldr	r5, [pc, #44]	@ (800967c <__libc_init_array+0x40>)
 800964e:	4c0c      	ldr	r4, [pc, #48]	@ (8009680 <__libc_init_array+0x44>)
 8009650:	f000 f818 	bl	8009684 <_init>
 8009654:	1b64      	subs	r4, r4, r5
 8009656:	10a4      	asrs	r4, r4, #2
 8009658:	2600      	movs	r6, #0
 800965a:	42a6      	cmp	r6, r4
 800965c:	d105      	bne.n	800966a <__libc_init_array+0x2e>
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	f855 3b04 	ldr.w	r3, [r5], #4
 8009664:	4798      	blx	r3
 8009666:	3601      	adds	r6, #1
 8009668:	e7ee      	b.n	8009648 <__libc_init_array+0xc>
 800966a:	f855 3b04 	ldr.w	r3, [r5], #4
 800966e:	4798      	blx	r3
 8009670:	3601      	adds	r6, #1
 8009672:	e7f2      	b.n	800965a <__libc_init_array+0x1e>
 8009674:	08009714 	.word	0x08009714
 8009678:	08009714 	.word	0x08009714
 800967c:	08009714 	.word	0x08009714
 8009680:	08009718 	.word	0x08009718

08009684 <_init>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr

08009690 <_fini>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr


armband-all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800fd08  0800fd08  00010d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104e8  080104e8  00012220  2**0
                  CONTENTS
  4 .ARM          00000008  080104e8  080104e8  000114e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104f0  080104f0  00012220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104f0  080104f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104f4  080104f4  000114f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080104f8  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000220  08010718  00012220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  08010718  00012bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d253  00000000  00000000  00012250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042cc  00000000  00000000  0002f4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a2  00000000  00000000  00035330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026201  00000000  00000000  000368d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021663  00000000  00000000  0005cad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e378b  00000000  00000000  0007e136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001618c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d34  00000000  00000000  00161904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fcf0 	.word	0x0800fcf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800fcf0 	.word	0x0800fcf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <fix_msb_loss>:
 * exceed 286 m/s2
 * this is 100% fine for gravity vector
 * this is most likely fine for acc vector as no runner is
 * putting out 30g's while running
 */
uint16_t fix_msb_loss(uint16_t val){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	if ((val & 0xF000) == 0x7000) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8000ff4:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000ff8:	d105      	bne.n	8001006 <fix_msb_loss+0x22>
		val |= 0x8000;
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001004:	80fb      	strh	r3, [r7, #6]
	}
	return val;
 8001006:	88fb      	ldrh	r3, [r7, #6]
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <startup_IMU>:

uint8_t startup_IMU(I2C_HandleTypeDef *hi2c){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	// verify i2c is working properly by reading chip id
	read_to_buf(hi2c, 0x00, buf, 1);
 800101c:	f107 020c 	add.w	r2, r7, #12
 8001020:	2301      	movs	r3, #1
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f856 	bl	80010d6 <read_to_buf>
	if(buf[0] != 0xA0) {
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	2ba0      	cmp	r3, #160	@ 0xa0
 800102e:	d004      	beq.n	800103a <startup_IMU+0x26>
		printf("IMU ERROR: wrong/no chip ID returned\n\r");
 8001030:	480b      	ldr	r0, [pc, #44]	@ (8001060 <startup_IMU+0x4c>)
 8001032:	f00a fedd 	bl	800bdf0 <iprintf>
		return 1;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <startup_IMU+0x44>
	}
	printf("IMU success: chip ID returned\n\r");
 800103a:	480a      	ldr	r0, [pc, #40]	@ (8001064 <startup_IMU+0x50>)
 800103c:	f00a fed8 	bl	800bdf0 <iprintf>

	// put chip in configuration mode
	buf[0] = 0x3D;
 8001040:	233d      	movs	r3, #61	@ 0x3d
 8001042:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2202      	movs	r2, #2
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f825 	bl	80010a0 <transmit_buf>
	return 0;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	0800fd08 	.word	0x0800fd08
 8001064:	0800fd30 	.word	0x0800fd30

08001068 <init_IMU>:

uint8_t init_IMU(I2C_HandleTypeDef *hi2c){
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	if(startup_IMU(hi2c)) return 1;
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffcf 	bl	8001014 <startup_IMU>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <init_IMU+0x18>
 800107c:	2301      	movs	r3, #1
 800107e:	e00b      	b.n	8001098 <init_IMU+0x30>

	// put chip in IMU mode
	buf[0] = 0x3D;
 8001080:	233d      	movs	r3, #61	@ 0x3d
 8001082:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x08;
 8001084:	2308      	movs	r3, #8
 8001086:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2202      	movs	r2, #2
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f805 	bl	80010a0 <transmit_buf>
	return 0;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <transmit_buf>:
	buf[1] = buf[0];
	buf[0] = 0x3B;
	transmit_buf(hi2c, buf, 2);
}

uint8_t transmit_buf(I2C_HandleTypeDef *hi2c, uint8_t *buf, uint16_t bytes) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	4613      	mov	r3, r2
 80010ac:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, bytes, 1000);
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	2150      	movs	r1, #80	@ 0x50
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f004 fb7e 	bl	80057bc <HAL_I2C_Master_Transmit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f838 	bl	800113c <check_ret>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <read_to_buf>:

uint8_t read_to_buf(I2C_HandleTypeDef *hi2c, uint8_t subAddr, uint8_t *buf, uint16_t bytes){
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b088      	sub	sp, #32
 80010da:	af02      	add	r7, sp, #8
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	461a      	mov	r2, r3
 80010e2:	460b      	mov	r3, r1
 80010e4:	72fb      	strb	r3, [r7, #11]
 80010e6:	4613      	mov	r3, r2
 80010e8:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, &subAddr, 1, 1000);
 80010ea:	f107 020b 	add.w	r2, r7, #11
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2150      	movs	r1, #80	@ 0x50
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f004 fb5f 	bl	80057bc <HAL_I2C_Master_Transmit>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]
	if (!check_ret(ret)) return 0;
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f819 	bl	800113c <check_ret>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <read_to_buf+0x3e>
 8001110:	2300      	movs	r3, #0
 8001112:	e00f      	b.n	8001134 <read_to_buf+0x5e>
	ret = HAL_I2C_Master_Receive(hi2c, SAD_R, buf, bytes, 1000);
 8001114:	893b      	ldrh	r3, [r7, #8]
 8001116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	2151      	movs	r1, #81	@ 0x51
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f004 fc63 	bl	80059ec <HAL_I2C_Master_Receive>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f805 	bl	800113c <check_ret>
 8001132:	4603      	mov	r3, r0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <check_ret>:

uint8_t check_ret(HAL_StatusTypeDef ret) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK) {
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <check_ret+0x14>
		return 1;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <check_ret+0x16>
	} else {
		// TODO:
		// add more descriptive error
		//printf("i2c error!\n\r");
		return 0;
 8001150:	2300      	movs	r3, #0
	}
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <lin_acc_vec_raw>:

void lin_acc_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x28, buf, 6);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2306      	movs	r3, #6
 800116e:	2128      	movs	r1, #40	@ 0x28
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffb0 	bl	80010d6 <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 8001176:	7a3b      	ldrb	r3, [r7, #8]
 8001178:	b21a      	sxth	r2, r3
 800117a:	7a7b      	ldrb	r3, [r7, #9]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff2c 	bl	8000fe4 <fix_msb_loss>
 800118c:	4603      	mov	r3, r0
 800118e:	b21a      	sxth	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	b21a      	sxth	r2, r3
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff1d 	bl	8000fe4 <fix_msb_loss>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3302      	adds	r3, #2
 80011b2:	b212      	sxth	r2, r2
 80011b4:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 80011b6:	7b3b      	ldrb	r3, [r7, #12]
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff0c 	bl	8000fe4 <fix_msb_loss>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3304      	adds	r3, #4
 80011d4:	b212      	sxth	r2, r2
 80011d6:	801a      	strh	r2, [r3, #0]
	return;
 80011d8:	bf00      	nop
}
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <initPulseSensor>:
static bool first_beat = true;		// first beat bool
static bool second_beat = false; 	// second beat bool
static bool pulse = false; 		// pulse recognized bool
static int samples_since_last_beat = 0;

void initPulseSensor(ADC_HandleTypeDef *hadc_in) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <initPulseSensor+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000023c 	.word	0x2000023c

08001200 <updatePulseSensor>:

void updatePulseSensor(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	read_ADC();
 8001204:	f000 f804 	bl	8001210 <read_ADC>
	get_pulse();
 8001208:	f000 f834 	bl	8001274 <get_pulse>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <read_ADC>:

void read_ADC(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
	//uint32_t val;
	unsigned int val;

	HAL_ADC_Start(hadc);
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <read_ADC+0x54>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 f984 	bl	8004528 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 0xFFFFFFFF);
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <read_ADC+0x54>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f9e0 	bl	80045ee <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <read_ADC+0x54>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fa6a 	bl	800470c <HAL_ADC_GetValue>
 8001238:	6078      	str	r0, [r7, #4]
	signal = val * 3.3f / 4096.0f;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001268 <read_ADC+0x58>
 8001248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800124c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800126c <read_ADC+0x5c>
 8001250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <read_ADC+0x60>)
 8001256:	edc3 7a00 	vstr	s15, [r3]
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000023c 	.word	0x2000023c
 8001268:	40533333 	.word	0x40533333
 800126c:	45800000 	.word	0x45800000
 8001270:	200002bc 	.word	0x200002bc

08001274 <get_pulse>:

void get_pulse() {
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
	++samples_since_last_beat;
 800127a:	4b95      	ldr	r3, [pc, #596]	@ (80014d0 <get_pulse+0x25c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a93      	ldr	r2, [pc, #588]	@ (80014d0 <get_pulse+0x25c>)
 8001282:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_beat * SAMPLE_PERIOD;
 8001284:	4b92      	ldr	r3, [pc, #584]	@ (80014d0 <get_pulse+0x25c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2232      	movs	r2, #50	@ 0x32
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	603b      	str	r3, [r7, #0]
	if (signal < thresh && N > (IBI / 5) * 3) { // avoid dicrotic noise by waiting 3/5 of last IBI
 8001290:	4b90      	ldr	r3, [pc, #576]	@ (80014d4 <get_pulse+0x260>)
 8001292:	ed93 7a00 	vldr	s14, [r3]
 8001296:	4b90      	ldr	r3, [pc, #576]	@ (80014d8 <get_pulse+0x264>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	d51c      	bpl.n	80012e0 <get_pulse+0x6c>
 80012a6:	4b8d      	ldr	r3, [pc, #564]	@ (80014dc <get_pulse+0x268>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a8d      	ldr	r2, [pc, #564]	@ (80014e0 <get_pulse+0x26c>)
 80012ac:	fb82 1203 	smull	r1, r2, r2, r3
 80012b0:	1052      	asrs	r2, r2, #1
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dd0e      	ble.n	80012e0 <get_pulse+0x6c>
	    if (signal < trough_amp) {                        // T is the trough
 80012c2:	4b84      	ldr	r3, [pc, #528]	@ (80014d4 <get_pulse+0x260>)
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	4b86      	ldr	r3, [pc, #536]	@ (80014e4 <get_pulse+0x270>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	d503      	bpl.n	80012e0 <get_pulse+0x6c>
	      trough_amp = signal;                            // keep track of lowest point in pulse wave
 80012d8:	4b7e      	ldr	r3, [pc, #504]	@ (80014d4 <get_pulse+0x260>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a81      	ldr	r2, [pc, #516]	@ (80014e4 <get_pulse+0x270>)
 80012de:	6013      	str	r3, [r2, #0]
	    }
	  }

	  if (signal > thresh && signal > peak_amp) {       // thresh condition helps avoid noise
 80012e0:	4b7c      	ldr	r3, [pc, #496]	@ (80014d4 <get_pulse+0x260>)
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	4b7c      	ldr	r3, [pc, #496]	@ (80014d8 <get_pulse+0x264>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	dd0e      	ble.n	8001314 <get_pulse+0xa0>
 80012f6:	4b77      	ldr	r3, [pc, #476]	@ (80014d4 <get_pulse+0x260>)
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	4b7a      	ldr	r3, [pc, #488]	@ (80014e8 <get_pulse+0x274>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	dd03      	ble.n	8001314 <get_pulse+0xa0>
		  peak_amp = signal;                              // P is the peak
 800130c:	4b71      	ldr	r3, [pc, #452]	@ (80014d4 <get_pulse+0x260>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a75      	ldr	r2, [pc, #468]	@ (80014e8 <get_pulse+0x274>)
 8001312:	6013      	str	r3, [r2, #0]
	  }                                          // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  if (N > 250) {                             // avoid high frequency noise
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2bfa      	cmp	r3, #250	@ 0xfa
 8001318:	dd7d      	ble.n	8001416 <get_pulse+0x1a2>
	    if ( (signal > thresh) && (pulse == false) && (N > ((IBI / 5) * 3)) ) {
 800131a:	4b6e      	ldr	r3, [pc, #440]	@ (80014d4 <get_pulse+0x260>)
 800131c:	ed93 7a00 	vldr	s14, [r3]
 8001320:	4b6d      	ldr	r3, [pc, #436]	@ (80014d8 <get_pulse+0x264>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	dd72      	ble.n	8001416 <get_pulse+0x1a2>
 8001330:	4b6e      	ldr	r3, [pc, #440]	@ (80014ec <get_pulse+0x278>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f083 0301 	eor.w	r3, r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d06b      	beq.n	8001416 <get_pulse+0x1a2>
 800133e:	4b67      	ldr	r3, [pc, #412]	@ (80014dc <get_pulse+0x268>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a67      	ldr	r2, [pc, #412]	@ (80014e0 <get_pulse+0x26c>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1052      	asrs	r2, r2, #1
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad2      	subs	r2, r2, r3
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	dd5d      	ble.n	8001416 <get_pulse+0x1a2>
	      pulse = true;                             // set the Pulse flag when we think there is a pulse
 800135a:	4b64      	ldr	r3, [pc, #400]	@ (80014ec <get_pulse+0x278>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
	      IBI = N;    // measure time between beats in mS
 8001360:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <get_pulse+0x268>)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	6013      	str	r3, [r2, #0]
	      samples_since_last_beat = 0;
 8001366:	4b5a      	ldr	r3, [pc, #360]	@ (80014d0 <get_pulse+0x25c>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

	      if (second_beat) {                      // if this is the second beat, if secondBeat == TRUE
 800136c:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <get_pulse+0x27c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d011      	beq.n	8001398 <get_pulse+0x124>
	        second_beat = false;                    // clear secondBeat flag
 8001374:	4b5e      	ldr	r3, [pc, #376]	@ (80014f0 <get_pulse+0x27c>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	e008      	b.n	8001392 <get_pulse+0x11e>
	          rate[i] = IBI;
 8001380:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <get_pulse+0x268>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	495b      	ldr	r1, [pc, #364]	@ (80014f4 <get_pulse+0x280>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b1d      	cmp	r3, #29
 8001396:	ddf3      	ble.n	8001380 <get_pulse+0x10c>
	        }
	      }

	      if (first_beat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
 8001398:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <get_pulse+0x284>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <get_pulse+0x13a>
	    	first_beat = 0;                       // clear firstBeat flag
 80013a0:	4b55      	ldr	r3, [pc, #340]	@ (80014f8 <get_pulse+0x284>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
	    	second_beat = 1;                      // set the second beat flag
 80013a6:	4b52      	ldr	r3, [pc, #328]	@ (80014f0 <get_pulse+0x27c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
	        // IBI value is unreliable so discard it
	        return;
 80013ac:	e08b      	b.n	80014c6 <get_pulse+0x252>
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]

	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e012      	b.n	80013de <get_pulse+0x16a>
	        rate[i] = rate[i + 1];                // and drop the oldest IBI value
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a4d      	ldr	r2, [pc, #308]	@ (80014f4 <get_pulse+0x280>)
 80013be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013c2:	494c      	ldr	r1, [pc, #304]	@ (80014f4 <get_pulse+0x280>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
 80013ca:	4a4a      	ldr	r2, [pc, #296]	@ (80014f4 <get_pulse+0x280>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	4413      	add	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3301      	adds	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b1c      	cmp	r3, #28
 80013e2:	dde9      	ble.n	80013b8 <get_pulse+0x144>
	      }

	      rate[BUF_LENGTH - 1] = IBI;                          // add the latest IBI to the rate array
 80013e4:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <get_pulse+0x268>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a42      	ldr	r2, [pc, #264]	@ (80014f4 <get_pulse+0x280>)
 80013ea:	6753      	str	r3, [r2, #116]	@ 0x74
	      runningTotal += rate[BUF_LENGTH - 1];                // add the latest IBI to runningTotal
 80013ec:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <get_pulse+0x280>)
 80013ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
	      runningTotal /= BUF_LENGTH;                     // average the last 10 IBI values
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	4a40      	ldr	r2, [pc, #256]	@ (80014fc <get_pulse+0x288>)
 80013fa:	fb82 1203 	smull	r1, r2, r2, r3
 80013fe:	441a      	add	r2, r3
 8001400:	1112      	asrs	r2, r2, #4
 8001402:	17db      	asrs	r3, r3, #31
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	60bb      	str	r3, [r7, #8]
	      BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
 8001408:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001412:	4a3b      	ldr	r2, [pc, #236]	@ (8001500 <get_pulse+0x28c>)
 8001414:	6013      	str	r3, [r2, #0]
	      //fadeLevel = MAX_FADE_LEVEL;             // If we're fading, re-light that LED.
	    }
	  }

	  if (signal < thresh && pulse) {  // when the values are going down, the beat is over
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <get_pulse+0x260>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <get_pulse+0x264>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	d528      	bpl.n	800147e <get_pulse+0x20a>
 800142c:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <get_pulse+0x278>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d024      	beq.n	800147e <get_pulse+0x20a>
	    pulse = false;                         // reset the Pulse flag so we can do it again
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <get_pulse+0x278>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
	    amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 800143a:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <get_pulse+0x274>)
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <get_pulse+0x270>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <get_pulse+0x290>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
	    thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <get_pulse+0x290>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800145a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <get_pulse+0x270>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <get_pulse+0x264>)
 800146a:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <get_pulse+0x264>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <get_pulse+0x274>)
 8001474:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <get_pulse+0x264>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1a      	ldr	r2, [pc, #104]	@ (80014e4 <get_pulse+0x270>)
 800147c:	6013      	str	r3, [r2, #0]
	  }

	  if (N > 2500) {                          // if 2.5 seconds go by without a beat
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001484:	4293      	cmp	r3, r2
 8001486:	dd1e      	ble.n	80014c6 <get_pulse+0x252>
	    thresh = THRESH_DEFAULT;                // set thresh default
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <get_pulse+0x264>)
 800148a:	4a1f      	ldr	r2, [pc, #124]	@ (8001508 <get_pulse+0x294>)
 800148c:	601a      	str	r2, [r3, #0]
	    peak_amp = THRESH_DEFAULT;                               // set P default
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <get_pulse+0x274>)
 8001490:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <get_pulse+0x294>)
 8001492:	601a      	str	r2, [r3, #0]
	    trough_amp = THRESH_DEFAULT;                               // set T default
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <get_pulse+0x270>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <get_pulse+0x294>)
 8001498:	601a      	str	r2, [r3, #0]
	    samples_since_last_beat = 0;          // bring the lastBeatTime up to date
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <get_pulse+0x25c>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
	    first_beat = true;                      // set these to avoid noise
 80014a0:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <get_pulse+0x284>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
	    second_beat = false;                    // when we get the heartbeat back
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <get_pulse+0x27c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
	    BPM = 0;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <get_pulse+0x28c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
	    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <get_pulse+0x268>)
 80014b4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80014b8:	601a      	str	r2, [r3, #0]
	    pulse = false;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <get_pulse+0x278>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	    amp = 100;                  // beat amplitude 1/10 of input range.
 80014c0:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <get_pulse+0x290>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <get_pulse+0x298>)
 80014c4:	601a      	str	r2, [r3, #0]

	  }
}
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	200002c4 	.word	0x200002c4
 80014d4:	200002bc 	.word	0x200002bc
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000000 	.word	0x20000000
 80014e0:	66666667 	.word	0x66666667
 80014e4:	20000010 	.word	0x20000010
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	200002c1 	.word	0x200002c1
 80014f0:	200002c0 	.word	0x200002c0
 80014f4:	20000244 	.word	0x20000244
 80014f8:	20000014 	.word	0x20000014
 80014fc:	88888889 	.word	0x88888889
 8001500:	20000240 	.word	0x20000240
 8001504:	20000004 	.word	0x20000004
 8001508:	3fcccccd 	.word	0x3fcccccd
 800150c:	42c80000 	.word	0x42c80000

08001510 <get_BPM>:

int get_BPM(void) {
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return BPM;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <get_BPM+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000240 	.word	0x20000240

08001528 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001532:	4603      	mov	r3, r0
 8001534:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001536:	ed97 7a01 	vldr	s14, [r7, #4]
 800153a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80015bc <GPS_nmea_to_dec+0x94>
 800153e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001546:	ee17 3a90 	vmov	r3, s15
 800154a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2264      	movs	r2, #100	@ 0x64
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001564:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001568:	ed97 7a03 	vldr	s14, [r7, #12]
 800156c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80015c0 <GPS_nmea_to_dec+0x98>
 8001570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001574:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	ed97 7a02 	vldr	s14, [r7, #8]
 8001586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	2b53      	cmp	r3, #83	@ 0x53
 8001592:	d002      	beq.n	800159a <GPS_nmea_to_dec+0x72>
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	2b57      	cmp	r3, #87	@ 0x57
 8001598:	d105      	bne.n	80015a6 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800159a:	edd7 7a05 	vldr	s15, [r7, #20]
 800159e:	eef1 7a67 	vneg.f32	s15, s15
 80015a2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	ee07 3a90 	vmov	s15, r3
}
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	42c80000 	.word	0x42c80000
 80015c0:	42700000 	.word	0x42700000
 80015c4:	00000000 	.word	0x00000000

080015c8 <updateGPS>:

updateGPS(){
 80015c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015cc:	b08e      	sub	sp, #56	@ 0x38
 80015ce:	af00      	add	r7, sp, #0
	// imu_ctr = 1;
	  int counter = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
	  int counter2 = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
	  while(1){
		  HAL_StatusTypeDef ret = HAL_UART_Receive(&huart1, a, 1, 5000);
 80015d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015dc:	2201      	movs	r2, #1
 80015de:	497c      	ldr	r1, [pc, #496]	@ (80017d0 <updateGPS+0x208>)
 80015e0:	487c      	ldr	r0, [pc, #496]	@ (80017d4 <updateGPS+0x20c>)
 80015e2:	f008 f960 	bl	80098a6 <HAL_UART_Receive>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]
		  if (ret == HAL_TIMEOUT) {
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	f000 81ae 	beq.w	800194e <updateGPS+0x386>
			  break;
		  }
		  if(a[0] == '$'){
 80015f2:	4b77      	ldr	r3, [pc, #476]	@ (80017d0 <updateGPS+0x208>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b24      	cmp	r3, #36	@ 0x24
 80015f8:	f040 8105 	bne.w	8001806 <updateGPS+0x23e>
			  gps_buf[gps_idx++] = a[0];
 80015fc:	4b76      	ldr	r3, [pc, #472]	@ (80017d8 <updateGPS+0x210>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	b2d1      	uxtb	r1, r2
 8001604:	4a74      	ldr	r2, [pc, #464]	@ (80017d8 <updateGPS+0x210>)
 8001606:	7011      	strb	r1, [r2, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b71      	ldr	r3, [pc, #452]	@ (80017d0 <updateGPS+0x208>)
 800160c:	7819      	ldrb	r1, [r3, #0]
 800160e:	4b73      	ldr	r3, [pc, #460]	@ (80017dc <updateGPS+0x214>)
 8001610:	5499      	strb	r1, [r3, r2]
			  //printf("%c", a[0]);
			  while (a[0] != 10){
 8001612:	e011      	b.n	8001638 <updateGPS+0x70>
				  HAL_UART_Receive(&huart1, a, 1, 5000);
 8001614:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001618:	2201      	movs	r2, #1
 800161a:	496d      	ldr	r1, [pc, #436]	@ (80017d0 <updateGPS+0x208>)
 800161c:	486d      	ldr	r0, [pc, #436]	@ (80017d4 <updateGPS+0x20c>)
 800161e:	f008 f942 	bl	80098a6 <HAL_UART_Receive>
				  gps_buf[gps_idx++] = a[0];
 8001622:	4b6d      	ldr	r3, [pc, #436]	@ (80017d8 <updateGPS+0x210>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	b2d1      	uxtb	r1, r2
 800162a:	4a6b      	ldr	r2, [pc, #428]	@ (80017d8 <updateGPS+0x210>)
 800162c:	7011      	strb	r1, [r2, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b67      	ldr	r3, [pc, #412]	@ (80017d0 <updateGPS+0x208>)
 8001632:	7819      	ldrb	r1, [r3, #0]
 8001634:	4b69      	ldr	r3, [pc, #420]	@ (80017dc <updateGPS+0x214>)
 8001636:	5499      	strb	r1, [r3, r2]
			  while (a[0] != 10){
 8001638:	4b65      	ldr	r3, [pc, #404]	@ (80017d0 <updateGPS+0x208>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b0a      	cmp	r3, #10
 800163e:	d1e9      	bne.n	8001614 <updateGPS+0x4c>
				  //printf("%c", a[0]);
			  }
			  for (int i = 0; i < 7; ++i){
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001644:	e00b      	b.n	800165e <updateGPS+0x96>
				  temp[i] = gps_buf[i];
 8001646:	4a65      	ldr	r2, [pc, #404]	@ (80017dc <updateGPS+0x214>)
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	4413      	add	r3, r2
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	4a64      	ldr	r2, [pc, #400]	@ (80017e0 <updateGPS+0x218>)
 8001650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001652:	4413      	add	r3, r2
 8001654:	460a      	mov	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; ++i){
 8001658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165a:	3301      	adds	r3, #1
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800165e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001660:	2b06      	cmp	r3, #6
 8001662:	ddf0      	ble.n	8001646 <updateGPS+0x7e>
			  }
			  temp[6] = '\0';
 8001664:	4b5e      	ldr	r3, [pc, #376]	@ (80017e0 <updateGPS+0x218>)
 8001666:	2200      	movs	r2, #0
 8001668:	719a      	strb	r2, [r3, #6]
			  for (int i = 0; i < 128; ++i){
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800166e:	e002      	b.n	8001676 <updateGPS+0xae>
 8001670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001672:	3301      	adds	r3, #1
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001678:	2b7f      	cmp	r3, #127	@ 0x7f
 800167a:	ddf9      	ble.n	8001670 <updateGPS+0xa8>
				  //printf("%c", gps_buf[i]);////////
			  }


			  //printf("done\n");
			  counter++;
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	3301      	adds	r3, #1
 8001680:	637b      	str	r3, [r7, #52]	@ 0x34
			  gps_idx = 0;
 8001682:	4b55      	ldr	r3, [pc, #340]	@ (80017d8 <updateGPS+0x210>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]


			  if (!strncmp((char*)temp, "$GPGGA", 6)){
 8001688:	2206      	movs	r2, #6
 800168a:	4956      	ldr	r1, [pc, #344]	@ (80017e4 <updateGPS+0x21c>)
 800168c:	4854      	ldr	r0, [pc, #336]	@ (80017e0 <updateGPS+0x218>)
 800168e:	f00a fc2c 	bl	800beea <strncmp>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 8081 	bne.w	800179c <updateGPS+0x1d4>
				  char lat[9];
				  char lat_ns;
				  char lon[9];
				  char lon_ew;

				  for (int i = 18; i < 27; i++){
 800169a:	2312      	movs	r3, #18
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
 800169e:	e00c      	b.n	80016ba <updateGPS+0xf2>
					  lat[i-18] = gps_buf[i];
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	3b12      	subs	r3, #18
 80016a4:	494d      	ldr	r1, [pc, #308]	@ (80017dc <updateGPS+0x214>)
 80016a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a8:	440a      	add	r2, r1
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	3338      	adds	r3, #56	@ 0x38
 80016ae:	443b      	add	r3, r7
 80016b0:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  for (int i = 18; i < 27; i++){
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	3301      	adds	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	2b1a      	cmp	r3, #26
 80016be:	ddef      	ble.n	80016a0 <updateGPS+0xd8>

				  }
				  lat_ns = gps_buf[28];
 80016c0:	4b46      	ldr	r3, [pc, #280]	@ (80017dc <updateGPS+0x214>)
 80016c2:	7f1b      	ldrb	r3, [r3, #28]
 80016c4:	75bb      	strb	r3, [r7, #22]
				  for (int i = 30; i < 40; i++){
 80016c6:	231e      	movs	r3, #30
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	e00c      	b.n	80016e6 <updateGPS+0x11e>
					  lon[i-30] = gps_buf[i];
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	3b1e      	subs	r3, #30
 80016d0:	4942      	ldr	r1, [pc, #264]	@ (80017dc <updateGPS+0x214>)
 80016d2:	6a3a      	ldr	r2, [r7, #32]
 80016d4:	440a      	add	r2, r1
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	3338      	adds	r3, #56	@ 0x38
 80016da:	443b      	add	r3, r7
 80016dc:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for (int i = 30; i < 40; i++){
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	3301      	adds	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	2b27      	cmp	r3, #39	@ 0x27
 80016ea:	ddef      	ble.n	80016cc <updateGPS+0x104>
				  }
				  lon_ew = gps_buf[41];
 80016ec:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <updateGPS+0x214>)
 80016ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80016f2:	757b      	strb	r3, [r7, #21]
				  for (int i = 0; i < 128; ++i){
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	e007      	b.n	800170a <updateGPS+0x142>
					  gps_buf[i] = 0;
 80016fa:	4a38      	ldr	r2, [pc, #224]	@ (80017dc <updateGPS+0x214>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 128; ++i){
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	3301      	adds	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b7f      	cmp	r3, #127	@ 0x7f
 800170e:	ddf4      	ble.n	80016fa <updateGPS+0x132>
				  }
				  GPS2.dec_latitude = GPS_nmea_to_dec(strtof(lat, NULL), lat_ns)*(PI/180);
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f009 fbd8 	bl	800aecc <strtof>
 800171c:	ee07 0a90 	vmov	s15, r0
 8001720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001724:	7dbb      	ldrb	r3, [r7, #22]
 8001726:	4618      	mov	r0, r3
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	f7ff fefc 	bl	8001528 <GPS_nmea_to_dec>
 8001730:	ee10 3a10 	vmov	r3, s0
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff07 	bl	8000548 <__aeabi_f2d>
 800173a:	a323      	add	r3, pc, #140	@ (adr r3, 80017c8 <updateGPS+0x200>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe ff5a 	bl	80005f8 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff fa4c 	bl	8000be8 <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a25      	ldr	r2, [pc, #148]	@ (80017e8 <updateGPS+0x220>)
 8001754:	6053      	str	r3, [r2, #4]
				  GPS2.dec_longitude = GPS_nmea_to_dec(strtof(lon, NULL), lon_ew)*(PI/180);
 8001756:	463b      	mov	r3, r7
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f009 fbb6 	bl	800aecc <strtof>
 8001760:	ee07 0a90 	vmov	s15, r0
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	7d7b      	ldrb	r3, [r7, #21]
 800176a:	4618      	mov	r0, r3
 800176c:	eeb0 0a67 	vmov.f32	s0, s15
 8001770:	f7ff feda 	bl	8001528 <GPS_nmea_to_dec>
 8001774:	ee10 3a10 	vmov	r3, s0
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	a312      	add	r3, pc, #72	@ (adr r3, 80017c8 <updateGPS+0x200>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe ff38 	bl	80005f8 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff fa2a 	bl	8000be8 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	4a14      	ldr	r2, [pc, #80]	@ (80017e8 <updateGPS+0x220>)
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e011      	b.n	80017c0 <updateGPS+0x1f8>

			  }
			  else if (!strncmp((char*)temp, "$GPRMC", 6)){
 800179c:	2206      	movs	r2, #6
 800179e:	4913      	ldr	r1, [pc, #76]	@ (80017ec <updateGPS+0x224>)
 80017a0:	480f      	ldr	r0, [pc, #60]	@ (80017e0 <updateGPS+0x218>)
 80017a2:	f00a fba2 	bl	800beea <strncmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <updateGPS+0x1f8>
				//sscanf((char*)gps_buf, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS2.utc_time, &GPS2.nmea_latitude, &GPS2.ns, &GPS2.nmea_longitude, &GPS2.ew, &GPS2.speed_k, &GPS2.course_d, &GPS2.date);
				  GPS2.speed_k++;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <updateGPS+0x220>)
 80017ae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80017b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <updateGPS+0x220>)
 80017bc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			  }
			  for (int i = 0; i < 128; ++i){
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	e01c      	b.n	8001800 <updateGPS+0x238>
 80017c6:	bf00      	nop
 80017c8:	a2529d39 	.word	0xa2529d39
 80017cc:	3f91df46 	.word	0x3f91df46
 80017d0:	200002c8 	.word	0x200002c8
 80017d4:	20000520 	.word	0x20000520
 80017d8:	20000354 	.word	0x20000354
 80017dc:	200002d4 	.word	0x200002d4
 80017e0:	200003d0 	.word	0x200003d0
 80017e4:	0800fd88 	.word	0x0800fd88
 80017e8:	20000358 	.word	0x20000358
 80017ec:	0800fdb8 	.word	0x0800fdb8
				  gps_buf[i] = 0;
 80017f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001968 <updateGPS+0x3a0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4413      	add	r3, r2
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 128; ++i){
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b7f      	cmp	r3, #127	@ 0x7f
 8001804:	ddf4      	ble.n	80017f0 <updateGPS+0x228>
			  }
		  }

		  if(counter == 6){
 8001806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001808:	2b06      	cmp	r3, #6
 800180a:	f47f aee5 	bne.w	80015d8 <updateGPS+0x10>
//				  printf("long: %f, longdec: %f\n\r", GPS2.nmea_latitude, GPS2.dec_longitude);
//				  printf("lat: %f, latdec: %f\n\r", GPS2.nmea_longitude, GPS2.dec_latitude);
//				  printf("speed: %f\n\r", GPS2.speed_k);
//				  printf("date: %f\n\r", GPS2.utc_time);

			  if(counter2 == 1){
 800180e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001810:	2b01      	cmp	r3, #1
 8001812:	f040 8096 	bne.w	8001942 <updateGPS+0x37a>
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 8001816:	4b55      	ldr	r3, [pc, #340]	@ (800196c <updateGPS+0x3a4>)
 8001818:	ed93 7a00 	vldr	s14, [r3]
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <updateGPS+0x3a4>)
 800181e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001826:	ee17 0a90 	vmov	r0, s15
 800182a:	f7fe fe8d 	bl	8000548 <__aeabi_f2d>
 800182e:	4604      	mov	r4, r0
 8001830:	460d      	mov	r5, r1
						  (cos(((double)GPS2.dec_longitude+(double)GPS2.dec_longitude_prev)/2));
 8001832:	4b4e      	ldr	r3, [pc, #312]	@ (800196c <updateGPS+0x3a4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe86 	bl	8000548 <__aeabi_f2d>
 800183c:	4680      	mov	r8, r0
 800183e:	4689      	mov	r9, r1
 8001840:	4b4a      	ldr	r3, [pc, #296]	@ (800196c <updateGPS+0x3a4>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe7f 	bl	8000548 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4640      	mov	r0, r8
 8001850:	4649      	mov	r1, r9
 8001852:	f7fe fd1b 	bl	800028c <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001866:	f7fe fff1 	bl	800084c <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ec43 2b17 	vmov	d7, r2, r3
 8001872:	eeb0 0a47 	vmov.f32	s0, s14
 8001876:	eef0 0a67 	vmov.f32	s1, s15
 800187a:	f00d f92d 	bl	800ead8 <cos>
 800187e:	ec53 2b10 	vmov	r2, r3, d0
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe feb7 	bl	80005f8 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4938      	ldr	r1, [pc, #224]	@ (8001970 <updateGPS+0x3a8>)
 8001890:	e9c1 2300 	strd	r2, r3, [r1]
				  y_cord = (double)(GPS2.dec_latitude - GPS2.dec_latitude_prev);
 8001894:	4b35      	ldr	r3, [pc, #212]	@ (800196c <updateGPS+0x3a4>)
 8001896:	ed93 7a01 	vldr	s14, [r3, #4]
 800189a:	4b34      	ldr	r3, [pc, #208]	@ (800196c <updateGPS+0x3a4>)
 800189c:	edd3 7a03 	vldr	s15, [r3, #12]
 80018a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a4:	ee17 0a90 	vmov	r0, s15
 80018a8:	f7fe fe4e 	bl	8000548 <__aeabi_f2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4930      	ldr	r1, [pc, #192]	@ (8001974 <updateGPS+0x3ac>)
 80018b2:	e9c1 2300 	strd	r2, r3, [r1]
				  p2p_dist = sqrt(x_cord*x_cord + y_cord*y_cord)*6371000;
 80018b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001970 <updateGPS+0x3a8>)
 80018b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <updateGPS+0x3a8>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fe99 	bl	80005f8 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4614      	mov	r4, r2
 80018cc:	461d      	mov	r5, r3
 80018ce:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <updateGPS+0x3ac>)
 80018d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <updateGPS+0x3ac>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fe8d 	bl	80005f8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fcd1 	bl	800028c <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	ec43 2b17 	vmov	d7, r2, r3
 80018f2:	eeb0 0a47 	vmov.f32	s0, s14
 80018f6:	eef0 0a67 	vmov.f32	s1, s15
 80018fa:	f00d f8c1 	bl	800ea80 <sqrt>
 80018fe:	ec51 0b10 	vmov	r0, r1, d0
 8001902:	a317      	add	r3, pc, #92	@ (adr r3, 8001960 <updateGPS+0x398>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4919      	ldr	r1, [pc, #100]	@ (8001978 <updateGPS+0x3b0>)
 8001912:	e9c1 2300 	strd	r2, r3, [r1]
				  velocity = p2p_dist/5;// m/s, timer is set for 5 sec
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <updateGPS+0x3b0>)
 8001918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <updateGPS+0x3b4>)
 8001922:	f7fe ff93 	bl	800084c <__aeabi_ddiv>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4915      	ldr	r1, [pc, #84]	@ (8001980 <updateGPS+0x3b8>)
 800192c:	e9c1 2300 	strd	r2, r3, [r1]
				  //printf("p2p: %f\nmeter/sec: %f\n\r", p2p_dist,velocity);
				  //printf("Minute Per Mile: %f\n\r", .08333/(p2p_dist/1609.3));
				  GPS2.dec_latitude_prev = GPS2.dec_latitude;
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <updateGPS+0x3a4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <updateGPS+0x3a4>)
 8001936:	60d3      	str	r3, [r2, #12]
				  GPS2.dec_longitude_prev = GPS2.dec_longitude;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <updateGPS+0x3a4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0b      	ldr	r2, [pc, #44]	@ (800196c <updateGPS+0x3a4>)
 800193e:	6093      	str	r3, [r2, #8]


				  break;
 8001940:	e006      	b.n	8001950 <updateGPS+0x388>
			  }
			  counter2++;
 8001942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001944:	3301      	adds	r3, #1
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
			  counter = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
	  while(1){
 800194c:	e644      	b.n	80015d8 <updateGPS+0x10>
			  break;
 800194e:	bf00      	nop


		  }
	  }
}
 8001950:	bf00      	nop
 8001952:	3738      	adds	r7, #56	@ 0x38
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	00000000 	.word	0x00000000
 8001964:	41584dae 	.word	0x41584dae
 8001968:	200002d4 	.word	0x200002d4
 800196c:	20000358 	.word	0x20000358
 8001970:	200003c0 	.word	0x200003c0
 8001974:	200003c8 	.word	0x200003c8
 8001978:	200003b8 	.word	0x200003b8
 800197c:	40140000 	.word	0x40140000
 8001980:	200003d8 	.word	0x200003d8

08001984 <get_distance>:



	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
}
double get_distance(){
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	return p2p_dist;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <get_distance+0x20>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001992:	eeb0 0a47 	vmov.f32	s0, s14
 8001996:	eef0 0a67 	vmov.f32	s1, s15
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200003b8 	.word	0x200003b8

080019a8 <get_velocity>:

double get_velocity(){
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
	return velocity;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <get_velocity+0x20>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80019b6:	eeb0 0a47 	vmov.f32	s0, s14
 80019ba:	eef0 0a67 	vmov.f32	s1, s15
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200003d8 	.word	0x200003d8

080019cc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6858      	ldr	r0, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8adb      	ldrh	r3, [r3, #22]
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	f003 fe0d 	bl	8005610 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	1cf9      	adds	r1, r7, #3
 8001a00:	2201      	movs	r2, #1
 8001a02:	f005 fe3a 	bl	800767a <HAL_SPI_Transmit>
 8001a06:	4603      	mov	r3, r0
 8001a08:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f107 010f 	add.w	r1, r7, #15
 8001a16:	2201      	movs	r2, #1
 8001a18:	f005 ffa4 	bl	8007964 <HAL_SPI_Receive>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6858      	ldr	r0, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	8adb      	ldrh	r3, [r3, #22]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f003 fdf0 	bl	8005610 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70fb      	strb	r3, [r7, #3]
 8001a46:	4613      	mov	r3, r2
 8001a48:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a50:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001a52:	78bb      	ldrb	r3, [r7, #2]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6858      	ldr	r0, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8adb      	ldrh	r3, [r3, #22]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f003 fdce 	bl	8005610 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f107 010a 	add.w	r1, r7, #10
 8001a80:	2202      	movs	r2, #2
 8001a82:	f005 fdfa 	bl	800767a <HAL_SPI_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6858      	ldr	r0, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8adb      	ldrh	r3, [r3, #22]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	f003 fdbb 	bl	8005610 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b088      	sub	sp, #32
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	4611      	mov	r1, r2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6858      	ldr	r0, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8adb      	ldrh	r3, [r3, #22]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f003 fda2 	bl	8005610 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f107 0117 	add.w	r1, r7, #23
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f005 fdce 	bl	800767a <HAL_SPI_Transmit>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d108      	bne.n	8001afa <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	b292      	uxth	r2, r2
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f006 fa90 	bl	8008018 <HAL_SPI_Transmit_DMA>
 8001af8:	e012      	b.n	8001b20 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	f005 fdb7 	bl	800767a <HAL_SPI_Transmit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8adb      	ldrh	r3, [r3, #22]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f003 fd78 	bl	8005610 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff7b 	bl	8001a3a <write_register>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b5c:	d801      	bhi.n	8001b62 <set_OCP+0x16>
    imax = 45;
 8001b5e:	232d      	movs	r3, #45	@ 0x2d
 8001b60:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b66:	d901      	bls.n	8001b6c <set_OCP+0x20>
    imax = 240;
 8001b68:	23f0      	movs	r3, #240	@ 0xf0
 8001b6a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2b81      	cmp	r3, #129	@ 0x81
 8001b70:	d809      	bhi.n	8001b86 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	3b2d      	subs	r3, #45	@ 0x2d
 8001b76:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb4 <set_OCP+0x68>)
 8001b78:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7c:	1052      	asrs	r2, r2, #1
 8001b7e:	17db      	asrs	r3, r3, #31
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e008      	b.n	8001b98 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	331e      	adds	r3, #30
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <set_OCP+0x68>)
 8001b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b90:	1092      	asrs	r2, r2, #2
 8001b92:	17db      	asrs	r3, r3, #31
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f043 0320 	orr.w	r3, r3, #32
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	210b      	movs	r1, #11
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff48 	bl	8001a3a <write_register>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	66666667 	.word	0x66666667

08001bb8 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001bc0:	211d      	movs	r1, #29
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff02 	bl	80019cc <read_register>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	461c      	mov	r4, r3
 8001bd4:	4615      	mov	r5, r2
 8001bd6:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001bda:	211e      	movs	r1, #30
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fef5 	bl	80019cc <read_register>
 8001be2:	4603      	mov	r3, r0
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001be8:	2304      	movs	r3, #4
 8001bea:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d908      	bls.n	8001c04 <set_low_data_rate_optimization+0x4c>
 8001bf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bf6:	1fd1      	subs	r1, r2, #7
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	d103      	bne.n	8001c04 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	461a      	mov	r2, r3
 8001c08:	2126      	movs	r1, #38	@ 0x26
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff15 	bl	8001a3a <write_register>
}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bdb0      	pop	{r4, r5, r7, pc}

08001c18 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001c20:	2100      	movs	r1, #0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ff7f 	bl	8001b26 <set_mode>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <lora_mode_receive_single>:

  set_mode(lora, OPMODE_RX_CONTINUOUS);
}

void lora_mode_receive_single(lora_sx1276 *lora)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7d5b      	ldrb	r3, [r3, #21]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	210f      	movs	r1, #15
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fefa 	bl	8001a3a <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001c46:	22f0      	movs	r2, #240	@ 0xf0
 8001c48:	2112      	movs	r1, #18
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fef5 	bl	8001a3a <write_register>

  set_mode(lora, OPMODE_RX_SINGLE);
 8001c50:	2106      	movs	r1, #6
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff67 	bl	8001b26 <set_mode>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <lora_mode_standby>:

void lora_mode_standby(lora_sx1276 *lora)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001c68:	2101      	movs	r1, #1
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff5b 	bl	8001b26 <set_mode>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001c80:	211d      	movs	r1, #29
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fea2 	bl	80019cc <read_register>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	461a      	mov	r2, r3
 8001c98:	211d      	movs	r1, #29
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fecd 	bl	8001a3a <write_register>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10e      	bne.n	8001cda <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	d901      	bls.n	8001cc6 <lora_set_tx_power+0x1e>
      level = 15;
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2109      	movs	r1, #9
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff feb1 	bl	8001a3a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001cd8:	e02e      	b.n	8001d38 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	2b14      	cmp	r3, #20
 8001cde:	d901      	bls.n	8001ce4 <lora_set_tx_power+0x3c>
      level = 20;
 8001ce0:	2314      	movs	r3, #20
 8001ce2:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d801      	bhi.n	8001cee <lora_set_tx_power+0x46>
      level = 2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	2b11      	cmp	r3, #17
 8001cf2:	d90c      	bls.n	8001d0e <lora_set_tx_power+0x66>
      level -= 3;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	3b03      	subs	r3, #3
 8001cf8:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001cfa:	2287      	movs	r2, #135	@ 0x87
 8001cfc:	214d      	movs	r1, #77	@ 0x4d
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe9b 	bl	8001a3a <write_register>
      set_OCP(lora, 140);
 8001d04:	218c      	movs	r1, #140	@ 0x8c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff20 	bl	8001b4c <set_OCP>
 8001d0c:	e008      	b.n	8001d20 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001d0e:	2284      	movs	r2, #132	@ 0x84
 8001d10:	214d      	movs	r1, #77	@ 0x4d
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fe91 	bl	8001a3a <write_register>
      set_OCP(lora, 97);
 8001d18:	2161      	movs	r1, #97	@ 0x61
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff16 	bl	8001b4c <set_OCP>
    level -= 2;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	3b02      	subs	r3, #2
 8001d24:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2109      	movs	r1, #9
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fe81 	bl	8001a3a <write_register>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d50:	f04f 0000 	mov.w	r0, #0
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	04d9      	lsls	r1, r3, #19
 8001d5a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001d5e:	04d0      	lsls	r0, r2, #19
 8001d60:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <lora_set_frequency+0x88>)
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f7fe ff8f 	bl	8000c88 <__aeabi_uldivmod>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001d72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	0c02      	lsrs	r2, r0, #16
 8001d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d84:	0c0b      	lsrs	r3, r1, #16
 8001d86:	b2d3      	uxtb	r3, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2106      	movs	r1, #6
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fe54 	bl	8001a3a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001d92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	0a02      	lsrs	r2, r0, #8
 8001da0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001da4:	0a0b      	lsrs	r3, r1, #8
 8001da6:	b2d3      	uxtb	r3, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	2107      	movs	r1, #7
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff fe44 	bl	8001a3a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001db2:	7c3b      	ldrb	r3, [r7, #16]
 8001db4:	461a      	mov	r2, r3
 8001db6:	2108      	movs	r1, #8
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff fe3e 	bl	8001a3a <write_register>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	01e84800 	.word	0x01e84800

08001dcc <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d802      	bhi.n	8001de4 <lora_set_spreading_factor+0x18>
    sf = 6;
 8001dde:	2306      	movs	r3, #6
 8001de0:	70fb      	strb	r3, [r7, #3]
 8001de2:	e004      	b.n	8001dee <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d901      	bls.n	8001dee <lora_set_spreading_factor+0x22>
    sf = 12;
 8001dea:	230c      	movs	r3, #12
 8001dec:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b06      	cmp	r3, #6
 8001df2:	d10a      	bne.n	8001e0a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001df4:	22c5      	movs	r2, #197	@ 0xc5
 8001df6:	2131      	movs	r1, #49	@ 0x31
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fe1e 	bl	8001a3a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001dfe:	220c      	movs	r2, #12
 8001e00:	2137      	movs	r1, #55	@ 0x37
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fe19 	bl	8001a3a <write_register>
 8001e08:	e009      	b.n	8001e1e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001e0a:	22c3      	movs	r2, #195	@ 0xc3
 8001e0c:	2131      	movs	r1, #49	@ 0x31
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe13 	bl	8001a3a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001e14:	220a      	movs	r2, #10
 8001e16:	2137      	movs	r1, #55	@ 0x37
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fe0e 	bl	8001a3a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001e1e:	211e      	movs	r1, #30
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fdd3 	bl	80019cc <read_register>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	b25a      	sxtb	r2, r3
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	461a      	mov	r2, r3
 8001e44:	211e      	movs	r1, #30
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fdf7 	bl	8001a3a <write_register>

  set_low_data_rate_optimization(lora);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff feb3 	bl	8001bb8 <set_low_data_rate_optimization>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2120      	movs	r1, #32
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fde1 	bl	8001a3a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	2121      	movs	r1, #33	@ 0x21
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fdd7 	bl	8001a3a <write_register>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001e9c:	2142      	movs	r1, #66	@ 0x42
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fd94 	bl	80019cc <read_register>
 8001ea4:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fd87 	bl	80019cc <read_register>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d101      	bne.n	8001ed0 <lora_is_transmitting+0x22>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e000      	b.n	8001ed2 <lora_is_transmitting+0x24>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	71fb      	strb	r3, [r7, #7]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff ffdc 	bl	8001eae <lora_is_transmitting>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001efc:	2305      	movs	r3, #5
 8001efe:	e02a      	b.n	8001f56 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001f00:	2101      	movs	r1, #1
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff fe0f 	bl	8001b26 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f859 	bl	8001fc0 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	7d1b      	ldrb	r3, [r3, #20]
 8001f12:	461a      	mov	r2, r3
 8001f14:	210d      	movs	r1, #13
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff fd8f 	bl	8001a3a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	7d1b      	ldrb	r3, [r3, #20]
 8001f20:	461a      	mov	r2, r3
 8001f22:	210e      	movs	r1, #14
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff fd88 	bl	8001a3a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2122      	movs	r1, #34	@ 0x22
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff fd82 	bl	8001a3a <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	79fa      	ldrb	r2, [r7, #7]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff fdb0 	bl	8001aa2 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <lora_send_packet_base+0x72>
    return LORA_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e004      	b.n	8001f56 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001f4c:	2103      	movs	r1, #3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fde9 	bl	8001b26 <set_mode>
  return LORA_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	2302      	movs	r3, #2
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff ffb1 	bl	8001eda <lora_send_packet_base>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8001f8a:	2112      	movs	r1, #18
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fd1d 	bl	80019cc <read_register>
 8001f92:	4603      	mov	r3, r0
 8001f94:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f9c:	b2db      	uxtb	r3, r3
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <lora_enable_interrupt_rx_done>:

  return lora_receive_packet(lora, buffer, buffer_len, error);
}

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2140      	movs	r1, #64	@ 0x40
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fd41 	bl	8001a3a <write_register>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8001fc8:	2208      	movs	r2, #8
 8001fca:	2112      	movs	r1, #18
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fd34 	bl	8001a3a <write_register>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001ffa:	6a3a      	ldr	r2, [r7, #32]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002018:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff ff3a 	bl	8001e94 <lora_version>
 8002020:	4603      	mov	r3, r0
 8002022:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b12      	cmp	r3, #18
 8002028:	d001      	beq.n	800202e <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 800202a:	2304      	movs	r3, #4
 800202c:	e031      	b.n	8002092 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff fdf2 	bl	8001c18 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f7ff fdef 	bl	8001c18 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 800203a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff fe7e 	bl	8001d40 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8002044:	2107      	movs	r1, #7
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff fec0 	bl	8001dcc <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800204c:	210a      	movs	r1, #10
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff ff03 	bl	8001e5a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7ff fe0f 	bl	8001c78 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 800205a:	210c      	movs	r1, #12
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fcb5 	bl	80019cc <read_register>
 8002062:	4603      	mov	r3, r0
 8002064:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	f043 0303 	orr.w	r3, r3, #3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	210c      	movs	r1, #12
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7ff fce1 	bl	8001a3a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8002078:	2204      	movs	r2, #4
 800207a:	2126      	movs	r1, #38	@ 0x26
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fcdc 	bl	8001a3a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8002082:	2111      	movs	r1, #17
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff fe0f 	bl	8001ca8 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7ff fde8 	bl	8001c60 <lora_mode_standby>

  return LORA_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	0000      	movs	r0, r0
 800209c:	0000      	movs	r0, r0
	...

080020a0 <lora_infINIT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* lora initiation helper, executes up to 100 times */
uint8_t lora_infINIT(int init_ctr) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
	if (init_ctr < 100) {
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b63      	cmp	r3, #99	@ 0x63
 80020ac:	dc18      	bgt.n	80020e0 <lora_infINIT+0x40>
		uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80020ae:	a313      	add	r3, pc, #76	@ (adr r3, 80020fc <lora_infINIT+0x5c>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	e9cd 2300 	strd	r2, r3, [sp]
 80020b8:	2301      	movs	r3, #1
 80020ba:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <lora_infINIT+0x50>)
 80020bc:	490d      	ldr	r1, [pc, #52]	@ (80020f4 <lora_infINIT+0x54>)
 80020be:	480e      	ldr	r0, [pc, #56]	@ (80020f8 <lora_infINIT+0x58>)
 80020c0:	f7ff ff8b 	bl	8001fda <lora_init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]
		if (res != LORA_OK) {
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <lora_infINIT+0x3c>
			// Initialization failed
			// retry lol
			return lora_infINIT(init_ctr + 1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3301      	adds	r3, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ffe4 	bl	80020a0 <lora_infINIT>
 80020d8:	4603      	mov	r3, r0
 80020da:	e002      	b.n	80020e2 <lora_infINIT+0x42>
	  	} else {
	  		return LORA_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <lora_infINIT+0x42>
	  	}
	} else {
		return LORA_ERROR;
 80020e0:	2304      	movs	r3, #4
	}
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	48000400 	.word	0x48000400
 80020f4:	200005a8 	.word	0x200005a8
 80020f8:	200006f4 	.word	0x200006f4
 80020fc:	36e55840 	.word	0x36e55840
 8002100:	00000000 	.word	0x00000000

08002104 <IMUcallback>:

/* called @ 200Hz, updates step count based on IMU data */
inline void IMUcallback(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
//	grav_vec(&hi2c3, &gravity_vec.x);
//	input_step_data(gravity_vec, acc_vec);

	/* real good super awesome step count code! */
	vec_raw_t acc_vec;
	lin_acc_vec_raw(&hi2c3, &acc_vec.x);
 800210a:	463b      	mov	r3, r7
 800210c:	4619      	mov	r1, r3
 800210e:	480b      	ldr	r0, [pc, #44]	@ (800213c <IMUcallback+0x38>)
 8002110:	f7ff f825 	bl	800115e <lin_acc_vec_raw>
	processSample(prog_time, acc_vec.x, acc_vec.y, acc_vec.z);
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <IMUcallback+0x3c>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f9b7 1000 	ldrsh.w	r1, [r7]
 800211c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002120:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002124:	f001 f852 	bl	80031cc <processSample>
	prog_time += STEP_PERIOD;
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <IMUcallback+0x3c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3332      	adds	r3, #50	@ 0x32
 800212e:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <IMUcallback+0x3c>)
 8002130:	6013      	str	r3, [r2, #0]
//	num_steps = getSteps();
//	printf("steps: %i\n\r", num_steps);
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000444 	.word	0x20000444
 8002140:	20000710 	.word	0x20000710

08002144 <IMU_infINIT>:
          //IMU_infINIT(&hi2c3);
void IMU_infINIT(I2C_HandleTypeDef *hi2c) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	int num_tries = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
	while (init_IMU(hi2c)) {
 8002150:	e002      	b.n	8002158 <IMU_infINIT+0x14>
		++num_tries;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
	while (init_IMU(hi2c)) {
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe ff85 	bl	8001068 <init_IMU>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f6      	bne.n	8002152 <IMU_infINIT+0xe>
		if (num_tries > 100);
	}
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <loraCallback>:
	}

}

/* loraCallback(): called after gps is read (5s period) to send relevant data */
inline void loraCallback(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	// possibly send 5 seconds late
	// before next* gps poll in order
	// to send at a precise times
	// --> 5 second delay should not have large effect

	lora_data.speed = get_velocity();	// speed from gps file
 8002174:	f7ff fc18 	bl	80019a8 <get_velocity>
 8002178:	ec53 2b10 	vmov	r2, r3, d0
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f7fe fd32 	bl	8000be8 <__aeabi_d2f>
 8002184:	4603      	mov	r3, r0
 8002186:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <loraCallback+0xa0>)
 8002188:	6013      	str	r3, [r2, #0]
	lora_data.distance = get_distance();	// distance from gps file
 800218a:	f7ff fbfb 	bl	8001984 <get_distance>
 800218e:	ec53 2b10 	vmov	r2, r3, d0
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fd27 	bl	8000be8 <__aeabi_d2f>
 800219a:	4603      	mov	r3, r0
 800219c:	4a1c      	ldr	r2, [pc, #112]	@ (8002210 <loraCallback+0xa0>)
 800219e:	6053      	str	r3, [r2, #4]
	lora_data.heart_rate = get_BPM();	// bpm from pulse sensor file
 80021a0:	f7ff f9b6 	bl	8001510 <get_BPM>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002210 <loraCallback+0xa0>)
 80021a8:	6093      	str	r3, [r2, #8]
	lora_data.steps = getSteps();	// step count from steps file
 80021aa:	f001 f829 	bl	8003200 <getSteps>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <loraCallback+0xa0>)
 80021b4:	60da      	str	r2, [r3, #12]
	lora_send_packet(&lora, (uint8_t*)&lora_data, sizeof(lora_data));
 80021b6:	2210      	movs	r2, #16
 80021b8:	4915      	ldr	r1, [pc, #84]	@ (8002210 <loraCallback+0xa0>)
 80021ba:	4816      	ldr	r0, [pc, #88]	@ (8002214 <loraCallback+0xa4>)
 80021bc:	f7ff fecf 	bl	8001f5e <lora_send_packet>
	lora_mode_receive_single(&lora);
 80021c0:	4814      	ldr	r0, [pc, #80]	@ (8002214 <loraCallback+0xa4>)
 80021c2:	f7ff fd35 	bl	8001c30 <lora_mode_receive_single>

	/* debug code for use without lora */
	printf("sent to Base Station:\n\r");
 80021c6:	4814      	ldr	r0, [pc, #80]	@ (8002218 <loraCallback+0xa8>)
 80021c8:	f009 fe12 	bl	800bdf0 <iprintf>
	printf("\t\tspeed: \t%f m/s\n\r", lora_data.speed);
 80021cc:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <loraCallback+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9b9 	bl	8000548 <__aeabi_f2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4810      	ldr	r0, [pc, #64]	@ (800221c <loraCallback+0xac>)
 80021dc:	f009 fe08 	bl	800bdf0 <iprintf>
	printf("\tdistance: \t%f meters\n\r", lora_data.distance);
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <loraCallback+0xa0>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f9af 	bl	8000548 <__aeabi_f2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	480c      	ldr	r0, [pc, #48]	@ (8002220 <loraCallback+0xb0>)
 80021f0:	f009 fdfe 	bl	800bdf0 <iprintf>
	printf("\t\tpulse: \t%i bpm\n\r", lora_data.heart_rate);
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <loraCallback+0xa0>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4619      	mov	r1, r3
 80021fa:	480a      	ldr	r0, [pc, #40]	@ (8002224 <loraCallback+0xb4>)
 80021fc:	f009 fdf8 	bl	800bdf0 <iprintf>
	printf("\t\tsteps: \t%i steps\n\n\r", lora_data.steps);
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <loraCallback+0xa0>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4619      	mov	r1, r3
 8002206:	4808      	ldr	r0, [pc, #32]	@ (8002228 <loraCallback+0xb8>)
 8002208:	f009 fdf2 	bl	800bdf0 <iprintf>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000714 	.word	0x20000714
 8002214:	200006f4 	.word	0x200006f4
 8002218:	0800fe2c 	.word	0x0800fe2c
 800221c:	0800fe44 	.word	0x0800fe44
 8002220:	0800fe58 	.word	0x0800fe58
 8002224:	0800fe70 	.word	0x0800fe70
 8002228:	0800fe84 	.word	0x0800fe84

0800222c <HAL_TIM_PeriodElapsedCallback>:

/* timer checker */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0b      	ldr	r2, [pc, #44]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d104      	bne.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x1a>
		IMUcallback();
 800223c:	f7ff ff62 	bl	8002104 <IMUcallback>
		updatePulseSensor();
 8002240:	f7fe ffde 	bl	8001200 <updatePulseSensor>
		/* timer controlling GPS and LoRa data */
		gps_flag = 1;
		HAL_NVIC_EnableIRQ(USART1_IRQn);
		//vibratorCallback();
	}
}
 8002244:	e009      	b.n	800225a <HAL_TIM_PeriodElapsedCallback+0x2e>
	} else if (htim == &htim7) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d105      	bne.n	800225a <HAL_TIM_PeriodElapsedCallback+0x2e>
		gps_flag = 1;
 800224e:	4b07      	ldr	r3, [pc, #28]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002254:	2025      	movs	r0, #37	@ 0x25
 8002256:	f002 ffc6 	bl	80051e6 <HAL_NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000658 	.word	0x20000658
 8002268:	200006a4 	.word	0x200006a4
 800226c:	2000070c 	.word	0x2000070c

08002270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0a2      	sub	sp, #136	@ 0x88
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002276:	f001 fdd8 	bl	8003e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800227a:	f000 f889 	bl	8002390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227e:	f000 fb09 	bl	8002894 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002282:	f000 fa97 	bl	80027b4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002286:	f000 f997 	bl	80025b8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800228a:	f000 f8c7 	bl	800241c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800228e:	f000 f967 	bl	8002560 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002292:	f000 f9c1 	bl	8002618 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002296:	f000 f9fd 	bl	8002694 <MX_TIM1_Init>
  MX_TIM7_Init();
 800229a:	f000 fac3 	bl	8002824 <MX_TIM7_Init>
  MX_I2C3_Init();
 800229e:	f000 f921 	bl	80024e4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  initPulseSensor(&hadc1);
 80022a2:	4832      	ldr	r0, [pc, #200]	@ (800236c <main+0xfc>)
 80022a4:	f7fe ff9c 	bl	80011e0 <initPulseSensor>
  IMU_infINIT(&hi2c3);
 80022a8:	4831      	ldr	r0, [pc, #196]	@ (8002370 <main+0x100>)
 80022aa:	f7ff ff4b 	bl	8002144 <IMU_infINIT>
  uint8_t res = lora_infINIT(0);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff fef6 	bl	80020a0 <lora_infINIT>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  if (res != LORA_OK) {
	  // restart whole system idk
  }
  initAlgo();
 80022ba:	f000 ff3b 	bl	8003134 <initAlgo>

  //GPS INIT, just calls HAL_UART_Receive_IT(&huart1, &rx_data, 1) to start
    //GPS_Init();

  // start your engines!
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022be:	2100      	movs	r1, #0
 80022c0:	482c      	ldr	r0, [pc, #176]	@ (8002374 <main+0x104>)
 80022c2:	f006 faf9 	bl	80088b8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80022c6:	482c      	ldr	r0, [pc, #176]	@ (8002378 <main+0x108>)
 80022c8:	f006 fa4a 	bl	8008760 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80022cc:	482b      	ldr	r0, [pc, #172]	@ (800237c <main+0x10c>)
 80022ce:	f006 fa47 	bl	8008760 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buzz = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  // Wait at least 5 seconds before clearing buzzer
  uint8_t wait = 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
  lora_enable_interrupt_rx_done(&lora);
 80022de:	4828      	ldr	r0, [pc, #160]	@ (8002380 <main+0x110>)
 80022e0:	f7ff fe61 	bl	8001fa6 <lora_enable_interrupt_rx_done>
  char buffer[128];
  lora_mode_receive_single(&lora);
 80022e4:	4826      	ldr	r0, [pc, #152]	@ (8002380 <main+0x110>)
 80022e6:	f7ff fca3 	bl	8001c30 <lora_mode_receive_single>

  while (1)
  {

	  /* GPS Polling */
	  if (gps_flag) {
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <main+0x114>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01f      	beq.n	8002332 <main+0xc2>
		  updateGPS();
 80022f2:	f7ff f969 	bl	80015c8 <updateGPS>
		  gps_flag = 0;
 80022f6:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <main+0x114>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
		  loraCallback(); // transmit lora data after GPS bottleneck finishes
 80022fc:	f7ff ff38 	bl	8002170 <loraCallback>
      if (buzz && !wait) {
 8002300:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <main+0xb4>
 8002308:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <main+0xb4>
		  	TIM1->CCR1 = 0;
 8002310:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <main+0x118>)
 8002312:	2200      	movs	r2, #0
 8002314:	635a      	str	r2, [r3, #52]	@ 0x34
        buzz = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        wait = 1;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002322:	e006      	b.n	8002332 <main+0xc2>
		  } else if (buzz) {
 8002324:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <main+0xc2>
			  wait = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		  }
    }

    /* poll lora receipt */
    if(LoRaRecieve == 1){
 8002332:	4b16      	ldr	r3, [pc, #88]	@ (800238c <main+0x11c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <main+0xe8>
	  		  //Get data
	  //		  	  lora_mode_receive_continuous(&lora);

//	  		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
      if (!lora_is_packet_available(&lora)) {
 800233a:	4811      	ldr	r0, [pc, #68]	@ (8002380 <main+0x110>)
 800233c:	f7ff fe21 	bl	8001f82 <lora_is_packet_available>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d108      	bne.n	8002358 <main+0xe8>
        LoRaRecieve = 0;
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <main+0x11c>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
        buzz = 1;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        lora_mode_receive_single(&lora);
 8002352:	480b      	ldr	r0, [pc, #44]	@ (8002380 <main+0x110>)
 8002354:	f7ff fc6c 	bl	8001c30 <lora_mode_receive_single>
      }

	  }

    /* poll buzzer */
	  if (buzz) {
 8002358:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0c4      	beq.n	80022ea <main+0x7a>
		  TIM1->CCR1 = 65534;
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <main+0x118>)
 8002362:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34
	  if (gps_flag) {
 8002368:	e7bf      	b.n	80022ea <main+0x7a>
 800236a:	bf00      	nop
 800236c:	200003e0 	.word	0x200003e0
 8002370:	20000444 	.word	0x20000444
 8002374:	2000060c 	.word	0x2000060c
 8002378:	20000658 	.word	0x20000658
 800237c:	200006a4 	.word	0x200006a4
 8002380:	200006f4 	.word	0x200006f4
 8002384:	2000070c 	.word	0x2000070c
 8002388:	40012c00 	.word	0x40012c00
 800238c:	200006f0 	.word	0x200006f0

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	@ 0x58
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	2244      	movs	r2, #68	@ 0x44
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f009 fd9b 	bl	800beda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	463b      	mov	r3, r7
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80023b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80023b6:	f003 ff47 	bl	8006248 <HAL_PWREx_ControlVoltageScaling>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023c0:	f000 fae2 	bl	8002988 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80023c4:	2310      	movs	r3, #16
 80023c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023c8:	2301      	movs	r3, #1
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80023d0:	2360      	movs	r3, #96	@ 0x60
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 ff89 	bl	80062f4 <HAL_RCC_OscConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80023e8:	f000 face 	bl	8002988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ec:	230f      	movs	r3, #15
 80023ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f004 fb89 	bl	8006b1c <HAL_RCC_ClockConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002410:	f000 faba 	bl	8002988 <Error_Handler>
  }
}
 8002414:	bf00      	nop
 8002416:	3758      	adds	r7, #88	@ 0x58
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002422:	463b      	mov	r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002432:	4b29      	ldr	r3, [pc, #164]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002434:	4a29      	ldr	r2, [pc, #164]	@ (80024dc <MX_ADC1_Init+0xc0>)
 8002436:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 800243a:	2200      	movs	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800243e:	4b26      	ldr	r3, [pc, #152]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002450:	4b21      	ldr	r3, [pc, #132]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002452:	2204      	movs	r2, #4
 8002454:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002456:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002458:	2200      	movs	r2, #0
 800245a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800245c:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 800245e:	2200      	movs	r2, #0
 8002460:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002462:	4b1d      	ldr	r3, [pc, #116]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002464:	2201      	movs	r2, #1
 8002466:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002470:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002472:	2200      	movs	r2, #0
 8002474:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002476:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002478:	2200      	movs	r2, #0
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002484:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002486:	2200      	movs	r2, #0
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800248a:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002492:	4811      	ldr	r0, [pc, #68]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 8002494:	f001 ff06 	bl	80042a4 <HAL_ADC_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800249e:	f000 fa73 	bl	8002988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <MX_ADC1_Init+0xc4>)
 80024a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024a6:	2306      	movs	r3, #6
 80024a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024ae:	237f      	movs	r3, #127	@ 0x7f
 80024b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024b2:	2304      	movs	r3, #4
 80024b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ba:	463b      	mov	r3, r7
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	@ (80024d8 <MX_ADC1_Init+0xbc>)
 80024c0:	f002 f932 	bl	8004728 <HAL_ADC_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80024ca:	f000 fa5d 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200003e0 	.word	0x200003e0
 80024dc:	50040000 	.word	0x50040000
 80024e0:	14f00020 	.word	0x14f00020

080024e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002558 <MX_I2C3_Init+0x74>)
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <MX_I2C3_Init+0x78>)
 80024ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <MX_I2C3_Init+0x74>)
 80024f0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80024f4:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <MX_I2C3_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024fc:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <MX_I2C3_Init+0x74>)
 80024fe:	2201      	movs	r2, #1
 8002500:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <MX_I2C3_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002508:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <MX_I2C3_Init+0x74>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <MX_I2C3_Init+0x74>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <MX_I2C3_Init+0x74>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251a:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <MX_I2C3_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002520:	480d      	ldr	r0, [pc, #52]	@ (8002558 <MX_I2C3_Init+0x74>)
 8002522:	f003 f8b0 	bl	8005686 <HAL_I2C_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800252c:	f000 fa2c 	bl	8002988 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002530:	2100      	movs	r1, #0
 8002532:	4809      	ldr	r0, [pc, #36]	@ (8002558 <MX_I2C3_Init+0x74>)
 8002534:	f003 fde2 	bl	80060fc <HAL_I2CEx_ConfigAnalogFilter>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800253e:	f000 fa23 	bl	8002988 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002542:	2100      	movs	r1, #0
 8002544:	4804      	ldr	r0, [pc, #16]	@ (8002558 <MX_I2C3_Init+0x74>)
 8002546:	f003 fe24 	bl	8006192 <HAL_I2CEx_ConfigDigitalFilter>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002550:	f000 fa1a 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000444 	.word	0x20000444
 800255c:	40005c00 	.word	0x40005c00

08002560 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 8002566:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <MX_LPUART1_UART_Init+0x54>)
 8002568:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800256a:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 800256c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002570:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800257e:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002590:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 8002592:	2200      	movs	r2, #0
 8002594:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800259c:	4804      	ldr	r0, [pc, #16]	@ (80025b0 <MX_LPUART1_UART_Init+0x50>)
 800259e:	f007 f8ab 	bl	80096f8 <HAL_UART_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80025a8:	f000 f9ee 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000498 	.word	0x20000498
 80025b4:	40008000 	.word	0x40008000

080025b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <MX_USART1_UART_Init+0x5c>)
 80025c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025de:	220c      	movs	r2, #12
 80025e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	@ (8002610 <MX_USART1_UART_Init+0x58>)
 80025fc:	f007 f87c 	bl	80096f8 <HAL_UART_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002606:	f000 f9bf 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000520 	.word	0x20000520
 8002614:	40013800 	.word	0x40013800

08002618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <MX_SPI1_Init+0x74>)
 800261e:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <MX_SPI1_Init+0x78>)
 8002620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <MX_SPI1_Init+0x74>)
 8002624:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800262a:	4b18      	ldr	r3, [pc, #96]	@ (800268c <MX_SPI1_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002630:	4b16      	ldr	r3, [pc, #88]	@ (800268c <MX_SPI1_Init+0x74>)
 8002632:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002636:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <MX_SPI1_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800263e:	4b13      	ldr	r3, [pc, #76]	@ (800268c <MX_SPI1_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <MX_SPI1_Init+0x74>)
 8002646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <MX_SPI1_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002652:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <MX_SPI1_Init+0x74>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <MX_SPI1_Init+0x74>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265e:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <MX_SPI1_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002664:	4b09      	ldr	r3, [pc, #36]	@ (800268c <MX_SPI1_Init+0x74>)
 8002666:	2207      	movs	r2, #7
 8002668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800266a:	4b08      	ldr	r3, [pc, #32]	@ (800268c <MX_SPI1_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <MX_SPI1_Init+0x74>)
 8002672:	2208      	movs	r2, #8
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002676:	4805      	ldr	r0, [pc, #20]	@ (800268c <MX_SPI1_Init+0x74>)
 8002678:	f004 ff5c 	bl	8007534 <HAL_SPI_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002682:	f000 f981 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200005a8 	.word	0x200005a8
 8002690:	40013000 	.word	0x40013000

08002694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b096      	sub	sp, #88	@ 0x58
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	615a      	str	r2, [r3, #20]
 80026b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	222c      	movs	r2, #44	@ 0x2c
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f009 fc0a 	bl	800beda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c6:	4b39      	ldr	r3, [pc, #228]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026c8:	4a39      	ldr	r2, [pc, #228]	@ (80027b0 <MX_TIM1_Init+0x11c>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026cc:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026d8:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e6:	4b31      	ldr	r3, [pc, #196]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ec:	4b2f      	ldr	r3, [pc, #188]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026f2:	482e      	ldr	r0, [pc, #184]	@ (80027ac <MX_TIM1_Init+0x118>)
 80026f4:	f006 f888 	bl	8008808 <HAL_TIM_PWM_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80026fe:	f000 f943 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800270e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002712:	4619      	mov	r1, r3
 8002714:	4825      	ldr	r0, [pc, #148]	@ (80027ac <MX_TIM1_Init+0x118>)
 8002716:	f006 fef3 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002720:	f000 f932 	bl	8002988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002724:	2360      	movs	r3, #96	@ 0x60
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272c:	2300      	movs	r3, #0
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002730:	2300      	movs	r3, #0
 8002732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002740:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	4818      	ldr	r0, [pc, #96]	@ (80027ac <MX_TIM1_Init+0x118>)
 800274a:	f006 fa95 	bl	8008c78 <HAL_TIM_PWM_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002754:	f000 f918 	bl	8002988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800276c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002770:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800277a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4619      	mov	r1, r3
 800278c:	4807      	ldr	r0, [pc, #28]	@ (80027ac <MX_TIM1_Init+0x118>)
 800278e:	f006 ff1d 	bl	80095cc <HAL_TIMEx_ConfigBreakDeadTime>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002798:	f000 f8f6 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800279c:	4803      	ldr	r0, [pc, #12]	@ (80027ac <MX_TIM1_Init+0x118>)
 800279e:	f000 fb59 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 80027a2:	bf00      	nop
 80027a4:	3758      	adds	r7, #88	@ 0x58
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000060c 	.word	0x2000060c
 80027b0:	40012c00 	.word	0x40012c00

080027b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027c4:	4b15      	ldr	r3, [pc, #84]	@ (800281c <MX_TIM6_Init+0x68>)
 80027c6:	4a16      	ldr	r2, [pc, #88]	@ (8002820 <MX_TIM6_Init+0x6c>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <MX_TIM6_Init+0x68>)
 80027cc:	f240 128f 	movw	r2, #399	@ 0x18f
 80027d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <MX_TIM6_Init+0x68>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 80027d8:	4b10      	ldr	r3, [pc, #64]	@ (800281c <MX_TIM6_Init+0x68>)
 80027da:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80027de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <MX_TIM6_Init+0x68>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027e6:	480d      	ldr	r0, [pc, #52]	@ (800281c <MX_TIM6_Init+0x68>)
 80027e8:	f005 ff62 	bl	80086b0 <HAL_TIM_Base_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80027f2:	f000 f8c9 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4806      	ldr	r0, [pc, #24]	@ (800281c <MX_TIM6_Init+0x68>)
 8002804:	f006 fe7c 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800280e:	f000 f8bb 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000658 	.word	0x20000658
 8002820:	40001000 	.word	0x40001000

08002824 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002834:	4b15      	ldr	r3, [pc, #84]	@ (800288c <MX_TIM7_Init+0x68>)
 8002836:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <MX_TIM7_Init+0x6c>)
 8002838:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 399;
 800283a:	4b14      	ldr	r3, [pc, #80]	@ (800288c <MX_TIM7_Init+0x68>)
 800283c:	f240 128f 	movw	r2, #399	@ 0x18f
 8002840:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002842:	4b12      	ldr	r3, [pc, #72]	@ (800288c <MX_TIM7_Init+0x68>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8002848:	4b10      	ldr	r3, [pc, #64]	@ (800288c <MX_TIM7_Init+0x68>)
 800284a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800284e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <MX_TIM7_Init+0x68>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002856:	480d      	ldr	r0, [pc, #52]	@ (800288c <MX_TIM7_Init+0x68>)
 8002858:	f005 ff2a 	bl	80086b0 <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002862:	f000 f891 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4806      	ldr	r0, [pc, #24]	@ (800288c <MX_TIM7_Init+0x68>)
 8002874:	f006 fe44 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800287e:	f000 f883 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200006a4 	.word	0x200006a4
 8002890:	40001400 	.word	0x40001400

08002894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	4b2c      	ldr	r3, [pc, #176]	@ (800295c <MX_GPIO_Init+0xc8>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	4a2b      	ldr	r2, [pc, #172]	@ (800295c <MX_GPIO_Init+0xc8>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b6:	4b29      	ldr	r3, [pc, #164]	@ (800295c <MX_GPIO_Init+0xc8>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	4b26      	ldr	r3, [pc, #152]	@ (800295c <MX_GPIO_Init+0xc8>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	4a25      	ldr	r2, [pc, #148]	@ (800295c <MX_GPIO_Init+0xc8>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ce:	4b23      	ldr	r3, [pc, #140]	@ (800295c <MX_GPIO_Init+0xc8>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2120      	movs	r1, #32
 80028de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e2:	f002 fe95 	bl	8005610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80028e6:	2201      	movs	r2, #1
 80028e8:	2101      	movs	r1, #1
 80028ea:	481d      	ldr	r0, [pc, #116]	@ (8002960 <MX_GPIO_Init+0xcc>)
 80028ec:	f002 fe90 	bl	8005610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028f0:	2320      	movs	r3, #32
 80028f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4619      	mov	r1, r3
 8002906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800290a:	f002 fd17 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800290e:	2301      	movs	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4619      	mov	r1, r3
 8002924:	480e      	ldr	r0, [pc, #56]	@ (8002960 <MX_GPIO_Init+0xcc>)
 8002926:	f002 fd09 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800292a:	2320      	movs	r3, #32
 800292c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800292e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	4619      	mov	r1, r3
 800293e:	4808      	ldr	r0, [pc, #32]	@ (8002960 <MX_GPIO_Init+0xcc>)
 8002940:	f002 fcfc 	bl	800533c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2017      	movs	r0, #23
 800294a:	f002 fc30 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800294e:	2017      	movs	r0, #23
 8002950:	f002 fc49 	bl	80051e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002954:	bf00      	nop
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	48000400 	.word	0x48000400

08002964 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800296c:	1d39      	adds	r1, r7, #4
 800296e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002972:	2201      	movs	r2, #1
 8002974:	4803      	ldr	r0, [pc, #12]	@ (8002984 <__io_putchar+0x20>)
 8002976:	f006 ff0d 	bl	8009794 <HAL_UART_Transmit>
  return ch;
 800297a:	687b      	ldr	r3, [r7, #4]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000498 	.word	0x20000498

08002988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800298c:	b672      	cpsid	i
}
 800298e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <Error_Handler+0x8>

08002994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <HAL_MspInit+0x44>)
 800299c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299e:	4a0e      	ldr	r2, [pc, #56]	@ (80029d8 <HAL_MspInit+0x44>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <HAL_MspInit+0x44>)
 80029a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_MspInit+0x44>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <HAL_MspInit+0x44>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_MspInit+0x44>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b09e      	sub	sp, #120	@ 0x78
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	2254      	movs	r2, #84	@ 0x54
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f009 fa6c 	bl	800beda <memset>
  if(hadc->Instance==ADC1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a25      	ldr	r2, [pc, #148]	@ (8002a9c <HAL_ADC_MspInit+0xc0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d143      	bne.n	8002a94 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002a12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002a20:	2310      	movs	r3, #16
 8002a22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002a24:	2307      	movs	r3, #7
 8002a26:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fa92 	bl	8006f64 <HAL_RCCEx_PeriphCLKConfig>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002a46:	f7ff ff9f 	bl	8002988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a4a:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_ADC_MspInit+0xc4>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <HAL_ADC_MspInit+0xc4>)
 8002a50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_ADC_MspInit+0xc4>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_ADC_MspInit+0xc4>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <HAL_ADC_MspInit+0xc4>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_ADC_MspInit+0xc4>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a7e:	230b      	movs	r3, #11
 8002a80:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a90:	f002 fc54 	bl	800533c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a94:	bf00      	nop
 8002a96:	3778      	adds	r7, #120	@ 0x78
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	50040000 	.word	0x50040000
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0a0      	sub	sp, #128	@ 0x80
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002abc:	f107 0318 	add.w	r3, r7, #24
 8002ac0:	2254      	movs	r2, #84	@ 0x54
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f009 fa08 	bl	800beda <memset>
  if(hi2c->Instance==I2C3)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2d      	ldr	r2, [pc, #180]	@ (8002b84 <HAL_I2C_MspInit+0xe0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d153      	bne.n	8002b7c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002ad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ade:	f107 0318 	add.w	r3, r7, #24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 fa3e 	bl	8006f64 <HAL_RCCEx_PeriphCLKConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aee:	f7ff ff4b 	bl	8002988 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	4a24      	ldr	r2, [pc, #144]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afe:	4b22      	ldr	r3, [pc, #136]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b16:	4b1c      	ldr	r3, [pc, #112]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b26:	2312      	movs	r3, #18
 8002b28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b32:	2304      	movs	r3, #4
 8002b34:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b40:	f002 fbfc 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b44:	2310      	movs	r3, #16
 8002b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b48:	2312      	movs	r3, #18
 8002b4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b54:	2304      	movs	r3, #4
 8002b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480b      	ldr	r0, [pc, #44]	@ (8002b8c <HAL_I2C_MspInit+0xe8>)
 8002b60:	f002 fbec 	bl	800533c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	4a07      	ldr	r2, [pc, #28]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002b6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_I2C_MspInit+0xe4>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b7c:	bf00      	nop
 8002b7e:	3780      	adds	r7, #128	@ 0x80
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40005c00 	.word	0x40005c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	48000400 	.word	0x48000400

08002b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0a2      	sub	sp, #136	@ 0x88
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ba8:	f107 0320 	add.w	r3, r7, #32
 8002bac:	2254      	movs	r2, #84	@ 0x54
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f009 f992 	bl	800beda <memset>
  if(huart->Instance==LPUART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf8 <HAL_UART_MspInit+0x168>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d139      	bne.n	8002c34 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc8:	f107 0320 	add.w	r3, r7, #32
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 f9c9 	bl	8006f64 <HAL_RCCEx_PeriphCLKConfig>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bd8:	f7ff fed6 	bl	8002988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bdc:	4b47      	ldr	r3, [pc, #284]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be0:	4a46      	ldr	r2, [pc, #280]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002be8:	4b44      	ldr	r3, [pc, #272]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	4b41      	ldr	r3, [pc, #260]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf8:	4a40      	ldr	r2, [pc, #256]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c00:	4b3e      	ldr	r3, [pc, #248]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c1e:	2308      	movs	r3, #8
 8002c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c24:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c2e:	f002 fb85 	bl	800533c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c32:	e05c      	b.n	8002cee <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a31      	ldr	r2, [pc, #196]	@ (8002d00 <HAL_UART_MspInit+0x170>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d157      	bne.n	8002cee <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c42:	2300      	movs	r3, #0
 8002c44:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c46:	f107 0320 	add.w	r3, r7, #32
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 f98a 	bl	8006f64 <HAL_RCCEx_PeriphCLKConfig>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8002c56:	f7ff fe97 	bl	8002988 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c5a:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5e:	4a27      	ldr	r2, [pc, #156]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c66:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	4b22      	ldr	r3, [pc, #136]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	4a21      	ldr	r2, [pc, #132]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c96:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_UART_MspInit+0x16c>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cc6:	f002 fb39 	bl	800533c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cca:	2340      	movs	r3, #64	@ 0x40
 8002ccc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cdc:	2307      	movs	r3, #7
 8002cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4806      	ldr	r0, [pc, #24]	@ (8002d04 <HAL_UART_MspInit+0x174>)
 8002cea:	f002 fb27 	bl	800533c <HAL_GPIO_Init>
}
 8002cee:	bf00      	nop
 8002cf0:	3788      	adds	r7, #136	@ 0x88
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40008000 	.word	0x40008000
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40013800 	.word	0x40013800
 8002d04:	48000400 	.word	0x48000400

08002d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <HAL_SPI_MspInit+0x80>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d129      	bne.n	8002d7e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d2a:	4b18      	ldr	r3, [pc, #96]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	4a11      	ldr	r2, [pc, #68]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002d5a:	f641 0302 	movw	r3, #6146	@ 0x1802
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d6c:	2305      	movs	r3, #5
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d7a:	f002 fadf 	bl	800533c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	@ 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40013000 	.word	0x40013000
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <HAL_TIM_PWM_MspInit+0x38>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10b      	bne.n	8002dba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_TIM_PWM_MspInit+0x3c>)
 8002da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da6:	4a09      	ldr	r2, [pc, #36]	@ (8002dcc <HAL_TIM_PWM_MspInit+0x3c>)
 8002da8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <HAL_TIM_PWM_MspInit+0x3c>)
 8002db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <HAL_TIM_Base_MspInit+0x78>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d114      	bne.n	8002e0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <HAL_TIM_Base_MspInit+0x7c>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de6:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <HAL_TIM_Base_MspInit+0x7c>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dee:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <HAL_TIM_Base_MspInit+0x7c>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2036      	movs	r0, #54	@ 0x36
 8002e00:	f002 f9d5 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e04:	2036      	movs	r0, #54	@ 0x36
 8002e06:	f002 f9ee 	bl	80051e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e0a:	e018      	b.n	8002e3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0f      	ldr	r2, [pc, #60]	@ (8002e50 <HAL_TIM_Base_MspInit+0x80>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <HAL_TIM_Base_MspInit+0x7c>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <HAL_TIM_Base_MspInit+0x7c>)
 8002e1c:	f043 0320 	orr.w	r3, r3, #32
 8002e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e22:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <HAL_TIM_Base_MspInit+0x7c>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2037      	movs	r0, #55	@ 0x37
 8002e34:	f002 f9bb 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e38:	2037      	movs	r0, #55	@ 0x37
 8002e3a:	f002 f9d4 	bl	80051e6 <HAL_NVIC_EnableIRQ>
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40001000 	.word	0x40001000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40001400 	.word	0x40001400

08002e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 030c 	add.w	r3, r7, #12
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a12      	ldr	r2, [pc, #72]	@ (8002ebc <HAL_TIM_MspPostInit+0x68>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d11d      	bne.n	8002eb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eae:	f002 fa45 	bl	800533c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002eb2:	bf00      	nop
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <NMI_Handler+0x4>

08002ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <HardFault_Handler+0x4>

08002ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <MemManage_Handler+0x4>

08002edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	bf00      	nop
 8002eea:	e7fd      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f1a:	f000 ffdb 	bl	8003ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	LoRaRecieve = 1;
 8002f28:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <EXTI9_5_IRQHandler+0x14>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002f2e:	2020      	movs	r0, #32
 8002f30:	f002 fb86 	bl	8005640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200006f0 	.word	0x200006f0

08002f3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f40:	4802      	ldr	r0, [pc, #8]	@ (8002f4c <TIM6_DAC_IRQHandler+0x10>)
 8002f42:	f005 fd97 	bl	8008a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000658 	.word	0x20000658

08002f50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <TIM7_IRQHandler+0x10>)
 8002f56:	f005 fd8d 	bl	8008a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200006a4 	.word	0x200006a4

08002f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return 1;
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_kill>:

int _kill(int pid, int sig)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f7e:	f009 f811 	bl	800bfa4 <__errno>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2216      	movs	r2, #22
 8002f86:	601a      	str	r2, [r3, #0]
  return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_exit>:

void _exit (int status)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ffe7 	bl	8002f74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fa6:	bf00      	nop
 8002fa8:	e7fd      	b.n	8002fa6 <_exit+0x12>

08002faa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e00a      	b.n	8002fd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fbc:	f3af 8000 	nop.w
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	60ba      	str	r2, [r7, #8]
 8002fc8:	b2ca      	uxtb	r2, r1
 8002fca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dbf0      	blt.n	8002fbc <_read+0x12>
  }

  return len;
 8002fda:	687b      	ldr	r3, [r7, #4]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	e009      	b.n	800300a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	60ba      	str	r2, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fcb0 	bl	8002964 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	dbf1      	blt.n	8002ff6 <_write+0x12>
  }
  return len;
 8003012:	687b      	ldr	r3, [r7, #4]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_close>:

int _close(int file)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003044:	605a      	str	r2, [r3, #4]
  return 0;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <_isatty>:

int _isatty(int file)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800305c:	2301      	movs	r3, #1
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800308c:	4a14      	ldr	r2, [pc, #80]	@ (80030e0 <_sbrk+0x5c>)
 800308e:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <_sbrk+0x60>)
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003098:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <_sbrk+0x64>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <_sbrk+0x64>)
 80030a2:	4a12      	ldr	r2, [pc, #72]	@ (80030ec <_sbrk+0x68>)
 80030a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <_sbrk+0x64>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d207      	bcs.n	80030c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030b4:	f008 ff76 	bl	800bfa4 <__errno>
 80030b8:	4603      	mov	r3, r0
 80030ba:	220c      	movs	r2, #12
 80030bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030be:	f04f 33ff 	mov.w	r3, #4294967295
 80030c2:	e009      	b.n	80030d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <_sbrk+0x64>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ca:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <_sbrk+0x64>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	4a05      	ldr	r2, [pc, #20]	@ (80030e8 <_sbrk+0x64>)
 80030d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20010000 	.word	0x20010000
 80030e4:	00000400 	.word	0x00000400
 80030e8:	20000724 	.word	0x20000724
 80030ec:	20000bf0 	.word	0x20000bf0

080030f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <SystemInit+0x20>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	4a05      	ldr	r2, [pc, #20]	@ (8003110 <SystemInit+0x20>)
 80030fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <increaseStepCallback>:
#endif
static ring_buffer_t peakScoreBuf;
static ring_buffer_t peakBuf;

static void increaseStepCallback(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
    steps++;
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <increaseStepCallback+0x1c>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b03      	ldr	r3, [pc, #12]	@ (8003130 <increaseStepCallback+0x1c>)
 8003122:	801a      	strh	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000728 	.word	0x20000728

08003134 <initAlgo>:

void initAlgo()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
    // init buffers
    ring_buffer_init(&rawBuf);
 8003138:	4818      	ldr	r0, [pc, #96]	@ (800319c <initAlgo+0x68>)
 800313a:	f000 fd1c 	bl	8003b76 <ring_buffer_init>
    ring_buffer_init(&ppBuf);
 800313e:	4818      	ldr	r0, [pc, #96]	@ (80031a0 <initAlgo+0x6c>)
 8003140:	f000 fd19 	bl	8003b76 <ring_buffer_init>
    ring_buffer_init(&mdBuf);
 8003144:	4817      	ldr	r0, [pc, #92]	@ (80031a4 <initAlgo+0x70>)
 8003146:	f000 fd16 	bl	8003b76 <ring_buffer_init>
#ifndef SKIP_FILTER
    ring_buffer_init(&smoothBuf);
 800314a:	4817      	ldr	r0, [pc, #92]	@ (80031a8 <initAlgo+0x74>)
 800314c:	f000 fd13 	bl	8003b76 <ring_buffer_init>
#endif
    ring_buffer_init(&peakScoreBuf);
 8003150:	4816      	ldr	r0, [pc, #88]	@ (80031ac <initAlgo+0x78>)
 8003152:	f000 fd10 	bl	8003b76 <ring_buffer_init>
    ring_buffer_init(&peakBuf);
 8003156:	4816      	ldr	r0, [pc, #88]	@ (80031b0 <initAlgo+0x7c>)
 8003158:	f000 fd0d 	bl	8003b76 <ring_buffer_init>

    initPreProcessStage(&rawBuf, &ppBuf, motionDetectStage);
 800315c:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <initAlgo+0x80>)
 800315e:	4910      	ldr	r1, [pc, #64]	@ (80031a0 <initAlgo+0x6c>)
 8003160:	480e      	ldr	r0, [pc, #56]	@ (800319c <initAlgo+0x68>)
 8003162:	f000 fb7f 	bl	8003864 <initPreProcessStage>
#ifdef SKIP_FILTER
    initMotionDetectStage(&ppBuf, &mdBuf, scoringStage);
    initScoringStage(&mdBuf, &peakScoreBuf, detectionStage);
#else
    initMotionDetectStage(&ppBuf, &mdBuf, filterStage);
 8003166:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <initAlgo+0x84>)
 8003168:	490e      	ldr	r1, [pc, #56]	@ (80031a4 <initAlgo+0x70>)
 800316a:	480d      	ldr	r0, [pc, #52]	@ (80031a0 <initAlgo+0x6c>)
 800316c:	f000 fa40 	bl	80035f0 <initMotionDetectStage>
    initFilterStage(&mdBuf, &smoothBuf, scoringStage);
 8003170:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <initAlgo+0x88>)
 8003172:	490d      	ldr	r1, [pc, #52]	@ (80031a8 <initAlgo+0x74>)
 8003174:	480b      	ldr	r0, [pc, #44]	@ (80031a4 <initAlgo+0x70>)
 8003176:	f000 f9c9 	bl	800350c <initFilterStage>
    initScoringStage(&smoothBuf, &peakScoreBuf, detectionStage);
 800317a:	4a11      	ldr	r2, [pc, #68]	@ (80031c0 <initAlgo+0x8c>)
 800317c:	490b      	ldr	r1, [pc, #44]	@ (80031ac <initAlgo+0x78>)
 800317e:	480a      	ldr	r0, [pc, #40]	@ (80031a8 <initAlgo+0x74>)
 8003180:	f000 fd90 	bl	8003ca4 <initScoringStage>
#endif
    initDetectionStage(&peakScoreBuf, &peakBuf, postProcessingStage);
 8003184:	4a0f      	ldr	r2, [pc, #60]	@ (80031c4 <initAlgo+0x90>)
 8003186:	490a      	ldr	r1, [pc, #40]	@ (80031b0 <initAlgo+0x7c>)
 8003188:	4808      	ldr	r0, [pc, #32]	@ (80031ac <initAlgo+0x78>)
 800318a:	f000 f8ab 	bl	80032e4 <initDetectionStage>
    initPostProcessingStage(&peakBuf, &increaseStepCallback);
 800318e:	490e      	ldr	r1, [pc, #56]	@ (80031c8 <initAlgo+0x94>)
 8003190:	4807      	ldr	r0, [pc, #28]	@ (80031b0 <initAlgo+0x7c>)
 8003192:	f000 fa99 	bl	80036c8 <initPostProcessingStage>
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000072c 	.word	0x2000072c
 80031a0:	200007b0 	.word	0x200007b0
 80031a4:	20000834 	.word	0x20000834
 80031a8:	200008b8 	.word	0x200008b8
 80031ac:	2000093c 	.word	0x2000093c
 80031b0:	200009c0 	.word	0x200009c0
 80031b4:	08003629 	.word	0x08003629
 80031b8:	08003545 	.word	0x08003545
 80031bc:	08003cdd 	.word	0x08003cdd
 80031c0:	0800331d 	.word	0x0800331d
 80031c4:	08003705 	.word	0x08003705
 80031c8:	08003115 	.word	0x08003115

080031cc <processSample>:

void processSample(time_t time, accel_t x, accel_t y, accel_t z)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	460b      	mov	r3, r1
 80031e0:	813b      	strh	r3, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
    preProcessSample(time, x, y, z);
 80031e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80031ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fbaa 	bl	800394c <preProcessSample>
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <getSteps>:
    ring_buffer_init(&peakScoreBuf);
    ring_buffer_init(&peakBuf);
}

steps_t getSteps(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
    return steps;
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <getSteps+0x14>)
 8003206:	881b      	ldrh	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000728 	.word	0x20000728

08003218 <sqrt>:
#ifndef STEP_COUNTING_ALGO_UTILS_H
#define STEP_COUNTING_ALGO_UTILS_H
#include <stdint.h>

static int64_t sqrt(int64_t number)
{
 8003218:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800321c:	b08b      	sub	sp, #44	@ 0x2c
 800321e:	af00      	add	r7, sp, #0
 8003220:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int64_t base, i, y;
  base = 67108864; //2^24
 8003224:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  y = 0;
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 1; i <= 24; i++)
 800323c:	f04f 0201 	mov.w	r2, #1
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003248:	e03d      	b.n	80032c6 <sqrt+0xae>
  {
    y += base;
 800324a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800324e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003252:	eb10 0802 	adds.w	r8, r0, r2
 8003256:	eb41 0903 	adc.w	r9, r1, r3
 800325a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    if ((y * y) > number)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	fb03 f202 	mul.w	r2, r3, r2
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	441a      	add	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	fba3 4503 	umull	r4, r5, r3, r3
 8003276:	1953      	adds	r3, r2, r5
 8003278:	461d      	mov	r5, r3
 800327a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327e:	42a2      	cmp	r2, r4
 8003280:	41ab      	sbcs	r3, r5
 8003282:	da09      	bge.n	8003298 <sqrt+0x80>
    {
      y -= base; // base should not have been added, so we substract again
 8003284:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003288:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800328c:	ebb0 0a02 	subs.w	sl, r0, r2
 8003290:	eb61 0b03 	sbc.w	fp, r1, r3
 8003294:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    }
    base = base >> 1; // shift 1 digit to the right = divide by 2
 8003298:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	0842      	lsrs	r2, r0, #1
 80032a6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80032aa:	104b      	asrs	r3, r1, #1
 80032ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (i = 1; i <= 24; i++)
 80032b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b4:	1c51      	adds	r1, r2, #1
 80032b6:	6039      	str	r1, [r7, #0]
 80032b8:	f143 0300 	adc.w	r3, r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80032c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ca:	2a19      	cmp	r2, #25
 80032cc:	f173 0300 	sbcs.w	r3, r3, #0
 80032d0:	dbbb      	blt.n	800324a <sqrt+0x32>
  }
  return y;
 80032d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	372c      	adds	r7, #44	@ 0x2c
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80032e2:	4770      	bx	lr

080032e4 <initDetectionStage>:
static time_t count = 0;
static int16_t threshold_int = 0;
static int16_t threshold_frac = 6;

void initDetectionStage(ring_buffer_t *pInBuff, ring_buffer_t *peakBufIn, void (*pNextStage)(void))
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 80032f0:	4a07      	ldr	r2, [pc, #28]	@ (8003310 <initDetectionStage+0x2c>)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6013      	str	r3, [r2, #0]
    outBuff = peakBufIn;
 80032f6:	4a07      	ldr	r2, [pc, #28]	@ (8003314 <initDetectionStage+0x30>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 80032fc:	4a06      	ldr	r2, [pc, #24]	@ (8003318 <initDetectionStage+0x34>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    detectionFile = fopen(DUMP_DETECTION_FILE_NAME, "w+");
#endif
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000a44 	.word	0x20000a44
 8003314:	20000a48 	.word	0x20000a48
 8003318:	20000a4c 	.word	0x20000a4c

0800331c <detectionStage>:

void detectionStage(void)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b088      	sub	sp, #32
 8003322:	af00      	add	r7, sp, #0
    if (!ring_buffer_is_empty(inBuff))
 8003324:	4b71      	ldr	r3, [pc, #452]	@ (80034ec <detectionStage+0x1d0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fbe1 	bl	8003af0 <ring_buffer_is_empty>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 80d5 	bne.w	80034e0 <detectionStage+0x1c4>
    {
        accumulator_t oMean = mean;
 8003336:	4b6e      	ldr	r3, [pc, #440]	@ (80034f0 <detectionStage+0x1d4>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	61fb      	str	r3, [r7, #28]
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 800333c:	4b6b      	ldr	r3, [pc, #428]	@ (80034ec <detectionStage+0x1d0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f107 0208 	add.w	r2, r7, #8
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fc59 	bl	8003bfe <ring_buffer_dequeue>
        count++;
 800334c:	4b69      	ldr	r3, [pc, #420]	@ (80034f4 <detectionStage+0x1d8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a68      	ldr	r2, [pc, #416]	@ (80034f4 <detectionStage+0x1d8>)
 8003354:	6013      	str	r3, [r2, #0]
        if (count == 1)
 8003356:	4b67      	ldr	r3, [pc, #412]	@ (80034f4 <detectionStage+0x1d8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d106      	bne.n	800336c <detectionStage+0x50>
        {
            mean = dataPoint.magnitude;
 800335e:	893a      	ldrh	r2, [r7, #8]
 8003360:	4b63      	ldr	r3, [pc, #396]	@ (80034f0 <detectionStage+0x1d4>)
 8003362:	801a      	strh	r2, [r3, #0]
            std = 0;
 8003364:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <detectionStage+0x1dc>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e093      	b.n	8003494 <detectionStage+0x178>
        }
        else if (count == 2)
 800336c:	4b61      	ldr	r3, [pc, #388]	@ (80034f4 <detectionStage+0x1d8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d13f      	bne.n	80033f4 <detectionStage+0xd8>
        {
            mean = (mean + dataPoint.magnitude) / 2;
 8003374:	4b5e      	ldr	r3, [pc, #376]	@ (80034f0 <detectionStage+0x1d4>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	893b      	ldrh	r3, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	0fda      	lsrs	r2, r3, #31
 8003380:	4413      	add	r3, r2
 8003382:	105b      	asrs	r3, r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	4b5a      	ldr	r3, [pc, #360]	@ (80034f0 <detectionStage+0x1d4>)
 8003388:	801a      	strh	r2, [r3, #0]
            std = sqrt(((dataPoint.magnitude - mean) * (dataPoint.magnitude - mean)) + ((oMean - mean) * (oMean - mean))) / 2;
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	461a      	mov	r2, r3
 800338e:	4b58      	ldr	r3, [pc, #352]	@ (80034f0 <detectionStage+0x1d4>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	893a      	ldrh	r2, [r7, #8]
 8003396:	4611      	mov	r1, r2
 8003398:	4a55      	ldr	r2, [pc, #340]	@ (80034f0 <detectionStage+0x1d4>)
 800339a:	8812      	ldrh	r2, [r2, #0]
 800339c:	1a8a      	subs	r2, r1, r2
 800339e:	fb03 f202 	mul.w	r2, r3, r2
 80033a2:	4b53      	ldr	r3, [pc, #332]	@ (80034f0 <detectionStage+0x1d4>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	1a5b      	subs	r3, r3, r1
 80033ac:	4950      	ldr	r1, [pc, #320]	@ (80034f0 <detectionStage+0x1d4>)
 80033ae:	8809      	ldrh	r1, [r1, #0]
 80033b0:	4608      	mov	r0, r1
 80033b2:	69f9      	ldr	r1, [r7, #28]
 80033b4:	1a09      	subs	r1, r1, r0
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	17da      	asrs	r2, r3, #31
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c6:	f7ff ff27 	bl	8003218 <sqrt>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	0fd9      	lsrs	r1, r3, #31
 80033d0:	2000      	movs	r0, #0
 80033d2:	4688      	mov	r8, r1
 80033d4:	4681      	mov	r9, r0
 80033d6:	eb18 0402 	adds.w	r4, r8, r2
 80033da:	eb49 0503 	adc.w	r5, r9, r3
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	0862      	lsrs	r2, r4, #1
 80033e8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 80033ec:	106b      	asrs	r3, r5, #1
 80033ee:	4b42      	ldr	r3, [pc, #264]	@ (80034f8 <detectionStage+0x1dc>)
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e04f      	b.n	8003494 <detectionStage+0x178>
        }
        else
        {
            mean = (dataPoint.magnitude + ((count - 1) * mean)) / count;
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4b3e      	ldr	r3, [pc, #248]	@ (80034f4 <detectionStage+0x1d8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	4a3c      	ldr	r2, [pc, #240]	@ (80034f0 <detectionStage+0x1d4>)
 8003400:	8812      	ldrh	r2, [r2, #0]
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	18ca      	adds	r2, r1, r3
 8003408:	4b3a      	ldr	r3, [pc, #232]	@ (80034f4 <detectionStage+0x1d8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003410:	b29a      	uxth	r2, r3
 8003412:	4b37      	ldr	r3, [pc, #220]	@ (80034f0 <detectionStage+0x1d4>)
 8003414:	801a      	strh	r2, [r3, #0]
            accumulator_t part1 = ((std * std) / (count - 1)) * (count - 2);
 8003416:	4b38      	ldr	r3, [pc, #224]	@ (80034f8 <detectionStage+0x1dc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a37      	ldr	r2, [pc, #220]	@ (80034f8 <detectionStage+0x1dc>)
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	fb03 f202 	mul.w	r2, r3, r2
 8003422:	4b34      	ldr	r3, [pc, #208]	@ (80034f4 <detectionStage+0x1d8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3b01      	subs	r3, #1
 8003428:	fb92 f3f3 	sdiv	r3, r2, r3
 800342c:	4a31      	ldr	r2, [pc, #196]	@ (80034f4 <detectionStage+0x1d8>)
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	3a02      	subs	r2, #2
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	61bb      	str	r3, [r7, #24]
            accumulator_t part2 = ((oMean - mean) * (oMean - mean));
 8003438:	4b2d      	ldr	r3, [pc, #180]	@ (80034f0 <detectionStage+0x1d4>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	4a2b      	ldr	r2, [pc, #172]	@ (80034f0 <detectionStage+0x1d4>)
 8003444:	8812      	ldrh	r2, [r2, #0]
 8003446:	4611      	mov	r1, r2
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	1a52      	subs	r2, r2, r1
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
            accumulator_t part3 = ((dataPoint.magnitude - mean) * (dataPoint.magnitude - mean)) / count;
 8003452:	893b      	ldrh	r3, [r7, #8]
 8003454:	461a      	mov	r2, r3
 8003456:	4b26      	ldr	r3, [pc, #152]	@ (80034f0 <detectionStage+0x1d4>)
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	893a      	ldrh	r2, [r7, #8]
 800345e:	4611      	mov	r1, r2
 8003460:	4a23      	ldr	r2, [pc, #140]	@ (80034f0 <detectionStage+0x1d4>)
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	1a8a      	subs	r2, r1, r2
 8003466:	fb03 f202 	mul.w	r2, r3, r2
 800346a:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <detectionStage+0x1d8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003472:	613b      	str	r3, [r7, #16]
            std = (accumulator_t)sqrt(part1 + part2 + part3);
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	441a      	add	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	17da      	asrs	r2, r3, #31
 8003480:	469a      	mov	sl, r3
 8003482:	4693      	mov	fp, r2
 8003484:	4650      	mov	r0, sl
 8003486:	4659      	mov	r1, fp
 8003488:	f7ff fec6 	bl	8003218 <sqrt>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <detectionStage+0x1dc>)
 8003492:	601a      	str	r2, [r3, #0]
        }
        if (count > 15)
 8003494:	4b17      	ldr	r3, [pc, #92]	@ (80034f4 <detectionStage+0x1d8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	dd21      	ble.n	80034e0 <detectionStage+0x1c4>
        {
            if ((dataPoint.magnitude - mean) > (std * threshold_int + (std / threshold_frac)))
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	461a      	mov	r2, r3
 80034a0:	4b13      	ldr	r3, [pc, #76]	@ (80034f0 <detectionStage+0x1d4>)
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	1ad2      	subs	r2, r2, r3
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <detectionStage+0x1e0>)
 80034a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <detectionStage+0x1dc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fb03 f101 	mul.w	r1, r3, r1
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <detectionStage+0x1dc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4811      	ldr	r0, [pc, #68]	@ (8003500 <detectionStage+0x1e4>)
 80034bc:	f9b0 0000 	ldrsh.w	r0, [r0]
 80034c0:	fb93 f3f0 	sdiv	r3, r3, r0
 80034c4:	440b      	add	r3, r1
 80034c6:	429a      	cmp	r2, r3
 80034c8:	dd0a      	ble.n	80034e0 <detectionStage+0x1c4>
            {
                // This is a peak
                ring_buffer_queue(outBuff, dataPoint);
 80034ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <detectionStage+0x1e8>)
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034d6:	f000 fb60 	bl	8003b9a <ring_buffer_queue>
                (*nextStage)();
 80034da:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <detectionStage+0x1ec>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4798      	blx	r3
                }
#endif
            }
        }
    }
}
 80034e0:	bf00      	nop
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ea:	bf00      	nop
 80034ec:	20000a44 	.word	0x20000a44
 80034f0:	20000a50 	.word	0x20000a50
 80034f4:	20000a58 	.word	0x20000a58
 80034f8:	20000a54 	.word	0x20000a54
 80034fc:	20000a5c 	.word	0x20000a5c
 8003500:	2000001c 	.word	0x2000001c
 8003504:	20000a48 	.word	0x20000a48
 8003508:	20000a4c 	.word	0x20000a4c

0800350c <initFilterStage>:
    11354,
    -3734,
    -2696};

void initFilterStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 8003518:	4a07      	ldr	r2, [pc, #28]	@ (8003538 <initFilterStage+0x2c>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 800351e:	4a07      	ldr	r2, [pc, #28]	@ (800353c <initFilterStage+0x30>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003524:	4a06      	ldr	r2, [pc, #24]	@ (8003540 <initFilterStage+0x34>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    filteredFile = fopen(DUMP_FILTERED_FILE_NAME, "w+");
#endif
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000a60 	.word	0x20000a60
 800353c:	20000a64 	.word	0x20000a64
 8003540:	20000a68 	.word	0x20000a68

08003544 <filterStage>:

void filterStage(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) == FILTER_TAP_NUM)
 800354a:	4b25      	ldr	r3, [pc, #148]	@ (80035e0 <filterStage+0x9c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fafc 	bl	8003b4c <ring_buffer_num_items>
 8003554:	4603      	mov	r3, r0
 8003556:	2b07      	cmp	r3, #7
 8003558:	d13e      	bne.n	80035d8 <filterStage+0x94>
    {
        accumulator_t sum = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
        data_point_t dataPoint;
        data_point_t out;

        for (int8_t i = 0; i < FILTER_TAP_NUM; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	74fb      	strb	r3, [r7, #19]
 8003562:	e01f      	b.n	80035a4 <filterStage+0x60>
        {
            ring_buffer_peek(inBuff, &dataPoint, i);
 8003564:	4b1e      	ldr	r3, [pc, #120]	@ (80035e0 <filterStage+0x9c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	7cfa      	ldrb	r2, [r7, #19]
 800356a:	f107 0108 	add.w	r1, r7, #8
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fb6e 	bl	8003c50 <ring_buffer_peek>
            if (i == FILTER_TAP_NUM - 1)
 8003574:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003578:	2b06      	cmp	r3, #6
 800357a:	d101      	bne.n	8003580 <filterStage+0x3c>
                out.time = dataPoint.time;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	607b      	str	r3, [r7, #4]
            sum += dataPoint.magnitude * filter_taps[i];
 8003580:	893b      	ldrh	r3, [r7, #8]
 8003582:	4619      	mov	r1, r3
 8003584:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003588:	4a16      	ldr	r2, [pc, #88]	@ (80035e4 <filterStage+0xa0>)
 800358a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4413      	add	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
        for (int8_t i = 0; i < FILTER_TAP_NUM; i++)
 8003598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	74fb      	strb	r3, [r7, #19]
 80035a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	dddb      	ble.n	8003564 <filterStage+0x20>
        }
        out.magnitude = sum >> 16;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	141b      	asrs	r3, r3, #16
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	803b      	strh	r3, [r7, #0]

        ring_buffer_dequeue(inBuff, &dataPoint);
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <filterStage+0x9c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f107 0208 	add.w	r2, r7, #8
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fb1d 	bl	8003bfe <ring_buffer_dequeue>
        ring_buffer_queue(outBuff, out);
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <filterStage+0xa4>)
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	463b      	mov	r3, r7
 80035ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035ce:	f000 fae4 	bl	8003b9a <ring_buffer_queue>
        (*nextStage)();
 80035d2:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <filterStage+0xa8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4798      	blx	r3
                puts("error writing file");
            fflush(filteredFile);
        }
#endif
    }
}
 80035d8:	bf00      	nop
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000a60 	.word	0x20000a60
 80035e4:	20000020 	.word	0x20000020
 80035e8:	20000a64 	.word	0x20000a64
 80035ec:	20000a68 	.word	0x20000a68

080035f0 <initMotionDetectStage>:
static ring_buffer_t *inBuff;
static ring_buffer_t *outBuff;
static void (*nextStage)(void);

void initMotionDetectStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 80035fc:	4a07      	ldr	r2, [pc, #28]	@ (800361c <initMotionDetectStage+0x2c>)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 8003602:	4a07      	ldr	r2, [pc, #28]	@ (8003620 <initMotionDetectStage+0x30>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003608:	4a06      	ldr	r2, [pc, #24]	@ (8003624 <initMotionDetectStage+0x34>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6013      	str	r3, [r2, #0]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000a6c 	.word	0x20000a6c
 8003620:	20000a70 	.word	0x20000a70
 8003624:	20000a74 	.word	0x20000a74

08003628 <motionDetectStage>:

void motionDetectStage(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) >= 15)
 800362e:	4b23      	ldr	r3, [pc, #140]	@ (80036bc <motionDetectStage+0x94>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fa8a 	bl	8003b4c <ring_buffer_num_items>
 8003638:	4603      	mov	r3, r0
 800363a:	2b0e      	cmp	r3, #14
 800363c:	d939      	bls.n	80036b2 <motionDetectStage+0x8a>
    {
        magnitude_t min = maxof(magnitude_t);
 800363e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003642:	82fb      	strh	r3, [r7, #22]
        magnitude_t max = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	82bb      	strh	r3, [r7, #20]
        for (int i = 0; i < 12; i++)
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	e017      	b.n	800367e <motionDetectStage+0x56>
        {
            data_point_t dp;
            ring_buffer_peek(inBuff, &dp, i);
 800364e:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <motionDetectStage+0x94>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f107 0108 	add.w	r1, r7, #8
 800365a:	4618      	mov	r0, r3
 800365c:	f000 faf8 	bl	8003c50 <ring_buffer_peek>
            if (dp.magnitude > max)
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	8aba      	ldrh	r2, [r7, #20]
 8003664:	429a      	cmp	r2, r3
 8003666:	d201      	bcs.n	800366c <motionDetectStage+0x44>
                max = dp.magnitude;
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	82bb      	strh	r3, [r7, #20]
            if (dp.magnitude < min)
 800366c:	893b      	ldrh	r3, [r7, #8]
 800366e:	8afa      	ldrh	r2, [r7, #22]
 8003670:	429a      	cmp	r2, r3
 8003672:	d901      	bls.n	8003678 <motionDetectStage+0x50>
                min = dp.magnitude;
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 12; i++)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	3301      	adds	r3, #1
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b0b      	cmp	r3, #11
 8003682:	dde4      	ble.n	800364e <motionDetectStage+0x26>
        }

        if (max - min > MOTION_THRESHOLD)
 8003684:	8aba      	ldrh	r2, [r7, #20]
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800368e:	dd10      	ble.n	80036b2 <motionDetectStage+0x8a>
        {
            data_point_t dataPoint;
            ring_buffer_dequeue(inBuff, &dataPoint);
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <motionDetectStage+0x94>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	463a      	mov	r2, r7
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fab0 	bl	8003bfe <ring_buffer_dequeue>
            ring_buffer_queue(outBuff, dataPoint);
 800369e:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <motionDetectStage+0x98>)
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	463b      	mov	r3, r7
 80036a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036a8:	f000 fa77 	bl	8003b9a <ring_buffer_queue>
            (*nextStage)();
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <motionDetectStage+0x9c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4798      	blx	r3
        }
    }
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000a6c 	.word	0x20000a6c
 80036c0:	20000a70 	.word	0x20000a70
 80036c4:	20000a74 	.word	0x20000a74

080036c8 <initPostProcessingStage>:
static data_point_t lastDataPoint;
static int16_t timeThreshold = 300; // in ms, this discards steps that are too close in time, 3 steps /s is a reasonable maximum
static void (*stepCallback)(void);

void initPostProcessingStage(ring_buffer_t *pInBuff, void (*stepCallbackIn)(void))
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
    inBuff = pInBuff;
 80036d2:	4a09      	ldr	r2, [pc, #36]	@ (80036f8 <initPostProcessingStage+0x30>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6013      	str	r3, [r2, #0]
    stepCallback = stepCallbackIn;
 80036d8:	4a08      	ldr	r2, [pc, #32]	@ (80036fc <initPostProcessingStage+0x34>)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6013      	str	r3, [r2, #0]
    lastDataPoint.time = 0;
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <initPostProcessingStage+0x38>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	605a      	str	r2, [r3, #4]
    lastDataPoint.magnitude = 0;
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <initPostProcessingStage+0x38>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	801a      	strh	r2, [r3, #0]

#ifdef DUMP_FILE
    postProcFile = fopen(DUMP_POSTPROC_FILE_NAME, "w+");
#endif
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000a78 	.word	0x20000a78
 80036fc:	20000a84 	.word	0x20000a84
 8003700:	20000a7c 	.word	0x20000a7c

08003704 <postProcessingStage>:

void postProcessingStage(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
    if (!ring_buffer_is_empty(inBuff))
 800370a:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <postProcessingStage+0x84>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f9ee 	bl	8003af0 <ring_buffer_is_empty>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d132      	bne.n	8003780 <postProcessingStage+0x7c>
    {
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 800371a:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <postProcessingStage+0x84>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	463a      	mov	r2, r7
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fa6b 	bl	8003bfe <ring_buffer_dequeue>
        if (lastDataPoint.time == 0)
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <postProcessingStage+0x88>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <postProcessingStage+0x3c>
        {
            lastDataPoint = dataPoint;
 8003730:	4b16      	ldr	r3, [pc, #88]	@ (800378c <postProcessingStage+0x88>)
 8003732:	461a      	mov	r2, r3
 8003734:	463b      	mov	r3, r7
 8003736:	e893 0003 	ldmia.w	r3, {r0, r1}
 800373a:	e882 0003 	stmia.w	r2, {r0, r1}
                    lastDataPoint = dataPoint;
                }
            }
        }
    }
}
 800373e:	e01f      	b.n	8003780 <postProcessingStage+0x7c>
            if ((dataPoint.time - lastDataPoint.time) > timeThreshold)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4b12      	ldr	r3, [pc, #72]	@ (800378c <postProcessingStage+0x88>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	4a11      	ldr	r2, [pc, #68]	@ (8003790 <postProcessingStage+0x8c>)
 800374a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800374e:	4293      	cmp	r3, r2
 8003750:	dd0a      	ble.n	8003768 <postProcessingStage+0x64>
                lastDataPoint = dataPoint;
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <postProcessingStage+0x88>)
 8003754:	461a      	mov	r2, r3
 8003756:	463b      	mov	r3, r7
 8003758:	e893 0003 	ldmia.w	r3, {r0, r1}
 800375c:	e882 0003 	stmia.w	r2, {r0, r1}
                (*stepCallback)();
 8003760:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <postProcessingStage+0x90>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4798      	blx	r3
}
 8003766:	e00b      	b.n	8003780 <postProcessingStage+0x7c>
                if (dataPoint.magnitude > lastDataPoint.magnitude)
 8003768:	883a      	ldrh	r2, [r7, #0]
 800376a:	4b08      	ldr	r3, [pc, #32]	@ (800378c <postProcessingStage+0x88>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d906      	bls.n	8003780 <postProcessingStage+0x7c>
                    lastDataPoint = dataPoint;
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <postProcessingStage+0x88>)
 8003774:	461a      	mov	r2, r3
 8003776:	463b      	mov	r3, r7
 8003778:	e893 0003 	ldmia.w	r3, {r0, r1}
 800377c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000a78 	.word	0x20000a78
 800378c:	20000a7c 	.word	0x20000a7c
 8003790:	2000002e 	.word	0x2000002e
 8003794:	20000a84 	.word	0x20000a84

08003798 <sqrt>:
{
 8003798:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800379c:	b08b      	sub	sp, #44	@ 0x2c
 800379e:	af00      	add	r7, sp, #0
 80037a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
  base = 67108864; //2^24
 80037a4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
  y = 0;
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 1; i <= 24; i++)
 80037bc:	f04f 0201 	mov.w	r2, #1
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80037c8:	e03d      	b.n	8003846 <sqrt+0xae>
    y += base;
 80037ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037d2:	eb10 0802 	adds.w	r8, r0, r2
 80037d6:	eb41 0903 	adc.w	r9, r1, r3
 80037da:	e9c7 8904 	strd	r8, r9, [r7, #16]
    if ((y * y) > number)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	fb03 f202 	mul.w	r2, r3, r2
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6939      	ldr	r1, [r7, #16]
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	441a      	add	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	fba3 4503 	umull	r4, r5, r3, r3
 80037f6:	1953      	adds	r3, r2, r5
 80037f8:	461d      	mov	r5, r3
 80037fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037fe:	42a2      	cmp	r2, r4
 8003800:	41ab      	sbcs	r3, r5
 8003802:	da09      	bge.n	8003818 <sqrt+0x80>
      y -= base; // base should not have been added, so we substract again
 8003804:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003808:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800380c:	ebb0 0a02 	subs.w	sl, r0, r2
 8003810:	eb61 0b03 	sbc.w	fp, r1, r3
 8003814:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    base = base >> 1; // shift 1 digit to the right = divide by 2
 8003818:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	0842      	lsrs	r2, r0, #1
 8003826:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800382a:	104b      	asrs	r3, r1, #1
 800382c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (i = 1; i <= 24; i++)
 8003830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003834:	1c51      	adds	r1, r2, #1
 8003836:	6039      	str	r1, [r7, #0]
 8003838:	f143 0300 	adc.w	r3, r3, #0
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003842:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384a:	2a19      	cmp	r2, #25
 800384c:	f173 0300 	sbcs.w	r3, r3, #0
 8003850:	dbbb      	blt.n	80037ca <sqrt+0x32>
  return y;
 8003852:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	372c      	adds	r7, #44	@ 0x2c
 800385c:	46bd      	mov	sp, r7
 800385e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003862:	4770      	bx	lr

08003864 <initPreProcessStage>:
static uint8_t samplingPeriod = 80;    //in ms, this can be smaller than the actual sampling frequency, but it will result in more computations
static uint16_t timeScalingFactor = 1; //use this for adjusting time to ms, in case the clock has higher precision
static time_t lastSampleTime = -1;

void initPreProcessStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 8003870:	4a07      	ldr	r2, [pc, #28]	@ (8003890 <initPreProcessStage+0x2c>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 8003876:	4a07      	ldr	r2, [pc, #28]	@ (8003894 <initPreProcessStage+0x30>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 800387c:	4a06      	ldr	r2, [pc, #24]	@ (8003898 <initPreProcessStage+0x34>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    magnitudeFile = fopen(DUMP_MAGNITUDE_FILE_NAME, "w+");
    interpolatedFile = fopen(DUMP_INTERPOLATED_FILE_NAME, "w+");
#endif
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000a88 	.word	0x20000a88
 8003894:	20000a8c 	.word	0x20000a8c
 8003898:	20000a90 	.word	0x20000a90

0800389c <linearInterpolate>:

static data_point_t linearInterpolate(data_point_t dp1, data_point_t dp2, int64_t interpTime)
{
 800389c:	b082      	sub	sp, #8
 800389e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	1d38      	adds	r0, r7, #4
 80038aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80038ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    magnitude_t mag = (dp1.magnitude + ((dp2.magnitude - dp1.magnitude) / (dp2.time - dp1.time)) * (interpTime - dp1.time));
 80038b0:	88b9      	ldrh	r1, [r7, #4]
 80038b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80038b4:	461a      	mov	r2, r3
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	1ac3      	subs	r3, r0, r3
 80038c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80038c4:	b298      	uxth	r0, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	17da      	asrs	r2, r3, #31
 80038ca:	461c      	mov	r4, r3
 80038cc:	4615      	mov	r5, r2
 80038ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038d2:	ebb2 0804 	subs.w	r8, r2, r4
 80038d6:	eb63 0905 	sbc.w	r9, r3, r5
 80038da:	fa1f f388 	uxth.w	r3, r8
 80038de:	fb10 f303 	smulbb	r3, r0, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	440b      	add	r3, r1
 80038e6:	83fb      	strh	r3, [r7, #30]
    data_point_t interp;
    interp.time = interpTime;
 80038e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ea:	61bb      	str	r3, [r7, #24]
    interp.magnitude = mag;
 80038ec:	8bfb      	ldrh	r3, [r7, #30]
 80038ee:	82bb      	strh	r3, [r7, #20]
    return interp;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	3724      	adds	r7, #36	@ 0x24
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800390a:	b002      	add	sp, #8
 800390c:	4770      	bx	lr
	...

08003910 <outPutDataPoint>:

static void outPutDataPoint(data_point_t dp)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	463b      	mov	r3, r7
 8003918:	e883 0003 	stmia.w	r3, {r0, r1}
    lastSampleTime = dp.time;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <outPutDataPoint+0x30>)
 8003920:	6013      	str	r3, [r2, #0]
    ring_buffer_queue(outBuff, dp);
 8003922:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <outPutDataPoint+0x34>)
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	463b      	mov	r3, r7
 8003928:	e893 0006 	ldmia.w	r3, {r1, r2}
 800392c:	f000 f935 	bl	8003b9a <ring_buffer_queue>
    (*nextStage)();
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <outPutDataPoint+0x38>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4798      	blx	r3
        if (!fprintf(interpolatedFile, "%lld, %lld\n", dp.time, dp.magnitude))
            puts("error writing file");
        fflush(interpolatedFile);
    }
#endif
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000034 	.word	0x20000034
 8003944:	20000a8c 	.word	0x20000a8c
 8003948:	20000a90 	.word	0x20000a90

0800394c <preProcessSample>:

void preProcessSample(time_t time, accel_t x, accel_t y, accel_t z)
{
 800394c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003950:	b096      	sub	sp, #88	@ 0x58
 8003952:	af04      	add	r7, sp, #16
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	4608      	mov	r0, r1
 8003958:	4611      	mov	r1, r2
 800395a:	461a      	mov	r2, r3
 800395c:	4603      	mov	r3, r0
 800395e:	817b      	strh	r3, [r7, #10]
 8003960:	460b      	mov	r3, r1
 8003962:	813b      	strh	r3, [r7, #8]
 8003964:	4613      	mov	r3, r2
 8003966:	80fb      	strh	r3, [r7, #6]
    time = time / timeScalingFactor;
 8003968:	4b5d      	ldr	r3, [pc, #372]	@ (8003ae0 <preProcessSample+0x194>)
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	fb93 f3f2 	sdiv	r3, r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

    magnitude_t magnitude = (magnitude_t)sqrt((accumulator_t)(x * x + y * y + z * z));
 8003976:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800397a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800397e:	fb03 f202 	mul.w	r2, r3, r2
 8003982:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003986:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	441a      	add	r2, r3
 8003990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003994:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	17da      	asrs	r2, r3, #31
 80039a0:	4698      	mov	r8, r3
 80039a2:	4691      	mov	r9, r2
 80039a4:	4640      	mov	r0, r8
 80039a6:	4649      	mov	r1, r9
 80039a8:	f7ff fef6 	bl	8003798 <sqrt>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4613      	mov	r3, r2
 80039b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    data_point_t dataPoint;
    dataPoint.time = time;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    dataPoint.magnitude = magnitude;
 80039ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80039be:	86bb      	strh	r3, [r7, #52]	@ 0x34
#endif

#ifdef SKIP_INTERPOLATION
    outPutDataPoint(dataPoint);
#else
    ring_buffer_queue(inBuff, dataPoint);
 80039c0:	4b48      	ldr	r3, [pc, #288]	@ (8003ae4 <preProcessSample+0x198>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80039cc:	f000 f8e5 	bl	8003b9a <ring_buffer_queue>
    if (ring_buffer_num_items(inBuff) >= 2)
 80039d0:	4b44      	ldr	r3, [pc, #272]	@ (8003ae4 <preProcessSample+0x198>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f8b9 	bl	8003b4c <ring_buffer_num_items>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d97a      	bls.n	8003ad6 <preProcessSample+0x18a>
    {
        data_point_t dp1;
        data_point_t dp2;
        // take last 2 elements
        ring_buffer_peek(inBuff, &dp1, 0);
 80039e0:	4b40      	ldr	r3, [pc, #256]	@ (8003ae4 <preProcessSample+0x198>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80039e8:	2200      	movs	r2, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f930 	bl	8003c50 <ring_buffer_peek>
        ring_buffer_peek(inBuff, &dp2, 1);
 80039f0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ae4 <preProcessSample+0x198>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80039f8:	2201      	movs	r2, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f928 	bl	8003c50 <ring_buffer_peek>
        if (lastSampleTime == -1)
 8003a00:	4b39      	ldr	r3, [pc, #228]	@ (8003ae8 <preProcessSample+0x19c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d102      	bne.n	8003a10 <preProcessSample+0xc4>
            lastSampleTime = dp1.time;
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ae8 <preProcessSample+0x19c>)
 8003a0e:	6013      	str	r3, [r2, #0]

        if (dp2.time - lastSampleTime == samplingPeriod)
 8003a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a12:	4b35      	ldr	r3, [pc, #212]	@ (8003ae8 <preProcessSample+0x19c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	4a34      	ldr	r2, [pc, #208]	@ (8003aec <preProcessSample+0x1a0>)
 8003a1a:	7812      	ldrb	r2, [r2, #0]
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d106      	bne.n	8003a2e <preProcessSample+0xe2>
        {
            // no need to interpolate!
            outPutDataPoint(dp2);
 8003a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a28:	f7ff ff72 	bl	8003910 <outPutDataPoint>
 8003a2c:	e04b      	b.n	8003ac6 <preProcessSample+0x17a>
        }
        else if (dp2.time - lastSampleTime > samplingPeriod)
 8003a2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae8 <preProcessSample+0x19c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	4a2d      	ldr	r2, [pc, #180]	@ (8003aec <preProcessSample+0x1a0>)
 8003a38:	7812      	ldrb	r2, [r2, #0]
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	dd43      	ble.n	8003ac6 <preProcessSample+0x17a>
        {
            int8_t numberOfPoints = 1 + ((((dp2.time - lastSampleTime)) - 1) / samplingPeriod); //number of points to be generated, ceiled
 8003a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a40:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <preProcessSample+0x19c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <preProcessSample+0x1a0>)
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

            for (int8_t i = 1; i < numberOfPoints; i++)
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003a60:	e02b      	b.n	8003aba <preProcessSample+0x16e>
            {
                time_t interpTime = lastSampleTime + samplingPeriod;
 8003a62:	4b22      	ldr	r3, [pc, #136]	@ (8003aec <preProcessSample+0x1a0>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae8 <preProcessSample+0x19c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

                if (dp1.time <= interpTime && interpTime <= dp2.time)
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	db19      	blt.n	8003aac <preProcessSample+0x160>
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dc15      	bgt.n	8003aac <preProcessSample+0x160>
                {
                    data_point_t interpolated = linearInterpolate(dp1, dp2, interpTime);
 8003a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a82:	17da      	asrs	r2, r3, #31
 8003a84:	461c      	mov	r4, r3
 8003a86:	4615      	mov	r5, r2
 8003a88:	f107 0014 	add.w	r0, r7, #20
 8003a8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003a9a:	ca06      	ldmia	r2, {r1, r2}
 8003a9c:	f7ff fefe 	bl	800389c <linearInterpolate>
                    outPutDataPoint(interpolated);
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aa8:	f7ff ff32 	bl	8003910 <outPutDataPoint>
            for (int8_t i = 1; i < numberOfPoints; i++)
 8003aac:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003aba:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 8003abe:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	dbcd      	blt.n	8003a62 <preProcessSample+0x116>
                }
            }
        }
        // remove oldest element in queue
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 8003ac6:	4b07      	ldr	r3, [pc, #28]	@ (8003ae4 <preProcessSample+0x198>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f107 021c 	add.w	r2, r7, #28
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f894 	bl	8003bfe <ring_buffer_dequeue>
    }
#endif
}
 8003ad6:	bf00      	nop
 8003ad8:	3748      	adds	r7, #72	@ 0x48
 8003ada:	46bd      	mov	sp, r7
 8003adc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ae0:	20000032 	.word	0x20000032
 8003ae4:	20000a88 	.word	0x20000a88
 8003ae8:	20000034 	.word	0x20000034
 8003aec:	20000030 	.word	0x20000030

08003af0 <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	b2db      	uxtb	r3, r3
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  buffer->head_index = 0;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, data_point_t data)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Is buffer full? */
  if (ring_buffer_is_full(buffer))
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ffb6 	bl	8003b1a <ring_buffer_is_full>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <ring_buffer_queue+0x30>
  {
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	1d3a      	adds	r2, r7, #4
 8003bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bdc:	e883 0003 	stmia.w	r3, {r0, r1}
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003be6:	3301      	adds	r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, data_point_t *data)
{
 8003bfe:	b590      	push	{r4, r7, lr}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  if (ring_buffer_is_empty(buffer))
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ff71 	bl	8003af0 <ring_buffer_is_empty>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <ring_buffer_dequeue+0x1a>
  {
    /* No items */
    return 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e017      	b.n	8003c48 <ring_buffer_dequeue+0x4a>
  }

  *data = buffer->buffer[buffer->tail_index];
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003c1e:	6839      	ldr	r1, [r7, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	460c      	mov	r4, r1
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c2c:	e884 0003 	stmia.w	r4, {r0, r1}
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003c36:	3301      	adds	r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return 1;
 8003c46:	2301      	movs	r3, #1
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd90      	pop	{r4, r7, pc}

08003c50 <ring_buffer_peek>:

ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, data_point_t *data, ring_buffer_size_t index)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if (index >= ring_buffer_num_items(buffer))
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f7ff ff74 	bl	8003b4c <ring_buffer_num_items>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d301      	bcc.n	8003c72 <ring_buffer_peek+0x22>
  {
    /* No items at index */
    return 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e013      	b.n	8003c9a <ring_buffer_peek+0x4a>
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	75fb      	strb	r3, [r7, #23]
  *data = buffer->buffer[data_index];
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c94:	e884 0003 	stmia.w	r4, {r0, r1}
  return 1;
 8003c98:	2301      	movs	r3, #1
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd90      	pop	{r4, r7, pc}
	...

08003ca4 <initScoringStage>:

static ring_buffer_size_t windowSize = 10;
static ring_buffer_size_t midpoint = 5; //half of size

void initScoringStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 8003cb0:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <initScoringStage+0x2c>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 8003cb6:	4a07      	ldr	r2, [pc, #28]	@ (8003cd4 <initScoringStage+0x30>)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003cbc:	4a06      	ldr	r2, [pc, #24]	@ (8003cd8 <initScoringStage+0x34>)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    scoringFile = fopen(DUMP_SCORING_FILE_NAME, "w+");
#endif
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000a94 	.word	0x20000a94
 8003cd4:	20000a98 	.word	0x20000a98
 8003cd8:	20000a9c 	.word	0x20000a9c

08003cdc <scoringStage>:

void scoringStage(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) == windowSize)
 8003ce2:	4b38      	ldr	r3, [pc, #224]	@ (8003dc4 <scoringStage+0xe8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ff30 	bl	8003b4c <ring_buffer_num_items>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b35      	ldr	r3, [pc, #212]	@ (8003dc8 <scoringStage+0xec>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d161      	bne.n	8003dbc <scoringStage+0xe0>
    {
        magnitude_t diffLeft = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	83fb      	strh	r3, [r7, #30]
        magnitude_t diffRight = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	83bb      	strh	r3, [r7, #28]
        data_point_t midpointData;
        ring_buffer_peek(inBuff, &midpointData, midpoint);
 8003d00:	4b30      	ldr	r3, [pc, #192]	@ (8003dc4 <scoringStage+0xe8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a31      	ldr	r2, [pc, #196]	@ (8003dcc <scoringStage+0xf0>)
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	f107 0110 	add.w	r1, r7, #16
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff9f 	bl	8003c50 <ring_buffer_peek>
        data_point_t dataPoint;
        for (ring_buffer_size_t i = 0; i < midpoint; i++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	76fb      	strb	r3, [r7, #27]
 8003d16:	e011      	b.n	8003d3c <scoringStage+0x60>
        {
            ring_buffer_peek(inBuff, &dataPoint, i);
 8003d18:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc4 <scoringStage+0xe8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	7efa      	ldrb	r2, [r7, #27]
 8003d1e:	f107 0108 	add.w	r1, r7, #8
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ff94 	bl	8003c50 <ring_buffer_peek>
            diffLeft += midpointData.magnitude - dataPoint.magnitude;
 8003d28:	8a3a      	ldrh	r2, [r7, #16]
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	8bfb      	ldrh	r3, [r7, #30]
 8003d32:	4413      	add	r3, r2
 8003d34:	83fb      	strh	r3, [r7, #30]
        for (ring_buffer_size_t i = 0; i < midpoint; i++)
 8003d36:	7efb      	ldrb	r3, [r7, #27]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	76fb      	strb	r3, [r7, #27]
 8003d3c:	4b23      	ldr	r3, [pc, #140]	@ (8003dcc <scoringStage+0xf0>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	7efa      	ldrb	r2, [r7, #27]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3e8      	bcc.n	8003d18 <scoringStage+0x3c>
        }
        for (ring_buffer_size_t j = midpoint + 1; j < windowSize; j++)
 8003d46:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <scoringStage+0xf0>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	76bb      	strb	r3, [r7, #26]
 8003d4e:	e011      	b.n	8003d74 <scoringStage+0x98>
        {
            ring_buffer_peek(inBuff, &dataPoint, j);
 8003d50:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc4 <scoringStage+0xe8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	7eba      	ldrb	r2, [r7, #26]
 8003d56:	f107 0108 	add.w	r1, r7, #8
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ff78 	bl	8003c50 <ring_buffer_peek>
            diffRight += midpointData.magnitude - dataPoint.magnitude;
 8003d60:	8a3a      	ldrh	r2, [r7, #16]
 8003d62:	893b      	ldrh	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	8bbb      	ldrh	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	83bb      	strh	r3, [r7, #28]
        for (ring_buffer_size_t j = midpoint + 1; j < windowSize; j++)
 8003d6e:	7ebb      	ldrb	r3, [r7, #26]
 8003d70:	3301      	adds	r3, #1
 8003d72:	76bb      	strb	r3, [r7, #26]
 8003d74:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <scoringStage+0xec>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	7eba      	ldrb	r2, [r7, #26]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3e8      	bcc.n	8003d50 <scoringStage+0x74>
        }
        magnitude_t scorePeak = (diffLeft + diffRight) / (windowSize - 1);
 8003d7e:	8bfa      	ldrh	r2, [r7, #30]
 8003d80:	8bbb      	ldrh	r3, [r7, #28]
 8003d82:	441a      	add	r2, r3
 8003d84:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <scoringStage+0xec>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d8e:	833b      	strh	r3, [r7, #24]
        data_point_t out;
        out.time = midpointData.time;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	607b      	str	r3, [r7, #4]
        out.magnitude = scorePeak;
 8003d94:	8b3b      	ldrh	r3, [r7, #24]
 8003d96:	803b      	strh	r3, [r7, #0]
        ring_buffer_queue(outBuff, out);
 8003d98:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <scoringStage+0xf4>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003da2:	f7ff fefa 	bl	8003b9a <ring_buffer_queue>
        ring_buffer_dequeue(inBuff, &midpointData);
 8003da6:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <scoringStage+0xe8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f107 0210 	add.w	r2, r7, #16
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ff24 	bl	8003bfe <ring_buffer_dequeue>
        (*nextStage)();
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <scoringStage+0xf8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4798      	blx	r3
                puts("error writing file");
            fflush(scoringFile);
        }
#endif
    }
}
 8003dbc:	bf00      	nop
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000a94 	.word	0x20000a94
 8003dc8:	20000038 	.word	0x20000038
 8003dcc:	20000039 	.word	0x20000039
 8003dd0:	20000a98 	.word	0x20000a98
 8003dd4:	20000a9c 	.word	0x20000a9c

08003dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ddc:	f7ff f988 	bl	80030f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003de0:	480c      	ldr	r0, [pc, #48]	@ (8003e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003de2:	490d      	ldr	r1, [pc, #52]	@ (8003e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003de4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e1c <LoopForever+0xe>)
  movs r3, #0
 8003de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de8:	e002      	b.n	8003df0 <LoopCopyDataInit>

08003dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dee:	3304      	adds	r3, #4

08003df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003df4:	d3f9      	bcc.n	8003dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003df6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003df8:	4c0a      	ldr	r4, [pc, #40]	@ (8003e24 <LoopForever+0x16>)
  movs r3, #0
 8003dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dfc:	e001      	b.n	8003e02 <LoopFillZerobss>

08003dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e00:	3204      	adds	r2, #4

08003e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e04:	d3fb      	bcc.n	8003dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e06:	f008 f8d3 	bl	800bfb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e0a:	f7fe fa31 	bl	8002270 <main>

08003e0e <LoopForever>:

LoopForever:
    b LoopForever
 8003e0e:	e7fe      	b.n	8003e0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e18:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003e1c:	080104f8 	.word	0x080104f8
  ldr r2, =_sbss
 8003e20:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003e24:	20000bf0 	.word	0x20000bf0

08003e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e28:	e7fe      	b.n	8003e28 <ADC1_IRQHandler>

08003e2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e34:	2003      	movs	r0, #3
 8003e36:	f001 f9af 	bl	8005198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e3a:	200f      	movs	r0, #15
 8003e3c:	f000 f80e 	bl	8003e5c <HAL_InitTick>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	71fb      	strb	r3, [r7, #7]
 8003e4a:	e001      	b.n	8003e50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e4c:	f7fe fda2 	bl	8002994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e50:	79fb      	ldrb	r3, [r7, #7]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e68:	4b17      	ldr	r3, [pc, #92]	@ (8003ec8 <HAL_InitTick+0x6c>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d023      	beq.n	8003eb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e70:	4b16      	ldr	r3, [pc, #88]	@ (8003ecc <HAL_InitTick+0x70>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <HAL_InitTick+0x6c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 f9bb 	bl	8005202 <HAL_SYSTICK_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0f      	cmp	r3, #15
 8003e96:	d809      	bhi.n	8003eac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	f001 f985 	bl	80051ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed0 <HAL_InitTick+0x74>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e007      	b.n	8003ebc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e004      	b.n	8003ebc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e001      	b.n	8003ebc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000040 	.word	0x20000040
 8003ecc:	20000018 	.word	0x20000018
 8003ed0:	2000003c 	.word	0x2000003c

08003ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <HAL_IncTick+0x20>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <HAL_IncTick+0x24>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <HAL_IncTick+0x24>)
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000040 	.word	0x20000040
 8003ef8:	20000aa0 	.word	0x20000aa0

08003efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return uwTick;
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <HAL_GetTick+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000aa0 	.word	0x20000aa0

08003f14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3360      	adds	r3, #96	@ 0x60
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <LL_ADC_SetOffset+0x44>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	03fff000 	.word	0x03fff000

08003fc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3360      	adds	r3, #96	@ 0x60
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3360      	adds	r3, #96	@ 0x60
 8004000:	461a      	mov	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	431a      	orrs	r2, r3
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3330      	adds	r3, #48	@ 0x30
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	4413      	add	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	211f      	movs	r1, #31
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	401a      	ands	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	f003 011f 	and.w	r1, r3, #31
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	431a      	orrs	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3314      	adds	r3, #20
 80040b4:	461a      	mov	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	0e5b      	lsrs	r3, r3, #25
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	4413      	add	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	0d1b      	lsrs	r3, r3, #20
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2107      	movs	r1, #7
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	401a      	ands	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	0d1b      	lsrs	r3, r3, #20
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	431a      	orrs	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004114:	43db      	mvns	r3, r3
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f003 0318 	and.w	r3, r3, #24
 800411e:	4908      	ldr	r1, [pc, #32]	@ (8004140 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004120:	40d9      	lsrs	r1, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	400b      	ands	r3, r1
 8004126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412a:	431a      	orrs	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	0007ffff 	.word	0x0007ffff

08004144 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004154:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6093      	str	r3, [r2, #8]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800417c:	d101      	bne.n	8004182 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80041a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041cc:	d101      	bne.n	80041d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <LL_ADC_IsEnabled+0x18>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <LL_ADC_IsEnabled+0x1a>
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800423e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d101      	bne.n	800426e <LL_ADC_REG_IsConversionOngoing+0x18>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d101      	bne.n	8004294 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e126      	b.n	800450c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fe fb85 	bl	80029dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff3f 	bl	8004168 <LL_ADC_IsDeepPowerDownEnabled>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff25 	bl	8004144 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ff5a 	bl	80041b8 <LL_ADC_IsInternalRegulatorEnabled>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d115      	bne.n	8004336 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff ff3e 	bl	8004190 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004314:	4b7f      	ldr	r3, [pc, #508]	@ (8004514 <HAL_ADC_Init+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	4a7f      	ldr	r2, [pc, #508]	@ (8004518 <HAL_ADC_Init+0x274>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	3301      	adds	r3, #1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004328:	e002      	b.n	8004330 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3b01      	subs	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f9      	bne.n	800432a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff3c 	bl	80041b8 <LL_ADC_IsInternalRegulatorEnabled>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434a:	f043 0210 	orr.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff75 	bl	8004256 <LL_ADC_REG_IsConversionOngoing>
 800436c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	f040 80bf 	bne.w	80044fa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 80bb 	bne.w	80044fa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004388:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800438c:	f043 0202 	orr.w	r2, r3, #2
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ff35 	bl	8004208 <LL_ADC_IsEnabled>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043a4:	485d      	ldr	r0, [pc, #372]	@ (800451c <HAL_ADC_Init+0x278>)
 80043a6:	f7ff ff2f 	bl	8004208 <LL_ADC_IsEnabled>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d105      	bne.n	80043bc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	485a      	ldr	r0, [pc, #360]	@ (8004520 <HAL_ADC_Init+0x27c>)
 80043b8:	f7ff fdac 	bl	8003f14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7e5b      	ldrb	r3, [r3, #25]
 80043c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80043cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80043d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d106      	bne.n	80043f8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	3b01      	subs	r3, #1
 80043f0:	045b      	lsls	r3, r3, #17
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	4b42      	ldr	r3, [pc, #264]	@ (8004524 <HAL_ADC_Init+0x280>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	69b9      	ldr	r1, [r7, #24]
 8004424:	430b      	orrs	r3, r1
 8004426:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff25 	bl	800427c <LL_ADC_INJ_IsConversionOngoing>
 8004432:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d13d      	bne.n	80044b6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d13a      	bne.n	80044b6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004444:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800444c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800445c:	f023 0302 	bic.w	r3, r3, #2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	430b      	orrs	r3, r1
 8004468:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004470:	2b01      	cmp	r3, #1
 8004472:	d118      	bne.n	80044a6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800447e:	f023 0304 	bic.w	r3, r3, #4
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800448a:	4311      	orrs	r1, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004490:	4311      	orrs	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004496:	430a      	orrs	r2, r1
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	611a      	str	r2, [r3, #16]
 80044a4:	e007      	b.n	80044b6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10c      	bne.n	80044d8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	f023 010f 	bic.w	r1, r3, #15
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80044d6:	e007      	b.n	80044e8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 020f 	bic.w	r2, r2, #15
 80044e6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ec:	f023 0303 	bic.w	r3, r3, #3
 80044f0:	f043 0201 	orr.w	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80044f8:	e007      	b.n	800450a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	f043 0210 	orr.w	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800450a:	7ffb      	ldrb	r3, [r7, #31]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000018 	.word	0x20000018
 8004518:	053e2d63 	.word	0x053e2d63
 800451c:	50040000 	.word	0x50040000
 8004520:	50040300 	.word	0x50040300
 8004524:	fff0c007 	.word	0xfff0c007

08004528 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fe8e 	bl	8004256 <LL_ADC_REG_IsConversionOngoing>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d14f      	bne.n	80045e0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_ADC_Start+0x26>
 800454a:	2302      	movs	r3, #2
 800454c:	e04b      	b.n	80045e6 <HAL_ADC_Start+0xbe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fcc8 	bl	8004eec <ADC_Enable>
 800455c:	4603      	mov	r3, r0
 800455e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d137      	bne.n	80045d6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004586:	d106      	bne.n	8004596 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458c:	f023 0206 	bic.w	r2, r3, #6
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	659a      	str	r2, [r3, #88]	@ 0x58
 8004594:	e002      	b.n	800459c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	221c      	movs	r2, #28
 80045a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fe2d 	bl	800422e <LL_ADC_REG_StartConversion>
 80045d4:	e006      	b.n	80045e4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80045de:	e001      	b.n	80045e4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
 80045e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d102      	bne.n	8004606 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004600:	2308      	movs	r3, #8
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e010      	b.n	8004628 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e06f      	b.n	8004704 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8004624:	2304      	movs	r3, #4
 8004626:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004628:	f7ff fc68 	bl	8003efc <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800462e:	e021      	b.n	8004674 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d01d      	beq.n	8004674 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004638:	f7ff fc60 	bl	8003efc <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <HAL_ADC_PollForConversion+0x60>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d112      	bne.n	8004674 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e047      	b.n	8004704 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0d6      	beq.n	8004630 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004686:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fcc7 	bl	8004026 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01c      	beq.n	80046d8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7e5b      	ldrb	r3, [r3, #25]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d118      	bne.n	80046d8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d111      	bne.n	80046d8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d104      	bne.n	80046f0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2208      	movs	r2, #8
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e008      	b.n	8004702 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	220c      	movs	r2, #12
 8004700:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b0b6      	sub	sp, #216	@ 0xd8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x22>
 8004746:	2302      	movs	r3, #2
 8004748:	e3bb      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x79a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fd7d 	bl	8004256 <LL_ADC_REG_IsConversionOngoing>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 83a0 	bne.w	8004ea4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d824      	bhi.n	80047be <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	3b02      	subs	r3, #2
 800477a:	2b03      	cmp	r3, #3
 800477c:	d81b      	bhi.n	80047b6 <HAL_ADC_ConfigChannel+0x8e>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <HAL_ADC_ConfigChannel+0x5c>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004795 	.word	0x08004795
 8004788:	0800479d 	.word	0x0800479d
 800478c:	080047a5 	.word	0x080047a5
 8004790:	080047ad 	.word	0x080047ad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004794:	230c      	movs	r3, #12
 8004796:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800479a:	e010      	b.n	80047be <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800479c:	2312      	movs	r3, #18
 800479e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047a2:	e00c      	b.n	80047be <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80047a4:	2318      	movs	r3, #24
 80047a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047aa:	e008      	b.n	80047be <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80047ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047b4:	e003      	b.n	80047be <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80047b6:	2306      	movs	r3, #6
 80047b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80047bc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80047cc:	f7ff fc3e 	bl	800404c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fd3e 	bl	8004256 <LL_ADC_REG_IsConversionOngoing>
 80047da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fd4a 	bl	800427c <LL_ADC_INJ_IsConversionOngoing>
 80047e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 81a4 	bne.w	8004b3e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 819f 	bne.w	8004b3e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	461a      	mov	r2, r3
 800480e:	f7ff fc49 	bl	80040a4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695a      	ldr	r2, [r3, #20]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	08db      	lsrs	r3, r3, #3
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d00a      	beq.n	800484a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6919      	ldr	r1, [r3, #16]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004844:	f7ff fb9a 	bl	8003f7c <LL_ADC_SetOffset>
 8004848:	e179      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fbb7 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004856:	4603      	mov	r3, r0
 8004858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x14e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fbac 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 800486c:	4603      	mov	r3, r0
 800486e:	0e9b      	lsrs	r3, r3, #26
 8004870:	f003 021f 	and.w	r2, r3, #31
 8004874:	e01e      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x18c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fba1 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004882:	4603      	mov	r3, r0
 8004884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004898:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800489c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80048a4:	2320      	movs	r3, #32
 80048a6:	e004      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80048a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x1a4>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	0e9b      	lsrs	r3, r3, #26
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	e018      	b.n	80048fe <HAL_ADC_ConfigChannel+0x1d6>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80048e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80048e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80048f0:	2320      	movs	r3, #32
 80048f2:	e004      	b.n	80048fe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80048f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048fe:	429a      	cmp	r2, r3
 8004900:	d106      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fb70 	bl	8003ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fb54 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 800491c:	4603      	mov	r3, r0
 800491e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <HAL_ADC_ConfigChannel+0x214>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2101      	movs	r1, #1
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fb49 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004932:	4603      	mov	r3, r0
 8004934:	0e9b      	lsrs	r3, r3, #26
 8004936:	f003 021f 	and.w	r2, r3, #31
 800493a:	e01e      	b.n	800497a <HAL_ADC_ConfigChannel+0x252>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fb3e 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004948:	4603      	mov	r3, r0
 800494a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800495a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800495e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800496a:	2320      	movs	r3, #32
 800496c:	e004      	b.n	8004978 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800496e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x26a>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	0e9b      	lsrs	r3, r3, #26
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	e018      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x29c>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80049a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80049ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80049b6:	2320      	movs	r3, #32
 80049b8:	e004      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80049ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049be:	fab3 f383 	clz	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d106      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2101      	movs	r1, #1
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fb0d 	bl	8003ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff faf1 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x2da>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fae6 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 80049f8:	4603      	mov	r3, r0
 80049fa:	0e9b      	lsrs	r3, r3, #26
 80049fc:	f003 021f 	and.w	r2, r3, #31
 8004a00:	e01e      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x318>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2102      	movs	r1, #2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fadb 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004a30:	2320      	movs	r3, #32
 8004a32:	e004      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a38:	fab3 f383 	clz	r3, r3
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x330>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	e014      	b.n	8004a82 <HAL_ADC_ConfigChannel+0x35a>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004a74:	2320      	movs	r3, #32
 8004a76:	e004      	b.n	8004a82 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a7c:	fab3 f383 	clz	r3, r3
 8004a80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d106      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff faae 	bl	8003ff0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2103      	movs	r1, #3
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fa92 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x398>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2103      	movs	r1, #3
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fa87 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	0e9b      	lsrs	r3, r3, #26
 8004aba:	f003 021f 	and.w	r2, r3, #31
 8004abe:	e017      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x3c8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fa7c 	bl	8003fc4 <LL_ADC_GetOffsetChannel>
 8004acc:	4603      	mov	r3, r0
 8004ace:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ada:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004ae2:	2320      	movs	r3, #32
 8004ae4:	e003      	b.n	8004aee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae8:	fab3 f383 	clz	r3, r3
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x3e0>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	e011      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x404>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b18:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004b1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004b20:	2320      	movs	r3, #32
 8004b22:	e003      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d106      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2103      	movs	r1, #3
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fa59 	bl	8003ff0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fb60 	bl	8004208 <LL_ADC_IsEnabled>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 8140 	bne.w	8004dd0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f7ff facd 	bl	80040fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4a8f      	ldr	r2, [pc, #572]	@ (8004da4 <HAL_ADC_ConfigChannel+0x67c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	f040 8131 	bne.w	8004dd0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10b      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x46e>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	0e9b      	lsrs	r3, r3, #26
 8004b84:	3301      	adds	r3, #1
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2b09      	cmp	r3, #9
 8004b8c:	bf94      	ite	ls
 8004b8e:	2301      	movls	r3, #1
 8004b90:	2300      	movhi	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	e019      	b.n	8004bca <HAL_ADC_ConfigChannel+0x4a2>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b9e:	fa93 f3a3 	rbit	r3, r3
 8004ba2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004bae:	2320      	movs	r3, #32
 8004bb0:	e003      	b.n	8004bba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bb4:	fab3 f383 	clz	r3, r3
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2b09      	cmp	r3, #9
 8004bc2:	bf94      	ite	ls
 8004bc4:	2301      	movls	r3, #1
 8004bc6:	2300      	movhi	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d079      	beq.n	8004cc2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x4c2>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	3301      	adds	r3, #1
 8004be2:	069b      	lsls	r3, r3, #26
 8004be4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004be8:	e015      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x4ee>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bfa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004c02:	2320      	movs	r3, #32
 8004c04:	e003      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	069b      	lsls	r3, r3, #26
 8004c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x50e>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	0e9b      	lsrs	r3, r3, #26
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	e017      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x53e>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004c4e:	2320      	movs	r3, #32
 8004c50:	e003      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c54:	fab3 f383 	clz	r3, r3
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2101      	movs	r1, #1
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	ea42 0103 	orr.w	r1, r2, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x564>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	0e9b      	lsrs	r3, r3, #26
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f003 021f 	and.w	r2, r3, #31
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	051b      	lsls	r3, r3, #20
 8004c8a:	e018      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x596>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	fa93 f3a3 	rbit	r3, r3
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	e003      	b.n	8004cb0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f003 021f 	and.w	r2, r3, #31
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	e081      	b.n	8004dc6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x5b6>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	0e9b      	lsrs	r3, r3, #26
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	069b      	lsls	r3, r3, #26
 8004cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cdc:	e015      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x5e2>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	e003      	b.n	8004d02 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	3301      	adds	r3, #1
 8004d04:	069b      	lsls	r3, r3, #26
 8004d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x602>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	0e9b      	lsrs	r3, r3, #26
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2101      	movs	r1, #1
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	e017      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x632>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	61bb      	str	r3, [r7, #24]
  return result;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004d42:	2320      	movs	r3, #32
 8004d44:	e003      	b.n	8004d4e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	ea42 0103 	orr.w	r1, r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x65e>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	0e9b      	lsrs	r3, r3, #26
 8004d70:	3301      	adds	r3, #1
 8004d72:	f003 021f 	and.w	r2, r3, #31
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b1e      	subs	r3, #30
 8004d7e:	051b      	lsls	r3, r3, #20
 8004d80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d84:	e01e      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x69c>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	60fb      	str	r3, [r7, #12]
  return result;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004d9e:	2320      	movs	r3, #32
 8004da0:	e006      	b.n	8004db0 <HAL_ADC_ConfigChannel+0x688>
 8004da2:	bf00      	nop
 8004da4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	3301      	adds	r3, #1
 8004db2:	f003 021f 	and.w	r2, r3, #31
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	3b1e      	subs	r3, #30
 8004dbe:	051b      	lsls	r3, r3, #20
 8004dc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f7ff f96a 	bl	80040a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8004ecc <HAL_ADC_ConfigChannel+0x7a4>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d06c      	beq.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ddc:	483c      	ldr	r0, [pc, #240]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004dde:	f7ff f8bf 	bl	8003f60 <LL_ADC_GetCommonPathInternalCh>
 8004de2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d127      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004df4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d121      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a35      	ldr	r2, [pc, #212]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d157      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e0e:	4619      	mov	r1, r3
 8004e10:	482f      	ldr	r0, [pc, #188]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004e12:	f7ff f892 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e16:	4b31      	ldr	r3, [pc, #196]	@ (8004edc <HAL_ADC_ConfigChannel+0x7b4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	4a30      	ldr	r2, [pc, #192]	@ (8004ee0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004e30:	e002      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f9      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e3e:	e03a      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a27      	ldr	r2, [pc, #156]	@ (8004ee4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d113      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d12a      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4819      	ldr	r0, [pc, #100]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004e6c:	f7ff f865 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e70:	e021      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d11c      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d116      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a12      	ldr	r2, [pc, #72]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d111      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	480c      	ldr	r0, [pc, #48]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004e9e:	f7ff f84c 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
 8004ea2:	e008      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	37d8      	adds	r7, #216	@ 0xd8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	80080000 	.word	0x80080000
 8004ed0:	50040300 	.word	0x50040300
 8004ed4:	c7520000 	.word	0xc7520000
 8004ed8:	50040000 	.word	0x50040000
 8004edc:	20000018 	.word	0x20000018
 8004ee0:	053e2d63 	.word	0x053e2d63
 8004ee4:	cb840000 	.word	0xcb840000
 8004ee8:	80000001 	.word	0x80000001

08004eec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff f983 	bl	8004208 <LL_ADC_IsEnabled>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d169      	bne.n	8004fdc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	4b36      	ldr	r3, [pc, #216]	@ (8004fe8 <ADC_Enable+0xfc>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	f043 0210 	orr.w	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e055      	b.n	8004fde <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff f952 	bl	80041e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f3c:	482b      	ldr	r0, [pc, #172]	@ (8004fec <ADC_Enable+0x100>)
 8004f3e:	f7ff f80f 	bl	8003f60 <LL_ADC_GetCommonPathInternalCh>
 8004f42:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d013      	beq.n	8004f74 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f4c:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <ADC_Enable+0x104>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <ADC_Enable+0x108>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f66:	e002      	b.n	8004f6e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f9      	bne.n	8004f68 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f74:	f7fe ffc2 	bl	8003efc <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f7a:	e028      	b.n	8004fce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff f941 	bl	8004208 <LL_ADC_IsEnabled>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff f925 	bl	80041e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f96:	f7fe ffb1 	bl	8003efc <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d914      	bls.n	8004fce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d00d      	beq.n	8004fce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb6:	f043 0210 	orr.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e007      	b.n	8004fde <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d1cf      	bne.n	8004f7c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	8000003f 	.word	0x8000003f
 8004fec:	50040300 	.word	0x50040300
 8004ff0:	20000018 	.word	0x20000018
 8004ff4:	053e2d63 	.word	0x053e2d63

08004ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005008:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <__NVIC_SetPriorityGrouping+0x44>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005014:	4013      	ands	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800502a:	4a04      	ldr	r2, [pc, #16]	@ (800503c <__NVIC_SetPriorityGrouping+0x44>)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	60d3      	str	r3, [r2, #12]
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005044:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <__NVIC_GetPriorityGrouping+0x18>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	f003 0307 	and.w	r3, r3, #7
}
 800504e:	4618      	mov	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	2b00      	cmp	r3, #0
 800506c:	db0b      	blt.n	8005086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	f003 021f 	and.w	r2, r3, #31
 8005074:	4907      	ldr	r1, [pc, #28]	@ (8005094 <__NVIC_EnableIRQ+0x38>)
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2001      	movs	r0, #1
 800507e:	fa00 f202 	lsl.w	r2, r0, r2
 8005082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	e000e100 	.word	0xe000e100

08005098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	db0a      	blt.n	80050c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	490c      	ldr	r1, [pc, #48]	@ (80050e4 <__NVIC_SetPriority+0x4c>)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	0112      	lsls	r2, r2, #4
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	440b      	add	r3, r1
 80050bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c0:	e00a      	b.n	80050d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4908      	ldr	r1, [pc, #32]	@ (80050e8 <__NVIC_SetPriority+0x50>)
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	3b04      	subs	r3, #4
 80050d0:	0112      	lsls	r2, r2, #4
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	440b      	add	r3, r1
 80050d6:	761a      	strb	r2, [r3, #24]
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000e100 	.word	0xe000e100
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	@ 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f1c3 0307 	rsb	r3, r3, #7
 8005106:	2b04      	cmp	r3, #4
 8005108:	bf28      	it	cs
 800510a:	2304      	movcs	r3, #4
 800510c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3304      	adds	r3, #4
 8005112:	2b06      	cmp	r3, #6
 8005114:	d902      	bls.n	800511c <NVIC_EncodePriority+0x30>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3b03      	subs	r3, #3
 800511a:	e000      	b.n	800511e <NVIC_EncodePriority+0x32>
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005120:	f04f 32ff 	mov.w	r2, #4294967295
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	401a      	ands	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005134:	f04f 31ff 	mov.w	r1, #4294967295
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	43d9      	mvns	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005144:	4313      	orrs	r3, r2
         );
}
 8005146:	4618      	mov	r0, r3
 8005148:	3724      	adds	r7, #36	@ 0x24
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005164:	d301      	bcc.n	800516a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005166:	2301      	movs	r3, #1
 8005168:	e00f      	b.n	800518a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800516a:	4a0a      	ldr	r2, [pc, #40]	@ (8005194 <SysTick_Config+0x40>)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3b01      	subs	r3, #1
 8005170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005172:	210f      	movs	r1, #15
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	f7ff ff8e 	bl	8005098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <SysTick_Config+0x40>)
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005182:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <SysTick_Config+0x40>)
 8005184:	2207      	movs	r2, #7
 8005186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000e010 	.word	0xe000e010

08005198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff29 	bl	8004ff8 <__NVIC_SetPriorityGrouping>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b086      	sub	sp, #24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	4603      	mov	r3, r0
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051c0:	f7ff ff3e 	bl	8005040 <__NVIC_GetPriorityGrouping>
 80051c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	6978      	ldr	r0, [r7, #20]
 80051cc:	f7ff ff8e 	bl	80050ec <NVIC_EncodePriority>
 80051d0:	4602      	mov	r2, r0
 80051d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d6:	4611      	mov	r1, r2
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff ff5d 	bl	8005098 <__NVIC_SetPriority>
}
 80051de:	bf00      	nop
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	4603      	mov	r3, r0
 80051ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff ff31 	bl	800505c <__NVIC_EnableIRQ>
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff ffa2 	bl	8005154 <SysTick_Config>
 8005210:	4603      	mov	r3, r0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_DMA_Start_IT+0x20>
 8005236:	2302      	movs	r3, #2
 8005238:	e04b      	b.n	80052d2 <HAL_DMA_Start_IT+0xb8>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	d13a      	bne.n	80052c4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2202      	movs	r2, #2
 8005252:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f831 	bl	80052da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 020e 	orr.w	r2, r2, #14
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e00f      	b.n	80052b2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0204 	bic.w	r2, r2, #4
 80052a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 020a 	orr.w	r2, r2, #10
 80052b0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e005      	b.n	80052d0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
 80052ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ec:	f003 021c 	and.w	r2, r3, #28
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f202 	lsl.w	r2, r1, r2
 80052fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b10      	cmp	r3, #16
 800530a:	d108      	bne.n	800531e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800531c:	e007      	b.n	800532e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	60da      	str	r2, [r3, #12]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800534a:	e148      	b.n	80055de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2101      	movs	r1, #1
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 813a 	beq.w	80055d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d005      	beq.n	800537c <HAL_GPIO_Init+0x40>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d130      	bne.n	80053de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	2203      	movs	r2, #3
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053b2:	2201      	movs	r2, #1
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0201 	and.w	r2, r3, #1
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d017      	beq.n	800541a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	2203      	movs	r2, #3
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43db      	mvns	r3, r3
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d123      	bne.n	800546e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	08da      	lsrs	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3208      	adds	r2, #8
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	220f      	movs	r2, #15
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4013      	ands	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	08da      	lsrs	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3208      	adds	r2, #8
 8005468:	6939      	ldr	r1, [r7, #16]
 800546a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	2203      	movs	r2, #3
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 0203 	and.w	r2, r3, #3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8094 	beq.w	80055d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054b0:	4b52      	ldr	r3, [pc, #328]	@ (80055fc <HAL_GPIO_Init+0x2c0>)
 80054b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b4:	4a51      	ldr	r2, [pc, #324]	@ (80055fc <HAL_GPIO_Init+0x2c0>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80054bc:	4b4f      	ldr	r3, [pc, #316]	@ (80055fc <HAL_GPIO_Init+0x2c0>)
 80054be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005600 <HAL_GPIO_Init+0x2c4>)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	3302      	adds	r3, #2
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	220f      	movs	r2, #15
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4013      	ands	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80054f2:	d00d      	beq.n	8005510 <HAL_GPIO_Init+0x1d4>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a43      	ldr	r2, [pc, #268]	@ (8005604 <HAL_GPIO_Init+0x2c8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d007      	beq.n	800550c <HAL_GPIO_Init+0x1d0>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a42      	ldr	r2, [pc, #264]	@ (8005608 <HAL_GPIO_Init+0x2cc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d101      	bne.n	8005508 <HAL_GPIO_Init+0x1cc>
 8005504:	2302      	movs	r3, #2
 8005506:	e004      	b.n	8005512 <HAL_GPIO_Init+0x1d6>
 8005508:	2307      	movs	r3, #7
 800550a:	e002      	b.n	8005512 <HAL_GPIO_Init+0x1d6>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_GPIO_Init+0x1d6>
 8005510:	2300      	movs	r3, #0
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	f002 0203 	and.w	r2, r2, #3
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	4093      	lsls	r3, r2
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005522:	4937      	ldr	r1, [pc, #220]	@ (8005600 <HAL_GPIO_Init+0x2c4>)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	089b      	lsrs	r3, r3, #2
 8005528:	3302      	adds	r3, #2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005530:	4b36      	ldr	r3, [pc, #216]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	43db      	mvns	r3, r3
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4013      	ands	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005554:	4a2d      	ldr	r2, [pc, #180]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800555a:	4b2c      	ldr	r3, [pc, #176]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	43db      	mvns	r3, r3
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4013      	ands	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800557e:	4a23      	ldr	r2, [pc, #140]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005584:	4b21      	ldr	r3, [pc, #132]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	43db      	mvns	r3, r3
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055a8:	4a18      	ldr	r2, [pc, #96]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80055ae:	4b17      	ldr	r3, [pc, #92]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	43db      	mvns	r3, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4013      	ands	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055d2:	4a0e      	ldr	r2, [pc, #56]	@ (800560c <HAL_GPIO_Init+0x2d0>)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3301      	adds	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f47f aeaf 	bne.w	800534c <HAL_GPIO_Init+0x10>
  }
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40021000 	.word	0x40021000
 8005600:	40010000 	.word	0x40010000
 8005604:	48000400 	.word	0x48000400
 8005608:	48000800 	.word	0x48000800
 800560c:	40010400 	.word	0x40010400

08005610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
 800561c:	4613      	mov	r3, r2
 800561e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005620:	787b      	ldrb	r3, [r7, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800562c:	e002      	b.n	8005634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800564a:	4b08      	ldr	r3, [pc, #32]	@ (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005656:	4a05      	ldr	r2, [pc, #20]	@ (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f806 	bl	8005670 <HAL_GPIO_EXTI_Callback>
  }
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40010400 	.word	0x40010400

08005670 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e08d      	b.n	80057b4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7fd f9f9 	bl	8002aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2224      	movs	r2, #36	@ 0x24
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80056d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056fc:	609a      	str	r2, [r3, #8]
 80056fe:	e006      	b.n	800570e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800570c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d108      	bne.n	8005728 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	e007      	b.n	8005738 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005736:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800574a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800575a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69d9      	ldr	r1, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	607a      	str	r2, [r7, #4]
 80057c6:	461a      	mov	r2, r3
 80057c8:	460b      	mov	r3, r1
 80057ca:	817b      	strh	r3, [r7, #10]
 80057cc:	4613      	mov	r3, r2
 80057ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b20      	cmp	r3, #32
 80057da:	f040 80fd 	bne.w	80059d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_I2C_Master_Transmit+0x30>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e0f6      	b.n	80059da <HAL_I2C_Master_Transmit+0x21e>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057f4:	f7fe fb82 	bl	8003efc <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2319      	movs	r3, #25
 8005800:	2201      	movs	r2, #1
 8005802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fa0a 	bl	8005c20 <I2C_WaitOnFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0e1      	b.n	80059da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2221      	movs	r2, #33	@ 0x21
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2210      	movs	r2, #16
 8005822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	893a      	ldrh	r2, [r7, #8]
 8005836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	2bff      	cmp	r3, #255	@ 0xff
 8005846:	d906      	bls.n	8005856 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	22ff      	movs	r2, #255	@ 0xff
 800584c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800584e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e007      	b.n	8005866 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005860:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005864:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d024      	beq.n	80058b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	3301      	adds	r3, #1
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	8979      	ldrh	r1, [r7, #10]
 80058aa:	4b4e      	ldr	r3, [pc, #312]	@ (80059e4 <HAL_I2C_Master_Transmit+0x228>)
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fbf1 	bl	8006098 <I2C_TransferConfig>
 80058b6:	e066      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	8979      	ldrh	r1, [r7, #10]
 80058c0:	4b48      	ldr	r3, [pc, #288]	@ (80059e4 <HAL_I2C_Master_Transmit+0x228>)
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fbe6 	bl	8006098 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80058cc:	e05b      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	6a39      	ldr	r1, [r7, #32]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f9f3 	bl	8005cbe <I2C_WaitOnTXISFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e07b      	b.n	80059da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d034      	beq.n	8005986 <HAL_I2C_Master_Transmit+0x1ca>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005920:	2b00      	cmp	r3, #0
 8005922:	d130      	bne.n	8005986 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	2200      	movs	r2, #0
 800592c:	2180      	movs	r1, #128	@ 0x80
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f976 	bl	8005c20 <I2C_WaitOnFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e04d      	b.n	80059da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	2bff      	cmp	r3, #255	@ 0xff
 8005946:	d90e      	bls.n	8005966 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	22ff      	movs	r2, #255	@ 0xff
 800594c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005952:	b2da      	uxtb	r2, r3
 8005954:	8979      	ldrh	r1, [r7, #10]
 8005956:	2300      	movs	r3, #0
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fb9a 	bl	8006098 <I2C_TransferConfig>
 8005964:	e00f      	b.n	8005986 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	b2da      	uxtb	r2, r3
 8005976:	8979      	ldrh	r1, [r7, #10]
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fb89 	bl	8006098 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d19e      	bne.n	80058ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	6a39      	ldr	r1, [r7, #32]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f9d9 	bl	8005d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e01a      	b.n	80059da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2220      	movs	r2, #32
 80059aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <HAL_I2C_Master_Transmit+0x22c>)
 80059b8:	400b      	ands	r3, r1
 80059ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	80002000 	.word	0x80002000
 80059e8:	fe00e800 	.word	0xfe00e800

080059ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	461a      	mov	r2, r3
 80059f8:	460b      	mov	r3, r1
 80059fa:	817b      	strh	r3, [r7, #10]
 80059fc:	4613      	mov	r3, r2
 80059fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	f040 80db 	bne.w	8005bc4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_I2C_Master_Receive+0x30>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e0d4      	b.n	8005bc6 <HAL_I2C_Master_Receive+0x1da>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a24:	f7fe fa6a 	bl	8003efc <HAL_GetTick>
 8005a28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	2319      	movs	r3, #25
 8005a30:	2201      	movs	r2, #1
 8005a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f8f2 	bl	8005c20 <I2C_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0bf      	b.n	8005bc6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2222      	movs	r2, #34	@ 0x22
 8005a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2210      	movs	r2, #16
 8005a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	893a      	ldrh	r2, [r7, #8]
 8005a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2bff      	cmp	r3, #255	@ 0xff
 8005a76:	d90e      	bls.n	8005a96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	22ff      	movs	r2, #255	@ 0xff
 8005a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	8979      	ldrh	r1, [r7, #10]
 8005a86:	4b52      	ldr	r3, [pc, #328]	@ (8005bd0 <HAL_I2C_Master_Receive+0x1e4>)
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fb02 	bl	8006098 <I2C_TransferConfig>
 8005a94:	e06d      	b.n	8005b72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	8979      	ldrh	r1, [r7, #10]
 8005aa8:	4b49      	ldr	r3, [pc, #292]	@ (8005bd0 <HAL_I2C_Master_Receive+0x1e4>)
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 faf1 	bl	8006098 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005ab6:	e05c      	b.n	8005b72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	6a39      	ldr	r1, [r7, #32]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f989 	bl	8005dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e07c      	b.n	8005bc6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d034      	beq.n	8005b72 <HAL_I2C_Master_Receive+0x186>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d130      	bne.n	8005b72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	2200      	movs	r2, #0
 8005b18:	2180      	movs	r1, #128	@ 0x80
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f880 	bl	8005c20 <I2C_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e04d      	b.n	8005bc6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2bff      	cmp	r3, #255	@ 0xff
 8005b32:	d90e      	bls.n	8005b52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	22ff      	movs	r2, #255	@ 0xff
 8005b38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	8979      	ldrh	r1, [r7, #10]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 faa4 	bl	8006098 <I2C_TransferConfig>
 8005b50:	e00f      	b.n	8005b72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	8979      	ldrh	r1, [r7, #10]
 8005b64:	2300      	movs	r3, #0
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fa93 	bl	8006098 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d19d      	bne.n	8005ab8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	6a39      	ldr	r1, [r7, #32]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f8e3 	bl	8005d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e01a      	b.n	8005bc6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2220      	movs	r2, #32
 8005b96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <HAL_I2C_Master_Receive+0x1e8>)
 8005ba4:	400b      	ands	r3, r1
 8005ba6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	80002400 	.word	0x80002400
 8005bd4:	fe00e800 	.word	0xfe00e800

08005bd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d103      	bne.n	8005bf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d007      	beq.n	8005c14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	619a      	str	r2, [r3, #24]
  }
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c30:	e031      	b.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d02d      	beq.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3a:	f7fe f95f 	bl	8003efc <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d122      	bne.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d113      	bne.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e00f      	b.n	8005cb6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d0be      	beq.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cca:	e033      	b.n	8005d34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f901 	bl	8005ed8 <I2C_IsErrorOccurred>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e031      	b.n	8005d44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d025      	beq.n	8005d34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce8:	f7fe f908 	bl	8003efc <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11a      	bne.n	8005d34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d013      	beq.n	8005d34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d10:	f043 0220 	orr.w	r2, r3, #32
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e007      	b.n	8005d44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d1c4      	bne.n	8005ccc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d58:	e02f      	b.n	8005dba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68b9      	ldr	r1, [r7, #8]
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f8ba 	bl	8005ed8 <I2C_IsErrorOccurred>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e02d      	b.n	8005dca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6e:	f7fe f8c5 	bl	8003efc <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d302      	bcc.n	8005d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11a      	bne.n	8005dba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d013      	beq.n	8005dba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	f043 0220 	orr.w	r2, r3, #32
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e007      	b.n	8005dca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d1c8      	bne.n	8005d5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005de0:	e06b      	b.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f876 	bl	8005ed8 <I2C_IsErrorOccurred>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e069      	b.n	8005eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d138      	bne.n	8005e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d105      	bne.n	8005e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e055      	b.n	8005eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d107      	bne.n	8005e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2210      	movs	r2, #16
 8005e32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2204      	movs	r2, #4
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e3a:	e002      	b.n	8005e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2220      	movs	r2, #32
 8005e48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e029      	b.n	8005eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e76:	f7fe f841 	bl	8003efc <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d302      	bcc.n	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d116      	bne.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d00f      	beq.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e007      	b.n	8005eca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d18c      	bne.n	8005de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	fe00e800 	.word	0xfe00e800

08005ed8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	@ 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d068      	beq.n	8005fd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2210      	movs	r2, #16
 8005f0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f0c:	e049      	b.n	8005fa2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d045      	beq.n	8005fa2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f16:	f7fd fff1 	bl	8003efc <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <I2C_IsErrorOccurred+0x54>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d13a      	bne.n	8005fa2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f4e:	d121      	bne.n	8005f94 <I2C_IsErrorOccurred+0xbc>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f56:	d01d      	beq.n	8005f94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	d01a      	beq.n	8005f94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f6e:	f7fd ffc5 	bl	8003efc <HAL_GetTick>
 8005f72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f74:	e00e      	b.n	8005f94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f76:	f7fd ffc1 	bl	8003efc <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b19      	cmp	r3, #25
 8005f82:	d907      	bls.n	8005f94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	f043 0320 	orr.w	r3, r3, #32
 8005f8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005f92:	e006      	b.n	8005fa2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d1e9      	bne.n	8005f76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d003      	beq.n	8005fb8 <I2C_IsErrorOccurred+0xe0>
 8005fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0aa      	beq.n	8005f0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d103      	bne.n	8005fc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	f043 0304 	orr.w	r3, r3, #4
 8005fce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ff8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f043 0308 	orr.w	r3, r3, #8
 8006010:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800601a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	f043 0302 	orr.w	r3, r3, #2
 8006032:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800603c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01c      	beq.n	8006086 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fdc3 	bl	8005bd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <I2C_IsErrorOccurred+0x1bc>)
 800605e:	400b      	ands	r3, r1
 8006060:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	431a      	orrs	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006086:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800608a:	4618      	mov	r0, r3
 800608c:	3728      	adds	r7, #40	@ 0x28
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	fe00e800 	.word	0xfe00e800

08006098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	817b      	strh	r3, [r7, #10]
 80060a6:	4613      	mov	r3, r2
 80060a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060aa:	897b      	ldrh	r3, [r7, #10]
 80060ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060b0:	7a7b      	ldrb	r3, [r7, #9]
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	0d5b      	lsrs	r3, r3, #21
 80060d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80060d6:	4b08      	ldr	r3, [pc, #32]	@ (80060f8 <I2C_TransferConfig+0x60>)
 80060d8:	430b      	orrs	r3, r1
 80060da:	43db      	mvns	r3, r3
 80060dc:	ea02 0103 	and.w	r1, r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	03ff63ff 	.word	0x03ff63ff

080060fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b20      	cmp	r3, #32
 8006110:	d138      	bne.n	8006184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800611c:	2302      	movs	r3, #2
 800611e:	e032      	b.n	8006186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2224      	movs	r2, #36	@ 0x24
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800614e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d139      	bne.n	800621c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e033      	b.n	800621e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2224      	movs	r2, #36	@ 0x24
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80061e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006230:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <HAL_PWREx_GetVoltageRange+0x18>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006238:	4618      	mov	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40007000 	.word	0x40007000

08006248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006256:	d130      	bne.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006258:	4b23      	ldr	r3, [pc, #140]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006264:	d038      	beq.n	80062d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006266:	4b20      	ldr	r3, [pc, #128]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800626e:	4a1e      	ldr	r2, [pc, #120]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006270:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006274:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006276:	4b1d      	ldr	r3, [pc, #116]	@ (80062ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2232      	movs	r2, #50	@ 0x32
 800627c:	fb02 f303 	mul.w	r3, r2, r3
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	0c9b      	lsrs	r3, r3, #18
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800628c:	e002      	b.n	8006294 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3b01      	subs	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006294:	4b14      	ldr	r3, [pc, #80]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a0:	d102      	bne.n	80062a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f2      	bne.n	800628e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062a8:	4b0f      	ldr	r3, [pc, #60]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b4:	d110      	bne.n	80062d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e00f      	b.n	80062da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80062ba:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c6:	d007      	beq.n	80062d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062c8:	4b07      	ldr	r3, [pc, #28]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062d0:	4a05      	ldr	r2, [pc, #20]	@ (80062e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40007000 	.word	0x40007000
 80062ec:	20000018 	.word	0x20000018
 80062f0:	431bde83 	.word	0x431bde83

080062f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f000 bc02 	b.w	8006b0c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006308:	4b96      	ldr	r3, [pc, #600]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 030c 	and.w	r3, r3, #12
 8006310:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006312:	4b94      	ldr	r3, [pc, #592]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80e4 	beq.w	80064f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d007      	beq.n	8006340 <HAL_RCC_OscConfig+0x4c>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2b0c      	cmp	r3, #12
 8006334:	f040 808b 	bne.w	800644e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b01      	cmp	r3, #1
 800633c:	f040 8087 	bne.w	800644e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006340:	4b88      	ldr	r3, [pc, #544]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_OscConfig+0x64>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e3d9      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	4b81      	ldr	r3, [pc, #516]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <HAL_RCC_OscConfig+0x7e>
 8006368:	4b7e      	ldr	r3, [pc, #504]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006370:	e005      	b.n	800637e <HAL_RCC_OscConfig+0x8a>
 8006372:	4b7c      	ldr	r3, [pc, #496]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800637e:	4293      	cmp	r3, r2
 8006380:	d223      	bcs.n	80063ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd8c 	bl	8006ea4 <RCC_SetFlashLatencyFromMSIRange>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e3ba      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006396:	4b73      	ldr	r3, [pc, #460]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a72      	ldr	r2, [pc, #456]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800639c:	f043 0308 	orr.w	r3, r3, #8
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	4b70      	ldr	r3, [pc, #448]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	496d      	ldr	r1, [pc, #436]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	4968      	ldr	r1, [pc, #416]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	604b      	str	r3, [r1, #4]
 80063c8:	e025      	b.n	8006416 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063ca:	4b66      	ldr	r3, [pc, #408]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a65      	ldr	r2, [pc, #404]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063d0:	f043 0308 	orr.w	r3, r3, #8
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	4b63      	ldr	r3, [pc, #396]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	4960      	ldr	r1, [pc, #384]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063e8:	4b5e      	ldr	r3, [pc, #376]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	495b      	ldr	r1, [pc, #364]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fd4c 	bl	8006ea4 <RCC_SetFlashLatencyFromMSIRange>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e37a      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006416:	f000 fc81 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 800641a:	4602      	mov	r2, r0
 800641c:	4b51      	ldr	r3, [pc, #324]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	091b      	lsrs	r3, r3, #4
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	4950      	ldr	r1, [pc, #320]	@ (8006568 <HAL_RCC_OscConfig+0x274>)
 8006428:	5ccb      	ldrb	r3, [r1, r3]
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	4a4e      	ldr	r2, [pc, #312]	@ (800656c <HAL_RCC_OscConfig+0x278>)
 8006434:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006436:	4b4e      	ldr	r3, [pc, #312]	@ (8006570 <HAL_RCC_OscConfig+0x27c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fd fd0e 	bl	8003e5c <HAL_InitTick>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d052      	beq.n	80064f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	e35e      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d032      	beq.n	80064bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006456:	4b43      	ldr	r3, [pc, #268]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a42      	ldr	r2, [pc, #264]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006462:	f7fd fd4b 	bl	8003efc <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800646a:	f7fd fd47 	bl	8003efc <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e347      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800647c:	4b39      	ldr	r3, [pc, #228]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006488:	4b36      	ldr	r3, [pc, #216]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a35      	ldr	r2, [pc, #212]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800648e:	f043 0308 	orr.w	r3, r3, #8
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	4b33      	ldr	r3, [pc, #204]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	4930      	ldr	r1, [pc, #192]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	492b      	ldr	r1, [pc, #172]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	604b      	str	r3, [r1, #4]
 80064ba:	e01a      	b.n	80064f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064bc:	4b29      	ldr	r3, [pc, #164]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a28      	ldr	r2, [pc, #160]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064c8:	f7fd fd18 	bl	8003efc <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064d0:	f7fd fd14 	bl	8003efc <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e314      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064e2:	4b20      	ldr	r3, [pc, #128]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x1dc>
 80064ee:	e000      	b.n	80064f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d073      	beq.n	80065e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d005      	beq.n	8006510 <HAL_RCC_OscConfig+0x21c>
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b0c      	cmp	r3, #12
 8006508:	d10e      	bne.n	8006528 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b03      	cmp	r3, #3
 800650e:	d10b      	bne.n	8006528 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	4b14      	ldr	r3, [pc, #80]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d063      	beq.n	80065e4 <HAL_RCC_OscConfig+0x2f0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d15f      	bne.n	80065e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e2f1      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006530:	d106      	bne.n	8006540 <HAL_RCC_OscConfig+0x24c>
 8006532:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a0b      	ldr	r2, [pc, #44]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e025      	b.n	800658c <HAL_RCC_OscConfig+0x298>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006548:	d114      	bne.n	8006574 <HAL_RCC_OscConfig+0x280>
 800654a:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a05      	ldr	r2, [pc, #20]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b03      	ldr	r3, [pc, #12]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a02      	ldr	r2, [pc, #8]	@ (8006564 <HAL_RCC_OscConfig+0x270>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e013      	b.n	800658c <HAL_RCC_OscConfig+0x298>
 8006564:	40021000 	.word	0x40021000
 8006568:	0800fe9c 	.word	0x0800fe9c
 800656c:	20000018 	.word	0x20000018
 8006570:	2000003c 	.word	0x2000003c
 8006574:	4ba0      	ldr	r3, [pc, #640]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a9f      	ldr	r2, [pc, #636]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800657a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	4b9d      	ldr	r3, [pc, #628]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a9c      	ldr	r2, [pc, #624]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800658a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fd fcb2 	bl	8003efc <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800659c:	f7fd fcae 	bl	8003efc <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	@ 0x64
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e2ae      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ae:	4b92      	ldr	r3, [pc, #584]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x2a8>
 80065ba:	e014      	b.n	80065e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fd fc9e 	bl	8003efc <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fd fc9a 	bl	8003efc <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	@ 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e29a      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065d6:	4b88      	ldr	r3, [pc, #544]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x2d0>
 80065e2:	e000      	b.n	80065e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d060      	beq.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_OscConfig+0x310>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b0c      	cmp	r3, #12
 80065fc:	d119      	bne.n	8006632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d116      	bne.n	8006632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006604:	4b7c      	ldr	r3, [pc, #496]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_RCC_OscConfig+0x328>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e277      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661c:	4b76      	ldr	r3, [pc, #472]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	4973      	ldr	r1, [pc, #460]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006630:	e040      	b.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d023      	beq.n	8006682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800663a:	4b6f      	ldr	r3, [pc, #444]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6e      	ldr	r2, [pc, #440]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fd fc59 	bl	8003efc <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664e:	f7fd fc55 	bl	8003efc <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e255      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006660:	4b65      	ldr	r3, [pc, #404]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0f0      	beq.n	800664e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666c:	4b62      	ldr	r3, [pc, #392]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	495f      	ldr	r1, [pc, #380]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800667c:	4313      	orrs	r3, r2
 800667e:	604b      	str	r3, [r1, #4]
 8006680:	e018      	b.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006682:	4b5d      	ldr	r3, [pc, #372]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a5c      	ldr	r2, [pc, #368]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800668c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fd fc35 	bl	8003efc <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006696:	f7fd fc31 	bl	8003efc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e231      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066a8:	4b53      	ldr	r3, [pc, #332]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d03c      	beq.n	800673a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01c      	beq.n	8006702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c8:	4b4b      	ldr	r3, [pc, #300]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ce:	4a4a      	ldr	r2, [pc, #296]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d8:	f7fd fc10 	bl	8003efc <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e0:	f7fd fc0c 	bl	8003efc <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e20c      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f2:	4b41      	ldr	r3, [pc, #260]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80066f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0ef      	beq.n	80066e0 <HAL_RCC_OscConfig+0x3ec>
 8006700:	e01b      	b.n	800673a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006702:	4b3d      	ldr	r3, [pc, #244]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006708:	4a3b      	ldr	r2, [pc, #236]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006712:	f7fd fbf3 	bl	8003efc <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800671a:	f7fd fbef 	bl	8003efc <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e1ef      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800672c:	4b32      	ldr	r3, [pc, #200]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800672e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1ef      	bne.n	800671a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80a6 	beq.w	8006894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006748:	2300      	movs	r3, #0
 800674a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800674c:	4b2a      	ldr	r3, [pc, #168]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800674e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10d      	bne.n	8006774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006758:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800675a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675c:	4a26      	ldr	r2, [pc, #152]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006762:	6593      	str	r3, [r2, #88]	@ 0x58
 8006764:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 8006766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006770:	2301      	movs	r3, #1
 8006772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006774:	4b21      	ldr	r3, [pc, #132]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d118      	bne.n	80067b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006780:	4b1e      	ldr	r3, [pc, #120]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 8006786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800678a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678c:	f7fd fbb6 	bl	8003efc <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006794:	f7fd fbb2 	bl	8003efc <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e1b2      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a6:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <HAL_RCC_OscConfig+0x508>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d108      	bne.n	80067cc <HAL_RCC_OscConfig+0x4d8>
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c0:	4a0d      	ldr	r2, [pc, #52]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067ca:	e029      	b.n	8006820 <HAL_RCC_OscConfig+0x52c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	d115      	bne.n	8006800 <HAL_RCC_OscConfig+0x50c>
 80067d4:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067da:	4a07      	ldr	r2, [pc, #28]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067dc:	f043 0304 	orr.w	r3, r3, #4
 80067e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067e4:	4b04      	ldr	r3, [pc, #16]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ea:	4a03      	ldr	r2, [pc, #12]	@ (80067f8 <HAL_RCC_OscConfig+0x504>)
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067f4:	e014      	b.n	8006820 <HAL_RCC_OscConfig+0x52c>
 80067f6:	bf00      	nop
 80067f8:	40021000 	.word	0x40021000
 80067fc:	40007000 	.word	0x40007000
 8006800:	4b9a      	ldr	r3, [pc, #616]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006806:	4a99      	ldr	r2, [pc, #612]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006810:	4b96      	ldr	r3, [pc, #600]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	4a95      	ldr	r2, [pc, #596]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006818:	f023 0304 	bic.w	r3, r3, #4
 800681c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d016      	beq.n	8006856 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fd fb68 	bl	8003efc <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800682e:	e00a      	b.n	8006846 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006830:	f7fd fb64 	bl	8003efc <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e162      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006846:	4b89      	ldr	r3, [pc, #548]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0ed      	beq.n	8006830 <HAL_RCC_OscConfig+0x53c>
 8006854:	e015      	b.n	8006882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006856:	f7fd fb51 	bl	8003efc <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800685c:	e00a      	b.n	8006874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685e:	f7fd fb4d 	bl	8003efc <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686c:	4293      	cmp	r3, r2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e14b      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006874:	4b7d      	ldr	r3, [pc, #500]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1ed      	bne.n	800685e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006882:	7ffb      	ldrb	r3, [r7, #31]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d105      	bne.n	8006894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006888:	4b78      	ldr	r3, [pc, #480]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 800688a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688c:	4a77      	ldr	r2, [pc, #476]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 800688e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006892:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03c      	beq.n	800691a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01c      	beq.n	80068e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068a8:	4b70      	ldr	r3, [pc, #448]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80068aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ae:	4a6f      	ldr	r2, [pc, #444]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fd fb20 	bl	8003efc <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c0:	f7fd fb1c 	bl	8003efc <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e11c      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068d2:	4b66      	ldr	r3, [pc, #408]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80068d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ef      	beq.n	80068c0 <HAL_RCC_OscConfig+0x5cc>
 80068e0:	e01b      	b.n	800691a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068e2:	4b62      	ldr	r3, [pc, #392]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80068e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068e8:	4a60      	ldr	r2, [pc, #384]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f2:	f7fd fb03 	bl	8003efc <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068f8:	e008      	b.n	800690c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068fa:	f7fd faff 	bl	8003efc <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e0ff      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800690c:	4b57      	ldr	r3, [pc, #348]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 800690e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ef      	bne.n	80068fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80f3 	beq.w	8006b0a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	2b02      	cmp	r3, #2
 800692a:	f040 80c9 	bne.w	8006ac0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800692e:	4b4f      	ldr	r3, [pc, #316]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f003 0203 	and.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693e:	429a      	cmp	r2, r3
 8006940:	d12c      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694c:	3b01      	subs	r3, #1
 800694e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006950:	429a      	cmp	r2, r3
 8006952:	d123      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d11b      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d113      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	3b01      	subs	r3, #1
 8006982:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006984:	429a      	cmp	r2, r3
 8006986:	d109      	bne.n	800699c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	3b01      	subs	r3, #1
 8006996:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d06b      	beq.n	8006a74 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b0c      	cmp	r3, #12
 80069a0:	d062      	beq.n	8006a68 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80069a2:	4b32      	ldr	r3, [pc, #200]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e0ac      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80069b2:	4b2e      	ldr	r3, [pc, #184]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2d      	ldr	r2, [pc, #180]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80069b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069be:	f7fd fa9d 	bl	8003efc <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c6:	f7fd fa99 	bl	8003efc <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e099      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d8:	4b24      	ldr	r3, [pc, #144]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e4:	4b21      	ldr	r3, [pc, #132]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	4b21      	ldr	r3, [pc, #132]	@ (8006a70 <HAL_RCC_OscConfig+0x77c>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069f4:	3a01      	subs	r2, #1
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	4311      	orrs	r1, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069fe:	0212      	lsls	r2, r2, #8
 8006a00:	4311      	orrs	r1, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a06:	0852      	lsrs	r2, r2, #1
 8006a08:	3a01      	subs	r2, #1
 8006a0a:	0552      	lsls	r2, r2, #21
 8006a0c:	4311      	orrs	r1, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006a12:	0852      	lsrs	r2, r2, #1
 8006a14:	3a01      	subs	r2, #1
 8006a16:	0652      	lsls	r2, r2, #25
 8006a18:	4311      	orrs	r1, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a1e:	06d2      	lsls	r2, r2, #27
 8006a20:	430a      	orrs	r2, r1
 8006a22:	4912      	ldr	r1, [pc, #72]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a28:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a34:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4a0c      	ldr	r2, [pc, #48]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a40:	f7fd fa5c 	bl	8003efc <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a48:	f7fd fa58 	bl	8003efc <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e058      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a5a:	4b04      	ldr	r3, [pc, #16]	@ (8006a6c <HAL_RCC_OscConfig+0x778>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a66:	e050      	b.n	8006b0a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e04f      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a74:	4b27      	ldr	r3, [pc, #156]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d144      	bne.n	8006b0a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a80:	4b24      	ldr	r3, [pc, #144]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a23      	ldr	r2, [pc, #140]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a8c:	4b21      	ldr	r3, [pc, #132]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4a20      	ldr	r2, [pc, #128]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a98:	f7fd fa30 	bl	8003efc <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fd fa2c 	bl	8003efc <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e02c      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ab2:	4b18      	ldr	r3, [pc, #96]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x7ac>
 8006abe:	e024      	b.n	8006b0a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d01f      	beq.n	8006b06 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac6:	4b13      	ldr	r3, [pc, #76]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a12      	ldr	r2, [pc, #72]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad2:	f7fd fa13 	bl	8003efc <HAL_GetTick>
 8006ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ada:	f7fd fa0f 	bl	8003efc <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e00f      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aec:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1f0      	bne.n	8006ada <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006af8:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	4905      	ldr	r1, [pc, #20]	@ (8006b14 <HAL_RCC_OscConfig+0x820>)
 8006afe:	4b06      	ldr	r3, [pc, #24]	@ (8006b18 <HAL_RCC_OscConfig+0x824>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	60cb      	str	r3, [r1, #12]
 8006b04:	e001      	b.n	8006b0a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40021000 	.word	0x40021000
 8006b18:	feeefffc 	.word	0xfeeefffc

08006b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0e7      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b30:	4b75      	ldr	r3, [pc, #468]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d910      	bls.n	8006b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b3e:	4b72      	ldr	r3, [pc, #456]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 0207 	bic.w	r2, r3, #7
 8006b46:	4970      	ldr	r1, [pc, #448]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0cf      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	4b66      	ldr	r3, [pc, #408]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d908      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b7c:	4b63      	ldr	r3, [pc, #396]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	4960      	ldr	r1, [pc, #384]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d04c      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d121      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e0a6      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d107      	bne.n	8006bca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bba:	4b54      	ldr	r3, [pc, #336]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d115      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e09a      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e08e      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006be2:	4b4a      	ldr	r3, [pc, #296]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e086      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bf2:	4b46      	ldr	r3, [pc, #280]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f023 0203 	bic.w	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4943      	ldr	r1, [pc, #268]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c04:	f7fd f97a 	bl	8003efc <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c0c:	f7fd f976 	bl	8003efc <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e06e      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c22:	4b3a      	ldr	r3, [pc, #232]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 020c 	and.w	r2, r3, #12
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d1eb      	bne.n	8006c0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	4b31      	ldr	r3, [pc, #196]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d208      	bcs.n	8006c62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c50:	4b2e      	ldr	r3, [pc, #184]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	492b      	ldr	r1, [pc, #172]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c62:	4b29      	ldr	r3, [pc, #164]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d210      	bcs.n	8006c92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c70:	4b25      	ldr	r3, [pc, #148]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f023 0207 	bic.w	r2, r3, #7
 8006c78:	4923      	ldr	r1, [pc, #140]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c80:	4b21      	ldr	r3, [pc, #132]	@ (8006d08 <HAL_RCC_ClockConfig+0x1ec>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d001      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e036      	b.n	8006d00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d008      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	4918      	ldr	r1, [pc, #96]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cbc:	4b13      	ldr	r3, [pc, #76]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	4910      	ldr	r1, [pc, #64]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cd0:	f000 f824 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <HAL_RCC_ClockConfig+0x1f0>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	490b      	ldr	r1, [pc, #44]	@ (8006d10 <HAL_RCC_ClockConfig+0x1f4>)
 8006ce2:	5ccb      	ldrb	r3, [r1, r3]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	4a09      	ldr	r2, [pc, #36]	@ (8006d14 <HAL_RCC_ClockConfig+0x1f8>)
 8006cee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006cf0:	4b09      	ldr	r3, [pc, #36]	@ (8006d18 <HAL_RCC_ClockConfig+0x1fc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd f8b1 	bl	8003e5c <HAL_InitTick>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40022000 	.word	0x40022000
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	0800fe9c 	.word	0x0800fe9c
 8006d14:	20000018 	.word	0x20000018
 8006d18:	2000003c 	.word	0x2000003c

08006d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	@ 0x24
 8006d20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	2300      	movs	r3, #0
 8006d28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
 8006d32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d34:	4b3b      	ldr	r3, [pc, #236]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x34>
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b0c      	cmp	r3, #12
 8006d48:	d121      	bne.n	8006d8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d11e      	bne.n	8006d8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d50:	4b34      	ldr	r3, [pc, #208]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d5c:	4b31      	ldr	r3, [pc, #196]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	e005      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	091b      	lsrs	r3, r3, #4
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d78:	4a2b      	ldr	r2, [pc, #172]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10d      	bne.n	8006da4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d8c:	e00a      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d102      	bne.n	8006d9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d94:	4b25      	ldr	r3, [pc, #148]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	e004      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d101      	bne.n	8006da4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006da0:	4b23      	ldr	r3, [pc, #140]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8006da2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b0c      	cmp	r3, #12
 8006da8:	d134      	bne.n	8006e14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006daa:	4b1e      	ldr	r3, [pc, #120]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d003      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0xac>
 8006dc0:	e005      	b.n	8006dce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x110>)
 8006dc4:	617b      	str	r3, [r7, #20]
      break;
 8006dc6:	e005      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006dc8:	4b19      	ldr	r3, [pc, #100]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x114>)
 8006dca:	617b      	str	r3, [r7, #20]
      break;
 8006dcc:	e002      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	617b      	str	r3, [r7, #20]
      break;
 8006dd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006dd4:	4b13      	ldr	r3, [pc, #76]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	091b      	lsrs	r3, r3, #4
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	3301      	adds	r3, #1
 8006de0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006de2:	4b10      	ldr	r3, [pc, #64]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	fb03 f202 	mul.w	r2, r3, r2
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	0e5b      	lsrs	r3, r3, #25
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	3301      	adds	r3, #1
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e14:	69bb      	ldr	r3, [r7, #24]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3724      	adds	r7, #36	@ 0x24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000
 8006e28:	0800feb4 	.word	0x0800feb4
 8006e2c:	00f42400 	.word	0x00f42400
 8006e30:	007a1200 	.word	0x007a1200

08006e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e38:	4b03      	ldr	r3, [pc, #12]	@ (8006e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000018 	.word	0x20000018

08006e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e50:	f7ff fff0 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	4904      	ldr	r1, [pc, #16]	@ (8006e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e62:	5ccb      	ldrb	r3, [r1, r3]
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40021000 	.word	0x40021000
 8006e74:	0800feac 	.word	0x0800feac

08006e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e7c:	f7ff ffda 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e80:	4602      	mov	r2, r0
 8006e82:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	0adb      	lsrs	r3, r3, #11
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	4904      	ldr	r1, [pc, #16]	@ (8006ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e8e:	5ccb      	ldrb	r3, [r1, r3]
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	0800feac 	.word	0x0800feac

08006ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ebc:	f7ff f9b6 	bl	800622c <HAL_PWREx_GetVoltageRange>
 8006ec0:	6178      	str	r0, [r7, #20]
 8006ec2:	e014      	b.n	8006eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ec4:	4b25      	ldr	r3, [pc, #148]	@ (8006f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec8:	4a24      	ldr	r2, [pc, #144]	@ (8006f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ed0:	4b22      	ldr	r3, [pc, #136]	@ (8006f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006edc:	f7ff f9a6 	bl	800622c <HAL_PWREx_GetVoltageRange>
 8006ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8006f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef4:	d10b      	bne.n	8006f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b80      	cmp	r3, #128	@ 0x80
 8006efa:	d919      	bls.n	8006f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f00:	d902      	bls.n	8006f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f02:	2302      	movs	r3, #2
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e013      	b.n	8006f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f08:	2301      	movs	r3, #1
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	e010      	b.n	8006f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b80      	cmp	r3, #128	@ 0x80
 8006f12:	d902      	bls.n	8006f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f14:	2303      	movs	r3, #3
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e00a      	b.n	8006f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b80      	cmp	r3, #128	@ 0x80
 8006f1e:	d102      	bne.n	8006f26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f20:	2302      	movs	r3, #2
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	e004      	b.n	8006f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b70      	cmp	r3, #112	@ 0x70
 8006f2a:	d101      	bne.n	8006f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f30:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f023 0207 	bic.w	r2, r3, #7
 8006f38:	4909      	ldr	r1, [pc, #36]	@ (8006f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f40:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d001      	beq.n	8006f52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	40022000 	.word	0x40022000

08006f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f70:	2300      	movs	r3, #0
 8006f72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d031      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006f88:	d01a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006f8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006f8e:	d814      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f98:	d10f      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	4a5c      	ldr	r2, [pc, #368]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fa4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fa6:	e00c      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 f9ce 	bl	8007350 <RCCEx_PLLSAI1_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8006fbe:	e000      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc2:	7cfb      	ldrb	r3, [r7, #19]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10b      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fc8:	4b51      	ldr	r3, [pc, #324]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd6:	494e      	ldr	r1, [pc, #312]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006fde:	e001      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe0:	7cfb      	ldrb	r3, [r7, #19]
 8006fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 809e 	beq.w	800712e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ff6:	4b46      	ldr	r3, [pc, #280]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007006:	2300      	movs	r3, #0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00d      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800700c:	4b40      	ldr	r3, [pc, #256]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800700e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007010:	4a3f      	ldr	r2, [pc, #252]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007016:	6593      	str	r3, [r2, #88]	@ 0x58
 8007018:	4b3d      	ldr	r3, [pc, #244]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800701a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007024:	2301      	movs	r3, #1
 8007026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007028:	4b3a      	ldr	r3, [pc, #232]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a39      	ldr	r2, [pc, #228]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800702e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007034:	f7fc ff62 	bl	8003efc <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800703a:	e009      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800703c:	f7fc ff5e 	bl	8003efc <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d902      	bls.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	74fb      	strb	r3, [r7, #19]
        break;
 800704e:	e005      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007050:	4b30      	ldr	r3, [pc, #192]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0ef      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800705c:	7cfb      	ldrb	r3, [r7, #19]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d15a      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007062:	4b2b      	ldr	r3, [pc, #172]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800706c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01e      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	429a      	cmp	r2, r3
 800707c:	d019      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800707e:	4b24      	ldr	r3, [pc, #144]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007088:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800708a:	4b21      	ldr	r3, [pc, #132]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007090:	4a1f      	ldr	r2, [pc, #124]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800709a:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070aa:	4a19      	ldr	r2, [pc, #100]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d016      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070bc:	f7fc ff1e 	bl	8003efc <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070c2:	e00b      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c4:	f7fc ff1a 	bl	8003efc <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d902      	bls.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	74fb      	strb	r3, [r7, #19]
            break;
 80070da:	e006      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0ec      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80070ea:	7cfb      	ldrb	r3, [r7, #19]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070f0:	4b07      	ldr	r3, [pc, #28]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fe:	4904      	ldr	r1, [pc, #16]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007106:	e009      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007108:	7cfb      	ldrb	r3, [r7, #19]
 800710a:	74bb      	strb	r3, [r7, #18]
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800710e:	bf00      	nop
 8007110:	40021000 	.word	0x40021000
 8007114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800711c:	7c7b      	ldrb	r3, [r7, #17]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d105      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007122:	4b8a      	ldr	r3, [pc, #552]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007126:	4a89      	ldr	r2, [pc, #548]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800712c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800713a:	4b84      	ldr	r3, [pc, #528]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007140:	f023 0203 	bic.w	r2, r3, #3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	4980      	ldr	r1, [pc, #512]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800715c:	4b7b      	ldr	r3, [pc, #492]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007162:	f023 020c 	bic.w	r2, r3, #12
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	4978      	ldr	r1, [pc, #480]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800717e:	4b73      	ldr	r3, [pc, #460]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007184:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718c:	496f      	ldr	r1, [pc, #444]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071a0:	4b6a      	ldr	r3, [pc, #424]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ae:	4967      	ldr	r1, [pc, #412]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071c2:	4b62      	ldr	r3, [pc, #392]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	495e      	ldr	r1, [pc, #376]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071e4:	4b59      	ldr	r3, [pc, #356]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f2:	4956      	ldr	r1, [pc, #344]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007206:	4b51      	ldr	r3, [pc, #324]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007214:	494d      	ldr	r1, [pc, #308]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d028      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007228:	4b48      	ldr	r3, [pc, #288]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800722a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800722e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007236:	4945      	ldr	r1, [pc, #276]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007246:	d106      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007248:	4b40      	ldr	r3, [pc, #256]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4a3f      	ldr	r2, [pc, #252]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800724e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007252:	60d3      	str	r3, [r2, #12]
 8007254:	e011      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800725e:	d10c      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3304      	adds	r3, #4
 8007264:	2101      	movs	r1, #1
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f872 	bl	8007350 <RCCEx_PLLSAI1_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007270:	7cfb      	ldrb	r3, [r7, #19]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007276:	7cfb      	ldrb	r3, [r7, #19]
 8007278:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d028      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007286:	4b31      	ldr	r3, [pc, #196]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007294:	492d      	ldr	r1, [pc, #180]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a4:	d106      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072a6:	4b29      	ldr	r3, [pc, #164]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	4a28      	ldr	r2, [pc, #160]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072b0:	60d3      	str	r3, [r2, #12]
 80072b2:	e011      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3304      	adds	r3, #4
 80072c2:	2101      	movs	r1, #1
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 f843 	bl	8007350 <RCCEx_PLLSAI1_Config>
 80072ca:	4603      	mov	r3, r0
 80072cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072ce:	7cfb      	ldrb	r3, [r7, #19]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80072d4:	7cfb      	ldrb	r3, [r7, #19]
 80072d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01c      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072e4:	4b19      	ldr	r3, [pc, #100]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f2:	4916      	ldr	r1, [pc, #88]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007302:	d10c      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	2102      	movs	r1, #2
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f820 	bl	8007350 <RCCEx_PLLSAI1_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007314:	7cfb      	ldrb	r3, [r7, #19]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800731a:	7cfb      	ldrb	r3, [r7, #19]
 800731c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800732a:	4b08      	ldr	r3, [pc, #32]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800732c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007330:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007338:	4904      	ldr	r1, [pc, #16]	@ (800734c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800733a:	4313      	orrs	r3, r2
 800733c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007340:	7cbb      	ldrb	r3, [r7, #18]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40021000 	.word	0x40021000

08007350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800735e:	4b74      	ldr	r3, [pc, #464]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d018      	beq.n	800739c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800736a:	4b71      	ldr	r3, [pc, #452]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f003 0203 	and.w	r2, r3, #3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d10d      	bne.n	8007396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
       ||
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007382:	4b6b      	ldr	r3, [pc, #428]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	091b      	lsrs	r3, r3, #4
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
       ||
 8007392:	429a      	cmp	r2, r3
 8007394:	d047      	beq.n	8007426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
 800739a:	e044      	b.n	8007426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d018      	beq.n	80073d6 <RCCEx_PLLSAI1_Config+0x86>
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d825      	bhi.n	80073f4 <RCCEx_PLLSAI1_Config+0xa4>
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d002      	beq.n	80073b2 <RCCEx_PLLSAI1_Config+0x62>
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d009      	beq.n	80073c4 <RCCEx_PLLSAI1_Config+0x74>
 80073b0:	e020      	b.n	80073f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11d      	bne.n	80073fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073c2:	e01a      	b.n	80073fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073c4:	4b5a      	ldr	r3, [pc, #360]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d116      	bne.n	80073fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d4:	e013      	b.n	80073fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073d6:	4b56      	ldr	r3, [pc, #344]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10f      	bne.n	8007402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073e2:	4b53      	ldr	r3, [pc, #332]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073f2:	e006      	b.n	8007402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e004      	b.n	8007404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073fa:	bf00      	nop
 80073fc:	e002      	b.n	8007404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073fe:	bf00      	nop
 8007400:	e000      	b.n	8007404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007402:	bf00      	nop
    }

    if(status == HAL_OK)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10d      	bne.n	8007426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800740a:	4b49      	ldr	r3, [pc, #292]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6819      	ldr	r1, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	3b01      	subs	r3, #1
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	430b      	orrs	r3, r1
 8007420:	4943      	ldr	r1, [pc, #268]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007422:	4313      	orrs	r3, r2
 8007424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d17c      	bne.n	8007526 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800742c:	4b40      	ldr	r3, [pc, #256]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a3f      	ldr	r2, [pc, #252]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007432:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007438:	f7fc fd60 	bl	8003efc <HAL_GetTick>
 800743c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800743e:	e009      	b.n	8007454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007440:	f7fc fd5c 	bl	8003efc <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d902      	bls.n	8007454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	73fb      	strb	r3, [r7, #15]
        break;
 8007452:	e005      	b.n	8007460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007454:	4b36      	ldr	r3, [pc, #216]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1ef      	bne.n	8007440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d15f      	bne.n	8007526 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d110      	bne.n	800748e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800746c:	4b30      	ldr	r3, [pc, #192]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007474:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6892      	ldr	r2, [r2, #8]
 800747c:	0211      	lsls	r1, r2, #8
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	68d2      	ldr	r2, [r2, #12]
 8007482:	06d2      	lsls	r2, r2, #27
 8007484:	430a      	orrs	r2, r1
 8007486:	492a      	ldr	r1, [pc, #168]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007488:	4313      	orrs	r3, r2
 800748a:	610b      	str	r3, [r1, #16]
 800748c:	e027      	b.n	80074de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d112      	bne.n	80074ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007494:	4b26      	ldr	r3, [pc, #152]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800749c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6892      	ldr	r2, [r2, #8]
 80074a4:	0211      	lsls	r1, r2, #8
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6912      	ldr	r2, [r2, #16]
 80074aa:	0852      	lsrs	r2, r2, #1
 80074ac:	3a01      	subs	r2, #1
 80074ae:	0552      	lsls	r2, r2, #21
 80074b0:	430a      	orrs	r2, r1
 80074b2:	491f      	ldr	r1, [pc, #124]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	610b      	str	r3, [r1, #16]
 80074b8:	e011      	b.n	80074de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80074c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6892      	ldr	r2, [r2, #8]
 80074ca:	0211      	lsls	r1, r2, #8
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6952      	ldr	r2, [r2, #20]
 80074d0:	0852      	lsrs	r2, r2, #1
 80074d2:	3a01      	subs	r2, #1
 80074d4:	0652      	lsls	r2, r2, #25
 80074d6:	430a      	orrs	r2, r1
 80074d8:	4915      	ldr	r1, [pc, #84]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80074de:	4b14      	ldr	r3, [pc, #80]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a13      	ldr	r2, [pc, #76]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ea:	f7fc fd07 	bl	8003efc <HAL_GetTick>
 80074ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074f0:	e009      	b.n	8007506 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074f2:	f7fc fd03 	bl	8003efc <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d902      	bls.n	8007506 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	73fb      	strb	r3, [r7, #15]
          break;
 8007504:	e005      	b.n	8007512 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007506:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0ef      	beq.n	80074f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007518:	4b05      	ldr	r3, [pc, #20]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	4903      	ldr	r1, [pc, #12]	@ (8007530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007522:	4313      	orrs	r3, r2
 8007524:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40021000 	.word	0x40021000

08007534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e095      	b.n	8007672 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d108      	bne.n	8007560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007556:	d009      	beq.n	800756c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	61da      	str	r2, [r3, #28]
 800755e:	e005      	b.n	800756c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fb fbbe 	bl	8002d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075ac:	d902      	bls.n	80075b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	e002      	b.n	80075ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80075c2:	d007      	beq.n	80075d4 <HAL_SPI_Init+0xa0>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007616:	ea42 0103 	orr.w	r1, r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	f003 0204 	and.w	r2, r3, #4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007650:	ea42 0103 	orr.w	r1, r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b088      	sub	sp, #32
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_SPI_Transmit+0x22>
 8007698:	2302      	movs	r3, #2
 800769a:	e15f      	b.n	800795c <HAL_SPI_Transmit+0x2e2>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a4:	f7fc fc2a 	bl	8003efc <HAL_GetTick>
 80076a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d002      	beq.n	80076c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076ba:	2302      	movs	r3, #2
 80076bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076be:	e148      	b.n	8007952 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_SPI_Transmit+0x52>
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076d0:	e13f      	b.n	8007952 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2203      	movs	r2, #3
 80076d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	88fa      	ldrh	r2, [r7, #6]
 80076ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800771c:	d10f      	bne.n	800773e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800772c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800773c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007748:	2b40      	cmp	r3, #64	@ 0x40
 800774a:	d007      	beq.n	800775c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800775a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007764:	d94f      	bls.n	8007806 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_SPI_Transmit+0xfa>
 800776e:	8afb      	ldrh	r3, [r7, #22]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d142      	bne.n	80077fa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007778:	881a      	ldrh	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007784:	1c9a      	adds	r2, r3, #2
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007798:	e02f      	b.n	80077fa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d112      	bne.n	80077ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ac:	881a      	ldrh	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	1c9a      	adds	r2, r3, #2
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077cc:	e015      	b.n	80077fa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ce:	f7fc fb95 	bl	8003efc <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d803      	bhi.n	80077e6 <HAL_SPI_Transmit+0x16c>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d102      	bne.n	80077ec <HAL_SPI_Transmit+0x172>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80077f8:	e0ab      	b.n	8007952 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ca      	bne.n	800779a <HAL_SPI_Transmit+0x120>
 8007804:	e080      	b.n	8007908 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_SPI_Transmit+0x19a>
 800780e:	8afb      	ldrh	r3, [r7, #22]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d174      	bne.n	80078fe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	d912      	bls.n	8007844 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007822:	881a      	ldrh	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	1c9a      	adds	r2, r3, #2
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b02      	subs	r3, #2
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007842:	e05c      	b.n	80078fe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	7812      	ldrb	r2, [r2, #0]
 8007850:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800786a:	e048      	b.n	80078fe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d12b      	bne.n	80078d2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	d912      	bls.n	80078aa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	881a      	ldrh	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007894:	1c9a      	adds	r2, r3, #2
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b02      	subs	r3, #2
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078a8:	e029      	b.n	80078fe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	7812      	ldrb	r2, [r2, #0]
 80078b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078d0:	e015      	b.n	80078fe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d2:	f7fc fb13 	bl	8003efc <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d803      	bhi.n	80078ea <HAL_SPI_Transmit+0x270>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d102      	bne.n	80078f0 <HAL_SPI_Transmit+0x276>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80078fc:	e029      	b.n	8007952 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1b1      	bne.n	800786c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fe89 	bl	8008624 <SPI_EndRxTxTransaction>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007926:	2300      	movs	r3, #0
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e003      	b.n	8007952 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800795a:	7ffb      	ldrb	r3, [r7, #31]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af02      	add	r7, sp, #8
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	603b      	str	r3, [r7, #0]
 8007970:	4613      	mov	r3, r2
 8007972:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	d002      	beq.n	800798a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007984:	2302      	movs	r3, #2
 8007986:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007988:	e11a      	b.n	8007bc0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007992:	d112      	bne.n	80079ba <HAL_SPI_Receive+0x56>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10e      	bne.n	80079ba <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2204      	movs	r2, #4
 80079a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079a4:	88fa      	ldrh	r2, [r7, #6]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f90e 	bl	8007bd2 <HAL_SPI_TransmitReceive>
 80079b6:	4603      	mov	r3, r0
 80079b8:	e107      	b.n	8007bca <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_SPI_Receive+0x64>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e100      	b.n	8007bca <HAL_SPI_Receive+0x266>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079d0:	f7fc fa94 	bl	8003efc <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_SPI_Receive+0x7e>
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079e6:	e0eb      	b.n	8007bc0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2204      	movs	r2, #4
 80079ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a32:	d908      	bls.n	8007a46 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a42:	605a      	str	r2, [r3, #4]
 8007a44:	e007      	b.n	8007a56 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a54:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a5e:	d10f      	bne.n	8007a80 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8a:	2b40      	cmp	r3, #64	@ 0x40
 8007a8c:	d007      	beq.n	8007a9e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007aa6:	d86f      	bhi.n	8007b88 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007aa8:	e034      	b.n	8007b14 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d117      	bne.n	8007ae8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f103 020c 	add.w	r2, r3, #12
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac4:	7812      	ldrb	r2, [r2, #0]
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007ae6:	e015      	b.n	8007b14 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae8:	f7fc fa08 	bl	8003efc <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d803      	bhi.n	8007b00 <HAL_SPI_Receive+0x19c>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d102      	bne.n	8007b06 <HAL_SPI_Receive+0x1a2>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007b12:	e055      	b.n	8007bc0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1c4      	bne.n	8007aaa <HAL_SPI_Receive+0x146>
 8007b20:	e038      	b.n	8007b94 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d115      	bne.n	8007b5c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3a:	b292      	uxth	r2, r2
 8007b3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007b5a:	e015      	b.n	8007b88 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b5c:	f7fc f9ce 	bl	8003efc <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d803      	bhi.n	8007b74 <HAL_SPI_Receive+0x210>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d102      	bne.n	8007b7a <HAL_SPI_Receive+0x216>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007b86:	e01b      	b.n	8007bc0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1c6      	bne.n	8007b22 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fceb 	bl	8008574 <SPI_EndRxTransaction>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]
 8007bb6:	e003      	b.n	8007bc0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b08a      	sub	sp, #40	@ 0x28
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	607a      	str	r2, [r7, #4]
 8007bde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007be0:	2301      	movs	r3, #1
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x26>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e20a      	b.n	800800e <HAL_SPI_TransmitReceive+0x43c>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c00:	f7fc f97c 	bl	8003efc <HAL_GetTick>
 8007c04:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c0c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c14:	887b      	ldrh	r3, [r7, #2]
 8007c16:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c18:	887b      	ldrh	r3, [r7, #2]
 8007c1a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c1c:	7efb      	ldrb	r3, [r7, #27]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d00e      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x6e>
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c28:	d106      	bne.n	8007c38 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d102      	bne.n	8007c38 <HAL_SPI_TransmitReceive+0x66>
 8007c32:	7efb      	ldrb	r3, [r7, #27]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d003      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007c3e:	e1e0      	b.n	8008002 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x80>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x80>
 8007c4c:	887b      	ldrh	r3, [r7, #2]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007c58:	e1d3      	b.n	8008002 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d003      	beq.n	8007c6e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2205      	movs	r2, #5
 8007c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	887a      	ldrh	r2, [r7, #2]
 8007c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	887a      	ldrh	r2, [r7, #2]
 8007c86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	887a      	ldrh	r2, [r7, #2]
 8007c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	887a      	ldrh	r2, [r7, #2]
 8007c9a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007cb0:	d802      	bhi.n	8007cb8 <HAL_SPI_TransmitReceive+0xe6>
 8007cb2:	8a3b      	ldrh	r3, [r7, #16]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d908      	bls.n	8007cca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cc6:	605a      	str	r2, [r3, #4]
 8007cc8:	e007      	b.n	8007cda <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007cd8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce4:	2b40      	cmp	r3, #64	@ 0x40
 8007ce6:	d007      	beq.n	8007cf8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d00:	f240 8081 	bls.w	8007e06 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x140>
 8007d0c:	8a7b      	ldrh	r3, [r7, #18]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d16d      	bne.n	8007dee <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	881a      	ldrh	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	1c9a      	adds	r2, r3, #2
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d36:	e05a      	b.n	8007dee <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d11b      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x1ac>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d016      	beq.n	8007d7e <HAL_SPI_TransmitReceive+0x1ac>
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d113      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	881a      	ldrh	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d66:	1c9a      	adds	r2, r3, #2
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d11c      	bne.n	8007dc6 <HAL_SPI_TransmitReceive+0x1f4>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d016      	beq.n	8007dc6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	b292      	uxth	r2, r2
 8007da4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	1c9a      	adds	r2, r3, #2
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dc6:	f7fc f899 	bl	8003efc <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d80b      	bhi.n	8007dee <HAL_SPI_TransmitReceive+0x21c>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ddc:	d007      	beq.n	8007dee <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007dec:	e109      	b.n	8008002 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d19f      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x166>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d199      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x166>
 8007e04:	e0e3      	b.n	8007fce <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0x244>
 8007e0e:	8a7b      	ldrh	r3, [r7, #18]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	f040 80cf 	bne.w	8007fb4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d912      	bls.n	8007e46 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	881a      	ldrh	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e30:	1c9a      	adds	r2, r3, #2
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b02      	subs	r3, #2
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e44:	e0b6      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	7812      	ldrb	r2, [r2, #0]
 8007e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e6c:	e0a2      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d134      	bne.n	8007ee6 <HAL_SPI_TransmitReceive+0x314>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d02f      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x314>
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d12c      	bne.n	8007ee6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d912      	bls.n	8007ebc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9a:	881a      	ldrh	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea6:	1c9a      	adds	r2, r3, #2
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b02      	subs	r3, #2
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007eba:	e012      	b.n	8007ee2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d148      	bne.n	8007f86 <HAL_SPI_TransmitReceive+0x3b4>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d042      	beq.n	8007f86 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d923      	bls.n	8007f54 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f16:	b292      	uxth	r2, r2
 8007f18:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	1c9a      	adds	r2, r3, #2
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b02      	subs	r3, #2
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d81f      	bhi.n	8007f82 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f50:	605a      	str	r2, [r3, #4]
 8007f52:	e016      	b.n	8007f82 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f103 020c 	add.w	r2, r3, #12
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f60:	7812      	ldrb	r2, [r2, #0]
 8007f62:	b2d2      	uxtb	r2, r2
 8007f64:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f82:	2301      	movs	r3, #1
 8007f84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f86:	f7fb ffb9 	bl	8003efc <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d803      	bhi.n	8007f9e <HAL_SPI_TransmitReceive+0x3cc>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d102      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x3d2>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d107      	bne.n	8007fb4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007fb2:	e026      	b.n	8008002 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f47f af57 	bne.w	8007e6e <HAL_SPI_TransmitReceive+0x29c>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f47f af50 	bne.w	8007e6e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fb26 	bl	8008624 <SPI_EndRxTxTransaction>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ff8:	e003      	b.n	8008002 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800800a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800800e:	4618      	mov	r0, r3
 8008010:	3728      	adds	r7, #40	@ 0x28
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_SPI_Transmit_DMA+0x20>
 8008034:	2302      	movs	r3, #2
 8008036:	e0d4      	b.n	80081e2 <HAL_SPI_Transmit_DMA+0x1ca>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b01      	cmp	r3, #1
 800804a:	d002      	beq.n	8008052 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800804c:	2302      	movs	r3, #2
 800804e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008050:	e0c2      	b.n	80081d8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <HAL_SPI_Transmit_DMA+0x46>
 8008058:	88fb      	ldrh	r3, [r7, #6]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d102      	bne.n	8008064 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008062:	e0b9      	b.n	80081d8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2203      	movs	r2, #3
 8008068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	88fa      	ldrh	r2, [r7, #6]
 800807c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	88fa      	ldrh	r2, [r7, #6]
 8008082:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ae:	d10f      	bne.n	80080d0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d4:	4a45      	ldr	r2, [pc, #276]	@ (80081ec <HAL_SPI_Transmit_DMA+0x1d4>)
 80080d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080dc:	4a44      	ldr	r2, [pc, #272]	@ (80081f0 <HAL_SPI_Transmit_DMA+0x1d8>)
 80080de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e4:	4a43      	ldr	r2, [pc, #268]	@ (80081f4 <HAL_SPI_Transmit_DMA+0x1dc>)
 80080e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ec:	2200      	movs	r2, #0
 80080ee:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080fe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008108:	d82d      	bhi.n	8008166 <HAL_SPI_Transmit_DMA+0x14e>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008114:	d127      	bne.n	8008166 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800811a:	b29b      	uxth	r3, r3
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10f      	bne.n	8008144 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008132:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008138:	b29b      	uxth	r3, r3
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008142:	e010      	b.n	8008166 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008152:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008158:	b29b      	uxth	r3, r3
 800815a:	085b      	lsrs	r3, r3, #1
 800815c:	b29b      	uxth	r3, r3
 800815e:	3301      	adds	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816e:	4619      	mov	r1, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800817c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800817e:	f7fd f84c 	bl	800521a <HAL_DMA_Start_IT>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800818c:	f043 0210 	orr.w	r2, r3, #16
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008198:	e01e      	b.n	80081d8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a4:	2b40      	cmp	r3, #64	@ 0x40
 80081a6:	d007      	beq.n	80081b8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0220 	orr.w	r2, r2, #32
 80081c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0202 	orr.w	r2, r2, #2
 80081d6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	080082db 	.word	0x080082db
 80081f0:	08008235 	.word	0x08008235
 80081f4:	080082f7 	.word	0x080082f7

080081f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008240:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008242:	f7fb fe5b 	bl	8003efc <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b20      	cmp	r3, #32
 8008254:	d03b      	beq.n	80082ce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0220 	bic.w	r2, r2, #32
 8008264:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0202 	bic.w	r2, r2, #2
 8008274:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	2164      	movs	r1, #100	@ 0x64
 800827a:	6978      	ldr	r0, [r7, #20]
 800827c:	f000 f9d2 	bl	8008624 <SPI_EndRxTxTransaction>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800828a:	f043 0220 	orr.w	r2, r3, #32
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10a      	bne.n	80082b0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2200      	movs	r2, #0
 80082b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082c6:	6978      	ldr	r0, [r7, #20]
 80082c8:	f7ff ffaa 	bl	8008220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082cc:	e002      	b.n	80082d4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7ff ff92 	bl	80081f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7ff ff8f 	bl	800820c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082ee:	bf00      	nop
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008302:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0203 	bic.w	r2, r2, #3
 8008312:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008318:	f043 0210 	orr.w	r2, r3, #16
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff79 	bl	8008220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008348:	f7fb fdd8 	bl	8003efc <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008350:	1a9b      	subs	r3, r3, r2
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	4413      	add	r3, r2
 8008356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008358:	f7fb fdd0 	bl	8003efc <HAL_GetTick>
 800835c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800835e:	4b39      	ldr	r3, [pc, #228]	@ (8008444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	015b      	lsls	r3, r3, #5
 8008364:	0d1b      	lsrs	r3, r3, #20
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	fb02 f303 	mul.w	r3, r2, r3
 800836c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800836e:	e054      	b.n	800841a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008376:	d050      	beq.n	800841a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008378:	f7fb fdc0 	bl	8003efc <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	429a      	cmp	r2, r3
 8008386:	d902      	bls.n	800838e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d13d      	bne.n	800840a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800839c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083a6:	d111      	bne.n	80083cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083b0:	d004      	beq.n	80083bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ba:	d107      	bne.n	80083cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083d4:	d10f      	bne.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e017      	b.n	800843a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	3b01      	subs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4013      	ands	r3, r2
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	429a      	cmp	r2, r3
 8008428:	bf0c      	ite	eq
 800842a:	2301      	moveq	r3, #1
 800842c:	2300      	movne	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	429a      	cmp	r2, r3
 8008436:	d19b      	bne.n	8008370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000018 	.word	0x20000018

08008448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	@ 0x28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800845a:	f7fb fd4f 	bl	8003efc <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	4413      	add	r3, r2
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800846a:	f7fb fd47 	bl	8003efc <HAL_GetTick>
 800846e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008478:	4b3d      	ldr	r3, [pc, #244]	@ (8008570 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	00da      	lsls	r2, r3, #3
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	0d1b      	lsrs	r3, r3, #20
 8008488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800848a:	fb02 f303 	mul.w	r3, r2, r3
 800848e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008490:	e060      	b.n	8008554 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008498:	d107      	bne.n	80084aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d104      	bne.n	80084aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b0:	d050      	beq.n	8008554 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084b2:	f7fb fd23 	bl	8003efc <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084be:	429a      	cmp	r2, r3
 80084c0:	d902      	bls.n	80084c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d13d      	bne.n	8008544 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084e0:	d111      	bne.n	8008506 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ea:	d004      	beq.n	80084f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f4:	d107      	bne.n	8008506 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008504:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800850e:	d10f      	bne.n	8008530 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800852e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e010      	b.n	8008566 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	3b01      	subs	r3, #1
 8008552:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4013      	ands	r3, r2
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d196      	bne.n	8008492 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3728      	adds	r7, #40	@ 0x28
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20000018 	.word	0x20000018

08008574 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008588:	d111      	bne.n	80085ae <SPI_EndRxTransaction+0x3a>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008592:	d004      	beq.n	800859e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859c:	d107      	bne.n	80085ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ac:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2200      	movs	r2, #0
 80085b6:	2180      	movs	r1, #128	@ 0x80
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff febd 	bl	8008338 <SPI_WaitFlagStateUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085c8:	f043 0220 	orr.w	r2, r3, #32
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e023      	b.n	800861c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085dc:	d11d      	bne.n	800861a <SPI_EndRxTransaction+0xa6>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085e6:	d004      	beq.n	80085f2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f0:	d113      	bne.n	800861a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff ff22 	bl	8008448 <SPI_WaitFifoStateUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d007      	beq.n	800861a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800860e:	f043 0220 	orr.w	r2, r3, #32
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e000      	b.n	800861c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af02      	add	r7, sp, #8
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2200      	movs	r2, #0
 8008638:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7ff ff03 	bl	8008448 <SPI_WaitFifoStateUntilTimeout>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800864c:	f043 0220 	orr.w	r2, r3, #32
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e027      	b.n	80086a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	2180      	movs	r1, #128	@ 0x80
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fe68 	bl	8008338 <SPI_WaitFlagStateUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008672:	f043 0220 	orr.w	r2, r3, #32
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e014      	b.n	80086a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f7ff fedc 	bl	8008448 <SPI_WaitFifoStateUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800869a:	f043 0220 	orr.w	r2, r3, #32
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e000      	b.n	80086a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e049      	b.n	8008756 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fa fb7a 	bl	8002dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f000 fbfe 	bl	8008ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b01      	cmp	r3, #1
 8008772:	d001      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e03b      	b.n	80087f0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a19      	ldr	r2, [pc, #100]	@ (80087fc <HAL_TIM_Base_Start_IT+0x9c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d009      	beq.n	80087ae <HAL_TIM_Base_Start_IT+0x4e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a2:	d004      	beq.n	80087ae <HAL_TIM_Base_Start_IT+0x4e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a15      	ldr	r2, [pc, #84]	@ (8008800 <HAL_TIM_Base_Start_IT+0xa0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d115      	bne.n	80087da <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	4b13      	ldr	r3, [pc, #76]	@ (8008804 <HAL_TIM_Base_Start_IT+0xa4>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b06      	cmp	r3, #6
 80087be:	d015      	beq.n	80087ec <HAL_TIM_Base_Start_IT+0x8c>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c6:	d011      	beq.n	80087ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0201 	orr.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d8:	e008      	b.n	80087ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0201 	orr.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	e000      	b.n	80087ee <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40014000 	.word	0x40014000
 8008804:	00010007 	.word	0x00010007

08008808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e049      	b.n	80088ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fa faae 	bl	8002d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f000 fb52 	bl	8008ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d109      	bne.n	80088dc <HAL_TIM_PWM_Start+0x24>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	bf14      	ite	ne
 80088d4:	2301      	movne	r3, #1
 80088d6:	2300      	moveq	r3, #0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	e03c      	b.n	8008956 <HAL_TIM_PWM_Start+0x9e>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b04      	cmp	r3, #4
 80088e0:	d109      	bne.n	80088f6 <HAL_TIM_PWM_Start+0x3e>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	bf14      	ite	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	2300      	moveq	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	e02f      	b.n	8008956 <HAL_TIM_PWM_Start+0x9e>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d109      	bne.n	8008910 <HAL_TIM_PWM_Start+0x58>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	e022      	b.n	8008956 <HAL_TIM_PWM_Start+0x9e>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b0c      	cmp	r3, #12
 8008914:	d109      	bne.n	800892a <HAL_TIM_PWM_Start+0x72>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b01      	cmp	r3, #1
 8008920:	bf14      	ite	ne
 8008922:	2301      	movne	r3, #1
 8008924:	2300      	moveq	r3, #0
 8008926:	b2db      	uxtb	r3, r3
 8008928:	e015      	b.n	8008956 <HAL_TIM_PWM_Start+0x9e>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b10      	cmp	r3, #16
 800892e:	d109      	bne.n	8008944 <HAL_TIM_PWM_Start+0x8c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b01      	cmp	r3, #1
 800893a:	bf14      	ite	ne
 800893c:	2301      	movne	r3, #1
 800893e:	2300      	moveq	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	e008      	b.n	8008956 <HAL_TIM_PWM_Start+0x9e>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	bf14      	ite	ne
 8008950:	2301      	movne	r3, #1
 8008952:	2300      	moveq	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e07e      	b.n	8008a5c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d104      	bne.n	800896e <HAL_TIM_PWM_Start+0xb6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800896c:	e023      	b.n	80089b6 <HAL_TIM_PWM_Start+0xfe>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b04      	cmp	r3, #4
 8008972:	d104      	bne.n	800897e <HAL_TIM_PWM_Start+0xc6>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800897c:	e01b      	b.n	80089b6 <HAL_TIM_PWM_Start+0xfe>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b08      	cmp	r3, #8
 8008982:	d104      	bne.n	800898e <HAL_TIM_PWM_Start+0xd6>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800898c:	e013      	b.n	80089b6 <HAL_TIM_PWM_Start+0xfe>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b0c      	cmp	r3, #12
 8008992:	d104      	bne.n	800899e <HAL_TIM_PWM_Start+0xe6>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800899c:	e00b      	b.n	80089b6 <HAL_TIM_PWM_Start+0xfe>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b10      	cmp	r3, #16
 80089a2:	d104      	bne.n	80089ae <HAL_TIM_PWM_Start+0xf6>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089ac:	e003      	b.n	80089b6 <HAL_TIM_PWM_Start+0xfe>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2201      	movs	r2, #1
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fd78 	bl	80094b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a26      	ldr	r2, [pc, #152]	@ (8008a64 <HAL_TIM_PWM_Start+0x1ac>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d009      	beq.n	80089e2 <HAL_TIM_PWM_Start+0x12a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a25      	ldr	r2, [pc, #148]	@ (8008a68 <HAL_TIM_PWM_Start+0x1b0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_TIM_PWM_Start+0x12a>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a23      	ldr	r2, [pc, #140]	@ (8008a6c <HAL_TIM_PWM_Start+0x1b4>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d101      	bne.n	80089e6 <HAL_TIM_PWM_Start+0x12e>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <HAL_TIM_PWM_Start+0x130>
 80089e6:	2300      	movs	r3, #0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d007      	beq.n	80089fc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a18      	ldr	r2, [pc, #96]	@ (8008a64 <HAL_TIM_PWM_Start+0x1ac>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d009      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x162>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a0e:	d004      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x162>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a14      	ldr	r2, [pc, #80]	@ (8008a68 <HAL_TIM_PWM_Start+0x1b0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d115      	bne.n	8008a46 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	4b13      	ldr	r3, [pc, #76]	@ (8008a70 <HAL_TIM_PWM_Start+0x1b8>)
 8008a22:	4013      	ands	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b06      	cmp	r3, #6
 8008a2a:	d015      	beq.n	8008a58 <HAL_TIM_PWM_Start+0x1a0>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a32:	d011      	beq.n	8008a58 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0201 	orr.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a44:	e008      	b.n	8008a58 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0201 	orr.w	r2, r2, #1
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	e000      	b.n	8008a5a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40014400 	.word	0x40014400
 8008a70:	00010007 	.word	0x00010007

08008a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d020      	beq.n	8008ad8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01b      	beq.n	8008ad8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f06f 0202 	mvn.w	r2, #2
 8008aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9f8 	bl	8008eb4 <HAL_TIM_IC_CaptureCallback>
 8008ac4:	e005      	b.n	8008ad2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9ea 	bl	8008ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9fb 	bl	8008ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d020      	beq.n	8008b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01b      	beq.n	8008b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0204 	mvn.w	r2, #4
 8008af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f9d2 	bl	8008eb4 <HAL_TIM_IC_CaptureCallback>
 8008b10:	e005      	b.n	8008b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9c4 	bl	8008ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9d5 	bl	8008ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d020      	beq.n	8008b70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f003 0308 	and.w	r3, r3, #8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01b      	beq.n	8008b70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0208 	mvn.w	r2, #8
 8008b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2204      	movs	r2, #4
 8008b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f9ac 	bl	8008eb4 <HAL_TIM_IC_CaptureCallback>
 8008b5c:	e005      	b.n	8008b6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f99e 	bl	8008ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9af 	bl	8008ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 0310 	and.w	r3, r3, #16
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d020      	beq.n	8008bbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01b      	beq.n	8008bbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0210 	mvn.w	r2, #16
 8008b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2208      	movs	r2, #8
 8008b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f986 	bl	8008eb4 <HAL_TIM_IC_CaptureCallback>
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f978 	bl	8008ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f989 	bl	8008ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00c      	beq.n	8008be0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d007      	beq.n	8008be0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0201 	mvn.w	r2, #1
 8008bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7f9 fb26 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00c      	beq.n	8008c04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d007      	beq.n	8008c04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fd66 	bl	80096d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00c      	beq.n	8008c28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d007      	beq.n	8008c28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fd5e 	bl	80096e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00c      	beq.n	8008c4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d007      	beq.n	8008c4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f948 	bl	8008edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00c      	beq.n	8008c70 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0220 	mvn.w	r2, #32
 8008c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fd26 	bl	80096bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c70:	bf00      	nop
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e0ff      	b.n	8008e96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b14      	cmp	r3, #20
 8008ca2:	f200 80f0 	bhi.w	8008e86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008e87 	.word	0x08008e87
 8008cb4:	08008e87 	.word	0x08008e87
 8008cb8:	08008e87 	.word	0x08008e87
 8008cbc:	08008d41 	.word	0x08008d41
 8008cc0:	08008e87 	.word	0x08008e87
 8008cc4:	08008e87 	.word	0x08008e87
 8008cc8:	08008e87 	.word	0x08008e87
 8008ccc:	08008d83 	.word	0x08008d83
 8008cd0:	08008e87 	.word	0x08008e87
 8008cd4:	08008e87 	.word	0x08008e87
 8008cd8:	08008e87 	.word	0x08008e87
 8008cdc:	08008dc3 	.word	0x08008dc3
 8008ce0:	08008e87 	.word	0x08008e87
 8008ce4:	08008e87 	.word	0x08008e87
 8008ce8:	08008e87 	.word	0x08008e87
 8008cec:	08008e05 	.word	0x08008e05
 8008cf0:	08008e87 	.word	0x08008e87
 8008cf4:	08008e87 	.word	0x08008e87
 8008cf8:	08008e87 	.word	0x08008e87
 8008cfc:	08008e45 	.word	0x08008e45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f956 	bl	8008fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699a      	ldr	r2, [r3, #24]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0208 	orr.w	r2, r2, #8
 8008d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699a      	ldr	r2, [r3, #24]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0204 	bic.w	r2, r2, #4
 8008d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6999      	ldr	r1, [r3, #24]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	691a      	ldr	r2, [r3, #16]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	619a      	str	r2, [r3, #24]
      break;
 8008d3e:	e0a5      	b.n	8008e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f9b2 	bl	80090b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699a      	ldr	r2, [r3, #24]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	699a      	ldr	r2, [r3, #24]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6999      	ldr	r1, [r3, #24]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	021a      	lsls	r2, r3, #8
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	619a      	str	r2, [r3, #24]
      break;
 8008d80:	e084      	b.n	8008e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fa0b 	bl	80091a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69da      	ldr	r2, [r3, #28]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0208 	orr.w	r2, r2, #8
 8008d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69da      	ldr	r2, [r3, #28]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0204 	bic.w	r2, r2, #4
 8008dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69d9      	ldr	r1, [r3, #28]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	61da      	str	r2, [r3, #28]
      break;
 8008dc0:	e064      	b.n	8008e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fa63 	bl	8009294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69da      	ldr	r2, [r3, #28]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69d9      	ldr	r1, [r3, #28]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	021a      	lsls	r2, r3, #8
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	61da      	str	r2, [r3, #28]
      break;
 8008e02:	e043      	b.n	8008e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 faa0 	bl	8009350 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0208 	orr.w	r2, r2, #8
 8008e1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 0204 	bic.w	r2, r2, #4
 8008e2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008e42:	e023      	b.n	8008e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fad8 	bl	8009400 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	021a      	lsls	r2, r3, #8
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008e84:	e002      	b.n	8008e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop

08008ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a2a      	ldr	r2, [pc, #168]	@ (8008fac <TIM_Base_SetConfig+0xbc>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_Base_SetConfig+0x20>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0e:	d108      	bne.n	8008f22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a21      	ldr	r2, [pc, #132]	@ (8008fac <TIM_Base_SetConfig+0xbc>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00b      	beq.n	8008f42 <TIM_Base_SetConfig+0x52>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f30:	d007      	beq.n	8008f42 <TIM_Base_SetConfig+0x52>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb0 <TIM_Base_SetConfig+0xc0>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d003      	beq.n	8008f42 <TIM_Base_SetConfig+0x52>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb4 <TIM_Base_SetConfig+0xc4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d108      	bne.n	8008f54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8008fac <TIM_Base_SetConfig+0xbc>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d007      	beq.n	8008f90 <TIM_Base_SetConfig+0xa0>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a0b      	ldr	r2, [pc, #44]	@ (8008fb0 <TIM_Base_SetConfig+0xc0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d003      	beq.n	8008f90 <TIM_Base_SetConfig+0xa0>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb4 <TIM_Base_SetConfig+0xc4>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d103      	bne.n	8008f98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	615a      	str	r2, [r3, #20]
}
 8008f9e:	bf00      	nop
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	40012c00 	.word	0x40012c00
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400

08008fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	f023 0201 	bic.w	r2, r3, #1
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f023 0302 	bic.w	r3, r3, #2
 8009004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	4313      	orrs	r3, r2
 800900e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a24      	ldr	r2, [pc, #144]	@ (80090a4 <TIM_OC1_SetConfig+0xec>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d007      	beq.n	8009028 <TIM_OC1_SetConfig+0x70>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a23      	ldr	r2, [pc, #140]	@ (80090a8 <TIM_OC1_SetConfig+0xf0>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d003      	beq.n	8009028 <TIM_OC1_SetConfig+0x70>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a22      	ldr	r2, [pc, #136]	@ (80090ac <TIM_OC1_SetConfig+0xf4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d10c      	bne.n	8009042 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f023 0308 	bic.w	r3, r3, #8
 800902e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f023 0304 	bic.w	r3, r3, #4
 8009040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a17      	ldr	r2, [pc, #92]	@ (80090a4 <TIM_OC1_SetConfig+0xec>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d007      	beq.n	800905a <TIM_OC1_SetConfig+0xa2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a16      	ldr	r2, [pc, #88]	@ (80090a8 <TIM_OC1_SetConfig+0xf0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_OC1_SetConfig+0xa2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a15      	ldr	r2, [pc, #84]	@ (80090ac <TIM_OC1_SetConfig+0xf4>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d111      	bne.n	800907e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	4313      	orrs	r3, r2
 800907c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	621a      	str	r2, [r3, #32]
}
 8009098:	bf00      	nop
 800909a:	371c      	adds	r7, #28
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40014400 	.word	0x40014400

080090b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	f023 0210 	bic.w	r2, r3, #16
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f023 0320 	bic.w	r3, r3, #32
 80090fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a22      	ldr	r2, [pc, #136]	@ (8009198 <TIM_OC2_SetConfig+0xe8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d10d      	bne.n	8009130 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800911a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	4313      	orrs	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800912e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a19      	ldr	r2, [pc, #100]	@ (8009198 <TIM_OC2_SetConfig+0xe8>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d007      	beq.n	8009148 <TIM_OC2_SetConfig+0x98>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a18      	ldr	r2, [pc, #96]	@ (800919c <TIM_OC2_SetConfig+0xec>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d003      	beq.n	8009148 <TIM_OC2_SetConfig+0x98>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a17      	ldr	r2, [pc, #92]	@ (80091a0 <TIM_OC2_SetConfig+0xf0>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d113      	bne.n	8009170 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800914e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4313      	orrs	r3, r2
 8009162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	621a      	str	r2, [r3, #32]
}
 800918a:	bf00      	nop
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	40012c00 	.word	0x40012c00
 800919c:	40014000 	.word	0x40014000
 80091a0:	40014400 	.word	0x40014400

080091a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0303 	bic.w	r3, r3, #3
 80091de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a21      	ldr	r2, [pc, #132]	@ (8009288 <TIM_OC3_SetConfig+0xe4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d10d      	bne.n	8009222 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800920c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	4313      	orrs	r3, r2
 8009218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a18      	ldr	r2, [pc, #96]	@ (8009288 <TIM_OC3_SetConfig+0xe4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d007      	beq.n	800923a <TIM_OC3_SetConfig+0x96>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a17      	ldr	r2, [pc, #92]	@ (800928c <TIM_OC3_SetConfig+0xe8>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_OC3_SetConfig+0x96>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a16      	ldr	r2, [pc, #88]	@ (8009290 <TIM_OC3_SetConfig+0xec>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d113      	bne.n	8009262 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	621a      	str	r2, [r3, #32]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40014000 	.word	0x40014000
 8009290:	40014400 	.word	0x40014400

08009294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	021b      	lsls	r3, r3, #8
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	031b      	lsls	r3, r3, #12
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a14      	ldr	r2, [pc, #80]	@ (8009344 <TIM_OC4_SetConfig+0xb0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d007      	beq.n	8009308 <TIM_OC4_SetConfig+0x74>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a13      	ldr	r2, [pc, #76]	@ (8009348 <TIM_OC4_SetConfig+0xb4>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d003      	beq.n	8009308 <TIM_OC4_SetConfig+0x74>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a12      	ldr	r2, [pc, #72]	@ (800934c <TIM_OC4_SetConfig+0xb8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d109      	bne.n	800931c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800930e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	019b      	lsls	r3, r3, #6
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	4313      	orrs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	621a      	str	r2, [r3, #32]
}
 8009336:	bf00      	nop
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	40012c00 	.word	0x40012c00
 8009348:	40014000 	.word	0x40014000
 800934c:	40014400 	.word	0x40014400

08009350 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800937e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009394:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	041b      	lsls	r3, r3, #16
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a13      	ldr	r2, [pc, #76]	@ (80093f4 <TIM_OC5_SetConfig+0xa4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d007      	beq.n	80093ba <TIM_OC5_SetConfig+0x6a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a12      	ldr	r2, [pc, #72]	@ (80093f8 <TIM_OC5_SetConfig+0xa8>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC5_SetConfig+0x6a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a11      	ldr	r2, [pc, #68]	@ (80093fc <TIM_OC5_SetConfig+0xac>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d109      	bne.n	80093ce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	621a      	str	r2, [r3, #32]
}
 80093e8:	bf00      	nop
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	40012c00 	.word	0x40012c00
 80093f8:	40014000 	.word	0x40014000
 80093fc:	40014400 	.word	0x40014400

08009400 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800942e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	051b      	lsls	r3, r3, #20
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	4313      	orrs	r3, r2
 8009452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a14      	ldr	r2, [pc, #80]	@ (80094a8 <TIM_OC6_SetConfig+0xa8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d007      	beq.n	800946c <TIM_OC6_SetConfig+0x6c>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a13      	ldr	r2, [pc, #76]	@ (80094ac <TIM_OC6_SetConfig+0xac>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d003      	beq.n	800946c <TIM_OC6_SetConfig+0x6c>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a12      	ldr	r2, [pc, #72]	@ (80094b0 <TIM_OC6_SetConfig+0xb0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d109      	bne.n	8009480 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	029b      	lsls	r3, r3, #10
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	4313      	orrs	r3, r2
 800947e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	621a      	str	r2, [r3, #32]
}
 800949a:	bf00      	nop
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	40012c00 	.word	0x40012c00
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400

080094b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f003 031f 	and.w	r3, r3, #31
 80094c6:	2201      	movs	r2, #1
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a1a      	ldr	r2, [r3, #32]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	43db      	mvns	r3, r3
 80094d6:	401a      	ands	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a1a      	ldr	r2, [r3, #32]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f003 031f 	and.w	r3, r3, #31
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	fa01 f303 	lsl.w	r3, r1, r3
 80094ec:	431a      	orrs	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	621a      	str	r2, [r3, #32]
}
 80094f2:	bf00      	nop
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
	...

08009500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009514:	2302      	movs	r3, #2
 8009516:	e04f      	b.n	80095b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a21      	ldr	r2, [pc, #132]	@ (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d108      	bne.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009548:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a14      	ldr	r2, [pc, #80]	@ (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d009      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009580:	d004      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a10      	ldr	r2, [pc, #64]	@ (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d10c      	bne.n	80095a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009592:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	4313      	orrs	r3, r2
 800959c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	40012c00 	.word	0x40012c00
 80095c8:	40014000 	.word	0x40014000

080095cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d101      	bne.n	80095e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e060      	b.n	80096aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4313      	orrs	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	041b      	lsls	r3, r3, #16
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a14      	ldr	r2, [pc, #80]	@ (80096b8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d115      	bne.n	8009698 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009676:	051b      	lsls	r3, r3, #20
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	40012c00 	.word	0x40012c00

080096bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e040      	b.n	800978c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7f9 fa38 	bl	8002b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2224      	movs	r2, #36	@ 0x24
 8009724:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0201 	bic.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fba6 	bl	8009e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f977 	bl	8009a38 <UART_SetConfig>
 800974a:	4603      	mov	r3, r0
 800974c:	2b01      	cmp	r3, #1
 800974e:	d101      	bne.n	8009754 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e01b      	b.n	800978c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0201 	orr.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fc25 	bl	8009fd4 <UART_CheckIdleState>
 800978a:	4603      	mov	r3, r0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08a      	sub	sp, #40	@ 0x28
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	4613      	mov	r3, r2
 80097a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d177      	bne.n	800989c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <HAL_UART_Transmit+0x24>
 80097b2:	88fb      	ldrh	r3, [r7, #6]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e070      	b.n	800989e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2221      	movs	r2, #33	@ 0x21
 80097c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097ca:	f7fa fb97 	bl	8003efc <HAL_GetTick>
 80097ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	88fa      	ldrh	r2, [r7, #6]
 80097dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097e8:	d108      	bne.n	80097fc <HAL_UART_Transmit+0x68>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d104      	bne.n	80097fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	61bb      	str	r3, [r7, #24]
 80097fa:	e003      	b.n	8009804 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009804:	e02f      	b.n	8009866 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2200      	movs	r2, #0
 800980e:	2180      	movs	r1, #128	@ 0x80
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 fc87 	bl	800a124 <UART_WaitOnFlagUntilTimeout>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2220      	movs	r2, #32
 8009820:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e03b      	b.n	800989e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10b      	bne.n	8009844 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009838:	b292      	uxth	r2, r2
 800983a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	3302      	adds	r3, #2
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	e007      	b.n	8009854 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	781a      	ldrb	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	3301      	adds	r3, #1
 8009852:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800985a:	b29b      	uxth	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800986c:	b29b      	uxth	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1c9      	bne.n	8009806 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2200      	movs	r2, #0
 800987a:	2140      	movs	r1, #64	@ 0x40
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 fc51 	bl	800a124 <UART_WaitOnFlagUntilTimeout>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d004      	beq.n	8009892 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2220      	movs	r2, #32
 800988c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e005      	b.n	800989e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2220      	movs	r2, #32
 8009896:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	e000      	b.n	800989e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800989c:	2302      	movs	r3, #2
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b08a      	sub	sp, #40	@ 0x28
 80098aa:	af02      	add	r7, sp, #8
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	603b      	str	r3, [r7, #0]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098bc:	2b20      	cmp	r3, #32
 80098be:	f040 80b6 	bne.w	8009a2e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <HAL_UART_Receive+0x28>
 80098c8:	88fb      	ldrh	r3, [r7, #6]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e0ae      	b.n	8009a30 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2222      	movs	r2, #34	@ 0x22
 80098de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098e8:	f7fa fb08 	bl	8003efc <HAL_GetTick>
 80098ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	88fa      	ldrh	r2, [r7, #6]
 80098f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	88fa      	ldrh	r2, [r7, #6]
 80098fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009906:	d10e      	bne.n	8009926 <HAL_UART_Receive+0x80>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d105      	bne.n	800991c <HAL_UART_Receive+0x76>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009916:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800991a:	e02d      	b.n	8009978 <HAL_UART_Receive+0xd2>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	22ff      	movs	r2, #255	@ 0xff
 8009920:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009924:	e028      	b.n	8009978 <HAL_UART_Receive+0xd2>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10d      	bne.n	800994a <HAL_UART_Receive+0xa4>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <HAL_UART_Receive+0x9a>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	22ff      	movs	r2, #255	@ 0xff
 800993a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800993e:	e01b      	b.n	8009978 <HAL_UART_Receive+0xd2>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	227f      	movs	r2, #127	@ 0x7f
 8009944:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009948:	e016      	b.n	8009978 <HAL_UART_Receive+0xd2>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009952:	d10d      	bne.n	8009970 <HAL_UART_Receive+0xca>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <HAL_UART_Receive+0xc0>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	227f      	movs	r2, #127	@ 0x7f
 8009960:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009964:	e008      	b.n	8009978 <HAL_UART_Receive+0xd2>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	223f      	movs	r2, #63	@ 0x3f
 800996a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800996e:	e003      	b.n	8009978 <HAL_UART_Receive+0xd2>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800997e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009988:	d108      	bne.n	800999c <HAL_UART_Receive+0xf6>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d104      	bne.n	800999c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	61bb      	str	r3, [r7, #24]
 800999a:	e003      	b.n	80099a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80099a4:	e037      	b.n	8009a16 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2200      	movs	r2, #0
 80099ae:	2120      	movs	r1, #32
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fbb7 	bl	800a124 <UART_WaitOnFlagUntilTimeout>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d005      	beq.n	80099c8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e033      	b.n	8009a30 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10c      	bne.n	80099e8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	8a7b      	ldrh	r3, [r7, #18]
 80099d8:	4013      	ands	r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	3302      	adds	r3, #2
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	e00d      	b.n	8009a04 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	8a7b      	ldrh	r3, [r7, #18]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	4013      	ands	r3, r2
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	3301      	adds	r3, #1
 8009a02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1c1      	bne.n	80099a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e000      	b.n	8009a30 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009a2e:	2302      	movs	r3, #2
  }
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a3c:	b08a      	sub	sp, #40	@ 0x28
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	431a      	orrs	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	4bb4      	ldr	r3, [pc, #720]	@ (8009d38 <UART_SetConfig+0x300>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	6812      	ldr	r2, [r2, #0]
 8009a6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a70:	430b      	orrs	r3, r1
 8009a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	68da      	ldr	r2, [r3, #12]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4aa9      	ldr	r2, [pc, #676]	@ (8009d3c <UART_SetConfig+0x304>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d004      	beq.n	8009aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4aa0      	ldr	r2, [pc, #640]	@ (8009d40 <UART_SetConfig+0x308>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d126      	bne.n	8009b10 <UART_SetConfig+0xd8>
 8009ac2:	4ba0      	ldr	r3, [pc, #640]	@ (8009d44 <UART_SetConfig+0x30c>)
 8009ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ac8:	f003 0303 	and.w	r3, r3, #3
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d81b      	bhi.n	8009b08 <UART_SetConfig+0xd0>
 8009ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad8 <UART_SetConfig+0xa0>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009af9 	.word	0x08009af9
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009b01 	.word	0x08009b01
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009aee:	e080      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009af0:	2302      	movs	r3, #2
 8009af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009af6:	e07c      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009af8:	2304      	movs	r3, #4
 8009afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009afe:	e078      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b00:	2308      	movs	r3, #8
 8009b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b06:	e074      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b08:	2310      	movs	r3, #16
 8009b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b0e:	e070      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a8c      	ldr	r2, [pc, #560]	@ (8009d48 <UART_SetConfig+0x310>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d138      	bne.n	8009b8c <UART_SetConfig+0x154>
 8009b1a:	4b8a      	ldr	r3, [pc, #552]	@ (8009d44 <UART_SetConfig+0x30c>)
 8009b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b20:	f003 030c 	and.w	r3, r3, #12
 8009b24:	2b0c      	cmp	r3, #12
 8009b26:	d82d      	bhi.n	8009b84 <UART_SetConfig+0x14c>
 8009b28:	a201      	add	r2, pc, #4	@ (adr r2, 8009b30 <UART_SetConfig+0xf8>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b65 	.word	0x08009b65
 8009b34:	08009b85 	.word	0x08009b85
 8009b38:	08009b85 	.word	0x08009b85
 8009b3c:	08009b85 	.word	0x08009b85
 8009b40:	08009b75 	.word	0x08009b75
 8009b44:	08009b85 	.word	0x08009b85
 8009b48:	08009b85 	.word	0x08009b85
 8009b4c:	08009b85 	.word	0x08009b85
 8009b50:	08009b6d 	.word	0x08009b6d
 8009b54:	08009b85 	.word	0x08009b85
 8009b58:	08009b85 	.word	0x08009b85
 8009b5c:	08009b85 	.word	0x08009b85
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	2300      	movs	r3, #0
 8009b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b6a:	e042      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b72:	e03e      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b74:	2304      	movs	r3, #4
 8009b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b7a:	e03a      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b82:	e036      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b84:	2310      	movs	r3, #16
 8009b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b8a:	e032      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a6a      	ldr	r2, [pc, #424]	@ (8009d3c <UART_SetConfig+0x304>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d12a      	bne.n	8009bec <UART_SetConfig+0x1b4>
 8009b96:	4b6b      	ldr	r3, [pc, #428]	@ (8009d44 <UART_SetConfig+0x30c>)
 8009b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ba0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ba4:	d01a      	beq.n	8009bdc <UART_SetConfig+0x1a4>
 8009ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009baa:	d81b      	bhi.n	8009be4 <UART_SetConfig+0x1ac>
 8009bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb0:	d00c      	beq.n	8009bcc <UART_SetConfig+0x194>
 8009bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb6:	d815      	bhi.n	8009be4 <UART_SetConfig+0x1ac>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <UART_SetConfig+0x18c>
 8009bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc0:	d008      	beq.n	8009bd4 <UART_SetConfig+0x19c>
 8009bc2:	e00f      	b.n	8009be4 <UART_SetConfig+0x1ac>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bca:	e012      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bd2:	e00e      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bda:	e00a      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009be2:	e006      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bea:	e002      	b.n	8009bf2 <UART_SetConfig+0x1ba>
 8009bec:	2310      	movs	r3, #16
 8009bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a51      	ldr	r2, [pc, #324]	@ (8009d3c <UART_SetConfig+0x304>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d17a      	bne.n	8009cf2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d824      	bhi.n	8009c4e <UART_SetConfig+0x216>
 8009c04:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <UART_SetConfig+0x1d4>)
 8009c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0a:	bf00      	nop
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c4f 	.word	0x08009c4f
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c4f 	.word	0x08009c4f
 8009c1c:	08009c3f 	.word	0x08009c3f
 8009c20:	08009c4f 	.word	0x08009c4f
 8009c24:	08009c4f 	.word	0x08009c4f
 8009c28:	08009c4f 	.word	0x08009c4f
 8009c2c:	08009c47 	.word	0x08009c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c30:	f7fd f90c 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 8009c34:	61f8      	str	r0, [r7, #28]
        break;
 8009c36:	e010      	b.n	8009c5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c38:	4b44      	ldr	r3, [pc, #272]	@ (8009d4c <UART_SetConfig+0x314>)
 8009c3a:	61fb      	str	r3, [r7, #28]
        break;
 8009c3c:	e00d      	b.n	8009c5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c3e:	f7fd f86d 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8009c42:	61f8      	str	r0, [r7, #28]
        break;
 8009c44:	e009      	b.n	8009c5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c4a:	61fb      	str	r3, [r7, #28]
        break;
 8009c4c:	e005      	b.n	8009c5a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009c58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 8107 	beq.w	8009e70 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	4413      	add	r3, r2
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d305      	bcc.n	8009c7e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d903      	bls.n	8009c86 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c84:	e0f4      	b.n	8009e70 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	461c      	mov	r4, r3
 8009c8c:	4615      	mov	r5, r2
 8009c8e:	f04f 0200 	mov.w	r2, #0
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	022b      	lsls	r3, r5, #8
 8009c98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009c9c:	0222      	lsls	r2, r4, #8
 8009c9e:	68f9      	ldr	r1, [r7, #12]
 8009ca0:	6849      	ldr	r1, [r1, #4]
 8009ca2:	0849      	lsrs	r1, r1, #1
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4688      	mov	r8, r1
 8009ca8:	4681      	mov	r9, r0
 8009caa:	eb12 0a08 	adds.w	sl, r2, r8
 8009cae:	eb43 0b09 	adc.w	fp, r3, r9
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	603b      	str	r3, [r7, #0]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	4659      	mov	r1, fp
 8009cc4:	f7f6 ffe0 	bl	8000c88 <__aeabi_uldivmod>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4613      	mov	r3, r2
 8009cce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cd6:	d308      	bcc.n	8009cea <UART_SetConfig+0x2b2>
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cde:	d204      	bcs.n	8009cea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e0c2      	b.n	8009e70 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009cf0:	e0be      	b.n	8009e70 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cfa:	d16a      	bne.n	8009dd2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d834      	bhi.n	8009d6e <UART_SetConfig+0x336>
 8009d04:	a201      	add	r2, pc, #4	@ (adr r2, 8009d0c <UART_SetConfig+0x2d4>)
 8009d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0a:	bf00      	nop
 8009d0c:	08009d31 	.word	0x08009d31
 8009d10:	08009d51 	.word	0x08009d51
 8009d14:	08009d59 	.word	0x08009d59
 8009d18:	08009d6f 	.word	0x08009d6f
 8009d1c:	08009d5f 	.word	0x08009d5f
 8009d20:	08009d6f 	.word	0x08009d6f
 8009d24:	08009d6f 	.word	0x08009d6f
 8009d28:	08009d6f 	.word	0x08009d6f
 8009d2c:	08009d67 	.word	0x08009d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d30:	f7fd f88c 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 8009d34:	61f8      	str	r0, [r7, #28]
        break;
 8009d36:	e020      	b.n	8009d7a <UART_SetConfig+0x342>
 8009d38:	efff69f3 	.word	0xefff69f3
 8009d3c:	40008000 	.word	0x40008000
 8009d40:	40013800 	.word	0x40013800
 8009d44:	40021000 	.word	0x40021000
 8009d48:	40004400 	.word	0x40004400
 8009d4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d50:	f7fd f892 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>
 8009d54:	61f8      	str	r0, [r7, #28]
        break;
 8009d56:	e010      	b.n	8009d7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d58:	4b4c      	ldr	r3, [pc, #304]	@ (8009e8c <UART_SetConfig+0x454>)
 8009d5a:	61fb      	str	r3, [r7, #28]
        break;
 8009d5c:	e00d      	b.n	8009d7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d5e:	f7fc ffdd 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8009d62:	61f8      	str	r0, [r7, #28]
        break;
 8009d64:	e009      	b.n	8009d7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d6a:	61fb      	str	r3, [r7, #28]
        break;
 8009d6c:	e005      	b.n	8009d7a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d077      	beq.n	8009e70 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	005a      	lsls	r2, r3, #1
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	085b      	lsrs	r3, r3, #1
 8009d8a:	441a      	add	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b0f      	cmp	r3, #15
 8009d9a:	d916      	bls.n	8009dca <UART_SetConfig+0x392>
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da2:	d212      	bcs.n	8009dca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f023 030f 	bic.w	r3, r3, #15
 8009dac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	085b      	lsrs	r3, r3, #1
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	8afb      	ldrh	r3, [r7, #22]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	8afa      	ldrh	r2, [r7, #22]
 8009dc6:	60da      	str	r2, [r3, #12]
 8009dc8:	e052      	b.n	8009e70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009dd0:	e04e      	b.n	8009e70 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009dd6:	2b08      	cmp	r3, #8
 8009dd8:	d827      	bhi.n	8009e2a <UART_SetConfig+0x3f2>
 8009dda:	a201      	add	r2, pc, #4	@ (adr r2, 8009de0 <UART_SetConfig+0x3a8>)
 8009ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de0:	08009e05 	.word	0x08009e05
 8009de4:	08009e0d 	.word	0x08009e0d
 8009de8:	08009e15 	.word	0x08009e15
 8009dec:	08009e2b 	.word	0x08009e2b
 8009df0:	08009e1b 	.word	0x08009e1b
 8009df4:	08009e2b 	.word	0x08009e2b
 8009df8:	08009e2b 	.word	0x08009e2b
 8009dfc:	08009e2b 	.word	0x08009e2b
 8009e00:	08009e23 	.word	0x08009e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e04:	f7fd f822 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 8009e08:	61f8      	str	r0, [r7, #28]
        break;
 8009e0a:	e014      	b.n	8009e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e0c:	f7fd f834 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>
 8009e10:	61f8      	str	r0, [r7, #28]
        break;
 8009e12:	e010      	b.n	8009e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e14:	4b1d      	ldr	r3, [pc, #116]	@ (8009e8c <UART_SetConfig+0x454>)
 8009e16:	61fb      	str	r3, [r7, #28]
        break;
 8009e18:	e00d      	b.n	8009e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e1a:	f7fc ff7f 	bl	8006d1c <HAL_RCC_GetSysClockFreq>
 8009e1e:	61f8      	str	r0, [r7, #28]
        break;
 8009e20:	e009      	b.n	8009e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e26:	61fb      	str	r3, [r7, #28]
        break;
 8009e28:	e005      	b.n	8009e36 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009e34:	bf00      	nop
    }

    if (pclk != 0U)
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d019      	beq.n	8009e70 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	085a      	lsrs	r2, r3, #1
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	441a      	add	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	2b0f      	cmp	r3, #15
 8009e54:	d909      	bls.n	8009e6a <UART_SetConfig+0x432>
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e5c:	d205      	bcs.n	8009e6a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60da      	str	r2, [r3, #12]
 8009e68:	e002      	b.n	8009e70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3728      	adds	r7, #40	@ 0x28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e8a:	bf00      	nop
 8009e8c:	00f42400 	.word	0x00f42400

08009e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9c:	f003 0308 	and.w	r3, r3, #8
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00a      	beq.n	8009eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00a      	beq.n	8009efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f02:	f003 0304 	and.w	r3, r3, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f24:	f003 0310 	and.w	r3, r3, #16
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00a      	beq.n	8009f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f46:	f003 0320 	and.w	r3, r3, #32
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01a      	beq.n	8009fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f8e:	d10a      	bne.n	8009fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	605a      	str	r2, [r3, #4]
  }
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b098      	sub	sp, #96	@ 0x60
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fe4:	f7f9 ff8a 	bl	8003efc <HAL_GetTick>
 8009fe8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0308 	and.w	r3, r3, #8
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	d12e      	bne.n	800a056 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a000:	2200      	movs	r2, #0
 800a002:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f88c 	bl	800a124 <UART_WaitOnFlagUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d021      	beq.n	800a056 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a026:	653b      	str	r3, [r7, #80]	@ 0x50
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a030:	647b      	str	r3, [r7, #68]	@ 0x44
 800a032:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e6      	bne.n	800a012 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2220      	movs	r2, #32
 800a048:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e062      	b.n	800a11c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b04      	cmp	r3, #4
 800a062:	d149      	bne.n	800a0f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a06c:	2200      	movs	r2, #0
 800a06e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f856 	bl	800a124 <UART_WaitOnFlagUntilTimeout>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d03c      	beq.n	800a0f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	623b      	str	r3, [r7, #32]
   return(result);
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a09c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a09e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e6      	bne.n	800a07e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f023 0301 	bic.w	r3, r3, #1
 800a0c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0d0:	61fa      	str	r2, [r7, #28]
 800a0d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	69b9      	ldr	r1, [r7, #24]
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e5      	bne.n	800a0b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e011      	b.n	800a11c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3758      	adds	r7, #88	@ 0x58
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	4613      	mov	r3, r2
 800a132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a134:	e049      	b.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13c:	d045      	beq.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a13e:	f7f9 fedd 	bl	8003efc <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d302      	bcc.n	800a154 <UART_WaitOnFlagUntilTimeout+0x30>
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e048      	b.n	800a1ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0304 	and.w	r3, r3, #4
 800a162:	2b00      	cmp	r3, #0
 800a164:	d031      	beq.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b08      	cmp	r3, #8
 800a172:	d110      	bne.n	800a196 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2208      	movs	r2, #8
 800a17a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 f838 	bl	800a1f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2208      	movs	r2, #8
 800a186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e029      	b.n	800a1ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1a4:	d111      	bne.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f81e 	bl	800a1f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e00f      	b.n	800a1ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	69da      	ldr	r2, [r3, #28]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	bf0c      	ite	eq
 800a1da:	2301      	moveq	r3, #1
 800a1dc:	2300      	movne	r3, #0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d0a6      	beq.n	800a136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b095      	sub	sp, #84	@ 0x54
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a20e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a218:	643b      	str	r3, [r7, #64]	@ 0x40
 800a21a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a21e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e6      	bne.n	800a1fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3308      	adds	r3, #8
 800a232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	f023 0301 	bic.w	r3, r3, #1
 800a242:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3308      	adds	r3, #8
 800a24a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a24c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a24e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e5      	bne.n	800a22c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a264:	2b01      	cmp	r3, #1
 800a266:	d118      	bne.n	800a29a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	60bb      	str	r3, [r7, #8]
   return(result);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f023 0310 	bic.w	r3, r3, #16
 800a27c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a286:	61bb      	str	r3, [r7, #24]
 800a288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6979      	ldr	r1, [r7, #20]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	613b      	str	r3, [r7, #16]
   return(result);
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e6      	bne.n	800a268 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a2ae:	bf00      	nop
 800a2b0:	3754      	adds	r7, #84	@ 0x54
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <sulp>:
 800a2ba:	b570      	push	{r4, r5, r6, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	460d      	mov	r5, r1
 800a2c0:	ec45 4b10 	vmov	d0, r4, r5
 800a2c4:	4616      	mov	r6, r2
 800a2c6:	f003 fcc7 	bl	800dc58 <__ulp>
 800a2ca:	ec51 0b10 	vmov	r0, r1, d0
 800a2ce:	b17e      	cbz	r6, 800a2f0 <sulp+0x36>
 800a2d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2d4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dd09      	ble.n	800a2f0 <sulp+0x36>
 800a2dc:	051b      	lsls	r3, r3, #20
 800a2de:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a2e2:	2400      	movs	r4, #0
 800a2e4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	ec41 0b10 	vmov	d0, r0, r1
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2f8 <_strtod_l>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	b09f      	sub	sp, #124	@ 0x7c
 800a2fe:	460c      	mov	r4, r1
 800a300:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a302:	2200      	movs	r2, #0
 800a304:	921a      	str	r2, [sp, #104]	@ 0x68
 800a306:	9005      	str	r0, [sp, #20]
 800a308:	f04f 0a00 	mov.w	sl, #0
 800a30c:	f04f 0b00 	mov.w	fp, #0
 800a310:	460a      	mov	r2, r1
 800a312:	9219      	str	r2, [sp, #100]	@ 0x64
 800a314:	7811      	ldrb	r1, [r2, #0]
 800a316:	292b      	cmp	r1, #43	@ 0x2b
 800a318:	d04a      	beq.n	800a3b0 <_strtod_l+0xb8>
 800a31a:	d838      	bhi.n	800a38e <_strtod_l+0x96>
 800a31c:	290d      	cmp	r1, #13
 800a31e:	d832      	bhi.n	800a386 <_strtod_l+0x8e>
 800a320:	2908      	cmp	r1, #8
 800a322:	d832      	bhi.n	800a38a <_strtod_l+0x92>
 800a324:	2900      	cmp	r1, #0
 800a326:	d03b      	beq.n	800a3a0 <_strtod_l+0xa8>
 800a328:	2200      	movs	r2, #0
 800a32a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a32c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a32e:	782a      	ldrb	r2, [r5, #0]
 800a330:	2a30      	cmp	r2, #48	@ 0x30
 800a332:	f040 80b3 	bne.w	800a49c <_strtod_l+0x1a4>
 800a336:	786a      	ldrb	r2, [r5, #1]
 800a338:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a33c:	2a58      	cmp	r2, #88	@ 0x58
 800a33e:	d16e      	bne.n	800a41e <_strtod_l+0x126>
 800a340:	9302      	str	r3, [sp, #8]
 800a342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	ab1a      	add	r3, sp, #104	@ 0x68
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	4a8e      	ldr	r2, [pc, #568]	@ (800a584 <_strtod_l+0x28c>)
 800a34c:	9805      	ldr	r0, [sp, #20]
 800a34e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a350:	a919      	add	r1, sp, #100	@ 0x64
 800a352:	f002 fd73 	bl	800ce3c <__gethex>
 800a356:	f010 060f 	ands.w	r6, r0, #15
 800a35a:	4604      	mov	r4, r0
 800a35c:	d005      	beq.n	800a36a <_strtod_l+0x72>
 800a35e:	2e06      	cmp	r6, #6
 800a360:	d128      	bne.n	800a3b4 <_strtod_l+0xbc>
 800a362:	3501      	adds	r5, #1
 800a364:	2300      	movs	r3, #0
 800a366:	9519      	str	r5, [sp, #100]	@ 0x64
 800a368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a36a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f040 858e 	bne.w	800ae8e <_strtod_l+0xb96>
 800a372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a374:	b1cb      	cbz	r3, 800a3aa <_strtod_l+0xb2>
 800a376:	4652      	mov	r2, sl
 800a378:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a37c:	ec43 2b10 	vmov	d0, r2, r3
 800a380:	b01f      	add	sp, #124	@ 0x7c
 800a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a386:	2920      	cmp	r1, #32
 800a388:	d1ce      	bne.n	800a328 <_strtod_l+0x30>
 800a38a:	3201      	adds	r2, #1
 800a38c:	e7c1      	b.n	800a312 <_strtod_l+0x1a>
 800a38e:	292d      	cmp	r1, #45	@ 0x2d
 800a390:	d1ca      	bne.n	800a328 <_strtod_l+0x30>
 800a392:	2101      	movs	r1, #1
 800a394:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a396:	1c51      	adds	r1, r2, #1
 800a398:	9119      	str	r1, [sp, #100]	@ 0x64
 800a39a:	7852      	ldrb	r2, [r2, #1]
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	d1c5      	bne.n	800a32c <_strtod_l+0x34>
 800a3a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f040 8570 	bne.w	800ae8a <_strtod_l+0xb92>
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	e7e5      	b.n	800a37c <_strtod_l+0x84>
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	e7ef      	b.n	800a394 <_strtod_l+0x9c>
 800a3b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3b6:	b13a      	cbz	r2, 800a3c8 <_strtod_l+0xd0>
 800a3b8:	2135      	movs	r1, #53	@ 0x35
 800a3ba:	a81c      	add	r0, sp, #112	@ 0x70
 800a3bc:	f003 fd46 	bl	800de4c <__copybits>
 800a3c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3c2:	9805      	ldr	r0, [sp, #20]
 800a3c4:	f003 f914 	bl	800d5f0 <_Bfree>
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a3cc:	2e04      	cmp	r6, #4
 800a3ce:	d806      	bhi.n	800a3de <_strtod_l+0xe6>
 800a3d0:	e8df f006 	tbb	[pc, r6]
 800a3d4:	201d0314 	.word	0x201d0314
 800a3d8:	14          	.byte	0x14
 800a3d9:	00          	.byte	0x00
 800a3da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a3de:	05e1      	lsls	r1, r4, #23
 800a3e0:	bf48      	it	mi
 800a3e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a3e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3ea:	0d1b      	lsrs	r3, r3, #20
 800a3ec:	051b      	lsls	r3, r3, #20
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1bb      	bne.n	800a36a <_strtod_l+0x72>
 800a3f2:	f001 fdd7 	bl	800bfa4 <__errno>
 800a3f6:	2322      	movs	r3, #34	@ 0x22
 800a3f8:	6003      	str	r3, [r0, #0]
 800a3fa:	e7b6      	b.n	800a36a <_strtod_l+0x72>
 800a3fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a400:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a404:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a408:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a40c:	e7e7      	b.n	800a3de <_strtod_l+0xe6>
 800a40e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a58c <_strtod_l+0x294>
 800a412:	e7e4      	b.n	800a3de <_strtod_l+0xe6>
 800a414:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a418:	f04f 3aff 	mov.w	sl, #4294967295
 800a41c:	e7df      	b.n	800a3de <_strtod_l+0xe6>
 800a41e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	9219      	str	r2, [sp, #100]	@ 0x64
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b30      	cmp	r3, #48	@ 0x30
 800a428:	d0f9      	beq.n	800a41e <_strtod_l+0x126>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d09d      	beq.n	800a36a <_strtod_l+0x72>
 800a42e:	2301      	movs	r3, #1
 800a430:	9309      	str	r3, [sp, #36]	@ 0x24
 800a432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a434:	930c      	str	r3, [sp, #48]	@ 0x30
 800a436:	2300      	movs	r3, #0
 800a438:	9308      	str	r3, [sp, #32]
 800a43a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a43c:	461f      	mov	r7, r3
 800a43e:	220a      	movs	r2, #10
 800a440:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a442:	7805      	ldrb	r5, [r0, #0]
 800a444:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a448:	b2d9      	uxtb	r1, r3
 800a44a:	2909      	cmp	r1, #9
 800a44c:	d928      	bls.n	800a4a0 <_strtod_l+0x1a8>
 800a44e:	494e      	ldr	r1, [pc, #312]	@ (800a588 <_strtod_l+0x290>)
 800a450:	2201      	movs	r2, #1
 800a452:	f001 fd4a 	bl	800beea <strncmp>
 800a456:	2800      	cmp	r0, #0
 800a458:	d032      	beq.n	800a4c0 <_strtod_l+0x1c8>
 800a45a:	2000      	movs	r0, #0
 800a45c:	462a      	mov	r2, r5
 800a45e:	4681      	mov	r9, r0
 800a460:	463d      	mov	r5, r7
 800a462:	4603      	mov	r3, r0
 800a464:	2a65      	cmp	r2, #101	@ 0x65
 800a466:	d001      	beq.n	800a46c <_strtod_l+0x174>
 800a468:	2a45      	cmp	r2, #69	@ 0x45
 800a46a:	d114      	bne.n	800a496 <_strtod_l+0x19e>
 800a46c:	b91d      	cbnz	r5, 800a476 <_strtod_l+0x17e>
 800a46e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a470:	4302      	orrs	r2, r0
 800a472:	d095      	beq.n	800a3a0 <_strtod_l+0xa8>
 800a474:	2500      	movs	r5, #0
 800a476:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a478:	1c62      	adds	r2, r4, #1
 800a47a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a47c:	7862      	ldrb	r2, [r4, #1]
 800a47e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a480:	d077      	beq.n	800a572 <_strtod_l+0x27a>
 800a482:	2a2d      	cmp	r2, #45	@ 0x2d
 800a484:	d07b      	beq.n	800a57e <_strtod_l+0x286>
 800a486:	f04f 0c00 	mov.w	ip, #0
 800a48a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a48e:	2909      	cmp	r1, #9
 800a490:	f240 8082 	bls.w	800a598 <_strtod_l+0x2a0>
 800a494:	9419      	str	r4, [sp, #100]	@ 0x64
 800a496:	f04f 0800 	mov.w	r8, #0
 800a49a:	e0a2      	b.n	800a5e2 <_strtod_l+0x2ea>
 800a49c:	2300      	movs	r3, #0
 800a49e:	e7c7      	b.n	800a430 <_strtod_l+0x138>
 800a4a0:	2f08      	cmp	r7, #8
 800a4a2:	bfd5      	itete	le
 800a4a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a4a6:	9908      	ldrgt	r1, [sp, #32]
 800a4a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a4b0:	f100 0001 	add.w	r0, r0, #1
 800a4b4:	bfd4      	ite	le
 800a4b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a4b8:	9308      	strgt	r3, [sp, #32]
 800a4ba:	3701      	adds	r7, #1
 800a4bc:	9019      	str	r0, [sp, #100]	@ 0x64
 800a4be:	e7bf      	b.n	800a440 <_strtod_l+0x148>
 800a4c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4c6:	785a      	ldrb	r2, [r3, #1]
 800a4c8:	b37f      	cbz	r7, 800a52a <_strtod_l+0x232>
 800a4ca:	4681      	mov	r9, r0
 800a4cc:	463d      	mov	r5, r7
 800a4ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a4d2:	2b09      	cmp	r3, #9
 800a4d4:	d912      	bls.n	800a4fc <_strtod_l+0x204>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e7c4      	b.n	800a464 <_strtod_l+0x16c>
 800a4da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4e0:	785a      	ldrb	r2, [r3, #1]
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	2a30      	cmp	r2, #48	@ 0x30
 800a4e6:	d0f8      	beq.n	800a4da <_strtod_l+0x1e2>
 800a4e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	f200 84d3 	bhi.w	800ae98 <_strtod_l+0xba0>
 800a4f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4f6:	4681      	mov	r9, r0
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	3a30      	subs	r2, #48	@ 0x30
 800a4fe:	f100 0301 	add.w	r3, r0, #1
 800a502:	d02a      	beq.n	800a55a <_strtod_l+0x262>
 800a504:	4499      	add	r9, r3
 800a506:	eb00 0c05 	add.w	ip, r0, r5
 800a50a:	462b      	mov	r3, r5
 800a50c:	210a      	movs	r1, #10
 800a50e:	4563      	cmp	r3, ip
 800a510:	d10d      	bne.n	800a52e <_strtod_l+0x236>
 800a512:	1c69      	adds	r1, r5, #1
 800a514:	4401      	add	r1, r0
 800a516:	4428      	add	r0, r5
 800a518:	2808      	cmp	r0, #8
 800a51a:	dc16      	bgt.n	800a54a <_strtod_l+0x252>
 800a51c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a51e:	230a      	movs	r3, #10
 800a520:	fb03 2300 	mla	r3, r3, r0, r2
 800a524:	930a      	str	r3, [sp, #40]	@ 0x28
 800a526:	2300      	movs	r3, #0
 800a528:	e018      	b.n	800a55c <_strtod_l+0x264>
 800a52a:	4638      	mov	r0, r7
 800a52c:	e7da      	b.n	800a4e4 <_strtod_l+0x1ec>
 800a52e:	2b08      	cmp	r3, #8
 800a530:	f103 0301 	add.w	r3, r3, #1
 800a534:	dc03      	bgt.n	800a53e <_strtod_l+0x246>
 800a536:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a538:	434e      	muls	r6, r1
 800a53a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a53c:	e7e7      	b.n	800a50e <_strtod_l+0x216>
 800a53e:	2b10      	cmp	r3, #16
 800a540:	bfde      	ittt	le
 800a542:	9e08      	ldrle	r6, [sp, #32]
 800a544:	434e      	mulle	r6, r1
 800a546:	9608      	strle	r6, [sp, #32]
 800a548:	e7e1      	b.n	800a50e <_strtod_l+0x216>
 800a54a:	280f      	cmp	r0, #15
 800a54c:	dceb      	bgt.n	800a526 <_strtod_l+0x22e>
 800a54e:	9808      	ldr	r0, [sp, #32]
 800a550:	230a      	movs	r3, #10
 800a552:	fb03 2300 	mla	r3, r3, r0, r2
 800a556:	9308      	str	r3, [sp, #32]
 800a558:	e7e5      	b.n	800a526 <_strtod_l+0x22e>
 800a55a:	4629      	mov	r1, r5
 800a55c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a55e:	1c50      	adds	r0, r2, #1
 800a560:	9019      	str	r0, [sp, #100]	@ 0x64
 800a562:	7852      	ldrb	r2, [r2, #1]
 800a564:	4618      	mov	r0, r3
 800a566:	460d      	mov	r5, r1
 800a568:	e7b1      	b.n	800a4ce <_strtod_l+0x1d6>
 800a56a:	f04f 0900 	mov.w	r9, #0
 800a56e:	2301      	movs	r3, #1
 800a570:	e77d      	b.n	800a46e <_strtod_l+0x176>
 800a572:	f04f 0c00 	mov.w	ip, #0
 800a576:	1ca2      	adds	r2, r4, #2
 800a578:	9219      	str	r2, [sp, #100]	@ 0x64
 800a57a:	78a2      	ldrb	r2, [r4, #2]
 800a57c:	e785      	b.n	800a48a <_strtod_l+0x192>
 800a57e:	f04f 0c01 	mov.w	ip, #1
 800a582:	e7f8      	b.n	800a576 <_strtod_l+0x27e>
 800a584:	0800fefc 	.word	0x0800fefc
 800a588:	0800fee4 	.word	0x0800fee4
 800a58c:	7ff00000 	.word	0x7ff00000
 800a590:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a592:	1c51      	adds	r1, r2, #1
 800a594:	9119      	str	r1, [sp, #100]	@ 0x64
 800a596:	7852      	ldrb	r2, [r2, #1]
 800a598:	2a30      	cmp	r2, #48	@ 0x30
 800a59a:	d0f9      	beq.n	800a590 <_strtod_l+0x298>
 800a59c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a5a0:	2908      	cmp	r1, #8
 800a5a2:	f63f af78 	bhi.w	800a496 <_strtod_l+0x19e>
 800a5a6:	3a30      	subs	r2, #48	@ 0x30
 800a5a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a5ae:	f04f 080a 	mov.w	r8, #10
 800a5b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5b4:	1c56      	adds	r6, r2, #1
 800a5b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a5b8:	7852      	ldrb	r2, [r2, #1]
 800a5ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a5be:	f1be 0f09 	cmp.w	lr, #9
 800a5c2:	d939      	bls.n	800a638 <_strtod_l+0x340>
 800a5c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5c6:	1a76      	subs	r6, r6, r1
 800a5c8:	2e08      	cmp	r6, #8
 800a5ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a5ce:	dc03      	bgt.n	800a5d8 <_strtod_l+0x2e0>
 800a5d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a5d2:	4588      	cmp	r8, r1
 800a5d4:	bfa8      	it	ge
 800a5d6:	4688      	movge	r8, r1
 800a5d8:	f1bc 0f00 	cmp.w	ip, #0
 800a5dc:	d001      	beq.n	800a5e2 <_strtod_l+0x2ea>
 800a5de:	f1c8 0800 	rsb	r8, r8, #0
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	d14e      	bne.n	800a684 <_strtod_l+0x38c>
 800a5e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5e8:	4308      	orrs	r0, r1
 800a5ea:	f47f aebe 	bne.w	800a36a <_strtod_l+0x72>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f47f aed6 	bne.w	800a3a0 <_strtod_l+0xa8>
 800a5f4:	2a69      	cmp	r2, #105	@ 0x69
 800a5f6:	d028      	beq.n	800a64a <_strtod_l+0x352>
 800a5f8:	dc25      	bgt.n	800a646 <_strtod_l+0x34e>
 800a5fa:	2a49      	cmp	r2, #73	@ 0x49
 800a5fc:	d025      	beq.n	800a64a <_strtod_l+0x352>
 800a5fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800a600:	f47f aece 	bne.w	800a3a0 <_strtod_l+0xa8>
 800a604:	499b      	ldr	r1, [pc, #620]	@ (800a874 <_strtod_l+0x57c>)
 800a606:	a819      	add	r0, sp, #100	@ 0x64
 800a608:	f002 fe3a 	bl	800d280 <__match>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f43f aec7 	beq.w	800a3a0 <_strtod_l+0xa8>
 800a612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b28      	cmp	r3, #40	@ 0x28
 800a618:	d12e      	bne.n	800a678 <_strtod_l+0x380>
 800a61a:	4997      	ldr	r1, [pc, #604]	@ (800a878 <_strtod_l+0x580>)
 800a61c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a61e:	a819      	add	r0, sp, #100	@ 0x64
 800a620:	f002 fe42 	bl	800d2a8 <__hexnan>
 800a624:	2805      	cmp	r0, #5
 800a626:	d127      	bne.n	800a678 <_strtod_l+0x380>
 800a628:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a62a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a62e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a632:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a636:	e698      	b.n	800a36a <_strtod_l+0x72>
 800a638:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a63a:	fb08 2101 	mla	r1, r8, r1, r2
 800a63e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a642:	920e      	str	r2, [sp, #56]	@ 0x38
 800a644:	e7b5      	b.n	800a5b2 <_strtod_l+0x2ba>
 800a646:	2a6e      	cmp	r2, #110	@ 0x6e
 800a648:	e7da      	b.n	800a600 <_strtod_l+0x308>
 800a64a:	498c      	ldr	r1, [pc, #560]	@ (800a87c <_strtod_l+0x584>)
 800a64c:	a819      	add	r0, sp, #100	@ 0x64
 800a64e:	f002 fe17 	bl	800d280 <__match>
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f aea4 	beq.w	800a3a0 <_strtod_l+0xa8>
 800a658:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a65a:	4989      	ldr	r1, [pc, #548]	@ (800a880 <_strtod_l+0x588>)
 800a65c:	3b01      	subs	r3, #1
 800a65e:	a819      	add	r0, sp, #100	@ 0x64
 800a660:	9319      	str	r3, [sp, #100]	@ 0x64
 800a662:	f002 fe0d 	bl	800d280 <__match>
 800a666:	b910      	cbnz	r0, 800a66e <_strtod_l+0x376>
 800a668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a66a:	3301      	adds	r3, #1
 800a66c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a66e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a890 <_strtod_l+0x598>
 800a672:	f04f 0a00 	mov.w	sl, #0
 800a676:	e678      	b.n	800a36a <_strtod_l+0x72>
 800a678:	4882      	ldr	r0, [pc, #520]	@ (800a884 <_strtod_l+0x58c>)
 800a67a:	f001 fcd1 	bl	800c020 <nan>
 800a67e:	ec5b ab10 	vmov	sl, fp, d0
 800a682:	e672      	b.n	800a36a <_strtod_l+0x72>
 800a684:	eba8 0309 	sub.w	r3, r8, r9
 800a688:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a68a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a68c:	2f00      	cmp	r7, #0
 800a68e:	bf08      	it	eq
 800a690:	462f      	moveq	r7, r5
 800a692:	2d10      	cmp	r5, #16
 800a694:	462c      	mov	r4, r5
 800a696:	bfa8      	it	ge
 800a698:	2410      	movge	r4, #16
 800a69a:	f7f5 ff33 	bl	8000504 <__aeabi_ui2d>
 800a69e:	2d09      	cmp	r5, #9
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	468b      	mov	fp, r1
 800a6a4:	dc13      	bgt.n	800a6ce <_strtod_l+0x3d6>
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f43f ae5e 	beq.w	800a36a <_strtod_l+0x72>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b0:	dd78      	ble.n	800a7a4 <_strtod_l+0x4ac>
 800a6b2:	2b16      	cmp	r3, #22
 800a6b4:	dc5f      	bgt.n	800a776 <_strtod_l+0x47e>
 800a6b6:	4974      	ldr	r1, [pc, #464]	@ (800a888 <_strtod_l+0x590>)
 800a6b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	465b      	mov	r3, fp
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	468b      	mov	fp, r1
 800a6cc:	e64d      	b.n	800a36a <_strtod_l+0x72>
 800a6ce:	4b6e      	ldr	r3, [pc, #440]	@ (800a888 <_strtod_l+0x590>)
 800a6d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a6d8:	f7f5 ff8e 	bl	80005f8 <__aeabi_dmul>
 800a6dc:	4682      	mov	sl, r0
 800a6de:	9808      	ldr	r0, [sp, #32]
 800a6e0:	468b      	mov	fp, r1
 800a6e2:	f7f5 ff0f 	bl	8000504 <__aeabi_ui2d>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4650      	mov	r0, sl
 800a6ec:	4659      	mov	r1, fp
 800a6ee:	f7f5 fdcd 	bl	800028c <__adddf3>
 800a6f2:	2d0f      	cmp	r5, #15
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	468b      	mov	fp, r1
 800a6f8:	ddd5      	ble.n	800a6a6 <_strtod_l+0x3ae>
 800a6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fc:	1b2c      	subs	r4, r5, r4
 800a6fe:	441c      	add	r4, r3
 800a700:	2c00      	cmp	r4, #0
 800a702:	f340 8096 	ble.w	800a832 <_strtod_l+0x53a>
 800a706:	f014 030f 	ands.w	r3, r4, #15
 800a70a:	d00a      	beq.n	800a722 <_strtod_l+0x42a>
 800a70c:	495e      	ldr	r1, [pc, #376]	@ (800a888 <_strtod_l+0x590>)
 800a70e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a712:	4652      	mov	r2, sl
 800a714:	465b      	mov	r3, fp
 800a716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a71a:	f7f5 ff6d 	bl	80005f8 <__aeabi_dmul>
 800a71e:	4682      	mov	sl, r0
 800a720:	468b      	mov	fp, r1
 800a722:	f034 040f 	bics.w	r4, r4, #15
 800a726:	d073      	beq.n	800a810 <_strtod_l+0x518>
 800a728:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a72c:	dd48      	ble.n	800a7c0 <_strtod_l+0x4c8>
 800a72e:	2400      	movs	r4, #0
 800a730:	46a0      	mov	r8, r4
 800a732:	940a      	str	r4, [sp, #40]	@ 0x28
 800a734:	46a1      	mov	r9, r4
 800a736:	9a05      	ldr	r2, [sp, #20]
 800a738:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a890 <_strtod_l+0x598>
 800a73c:	2322      	movs	r3, #34	@ 0x22
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	f04f 0a00 	mov.w	sl, #0
 800a744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a746:	2b00      	cmp	r3, #0
 800a748:	f43f ae0f 	beq.w	800a36a <_strtod_l+0x72>
 800a74c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a74e:	9805      	ldr	r0, [sp, #20]
 800a750:	f002 ff4e 	bl	800d5f0 <_Bfree>
 800a754:	9805      	ldr	r0, [sp, #20]
 800a756:	4649      	mov	r1, r9
 800a758:	f002 ff4a 	bl	800d5f0 <_Bfree>
 800a75c:	9805      	ldr	r0, [sp, #20]
 800a75e:	4641      	mov	r1, r8
 800a760:	f002 ff46 	bl	800d5f0 <_Bfree>
 800a764:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a766:	9805      	ldr	r0, [sp, #20]
 800a768:	f002 ff42 	bl	800d5f0 <_Bfree>
 800a76c:	9805      	ldr	r0, [sp, #20]
 800a76e:	4621      	mov	r1, r4
 800a770:	f002 ff3e 	bl	800d5f0 <_Bfree>
 800a774:	e5f9      	b.n	800a36a <_strtod_l+0x72>
 800a776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a778:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a77c:	4293      	cmp	r3, r2
 800a77e:	dbbc      	blt.n	800a6fa <_strtod_l+0x402>
 800a780:	4c41      	ldr	r4, [pc, #260]	@ (800a888 <_strtod_l+0x590>)
 800a782:	f1c5 050f 	rsb	r5, r5, #15
 800a786:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a78a:	4652      	mov	r2, sl
 800a78c:	465b      	mov	r3, fp
 800a78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a792:	f7f5 ff31 	bl	80005f8 <__aeabi_dmul>
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	1b5d      	subs	r5, r3, r5
 800a79a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a79e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7a2:	e78f      	b.n	800a6c4 <_strtod_l+0x3cc>
 800a7a4:	3316      	adds	r3, #22
 800a7a6:	dba8      	blt.n	800a6fa <_strtod_l+0x402>
 800a7a8:	4b37      	ldr	r3, [pc, #220]	@ (800a888 <_strtod_l+0x590>)
 800a7aa:	eba9 0808 	sub.w	r8, r9, r8
 800a7ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a7b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a7b6:	4650      	mov	r0, sl
 800a7b8:	4659      	mov	r1, fp
 800a7ba:	f7f6 f847 	bl	800084c <__aeabi_ddiv>
 800a7be:	e783      	b.n	800a6c8 <_strtod_l+0x3d0>
 800a7c0:	4b32      	ldr	r3, [pc, #200]	@ (800a88c <_strtod_l+0x594>)
 800a7c2:	9308      	str	r3, [sp, #32]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	1124      	asrs	r4, r4, #4
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	4659      	mov	r1, fp
 800a7cc:	461e      	mov	r6, r3
 800a7ce:	2c01      	cmp	r4, #1
 800a7d0:	dc21      	bgt.n	800a816 <_strtod_l+0x51e>
 800a7d2:	b10b      	cbz	r3, 800a7d8 <_strtod_l+0x4e0>
 800a7d4:	4682      	mov	sl, r0
 800a7d6:	468b      	mov	fp, r1
 800a7d8:	492c      	ldr	r1, [pc, #176]	@ (800a88c <_strtod_l+0x594>)
 800a7da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a7de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	465b      	mov	r3, fp
 800a7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ea:	f7f5 ff05 	bl	80005f8 <__aeabi_dmul>
 800a7ee:	4b28      	ldr	r3, [pc, #160]	@ (800a890 <_strtod_l+0x598>)
 800a7f0:	460a      	mov	r2, r1
 800a7f2:	400b      	ands	r3, r1
 800a7f4:	4927      	ldr	r1, [pc, #156]	@ (800a894 <_strtod_l+0x59c>)
 800a7f6:	428b      	cmp	r3, r1
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	d898      	bhi.n	800a72e <_strtod_l+0x436>
 800a7fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a800:	428b      	cmp	r3, r1
 800a802:	bf86      	itte	hi
 800a804:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a898 <_strtod_l+0x5a0>
 800a808:	f04f 3aff 	movhi.w	sl, #4294967295
 800a80c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a810:	2300      	movs	r3, #0
 800a812:	9308      	str	r3, [sp, #32]
 800a814:	e07a      	b.n	800a90c <_strtod_l+0x614>
 800a816:	07e2      	lsls	r2, r4, #31
 800a818:	d505      	bpl.n	800a826 <_strtod_l+0x52e>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 feea 	bl	80005f8 <__aeabi_dmul>
 800a824:	2301      	movs	r3, #1
 800a826:	9a08      	ldr	r2, [sp, #32]
 800a828:	3208      	adds	r2, #8
 800a82a:	3601      	adds	r6, #1
 800a82c:	1064      	asrs	r4, r4, #1
 800a82e:	9208      	str	r2, [sp, #32]
 800a830:	e7cd      	b.n	800a7ce <_strtod_l+0x4d6>
 800a832:	d0ed      	beq.n	800a810 <_strtod_l+0x518>
 800a834:	4264      	negs	r4, r4
 800a836:	f014 020f 	ands.w	r2, r4, #15
 800a83a:	d00a      	beq.n	800a852 <_strtod_l+0x55a>
 800a83c:	4b12      	ldr	r3, [pc, #72]	@ (800a888 <_strtod_l+0x590>)
 800a83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a842:	4650      	mov	r0, sl
 800a844:	4659      	mov	r1, fp
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f5 ffff 	bl	800084c <__aeabi_ddiv>
 800a84e:	4682      	mov	sl, r0
 800a850:	468b      	mov	fp, r1
 800a852:	1124      	asrs	r4, r4, #4
 800a854:	d0dc      	beq.n	800a810 <_strtod_l+0x518>
 800a856:	2c1f      	cmp	r4, #31
 800a858:	dd20      	ble.n	800a89c <_strtod_l+0x5a4>
 800a85a:	2400      	movs	r4, #0
 800a85c:	46a0      	mov	r8, r4
 800a85e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a860:	46a1      	mov	r9, r4
 800a862:	9a05      	ldr	r2, [sp, #20]
 800a864:	2322      	movs	r3, #34	@ 0x22
 800a866:	f04f 0a00 	mov.w	sl, #0
 800a86a:	f04f 0b00 	mov.w	fp, #0
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	e768      	b.n	800a744 <_strtod_l+0x44c>
 800a872:	bf00      	nop
 800a874:	0800ff45 	.word	0x0800ff45
 800a878:	0800fee8 	.word	0x0800fee8
 800a87c:	0800ff3d 	.word	0x0800ff3d
 800a880:	0800ff7c 	.word	0x0800ff7c
 800a884:	0801030d 	.word	0x0801030d
 800a888:	080100f8 	.word	0x080100f8
 800a88c:	080100d0 	.word	0x080100d0
 800a890:	7ff00000 	.word	0x7ff00000
 800a894:	7ca00000 	.word	0x7ca00000
 800a898:	7fefffff 	.word	0x7fefffff
 800a89c:	f014 0310 	ands.w	r3, r4, #16
 800a8a0:	bf18      	it	ne
 800a8a2:	236a      	movne	r3, #106	@ 0x6a
 800a8a4:	4ea9      	ldr	r6, [pc, #676]	@ (800ab4c <_strtod_l+0x854>)
 800a8a6:	9308      	str	r3, [sp, #32]
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	4659      	mov	r1, fp
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	07e2      	lsls	r2, r4, #31
 800a8b0:	d504      	bpl.n	800a8bc <_strtod_l+0x5c4>
 800a8b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8b6:	f7f5 fe9f 	bl	80005f8 <__aeabi_dmul>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	1064      	asrs	r4, r4, #1
 800a8be:	f106 0608 	add.w	r6, r6, #8
 800a8c2:	d1f4      	bne.n	800a8ae <_strtod_l+0x5b6>
 800a8c4:	b10b      	cbz	r3, 800a8ca <_strtod_l+0x5d2>
 800a8c6:	4682      	mov	sl, r0
 800a8c8:	468b      	mov	fp, r1
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	b1b3      	cbz	r3, 800a8fc <_strtod_l+0x604>
 800a8ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a8d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	4659      	mov	r1, fp
 800a8da:	dd0f      	ble.n	800a8fc <_strtod_l+0x604>
 800a8dc:	2b1f      	cmp	r3, #31
 800a8de:	dd55      	ble.n	800a98c <_strtod_l+0x694>
 800a8e0:	2b34      	cmp	r3, #52	@ 0x34
 800a8e2:	bfde      	ittt	le
 800a8e4:	f04f 33ff 	movle.w	r3, #4294967295
 800a8e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a8ec:	4093      	lslle	r3, r2
 800a8ee:	f04f 0a00 	mov.w	sl, #0
 800a8f2:	bfcc      	ite	gt
 800a8f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a8f8:	ea03 0b01 	andle.w	fp, r3, r1
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2300      	movs	r3, #0
 800a900:	4650      	mov	r0, sl
 800a902:	4659      	mov	r1, fp
 800a904:	f7f6 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d1a6      	bne.n	800a85a <_strtod_l+0x562>
 800a90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a912:	9805      	ldr	r0, [sp, #20]
 800a914:	462b      	mov	r3, r5
 800a916:	463a      	mov	r2, r7
 800a918:	f002 fed2 	bl	800d6c0 <__s2b>
 800a91c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a91e:	2800      	cmp	r0, #0
 800a920:	f43f af05 	beq.w	800a72e <_strtod_l+0x436>
 800a924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a926:	2a00      	cmp	r2, #0
 800a928:	eba9 0308 	sub.w	r3, r9, r8
 800a92c:	bfa8      	it	ge
 800a92e:	2300      	movge	r3, #0
 800a930:	9312      	str	r3, [sp, #72]	@ 0x48
 800a932:	2400      	movs	r4, #0
 800a934:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a938:	9316      	str	r3, [sp, #88]	@ 0x58
 800a93a:	46a0      	mov	r8, r4
 800a93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a93e:	9805      	ldr	r0, [sp, #20]
 800a940:	6859      	ldr	r1, [r3, #4]
 800a942:	f002 fe15 	bl	800d570 <_Balloc>
 800a946:	4681      	mov	r9, r0
 800a948:	2800      	cmp	r0, #0
 800a94a:	f43f aef4 	beq.w	800a736 <_strtod_l+0x43e>
 800a94e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a950:	691a      	ldr	r2, [r3, #16]
 800a952:	3202      	adds	r2, #2
 800a954:	f103 010c 	add.w	r1, r3, #12
 800a958:	0092      	lsls	r2, r2, #2
 800a95a:	300c      	adds	r0, #12
 800a95c:	f001 fb4f 	bl	800bffe <memcpy>
 800a960:	ec4b ab10 	vmov	d0, sl, fp
 800a964:	9805      	ldr	r0, [sp, #20]
 800a966:	aa1c      	add	r2, sp, #112	@ 0x70
 800a968:	a91b      	add	r1, sp, #108	@ 0x6c
 800a96a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a96e:	f003 f9e3 	bl	800dd38 <__d2b>
 800a972:	901a      	str	r0, [sp, #104]	@ 0x68
 800a974:	2800      	cmp	r0, #0
 800a976:	f43f aede 	beq.w	800a736 <_strtod_l+0x43e>
 800a97a:	9805      	ldr	r0, [sp, #20]
 800a97c:	2101      	movs	r1, #1
 800a97e:	f002 ff35 	bl	800d7ec <__i2b>
 800a982:	4680      	mov	r8, r0
 800a984:	b948      	cbnz	r0, 800a99a <_strtod_l+0x6a2>
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	e6d4      	b.n	800a736 <_strtod_l+0x43e>
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	fa02 f303 	lsl.w	r3, r2, r3
 800a994:	ea03 0a0a 	and.w	sl, r3, sl
 800a998:	e7b0      	b.n	800a8fc <_strtod_l+0x604>
 800a99a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a99c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a99e:	2d00      	cmp	r5, #0
 800a9a0:	bfab      	itete	ge
 800a9a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a9a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a9a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a9a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a9aa:	bfac      	ite	ge
 800a9ac:	18ef      	addge	r7, r5, r3
 800a9ae:	1b5e      	sublt	r6, r3, r5
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	1aed      	subs	r5, r5, r3
 800a9b4:	4415      	add	r5, r2
 800a9b6:	4b66      	ldr	r3, [pc, #408]	@ (800ab50 <_strtod_l+0x858>)
 800a9b8:	3d01      	subs	r5, #1
 800a9ba:	429d      	cmp	r5, r3
 800a9bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a9c0:	da50      	bge.n	800aa64 <_strtod_l+0x76c>
 800a9c2:	1b5b      	subs	r3, r3, r5
 800a9c4:	2b1f      	cmp	r3, #31
 800a9c6:	eba2 0203 	sub.w	r2, r2, r3
 800a9ca:	f04f 0101 	mov.w	r1, #1
 800a9ce:	dc3d      	bgt.n	800aa4c <_strtod_l+0x754>
 800a9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9da:	18bd      	adds	r5, r7, r2
 800a9dc:	9b08      	ldr	r3, [sp, #32]
 800a9de:	42af      	cmp	r7, r5
 800a9e0:	4416      	add	r6, r2
 800a9e2:	441e      	add	r6, r3
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	bfa8      	it	ge
 800a9e8:	462b      	movge	r3, r5
 800a9ea:	42b3      	cmp	r3, r6
 800a9ec:	bfa8      	it	ge
 800a9ee:	4633      	movge	r3, r6
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	bfc2      	ittt	gt
 800a9f4:	1aed      	subgt	r5, r5, r3
 800a9f6:	1af6      	subgt	r6, r6, r3
 800a9f8:	1aff      	subgt	r7, r7, r3
 800a9fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dd16      	ble.n	800aa2e <_strtod_l+0x736>
 800aa00:	4641      	mov	r1, r8
 800aa02:	9805      	ldr	r0, [sp, #20]
 800aa04:	461a      	mov	r2, r3
 800aa06:	f002 ffb1 	bl	800d96c <__pow5mult>
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d0ba      	beq.n	800a986 <_strtod_l+0x68e>
 800aa10:	4601      	mov	r1, r0
 800aa12:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa14:	9805      	ldr	r0, [sp, #20]
 800aa16:	f002 feff 	bl	800d818 <__multiply>
 800aa1a:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f43f ae8a 	beq.w	800a736 <_strtod_l+0x43e>
 800aa22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa24:	9805      	ldr	r0, [sp, #20]
 800aa26:	f002 fde3 	bl	800d5f0 <_Bfree>
 800aa2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	dc1d      	bgt.n	800aa6e <_strtod_l+0x776>
 800aa32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd23      	ble.n	800aa80 <_strtod_l+0x788>
 800aa38:	4649      	mov	r1, r9
 800aa3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa3c:	9805      	ldr	r0, [sp, #20]
 800aa3e:	f002 ff95 	bl	800d96c <__pow5mult>
 800aa42:	4681      	mov	r9, r0
 800aa44:	b9e0      	cbnz	r0, 800aa80 <_strtod_l+0x788>
 800aa46:	f04f 0900 	mov.w	r9, #0
 800aa4a:	e674      	b.n	800a736 <_strtod_l+0x43e>
 800aa4c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aa50:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aa54:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aa58:	35e2      	adds	r5, #226	@ 0xe2
 800aa5a:	fa01 f305 	lsl.w	r3, r1, r5
 800aa5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa60:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aa62:	e7ba      	b.n	800a9da <_strtod_l+0x6e2>
 800aa64:	2300      	movs	r3, #0
 800aa66:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa68:	2301      	movs	r3, #1
 800aa6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa6c:	e7b5      	b.n	800a9da <_strtod_l+0x6e2>
 800aa6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa70:	9805      	ldr	r0, [sp, #20]
 800aa72:	462a      	mov	r2, r5
 800aa74:	f002 ffd4 	bl	800da20 <__lshift>
 800aa78:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1d9      	bne.n	800aa32 <_strtod_l+0x73a>
 800aa7e:	e65a      	b.n	800a736 <_strtod_l+0x43e>
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	dd07      	ble.n	800aa94 <_strtod_l+0x79c>
 800aa84:	4649      	mov	r1, r9
 800aa86:	9805      	ldr	r0, [sp, #20]
 800aa88:	4632      	mov	r2, r6
 800aa8a:	f002 ffc9 	bl	800da20 <__lshift>
 800aa8e:	4681      	mov	r9, r0
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d0d8      	beq.n	800aa46 <_strtod_l+0x74e>
 800aa94:	2f00      	cmp	r7, #0
 800aa96:	dd08      	ble.n	800aaaa <_strtod_l+0x7b2>
 800aa98:	4641      	mov	r1, r8
 800aa9a:	9805      	ldr	r0, [sp, #20]
 800aa9c:	463a      	mov	r2, r7
 800aa9e:	f002 ffbf 	bl	800da20 <__lshift>
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f43f ae46 	beq.w	800a736 <_strtod_l+0x43e>
 800aaaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	464a      	mov	r2, r9
 800aab0:	f003 f83e 	bl	800db30 <__mdiff>
 800aab4:	4604      	mov	r4, r0
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f43f ae3d 	beq.w	800a736 <_strtod_l+0x43e>
 800aabc:	68c3      	ldr	r3, [r0, #12]
 800aabe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aac0:	2300      	movs	r3, #0
 800aac2:	60c3      	str	r3, [r0, #12]
 800aac4:	4641      	mov	r1, r8
 800aac6:	f003 f817 	bl	800daf8 <__mcmp>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	da46      	bge.n	800ab5c <_strtod_l+0x864>
 800aace:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad0:	ea53 030a 	orrs.w	r3, r3, sl
 800aad4:	d16c      	bne.n	800abb0 <_strtod_l+0x8b8>
 800aad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d168      	bne.n	800abb0 <_strtod_l+0x8b8>
 800aade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aae2:	0d1b      	lsrs	r3, r3, #20
 800aae4:	051b      	lsls	r3, r3, #20
 800aae6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aaea:	d961      	bls.n	800abb0 <_strtod_l+0x8b8>
 800aaec:	6963      	ldr	r3, [r4, #20]
 800aaee:	b913      	cbnz	r3, 800aaf6 <_strtod_l+0x7fe>
 800aaf0:	6923      	ldr	r3, [r4, #16]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	dd5c      	ble.n	800abb0 <_strtod_l+0x8b8>
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	2201      	movs	r2, #1
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	f002 ff90 	bl	800da20 <__lshift>
 800ab00:	4641      	mov	r1, r8
 800ab02:	4604      	mov	r4, r0
 800ab04:	f002 fff8 	bl	800daf8 <__mcmp>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	dd51      	ble.n	800abb0 <_strtod_l+0x8b8>
 800ab0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab10:	9a08      	ldr	r2, [sp, #32]
 800ab12:	0d1b      	lsrs	r3, r3, #20
 800ab14:	051b      	lsls	r3, r3, #20
 800ab16:	2a00      	cmp	r2, #0
 800ab18:	d06b      	beq.n	800abf2 <_strtod_l+0x8fa>
 800ab1a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab1e:	d868      	bhi.n	800abf2 <_strtod_l+0x8fa>
 800ab20:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab24:	f67f ae9d 	bls.w	800a862 <_strtod_l+0x56a>
 800ab28:	4b0a      	ldr	r3, [pc, #40]	@ (800ab54 <_strtod_l+0x85c>)
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f7f5 fd62 	bl	80005f8 <__aeabi_dmul>
 800ab34:	4b08      	ldr	r3, [pc, #32]	@ (800ab58 <_strtod_l+0x860>)
 800ab36:	400b      	ands	r3, r1
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f47f ae05 	bne.w	800a74c <_strtod_l+0x454>
 800ab42:	9a05      	ldr	r2, [sp, #20]
 800ab44:	2322      	movs	r3, #34	@ 0x22
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	e600      	b.n	800a74c <_strtod_l+0x454>
 800ab4a:	bf00      	nop
 800ab4c:	0800ff10 	.word	0x0800ff10
 800ab50:	fffffc02 	.word	0xfffffc02
 800ab54:	39500000 	.word	0x39500000
 800ab58:	7ff00000 	.word	0x7ff00000
 800ab5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab60:	d165      	bne.n	800ac2e <_strtod_l+0x936>
 800ab62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab68:	b35a      	cbz	r2, 800abc2 <_strtod_l+0x8ca>
 800ab6a:	4a9f      	ldr	r2, [pc, #636]	@ (800ade8 <_strtod_l+0xaf0>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d12b      	bne.n	800abc8 <_strtod_l+0x8d0>
 800ab70:	9b08      	ldr	r3, [sp, #32]
 800ab72:	4651      	mov	r1, sl
 800ab74:	b303      	cbz	r3, 800abb8 <_strtod_l+0x8c0>
 800ab76:	4b9d      	ldr	r3, [pc, #628]	@ (800adec <_strtod_l+0xaf4>)
 800ab78:	465a      	mov	r2, fp
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ab80:	f04f 32ff 	mov.w	r2, #4294967295
 800ab84:	d81b      	bhi.n	800abbe <_strtod_l+0x8c6>
 800ab86:	0d1b      	lsrs	r3, r3, #20
 800ab88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab90:	4299      	cmp	r1, r3
 800ab92:	d119      	bne.n	800abc8 <_strtod_l+0x8d0>
 800ab94:	4b96      	ldr	r3, [pc, #600]	@ (800adf0 <_strtod_l+0xaf8>)
 800ab96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d102      	bne.n	800aba2 <_strtod_l+0x8aa>
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	f43f adca 	beq.w	800a736 <_strtod_l+0x43e>
 800aba2:	4b92      	ldr	r3, [pc, #584]	@ (800adec <_strtod_l+0xaf4>)
 800aba4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aba6:	401a      	ands	r2, r3
 800aba8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800abac:	f04f 0a00 	mov.w	sl, #0
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1b8      	bne.n	800ab28 <_strtod_l+0x830>
 800abb6:	e5c9      	b.n	800a74c <_strtod_l+0x454>
 800abb8:	f04f 33ff 	mov.w	r3, #4294967295
 800abbc:	e7e8      	b.n	800ab90 <_strtod_l+0x898>
 800abbe:	4613      	mov	r3, r2
 800abc0:	e7e6      	b.n	800ab90 <_strtod_l+0x898>
 800abc2:	ea53 030a 	orrs.w	r3, r3, sl
 800abc6:	d0a1      	beq.n	800ab0c <_strtod_l+0x814>
 800abc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abca:	b1db      	cbz	r3, 800ac04 <_strtod_l+0x90c>
 800abcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abce:	4213      	tst	r3, r2
 800abd0:	d0ee      	beq.n	800abb0 <_strtod_l+0x8b8>
 800abd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd4:	9a08      	ldr	r2, [sp, #32]
 800abd6:	4650      	mov	r0, sl
 800abd8:	4659      	mov	r1, fp
 800abda:	b1bb      	cbz	r3, 800ac0c <_strtod_l+0x914>
 800abdc:	f7ff fb6d 	bl	800a2ba <sulp>
 800abe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abe4:	ec53 2b10 	vmov	r2, r3, d0
 800abe8:	f7f5 fb50 	bl	800028c <__adddf3>
 800abec:	4682      	mov	sl, r0
 800abee:	468b      	mov	fp, r1
 800abf0:	e7de      	b.n	800abb0 <_strtod_l+0x8b8>
 800abf2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800abf6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abfa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800abfe:	f04f 3aff 	mov.w	sl, #4294967295
 800ac02:	e7d5      	b.n	800abb0 <_strtod_l+0x8b8>
 800ac04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac06:	ea13 0f0a 	tst.w	r3, sl
 800ac0a:	e7e1      	b.n	800abd0 <_strtod_l+0x8d8>
 800ac0c:	f7ff fb55 	bl	800a2ba <sulp>
 800ac10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac14:	ec53 2b10 	vmov	r2, r3, d0
 800ac18:	f7f5 fb36 	bl	8000288 <__aeabi_dsub>
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4682      	mov	sl, r0
 800ac22:	468b      	mov	fp, r1
 800ac24:	f7f5 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d0c1      	beq.n	800abb0 <_strtod_l+0x8b8>
 800ac2c:	e619      	b.n	800a862 <_strtod_l+0x56a>
 800ac2e:	4641      	mov	r1, r8
 800ac30:	4620      	mov	r0, r4
 800ac32:	f003 f8d9 	bl	800dde8 <__ratio>
 800ac36:	ec57 6b10 	vmov	r6, r7, d0
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 ff54 	bl	8000af0 <__aeabi_dcmple>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d06f      	beq.n	800ad2c <_strtod_l+0xa34>
 800ac4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d17a      	bne.n	800ad48 <_strtod_l+0xa50>
 800ac52:	f1ba 0f00 	cmp.w	sl, #0
 800ac56:	d158      	bne.n	800ad0a <_strtod_l+0xa12>
 800ac58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d15a      	bne.n	800ad18 <_strtod_l+0xa20>
 800ac62:	4b64      	ldr	r3, [pc, #400]	@ (800adf4 <_strtod_l+0xafc>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	4630      	mov	r0, r6
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7f5 ff37 	bl	8000adc <__aeabi_dcmplt>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d159      	bne.n	800ad26 <_strtod_l+0xa2e>
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	4b60      	ldr	r3, [pc, #384]	@ (800adf8 <_strtod_l+0xb00>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f7f5 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	460f      	mov	r7, r1
 800ac82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ac86:	9606      	str	r6, [sp, #24]
 800ac88:	9307      	str	r3, [sp, #28]
 800ac8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac8e:	4d57      	ldr	r5, [pc, #348]	@ (800adec <_strtod_l+0xaf4>)
 800ac90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac96:	401d      	ands	r5, r3
 800ac98:	4b58      	ldr	r3, [pc, #352]	@ (800adfc <_strtod_l+0xb04>)
 800ac9a:	429d      	cmp	r5, r3
 800ac9c:	f040 80b2 	bne.w	800ae04 <_strtod_l+0xb0c>
 800aca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aca2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aca6:	ec4b ab10 	vmov	d0, sl, fp
 800acaa:	f002 ffd5 	bl	800dc58 <__ulp>
 800acae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acb2:	ec51 0b10 	vmov	r0, r1, d0
 800acb6:	f7f5 fc9f 	bl	80005f8 <__aeabi_dmul>
 800acba:	4652      	mov	r2, sl
 800acbc:	465b      	mov	r3, fp
 800acbe:	f7f5 fae5 	bl	800028c <__adddf3>
 800acc2:	460b      	mov	r3, r1
 800acc4:	4949      	ldr	r1, [pc, #292]	@ (800adec <_strtod_l+0xaf4>)
 800acc6:	4a4e      	ldr	r2, [pc, #312]	@ (800ae00 <_strtod_l+0xb08>)
 800acc8:	4019      	ands	r1, r3
 800acca:	4291      	cmp	r1, r2
 800accc:	4682      	mov	sl, r0
 800acce:	d942      	bls.n	800ad56 <_strtod_l+0xa5e>
 800acd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acd2:	4b47      	ldr	r3, [pc, #284]	@ (800adf0 <_strtod_l+0xaf8>)
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d103      	bne.n	800ace0 <_strtod_l+0x9e8>
 800acd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acda:	3301      	adds	r3, #1
 800acdc:	f43f ad2b 	beq.w	800a736 <_strtod_l+0x43e>
 800ace0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800adf0 <_strtod_l+0xaf8>
 800ace4:	f04f 3aff 	mov.w	sl, #4294967295
 800ace8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acea:	9805      	ldr	r0, [sp, #20]
 800acec:	f002 fc80 	bl	800d5f0 <_Bfree>
 800acf0:	9805      	ldr	r0, [sp, #20]
 800acf2:	4649      	mov	r1, r9
 800acf4:	f002 fc7c 	bl	800d5f0 <_Bfree>
 800acf8:	9805      	ldr	r0, [sp, #20]
 800acfa:	4641      	mov	r1, r8
 800acfc:	f002 fc78 	bl	800d5f0 <_Bfree>
 800ad00:	9805      	ldr	r0, [sp, #20]
 800ad02:	4621      	mov	r1, r4
 800ad04:	f002 fc74 	bl	800d5f0 <_Bfree>
 800ad08:	e618      	b.n	800a93c <_strtod_l+0x644>
 800ad0a:	f1ba 0f01 	cmp.w	sl, #1
 800ad0e:	d103      	bne.n	800ad18 <_strtod_l+0xa20>
 800ad10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f43f ada5 	beq.w	800a862 <_strtod_l+0x56a>
 800ad18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800adc8 <_strtod_l+0xad0>
 800ad1c:	4f35      	ldr	r7, [pc, #212]	@ (800adf4 <_strtod_l+0xafc>)
 800ad1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad22:	2600      	movs	r6, #0
 800ad24:	e7b1      	b.n	800ac8a <_strtod_l+0x992>
 800ad26:	4f34      	ldr	r7, [pc, #208]	@ (800adf8 <_strtod_l+0xb00>)
 800ad28:	2600      	movs	r6, #0
 800ad2a:	e7aa      	b.n	800ac82 <_strtod_l+0x98a>
 800ad2c:	4b32      	ldr	r3, [pc, #200]	@ (800adf8 <_strtod_l+0xb00>)
 800ad2e:	4630      	mov	r0, r6
 800ad30:	4639      	mov	r1, r7
 800ad32:	2200      	movs	r2, #0
 800ad34:	f7f5 fc60 	bl	80005f8 <__aeabi_dmul>
 800ad38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d09f      	beq.n	800ac82 <_strtod_l+0x98a>
 800ad42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad46:	e7a0      	b.n	800ac8a <_strtod_l+0x992>
 800ad48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800add0 <_strtod_l+0xad8>
 800ad4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad50:	ec57 6b17 	vmov	r6, r7, d7
 800ad54:	e799      	b.n	800ac8a <_strtod_l+0x992>
 800ad56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ad5a:	9b08      	ldr	r3, [sp, #32]
 800ad5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1c1      	bne.n	800ace8 <_strtod_l+0x9f0>
 800ad64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad68:	0d1b      	lsrs	r3, r3, #20
 800ad6a:	051b      	lsls	r3, r3, #20
 800ad6c:	429d      	cmp	r5, r3
 800ad6e:	d1bb      	bne.n	800ace8 <_strtod_l+0x9f0>
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	f7f5 ffa0 	bl	8000cb8 <__aeabi_d2lz>
 800ad78:	f7f5 fc10 	bl	800059c <__aeabi_l2d>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4630      	mov	r0, r6
 800ad82:	4639      	mov	r1, r7
 800ad84:	f7f5 fa80 	bl	8000288 <__aeabi_dsub>
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ad90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ad94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad96:	ea46 060a 	orr.w	r6, r6, sl
 800ad9a:	431e      	orrs	r6, r3
 800ad9c:	d06f      	beq.n	800ae7e <_strtod_l+0xb86>
 800ad9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800add8 <_strtod_l+0xae0>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 fe9a 	bl	8000adc <__aeabi_dcmplt>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	f47f accf 	bne.w	800a74c <_strtod_l+0x454>
 800adae:	a30c      	add	r3, pc, #48	@ (adr r3, 800ade0 <_strtod_l+0xae8>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adb8:	f7f5 feae 	bl	8000b18 <__aeabi_dcmpgt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d093      	beq.n	800ace8 <_strtod_l+0x9f0>
 800adc0:	e4c4      	b.n	800a74c <_strtod_l+0x454>
 800adc2:	bf00      	nop
 800adc4:	f3af 8000 	nop.w
 800adc8:	00000000 	.word	0x00000000
 800adcc:	bff00000 	.word	0xbff00000
 800add0:	00000000 	.word	0x00000000
 800add4:	3ff00000 	.word	0x3ff00000
 800add8:	94a03595 	.word	0x94a03595
 800addc:	3fdfffff 	.word	0x3fdfffff
 800ade0:	35afe535 	.word	0x35afe535
 800ade4:	3fe00000 	.word	0x3fe00000
 800ade8:	000fffff 	.word	0x000fffff
 800adec:	7ff00000 	.word	0x7ff00000
 800adf0:	7fefffff 	.word	0x7fefffff
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	3fe00000 	.word	0x3fe00000
 800adfc:	7fe00000 	.word	0x7fe00000
 800ae00:	7c9fffff 	.word	0x7c9fffff
 800ae04:	9b08      	ldr	r3, [sp, #32]
 800ae06:	b323      	cbz	r3, 800ae52 <_strtod_l+0xb5a>
 800ae08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae0c:	d821      	bhi.n	800ae52 <_strtod_l+0xb5a>
 800ae0e:	a328      	add	r3, pc, #160	@ (adr r3, 800aeb0 <_strtod_l+0xbb8>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	4630      	mov	r0, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	f7f5 fe6a 	bl	8000af0 <__aeabi_dcmple>
 800ae1c:	b1a0      	cbz	r0, 800ae48 <_strtod_l+0xb50>
 800ae1e:	4639      	mov	r1, r7
 800ae20:	4630      	mov	r0, r6
 800ae22:	f7f5 fec1 	bl	8000ba8 <__aeabi_d2uiz>
 800ae26:	2801      	cmp	r0, #1
 800ae28:	bf38      	it	cc
 800ae2a:	2001      	movcc	r0, #1
 800ae2c:	f7f5 fb6a 	bl	8000504 <__aeabi_ui2d>
 800ae30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae32:	4606      	mov	r6, r0
 800ae34:	460f      	mov	r7, r1
 800ae36:	b9fb      	cbnz	r3, 800ae78 <_strtod_l+0xb80>
 800ae38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ae44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ae4e:	1b5b      	subs	r3, r3, r5
 800ae50:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ae5a:	f002 fefd 	bl	800dc58 <__ulp>
 800ae5e:	4650      	mov	r0, sl
 800ae60:	ec53 2b10 	vmov	r2, r3, d0
 800ae64:	4659      	mov	r1, fp
 800ae66:	f7f5 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ae6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ae6e:	f7f5 fa0d 	bl	800028c <__adddf3>
 800ae72:	4682      	mov	sl, r0
 800ae74:	468b      	mov	fp, r1
 800ae76:	e770      	b.n	800ad5a <_strtod_l+0xa62>
 800ae78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ae7c:	e7e0      	b.n	800ae40 <_strtod_l+0xb48>
 800ae7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800aeb8 <_strtod_l+0xbc0>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 fe2a 	bl	8000adc <__aeabi_dcmplt>
 800ae88:	e798      	b.n	800adbc <_strtod_l+0xac4>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ae90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	f7ff ba6d 	b.w	800a372 <_strtod_l+0x7a>
 800ae98:	2a65      	cmp	r2, #101	@ 0x65
 800ae9a:	f43f ab66 	beq.w	800a56a <_strtod_l+0x272>
 800ae9e:	2a45      	cmp	r2, #69	@ 0x45
 800aea0:	f43f ab63 	beq.w	800a56a <_strtod_l+0x272>
 800aea4:	2301      	movs	r3, #1
 800aea6:	f7ff bb9e 	b.w	800a5e6 <_strtod_l+0x2ee>
 800aeaa:	bf00      	nop
 800aeac:	f3af 8000 	nop.w
 800aeb0:	ffc00000 	.word	0xffc00000
 800aeb4:	41dfffff 	.word	0x41dfffff
 800aeb8:	94a03595 	.word	0x94a03595
 800aebc:	3fcfffff 	.word	0x3fcfffff

0800aec0 <_strtod_r>:
 800aec0:	4b01      	ldr	r3, [pc, #4]	@ (800aec8 <_strtod_r+0x8>)
 800aec2:	f7ff ba19 	b.w	800a2f8 <_strtod_l>
 800aec6:	bf00      	nop
 800aec8:	20000050 	.word	0x20000050

0800aecc <strtof>:
 800aecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800af90 <strtof+0xc4>
 800aed4:	4b29      	ldr	r3, [pc, #164]	@ (800af7c <strtof+0xb0>)
 800aed6:	460a      	mov	r2, r1
 800aed8:	ed2d 8b02 	vpush	{d8}
 800aedc:	4601      	mov	r1, r0
 800aede:	f8d8 0000 	ldr.w	r0, [r8]
 800aee2:	f7ff fa09 	bl	800a2f8 <_strtod_l>
 800aee6:	ec55 4b10 	vmov	r4, r5, d0
 800aeea:	4622      	mov	r2, r4
 800aeec:	462b      	mov	r3, r5
 800aeee:	4620      	mov	r0, r4
 800aef0:	4629      	mov	r1, r5
 800aef2:	f7f5 fe1b 	bl	8000b2c <__aeabi_dcmpun>
 800aef6:	b190      	cbz	r0, 800af1e <strtof+0x52>
 800aef8:	2d00      	cmp	r5, #0
 800aefa:	4821      	ldr	r0, [pc, #132]	@ (800af80 <strtof+0xb4>)
 800aefc:	da09      	bge.n	800af12 <strtof+0x46>
 800aefe:	f001 f897 	bl	800c030 <nanf>
 800af02:	eeb1 8a40 	vneg.f32	s16, s0
 800af06:	eeb0 0a48 	vmov.f32	s0, s16
 800af0a:	ecbd 8b02 	vpop	{d8}
 800af0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af12:	ecbd 8b02 	vpop	{d8}
 800af16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af1a:	f001 b889 	b.w	800c030 <nanf>
 800af1e:	4620      	mov	r0, r4
 800af20:	4629      	mov	r1, r5
 800af22:	f7f5 fe61 	bl	8000be8 <__aeabi_d2f>
 800af26:	ee08 0a10 	vmov	s16, r0
 800af2a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800af84 <strtof+0xb8>
 800af2e:	eeb0 7ac8 	vabs.f32	s14, s16
 800af32:	eeb4 7a67 	vcmp.f32	s14, s15
 800af36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3a:	dd11      	ble.n	800af60 <strtof+0x94>
 800af3c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800af40:	4b11      	ldr	r3, [pc, #68]	@ (800af88 <strtof+0xbc>)
 800af42:	f04f 32ff 	mov.w	r2, #4294967295
 800af46:	4620      	mov	r0, r4
 800af48:	4639      	mov	r1, r7
 800af4a:	f7f5 fdef 	bl	8000b2c <__aeabi_dcmpun>
 800af4e:	b980      	cbnz	r0, 800af72 <strtof+0xa6>
 800af50:	4b0d      	ldr	r3, [pc, #52]	@ (800af88 <strtof+0xbc>)
 800af52:	f04f 32ff 	mov.w	r2, #4294967295
 800af56:	4620      	mov	r0, r4
 800af58:	4639      	mov	r1, r7
 800af5a:	f7f5 fdc9 	bl	8000af0 <__aeabi_dcmple>
 800af5e:	b940      	cbnz	r0, 800af72 <strtof+0xa6>
 800af60:	ee18 3a10 	vmov	r3, s16
 800af64:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800af68:	d1cd      	bne.n	800af06 <strtof+0x3a>
 800af6a:	4b08      	ldr	r3, [pc, #32]	@ (800af8c <strtof+0xc0>)
 800af6c:	402b      	ands	r3, r5
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0c9      	beq.n	800af06 <strtof+0x3a>
 800af72:	f8d8 3000 	ldr.w	r3, [r8]
 800af76:	2222      	movs	r2, #34	@ 0x22
 800af78:	601a      	str	r2, [r3, #0]
 800af7a:	e7c4      	b.n	800af06 <strtof+0x3a>
 800af7c:	20000050 	.word	0x20000050
 800af80:	0801030d 	.word	0x0801030d
 800af84:	7f7fffff 	.word	0x7f7fffff
 800af88:	7fefffff 	.word	0x7fefffff
 800af8c:	7ff00000 	.word	0x7ff00000
 800af90:	200001bc 	.word	0x200001bc

0800af94 <__cvt>:
 800af94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	ec57 6b10 	vmov	r6, r7, d0
 800af9c:	2f00      	cmp	r7, #0
 800af9e:	460c      	mov	r4, r1
 800afa0:	4619      	mov	r1, r3
 800afa2:	463b      	mov	r3, r7
 800afa4:	bfbb      	ittet	lt
 800afa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800afaa:	461f      	movlt	r7, r3
 800afac:	2300      	movge	r3, #0
 800afae:	232d      	movlt	r3, #45	@ 0x2d
 800afb0:	700b      	strb	r3, [r1, #0]
 800afb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800afb8:	4691      	mov	r9, r2
 800afba:	f023 0820 	bic.w	r8, r3, #32
 800afbe:	bfbc      	itt	lt
 800afc0:	4632      	movlt	r2, r6
 800afc2:	4616      	movlt	r6, r2
 800afc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afc8:	d005      	beq.n	800afd6 <__cvt+0x42>
 800afca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800afce:	d100      	bne.n	800afd2 <__cvt+0x3e>
 800afd0:	3401      	adds	r4, #1
 800afd2:	2102      	movs	r1, #2
 800afd4:	e000      	b.n	800afd8 <__cvt+0x44>
 800afd6:	2103      	movs	r1, #3
 800afd8:	ab03      	add	r3, sp, #12
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	ab02      	add	r3, sp, #8
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	ec47 6b10 	vmov	d0, r6, r7
 800afe4:	4653      	mov	r3, sl
 800afe6:	4622      	mov	r2, r4
 800afe8:	f001 f8b2 	bl	800c150 <_dtoa_r>
 800afec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aff0:	4605      	mov	r5, r0
 800aff2:	d119      	bne.n	800b028 <__cvt+0x94>
 800aff4:	f019 0f01 	tst.w	r9, #1
 800aff8:	d00e      	beq.n	800b018 <__cvt+0x84>
 800affa:	eb00 0904 	add.w	r9, r0, r4
 800affe:	2200      	movs	r2, #0
 800b000:	2300      	movs	r3, #0
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b00a:	b108      	cbz	r0, 800b010 <__cvt+0x7c>
 800b00c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b010:	2230      	movs	r2, #48	@ 0x30
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	454b      	cmp	r3, r9
 800b016:	d31e      	bcc.n	800b056 <__cvt+0xc2>
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b01c:	1b5b      	subs	r3, r3, r5
 800b01e:	4628      	mov	r0, r5
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	b004      	add	sp, #16
 800b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b02c:	eb00 0904 	add.w	r9, r0, r4
 800b030:	d1e5      	bne.n	800affe <__cvt+0x6a>
 800b032:	7803      	ldrb	r3, [r0, #0]
 800b034:	2b30      	cmp	r3, #48	@ 0x30
 800b036:	d10a      	bne.n	800b04e <__cvt+0xba>
 800b038:	2200      	movs	r2, #0
 800b03a:	2300      	movs	r3, #0
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 800b044:	b918      	cbnz	r0, 800b04e <__cvt+0xba>
 800b046:	f1c4 0401 	rsb	r4, r4, #1
 800b04a:	f8ca 4000 	str.w	r4, [sl]
 800b04e:	f8da 3000 	ldr.w	r3, [sl]
 800b052:	4499      	add	r9, r3
 800b054:	e7d3      	b.n	800affe <__cvt+0x6a>
 800b056:	1c59      	adds	r1, r3, #1
 800b058:	9103      	str	r1, [sp, #12]
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e7d9      	b.n	800b012 <__cvt+0x7e>

0800b05e <__exponent>:
 800b05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b060:	2900      	cmp	r1, #0
 800b062:	bfba      	itte	lt
 800b064:	4249      	neglt	r1, r1
 800b066:	232d      	movlt	r3, #45	@ 0x2d
 800b068:	232b      	movge	r3, #43	@ 0x2b
 800b06a:	2909      	cmp	r1, #9
 800b06c:	7002      	strb	r2, [r0, #0]
 800b06e:	7043      	strb	r3, [r0, #1]
 800b070:	dd29      	ble.n	800b0c6 <__exponent+0x68>
 800b072:	f10d 0307 	add.w	r3, sp, #7
 800b076:	461d      	mov	r5, r3
 800b078:	270a      	movs	r7, #10
 800b07a:	461a      	mov	r2, r3
 800b07c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b080:	fb07 1416 	mls	r4, r7, r6, r1
 800b084:	3430      	adds	r4, #48	@ 0x30
 800b086:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b08a:	460c      	mov	r4, r1
 800b08c:	2c63      	cmp	r4, #99	@ 0x63
 800b08e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b092:	4631      	mov	r1, r6
 800b094:	dcf1      	bgt.n	800b07a <__exponent+0x1c>
 800b096:	3130      	adds	r1, #48	@ 0x30
 800b098:	1e94      	subs	r4, r2, #2
 800b09a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b09e:	1c41      	adds	r1, r0, #1
 800b0a0:	4623      	mov	r3, r4
 800b0a2:	42ab      	cmp	r3, r5
 800b0a4:	d30a      	bcc.n	800b0bc <__exponent+0x5e>
 800b0a6:	f10d 0309 	add.w	r3, sp, #9
 800b0aa:	1a9b      	subs	r3, r3, r2
 800b0ac:	42ac      	cmp	r4, r5
 800b0ae:	bf88      	it	hi
 800b0b0:	2300      	movhi	r3, #0
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	4403      	add	r3, r0
 800b0b6:	1a18      	subs	r0, r3, r0
 800b0b8:	b003      	add	sp, #12
 800b0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b0c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0c4:	e7ed      	b.n	800b0a2 <__exponent+0x44>
 800b0c6:	2330      	movs	r3, #48	@ 0x30
 800b0c8:	3130      	adds	r1, #48	@ 0x30
 800b0ca:	7083      	strb	r3, [r0, #2]
 800b0cc:	70c1      	strb	r1, [r0, #3]
 800b0ce:	1d03      	adds	r3, r0, #4
 800b0d0:	e7f1      	b.n	800b0b6 <__exponent+0x58>
	...

0800b0d4 <_printf_float>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	b08d      	sub	sp, #52	@ 0x34
 800b0da:	460c      	mov	r4, r1
 800b0dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0e0:	4616      	mov	r6, r2
 800b0e2:	461f      	mov	r7, r3
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	f000 ff13 	bl	800bf10 <_localeconv_r>
 800b0ea:	6803      	ldr	r3, [r0, #0]
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7f5 f8be 	bl	8000270 <strlen>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b0fc:	9005      	str	r0, [sp, #20]
 800b0fe:	3307      	adds	r3, #7
 800b100:	f023 0307 	bic.w	r3, r3, #7
 800b104:	f103 0208 	add.w	r2, r3, #8
 800b108:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b10c:	f8d4 b000 	ldr.w	fp, [r4]
 800b110:	f8c8 2000 	str.w	r2, [r8]
 800b114:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b118:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b11c:	9307      	str	r3, [sp, #28]
 800b11e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b122:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b12a:	4b9c      	ldr	r3, [pc, #624]	@ (800b39c <_printf_float+0x2c8>)
 800b12c:	f04f 32ff 	mov.w	r2, #4294967295
 800b130:	f7f5 fcfc 	bl	8000b2c <__aeabi_dcmpun>
 800b134:	bb70      	cbnz	r0, 800b194 <_printf_float+0xc0>
 800b136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b13a:	4b98      	ldr	r3, [pc, #608]	@ (800b39c <_printf_float+0x2c8>)
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	f7f5 fcd6 	bl	8000af0 <__aeabi_dcmple>
 800b144:	bb30      	cbnz	r0, 800b194 <_printf_float+0xc0>
 800b146:	2200      	movs	r2, #0
 800b148:	2300      	movs	r3, #0
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	f7f5 fcc5 	bl	8000adc <__aeabi_dcmplt>
 800b152:	b110      	cbz	r0, 800b15a <_printf_float+0x86>
 800b154:	232d      	movs	r3, #45	@ 0x2d
 800b156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b15a:	4a91      	ldr	r2, [pc, #580]	@ (800b3a0 <_printf_float+0x2cc>)
 800b15c:	4b91      	ldr	r3, [pc, #580]	@ (800b3a4 <_printf_float+0x2d0>)
 800b15e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b162:	bf94      	ite	ls
 800b164:	4690      	movls	r8, r2
 800b166:	4698      	movhi	r8, r3
 800b168:	2303      	movs	r3, #3
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	f02b 0304 	bic.w	r3, fp, #4
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	f04f 0900 	mov.w	r9, #0
 800b176:	9700      	str	r7, [sp, #0]
 800b178:	4633      	mov	r3, r6
 800b17a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b17c:	4621      	mov	r1, r4
 800b17e:	4628      	mov	r0, r5
 800b180:	f000 f9d2 	bl	800b528 <_printf_common>
 800b184:	3001      	adds	r0, #1
 800b186:	f040 808d 	bne.w	800b2a4 <_printf_float+0x1d0>
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
 800b18e:	b00d      	add	sp, #52	@ 0x34
 800b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b194:	4642      	mov	r2, r8
 800b196:	464b      	mov	r3, r9
 800b198:	4640      	mov	r0, r8
 800b19a:	4649      	mov	r1, r9
 800b19c:	f7f5 fcc6 	bl	8000b2c <__aeabi_dcmpun>
 800b1a0:	b140      	cbz	r0, 800b1b4 <_printf_float+0xe0>
 800b1a2:	464b      	mov	r3, r9
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	bfbc      	itt	lt
 800b1a8:	232d      	movlt	r3, #45	@ 0x2d
 800b1aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b1ae:	4a7e      	ldr	r2, [pc, #504]	@ (800b3a8 <_printf_float+0x2d4>)
 800b1b0:	4b7e      	ldr	r3, [pc, #504]	@ (800b3ac <_printf_float+0x2d8>)
 800b1b2:	e7d4      	b.n	800b15e <_printf_float+0x8a>
 800b1b4:	6863      	ldr	r3, [r4, #4]
 800b1b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b1ba:	9206      	str	r2, [sp, #24]
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	d13b      	bne.n	800b238 <_printf_float+0x164>
 800b1c0:	2306      	movs	r3, #6
 800b1c2:	6063      	str	r3, [r4, #4]
 800b1c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b1d4:	ab09      	add	r3, sp, #36	@ 0x24
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	6861      	ldr	r1, [r4, #4]
 800b1da:	ec49 8b10 	vmov	d0, r8, r9
 800b1de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f7ff fed6 	bl	800af94 <__cvt>
 800b1e8:	9b06      	ldr	r3, [sp, #24]
 800b1ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1ec:	2b47      	cmp	r3, #71	@ 0x47
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	d129      	bne.n	800b246 <_printf_float+0x172>
 800b1f2:	1cc8      	adds	r0, r1, #3
 800b1f4:	db02      	blt.n	800b1fc <_printf_float+0x128>
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	dd41      	ble.n	800b280 <_printf_float+0x1ac>
 800b1fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800b200:	fa5f fa8a 	uxtb.w	sl, sl
 800b204:	3901      	subs	r1, #1
 800b206:	4652      	mov	r2, sl
 800b208:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b20c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b20e:	f7ff ff26 	bl	800b05e <__exponent>
 800b212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b214:	1813      	adds	r3, r2, r0
 800b216:	2a01      	cmp	r2, #1
 800b218:	4681      	mov	r9, r0
 800b21a:	6123      	str	r3, [r4, #16]
 800b21c:	dc02      	bgt.n	800b224 <_printf_float+0x150>
 800b21e:	6822      	ldr	r2, [r4, #0]
 800b220:	07d2      	lsls	r2, r2, #31
 800b222:	d501      	bpl.n	800b228 <_printf_float+0x154>
 800b224:	3301      	adds	r3, #1
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0a2      	beq.n	800b176 <_printf_float+0xa2>
 800b230:	232d      	movs	r3, #45	@ 0x2d
 800b232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b236:	e79e      	b.n	800b176 <_printf_float+0xa2>
 800b238:	9a06      	ldr	r2, [sp, #24]
 800b23a:	2a47      	cmp	r2, #71	@ 0x47
 800b23c:	d1c2      	bne.n	800b1c4 <_printf_float+0xf0>
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1c0      	bne.n	800b1c4 <_printf_float+0xf0>
 800b242:	2301      	movs	r3, #1
 800b244:	e7bd      	b.n	800b1c2 <_printf_float+0xee>
 800b246:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b24a:	d9db      	bls.n	800b204 <_printf_float+0x130>
 800b24c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b250:	d118      	bne.n	800b284 <_printf_float+0x1b0>
 800b252:	2900      	cmp	r1, #0
 800b254:	6863      	ldr	r3, [r4, #4]
 800b256:	dd0b      	ble.n	800b270 <_printf_float+0x19c>
 800b258:	6121      	str	r1, [r4, #16]
 800b25a:	b913      	cbnz	r3, 800b262 <_printf_float+0x18e>
 800b25c:	6822      	ldr	r2, [r4, #0]
 800b25e:	07d0      	lsls	r0, r2, #31
 800b260:	d502      	bpl.n	800b268 <_printf_float+0x194>
 800b262:	3301      	adds	r3, #1
 800b264:	440b      	add	r3, r1
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b26a:	f04f 0900 	mov.w	r9, #0
 800b26e:	e7db      	b.n	800b228 <_printf_float+0x154>
 800b270:	b913      	cbnz	r3, 800b278 <_printf_float+0x1a4>
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	07d2      	lsls	r2, r2, #31
 800b276:	d501      	bpl.n	800b27c <_printf_float+0x1a8>
 800b278:	3302      	adds	r3, #2
 800b27a:	e7f4      	b.n	800b266 <_printf_float+0x192>
 800b27c:	2301      	movs	r3, #1
 800b27e:	e7f2      	b.n	800b266 <_printf_float+0x192>
 800b280:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b286:	4299      	cmp	r1, r3
 800b288:	db05      	blt.n	800b296 <_printf_float+0x1c2>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	6121      	str	r1, [r4, #16]
 800b28e:	07d8      	lsls	r0, r3, #31
 800b290:	d5ea      	bpl.n	800b268 <_printf_float+0x194>
 800b292:	1c4b      	adds	r3, r1, #1
 800b294:	e7e7      	b.n	800b266 <_printf_float+0x192>
 800b296:	2900      	cmp	r1, #0
 800b298:	bfd4      	ite	le
 800b29a:	f1c1 0202 	rsble	r2, r1, #2
 800b29e:	2201      	movgt	r2, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	e7e0      	b.n	800b266 <_printf_float+0x192>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	055a      	lsls	r2, r3, #21
 800b2a8:	d407      	bmi.n	800b2ba <_printf_float+0x1e6>
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d12b      	bne.n	800b310 <_printf_float+0x23c>
 800b2b8:	e767      	b.n	800b18a <_printf_float+0xb6>
 800b2ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2be:	f240 80dd 	bls.w	800b47c <_printf_float+0x3a8>
 800b2c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f7f5 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d033      	beq.n	800b33a <_printf_float+0x266>
 800b2d2:	4a37      	ldr	r2, [pc, #220]	@ (800b3b0 <_printf_float+0x2dc>)
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4628      	mov	r0, r5
 800b2da:	47b8      	blx	r7
 800b2dc:	3001      	adds	r0, #1
 800b2de:	f43f af54 	beq.w	800b18a <_printf_float+0xb6>
 800b2e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b2e6:	4543      	cmp	r3, r8
 800b2e8:	db02      	blt.n	800b2f0 <_printf_float+0x21c>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	07d8      	lsls	r0, r3, #31
 800b2ee:	d50f      	bpl.n	800b310 <_printf_float+0x23c>
 800b2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b8      	blx	r7
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	f43f af45 	beq.w	800b18a <_printf_float+0xb6>
 800b300:	f04f 0900 	mov.w	r9, #0
 800b304:	f108 38ff 	add.w	r8, r8, #4294967295
 800b308:	f104 0a1a 	add.w	sl, r4, #26
 800b30c:	45c8      	cmp	r8, r9
 800b30e:	dc09      	bgt.n	800b324 <_printf_float+0x250>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	079b      	lsls	r3, r3, #30
 800b314:	f100 8103 	bmi.w	800b51e <_printf_float+0x44a>
 800b318:	68e0      	ldr	r0, [r4, #12]
 800b31a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b31c:	4298      	cmp	r0, r3
 800b31e:	bfb8      	it	lt
 800b320:	4618      	movlt	r0, r3
 800b322:	e734      	b.n	800b18e <_printf_float+0xba>
 800b324:	2301      	movs	r3, #1
 800b326:	4652      	mov	r2, sl
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f af2b 	beq.w	800b18a <_printf_float+0xb6>
 800b334:	f109 0901 	add.w	r9, r9, #1
 800b338:	e7e8      	b.n	800b30c <_printf_float+0x238>
 800b33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dc39      	bgt.n	800b3b4 <_printf_float+0x2e0>
 800b340:	4a1b      	ldr	r2, [pc, #108]	@ (800b3b0 <_printf_float+0x2dc>)
 800b342:	2301      	movs	r3, #1
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af1d 	beq.w	800b18a <_printf_float+0xb6>
 800b350:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b354:	ea59 0303 	orrs.w	r3, r9, r3
 800b358:	d102      	bne.n	800b360 <_printf_float+0x28c>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	07d9      	lsls	r1, r3, #31
 800b35e:	d5d7      	bpl.n	800b310 <_printf_float+0x23c>
 800b360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b364:	4631      	mov	r1, r6
 800b366:	4628      	mov	r0, r5
 800b368:	47b8      	blx	r7
 800b36a:	3001      	adds	r0, #1
 800b36c:	f43f af0d 	beq.w	800b18a <_printf_float+0xb6>
 800b370:	f04f 0a00 	mov.w	sl, #0
 800b374:	f104 0b1a 	add.w	fp, r4, #26
 800b378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37a:	425b      	negs	r3, r3
 800b37c:	4553      	cmp	r3, sl
 800b37e:	dc01      	bgt.n	800b384 <_printf_float+0x2b0>
 800b380:	464b      	mov	r3, r9
 800b382:	e793      	b.n	800b2ac <_printf_float+0x1d8>
 800b384:	2301      	movs	r3, #1
 800b386:	465a      	mov	r2, fp
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	f43f aefb 	beq.w	800b18a <_printf_float+0xb6>
 800b394:	f10a 0a01 	add.w	sl, sl, #1
 800b398:	e7ee      	b.n	800b378 <_printf_float+0x2a4>
 800b39a:	bf00      	nop
 800b39c:	7fefffff 	.word	0x7fefffff
 800b3a0:	0800ff38 	.word	0x0800ff38
 800b3a4:	0800ff3c 	.word	0x0800ff3c
 800b3a8:	0800ff40 	.word	0x0800ff40
 800b3ac:	0800ff44 	.word	0x0800ff44
 800b3b0:	0800ff48 	.word	0x0800ff48
 800b3b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3ba:	4553      	cmp	r3, sl
 800b3bc:	bfa8      	it	ge
 800b3be:	4653      	movge	r3, sl
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	4699      	mov	r9, r3
 800b3c4:	dc36      	bgt.n	800b434 <_printf_float+0x360>
 800b3c6:	f04f 0b00 	mov.w	fp, #0
 800b3ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ce:	f104 021a 	add.w	r2, r4, #26
 800b3d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3d4:	9306      	str	r3, [sp, #24]
 800b3d6:	eba3 0309 	sub.w	r3, r3, r9
 800b3da:	455b      	cmp	r3, fp
 800b3dc:	dc31      	bgt.n	800b442 <_printf_float+0x36e>
 800b3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3e0:	459a      	cmp	sl, r3
 800b3e2:	dc3a      	bgt.n	800b45a <_printf_float+0x386>
 800b3e4:	6823      	ldr	r3, [r4, #0]
 800b3e6:	07da      	lsls	r2, r3, #31
 800b3e8:	d437      	bmi.n	800b45a <_printf_float+0x386>
 800b3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ec:	ebaa 0903 	sub.w	r9, sl, r3
 800b3f0:	9b06      	ldr	r3, [sp, #24]
 800b3f2:	ebaa 0303 	sub.w	r3, sl, r3
 800b3f6:	4599      	cmp	r9, r3
 800b3f8:	bfa8      	it	ge
 800b3fa:	4699      	movge	r9, r3
 800b3fc:	f1b9 0f00 	cmp.w	r9, #0
 800b400:	dc33      	bgt.n	800b46a <_printf_float+0x396>
 800b402:	f04f 0800 	mov.w	r8, #0
 800b406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b40a:	f104 0b1a 	add.w	fp, r4, #26
 800b40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b410:	ebaa 0303 	sub.w	r3, sl, r3
 800b414:	eba3 0309 	sub.w	r3, r3, r9
 800b418:	4543      	cmp	r3, r8
 800b41a:	f77f af79 	ble.w	800b310 <_printf_float+0x23c>
 800b41e:	2301      	movs	r3, #1
 800b420:	465a      	mov	r2, fp
 800b422:	4631      	mov	r1, r6
 800b424:	4628      	mov	r0, r5
 800b426:	47b8      	blx	r7
 800b428:	3001      	adds	r0, #1
 800b42a:	f43f aeae 	beq.w	800b18a <_printf_float+0xb6>
 800b42e:	f108 0801 	add.w	r8, r8, #1
 800b432:	e7ec      	b.n	800b40e <_printf_float+0x33a>
 800b434:	4642      	mov	r2, r8
 800b436:	4631      	mov	r1, r6
 800b438:	4628      	mov	r0, r5
 800b43a:	47b8      	blx	r7
 800b43c:	3001      	adds	r0, #1
 800b43e:	d1c2      	bne.n	800b3c6 <_printf_float+0x2f2>
 800b440:	e6a3      	b.n	800b18a <_printf_float+0xb6>
 800b442:	2301      	movs	r3, #1
 800b444:	4631      	mov	r1, r6
 800b446:	4628      	mov	r0, r5
 800b448:	9206      	str	r2, [sp, #24]
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	f43f ae9c 	beq.w	800b18a <_printf_float+0xb6>
 800b452:	9a06      	ldr	r2, [sp, #24]
 800b454:	f10b 0b01 	add.w	fp, fp, #1
 800b458:	e7bb      	b.n	800b3d2 <_printf_float+0x2fe>
 800b45a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b45e:	4631      	mov	r1, r6
 800b460:	4628      	mov	r0, r5
 800b462:	47b8      	blx	r7
 800b464:	3001      	adds	r0, #1
 800b466:	d1c0      	bne.n	800b3ea <_printf_float+0x316>
 800b468:	e68f      	b.n	800b18a <_printf_float+0xb6>
 800b46a:	9a06      	ldr	r2, [sp, #24]
 800b46c:	464b      	mov	r3, r9
 800b46e:	4442      	add	r2, r8
 800b470:	4631      	mov	r1, r6
 800b472:	4628      	mov	r0, r5
 800b474:	47b8      	blx	r7
 800b476:	3001      	adds	r0, #1
 800b478:	d1c3      	bne.n	800b402 <_printf_float+0x32e>
 800b47a:	e686      	b.n	800b18a <_printf_float+0xb6>
 800b47c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b480:	f1ba 0f01 	cmp.w	sl, #1
 800b484:	dc01      	bgt.n	800b48a <_printf_float+0x3b6>
 800b486:	07db      	lsls	r3, r3, #31
 800b488:	d536      	bpl.n	800b4f8 <_printf_float+0x424>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4642      	mov	r2, r8
 800b48e:	4631      	mov	r1, r6
 800b490:	4628      	mov	r0, r5
 800b492:	47b8      	blx	r7
 800b494:	3001      	adds	r0, #1
 800b496:	f43f ae78 	beq.w	800b18a <_printf_float+0xb6>
 800b49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b49e:	4631      	mov	r1, r6
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	47b8      	blx	r7
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	f43f ae70 	beq.w	800b18a <_printf_float+0xb6>
 800b4aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4b6:	f7f5 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4ba:	b9c0      	cbnz	r0, 800b4ee <_printf_float+0x41a>
 800b4bc:	4653      	mov	r3, sl
 800b4be:	f108 0201 	add.w	r2, r8, #1
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b8      	blx	r7
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d10c      	bne.n	800b4e6 <_printf_float+0x412>
 800b4cc:	e65d      	b.n	800b18a <_printf_float+0xb6>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	465a      	mov	r2, fp
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f43f ae56 	beq.w	800b18a <_printf_float+0xb6>
 800b4de:	f108 0801 	add.w	r8, r8, #1
 800b4e2:	45d0      	cmp	r8, sl
 800b4e4:	dbf3      	blt.n	800b4ce <_printf_float+0x3fa>
 800b4e6:	464b      	mov	r3, r9
 800b4e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4ec:	e6df      	b.n	800b2ae <_printf_float+0x1da>
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	f104 0b1a 	add.w	fp, r4, #26
 800b4f6:	e7f4      	b.n	800b4e2 <_printf_float+0x40e>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4642      	mov	r2, r8
 800b4fc:	e7e1      	b.n	800b4c2 <_printf_float+0x3ee>
 800b4fe:	2301      	movs	r3, #1
 800b500:	464a      	mov	r2, r9
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f ae3e 	beq.w	800b18a <_printf_float+0xb6>
 800b50e:	f108 0801 	add.w	r8, r8, #1
 800b512:	68e3      	ldr	r3, [r4, #12]
 800b514:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b516:	1a5b      	subs	r3, r3, r1
 800b518:	4543      	cmp	r3, r8
 800b51a:	dcf0      	bgt.n	800b4fe <_printf_float+0x42a>
 800b51c:	e6fc      	b.n	800b318 <_printf_float+0x244>
 800b51e:	f04f 0800 	mov.w	r8, #0
 800b522:	f104 0919 	add.w	r9, r4, #25
 800b526:	e7f4      	b.n	800b512 <_printf_float+0x43e>

0800b528 <_printf_common>:
 800b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	4616      	mov	r6, r2
 800b52e:	4698      	mov	r8, r3
 800b530:	688a      	ldr	r2, [r1, #8]
 800b532:	690b      	ldr	r3, [r1, #16]
 800b534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b538:	4293      	cmp	r3, r2
 800b53a:	bfb8      	it	lt
 800b53c:	4613      	movlt	r3, r2
 800b53e:	6033      	str	r3, [r6, #0]
 800b540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b544:	4607      	mov	r7, r0
 800b546:	460c      	mov	r4, r1
 800b548:	b10a      	cbz	r2, 800b54e <_printf_common+0x26>
 800b54a:	3301      	adds	r3, #1
 800b54c:	6033      	str	r3, [r6, #0]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	0699      	lsls	r1, r3, #26
 800b552:	bf42      	ittt	mi
 800b554:	6833      	ldrmi	r3, [r6, #0]
 800b556:	3302      	addmi	r3, #2
 800b558:	6033      	strmi	r3, [r6, #0]
 800b55a:	6825      	ldr	r5, [r4, #0]
 800b55c:	f015 0506 	ands.w	r5, r5, #6
 800b560:	d106      	bne.n	800b570 <_printf_common+0x48>
 800b562:	f104 0a19 	add.w	sl, r4, #25
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	6832      	ldr	r2, [r6, #0]
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	42ab      	cmp	r3, r5
 800b56e:	dc26      	bgt.n	800b5be <_printf_common+0x96>
 800b570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	3b00      	subs	r3, #0
 800b578:	bf18      	it	ne
 800b57a:	2301      	movne	r3, #1
 800b57c:	0692      	lsls	r2, r2, #26
 800b57e:	d42b      	bmi.n	800b5d8 <_printf_common+0xb0>
 800b580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b584:	4641      	mov	r1, r8
 800b586:	4638      	mov	r0, r7
 800b588:	47c8      	blx	r9
 800b58a:	3001      	adds	r0, #1
 800b58c:	d01e      	beq.n	800b5cc <_printf_common+0xa4>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	6922      	ldr	r2, [r4, #16]
 800b592:	f003 0306 	and.w	r3, r3, #6
 800b596:	2b04      	cmp	r3, #4
 800b598:	bf02      	ittt	eq
 800b59a:	68e5      	ldreq	r5, [r4, #12]
 800b59c:	6833      	ldreq	r3, [r6, #0]
 800b59e:	1aed      	subeq	r5, r5, r3
 800b5a0:	68a3      	ldr	r3, [r4, #8]
 800b5a2:	bf0c      	ite	eq
 800b5a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5a8:	2500      	movne	r5, #0
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	bfc4      	itt	gt
 800b5ae:	1a9b      	subgt	r3, r3, r2
 800b5b0:	18ed      	addgt	r5, r5, r3
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	341a      	adds	r4, #26
 800b5b6:	42b5      	cmp	r5, r6
 800b5b8:	d11a      	bne.n	800b5f0 <_printf_common+0xc8>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e008      	b.n	800b5d0 <_printf_common+0xa8>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4652      	mov	r2, sl
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	47c8      	blx	r9
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d103      	bne.n	800b5d4 <_printf_common+0xac>
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	e7c6      	b.n	800b566 <_printf_common+0x3e>
 800b5d8:	18e1      	adds	r1, r4, r3
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	2030      	movs	r0, #48	@ 0x30
 800b5de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5e2:	4422      	add	r2, r4
 800b5e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5ec:	3302      	adds	r3, #2
 800b5ee:	e7c7      	b.n	800b580 <_printf_common+0x58>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	47c8      	blx	r9
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d0e6      	beq.n	800b5cc <_printf_common+0xa4>
 800b5fe:	3601      	adds	r6, #1
 800b600:	e7d9      	b.n	800b5b6 <_printf_common+0x8e>
	...

0800b604 <_printf_i>:
 800b604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b608:	7e0f      	ldrb	r7, [r1, #24]
 800b60a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b60c:	2f78      	cmp	r7, #120	@ 0x78
 800b60e:	4691      	mov	r9, r2
 800b610:	4680      	mov	r8, r0
 800b612:	460c      	mov	r4, r1
 800b614:	469a      	mov	sl, r3
 800b616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b61a:	d807      	bhi.n	800b62c <_printf_i+0x28>
 800b61c:	2f62      	cmp	r7, #98	@ 0x62
 800b61e:	d80a      	bhi.n	800b636 <_printf_i+0x32>
 800b620:	2f00      	cmp	r7, #0
 800b622:	f000 80d2 	beq.w	800b7ca <_printf_i+0x1c6>
 800b626:	2f58      	cmp	r7, #88	@ 0x58
 800b628:	f000 80b9 	beq.w	800b79e <_printf_i+0x19a>
 800b62c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b634:	e03a      	b.n	800b6ac <_printf_i+0xa8>
 800b636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b63a:	2b15      	cmp	r3, #21
 800b63c:	d8f6      	bhi.n	800b62c <_printf_i+0x28>
 800b63e:	a101      	add	r1, pc, #4	@ (adr r1, 800b644 <_printf_i+0x40>)
 800b640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b644:	0800b69d 	.word	0x0800b69d
 800b648:	0800b6b1 	.word	0x0800b6b1
 800b64c:	0800b62d 	.word	0x0800b62d
 800b650:	0800b62d 	.word	0x0800b62d
 800b654:	0800b62d 	.word	0x0800b62d
 800b658:	0800b62d 	.word	0x0800b62d
 800b65c:	0800b6b1 	.word	0x0800b6b1
 800b660:	0800b62d 	.word	0x0800b62d
 800b664:	0800b62d 	.word	0x0800b62d
 800b668:	0800b62d 	.word	0x0800b62d
 800b66c:	0800b62d 	.word	0x0800b62d
 800b670:	0800b7b1 	.word	0x0800b7b1
 800b674:	0800b6db 	.word	0x0800b6db
 800b678:	0800b76b 	.word	0x0800b76b
 800b67c:	0800b62d 	.word	0x0800b62d
 800b680:	0800b62d 	.word	0x0800b62d
 800b684:	0800b7d3 	.word	0x0800b7d3
 800b688:	0800b62d 	.word	0x0800b62d
 800b68c:	0800b6db 	.word	0x0800b6db
 800b690:	0800b62d 	.word	0x0800b62d
 800b694:	0800b62d 	.word	0x0800b62d
 800b698:	0800b773 	.word	0x0800b773
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	1d1a      	adds	r2, r3, #4
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6032      	str	r2, [r6, #0]
 800b6a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e09d      	b.n	800b7ec <_printf_i+0x1e8>
 800b6b0:	6833      	ldr	r3, [r6, #0]
 800b6b2:	6820      	ldr	r0, [r4, #0]
 800b6b4:	1d19      	adds	r1, r3, #4
 800b6b6:	6031      	str	r1, [r6, #0]
 800b6b8:	0606      	lsls	r6, r0, #24
 800b6ba:	d501      	bpl.n	800b6c0 <_printf_i+0xbc>
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	e003      	b.n	800b6c8 <_printf_i+0xc4>
 800b6c0:	0645      	lsls	r5, r0, #25
 800b6c2:	d5fb      	bpl.n	800b6bc <_printf_i+0xb8>
 800b6c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	da03      	bge.n	800b6d4 <_printf_i+0xd0>
 800b6cc:	232d      	movs	r3, #45	@ 0x2d
 800b6ce:	426d      	negs	r5, r5
 800b6d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6d4:	4859      	ldr	r0, [pc, #356]	@ (800b83c <_printf_i+0x238>)
 800b6d6:	230a      	movs	r3, #10
 800b6d8:	e011      	b.n	800b6fe <_printf_i+0xfa>
 800b6da:	6821      	ldr	r1, [r4, #0]
 800b6dc:	6833      	ldr	r3, [r6, #0]
 800b6de:	0608      	lsls	r0, r1, #24
 800b6e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6e4:	d402      	bmi.n	800b6ec <_printf_i+0xe8>
 800b6e6:	0649      	lsls	r1, r1, #25
 800b6e8:	bf48      	it	mi
 800b6ea:	b2ad      	uxthmi	r5, r5
 800b6ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6ee:	4853      	ldr	r0, [pc, #332]	@ (800b83c <_printf_i+0x238>)
 800b6f0:	6033      	str	r3, [r6, #0]
 800b6f2:	bf14      	ite	ne
 800b6f4:	230a      	movne	r3, #10
 800b6f6:	2308      	moveq	r3, #8
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6fe:	6866      	ldr	r6, [r4, #4]
 800b700:	60a6      	str	r6, [r4, #8]
 800b702:	2e00      	cmp	r6, #0
 800b704:	bfa2      	ittt	ge
 800b706:	6821      	ldrge	r1, [r4, #0]
 800b708:	f021 0104 	bicge.w	r1, r1, #4
 800b70c:	6021      	strge	r1, [r4, #0]
 800b70e:	b90d      	cbnz	r5, 800b714 <_printf_i+0x110>
 800b710:	2e00      	cmp	r6, #0
 800b712:	d04b      	beq.n	800b7ac <_printf_i+0x1a8>
 800b714:	4616      	mov	r6, r2
 800b716:	fbb5 f1f3 	udiv	r1, r5, r3
 800b71a:	fb03 5711 	mls	r7, r3, r1, r5
 800b71e:	5dc7      	ldrb	r7, [r0, r7]
 800b720:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b724:	462f      	mov	r7, r5
 800b726:	42bb      	cmp	r3, r7
 800b728:	460d      	mov	r5, r1
 800b72a:	d9f4      	bls.n	800b716 <_printf_i+0x112>
 800b72c:	2b08      	cmp	r3, #8
 800b72e:	d10b      	bne.n	800b748 <_printf_i+0x144>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	07df      	lsls	r7, r3, #31
 800b734:	d508      	bpl.n	800b748 <_printf_i+0x144>
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	6861      	ldr	r1, [r4, #4]
 800b73a:	4299      	cmp	r1, r3
 800b73c:	bfde      	ittt	le
 800b73e:	2330      	movle	r3, #48	@ 0x30
 800b740:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b744:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b748:	1b92      	subs	r2, r2, r6
 800b74a:	6122      	str	r2, [r4, #16]
 800b74c:	f8cd a000 	str.w	sl, [sp]
 800b750:	464b      	mov	r3, r9
 800b752:	aa03      	add	r2, sp, #12
 800b754:	4621      	mov	r1, r4
 800b756:	4640      	mov	r0, r8
 800b758:	f7ff fee6 	bl	800b528 <_printf_common>
 800b75c:	3001      	adds	r0, #1
 800b75e:	d14a      	bne.n	800b7f6 <_printf_i+0x1f2>
 800b760:	f04f 30ff 	mov.w	r0, #4294967295
 800b764:	b004      	add	sp, #16
 800b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	f043 0320 	orr.w	r3, r3, #32
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	4833      	ldr	r0, [pc, #204]	@ (800b840 <_printf_i+0x23c>)
 800b774:	2778      	movs	r7, #120	@ 0x78
 800b776:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	6831      	ldr	r1, [r6, #0]
 800b77e:	061f      	lsls	r7, r3, #24
 800b780:	f851 5b04 	ldr.w	r5, [r1], #4
 800b784:	d402      	bmi.n	800b78c <_printf_i+0x188>
 800b786:	065f      	lsls	r7, r3, #25
 800b788:	bf48      	it	mi
 800b78a:	b2ad      	uxthmi	r5, r5
 800b78c:	6031      	str	r1, [r6, #0]
 800b78e:	07d9      	lsls	r1, r3, #31
 800b790:	bf44      	itt	mi
 800b792:	f043 0320 	orrmi.w	r3, r3, #32
 800b796:	6023      	strmi	r3, [r4, #0]
 800b798:	b11d      	cbz	r5, 800b7a2 <_printf_i+0x19e>
 800b79a:	2310      	movs	r3, #16
 800b79c:	e7ac      	b.n	800b6f8 <_printf_i+0xf4>
 800b79e:	4827      	ldr	r0, [pc, #156]	@ (800b83c <_printf_i+0x238>)
 800b7a0:	e7e9      	b.n	800b776 <_printf_i+0x172>
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	f023 0320 	bic.w	r3, r3, #32
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	e7f6      	b.n	800b79a <_printf_i+0x196>
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	e7bd      	b.n	800b72c <_printf_i+0x128>
 800b7b0:	6833      	ldr	r3, [r6, #0]
 800b7b2:	6825      	ldr	r5, [r4, #0]
 800b7b4:	6961      	ldr	r1, [r4, #20]
 800b7b6:	1d18      	adds	r0, r3, #4
 800b7b8:	6030      	str	r0, [r6, #0]
 800b7ba:	062e      	lsls	r6, r5, #24
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	d501      	bpl.n	800b7c4 <_printf_i+0x1c0>
 800b7c0:	6019      	str	r1, [r3, #0]
 800b7c2:	e002      	b.n	800b7ca <_printf_i+0x1c6>
 800b7c4:	0668      	lsls	r0, r5, #25
 800b7c6:	d5fb      	bpl.n	800b7c0 <_printf_i+0x1bc>
 800b7c8:	8019      	strh	r1, [r3, #0]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6123      	str	r3, [r4, #16]
 800b7ce:	4616      	mov	r6, r2
 800b7d0:	e7bc      	b.n	800b74c <_printf_i+0x148>
 800b7d2:	6833      	ldr	r3, [r6, #0]
 800b7d4:	1d1a      	adds	r2, r3, #4
 800b7d6:	6032      	str	r2, [r6, #0]
 800b7d8:	681e      	ldr	r6, [r3, #0]
 800b7da:	6862      	ldr	r2, [r4, #4]
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7f4 fcf6 	bl	80001d0 <memchr>
 800b7e4:	b108      	cbz	r0, 800b7ea <_printf_i+0x1e6>
 800b7e6:	1b80      	subs	r0, r0, r6
 800b7e8:	6060      	str	r0, [r4, #4]
 800b7ea:	6863      	ldr	r3, [r4, #4]
 800b7ec:	6123      	str	r3, [r4, #16]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7f4:	e7aa      	b.n	800b74c <_printf_i+0x148>
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	47d0      	blx	sl
 800b800:	3001      	adds	r0, #1
 800b802:	d0ad      	beq.n	800b760 <_printf_i+0x15c>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	079b      	lsls	r3, r3, #30
 800b808:	d413      	bmi.n	800b832 <_printf_i+0x22e>
 800b80a:	68e0      	ldr	r0, [r4, #12]
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	4298      	cmp	r0, r3
 800b810:	bfb8      	it	lt
 800b812:	4618      	movlt	r0, r3
 800b814:	e7a6      	b.n	800b764 <_printf_i+0x160>
 800b816:	2301      	movs	r3, #1
 800b818:	4632      	mov	r2, r6
 800b81a:	4649      	mov	r1, r9
 800b81c:	4640      	mov	r0, r8
 800b81e:	47d0      	blx	sl
 800b820:	3001      	adds	r0, #1
 800b822:	d09d      	beq.n	800b760 <_printf_i+0x15c>
 800b824:	3501      	adds	r5, #1
 800b826:	68e3      	ldr	r3, [r4, #12]
 800b828:	9903      	ldr	r1, [sp, #12]
 800b82a:	1a5b      	subs	r3, r3, r1
 800b82c:	42ab      	cmp	r3, r5
 800b82e:	dcf2      	bgt.n	800b816 <_printf_i+0x212>
 800b830:	e7eb      	b.n	800b80a <_printf_i+0x206>
 800b832:	2500      	movs	r5, #0
 800b834:	f104 0619 	add.w	r6, r4, #25
 800b838:	e7f5      	b.n	800b826 <_printf_i+0x222>
 800b83a:	bf00      	nop
 800b83c:	0800ff4a 	.word	0x0800ff4a
 800b840:	0800ff5b 	.word	0x0800ff5b

0800b844 <_scanf_float>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	b087      	sub	sp, #28
 800b84a:	4617      	mov	r7, r2
 800b84c:	9303      	str	r3, [sp, #12]
 800b84e:	688b      	ldr	r3, [r1, #8]
 800b850:	1e5a      	subs	r2, r3, #1
 800b852:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b856:	bf81      	itttt	hi
 800b858:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b85c:	eb03 0b05 	addhi.w	fp, r3, r5
 800b860:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b864:	608b      	strhi	r3, [r1, #8]
 800b866:	680b      	ldr	r3, [r1, #0]
 800b868:	460a      	mov	r2, r1
 800b86a:	f04f 0500 	mov.w	r5, #0
 800b86e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b872:	f842 3b1c 	str.w	r3, [r2], #28
 800b876:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b87a:	4680      	mov	r8, r0
 800b87c:	460c      	mov	r4, r1
 800b87e:	bf98      	it	ls
 800b880:	f04f 0b00 	movls.w	fp, #0
 800b884:	9201      	str	r2, [sp, #4]
 800b886:	4616      	mov	r6, r2
 800b888:	46aa      	mov	sl, r5
 800b88a:	46a9      	mov	r9, r5
 800b88c:	9502      	str	r5, [sp, #8]
 800b88e:	68a2      	ldr	r2, [r4, #8]
 800b890:	b152      	cbz	r2, 800b8a8 <_scanf_float+0x64>
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b4e      	cmp	r3, #78	@ 0x4e
 800b898:	d864      	bhi.n	800b964 <_scanf_float+0x120>
 800b89a:	2b40      	cmp	r3, #64	@ 0x40
 800b89c:	d83c      	bhi.n	800b918 <_scanf_float+0xd4>
 800b89e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b8a2:	b2c8      	uxtb	r0, r1
 800b8a4:	280e      	cmp	r0, #14
 800b8a6:	d93a      	bls.n	800b91e <_scanf_float+0xda>
 800b8a8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ac:	d003      	beq.n	800b8b6 <_scanf_float+0x72>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8ba:	f1ba 0f01 	cmp.w	sl, #1
 800b8be:	f200 8117 	bhi.w	800baf0 <_scanf_float+0x2ac>
 800b8c2:	9b01      	ldr	r3, [sp, #4]
 800b8c4:	429e      	cmp	r6, r3
 800b8c6:	f200 8108 	bhi.w	800bada <_scanf_float+0x296>
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	b007      	add	sp, #28
 800b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b8d6:	2a0d      	cmp	r2, #13
 800b8d8:	d8e6      	bhi.n	800b8a8 <_scanf_float+0x64>
 800b8da:	a101      	add	r1, pc, #4	@ (adr r1, 800b8e0 <_scanf_float+0x9c>)
 800b8dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b8e0:	0800ba27 	.word	0x0800ba27
 800b8e4:	0800b8a9 	.word	0x0800b8a9
 800b8e8:	0800b8a9 	.word	0x0800b8a9
 800b8ec:	0800b8a9 	.word	0x0800b8a9
 800b8f0:	0800ba87 	.word	0x0800ba87
 800b8f4:	0800ba5f 	.word	0x0800ba5f
 800b8f8:	0800b8a9 	.word	0x0800b8a9
 800b8fc:	0800b8a9 	.word	0x0800b8a9
 800b900:	0800ba35 	.word	0x0800ba35
 800b904:	0800b8a9 	.word	0x0800b8a9
 800b908:	0800b8a9 	.word	0x0800b8a9
 800b90c:	0800b8a9 	.word	0x0800b8a9
 800b910:	0800b8a9 	.word	0x0800b8a9
 800b914:	0800b9ed 	.word	0x0800b9ed
 800b918:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b91c:	e7db      	b.n	800b8d6 <_scanf_float+0x92>
 800b91e:	290e      	cmp	r1, #14
 800b920:	d8c2      	bhi.n	800b8a8 <_scanf_float+0x64>
 800b922:	a001      	add	r0, pc, #4	@ (adr r0, 800b928 <_scanf_float+0xe4>)
 800b924:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b928:	0800b9dd 	.word	0x0800b9dd
 800b92c:	0800b8a9 	.word	0x0800b8a9
 800b930:	0800b9dd 	.word	0x0800b9dd
 800b934:	0800ba73 	.word	0x0800ba73
 800b938:	0800b8a9 	.word	0x0800b8a9
 800b93c:	0800b985 	.word	0x0800b985
 800b940:	0800b9c3 	.word	0x0800b9c3
 800b944:	0800b9c3 	.word	0x0800b9c3
 800b948:	0800b9c3 	.word	0x0800b9c3
 800b94c:	0800b9c3 	.word	0x0800b9c3
 800b950:	0800b9c3 	.word	0x0800b9c3
 800b954:	0800b9c3 	.word	0x0800b9c3
 800b958:	0800b9c3 	.word	0x0800b9c3
 800b95c:	0800b9c3 	.word	0x0800b9c3
 800b960:	0800b9c3 	.word	0x0800b9c3
 800b964:	2b6e      	cmp	r3, #110	@ 0x6e
 800b966:	d809      	bhi.n	800b97c <_scanf_float+0x138>
 800b968:	2b60      	cmp	r3, #96	@ 0x60
 800b96a:	d8b2      	bhi.n	800b8d2 <_scanf_float+0x8e>
 800b96c:	2b54      	cmp	r3, #84	@ 0x54
 800b96e:	d07b      	beq.n	800ba68 <_scanf_float+0x224>
 800b970:	2b59      	cmp	r3, #89	@ 0x59
 800b972:	d199      	bne.n	800b8a8 <_scanf_float+0x64>
 800b974:	2d07      	cmp	r5, #7
 800b976:	d197      	bne.n	800b8a8 <_scanf_float+0x64>
 800b978:	2508      	movs	r5, #8
 800b97a:	e02c      	b.n	800b9d6 <_scanf_float+0x192>
 800b97c:	2b74      	cmp	r3, #116	@ 0x74
 800b97e:	d073      	beq.n	800ba68 <_scanf_float+0x224>
 800b980:	2b79      	cmp	r3, #121	@ 0x79
 800b982:	e7f6      	b.n	800b972 <_scanf_float+0x12e>
 800b984:	6821      	ldr	r1, [r4, #0]
 800b986:	05c8      	lsls	r0, r1, #23
 800b988:	d51b      	bpl.n	800b9c2 <_scanf_float+0x17e>
 800b98a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b98e:	6021      	str	r1, [r4, #0]
 800b990:	f109 0901 	add.w	r9, r9, #1
 800b994:	f1bb 0f00 	cmp.w	fp, #0
 800b998:	d003      	beq.n	800b9a2 <_scanf_float+0x15e>
 800b99a:	3201      	adds	r2, #1
 800b99c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b9a0:	60a2      	str	r2, [r4, #8]
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	60a3      	str	r3, [r4, #8]
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	6123      	str	r3, [r4, #16]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	f340 8087 	ble.w	800bac8 <_scanf_float+0x284>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	e765      	b.n	800b88e <_scanf_float+0x4a>
 800b9c2:	eb1a 0105 	adds.w	r1, sl, r5
 800b9c6:	f47f af6f 	bne.w	800b8a8 <_scanf_float+0x64>
 800b9ca:	6822      	ldr	r2, [r4, #0]
 800b9cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b9d0:	6022      	str	r2, [r4, #0]
 800b9d2:	460d      	mov	r5, r1
 800b9d4:	468a      	mov	sl, r1
 800b9d6:	f806 3b01 	strb.w	r3, [r6], #1
 800b9da:	e7e2      	b.n	800b9a2 <_scanf_float+0x15e>
 800b9dc:	6822      	ldr	r2, [r4, #0]
 800b9de:	0610      	lsls	r0, r2, #24
 800b9e0:	f57f af62 	bpl.w	800b8a8 <_scanf_float+0x64>
 800b9e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9e8:	6022      	str	r2, [r4, #0]
 800b9ea:	e7f4      	b.n	800b9d6 <_scanf_float+0x192>
 800b9ec:	f1ba 0f00 	cmp.w	sl, #0
 800b9f0:	d10e      	bne.n	800ba10 <_scanf_float+0x1cc>
 800b9f2:	f1b9 0f00 	cmp.w	r9, #0
 800b9f6:	d10e      	bne.n	800ba16 <_scanf_float+0x1d2>
 800b9f8:	6822      	ldr	r2, [r4, #0]
 800b9fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b9fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba02:	d108      	bne.n	800ba16 <_scanf_float+0x1d2>
 800ba04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba08:	6022      	str	r2, [r4, #0]
 800ba0a:	f04f 0a01 	mov.w	sl, #1
 800ba0e:	e7e2      	b.n	800b9d6 <_scanf_float+0x192>
 800ba10:	f1ba 0f02 	cmp.w	sl, #2
 800ba14:	d055      	beq.n	800bac2 <_scanf_float+0x27e>
 800ba16:	2d01      	cmp	r5, #1
 800ba18:	d002      	beq.n	800ba20 <_scanf_float+0x1dc>
 800ba1a:	2d04      	cmp	r5, #4
 800ba1c:	f47f af44 	bne.w	800b8a8 <_scanf_float+0x64>
 800ba20:	3501      	adds	r5, #1
 800ba22:	b2ed      	uxtb	r5, r5
 800ba24:	e7d7      	b.n	800b9d6 <_scanf_float+0x192>
 800ba26:	f1ba 0f01 	cmp.w	sl, #1
 800ba2a:	f47f af3d 	bne.w	800b8a8 <_scanf_float+0x64>
 800ba2e:	f04f 0a02 	mov.w	sl, #2
 800ba32:	e7d0      	b.n	800b9d6 <_scanf_float+0x192>
 800ba34:	b97d      	cbnz	r5, 800ba56 <_scanf_float+0x212>
 800ba36:	f1b9 0f00 	cmp.w	r9, #0
 800ba3a:	f47f af38 	bne.w	800b8ae <_scanf_float+0x6a>
 800ba3e:	6822      	ldr	r2, [r4, #0]
 800ba40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba48:	f040 8108 	bne.w	800bc5c <_scanf_float+0x418>
 800ba4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba50:	6022      	str	r2, [r4, #0]
 800ba52:	2501      	movs	r5, #1
 800ba54:	e7bf      	b.n	800b9d6 <_scanf_float+0x192>
 800ba56:	2d03      	cmp	r5, #3
 800ba58:	d0e2      	beq.n	800ba20 <_scanf_float+0x1dc>
 800ba5a:	2d05      	cmp	r5, #5
 800ba5c:	e7de      	b.n	800ba1c <_scanf_float+0x1d8>
 800ba5e:	2d02      	cmp	r5, #2
 800ba60:	f47f af22 	bne.w	800b8a8 <_scanf_float+0x64>
 800ba64:	2503      	movs	r5, #3
 800ba66:	e7b6      	b.n	800b9d6 <_scanf_float+0x192>
 800ba68:	2d06      	cmp	r5, #6
 800ba6a:	f47f af1d 	bne.w	800b8a8 <_scanf_float+0x64>
 800ba6e:	2507      	movs	r5, #7
 800ba70:	e7b1      	b.n	800b9d6 <_scanf_float+0x192>
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	0591      	lsls	r1, r2, #22
 800ba76:	f57f af17 	bpl.w	800b8a8 <_scanf_float+0x64>
 800ba7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ba7e:	6022      	str	r2, [r4, #0]
 800ba80:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba84:	e7a7      	b.n	800b9d6 <_scanf_float+0x192>
 800ba86:	6822      	ldr	r2, [r4, #0]
 800ba88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ba8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ba90:	d006      	beq.n	800baa0 <_scanf_float+0x25c>
 800ba92:	0550      	lsls	r0, r2, #21
 800ba94:	f57f af08 	bpl.w	800b8a8 <_scanf_float+0x64>
 800ba98:	f1b9 0f00 	cmp.w	r9, #0
 800ba9c:	f000 80de 	beq.w	800bc5c <_scanf_float+0x418>
 800baa0:	0591      	lsls	r1, r2, #22
 800baa2:	bf58      	it	pl
 800baa4:	9902      	ldrpl	r1, [sp, #8]
 800baa6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800baaa:	bf58      	it	pl
 800baac:	eba9 0101 	subpl.w	r1, r9, r1
 800bab0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bab4:	bf58      	it	pl
 800bab6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800baba:	6022      	str	r2, [r4, #0]
 800babc:	f04f 0900 	mov.w	r9, #0
 800bac0:	e789      	b.n	800b9d6 <_scanf_float+0x192>
 800bac2:	f04f 0a03 	mov.w	sl, #3
 800bac6:	e786      	b.n	800b9d6 <_scanf_float+0x192>
 800bac8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bacc:	4639      	mov	r1, r7
 800bace:	4640      	mov	r0, r8
 800bad0:	4798      	blx	r3
 800bad2:	2800      	cmp	r0, #0
 800bad4:	f43f aedb 	beq.w	800b88e <_scanf_float+0x4a>
 800bad8:	e6e6      	b.n	800b8a8 <_scanf_float+0x64>
 800bada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bae2:	463a      	mov	r2, r7
 800bae4:	4640      	mov	r0, r8
 800bae6:	4798      	blx	r3
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	3b01      	subs	r3, #1
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	e6e8      	b.n	800b8c2 <_scanf_float+0x7e>
 800baf0:	1e6b      	subs	r3, r5, #1
 800baf2:	2b06      	cmp	r3, #6
 800baf4:	d824      	bhi.n	800bb40 <_scanf_float+0x2fc>
 800baf6:	2d02      	cmp	r5, #2
 800baf8:	d836      	bhi.n	800bb68 <_scanf_float+0x324>
 800bafa:	9b01      	ldr	r3, [sp, #4]
 800bafc:	429e      	cmp	r6, r3
 800bafe:	f67f aee4 	bls.w	800b8ca <_scanf_float+0x86>
 800bb02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb0a:	463a      	mov	r2, r7
 800bb0c:	4640      	mov	r0, r8
 800bb0e:	4798      	blx	r3
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	3b01      	subs	r3, #1
 800bb14:	6123      	str	r3, [r4, #16]
 800bb16:	e7f0      	b.n	800bafa <_scanf_float+0x2b6>
 800bb18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bb20:	463a      	mov	r2, r7
 800bb22:	4640      	mov	r0, r8
 800bb24:	4798      	blx	r3
 800bb26:	6923      	ldr	r3, [r4, #16]
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb30:	fa5f fa8a 	uxtb.w	sl, sl
 800bb34:	f1ba 0f02 	cmp.w	sl, #2
 800bb38:	d1ee      	bne.n	800bb18 <_scanf_float+0x2d4>
 800bb3a:	3d03      	subs	r5, #3
 800bb3c:	b2ed      	uxtb	r5, r5
 800bb3e:	1b76      	subs	r6, r6, r5
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	05da      	lsls	r2, r3, #23
 800bb44:	d530      	bpl.n	800bba8 <_scanf_float+0x364>
 800bb46:	055b      	lsls	r3, r3, #21
 800bb48:	d511      	bpl.n	800bb6e <_scanf_float+0x32a>
 800bb4a:	9b01      	ldr	r3, [sp, #4]
 800bb4c:	429e      	cmp	r6, r3
 800bb4e:	f67f aebc 	bls.w	800b8ca <_scanf_float+0x86>
 800bb52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb5a:	463a      	mov	r2, r7
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4798      	blx	r3
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	3b01      	subs	r3, #1
 800bb64:	6123      	str	r3, [r4, #16]
 800bb66:	e7f0      	b.n	800bb4a <_scanf_float+0x306>
 800bb68:	46aa      	mov	sl, r5
 800bb6a:	46b3      	mov	fp, r6
 800bb6c:	e7de      	b.n	800bb2c <_scanf_float+0x2e8>
 800bb6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb72:	6923      	ldr	r3, [r4, #16]
 800bb74:	2965      	cmp	r1, #101	@ 0x65
 800bb76:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb7a:	f106 35ff 	add.w	r5, r6, #4294967295
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	d00c      	beq.n	800bb9c <_scanf_float+0x358>
 800bb82:	2945      	cmp	r1, #69	@ 0x45
 800bb84:	d00a      	beq.n	800bb9c <_scanf_float+0x358>
 800bb86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb8a:	463a      	mov	r2, r7
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	4798      	blx	r3
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	1eb5      	subs	r5, r6, #2
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bba0:	463a      	mov	r2, r7
 800bba2:	4640      	mov	r0, r8
 800bba4:	4798      	blx	r3
 800bba6:	462e      	mov	r6, r5
 800bba8:	6822      	ldr	r2, [r4, #0]
 800bbaa:	f012 0210 	ands.w	r2, r2, #16
 800bbae:	d001      	beq.n	800bbb4 <_scanf_float+0x370>
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	e68b      	b.n	800b8cc <_scanf_float+0x88>
 800bbb4:	7032      	strb	r2, [r6, #0]
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bbbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbc0:	d11c      	bne.n	800bbfc <_scanf_float+0x3b8>
 800bbc2:	9b02      	ldr	r3, [sp, #8]
 800bbc4:	454b      	cmp	r3, r9
 800bbc6:	eba3 0209 	sub.w	r2, r3, r9
 800bbca:	d123      	bne.n	800bc14 <_scanf_float+0x3d0>
 800bbcc:	9901      	ldr	r1, [sp, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	f7ff f975 	bl	800aec0 <_strtod_r>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	6821      	ldr	r1, [r4, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f011 0f02 	tst.w	r1, #2
 800bbe0:	ec57 6b10 	vmov	r6, r7, d0
 800bbe4:	f103 0204 	add.w	r2, r3, #4
 800bbe8:	d01f      	beq.n	800bc2a <_scanf_float+0x3e6>
 800bbea:	9903      	ldr	r1, [sp, #12]
 800bbec:	600a      	str	r2, [r1, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	e9c3 6700 	strd	r6, r7, [r3]
 800bbf4:	68e3      	ldr	r3, [r4, #12]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	60e3      	str	r3, [r4, #12]
 800bbfa:	e7d9      	b.n	800bbb0 <_scanf_float+0x36c>
 800bbfc:	9b04      	ldr	r3, [sp, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0e4      	beq.n	800bbcc <_scanf_float+0x388>
 800bc02:	9905      	ldr	r1, [sp, #20]
 800bc04:	230a      	movs	r3, #10
 800bc06:	3101      	adds	r1, #1
 800bc08:	4640      	mov	r0, r8
 800bc0a:	f002 f9dd 	bl	800dfc8 <_strtol_r>
 800bc0e:	9b04      	ldr	r3, [sp, #16]
 800bc10:	9e05      	ldr	r6, [sp, #20]
 800bc12:	1ac2      	subs	r2, r0, r3
 800bc14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bc18:	429e      	cmp	r6, r3
 800bc1a:	bf28      	it	cs
 800bc1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bc20:	4910      	ldr	r1, [pc, #64]	@ (800bc64 <_scanf_float+0x420>)
 800bc22:	4630      	mov	r0, r6
 800bc24:	f000 f8f6 	bl	800be14 <siprintf>
 800bc28:	e7d0      	b.n	800bbcc <_scanf_float+0x388>
 800bc2a:	f011 0f04 	tst.w	r1, #4
 800bc2e:	9903      	ldr	r1, [sp, #12]
 800bc30:	600a      	str	r2, [r1, #0]
 800bc32:	d1dc      	bne.n	800bbee <_scanf_float+0x3aa>
 800bc34:	681d      	ldr	r5, [r3, #0]
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 ff75 	bl	8000b2c <__aeabi_dcmpun>
 800bc42:	b128      	cbz	r0, 800bc50 <_scanf_float+0x40c>
 800bc44:	4808      	ldr	r0, [pc, #32]	@ (800bc68 <_scanf_float+0x424>)
 800bc46:	f000 f9f3 	bl	800c030 <nanf>
 800bc4a:	ed85 0a00 	vstr	s0, [r5]
 800bc4e:	e7d1      	b.n	800bbf4 <_scanf_float+0x3b0>
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 ffc8 	bl	8000be8 <__aeabi_d2f>
 800bc58:	6028      	str	r0, [r5, #0]
 800bc5a:	e7cb      	b.n	800bbf4 <_scanf_float+0x3b0>
 800bc5c:	f04f 0900 	mov.w	r9, #0
 800bc60:	e629      	b.n	800b8b6 <_scanf_float+0x72>
 800bc62:	bf00      	nop
 800bc64:	0800ff6c 	.word	0x0800ff6c
 800bc68:	0801030d 	.word	0x0801030d

0800bc6c <std>:
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	b510      	push	{r4, lr}
 800bc70:	4604      	mov	r4, r0
 800bc72:	e9c0 3300 	strd	r3, r3, [r0]
 800bc76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc7a:	6083      	str	r3, [r0, #8]
 800bc7c:	8181      	strh	r1, [r0, #12]
 800bc7e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc80:	81c2      	strh	r2, [r0, #14]
 800bc82:	6183      	str	r3, [r0, #24]
 800bc84:	4619      	mov	r1, r3
 800bc86:	2208      	movs	r2, #8
 800bc88:	305c      	adds	r0, #92	@ 0x5c
 800bc8a:	f000 f926 	bl	800beda <memset>
 800bc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc4 <std+0x58>)
 800bc90:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc92:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc8 <std+0x5c>)
 800bc94:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc96:	4b0d      	ldr	r3, [pc, #52]	@ (800bccc <std+0x60>)
 800bc98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd0 <std+0x64>)
 800bc9c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd4 <std+0x68>)
 800bca0:	6224      	str	r4, [r4, #32]
 800bca2:	429c      	cmp	r4, r3
 800bca4:	d006      	beq.n	800bcb4 <std+0x48>
 800bca6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bcaa:	4294      	cmp	r4, r2
 800bcac:	d002      	beq.n	800bcb4 <std+0x48>
 800bcae:	33d0      	adds	r3, #208	@ 0xd0
 800bcb0:	429c      	cmp	r4, r3
 800bcb2:	d105      	bne.n	800bcc0 <std+0x54>
 800bcb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcbc:	f000 b99c 	b.w	800bff8 <__retarget_lock_init_recursive>
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	bf00      	nop
 800bcc4:	0800be55 	.word	0x0800be55
 800bcc8:	0800be77 	.word	0x0800be77
 800bccc:	0800beaf 	.word	0x0800beaf
 800bcd0:	0800bed3 	.word	0x0800bed3
 800bcd4:	20000aa4 	.word	0x20000aa4

0800bcd8 <stdio_exit_handler>:
 800bcd8:	4a02      	ldr	r2, [pc, #8]	@ (800bce4 <stdio_exit_handler+0xc>)
 800bcda:	4903      	ldr	r1, [pc, #12]	@ (800bce8 <stdio_exit_handler+0x10>)
 800bcdc:	4803      	ldr	r0, [pc, #12]	@ (800bcec <stdio_exit_handler+0x14>)
 800bcde:	f000 b869 	b.w	800bdb4 <_fwalk_sglue>
 800bce2:	bf00      	nop
 800bce4:	20000044 	.word	0x20000044
 800bce8:	0800e621 	.word	0x0800e621
 800bcec:	200001c0 	.word	0x200001c0

0800bcf0 <cleanup_stdio>:
 800bcf0:	6841      	ldr	r1, [r0, #4]
 800bcf2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd24 <cleanup_stdio+0x34>)
 800bcf4:	4299      	cmp	r1, r3
 800bcf6:	b510      	push	{r4, lr}
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	d001      	beq.n	800bd00 <cleanup_stdio+0x10>
 800bcfc:	f002 fc90 	bl	800e620 <_fflush_r>
 800bd00:	68a1      	ldr	r1, [r4, #8]
 800bd02:	4b09      	ldr	r3, [pc, #36]	@ (800bd28 <cleanup_stdio+0x38>)
 800bd04:	4299      	cmp	r1, r3
 800bd06:	d002      	beq.n	800bd0e <cleanup_stdio+0x1e>
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f002 fc89 	bl	800e620 <_fflush_r>
 800bd0e:	68e1      	ldr	r1, [r4, #12]
 800bd10:	4b06      	ldr	r3, [pc, #24]	@ (800bd2c <cleanup_stdio+0x3c>)
 800bd12:	4299      	cmp	r1, r3
 800bd14:	d004      	beq.n	800bd20 <cleanup_stdio+0x30>
 800bd16:	4620      	mov	r0, r4
 800bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd1c:	f002 bc80 	b.w	800e620 <_fflush_r>
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	bf00      	nop
 800bd24:	20000aa4 	.word	0x20000aa4
 800bd28:	20000b0c 	.word	0x20000b0c
 800bd2c:	20000b74 	.word	0x20000b74

0800bd30 <global_stdio_init.part.0>:
 800bd30:	b510      	push	{r4, lr}
 800bd32:	4b0b      	ldr	r3, [pc, #44]	@ (800bd60 <global_stdio_init.part.0+0x30>)
 800bd34:	4c0b      	ldr	r4, [pc, #44]	@ (800bd64 <global_stdio_init.part.0+0x34>)
 800bd36:	4a0c      	ldr	r2, [pc, #48]	@ (800bd68 <global_stdio_init.part.0+0x38>)
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2104      	movs	r1, #4
 800bd40:	f7ff ff94 	bl	800bc6c <std>
 800bd44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd48:	2201      	movs	r2, #1
 800bd4a:	2109      	movs	r1, #9
 800bd4c:	f7ff ff8e 	bl	800bc6c <std>
 800bd50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd54:	2202      	movs	r2, #2
 800bd56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd5a:	2112      	movs	r1, #18
 800bd5c:	f7ff bf86 	b.w	800bc6c <std>
 800bd60:	20000bdc 	.word	0x20000bdc
 800bd64:	20000aa4 	.word	0x20000aa4
 800bd68:	0800bcd9 	.word	0x0800bcd9

0800bd6c <__sfp_lock_acquire>:
 800bd6c:	4801      	ldr	r0, [pc, #4]	@ (800bd74 <__sfp_lock_acquire+0x8>)
 800bd6e:	f000 b944 	b.w	800bffa <__retarget_lock_acquire_recursive>
 800bd72:	bf00      	nop
 800bd74:	20000be5 	.word	0x20000be5

0800bd78 <__sfp_lock_release>:
 800bd78:	4801      	ldr	r0, [pc, #4]	@ (800bd80 <__sfp_lock_release+0x8>)
 800bd7a:	f000 b93f 	b.w	800bffc <__retarget_lock_release_recursive>
 800bd7e:	bf00      	nop
 800bd80:	20000be5 	.word	0x20000be5

0800bd84 <__sinit>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	4604      	mov	r4, r0
 800bd88:	f7ff fff0 	bl	800bd6c <__sfp_lock_acquire>
 800bd8c:	6a23      	ldr	r3, [r4, #32]
 800bd8e:	b11b      	cbz	r3, 800bd98 <__sinit+0x14>
 800bd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd94:	f7ff bff0 	b.w	800bd78 <__sfp_lock_release>
 800bd98:	4b04      	ldr	r3, [pc, #16]	@ (800bdac <__sinit+0x28>)
 800bd9a:	6223      	str	r3, [r4, #32]
 800bd9c:	4b04      	ldr	r3, [pc, #16]	@ (800bdb0 <__sinit+0x2c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1f5      	bne.n	800bd90 <__sinit+0xc>
 800bda4:	f7ff ffc4 	bl	800bd30 <global_stdio_init.part.0>
 800bda8:	e7f2      	b.n	800bd90 <__sinit+0xc>
 800bdaa:	bf00      	nop
 800bdac:	0800bcf1 	.word	0x0800bcf1
 800bdb0:	20000bdc 	.word	0x20000bdc

0800bdb4 <_fwalk_sglue>:
 800bdb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb8:	4607      	mov	r7, r0
 800bdba:	4688      	mov	r8, r1
 800bdbc:	4614      	mov	r4, r2
 800bdbe:	2600      	movs	r6, #0
 800bdc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdc4:	f1b9 0901 	subs.w	r9, r9, #1
 800bdc8:	d505      	bpl.n	800bdd6 <_fwalk_sglue+0x22>
 800bdca:	6824      	ldr	r4, [r4, #0]
 800bdcc:	2c00      	cmp	r4, #0
 800bdce:	d1f7      	bne.n	800bdc0 <_fwalk_sglue+0xc>
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	89ab      	ldrh	r3, [r5, #12]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d907      	bls.n	800bdec <_fwalk_sglue+0x38>
 800bddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bde0:	3301      	adds	r3, #1
 800bde2:	d003      	beq.n	800bdec <_fwalk_sglue+0x38>
 800bde4:	4629      	mov	r1, r5
 800bde6:	4638      	mov	r0, r7
 800bde8:	47c0      	blx	r8
 800bdea:	4306      	orrs	r6, r0
 800bdec:	3568      	adds	r5, #104	@ 0x68
 800bdee:	e7e9      	b.n	800bdc4 <_fwalk_sglue+0x10>

0800bdf0 <iprintf>:
 800bdf0:	b40f      	push	{r0, r1, r2, r3}
 800bdf2:	b507      	push	{r0, r1, r2, lr}
 800bdf4:	4906      	ldr	r1, [pc, #24]	@ (800be10 <iprintf+0x20>)
 800bdf6:	ab04      	add	r3, sp, #16
 800bdf8:	6808      	ldr	r0, [r1, #0]
 800bdfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdfe:	6881      	ldr	r1, [r0, #8]
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	f002 fa71 	bl	800e2e8 <_vfiprintf_r>
 800be06:	b003      	add	sp, #12
 800be08:	f85d eb04 	ldr.w	lr, [sp], #4
 800be0c:	b004      	add	sp, #16
 800be0e:	4770      	bx	lr
 800be10:	200001bc 	.word	0x200001bc

0800be14 <siprintf>:
 800be14:	b40e      	push	{r1, r2, r3}
 800be16:	b500      	push	{lr}
 800be18:	b09c      	sub	sp, #112	@ 0x70
 800be1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800be1c:	9002      	str	r0, [sp, #8]
 800be1e:	9006      	str	r0, [sp, #24]
 800be20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be24:	4809      	ldr	r0, [pc, #36]	@ (800be4c <siprintf+0x38>)
 800be26:	9107      	str	r1, [sp, #28]
 800be28:	9104      	str	r1, [sp, #16]
 800be2a:	4909      	ldr	r1, [pc, #36]	@ (800be50 <siprintf+0x3c>)
 800be2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be30:	9105      	str	r1, [sp, #20]
 800be32:	6800      	ldr	r0, [r0, #0]
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	a902      	add	r1, sp, #8
 800be38:	f002 f930 	bl	800e09c <_svfiprintf_r>
 800be3c:	9b02      	ldr	r3, [sp, #8]
 800be3e:	2200      	movs	r2, #0
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	b01c      	add	sp, #112	@ 0x70
 800be44:	f85d eb04 	ldr.w	lr, [sp], #4
 800be48:	b003      	add	sp, #12
 800be4a:	4770      	bx	lr
 800be4c:	200001bc 	.word	0x200001bc
 800be50:	ffff0208 	.word	0xffff0208

0800be54 <__sread>:
 800be54:	b510      	push	{r4, lr}
 800be56:	460c      	mov	r4, r1
 800be58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5c:	f000 f87e 	bl	800bf5c <_read_r>
 800be60:	2800      	cmp	r0, #0
 800be62:	bfab      	itete	ge
 800be64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be66:	89a3      	ldrhlt	r3, [r4, #12]
 800be68:	181b      	addge	r3, r3, r0
 800be6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be6e:	bfac      	ite	ge
 800be70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be72:	81a3      	strhlt	r3, [r4, #12]
 800be74:	bd10      	pop	{r4, pc}

0800be76 <__swrite>:
 800be76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7a:	461f      	mov	r7, r3
 800be7c:	898b      	ldrh	r3, [r1, #12]
 800be7e:	05db      	lsls	r3, r3, #23
 800be80:	4605      	mov	r5, r0
 800be82:	460c      	mov	r4, r1
 800be84:	4616      	mov	r6, r2
 800be86:	d505      	bpl.n	800be94 <__swrite+0x1e>
 800be88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be8c:	2302      	movs	r3, #2
 800be8e:	2200      	movs	r2, #0
 800be90:	f000 f852 	bl	800bf38 <_lseek_r>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	4632      	mov	r2, r6
 800bea2:	463b      	mov	r3, r7
 800bea4:	4628      	mov	r0, r5
 800bea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beaa:	f000 b869 	b.w	800bf80 <_write_r>

0800beae <__sseek>:
 800beae:	b510      	push	{r4, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb6:	f000 f83f 	bl	800bf38 <_lseek_r>
 800beba:	1c43      	adds	r3, r0, #1
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	bf15      	itete	ne
 800bec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800beca:	81a3      	strheq	r3, [r4, #12]
 800becc:	bf18      	it	ne
 800bece:	81a3      	strhne	r3, [r4, #12]
 800bed0:	bd10      	pop	{r4, pc}

0800bed2 <__sclose>:
 800bed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed6:	f000 b81f 	b.w	800bf18 <_close_r>

0800beda <memset>:
 800beda:	4402      	add	r2, r0
 800bedc:	4603      	mov	r3, r0
 800bede:	4293      	cmp	r3, r2
 800bee0:	d100      	bne.n	800bee4 <memset+0xa>
 800bee2:	4770      	bx	lr
 800bee4:	f803 1b01 	strb.w	r1, [r3], #1
 800bee8:	e7f9      	b.n	800bede <memset+0x4>

0800beea <strncmp>:
 800beea:	b510      	push	{r4, lr}
 800beec:	b16a      	cbz	r2, 800bf0a <strncmp+0x20>
 800beee:	3901      	subs	r1, #1
 800bef0:	1884      	adds	r4, r0, r2
 800bef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bef6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800befa:	429a      	cmp	r2, r3
 800befc:	d103      	bne.n	800bf06 <strncmp+0x1c>
 800befe:	42a0      	cmp	r0, r4
 800bf00:	d001      	beq.n	800bf06 <strncmp+0x1c>
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d1f5      	bne.n	800bef2 <strncmp+0x8>
 800bf06:	1ad0      	subs	r0, r2, r3
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	e7fc      	b.n	800bf08 <strncmp+0x1e>
	...

0800bf10 <_localeconv_r>:
 800bf10:	4800      	ldr	r0, [pc, #0]	@ (800bf14 <_localeconv_r+0x4>)
 800bf12:	4770      	bx	lr
 800bf14:	20000140 	.word	0x20000140

0800bf18 <_close_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d06      	ldr	r5, [pc, #24]	@ (800bf34 <_close_r+0x1c>)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4608      	mov	r0, r1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	f7f7 f87a 	bl	800301c <_close>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_close_r+0x1a>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_close_r+0x1a>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	20000be0 	.word	0x20000be0

0800bf38 <_lseek_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d07      	ldr	r5, [pc, #28]	@ (800bf58 <_lseek_r+0x20>)
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	4608      	mov	r0, r1
 800bf40:	4611      	mov	r1, r2
 800bf42:	2200      	movs	r2, #0
 800bf44:	602a      	str	r2, [r5, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	f7f7 f88f 	bl	800306a <_lseek>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d102      	bne.n	800bf56 <_lseek_r+0x1e>
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	b103      	cbz	r3, 800bf56 <_lseek_r+0x1e>
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	20000be0 	.word	0x20000be0

0800bf5c <_read_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4d07      	ldr	r5, [pc, #28]	@ (800bf7c <_read_r+0x20>)
 800bf60:	4604      	mov	r4, r0
 800bf62:	4608      	mov	r0, r1
 800bf64:	4611      	mov	r1, r2
 800bf66:	2200      	movs	r2, #0
 800bf68:	602a      	str	r2, [r5, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f7f7 f81d 	bl	8002faa <_read>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_read_r+0x1e>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_read_r+0x1e>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	20000be0 	.word	0x20000be0

0800bf80 <_write_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d07      	ldr	r5, [pc, #28]	@ (800bfa0 <_write_r+0x20>)
 800bf84:	4604      	mov	r4, r0
 800bf86:	4608      	mov	r0, r1
 800bf88:	4611      	mov	r1, r2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	602a      	str	r2, [r5, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7f7 f828 	bl	8002fe4 <_write>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_write_r+0x1e>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_write_r+0x1e>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	20000be0 	.word	0x20000be0

0800bfa4 <__errno>:
 800bfa4:	4b01      	ldr	r3, [pc, #4]	@ (800bfac <__errno+0x8>)
 800bfa6:	6818      	ldr	r0, [r3, #0]
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	200001bc 	.word	0x200001bc

0800bfb0 <__libc_init_array>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	4d0d      	ldr	r5, [pc, #52]	@ (800bfe8 <__libc_init_array+0x38>)
 800bfb4:	4c0d      	ldr	r4, [pc, #52]	@ (800bfec <__libc_init_array+0x3c>)
 800bfb6:	1b64      	subs	r4, r4, r5
 800bfb8:	10a4      	asrs	r4, r4, #2
 800bfba:	2600      	movs	r6, #0
 800bfbc:	42a6      	cmp	r6, r4
 800bfbe:	d109      	bne.n	800bfd4 <__libc_init_array+0x24>
 800bfc0:	4d0b      	ldr	r5, [pc, #44]	@ (800bff0 <__libc_init_array+0x40>)
 800bfc2:	4c0c      	ldr	r4, [pc, #48]	@ (800bff4 <__libc_init_array+0x44>)
 800bfc4:	f003 fe94 	bl	800fcf0 <_init>
 800bfc8:	1b64      	subs	r4, r4, r5
 800bfca:	10a4      	asrs	r4, r4, #2
 800bfcc:	2600      	movs	r6, #0
 800bfce:	42a6      	cmp	r6, r4
 800bfd0:	d105      	bne.n	800bfde <__libc_init_array+0x2e>
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd8:	4798      	blx	r3
 800bfda:	3601      	adds	r6, #1
 800bfdc:	e7ee      	b.n	800bfbc <__libc_init_array+0xc>
 800bfde:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe2:	4798      	blx	r3
 800bfe4:	3601      	adds	r6, #1
 800bfe6:	e7f2      	b.n	800bfce <__libc_init_array+0x1e>
 800bfe8:	080104f0 	.word	0x080104f0
 800bfec:	080104f0 	.word	0x080104f0
 800bff0:	080104f0 	.word	0x080104f0
 800bff4:	080104f4 	.word	0x080104f4

0800bff8 <__retarget_lock_init_recursive>:
 800bff8:	4770      	bx	lr

0800bffa <__retarget_lock_acquire_recursive>:
 800bffa:	4770      	bx	lr

0800bffc <__retarget_lock_release_recursive>:
 800bffc:	4770      	bx	lr

0800bffe <memcpy>:
 800bffe:	440a      	add	r2, r1
 800c000:	4291      	cmp	r1, r2
 800c002:	f100 33ff 	add.w	r3, r0, #4294967295
 800c006:	d100      	bne.n	800c00a <memcpy+0xc>
 800c008:	4770      	bx	lr
 800c00a:	b510      	push	{r4, lr}
 800c00c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c010:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c014:	4291      	cmp	r1, r2
 800c016:	d1f9      	bne.n	800c00c <memcpy+0xe>
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	0000      	movs	r0, r0
 800c01c:	0000      	movs	r0, r0
	...

0800c020 <nan>:
 800c020:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c028 <nan+0x8>
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	00000000 	.word	0x00000000
 800c02c:	7ff80000 	.word	0x7ff80000

0800c030 <nanf>:
 800c030:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c038 <nanf+0x8>
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	7fc00000 	.word	0x7fc00000

0800c03c <quorem>:
 800c03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	6903      	ldr	r3, [r0, #16]
 800c042:	690c      	ldr	r4, [r1, #16]
 800c044:	42a3      	cmp	r3, r4
 800c046:	4607      	mov	r7, r0
 800c048:	db7e      	blt.n	800c148 <quorem+0x10c>
 800c04a:	3c01      	subs	r4, #1
 800c04c:	f101 0814 	add.w	r8, r1, #20
 800c050:	00a3      	lsls	r3, r4, #2
 800c052:	f100 0514 	add.w	r5, r0, #20
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c05c:	9301      	str	r3, [sp, #4]
 800c05e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c066:	3301      	adds	r3, #1
 800c068:	429a      	cmp	r2, r3
 800c06a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c06e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c072:	d32e      	bcc.n	800c0d2 <quorem+0x96>
 800c074:	f04f 0a00 	mov.w	sl, #0
 800c078:	46c4      	mov	ip, r8
 800c07a:	46ae      	mov	lr, r5
 800c07c:	46d3      	mov	fp, sl
 800c07e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c082:	b298      	uxth	r0, r3
 800c084:	fb06 a000 	mla	r0, r6, r0, sl
 800c088:	0c02      	lsrs	r2, r0, #16
 800c08a:	0c1b      	lsrs	r3, r3, #16
 800c08c:	fb06 2303 	mla	r3, r6, r3, r2
 800c090:	f8de 2000 	ldr.w	r2, [lr]
 800c094:	b280      	uxth	r0, r0
 800c096:	b292      	uxth	r2, r2
 800c098:	1a12      	subs	r2, r2, r0
 800c09a:	445a      	add	r2, fp
 800c09c:	f8de 0000 	ldr.w	r0, [lr]
 800c0a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c0aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c0ae:	b292      	uxth	r2, r2
 800c0b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0b4:	45e1      	cmp	r9, ip
 800c0b6:	f84e 2b04 	str.w	r2, [lr], #4
 800c0ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c0be:	d2de      	bcs.n	800c07e <quorem+0x42>
 800c0c0:	9b00      	ldr	r3, [sp, #0]
 800c0c2:	58eb      	ldr	r3, [r5, r3]
 800c0c4:	b92b      	cbnz	r3, 800c0d2 <quorem+0x96>
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	3b04      	subs	r3, #4
 800c0ca:	429d      	cmp	r5, r3
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	d32f      	bcc.n	800c130 <quorem+0xf4>
 800c0d0:	613c      	str	r4, [r7, #16]
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	f001 fd10 	bl	800daf8 <__mcmp>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	db25      	blt.n	800c128 <quorem+0xec>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0e4:	f8d1 c000 	ldr.w	ip, [r1]
 800c0e8:	fa1f fe82 	uxth.w	lr, r2
 800c0ec:	fa1f f38c 	uxth.w	r3, ip
 800c0f0:	eba3 030e 	sub.w	r3, r3, lr
 800c0f4:	4403      	add	r3, r0
 800c0f6:	0c12      	lsrs	r2, r2, #16
 800c0f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c100:	b29b      	uxth	r3, r3
 800c102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c106:	45c1      	cmp	r9, r8
 800c108:	f841 3b04 	str.w	r3, [r1], #4
 800c10c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c110:	d2e6      	bcs.n	800c0e0 <quorem+0xa4>
 800c112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c11a:	b922      	cbnz	r2, 800c126 <quorem+0xea>
 800c11c:	3b04      	subs	r3, #4
 800c11e:	429d      	cmp	r5, r3
 800c120:	461a      	mov	r2, r3
 800c122:	d30b      	bcc.n	800c13c <quorem+0x100>
 800c124:	613c      	str	r4, [r7, #16]
 800c126:	3601      	adds	r6, #1
 800c128:	4630      	mov	r0, r6
 800c12a:	b003      	add	sp, #12
 800c12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c130:	6812      	ldr	r2, [r2, #0]
 800c132:	3b04      	subs	r3, #4
 800c134:	2a00      	cmp	r2, #0
 800c136:	d1cb      	bne.n	800c0d0 <quorem+0x94>
 800c138:	3c01      	subs	r4, #1
 800c13a:	e7c6      	b.n	800c0ca <quorem+0x8e>
 800c13c:	6812      	ldr	r2, [r2, #0]
 800c13e:	3b04      	subs	r3, #4
 800c140:	2a00      	cmp	r2, #0
 800c142:	d1ef      	bne.n	800c124 <quorem+0xe8>
 800c144:	3c01      	subs	r4, #1
 800c146:	e7ea      	b.n	800c11e <quorem+0xe2>
 800c148:	2000      	movs	r0, #0
 800c14a:	e7ee      	b.n	800c12a <quorem+0xee>
 800c14c:	0000      	movs	r0, r0
	...

0800c150 <_dtoa_r>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	69c7      	ldr	r7, [r0, #28]
 800c156:	b099      	sub	sp, #100	@ 0x64
 800c158:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c15c:	ec55 4b10 	vmov	r4, r5, d0
 800c160:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c162:	9109      	str	r1, [sp, #36]	@ 0x24
 800c164:	4683      	mov	fp, r0
 800c166:	920e      	str	r2, [sp, #56]	@ 0x38
 800c168:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c16a:	b97f      	cbnz	r7, 800c18c <_dtoa_r+0x3c>
 800c16c:	2010      	movs	r0, #16
 800c16e:	f001 f937 	bl	800d3e0 <malloc>
 800c172:	4602      	mov	r2, r0
 800c174:	f8cb 001c 	str.w	r0, [fp, #28]
 800c178:	b920      	cbnz	r0, 800c184 <_dtoa_r+0x34>
 800c17a:	4ba7      	ldr	r3, [pc, #668]	@ (800c418 <_dtoa_r+0x2c8>)
 800c17c:	21ef      	movs	r1, #239	@ 0xef
 800c17e:	48a7      	ldr	r0, [pc, #668]	@ (800c41c <_dtoa_r+0x2cc>)
 800c180:	f002 fb34 	bl	800e7ec <__assert_func>
 800c184:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c188:	6007      	str	r7, [r0, #0]
 800c18a:	60c7      	str	r7, [r0, #12]
 800c18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c190:	6819      	ldr	r1, [r3, #0]
 800c192:	b159      	cbz	r1, 800c1ac <_dtoa_r+0x5c>
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	604a      	str	r2, [r1, #4]
 800c198:	2301      	movs	r3, #1
 800c19a:	4093      	lsls	r3, r2
 800c19c:	608b      	str	r3, [r1, #8]
 800c19e:	4658      	mov	r0, fp
 800c1a0:	f001 fa26 	bl	800d5f0 <_Bfree>
 800c1a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	1e2b      	subs	r3, r5, #0
 800c1ae:	bfb9      	ittee	lt
 800c1b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c1b4:	9303      	strlt	r3, [sp, #12]
 800c1b6:	2300      	movge	r3, #0
 800c1b8:	6033      	strge	r3, [r6, #0]
 800c1ba:	9f03      	ldr	r7, [sp, #12]
 800c1bc:	4b98      	ldr	r3, [pc, #608]	@ (800c420 <_dtoa_r+0x2d0>)
 800c1be:	bfbc      	itt	lt
 800c1c0:	2201      	movlt	r2, #1
 800c1c2:	6032      	strlt	r2, [r6, #0]
 800c1c4:	43bb      	bics	r3, r7
 800c1c6:	d112      	bne.n	800c1ee <_dtoa_r+0x9e>
 800c1c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c1ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1ce:	6013      	str	r3, [r2, #0]
 800c1d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1d4:	4323      	orrs	r3, r4
 800c1d6:	f000 854d 	beq.w	800cc74 <_dtoa_r+0xb24>
 800c1da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c434 <_dtoa_r+0x2e4>
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 854f 	beq.w	800cc84 <_dtoa_r+0xb34>
 800c1e6:	f10a 0303 	add.w	r3, sl, #3
 800c1ea:	f000 bd49 	b.w	800cc80 <_dtoa_r+0xb30>
 800c1ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	ec51 0b17 	vmov	r0, r1, d7
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c1fe:	f7f4 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800c202:	4680      	mov	r8, r0
 800c204:	b158      	cbz	r0, 800c21e <_dtoa_r+0xce>
 800c206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c208:	2301      	movs	r3, #1
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c20e:	b113      	cbz	r3, 800c216 <_dtoa_r+0xc6>
 800c210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c212:	4b84      	ldr	r3, [pc, #528]	@ (800c424 <_dtoa_r+0x2d4>)
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c438 <_dtoa_r+0x2e8>
 800c21a:	f000 bd33 	b.w	800cc84 <_dtoa_r+0xb34>
 800c21e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c222:	aa16      	add	r2, sp, #88	@ 0x58
 800c224:	a917      	add	r1, sp, #92	@ 0x5c
 800c226:	4658      	mov	r0, fp
 800c228:	f001 fd86 	bl	800dd38 <__d2b>
 800c22c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c230:	4681      	mov	r9, r0
 800c232:	2e00      	cmp	r6, #0
 800c234:	d077      	beq.n	800c326 <_dtoa_r+0x1d6>
 800c236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c238:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c244:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c248:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c24c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c250:	4619      	mov	r1, r3
 800c252:	2200      	movs	r2, #0
 800c254:	4b74      	ldr	r3, [pc, #464]	@ (800c428 <_dtoa_r+0x2d8>)
 800c256:	f7f4 f817 	bl	8000288 <__aeabi_dsub>
 800c25a:	a369      	add	r3, pc, #420	@ (adr r3, 800c400 <_dtoa_r+0x2b0>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f7f4 f9ca 	bl	80005f8 <__aeabi_dmul>
 800c264:	a368      	add	r3, pc, #416	@ (adr r3, 800c408 <_dtoa_r+0x2b8>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f4 f80f 	bl	800028c <__adddf3>
 800c26e:	4604      	mov	r4, r0
 800c270:	4630      	mov	r0, r6
 800c272:	460d      	mov	r5, r1
 800c274:	f7f4 f956 	bl	8000524 <__aeabi_i2d>
 800c278:	a365      	add	r3, pc, #404	@ (adr r3, 800c410 <_dtoa_r+0x2c0>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f9bb 	bl	80005f8 <__aeabi_dmul>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4620      	mov	r0, r4
 800c288:	4629      	mov	r1, r5
 800c28a:	f7f3 ffff 	bl	800028c <__adddf3>
 800c28e:	4604      	mov	r4, r0
 800c290:	460d      	mov	r5, r1
 800c292:	f7f4 fc61 	bl	8000b58 <__aeabi_d2iz>
 800c296:	2200      	movs	r2, #0
 800c298:	4607      	mov	r7, r0
 800c29a:	2300      	movs	r3, #0
 800c29c:	4620      	mov	r0, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7f4 fc1c 	bl	8000adc <__aeabi_dcmplt>
 800c2a4:	b140      	cbz	r0, 800c2b8 <_dtoa_r+0x168>
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	f7f4 f93c 	bl	8000524 <__aeabi_i2d>
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	462b      	mov	r3, r5
 800c2b0:	f7f4 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2b4:	b900      	cbnz	r0, 800c2b8 <_dtoa_r+0x168>
 800c2b6:	3f01      	subs	r7, #1
 800c2b8:	2f16      	cmp	r7, #22
 800c2ba:	d851      	bhi.n	800c360 <_dtoa_r+0x210>
 800c2bc:	4b5b      	ldr	r3, [pc, #364]	@ (800c42c <_dtoa_r+0x2dc>)
 800c2be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2ca:	f7f4 fc07 	bl	8000adc <__aeabi_dcmplt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d048      	beq.n	800c364 <_dtoa_r+0x214>
 800c2d2:	3f01      	subs	r7, #1
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c2d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2da:	1b9b      	subs	r3, r3, r6
 800c2dc:	1e5a      	subs	r2, r3, #1
 800c2de:	bf44      	itt	mi
 800c2e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800c2e4:	2300      	movmi	r3, #0
 800c2e6:	9208      	str	r2, [sp, #32]
 800c2e8:	bf54      	ite	pl
 800c2ea:	f04f 0800 	movpl.w	r8, #0
 800c2ee:	9308      	strmi	r3, [sp, #32]
 800c2f0:	2f00      	cmp	r7, #0
 800c2f2:	db39      	blt.n	800c368 <_dtoa_r+0x218>
 800c2f4:	9b08      	ldr	r3, [sp, #32]
 800c2f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c2f8:	443b      	add	r3, r7
 800c2fa:	9308      	str	r3, [sp, #32]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c302:	2b09      	cmp	r3, #9
 800c304:	d864      	bhi.n	800c3d0 <_dtoa_r+0x280>
 800c306:	2b05      	cmp	r3, #5
 800c308:	bfc4      	itt	gt
 800c30a:	3b04      	subgt	r3, #4
 800c30c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c310:	f1a3 0302 	sub.w	r3, r3, #2
 800c314:	bfcc      	ite	gt
 800c316:	2400      	movgt	r4, #0
 800c318:	2401      	movle	r4, #1
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d863      	bhi.n	800c3e6 <_dtoa_r+0x296>
 800c31e:	e8df f003 	tbb	[pc, r3]
 800c322:	372a      	.short	0x372a
 800c324:	5535      	.short	0x5535
 800c326:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c32a:	441e      	add	r6, r3
 800c32c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c330:	2b20      	cmp	r3, #32
 800c332:	bfc1      	itttt	gt
 800c334:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c338:	409f      	lslgt	r7, r3
 800c33a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c33e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c342:	bfd6      	itet	le
 800c344:	f1c3 0320 	rsble	r3, r3, #32
 800c348:	ea47 0003 	orrgt.w	r0, r7, r3
 800c34c:	fa04 f003 	lslle.w	r0, r4, r3
 800c350:	f7f4 f8d8 	bl	8000504 <__aeabi_ui2d>
 800c354:	2201      	movs	r2, #1
 800c356:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c35a:	3e01      	subs	r6, #1
 800c35c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c35e:	e777      	b.n	800c250 <_dtoa_r+0x100>
 800c360:	2301      	movs	r3, #1
 800c362:	e7b8      	b.n	800c2d6 <_dtoa_r+0x186>
 800c364:	9012      	str	r0, [sp, #72]	@ 0x48
 800c366:	e7b7      	b.n	800c2d8 <_dtoa_r+0x188>
 800c368:	427b      	negs	r3, r7
 800c36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c36c:	2300      	movs	r3, #0
 800c36e:	eba8 0807 	sub.w	r8, r8, r7
 800c372:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c374:	e7c4      	b.n	800c300 <_dtoa_r+0x1b0>
 800c376:	2300      	movs	r3, #0
 800c378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c37a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dc35      	bgt.n	800c3ec <_dtoa_r+0x29c>
 800c380:	2301      	movs	r3, #1
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	9307      	str	r3, [sp, #28]
 800c386:	461a      	mov	r2, r3
 800c388:	920e      	str	r2, [sp, #56]	@ 0x38
 800c38a:	e00b      	b.n	800c3a4 <_dtoa_r+0x254>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e7f3      	b.n	800c378 <_dtoa_r+0x228>
 800c390:	2300      	movs	r3, #0
 800c392:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c396:	18fb      	adds	r3, r7, r3
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	3301      	adds	r3, #1
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	9307      	str	r3, [sp, #28]
 800c3a0:	bfb8      	it	lt
 800c3a2:	2301      	movlt	r3, #1
 800c3a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	f102 0514 	add.w	r5, r2, #20
 800c3b0:	429d      	cmp	r5, r3
 800c3b2:	d91f      	bls.n	800c3f4 <_dtoa_r+0x2a4>
 800c3b4:	6041      	str	r1, [r0, #4]
 800c3b6:	4658      	mov	r0, fp
 800c3b8:	f001 f8da 	bl	800d570 <_Balloc>
 800c3bc:	4682      	mov	sl, r0
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d13c      	bne.n	800c43c <_dtoa_r+0x2ec>
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c430 <_dtoa_r+0x2e0>)
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3ca:	e6d8      	b.n	800c17e <_dtoa_r+0x2e>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e7e0      	b.n	800c392 <_dtoa_r+0x242>
 800c3d0:	2401      	movs	r4, #1
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	9307      	str	r3, [sp, #28]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	2312      	movs	r3, #18
 800c3e4:	e7d0      	b.n	800c388 <_dtoa_r+0x238>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3ea:	e7f5      	b.n	800c3d8 <_dtoa_r+0x288>
 800c3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	9307      	str	r3, [sp, #28]
 800c3f2:	e7d7      	b.n	800c3a4 <_dtoa_r+0x254>
 800c3f4:	3101      	adds	r1, #1
 800c3f6:	0052      	lsls	r2, r2, #1
 800c3f8:	e7d8      	b.n	800c3ac <_dtoa_r+0x25c>
 800c3fa:	bf00      	nop
 800c3fc:	f3af 8000 	nop.w
 800c400:	636f4361 	.word	0x636f4361
 800c404:	3fd287a7 	.word	0x3fd287a7
 800c408:	8b60c8b3 	.word	0x8b60c8b3
 800c40c:	3fc68a28 	.word	0x3fc68a28
 800c410:	509f79fb 	.word	0x509f79fb
 800c414:	3fd34413 	.word	0x3fd34413
 800c418:	0800ff86 	.word	0x0800ff86
 800c41c:	0800ff9d 	.word	0x0800ff9d
 800c420:	7ff00000 	.word	0x7ff00000
 800c424:	0800ff49 	.word	0x0800ff49
 800c428:	3ff80000 	.word	0x3ff80000
 800c42c:	080100f8 	.word	0x080100f8
 800c430:	0800fff5 	.word	0x0800fff5
 800c434:	0800ff82 	.word	0x0800ff82
 800c438:	0800ff48 	.word	0x0800ff48
 800c43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c440:	6018      	str	r0, [r3, #0]
 800c442:	9b07      	ldr	r3, [sp, #28]
 800c444:	2b0e      	cmp	r3, #14
 800c446:	f200 80a4 	bhi.w	800c592 <_dtoa_r+0x442>
 800c44a:	2c00      	cmp	r4, #0
 800c44c:	f000 80a1 	beq.w	800c592 <_dtoa_r+0x442>
 800c450:	2f00      	cmp	r7, #0
 800c452:	dd33      	ble.n	800c4bc <_dtoa_r+0x36c>
 800c454:	4bad      	ldr	r3, [pc, #692]	@ (800c70c <_dtoa_r+0x5bc>)
 800c456:	f007 020f 	and.w	r2, r7, #15
 800c45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c45e:	ed93 7b00 	vldr	d7, [r3]
 800c462:	05f8      	lsls	r0, r7, #23
 800c464:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c468:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c46c:	d516      	bpl.n	800c49c <_dtoa_r+0x34c>
 800c46e:	4ba8      	ldr	r3, [pc, #672]	@ (800c710 <_dtoa_r+0x5c0>)
 800c470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c478:	f7f4 f9e8 	bl	800084c <__aeabi_ddiv>
 800c47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c480:	f004 040f 	and.w	r4, r4, #15
 800c484:	2603      	movs	r6, #3
 800c486:	4da2      	ldr	r5, [pc, #648]	@ (800c710 <_dtoa_r+0x5c0>)
 800c488:	b954      	cbnz	r4, 800c4a0 <_dtoa_r+0x350>
 800c48a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c492:	f7f4 f9db 	bl	800084c <__aeabi_ddiv>
 800c496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c49a:	e028      	b.n	800c4ee <_dtoa_r+0x39e>
 800c49c:	2602      	movs	r6, #2
 800c49e:	e7f2      	b.n	800c486 <_dtoa_r+0x336>
 800c4a0:	07e1      	lsls	r1, r4, #31
 800c4a2:	d508      	bpl.n	800c4b6 <_dtoa_r+0x366>
 800c4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4ac:	f7f4 f8a4 	bl	80005f8 <__aeabi_dmul>
 800c4b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4b4:	3601      	adds	r6, #1
 800c4b6:	1064      	asrs	r4, r4, #1
 800c4b8:	3508      	adds	r5, #8
 800c4ba:	e7e5      	b.n	800c488 <_dtoa_r+0x338>
 800c4bc:	f000 80d2 	beq.w	800c664 <_dtoa_r+0x514>
 800c4c0:	427c      	negs	r4, r7
 800c4c2:	4b92      	ldr	r3, [pc, #584]	@ (800c70c <_dtoa_r+0x5bc>)
 800c4c4:	4d92      	ldr	r5, [pc, #584]	@ (800c710 <_dtoa_r+0x5c0>)
 800c4c6:	f004 020f 	and.w	r2, r4, #15
 800c4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4d6:	f7f4 f88f 	bl	80005f8 <__aeabi_dmul>
 800c4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4de:	1124      	asrs	r4, r4, #4
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	2602      	movs	r6, #2
 800c4e4:	2c00      	cmp	r4, #0
 800c4e6:	f040 80b2 	bne.w	800c64e <_dtoa_r+0x4fe>
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1d3      	bne.n	800c496 <_dtoa_r+0x346>
 800c4ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c4f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 80b7 	beq.w	800c668 <_dtoa_r+0x518>
 800c4fa:	4b86      	ldr	r3, [pc, #536]	@ (800c714 <_dtoa_r+0x5c4>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4620      	mov	r0, r4
 800c500:	4629      	mov	r1, r5
 800c502:	f7f4 faeb 	bl	8000adc <__aeabi_dcmplt>
 800c506:	2800      	cmp	r0, #0
 800c508:	f000 80ae 	beq.w	800c668 <_dtoa_r+0x518>
 800c50c:	9b07      	ldr	r3, [sp, #28]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 80aa 	beq.w	800c668 <_dtoa_r+0x518>
 800c514:	9b00      	ldr	r3, [sp, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	dd37      	ble.n	800c58a <_dtoa_r+0x43a>
 800c51a:	1e7b      	subs	r3, r7, #1
 800c51c:	9304      	str	r3, [sp, #16]
 800c51e:	4620      	mov	r0, r4
 800c520:	4b7d      	ldr	r3, [pc, #500]	@ (800c718 <_dtoa_r+0x5c8>)
 800c522:	2200      	movs	r2, #0
 800c524:	4629      	mov	r1, r5
 800c526:	f7f4 f867 	bl	80005f8 <__aeabi_dmul>
 800c52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c52e:	9c00      	ldr	r4, [sp, #0]
 800c530:	3601      	adds	r6, #1
 800c532:	4630      	mov	r0, r6
 800c534:	f7f3 fff6 	bl	8000524 <__aeabi_i2d>
 800c538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c53c:	f7f4 f85c 	bl	80005f8 <__aeabi_dmul>
 800c540:	4b76      	ldr	r3, [pc, #472]	@ (800c71c <_dtoa_r+0x5cc>)
 800c542:	2200      	movs	r2, #0
 800c544:	f7f3 fea2 	bl	800028c <__adddf3>
 800c548:	4605      	mov	r5, r0
 800c54a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c54e:	2c00      	cmp	r4, #0
 800c550:	f040 808d 	bne.w	800c66e <_dtoa_r+0x51e>
 800c554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c558:	4b71      	ldr	r3, [pc, #452]	@ (800c720 <_dtoa_r+0x5d0>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	f7f3 fe94 	bl	8000288 <__aeabi_dsub>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c568:	462a      	mov	r2, r5
 800c56a:	4633      	mov	r3, r6
 800c56c:	f7f4 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 800c570:	2800      	cmp	r0, #0
 800c572:	f040 828b 	bne.w	800ca8c <_dtoa_r+0x93c>
 800c576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c57a:	462a      	mov	r2, r5
 800c57c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c580:	f7f4 faac 	bl	8000adc <__aeabi_dcmplt>
 800c584:	2800      	cmp	r0, #0
 800c586:	f040 8128 	bne.w	800c7da <_dtoa_r+0x68a>
 800c58a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c58e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c594:	2b00      	cmp	r3, #0
 800c596:	f2c0 815a 	blt.w	800c84e <_dtoa_r+0x6fe>
 800c59a:	2f0e      	cmp	r7, #14
 800c59c:	f300 8157 	bgt.w	800c84e <_dtoa_r+0x6fe>
 800c5a0:	4b5a      	ldr	r3, [pc, #360]	@ (800c70c <_dtoa_r+0x5bc>)
 800c5a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c5a6:	ed93 7b00 	vldr	d7, [r3]
 800c5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	ed8d 7b00 	vstr	d7, [sp]
 800c5b2:	da03      	bge.n	800c5bc <_dtoa_r+0x46c>
 800c5b4:	9b07      	ldr	r3, [sp, #28]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f340 8101 	ble.w	800c7be <_dtoa_r+0x66e>
 800c5bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c5c0:	4656      	mov	r6, sl
 800c5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f4 f93f 	bl	800084c <__aeabi_ddiv>
 800c5ce:	f7f4 fac3 	bl	8000b58 <__aeabi_d2iz>
 800c5d2:	4680      	mov	r8, r0
 800c5d4:	f7f3 ffa6 	bl	8000524 <__aeabi_i2d>
 800c5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5dc:	f7f4 f80c 	bl	80005f8 <__aeabi_dmul>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c5ec:	f7f3 fe4c 	bl	8000288 <__aeabi_dsub>
 800c5f0:	f806 4b01 	strb.w	r4, [r6], #1
 800c5f4:	9d07      	ldr	r5, [sp, #28]
 800c5f6:	eba6 040a 	sub.w	r4, r6, sl
 800c5fa:	42a5      	cmp	r5, r4
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	f040 8117 	bne.w	800c832 <_dtoa_r+0x6e2>
 800c604:	f7f3 fe42 	bl	800028c <__adddf3>
 800c608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c60c:	4604      	mov	r4, r0
 800c60e:	460d      	mov	r5, r1
 800c610:	f7f4 fa82 	bl	8000b18 <__aeabi_dcmpgt>
 800c614:	2800      	cmp	r0, #0
 800c616:	f040 80f9 	bne.w	800c80c <_dtoa_r+0x6bc>
 800c61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c61e:	4620      	mov	r0, r4
 800c620:	4629      	mov	r1, r5
 800c622:	f7f4 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 800c626:	b118      	cbz	r0, 800c630 <_dtoa_r+0x4e0>
 800c628:	f018 0f01 	tst.w	r8, #1
 800c62c:	f040 80ee 	bne.w	800c80c <_dtoa_r+0x6bc>
 800c630:	4649      	mov	r1, r9
 800c632:	4658      	mov	r0, fp
 800c634:	f000 ffdc 	bl	800d5f0 <_Bfree>
 800c638:	2300      	movs	r3, #0
 800c63a:	7033      	strb	r3, [r6, #0]
 800c63c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c63e:	3701      	adds	r7, #1
 800c640:	601f      	str	r7, [r3, #0]
 800c642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 831d 	beq.w	800cc84 <_dtoa_r+0xb34>
 800c64a:	601e      	str	r6, [r3, #0]
 800c64c:	e31a      	b.n	800cc84 <_dtoa_r+0xb34>
 800c64e:	07e2      	lsls	r2, r4, #31
 800c650:	d505      	bpl.n	800c65e <_dtoa_r+0x50e>
 800c652:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c656:	f7f3 ffcf 	bl	80005f8 <__aeabi_dmul>
 800c65a:	3601      	adds	r6, #1
 800c65c:	2301      	movs	r3, #1
 800c65e:	1064      	asrs	r4, r4, #1
 800c660:	3508      	adds	r5, #8
 800c662:	e73f      	b.n	800c4e4 <_dtoa_r+0x394>
 800c664:	2602      	movs	r6, #2
 800c666:	e742      	b.n	800c4ee <_dtoa_r+0x39e>
 800c668:	9c07      	ldr	r4, [sp, #28]
 800c66a:	9704      	str	r7, [sp, #16]
 800c66c:	e761      	b.n	800c532 <_dtoa_r+0x3e2>
 800c66e:	4b27      	ldr	r3, [pc, #156]	@ (800c70c <_dtoa_r+0x5bc>)
 800c670:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c676:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c67a:	4454      	add	r4, sl
 800c67c:	2900      	cmp	r1, #0
 800c67e:	d053      	beq.n	800c728 <_dtoa_r+0x5d8>
 800c680:	4928      	ldr	r1, [pc, #160]	@ (800c724 <_dtoa_r+0x5d4>)
 800c682:	2000      	movs	r0, #0
 800c684:	f7f4 f8e2 	bl	800084c <__aeabi_ddiv>
 800c688:	4633      	mov	r3, r6
 800c68a:	462a      	mov	r2, r5
 800c68c:	f7f3 fdfc 	bl	8000288 <__aeabi_dsub>
 800c690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c694:	4656      	mov	r6, sl
 800c696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c69a:	f7f4 fa5d 	bl	8000b58 <__aeabi_d2iz>
 800c69e:	4605      	mov	r5, r0
 800c6a0:	f7f3 ff40 	bl	8000524 <__aeabi_i2d>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ac:	f7f3 fdec 	bl	8000288 <__aeabi_dsub>
 800c6b0:	3530      	adds	r5, #48	@ 0x30
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6ba:	f806 5b01 	strb.w	r5, [r6], #1
 800c6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6c2:	f7f4 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d171      	bne.n	800c7ae <_dtoa_r+0x65e>
 800c6ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6ce:	4911      	ldr	r1, [pc, #68]	@ (800c714 <_dtoa_r+0x5c4>)
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	f7f3 fdd9 	bl	8000288 <__aeabi_dsub>
 800c6d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6da:	f7f4 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	f040 8095 	bne.w	800c80e <_dtoa_r+0x6be>
 800c6e4:	42a6      	cmp	r6, r4
 800c6e6:	f43f af50 	beq.w	800c58a <_dtoa_r+0x43a>
 800c6ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c718 <_dtoa_r+0x5c8>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f7f3 ff81 	bl	80005f8 <__aeabi_dmul>
 800c6f6:	4b08      	ldr	r3, [pc, #32]	@ (800c718 <_dtoa_r+0x5c8>)
 800c6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c702:	f7f3 ff79 	bl	80005f8 <__aeabi_dmul>
 800c706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c70a:	e7c4      	b.n	800c696 <_dtoa_r+0x546>
 800c70c:	080100f8 	.word	0x080100f8
 800c710:	080100d0 	.word	0x080100d0
 800c714:	3ff00000 	.word	0x3ff00000
 800c718:	40240000 	.word	0x40240000
 800c71c:	401c0000 	.word	0x401c0000
 800c720:	40140000 	.word	0x40140000
 800c724:	3fe00000 	.word	0x3fe00000
 800c728:	4631      	mov	r1, r6
 800c72a:	4628      	mov	r0, r5
 800c72c:	f7f3 ff64 	bl	80005f8 <__aeabi_dmul>
 800c730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c734:	9415      	str	r4, [sp, #84]	@ 0x54
 800c736:	4656      	mov	r6, sl
 800c738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c73c:	f7f4 fa0c 	bl	8000b58 <__aeabi_d2iz>
 800c740:	4605      	mov	r5, r0
 800c742:	f7f3 feef 	bl	8000524 <__aeabi_i2d>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c74e:	f7f3 fd9b 	bl	8000288 <__aeabi_dsub>
 800c752:	3530      	adds	r5, #48	@ 0x30
 800c754:	f806 5b01 	strb.w	r5, [r6], #1
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	42a6      	cmp	r6, r4
 800c75e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c762:	f04f 0200 	mov.w	r2, #0
 800c766:	d124      	bne.n	800c7b2 <_dtoa_r+0x662>
 800c768:	4bac      	ldr	r3, [pc, #688]	@ (800ca1c <_dtoa_r+0x8cc>)
 800c76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c76e:	f7f3 fd8d 	bl	800028c <__adddf3>
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c77a:	f7f4 f9cd 	bl	8000b18 <__aeabi_dcmpgt>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d145      	bne.n	800c80e <_dtoa_r+0x6be>
 800c782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c786:	49a5      	ldr	r1, [pc, #660]	@ (800ca1c <_dtoa_r+0x8cc>)
 800c788:	2000      	movs	r0, #0
 800c78a:	f7f3 fd7d 	bl	8000288 <__aeabi_dsub>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c796:	f7f4 f9a1 	bl	8000adc <__aeabi_dcmplt>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f43f aef5 	beq.w	800c58a <_dtoa_r+0x43a>
 800c7a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c7a2:	1e73      	subs	r3, r6, #1
 800c7a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c7a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7aa:	2b30      	cmp	r3, #48	@ 0x30
 800c7ac:	d0f8      	beq.n	800c7a0 <_dtoa_r+0x650>
 800c7ae:	9f04      	ldr	r7, [sp, #16]
 800c7b0:	e73e      	b.n	800c630 <_dtoa_r+0x4e0>
 800c7b2:	4b9b      	ldr	r3, [pc, #620]	@ (800ca20 <_dtoa_r+0x8d0>)
 800c7b4:	f7f3 ff20 	bl	80005f8 <__aeabi_dmul>
 800c7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7bc:	e7bc      	b.n	800c738 <_dtoa_r+0x5e8>
 800c7be:	d10c      	bne.n	800c7da <_dtoa_r+0x68a>
 800c7c0:	4b98      	ldr	r3, [pc, #608]	@ (800ca24 <_dtoa_r+0x8d4>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7c8:	f7f3 ff16 	bl	80005f8 <__aeabi_dmul>
 800c7cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7d0:	f7f4 f998 	bl	8000b04 <__aeabi_dcmpge>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f000 8157 	beq.w	800ca88 <_dtoa_r+0x938>
 800c7da:	2400      	movs	r4, #0
 800c7dc:	4625      	mov	r5, r4
 800c7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7e0:	43db      	mvns	r3, r3
 800c7e2:	9304      	str	r3, [sp, #16]
 800c7e4:	4656      	mov	r6, sl
 800c7e6:	2700      	movs	r7, #0
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4658      	mov	r0, fp
 800c7ec:	f000 ff00 	bl	800d5f0 <_Bfree>
 800c7f0:	2d00      	cmp	r5, #0
 800c7f2:	d0dc      	beq.n	800c7ae <_dtoa_r+0x65e>
 800c7f4:	b12f      	cbz	r7, 800c802 <_dtoa_r+0x6b2>
 800c7f6:	42af      	cmp	r7, r5
 800c7f8:	d003      	beq.n	800c802 <_dtoa_r+0x6b2>
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	4658      	mov	r0, fp
 800c7fe:	f000 fef7 	bl	800d5f0 <_Bfree>
 800c802:	4629      	mov	r1, r5
 800c804:	4658      	mov	r0, fp
 800c806:	f000 fef3 	bl	800d5f0 <_Bfree>
 800c80a:	e7d0      	b.n	800c7ae <_dtoa_r+0x65e>
 800c80c:	9704      	str	r7, [sp, #16]
 800c80e:	4633      	mov	r3, r6
 800c810:	461e      	mov	r6, r3
 800c812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c816:	2a39      	cmp	r2, #57	@ 0x39
 800c818:	d107      	bne.n	800c82a <_dtoa_r+0x6da>
 800c81a:	459a      	cmp	sl, r3
 800c81c:	d1f8      	bne.n	800c810 <_dtoa_r+0x6c0>
 800c81e:	9a04      	ldr	r2, [sp, #16]
 800c820:	3201      	adds	r2, #1
 800c822:	9204      	str	r2, [sp, #16]
 800c824:	2230      	movs	r2, #48	@ 0x30
 800c826:	f88a 2000 	strb.w	r2, [sl]
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	3201      	adds	r2, #1
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	e7bd      	b.n	800c7ae <_dtoa_r+0x65e>
 800c832:	4b7b      	ldr	r3, [pc, #492]	@ (800ca20 <_dtoa_r+0x8d0>)
 800c834:	2200      	movs	r2, #0
 800c836:	f7f3 fedf 	bl	80005f8 <__aeabi_dmul>
 800c83a:	2200      	movs	r2, #0
 800c83c:	2300      	movs	r3, #0
 800c83e:	4604      	mov	r4, r0
 800c840:	460d      	mov	r5, r1
 800c842:	f7f4 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 800c846:	2800      	cmp	r0, #0
 800c848:	f43f aebb 	beq.w	800c5c2 <_dtoa_r+0x472>
 800c84c:	e6f0      	b.n	800c630 <_dtoa_r+0x4e0>
 800c84e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c850:	2a00      	cmp	r2, #0
 800c852:	f000 80db 	beq.w	800ca0c <_dtoa_r+0x8bc>
 800c856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c858:	2a01      	cmp	r2, #1
 800c85a:	f300 80bf 	bgt.w	800c9dc <_dtoa_r+0x88c>
 800c85e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c860:	2a00      	cmp	r2, #0
 800c862:	f000 80b7 	beq.w	800c9d4 <_dtoa_r+0x884>
 800c866:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c86a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c86c:	4646      	mov	r6, r8
 800c86e:	9a08      	ldr	r2, [sp, #32]
 800c870:	2101      	movs	r1, #1
 800c872:	441a      	add	r2, r3
 800c874:	4658      	mov	r0, fp
 800c876:	4498      	add	r8, r3
 800c878:	9208      	str	r2, [sp, #32]
 800c87a:	f000 ffb7 	bl	800d7ec <__i2b>
 800c87e:	4605      	mov	r5, r0
 800c880:	b15e      	cbz	r6, 800c89a <_dtoa_r+0x74a>
 800c882:	9b08      	ldr	r3, [sp, #32]
 800c884:	2b00      	cmp	r3, #0
 800c886:	dd08      	ble.n	800c89a <_dtoa_r+0x74a>
 800c888:	42b3      	cmp	r3, r6
 800c88a:	9a08      	ldr	r2, [sp, #32]
 800c88c:	bfa8      	it	ge
 800c88e:	4633      	movge	r3, r6
 800c890:	eba8 0803 	sub.w	r8, r8, r3
 800c894:	1af6      	subs	r6, r6, r3
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	9308      	str	r3, [sp, #32]
 800c89a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c89c:	b1f3      	cbz	r3, 800c8dc <_dtoa_r+0x78c>
 800c89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 80b7 	beq.w	800ca14 <_dtoa_r+0x8c4>
 800c8a6:	b18c      	cbz	r4, 800c8cc <_dtoa_r+0x77c>
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	4658      	mov	r0, fp
 800c8ae:	f001 f85d 	bl	800d96c <__pow5mult>
 800c8b2:	464a      	mov	r2, r9
 800c8b4:	4601      	mov	r1, r0
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	4658      	mov	r0, fp
 800c8ba:	f000 ffad 	bl	800d818 <__multiply>
 800c8be:	4649      	mov	r1, r9
 800c8c0:	9004      	str	r0, [sp, #16]
 800c8c2:	4658      	mov	r0, fp
 800c8c4:	f000 fe94 	bl	800d5f0 <_Bfree>
 800c8c8:	9b04      	ldr	r3, [sp, #16]
 800c8ca:	4699      	mov	r9, r3
 800c8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ce:	1b1a      	subs	r2, r3, r4
 800c8d0:	d004      	beq.n	800c8dc <_dtoa_r+0x78c>
 800c8d2:	4649      	mov	r1, r9
 800c8d4:	4658      	mov	r0, fp
 800c8d6:	f001 f849 	bl	800d96c <__pow5mult>
 800c8da:	4681      	mov	r9, r0
 800c8dc:	2101      	movs	r1, #1
 800c8de:	4658      	mov	r0, fp
 800c8e0:	f000 ff84 	bl	800d7ec <__i2b>
 800c8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f000 81cf 	beq.w	800cc8c <_dtoa_r+0xb3c>
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	4601      	mov	r1, r0
 800c8f2:	4658      	mov	r0, fp
 800c8f4:	f001 f83a 	bl	800d96c <__pow5mult>
 800c8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	f300 8095 	bgt.w	800ca2c <_dtoa_r+0x8dc>
 800c902:	9b02      	ldr	r3, [sp, #8]
 800c904:	2b00      	cmp	r3, #0
 800c906:	f040 8087 	bne.w	800ca18 <_dtoa_r+0x8c8>
 800c90a:	9b03      	ldr	r3, [sp, #12]
 800c90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c910:	2b00      	cmp	r3, #0
 800c912:	f040 8089 	bne.w	800ca28 <_dtoa_r+0x8d8>
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c91c:	0d1b      	lsrs	r3, r3, #20
 800c91e:	051b      	lsls	r3, r3, #20
 800c920:	b12b      	cbz	r3, 800c92e <_dtoa_r+0x7de>
 800c922:	9b08      	ldr	r3, [sp, #32]
 800c924:	3301      	adds	r3, #1
 800c926:	9308      	str	r3, [sp, #32]
 800c928:	f108 0801 	add.w	r8, r8, #1
 800c92c:	2301      	movs	r3, #1
 800c92e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 81b0 	beq.w	800cc98 <_dtoa_r+0xb48>
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c93e:	6918      	ldr	r0, [r3, #16]
 800c940:	f000 ff08 	bl	800d754 <__hi0bits>
 800c944:	f1c0 0020 	rsb	r0, r0, #32
 800c948:	9b08      	ldr	r3, [sp, #32]
 800c94a:	4418      	add	r0, r3
 800c94c:	f010 001f 	ands.w	r0, r0, #31
 800c950:	d077      	beq.n	800ca42 <_dtoa_r+0x8f2>
 800c952:	f1c0 0320 	rsb	r3, r0, #32
 800c956:	2b04      	cmp	r3, #4
 800c958:	dd6b      	ble.n	800ca32 <_dtoa_r+0x8e2>
 800c95a:	9b08      	ldr	r3, [sp, #32]
 800c95c:	f1c0 001c 	rsb	r0, r0, #28
 800c960:	4403      	add	r3, r0
 800c962:	4480      	add	r8, r0
 800c964:	4406      	add	r6, r0
 800c966:	9308      	str	r3, [sp, #32]
 800c968:	f1b8 0f00 	cmp.w	r8, #0
 800c96c:	dd05      	ble.n	800c97a <_dtoa_r+0x82a>
 800c96e:	4649      	mov	r1, r9
 800c970:	4642      	mov	r2, r8
 800c972:	4658      	mov	r0, fp
 800c974:	f001 f854 	bl	800da20 <__lshift>
 800c978:	4681      	mov	r9, r0
 800c97a:	9b08      	ldr	r3, [sp, #32]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	dd05      	ble.n	800c98c <_dtoa_r+0x83c>
 800c980:	4621      	mov	r1, r4
 800c982:	461a      	mov	r2, r3
 800c984:	4658      	mov	r0, fp
 800c986:	f001 f84b 	bl	800da20 <__lshift>
 800c98a:	4604      	mov	r4, r0
 800c98c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d059      	beq.n	800ca46 <_dtoa_r+0x8f6>
 800c992:	4621      	mov	r1, r4
 800c994:	4648      	mov	r0, r9
 800c996:	f001 f8af 	bl	800daf8 <__mcmp>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	da53      	bge.n	800ca46 <_dtoa_r+0x8f6>
 800c99e:	1e7b      	subs	r3, r7, #1
 800c9a0:	9304      	str	r3, [sp, #16]
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	220a      	movs	r2, #10
 800c9a8:	4658      	mov	r0, fp
 800c9aa:	f000 fe43 	bl	800d634 <__multadd>
 800c9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9b0:	4681      	mov	r9, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 8172 	beq.w	800cc9c <_dtoa_r+0xb4c>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	220a      	movs	r2, #10
 800c9be:	4658      	mov	r0, fp
 800c9c0:	f000 fe38 	bl	800d634 <__multadd>
 800c9c4:	9b00      	ldr	r3, [sp, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	dc67      	bgt.n	800ca9c <_dtoa_r+0x94c>
 800c9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	dc41      	bgt.n	800ca56 <_dtoa_r+0x906>
 800c9d2:	e063      	b.n	800ca9c <_dtoa_r+0x94c>
 800c9d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c9d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9da:	e746      	b.n	800c86a <_dtoa_r+0x71a>
 800c9dc:	9b07      	ldr	r3, [sp, #28]
 800c9de:	1e5c      	subs	r4, r3, #1
 800c9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9e2:	42a3      	cmp	r3, r4
 800c9e4:	bfbf      	itttt	lt
 800c9e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c9e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c9ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c9ec:	1ae3      	sublt	r3, r4, r3
 800c9ee:	bfb4      	ite	lt
 800c9f0:	18d2      	addlt	r2, r2, r3
 800c9f2:	1b1c      	subge	r4, r3, r4
 800c9f4:	9b07      	ldr	r3, [sp, #28]
 800c9f6:	bfbc      	itt	lt
 800c9f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c9fa:	2400      	movlt	r4, #0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bfb5      	itete	lt
 800ca00:	eba8 0603 	sublt.w	r6, r8, r3
 800ca04:	9b07      	ldrge	r3, [sp, #28]
 800ca06:	2300      	movlt	r3, #0
 800ca08:	4646      	movge	r6, r8
 800ca0a:	e730      	b.n	800c86e <_dtoa_r+0x71e>
 800ca0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca10:	4646      	mov	r6, r8
 800ca12:	e735      	b.n	800c880 <_dtoa_r+0x730>
 800ca14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca16:	e75c      	b.n	800c8d2 <_dtoa_r+0x782>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e788      	b.n	800c92e <_dtoa_r+0x7de>
 800ca1c:	3fe00000 	.word	0x3fe00000
 800ca20:	40240000 	.word	0x40240000
 800ca24:	40140000 	.word	0x40140000
 800ca28:	9b02      	ldr	r3, [sp, #8]
 800ca2a:	e780      	b.n	800c92e <_dtoa_r+0x7de>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca30:	e782      	b.n	800c938 <_dtoa_r+0x7e8>
 800ca32:	d099      	beq.n	800c968 <_dtoa_r+0x818>
 800ca34:	9a08      	ldr	r2, [sp, #32]
 800ca36:	331c      	adds	r3, #28
 800ca38:	441a      	add	r2, r3
 800ca3a:	4498      	add	r8, r3
 800ca3c:	441e      	add	r6, r3
 800ca3e:	9208      	str	r2, [sp, #32]
 800ca40:	e792      	b.n	800c968 <_dtoa_r+0x818>
 800ca42:	4603      	mov	r3, r0
 800ca44:	e7f6      	b.n	800ca34 <_dtoa_r+0x8e4>
 800ca46:	9b07      	ldr	r3, [sp, #28]
 800ca48:	9704      	str	r7, [sp, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dc20      	bgt.n	800ca90 <_dtoa_r+0x940>
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	dd1e      	ble.n	800ca94 <_dtoa_r+0x944>
 800ca56:	9b00      	ldr	r3, [sp, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f47f aec0 	bne.w	800c7de <_dtoa_r+0x68e>
 800ca5e:	4621      	mov	r1, r4
 800ca60:	2205      	movs	r2, #5
 800ca62:	4658      	mov	r0, fp
 800ca64:	f000 fde6 	bl	800d634 <__multadd>
 800ca68:	4601      	mov	r1, r0
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4648      	mov	r0, r9
 800ca6e:	f001 f843 	bl	800daf8 <__mcmp>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	f77f aeb3 	ble.w	800c7de <_dtoa_r+0x68e>
 800ca78:	4656      	mov	r6, sl
 800ca7a:	2331      	movs	r3, #49	@ 0x31
 800ca7c:	f806 3b01 	strb.w	r3, [r6], #1
 800ca80:	9b04      	ldr	r3, [sp, #16]
 800ca82:	3301      	adds	r3, #1
 800ca84:	9304      	str	r3, [sp, #16]
 800ca86:	e6ae      	b.n	800c7e6 <_dtoa_r+0x696>
 800ca88:	9c07      	ldr	r4, [sp, #28]
 800ca8a:	9704      	str	r7, [sp, #16]
 800ca8c:	4625      	mov	r5, r4
 800ca8e:	e7f3      	b.n	800ca78 <_dtoa_r+0x928>
 800ca90:	9b07      	ldr	r3, [sp, #28]
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f000 8104 	beq.w	800cca4 <_dtoa_r+0xb54>
 800ca9c:	2e00      	cmp	r6, #0
 800ca9e:	dd05      	ble.n	800caac <_dtoa_r+0x95c>
 800caa0:	4629      	mov	r1, r5
 800caa2:	4632      	mov	r2, r6
 800caa4:	4658      	mov	r0, fp
 800caa6:	f000 ffbb 	bl	800da20 <__lshift>
 800caaa:	4605      	mov	r5, r0
 800caac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d05a      	beq.n	800cb68 <_dtoa_r+0xa18>
 800cab2:	6869      	ldr	r1, [r5, #4]
 800cab4:	4658      	mov	r0, fp
 800cab6:	f000 fd5b 	bl	800d570 <_Balloc>
 800caba:	4606      	mov	r6, r0
 800cabc:	b928      	cbnz	r0, 800caca <_dtoa_r+0x97a>
 800cabe:	4b84      	ldr	r3, [pc, #528]	@ (800ccd0 <_dtoa_r+0xb80>)
 800cac0:	4602      	mov	r2, r0
 800cac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cac6:	f7ff bb5a 	b.w	800c17e <_dtoa_r+0x2e>
 800caca:	692a      	ldr	r2, [r5, #16]
 800cacc:	3202      	adds	r2, #2
 800cace:	0092      	lsls	r2, r2, #2
 800cad0:	f105 010c 	add.w	r1, r5, #12
 800cad4:	300c      	adds	r0, #12
 800cad6:	f7ff fa92 	bl	800bffe <memcpy>
 800cada:	2201      	movs	r2, #1
 800cadc:	4631      	mov	r1, r6
 800cade:	4658      	mov	r0, fp
 800cae0:	f000 ff9e 	bl	800da20 <__lshift>
 800cae4:	f10a 0301 	add.w	r3, sl, #1
 800cae8:	9307      	str	r3, [sp, #28]
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	4453      	add	r3, sl
 800caee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caf0:	9b02      	ldr	r3, [sp, #8]
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	462f      	mov	r7, r5
 800caf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cafa:	4605      	mov	r5, r0
 800cafc:	9b07      	ldr	r3, [sp, #28]
 800cafe:	4621      	mov	r1, r4
 800cb00:	3b01      	subs	r3, #1
 800cb02:	4648      	mov	r0, r9
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	f7ff fa99 	bl	800c03c <quorem>
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	9002      	str	r0, [sp, #8]
 800cb0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb12:	4648      	mov	r0, r9
 800cb14:	f000 fff0 	bl	800daf8 <__mcmp>
 800cb18:	462a      	mov	r2, r5
 800cb1a:	9008      	str	r0, [sp, #32]
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4658      	mov	r0, fp
 800cb20:	f001 f806 	bl	800db30 <__mdiff>
 800cb24:	68c2      	ldr	r2, [r0, #12]
 800cb26:	4606      	mov	r6, r0
 800cb28:	bb02      	cbnz	r2, 800cb6c <_dtoa_r+0xa1c>
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f000 ffe3 	bl	800daf8 <__mcmp>
 800cb32:	4602      	mov	r2, r0
 800cb34:	4631      	mov	r1, r6
 800cb36:	4658      	mov	r0, fp
 800cb38:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb3a:	f000 fd59 	bl	800d5f0 <_Bfree>
 800cb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb42:	9e07      	ldr	r6, [sp, #28]
 800cb44:	ea43 0102 	orr.w	r1, r3, r2
 800cb48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb4a:	4319      	orrs	r1, r3
 800cb4c:	d110      	bne.n	800cb70 <_dtoa_r+0xa20>
 800cb4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb52:	d029      	beq.n	800cba8 <_dtoa_r+0xa58>
 800cb54:	9b08      	ldr	r3, [sp, #32]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	dd02      	ble.n	800cb60 <_dtoa_r+0xa10>
 800cb5a:	9b02      	ldr	r3, [sp, #8]
 800cb5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cb60:	9b00      	ldr	r3, [sp, #0]
 800cb62:	f883 8000 	strb.w	r8, [r3]
 800cb66:	e63f      	b.n	800c7e8 <_dtoa_r+0x698>
 800cb68:	4628      	mov	r0, r5
 800cb6a:	e7bb      	b.n	800cae4 <_dtoa_r+0x994>
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	e7e1      	b.n	800cb34 <_dtoa_r+0x9e4>
 800cb70:	9b08      	ldr	r3, [sp, #32]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	db04      	blt.n	800cb80 <_dtoa_r+0xa30>
 800cb76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	d120      	bne.n	800cbc2 <_dtoa_r+0xa72>
 800cb80:	2a00      	cmp	r2, #0
 800cb82:	dded      	ble.n	800cb60 <_dtoa_r+0xa10>
 800cb84:	4649      	mov	r1, r9
 800cb86:	2201      	movs	r2, #1
 800cb88:	4658      	mov	r0, fp
 800cb8a:	f000 ff49 	bl	800da20 <__lshift>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4681      	mov	r9, r0
 800cb92:	f000 ffb1 	bl	800daf8 <__mcmp>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	dc03      	bgt.n	800cba2 <_dtoa_r+0xa52>
 800cb9a:	d1e1      	bne.n	800cb60 <_dtoa_r+0xa10>
 800cb9c:	f018 0f01 	tst.w	r8, #1
 800cba0:	d0de      	beq.n	800cb60 <_dtoa_r+0xa10>
 800cba2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cba6:	d1d8      	bne.n	800cb5a <_dtoa_r+0xa0a>
 800cba8:	9a00      	ldr	r2, [sp, #0]
 800cbaa:	2339      	movs	r3, #57	@ 0x39
 800cbac:	7013      	strb	r3, [r2, #0]
 800cbae:	4633      	mov	r3, r6
 800cbb0:	461e      	mov	r6, r3
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cbb8:	2a39      	cmp	r2, #57	@ 0x39
 800cbba:	d052      	beq.n	800cc62 <_dtoa_r+0xb12>
 800cbbc:	3201      	adds	r2, #1
 800cbbe:	701a      	strb	r2, [r3, #0]
 800cbc0:	e612      	b.n	800c7e8 <_dtoa_r+0x698>
 800cbc2:	2a00      	cmp	r2, #0
 800cbc4:	dd07      	ble.n	800cbd6 <_dtoa_r+0xa86>
 800cbc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cbca:	d0ed      	beq.n	800cba8 <_dtoa_r+0xa58>
 800cbcc:	9a00      	ldr	r2, [sp, #0]
 800cbce:	f108 0301 	add.w	r3, r8, #1
 800cbd2:	7013      	strb	r3, [r2, #0]
 800cbd4:	e608      	b.n	800c7e8 <_dtoa_r+0x698>
 800cbd6:	9b07      	ldr	r3, [sp, #28]
 800cbd8:	9a07      	ldr	r2, [sp, #28]
 800cbda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cbde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d028      	beq.n	800cc36 <_dtoa_r+0xae6>
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	220a      	movs	r2, #10
 800cbea:	4658      	mov	r0, fp
 800cbec:	f000 fd22 	bl	800d634 <__multadd>
 800cbf0:	42af      	cmp	r7, r5
 800cbf2:	4681      	mov	r9, r0
 800cbf4:	f04f 0300 	mov.w	r3, #0
 800cbf8:	f04f 020a 	mov.w	r2, #10
 800cbfc:	4639      	mov	r1, r7
 800cbfe:	4658      	mov	r0, fp
 800cc00:	d107      	bne.n	800cc12 <_dtoa_r+0xac2>
 800cc02:	f000 fd17 	bl	800d634 <__multadd>
 800cc06:	4607      	mov	r7, r0
 800cc08:	4605      	mov	r5, r0
 800cc0a:	9b07      	ldr	r3, [sp, #28]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	9307      	str	r3, [sp, #28]
 800cc10:	e774      	b.n	800cafc <_dtoa_r+0x9ac>
 800cc12:	f000 fd0f 	bl	800d634 <__multadd>
 800cc16:	4629      	mov	r1, r5
 800cc18:	4607      	mov	r7, r0
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	220a      	movs	r2, #10
 800cc1e:	4658      	mov	r0, fp
 800cc20:	f000 fd08 	bl	800d634 <__multadd>
 800cc24:	4605      	mov	r5, r0
 800cc26:	e7f0      	b.n	800cc0a <_dtoa_r+0xaba>
 800cc28:	9b00      	ldr	r3, [sp, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	bfcc      	ite	gt
 800cc2e:	461e      	movgt	r6, r3
 800cc30:	2601      	movle	r6, #1
 800cc32:	4456      	add	r6, sl
 800cc34:	2700      	movs	r7, #0
 800cc36:	4649      	mov	r1, r9
 800cc38:	2201      	movs	r2, #1
 800cc3a:	4658      	mov	r0, fp
 800cc3c:	f000 fef0 	bl	800da20 <__lshift>
 800cc40:	4621      	mov	r1, r4
 800cc42:	4681      	mov	r9, r0
 800cc44:	f000 ff58 	bl	800daf8 <__mcmp>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	dcb0      	bgt.n	800cbae <_dtoa_r+0xa5e>
 800cc4c:	d102      	bne.n	800cc54 <_dtoa_r+0xb04>
 800cc4e:	f018 0f01 	tst.w	r8, #1
 800cc52:	d1ac      	bne.n	800cbae <_dtoa_r+0xa5e>
 800cc54:	4633      	mov	r3, r6
 800cc56:	461e      	mov	r6, r3
 800cc58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc5c:	2a30      	cmp	r2, #48	@ 0x30
 800cc5e:	d0fa      	beq.n	800cc56 <_dtoa_r+0xb06>
 800cc60:	e5c2      	b.n	800c7e8 <_dtoa_r+0x698>
 800cc62:	459a      	cmp	sl, r3
 800cc64:	d1a4      	bne.n	800cbb0 <_dtoa_r+0xa60>
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	2331      	movs	r3, #49	@ 0x31
 800cc6e:	f88a 3000 	strb.w	r3, [sl]
 800cc72:	e5b9      	b.n	800c7e8 <_dtoa_r+0x698>
 800cc74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ccd4 <_dtoa_r+0xb84>
 800cc7a:	b11b      	cbz	r3, 800cc84 <_dtoa_r+0xb34>
 800cc7c:	f10a 0308 	add.w	r3, sl, #8
 800cc80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	4650      	mov	r0, sl
 800cc86:	b019      	add	sp, #100	@ 0x64
 800cc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	f77f ae37 	ble.w	800c902 <_dtoa_r+0x7b2>
 800cc94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc96:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc98:	2001      	movs	r0, #1
 800cc9a:	e655      	b.n	800c948 <_dtoa_r+0x7f8>
 800cc9c:	9b00      	ldr	r3, [sp, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f77f aed6 	ble.w	800ca50 <_dtoa_r+0x900>
 800cca4:	4656      	mov	r6, sl
 800cca6:	4621      	mov	r1, r4
 800cca8:	4648      	mov	r0, r9
 800ccaa:	f7ff f9c7 	bl	800c03c <quorem>
 800ccae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ccb2:	f806 8b01 	strb.w	r8, [r6], #1
 800ccb6:	9b00      	ldr	r3, [sp, #0]
 800ccb8:	eba6 020a 	sub.w	r2, r6, sl
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	ddb3      	ble.n	800cc28 <_dtoa_r+0xad8>
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	220a      	movs	r2, #10
 800ccc6:	4658      	mov	r0, fp
 800ccc8:	f000 fcb4 	bl	800d634 <__multadd>
 800cccc:	4681      	mov	r9, r0
 800ccce:	e7ea      	b.n	800cca6 <_dtoa_r+0xb56>
 800ccd0:	0800fff5 	.word	0x0800fff5
 800ccd4:	0800ff79 	.word	0x0800ff79

0800ccd8 <_free_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4605      	mov	r5, r0
 800ccdc:	2900      	cmp	r1, #0
 800ccde:	d041      	beq.n	800cd64 <_free_r+0x8c>
 800cce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce4:	1f0c      	subs	r4, r1, #4
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	bfb8      	it	lt
 800ccea:	18e4      	addlt	r4, r4, r3
 800ccec:	f000 fc34 	bl	800d558 <__malloc_lock>
 800ccf0:	4a1d      	ldr	r2, [pc, #116]	@ (800cd68 <_free_r+0x90>)
 800ccf2:	6813      	ldr	r3, [r2, #0]
 800ccf4:	b933      	cbnz	r3, 800cd04 <_free_r+0x2c>
 800ccf6:	6063      	str	r3, [r4, #4]
 800ccf8:	6014      	str	r4, [r2, #0]
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd00:	f000 bc30 	b.w	800d564 <__malloc_unlock>
 800cd04:	42a3      	cmp	r3, r4
 800cd06:	d908      	bls.n	800cd1a <_free_r+0x42>
 800cd08:	6820      	ldr	r0, [r4, #0]
 800cd0a:	1821      	adds	r1, r4, r0
 800cd0c:	428b      	cmp	r3, r1
 800cd0e:	bf01      	itttt	eq
 800cd10:	6819      	ldreq	r1, [r3, #0]
 800cd12:	685b      	ldreq	r3, [r3, #4]
 800cd14:	1809      	addeq	r1, r1, r0
 800cd16:	6021      	streq	r1, [r4, #0]
 800cd18:	e7ed      	b.n	800ccf6 <_free_r+0x1e>
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	b10b      	cbz	r3, 800cd24 <_free_r+0x4c>
 800cd20:	42a3      	cmp	r3, r4
 800cd22:	d9fa      	bls.n	800cd1a <_free_r+0x42>
 800cd24:	6811      	ldr	r1, [r2, #0]
 800cd26:	1850      	adds	r0, r2, r1
 800cd28:	42a0      	cmp	r0, r4
 800cd2a:	d10b      	bne.n	800cd44 <_free_r+0x6c>
 800cd2c:	6820      	ldr	r0, [r4, #0]
 800cd2e:	4401      	add	r1, r0
 800cd30:	1850      	adds	r0, r2, r1
 800cd32:	4283      	cmp	r3, r0
 800cd34:	6011      	str	r1, [r2, #0]
 800cd36:	d1e0      	bne.n	800ccfa <_free_r+0x22>
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	6053      	str	r3, [r2, #4]
 800cd3e:	4408      	add	r0, r1
 800cd40:	6010      	str	r0, [r2, #0]
 800cd42:	e7da      	b.n	800ccfa <_free_r+0x22>
 800cd44:	d902      	bls.n	800cd4c <_free_r+0x74>
 800cd46:	230c      	movs	r3, #12
 800cd48:	602b      	str	r3, [r5, #0]
 800cd4a:	e7d6      	b.n	800ccfa <_free_r+0x22>
 800cd4c:	6820      	ldr	r0, [r4, #0]
 800cd4e:	1821      	adds	r1, r4, r0
 800cd50:	428b      	cmp	r3, r1
 800cd52:	bf04      	itt	eq
 800cd54:	6819      	ldreq	r1, [r3, #0]
 800cd56:	685b      	ldreq	r3, [r3, #4]
 800cd58:	6063      	str	r3, [r4, #4]
 800cd5a:	bf04      	itt	eq
 800cd5c:	1809      	addeq	r1, r1, r0
 800cd5e:	6021      	streq	r1, [r4, #0]
 800cd60:	6054      	str	r4, [r2, #4]
 800cd62:	e7ca      	b.n	800ccfa <_free_r+0x22>
 800cd64:	bd38      	pop	{r3, r4, r5, pc}
 800cd66:	bf00      	nop
 800cd68:	20000bec 	.word	0x20000bec

0800cd6c <rshift>:
 800cd6c:	6903      	ldr	r3, [r0, #16]
 800cd6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd7a:	f100 0414 	add.w	r4, r0, #20
 800cd7e:	dd45      	ble.n	800ce0c <rshift+0xa0>
 800cd80:	f011 011f 	ands.w	r1, r1, #31
 800cd84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd8c:	d10c      	bne.n	800cda8 <rshift+0x3c>
 800cd8e:	f100 0710 	add.w	r7, r0, #16
 800cd92:	4629      	mov	r1, r5
 800cd94:	42b1      	cmp	r1, r6
 800cd96:	d334      	bcc.n	800ce02 <rshift+0x96>
 800cd98:	1a9b      	subs	r3, r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	1eea      	subs	r2, r5, #3
 800cd9e:	4296      	cmp	r6, r2
 800cda0:	bf38      	it	cc
 800cda2:	2300      	movcc	r3, #0
 800cda4:	4423      	add	r3, r4
 800cda6:	e015      	b.n	800cdd4 <rshift+0x68>
 800cda8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdac:	f1c1 0820 	rsb	r8, r1, #32
 800cdb0:	40cf      	lsrs	r7, r1
 800cdb2:	f105 0e04 	add.w	lr, r5, #4
 800cdb6:	46a1      	mov	r9, r4
 800cdb8:	4576      	cmp	r6, lr
 800cdba:	46f4      	mov	ip, lr
 800cdbc:	d815      	bhi.n	800cdea <rshift+0x7e>
 800cdbe:	1a9a      	subs	r2, r3, r2
 800cdc0:	0092      	lsls	r2, r2, #2
 800cdc2:	3a04      	subs	r2, #4
 800cdc4:	3501      	adds	r5, #1
 800cdc6:	42ae      	cmp	r6, r5
 800cdc8:	bf38      	it	cc
 800cdca:	2200      	movcc	r2, #0
 800cdcc:	18a3      	adds	r3, r4, r2
 800cdce:	50a7      	str	r7, [r4, r2]
 800cdd0:	b107      	cbz	r7, 800cdd4 <rshift+0x68>
 800cdd2:	3304      	adds	r3, #4
 800cdd4:	1b1a      	subs	r2, r3, r4
 800cdd6:	42a3      	cmp	r3, r4
 800cdd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cddc:	bf08      	it	eq
 800cdde:	2300      	moveq	r3, #0
 800cde0:	6102      	str	r2, [r0, #16]
 800cde2:	bf08      	it	eq
 800cde4:	6143      	streq	r3, [r0, #20]
 800cde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdea:	f8dc c000 	ldr.w	ip, [ip]
 800cdee:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdf2:	ea4c 0707 	orr.w	r7, ip, r7
 800cdf6:	f849 7b04 	str.w	r7, [r9], #4
 800cdfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cdfe:	40cf      	lsrs	r7, r1
 800ce00:	e7da      	b.n	800cdb8 <rshift+0x4c>
 800ce02:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce06:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce0a:	e7c3      	b.n	800cd94 <rshift+0x28>
 800ce0c:	4623      	mov	r3, r4
 800ce0e:	e7e1      	b.n	800cdd4 <rshift+0x68>

0800ce10 <__hexdig_fun>:
 800ce10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ce14:	2b09      	cmp	r3, #9
 800ce16:	d802      	bhi.n	800ce1e <__hexdig_fun+0xe>
 800ce18:	3820      	subs	r0, #32
 800ce1a:	b2c0      	uxtb	r0, r0
 800ce1c:	4770      	bx	lr
 800ce1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ce22:	2b05      	cmp	r3, #5
 800ce24:	d801      	bhi.n	800ce2a <__hexdig_fun+0x1a>
 800ce26:	3847      	subs	r0, #71	@ 0x47
 800ce28:	e7f7      	b.n	800ce1a <__hexdig_fun+0xa>
 800ce2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ce2e:	2b05      	cmp	r3, #5
 800ce30:	d801      	bhi.n	800ce36 <__hexdig_fun+0x26>
 800ce32:	3827      	subs	r0, #39	@ 0x27
 800ce34:	e7f1      	b.n	800ce1a <__hexdig_fun+0xa>
 800ce36:	2000      	movs	r0, #0
 800ce38:	4770      	bx	lr
	...

0800ce3c <__gethex>:
 800ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce40:	b085      	sub	sp, #20
 800ce42:	468a      	mov	sl, r1
 800ce44:	9302      	str	r3, [sp, #8]
 800ce46:	680b      	ldr	r3, [r1, #0]
 800ce48:	9001      	str	r0, [sp, #4]
 800ce4a:	4690      	mov	r8, r2
 800ce4c:	1c9c      	adds	r4, r3, #2
 800ce4e:	46a1      	mov	r9, r4
 800ce50:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ce54:	2830      	cmp	r0, #48	@ 0x30
 800ce56:	d0fa      	beq.n	800ce4e <__gethex+0x12>
 800ce58:	eba9 0303 	sub.w	r3, r9, r3
 800ce5c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ce60:	f7ff ffd6 	bl	800ce10 <__hexdig_fun>
 800ce64:	4605      	mov	r5, r0
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d168      	bne.n	800cf3c <__gethex+0x100>
 800ce6a:	49a0      	ldr	r1, [pc, #640]	@ (800d0ec <__gethex+0x2b0>)
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	4648      	mov	r0, r9
 800ce70:	f7ff f83b 	bl	800beea <strncmp>
 800ce74:	4607      	mov	r7, r0
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d167      	bne.n	800cf4a <__gethex+0x10e>
 800ce7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ce7e:	4626      	mov	r6, r4
 800ce80:	f7ff ffc6 	bl	800ce10 <__hexdig_fun>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d062      	beq.n	800cf4e <__gethex+0x112>
 800ce88:	4623      	mov	r3, r4
 800ce8a:	7818      	ldrb	r0, [r3, #0]
 800ce8c:	2830      	cmp	r0, #48	@ 0x30
 800ce8e:	4699      	mov	r9, r3
 800ce90:	f103 0301 	add.w	r3, r3, #1
 800ce94:	d0f9      	beq.n	800ce8a <__gethex+0x4e>
 800ce96:	f7ff ffbb 	bl	800ce10 <__hexdig_fun>
 800ce9a:	fab0 f580 	clz	r5, r0
 800ce9e:	096d      	lsrs	r5, r5, #5
 800cea0:	f04f 0b01 	mov.w	fp, #1
 800cea4:	464a      	mov	r2, r9
 800cea6:	4616      	mov	r6, r2
 800cea8:	3201      	adds	r2, #1
 800ceaa:	7830      	ldrb	r0, [r6, #0]
 800ceac:	f7ff ffb0 	bl	800ce10 <__hexdig_fun>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d1f8      	bne.n	800cea6 <__gethex+0x6a>
 800ceb4:	498d      	ldr	r1, [pc, #564]	@ (800d0ec <__gethex+0x2b0>)
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	4630      	mov	r0, r6
 800ceba:	f7ff f816 	bl	800beea <strncmp>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d13f      	bne.n	800cf42 <__gethex+0x106>
 800cec2:	b944      	cbnz	r4, 800ced6 <__gethex+0x9a>
 800cec4:	1c74      	adds	r4, r6, #1
 800cec6:	4622      	mov	r2, r4
 800cec8:	4616      	mov	r6, r2
 800ceca:	3201      	adds	r2, #1
 800cecc:	7830      	ldrb	r0, [r6, #0]
 800cece:	f7ff ff9f 	bl	800ce10 <__hexdig_fun>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d1f8      	bne.n	800cec8 <__gethex+0x8c>
 800ced6:	1ba4      	subs	r4, r4, r6
 800ced8:	00a7      	lsls	r7, r4, #2
 800ceda:	7833      	ldrb	r3, [r6, #0]
 800cedc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cee0:	2b50      	cmp	r3, #80	@ 0x50
 800cee2:	d13e      	bne.n	800cf62 <__gethex+0x126>
 800cee4:	7873      	ldrb	r3, [r6, #1]
 800cee6:	2b2b      	cmp	r3, #43	@ 0x2b
 800cee8:	d033      	beq.n	800cf52 <__gethex+0x116>
 800ceea:	2b2d      	cmp	r3, #45	@ 0x2d
 800ceec:	d034      	beq.n	800cf58 <__gethex+0x11c>
 800ceee:	1c71      	adds	r1, r6, #1
 800cef0:	2400      	movs	r4, #0
 800cef2:	7808      	ldrb	r0, [r1, #0]
 800cef4:	f7ff ff8c 	bl	800ce10 <__hexdig_fun>
 800cef8:	1e43      	subs	r3, r0, #1
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	2b18      	cmp	r3, #24
 800cefe:	d830      	bhi.n	800cf62 <__gethex+0x126>
 800cf00:	f1a0 0210 	sub.w	r2, r0, #16
 800cf04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf08:	f7ff ff82 	bl	800ce10 <__hexdig_fun>
 800cf0c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf10:	fa5f fc8c 	uxtb.w	ip, ip
 800cf14:	f1bc 0f18 	cmp.w	ip, #24
 800cf18:	f04f 030a 	mov.w	r3, #10
 800cf1c:	d91e      	bls.n	800cf5c <__gethex+0x120>
 800cf1e:	b104      	cbz	r4, 800cf22 <__gethex+0xe6>
 800cf20:	4252      	negs	r2, r2
 800cf22:	4417      	add	r7, r2
 800cf24:	f8ca 1000 	str.w	r1, [sl]
 800cf28:	b1ed      	cbz	r5, 800cf66 <__gethex+0x12a>
 800cf2a:	f1bb 0f00 	cmp.w	fp, #0
 800cf2e:	bf0c      	ite	eq
 800cf30:	2506      	moveq	r5, #6
 800cf32:	2500      	movne	r5, #0
 800cf34:	4628      	mov	r0, r5
 800cf36:	b005      	add	sp, #20
 800cf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3c:	2500      	movs	r5, #0
 800cf3e:	462c      	mov	r4, r5
 800cf40:	e7b0      	b.n	800cea4 <__gethex+0x68>
 800cf42:	2c00      	cmp	r4, #0
 800cf44:	d1c7      	bne.n	800ced6 <__gethex+0x9a>
 800cf46:	4627      	mov	r7, r4
 800cf48:	e7c7      	b.n	800ceda <__gethex+0x9e>
 800cf4a:	464e      	mov	r6, r9
 800cf4c:	462f      	mov	r7, r5
 800cf4e:	2501      	movs	r5, #1
 800cf50:	e7c3      	b.n	800ceda <__gethex+0x9e>
 800cf52:	2400      	movs	r4, #0
 800cf54:	1cb1      	adds	r1, r6, #2
 800cf56:	e7cc      	b.n	800cef2 <__gethex+0xb6>
 800cf58:	2401      	movs	r4, #1
 800cf5a:	e7fb      	b.n	800cf54 <__gethex+0x118>
 800cf5c:	fb03 0002 	mla	r0, r3, r2, r0
 800cf60:	e7ce      	b.n	800cf00 <__gethex+0xc4>
 800cf62:	4631      	mov	r1, r6
 800cf64:	e7de      	b.n	800cf24 <__gethex+0xe8>
 800cf66:	eba6 0309 	sub.w	r3, r6, r9
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	2b07      	cmp	r3, #7
 800cf70:	dc0a      	bgt.n	800cf88 <__gethex+0x14c>
 800cf72:	9801      	ldr	r0, [sp, #4]
 800cf74:	f000 fafc 	bl	800d570 <_Balloc>
 800cf78:	4604      	mov	r4, r0
 800cf7a:	b940      	cbnz	r0, 800cf8e <__gethex+0x152>
 800cf7c:	4b5c      	ldr	r3, [pc, #368]	@ (800d0f0 <__gethex+0x2b4>)
 800cf7e:	4602      	mov	r2, r0
 800cf80:	21e4      	movs	r1, #228	@ 0xe4
 800cf82:	485c      	ldr	r0, [pc, #368]	@ (800d0f4 <__gethex+0x2b8>)
 800cf84:	f001 fc32 	bl	800e7ec <__assert_func>
 800cf88:	3101      	adds	r1, #1
 800cf8a:	105b      	asrs	r3, r3, #1
 800cf8c:	e7ef      	b.n	800cf6e <__gethex+0x132>
 800cf8e:	f100 0a14 	add.w	sl, r0, #20
 800cf92:	2300      	movs	r3, #0
 800cf94:	4655      	mov	r5, sl
 800cf96:	469b      	mov	fp, r3
 800cf98:	45b1      	cmp	r9, r6
 800cf9a:	d337      	bcc.n	800d00c <__gethex+0x1d0>
 800cf9c:	f845 bb04 	str.w	fp, [r5], #4
 800cfa0:	eba5 050a 	sub.w	r5, r5, sl
 800cfa4:	10ad      	asrs	r5, r5, #2
 800cfa6:	6125      	str	r5, [r4, #16]
 800cfa8:	4658      	mov	r0, fp
 800cfaa:	f000 fbd3 	bl	800d754 <__hi0bits>
 800cfae:	016d      	lsls	r5, r5, #5
 800cfb0:	f8d8 6000 	ldr.w	r6, [r8]
 800cfb4:	1a2d      	subs	r5, r5, r0
 800cfb6:	42b5      	cmp	r5, r6
 800cfb8:	dd54      	ble.n	800d064 <__gethex+0x228>
 800cfba:	1bad      	subs	r5, r5, r6
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 ff67 	bl	800de92 <__any_on>
 800cfc4:	4681      	mov	r9, r0
 800cfc6:	b178      	cbz	r0, 800cfe8 <__gethex+0x1ac>
 800cfc8:	1e6b      	subs	r3, r5, #1
 800cfca:	1159      	asrs	r1, r3, #5
 800cfcc:	f003 021f 	and.w	r2, r3, #31
 800cfd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cfd4:	f04f 0901 	mov.w	r9, #1
 800cfd8:	fa09 f202 	lsl.w	r2, r9, r2
 800cfdc:	420a      	tst	r2, r1
 800cfde:	d003      	beq.n	800cfe8 <__gethex+0x1ac>
 800cfe0:	454b      	cmp	r3, r9
 800cfe2:	dc36      	bgt.n	800d052 <__gethex+0x216>
 800cfe4:	f04f 0902 	mov.w	r9, #2
 800cfe8:	4629      	mov	r1, r5
 800cfea:	4620      	mov	r0, r4
 800cfec:	f7ff febe 	bl	800cd6c <rshift>
 800cff0:	442f      	add	r7, r5
 800cff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cff6:	42bb      	cmp	r3, r7
 800cff8:	da42      	bge.n	800d080 <__gethex+0x244>
 800cffa:	9801      	ldr	r0, [sp, #4]
 800cffc:	4621      	mov	r1, r4
 800cffe:	f000 faf7 	bl	800d5f0 <_Bfree>
 800d002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d004:	2300      	movs	r3, #0
 800d006:	6013      	str	r3, [r2, #0]
 800d008:	25a3      	movs	r5, #163	@ 0xa3
 800d00a:	e793      	b.n	800cf34 <__gethex+0xf8>
 800d00c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d010:	2a2e      	cmp	r2, #46	@ 0x2e
 800d012:	d012      	beq.n	800d03a <__gethex+0x1fe>
 800d014:	2b20      	cmp	r3, #32
 800d016:	d104      	bne.n	800d022 <__gethex+0x1e6>
 800d018:	f845 bb04 	str.w	fp, [r5], #4
 800d01c:	f04f 0b00 	mov.w	fp, #0
 800d020:	465b      	mov	r3, fp
 800d022:	7830      	ldrb	r0, [r6, #0]
 800d024:	9303      	str	r3, [sp, #12]
 800d026:	f7ff fef3 	bl	800ce10 <__hexdig_fun>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	f000 000f 	and.w	r0, r0, #15
 800d030:	4098      	lsls	r0, r3
 800d032:	ea4b 0b00 	orr.w	fp, fp, r0
 800d036:	3304      	adds	r3, #4
 800d038:	e7ae      	b.n	800cf98 <__gethex+0x15c>
 800d03a:	45b1      	cmp	r9, r6
 800d03c:	d8ea      	bhi.n	800d014 <__gethex+0x1d8>
 800d03e:	492b      	ldr	r1, [pc, #172]	@ (800d0ec <__gethex+0x2b0>)
 800d040:	9303      	str	r3, [sp, #12]
 800d042:	2201      	movs	r2, #1
 800d044:	4630      	mov	r0, r6
 800d046:	f7fe ff50 	bl	800beea <strncmp>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d1e1      	bne.n	800d014 <__gethex+0x1d8>
 800d050:	e7a2      	b.n	800cf98 <__gethex+0x15c>
 800d052:	1ea9      	subs	r1, r5, #2
 800d054:	4620      	mov	r0, r4
 800d056:	f000 ff1c 	bl	800de92 <__any_on>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d0c2      	beq.n	800cfe4 <__gethex+0x1a8>
 800d05e:	f04f 0903 	mov.w	r9, #3
 800d062:	e7c1      	b.n	800cfe8 <__gethex+0x1ac>
 800d064:	da09      	bge.n	800d07a <__gethex+0x23e>
 800d066:	1b75      	subs	r5, r6, r5
 800d068:	4621      	mov	r1, r4
 800d06a:	9801      	ldr	r0, [sp, #4]
 800d06c:	462a      	mov	r2, r5
 800d06e:	f000 fcd7 	bl	800da20 <__lshift>
 800d072:	1b7f      	subs	r7, r7, r5
 800d074:	4604      	mov	r4, r0
 800d076:	f100 0a14 	add.w	sl, r0, #20
 800d07a:	f04f 0900 	mov.w	r9, #0
 800d07e:	e7b8      	b.n	800cff2 <__gethex+0x1b6>
 800d080:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d084:	42bd      	cmp	r5, r7
 800d086:	dd6f      	ble.n	800d168 <__gethex+0x32c>
 800d088:	1bed      	subs	r5, r5, r7
 800d08a:	42ae      	cmp	r6, r5
 800d08c:	dc34      	bgt.n	800d0f8 <__gethex+0x2bc>
 800d08e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d092:	2b02      	cmp	r3, #2
 800d094:	d022      	beq.n	800d0dc <__gethex+0x2a0>
 800d096:	2b03      	cmp	r3, #3
 800d098:	d024      	beq.n	800d0e4 <__gethex+0x2a8>
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d115      	bne.n	800d0ca <__gethex+0x28e>
 800d09e:	42ae      	cmp	r6, r5
 800d0a0:	d113      	bne.n	800d0ca <__gethex+0x28e>
 800d0a2:	2e01      	cmp	r6, #1
 800d0a4:	d10b      	bne.n	800d0be <__gethex+0x282>
 800d0a6:	9a02      	ldr	r2, [sp, #8]
 800d0a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0ac:	6013      	str	r3, [r2, #0]
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	6123      	str	r3, [r4, #16]
 800d0b2:	f8ca 3000 	str.w	r3, [sl]
 800d0b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0b8:	2562      	movs	r5, #98	@ 0x62
 800d0ba:	601c      	str	r4, [r3, #0]
 800d0bc:	e73a      	b.n	800cf34 <__gethex+0xf8>
 800d0be:	1e71      	subs	r1, r6, #1
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 fee6 	bl	800de92 <__any_on>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d1ed      	bne.n	800d0a6 <__gethex+0x26a>
 800d0ca:	9801      	ldr	r0, [sp, #4]
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	f000 fa8f 	bl	800d5f0 <_Bfree>
 800d0d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	6013      	str	r3, [r2, #0]
 800d0d8:	2550      	movs	r5, #80	@ 0x50
 800d0da:	e72b      	b.n	800cf34 <__gethex+0xf8>
 800d0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1f3      	bne.n	800d0ca <__gethex+0x28e>
 800d0e2:	e7e0      	b.n	800d0a6 <__gethex+0x26a>
 800d0e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d1dd      	bne.n	800d0a6 <__gethex+0x26a>
 800d0ea:	e7ee      	b.n	800d0ca <__gethex+0x28e>
 800d0ec:	0800fee4 	.word	0x0800fee4
 800d0f0:	0800fff5 	.word	0x0800fff5
 800d0f4:	08010006 	.word	0x08010006
 800d0f8:	1e6f      	subs	r7, r5, #1
 800d0fa:	f1b9 0f00 	cmp.w	r9, #0
 800d0fe:	d130      	bne.n	800d162 <__gethex+0x326>
 800d100:	b127      	cbz	r7, 800d10c <__gethex+0x2d0>
 800d102:	4639      	mov	r1, r7
 800d104:	4620      	mov	r0, r4
 800d106:	f000 fec4 	bl	800de92 <__any_on>
 800d10a:	4681      	mov	r9, r0
 800d10c:	117a      	asrs	r2, r7, #5
 800d10e:	2301      	movs	r3, #1
 800d110:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d114:	f007 071f 	and.w	r7, r7, #31
 800d118:	40bb      	lsls	r3, r7
 800d11a:	4213      	tst	r3, r2
 800d11c:	4629      	mov	r1, r5
 800d11e:	4620      	mov	r0, r4
 800d120:	bf18      	it	ne
 800d122:	f049 0902 	orrne.w	r9, r9, #2
 800d126:	f7ff fe21 	bl	800cd6c <rshift>
 800d12a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d12e:	1b76      	subs	r6, r6, r5
 800d130:	2502      	movs	r5, #2
 800d132:	f1b9 0f00 	cmp.w	r9, #0
 800d136:	d047      	beq.n	800d1c8 <__gethex+0x38c>
 800d138:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d015      	beq.n	800d16c <__gethex+0x330>
 800d140:	2b03      	cmp	r3, #3
 800d142:	d017      	beq.n	800d174 <__gethex+0x338>
 800d144:	2b01      	cmp	r3, #1
 800d146:	d109      	bne.n	800d15c <__gethex+0x320>
 800d148:	f019 0f02 	tst.w	r9, #2
 800d14c:	d006      	beq.n	800d15c <__gethex+0x320>
 800d14e:	f8da 3000 	ldr.w	r3, [sl]
 800d152:	ea49 0903 	orr.w	r9, r9, r3
 800d156:	f019 0f01 	tst.w	r9, #1
 800d15a:	d10e      	bne.n	800d17a <__gethex+0x33e>
 800d15c:	f045 0510 	orr.w	r5, r5, #16
 800d160:	e032      	b.n	800d1c8 <__gethex+0x38c>
 800d162:	f04f 0901 	mov.w	r9, #1
 800d166:	e7d1      	b.n	800d10c <__gethex+0x2d0>
 800d168:	2501      	movs	r5, #1
 800d16a:	e7e2      	b.n	800d132 <__gethex+0x2f6>
 800d16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d16e:	f1c3 0301 	rsb	r3, r3, #1
 800d172:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0f0      	beq.n	800d15c <__gethex+0x320>
 800d17a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d17e:	f104 0314 	add.w	r3, r4, #20
 800d182:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d186:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d18a:	f04f 0c00 	mov.w	ip, #0
 800d18e:	4618      	mov	r0, r3
 800d190:	f853 2b04 	ldr.w	r2, [r3], #4
 800d194:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d198:	d01b      	beq.n	800d1d2 <__gethex+0x396>
 800d19a:	3201      	adds	r2, #1
 800d19c:	6002      	str	r2, [r0, #0]
 800d19e:	2d02      	cmp	r5, #2
 800d1a0:	f104 0314 	add.w	r3, r4, #20
 800d1a4:	d13c      	bne.n	800d220 <__gethex+0x3e4>
 800d1a6:	f8d8 2000 	ldr.w	r2, [r8]
 800d1aa:	3a01      	subs	r2, #1
 800d1ac:	42b2      	cmp	r2, r6
 800d1ae:	d109      	bne.n	800d1c4 <__gethex+0x388>
 800d1b0:	1171      	asrs	r1, r6, #5
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1b8:	f006 061f 	and.w	r6, r6, #31
 800d1bc:	fa02 f606 	lsl.w	r6, r2, r6
 800d1c0:	421e      	tst	r6, r3
 800d1c2:	d13a      	bne.n	800d23a <__gethex+0x3fe>
 800d1c4:	f045 0520 	orr.w	r5, r5, #32
 800d1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ca:	601c      	str	r4, [r3, #0]
 800d1cc:	9b02      	ldr	r3, [sp, #8]
 800d1ce:	601f      	str	r7, [r3, #0]
 800d1d0:	e6b0      	b.n	800cf34 <__gethex+0xf8>
 800d1d2:	4299      	cmp	r1, r3
 800d1d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d1d8:	d8d9      	bhi.n	800d18e <__gethex+0x352>
 800d1da:	68a3      	ldr	r3, [r4, #8]
 800d1dc:	459b      	cmp	fp, r3
 800d1de:	db17      	blt.n	800d210 <__gethex+0x3d4>
 800d1e0:	6861      	ldr	r1, [r4, #4]
 800d1e2:	9801      	ldr	r0, [sp, #4]
 800d1e4:	3101      	adds	r1, #1
 800d1e6:	f000 f9c3 	bl	800d570 <_Balloc>
 800d1ea:	4681      	mov	r9, r0
 800d1ec:	b918      	cbnz	r0, 800d1f6 <__gethex+0x3ba>
 800d1ee:	4b1a      	ldr	r3, [pc, #104]	@ (800d258 <__gethex+0x41c>)
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	2184      	movs	r1, #132	@ 0x84
 800d1f4:	e6c5      	b.n	800cf82 <__gethex+0x146>
 800d1f6:	6922      	ldr	r2, [r4, #16]
 800d1f8:	3202      	adds	r2, #2
 800d1fa:	f104 010c 	add.w	r1, r4, #12
 800d1fe:	0092      	lsls	r2, r2, #2
 800d200:	300c      	adds	r0, #12
 800d202:	f7fe fefc 	bl	800bffe <memcpy>
 800d206:	4621      	mov	r1, r4
 800d208:	9801      	ldr	r0, [sp, #4]
 800d20a:	f000 f9f1 	bl	800d5f0 <_Bfree>
 800d20e:	464c      	mov	r4, r9
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d218:	6122      	str	r2, [r4, #16]
 800d21a:	2201      	movs	r2, #1
 800d21c:	615a      	str	r2, [r3, #20]
 800d21e:	e7be      	b.n	800d19e <__gethex+0x362>
 800d220:	6922      	ldr	r2, [r4, #16]
 800d222:	455a      	cmp	r2, fp
 800d224:	dd0b      	ble.n	800d23e <__gethex+0x402>
 800d226:	2101      	movs	r1, #1
 800d228:	4620      	mov	r0, r4
 800d22a:	f7ff fd9f 	bl	800cd6c <rshift>
 800d22e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d232:	3701      	adds	r7, #1
 800d234:	42bb      	cmp	r3, r7
 800d236:	f6ff aee0 	blt.w	800cffa <__gethex+0x1be>
 800d23a:	2501      	movs	r5, #1
 800d23c:	e7c2      	b.n	800d1c4 <__gethex+0x388>
 800d23e:	f016 061f 	ands.w	r6, r6, #31
 800d242:	d0fa      	beq.n	800d23a <__gethex+0x3fe>
 800d244:	4453      	add	r3, sl
 800d246:	f1c6 0620 	rsb	r6, r6, #32
 800d24a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d24e:	f000 fa81 	bl	800d754 <__hi0bits>
 800d252:	42b0      	cmp	r0, r6
 800d254:	dbe7      	blt.n	800d226 <__gethex+0x3ea>
 800d256:	e7f0      	b.n	800d23a <__gethex+0x3fe>
 800d258:	0800fff5 	.word	0x0800fff5

0800d25c <L_shift>:
 800d25c:	f1c2 0208 	rsb	r2, r2, #8
 800d260:	0092      	lsls	r2, r2, #2
 800d262:	b570      	push	{r4, r5, r6, lr}
 800d264:	f1c2 0620 	rsb	r6, r2, #32
 800d268:	6843      	ldr	r3, [r0, #4]
 800d26a:	6804      	ldr	r4, [r0, #0]
 800d26c:	fa03 f506 	lsl.w	r5, r3, r6
 800d270:	432c      	orrs	r4, r5
 800d272:	40d3      	lsrs	r3, r2
 800d274:	6004      	str	r4, [r0, #0]
 800d276:	f840 3f04 	str.w	r3, [r0, #4]!
 800d27a:	4288      	cmp	r0, r1
 800d27c:	d3f4      	bcc.n	800d268 <L_shift+0xc>
 800d27e:	bd70      	pop	{r4, r5, r6, pc}

0800d280 <__match>:
 800d280:	b530      	push	{r4, r5, lr}
 800d282:	6803      	ldr	r3, [r0, #0]
 800d284:	3301      	adds	r3, #1
 800d286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d28a:	b914      	cbnz	r4, 800d292 <__match+0x12>
 800d28c:	6003      	str	r3, [r0, #0]
 800d28e:	2001      	movs	r0, #1
 800d290:	bd30      	pop	{r4, r5, pc}
 800d292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d296:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d29a:	2d19      	cmp	r5, #25
 800d29c:	bf98      	it	ls
 800d29e:	3220      	addls	r2, #32
 800d2a0:	42a2      	cmp	r2, r4
 800d2a2:	d0f0      	beq.n	800d286 <__match+0x6>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	e7f3      	b.n	800d290 <__match+0x10>

0800d2a8 <__hexnan>:
 800d2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	680b      	ldr	r3, [r1, #0]
 800d2ae:	6801      	ldr	r1, [r0, #0]
 800d2b0:	115e      	asrs	r6, r3, #5
 800d2b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2b6:	f013 031f 	ands.w	r3, r3, #31
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	bf18      	it	ne
 800d2be:	3604      	addne	r6, #4
 800d2c0:	2500      	movs	r5, #0
 800d2c2:	1f37      	subs	r7, r6, #4
 800d2c4:	4682      	mov	sl, r0
 800d2c6:	4690      	mov	r8, r2
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2ce:	46b9      	mov	r9, r7
 800d2d0:	463c      	mov	r4, r7
 800d2d2:	9502      	str	r5, [sp, #8]
 800d2d4:	46ab      	mov	fp, r5
 800d2d6:	784a      	ldrb	r2, [r1, #1]
 800d2d8:	1c4b      	adds	r3, r1, #1
 800d2da:	9303      	str	r3, [sp, #12]
 800d2dc:	b342      	cbz	r2, 800d330 <__hexnan+0x88>
 800d2de:	4610      	mov	r0, r2
 800d2e0:	9105      	str	r1, [sp, #20]
 800d2e2:	9204      	str	r2, [sp, #16]
 800d2e4:	f7ff fd94 	bl	800ce10 <__hexdig_fun>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d151      	bne.n	800d390 <__hexnan+0xe8>
 800d2ec:	9a04      	ldr	r2, [sp, #16]
 800d2ee:	9905      	ldr	r1, [sp, #20]
 800d2f0:	2a20      	cmp	r2, #32
 800d2f2:	d818      	bhi.n	800d326 <__hexnan+0x7e>
 800d2f4:	9b02      	ldr	r3, [sp, #8]
 800d2f6:	459b      	cmp	fp, r3
 800d2f8:	dd13      	ble.n	800d322 <__hexnan+0x7a>
 800d2fa:	454c      	cmp	r4, r9
 800d2fc:	d206      	bcs.n	800d30c <__hexnan+0x64>
 800d2fe:	2d07      	cmp	r5, #7
 800d300:	dc04      	bgt.n	800d30c <__hexnan+0x64>
 800d302:	462a      	mov	r2, r5
 800d304:	4649      	mov	r1, r9
 800d306:	4620      	mov	r0, r4
 800d308:	f7ff ffa8 	bl	800d25c <L_shift>
 800d30c:	4544      	cmp	r4, r8
 800d30e:	d952      	bls.n	800d3b6 <__hexnan+0x10e>
 800d310:	2300      	movs	r3, #0
 800d312:	f1a4 0904 	sub.w	r9, r4, #4
 800d316:	f844 3c04 	str.w	r3, [r4, #-4]
 800d31a:	f8cd b008 	str.w	fp, [sp, #8]
 800d31e:	464c      	mov	r4, r9
 800d320:	461d      	mov	r5, r3
 800d322:	9903      	ldr	r1, [sp, #12]
 800d324:	e7d7      	b.n	800d2d6 <__hexnan+0x2e>
 800d326:	2a29      	cmp	r2, #41	@ 0x29
 800d328:	d157      	bne.n	800d3da <__hexnan+0x132>
 800d32a:	3102      	adds	r1, #2
 800d32c:	f8ca 1000 	str.w	r1, [sl]
 800d330:	f1bb 0f00 	cmp.w	fp, #0
 800d334:	d051      	beq.n	800d3da <__hexnan+0x132>
 800d336:	454c      	cmp	r4, r9
 800d338:	d206      	bcs.n	800d348 <__hexnan+0xa0>
 800d33a:	2d07      	cmp	r5, #7
 800d33c:	dc04      	bgt.n	800d348 <__hexnan+0xa0>
 800d33e:	462a      	mov	r2, r5
 800d340:	4649      	mov	r1, r9
 800d342:	4620      	mov	r0, r4
 800d344:	f7ff ff8a 	bl	800d25c <L_shift>
 800d348:	4544      	cmp	r4, r8
 800d34a:	d936      	bls.n	800d3ba <__hexnan+0x112>
 800d34c:	f1a8 0204 	sub.w	r2, r8, #4
 800d350:	4623      	mov	r3, r4
 800d352:	f853 1b04 	ldr.w	r1, [r3], #4
 800d356:	f842 1f04 	str.w	r1, [r2, #4]!
 800d35a:	429f      	cmp	r7, r3
 800d35c:	d2f9      	bcs.n	800d352 <__hexnan+0xaa>
 800d35e:	1b3b      	subs	r3, r7, r4
 800d360:	f023 0303 	bic.w	r3, r3, #3
 800d364:	3304      	adds	r3, #4
 800d366:	3401      	adds	r4, #1
 800d368:	3e03      	subs	r6, #3
 800d36a:	42b4      	cmp	r4, r6
 800d36c:	bf88      	it	hi
 800d36e:	2304      	movhi	r3, #4
 800d370:	4443      	add	r3, r8
 800d372:	2200      	movs	r2, #0
 800d374:	f843 2b04 	str.w	r2, [r3], #4
 800d378:	429f      	cmp	r7, r3
 800d37a:	d2fb      	bcs.n	800d374 <__hexnan+0xcc>
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	b91b      	cbnz	r3, 800d388 <__hexnan+0xe0>
 800d380:	4547      	cmp	r7, r8
 800d382:	d128      	bne.n	800d3d6 <__hexnan+0x12e>
 800d384:	2301      	movs	r3, #1
 800d386:	603b      	str	r3, [r7, #0]
 800d388:	2005      	movs	r0, #5
 800d38a:	b007      	add	sp, #28
 800d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d390:	3501      	adds	r5, #1
 800d392:	2d08      	cmp	r5, #8
 800d394:	f10b 0b01 	add.w	fp, fp, #1
 800d398:	dd06      	ble.n	800d3a8 <__hexnan+0x100>
 800d39a:	4544      	cmp	r4, r8
 800d39c:	d9c1      	bls.n	800d322 <__hexnan+0x7a>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3a4:	2501      	movs	r5, #1
 800d3a6:	3c04      	subs	r4, #4
 800d3a8:	6822      	ldr	r2, [r4, #0]
 800d3aa:	f000 000f 	and.w	r0, r0, #15
 800d3ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3b2:	6020      	str	r0, [r4, #0]
 800d3b4:	e7b5      	b.n	800d322 <__hexnan+0x7a>
 800d3b6:	2508      	movs	r5, #8
 800d3b8:	e7b3      	b.n	800d322 <__hexnan+0x7a>
 800d3ba:	9b01      	ldr	r3, [sp, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0dd      	beq.n	800d37c <__hexnan+0xd4>
 800d3c0:	f1c3 0320 	rsb	r3, r3, #32
 800d3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c8:	40da      	lsrs	r2, r3
 800d3ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3ce:	4013      	ands	r3, r2
 800d3d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3d4:	e7d2      	b.n	800d37c <__hexnan+0xd4>
 800d3d6:	3f04      	subs	r7, #4
 800d3d8:	e7d0      	b.n	800d37c <__hexnan+0xd4>
 800d3da:	2004      	movs	r0, #4
 800d3dc:	e7d5      	b.n	800d38a <__hexnan+0xe2>
	...

0800d3e0 <malloc>:
 800d3e0:	4b02      	ldr	r3, [pc, #8]	@ (800d3ec <malloc+0xc>)
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	6818      	ldr	r0, [r3, #0]
 800d3e6:	f000 b825 	b.w	800d434 <_malloc_r>
 800d3ea:	bf00      	nop
 800d3ec:	200001bc 	.word	0x200001bc

0800d3f0 <sbrk_aligned>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d430 <sbrk_aligned+0x40>)
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	6831      	ldr	r1, [r6, #0]
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	b911      	cbnz	r1, 800d402 <sbrk_aligned+0x12>
 800d3fc:	f001 f9e6 	bl	800e7cc <_sbrk_r>
 800d400:	6030      	str	r0, [r6, #0]
 800d402:	4621      	mov	r1, r4
 800d404:	4628      	mov	r0, r5
 800d406:	f001 f9e1 	bl	800e7cc <_sbrk_r>
 800d40a:	1c43      	adds	r3, r0, #1
 800d40c:	d103      	bne.n	800d416 <sbrk_aligned+0x26>
 800d40e:	f04f 34ff 	mov.w	r4, #4294967295
 800d412:	4620      	mov	r0, r4
 800d414:	bd70      	pop	{r4, r5, r6, pc}
 800d416:	1cc4      	adds	r4, r0, #3
 800d418:	f024 0403 	bic.w	r4, r4, #3
 800d41c:	42a0      	cmp	r0, r4
 800d41e:	d0f8      	beq.n	800d412 <sbrk_aligned+0x22>
 800d420:	1a21      	subs	r1, r4, r0
 800d422:	4628      	mov	r0, r5
 800d424:	f001 f9d2 	bl	800e7cc <_sbrk_r>
 800d428:	3001      	adds	r0, #1
 800d42a:	d1f2      	bne.n	800d412 <sbrk_aligned+0x22>
 800d42c:	e7ef      	b.n	800d40e <sbrk_aligned+0x1e>
 800d42e:	bf00      	nop
 800d430:	20000be8 	.word	0x20000be8

0800d434 <_malloc_r>:
 800d434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d438:	1ccd      	adds	r5, r1, #3
 800d43a:	f025 0503 	bic.w	r5, r5, #3
 800d43e:	3508      	adds	r5, #8
 800d440:	2d0c      	cmp	r5, #12
 800d442:	bf38      	it	cc
 800d444:	250c      	movcc	r5, #12
 800d446:	2d00      	cmp	r5, #0
 800d448:	4606      	mov	r6, r0
 800d44a:	db01      	blt.n	800d450 <_malloc_r+0x1c>
 800d44c:	42a9      	cmp	r1, r5
 800d44e:	d904      	bls.n	800d45a <_malloc_r+0x26>
 800d450:	230c      	movs	r3, #12
 800d452:	6033      	str	r3, [r6, #0]
 800d454:	2000      	movs	r0, #0
 800d456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d530 <_malloc_r+0xfc>
 800d45e:	f000 f87b 	bl	800d558 <__malloc_lock>
 800d462:	f8d8 3000 	ldr.w	r3, [r8]
 800d466:	461c      	mov	r4, r3
 800d468:	bb44      	cbnz	r4, 800d4bc <_malloc_r+0x88>
 800d46a:	4629      	mov	r1, r5
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7ff ffbf 	bl	800d3f0 <sbrk_aligned>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	4604      	mov	r4, r0
 800d476:	d158      	bne.n	800d52a <_malloc_r+0xf6>
 800d478:	f8d8 4000 	ldr.w	r4, [r8]
 800d47c:	4627      	mov	r7, r4
 800d47e:	2f00      	cmp	r7, #0
 800d480:	d143      	bne.n	800d50a <_malloc_r+0xd6>
 800d482:	2c00      	cmp	r4, #0
 800d484:	d04b      	beq.n	800d51e <_malloc_r+0xea>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	4639      	mov	r1, r7
 800d48a:	4630      	mov	r0, r6
 800d48c:	eb04 0903 	add.w	r9, r4, r3
 800d490:	f001 f99c 	bl	800e7cc <_sbrk_r>
 800d494:	4581      	cmp	r9, r0
 800d496:	d142      	bne.n	800d51e <_malloc_r+0xea>
 800d498:	6821      	ldr	r1, [r4, #0]
 800d49a:	1a6d      	subs	r5, r5, r1
 800d49c:	4629      	mov	r1, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f7ff ffa6 	bl	800d3f0 <sbrk_aligned>
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d03a      	beq.n	800d51e <_malloc_r+0xea>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	442b      	add	r3, r5
 800d4ac:	6023      	str	r3, [r4, #0]
 800d4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	bb62      	cbnz	r2, 800d510 <_malloc_r+0xdc>
 800d4b6:	f8c8 7000 	str.w	r7, [r8]
 800d4ba:	e00f      	b.n	800d4dc <_malloc_r+0xa8>
 800d4bc:	6822      	ldr	r2, [r4, #0]
 800d4be:	1b52      	subs	r2, r2, r5
 800d4c0:	d420      	bmi.n	800d504 <_malloc_r+0xd0>
 800d4c2:	2a0b      	cmp	r2, #11
 800d4c4:	d917      	bls.n	800d4f6 <_malloc_r+0xc2>
 800d4c6:	1961      	adds	r1, r4, r5
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	6025      	str	r5, [r4, #0]
 800d4cc:	bf18      	it	ne
 800d4ce:	6059      	strne	r1, [r3, #4]
 800d4d0:	6863      	ldr	r3, [r4, #4]
 800d4d2:	bf08      	it	eq
 800d4d4:	f8c8 1000 	streq.w	r1, [r8]
 800d4d8:	5162      	str	r2, [r4, r5]
 800d4da:	604b      	str	r3, [r1, #4]
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f000 f841 	bl	800d564 <__malloc_unlock>
 800d4e2:	f104 000b 	add.w	r0, r4, #11
 800d4e6:	1d23      	adds	r3, r4, #4
 800d4e8:	f020 0007 	bic.w	r0, r0, #7
 800d4ec:	1ac2      	subs	r2, r0, r3
 800d4ee:	bf1c      	itt	ne
 800d4f0:	1a1b      	subne	r3, r3, r0
 800d4f2:	50a3      	strne	r3, [r4, r2]
 800d4f4:	e7af      	b.n	800d456 <_malloc_r+0x22>
 800d4f6:	6862      	ldr	r2, [r4, #4]
 800d4f8:	42a3      	cmp	r3, r4
 800d4fa:	bf0c      	ite	eq
 800d4fc:	f8c8 2000 	streq.w	r2, [r8]
 800d500:	605a      	strne	r2, [r3, #4]
 800d502:	e7eb      	b.n	800d4dc <_malloc_r+0xa8>
 800d504:	4623      	mov	r3, r4
 800d506:	6864      	ldr	r4, [r4, #4]
 800d508:	e7ae      	b.n	800d468 <_malloc_r+0x34>
 800d50a:	463c      	mov	r4, r7
 800d50c:	687f      	ldr	r7, [r7, #4]
 800d50e:	e7b6      	b.n	800d47e <_malloc_r+0x4a>
 800d510:	461a      	mov	r2, r3
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	42a3      	cmp	r3, r4
 800d516:	d1fb      	bne.n	800d510 <_malloc_r+0xdc>
 800d518:	2300      	movs	r3, #0
 800d51a:	6053      	str	r3, [r2, #4]
 800d51c:	e7de      	b.n	800d4dc <_malloc_r+0xa8>
 800d51e:	230c      	movs	r3, #12
 800d520:	6033      	str	r3, [r6, #0]
 800d522:	4630      	mov	r0, r6
 800d524:	f000 f81e 	bl	800d564 <__malloc_unlock>
 800d528:	e794      	b.n	800d454 <_malloc_r+0x20>
 800d52a:	6005      	str	r5, [r0, #0]
 800d52c:	e7d6      	b.n	800d4dc <_malloc_r+0xa8>
 800d52e:	bf00      	nop
 800d530:	20000bec 	.word	0x20000bec

0800d534 <__ascii_mbtowc>:
 800d534:	b082      	sub	sp, #8
 800d536:	b901      	cbnz	r1, 800d53a <__ascii_mbtowc+0x6>
 800d538:	a901      	add	r1, sp, #4
 800d53a:	b142      	cbz	r2, 800d54e <__ascii_mbtowc+0x1a>
 800d53c:	b14b      	cbz	r3, 800d552 <__ascii_mbtowc+0x1e>
 800d53e:	7813      	ldrb	r3, [r2, #0]
 800d540:	600b      	str	r3, [r1, #0]
 800d542:	7812      	ldrb	r2, [r2, #0]
 800d544:	1e10      	subs	r0, r2, #0
 800d546:	bf18      	it	ne
 800d548:	2001      	movne	r0, #1
 800d54a:	b002      	add	sp, #8
 800d54c:	4770      	bx	lr
 800d54e:	4610      	mov	r0, r2
 800d550:	e7fb      	b.n	800d54a <__ascii_mbtowc+0x16>
 800d552:	f06f 0001 	mvn.w	r0, #1
 800d556:	e7f8      	b.n	800d54a <__ascii_mbtowc+0x16>

0800d558 <__malloc_lock>:
 800d558:	4801      	ldr	r0, [pc, #4]	@ (800d560 <__malloc_lock+0x8>)
 800d55a:	f7fe bd4e 	b.w	800bffa <__retarget_lock_acquire_recursive>
 800d55e:	bf00      	nop
 800d560:	20000be4 	.word	0x20000be4

0800d564 <__malloc_unlock>:
 800d564:	4801      	ldr	r0, [pc, #4]	@ (800d56c <__malloc_unlock+0x8>)
 800d566:	f7fe bd49 	b.w	800bffc <__retarget_lock_release_recursive>
 800d56a:	bf00      	nop
 800d56c:	20000be4 	.word	0x20000be4

0800d570 <_Balloc>:
 800d570:	b570      	push	{r4, r5, r6, lr}
 800d572:	69c6      	ldr	r6, [r0, #28]
 800d574:	4604      	mov	r4, r0
 800d576:	460d      	mov	r5, r1
 800d578:	b976      	cbnz	r6, 800d598 <_Balloc+0x28>
 800d57a:	2010      	movs	r0, #16
 800d57c:	f7ff ff30 	bl	800d3e0 <malloc>
 800d580:	4602      	mov	r2, r0
 800d582:	61e0      	str	r0, [r4, #28]
 800d584:	b920      	cbnz	r0, 800d590 <_Balloc+0x20>
 800d586:	4b18      	ldr	r3, [pc, #96]	@ (800d5e8 <_Balloc+0x78>)
 800d588:	4818      	ldr	r0, [pc, #96]	@ (800d5ec <_Balloc+0x7c>)
 800d58a:	216b      	movs	r1, #107	@ 0x6b
 800d58c:	f001 f92e 	bl	800e7ec <__assert_func>
 800d590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d594:	6006      	str	r6, [r0, #0]
 800d596:	60c6      	str	r6, [r0, #12]
 800d598:	69e6      	ldr	r6, [r4, #28]
 800d59a:	68f3      	ldr	r3, [r6, #12]
 800d59c:	b183      	cbz	r3, 800d5c0 <_Balloc+0x50>
 800d59e:	69e3      	ldr	r3, [r4, #28]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5a6:	b9b8      	cbnz	r0, 800d5d8 <_Balloc+0x68>
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	fa01 f605 	lsl.w	r6, r1, r5
 800d5ae:	1d72      	adds	r2, r6, #5
 800d5b0:	0092      	lsls	r2, r2, #2
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f001 f938 	bl	800e828 <_calloc_r>
 800d5b8:	b160      	cbz	r0, 800d5d4 <_Balloc+0x64>
 800d5ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5be:	e00e      	b.n	800d5de <_Balloc+0x6e>
 800d5c0:	2221      	movs	r2, #33	@ 0x21
 800d5c2:	2104      	movs	r1, #4
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f001 f92f 	bl	800e828 <_calloc_r>
 800d5ca:	69e3      	ldr	r3, [r4, #28]
 800d5cc:	60f0      	str	r0, [r6, #12]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1e4      	bne.n	800d59e <_Balloc+0x2e>
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	6802      	ldr	r2, [r0, #0]
 800d5da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5e4:	e7f7      	b.n	800d5d6 <_Balloc+0x66>
 800d5e6:	bf00      	nop
 800d5e8:	0800ff86 	.word	0x0800ff86
 800d5ec:	08010066 	.word	0x08010066

0800d5f0 <_Bfree>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	69c6      	ldr	r6, [r0, #28]
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	b976      	cbnz	r6, 800d618 <_Bfree+0x28>
 800d5fa:	2010      	movs	r0, #16
 800d5fc:	f7ff fef0 	bl	800d3e0 <malloc>
 800d600:	4602      	mov	r2, r0
 800d602:	61e8      	str	r0, [r5, #28]
 800d604:	b920      	cbnz	r0, 800d610 <_Bfree+0x20>
 800d606:	4b09      	ldr	r3, [pc, #36]	@ (800d62c <_Bfree+0x3c>)
 800d608:	4809      	ldr	r0, [pc, #36]	@ (800d630 <_Bfree+0x40>)
 800d60a:	218f      	movs	r1, #143	@ 0x8f
 800d60c:	f001 f8ee 	bl	800e7ec <__assert_func>
 800d610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d614:	6006      	str	r6, [r0, #0]
 800d616:	60c6      	str	r6, [r0, #12]
 800d618:	b13c      	cbz	r4, 800d62a <_Bfree+0x3a>
 800d61a:	69eb      	ldr	r3, [r5, #28]
 800d61c:	6862      	ldr	r2, [r4, #4]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d624:	6021      	str	r1, [r4, #0]
 800d626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d62a:	bd70      	pop	{r4, r5, r6, pc}
 800d62c:	0800ff86 	.word	0x0800ff86
 800d630:	08010066 	.word	0x08010066

0800d634 <__multadd>:
 800d634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d638:	690d      	ldr	r5, [r1, #16]
 800d63a:	4607      	mov	r7, r0
 800d63c:	460c      	mov	r4, r1
 800d63e:	461e      	mov	r6, r3
 800d640:	f101 0c14 	add.w	ip, r1, #20
 800d644:	2000      	movs	r0, #0
 800d646:	f8dc 3000 	ldr.w	r3, [ip]
 800d64a:	b299      	uxth	r1, r3
 800d64c:	fb02 6101 	mla	r1, r2, r1, r6
 800d650:	0c1e      	lsrs	r6, r3, #16
 800d652:	0c0b      	lsrs	r3, r1, #16
 800d654:	fb02 3306 	mla	r3, r2, r6, r3
 800d658:	b289      	uxth	r1, r1
 800d65a:	3001      	adds	r0, #1
 800d65c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d660:	4285      	cmp	r5, r0
 800d662:	f84c 1b04 	str.w	r1, [ip], #4
 800d666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d66a:	dcec      	bgt.n	800d646 <__multadd+0x12>
 800d66c:	b30e      	cbz	r6, 800d6b2 <__multadd+0x7e>
 800d66e:	68a3      	ldr	r3, [r4, #8]
 800d670:	42ab      	cmp	r3, r5
 800d672:	dc19      	bgt.n	800d6a8 <__multadd+0x74>
 800d674:	6861      	ldr	r1, [r4, #4]
 800d676:	4638      	mov	r0, r7
 800d678:	3101      	adds	r1, #1
 800d67a:	f7ff ff79 	bl	800d570 <_Balloc>
 800d67e:	4680      	mov	r8, r0
 800d680:	b928      	cbnz	r0, 800d68e <__multadd+0x5a>
 800d682:	4602      	mov	r2, r0
 800d684:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b8 <__multadd+0x84>)
 800d686:	480d      	ldr	r0, [pc, #52]	@ (800d6bc <__multadd+0x88>)
 800d688:	21ba      	movs	r1, #186	@ 0xba
 800d68a:	f001 f8af 	bl	800e7ec <__assert_func>
 800d68e:	6922      	ldr	r2, [r4, #16]
 800d690:	3202      	adds	r2, #2
 800d692:	f104 010c 	add.w	r1, r4, #12
 800d696:	0092      	lsls	r2, r2, #2
 800d698:	300c      	adds	r0, #12
 800d69a:	f7fe fcb0 	bl	800bffe <memcpy>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f7ff ffa5 	bl	800d5f0 <_Bfree>
 800d6a6:	4644      	mov	r4, r8
 800d6a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6ac:	3501      	adds	r5, #1
 800d6ae:	615e      	str	r6, [r3, #20]
 800d6b0:	6125      	str	r5, [r4, #16]
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	0800fff5 	.word	0x0800fff5
 800d6bc:	08010066 	.word	0x08010066

0800d6c0 <__s2b>:
 800d6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	4615      	mov	r5, r2
 800d6c8:	461f      	mov	r7, r3
 800d6ca:	2209      	movs	r2, #9
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	db09      	blt.n	800d6f0 <__s2b+0x30>
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f7ff ff47 	bl	800d570 <_Balloc>
 800d6e2:	b940      	cbnz	r0, 800d6f6 <__s2b+0x36>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	4b19      	ldr	r3, [pc, #100]	@ (800d74c <__s2b+0x8c>)
 800d6e8:	4819      	ldr	r0, [pc, #100]	@ (800d750 <__s2b+0x90>)
 800d6ea:	21d3      	movs	r1, #211	@ 0xd3
 800d6ec:	f001 f87e 	bl	800e7ec <__assert_func>
 800d6f0:	0052      	lsls	r2, r2, #1
 800d6f2:	3101      	adds	r1, #1
 800d6f4:	e7f0      	b.n	800d6d8 <__s2b+0x18>
 800d6f6:	9b08      	ldr	r3, [sp, #32]
 800d6f8:	6143      	str	r3, [r0, #20]
 800d6fa:	2d09      	cmp	r5, #9
 800d6fc:	f04f 0301 	mov.w	r3, #1
 800d700:	6103      	str	r3, [r0, #16]
 800d702:	dd16      	ble.n	800d732 <__s2b+0x72>
 800d704:	f104 0909 	add.w	r9, r4, #9
 800d708:	46c8      	mov	r8, r9
 800d70a:	442c      	add	r4, r5
 800d70c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d710:	4601      	mov	r1, r0
 800d712:	3b30      	subs	r3, #48	@ 0x30
 800d714:	220a      	movs	r2, #10
 800d716:	4630      	mov	r0, r6
 800d718:	f7ff ff8c 	bl	800d634 <__multadd>
 800d71c:	45a0      	cmp	r8, r4
 800d71e:	d1f5      	bne.n	800d70c <__s2b+0x4c>
 800d720:	f1a5 0408 	sub.w	r4, r5, #8
 800d724:	444c      	add	r4, r9
 800d726:	1b2d      	subs	r5, r5, r4
 800d728:	1963      	adds	r3, r4, r5
 800d72a:	42bb      	cmp	r3, r7
 800d72c:	db04      	blt.n	800d738 <__s2b+0x78>
 800d72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d732:	340a      	adds	r4, #10
 800d734:	2509      	movs	r5, #9
 800d736:	e7f6      	b.n	800d726 <__s2b+0x66>
 800d738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d73c:	4601      	mov	r1, r0
 800d73e:	3b30      	subs	r3, #48	@ 0x30
 800d740:	220a      	movs	r2, #10
 800d742:	4630      	mov	r0, r6
 800d744:	f7ff ff76 	bl	800d634 <__multadd>
 800d748:	e7ee      	b.n	800d728 <__s2b+0x68>
 800d74a:	bf00      	nop
 800d74c:	0800fff5 	.word	0x0800fff5
 800d750:	08010066 	.word	0x08010066

0800d754 <__hi0bits>:
 800d754:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d758:	4603      	mov	r3, r0
 800d75a:	bf36      	itet	cc
 800d75c:	0403      	lslcc	r3, r0, #16
 800d75e:	2000      	movcs	r0, #0
 800d760:	2010      	movcc	r0, #16
 800d762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d766:	bf3c      	itt	cc
 800d768:	021b      	lslcc	r3, r3, #8
 800d76a:	3008      	addcc	r0, #8
 800d76c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d770:	bf3c      	itt	cc
 800d772:	011b      	lslcc	r3, r3, #4
 800d774:	3004      	addcc	r0, #4
 800d776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d77a:	bf3c      	itt	cc
 800d77c:	009b      	lslcc	r3, r3, #2
 800d77e:	3002      	addcc	r0, #2
 800d780:	2b00      	cmp	r3, #0
 800d782:	db05      	blt.n	800d790 <__hi0bits+0x3c>
 800d784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d788:	f100 0001 	add.w	r0, r0, #1
 800d78c:	bf08      	it	eq
 800d78e:	2020      	moveq	r0, #32
 800d790:	4770      	bx	lr

0800d792 <__lo0bits>:
 800d792:	6803      	ldr	r3, [r0, #0]
 800d794:	4602      	mov	r2, r0
 800d796:	f013 0007 	ands.w	r0, r3, #7
 800d79a:	d00b      	beq.n	800d7b4 <__lo0bits+0x22>
 800d79c:	07d9      	lsls	r1, r3, #31
 800d79e:	d421      	bmi.n	800d7e4 <__lo0bits+0x52>
 800d7a0:	0798      	lsls	r0, r3, #30
 800d7a2:	bf49      	itett	mi
 800d7a4:	085b      	lsrmi	r3, r3, #1
 800d7a6:	089b      	lsrpl	r3, r3, #2
 800d7a8:	2001      	movmi	r0, #1
 800d7aa:	6013      	strmi	r3, [r2, #0]
 800d7ac:	bf5c      	itt	pl
 800d7ae:	6013      	strpl	r3, [r2, #0]
 800d7b0:	2002      	movpl	r0, #2
 800d7b2:	4770      	bx	lr
 800d7b4:	b299      	uxth	r1, r3
 800d7b6:	b909      	cbnz	r1, 800d7bc <__lo0bits+0x2a>
 800d7b8:	0c1b      	lsrs	r3, r3, #16
 800d7ba:	2010      	movs	r0, #16
 800d7bc:	b2d9      	uxtb	r1, r3
 800d7be:	b909      	cbnz	r1, 800d7c4 <__lo0bits+0x32>
 800d7c0:	3008      	adds	r0, #8
 800d7c2:	0a1b      	lsrs	r3, r3, #8
 800d7c4:	0719      	lsls	r1, r3, #28
 800d7c6:	bf04      	itt	eq
 800d7c8:	091b      	lsreq	r3, r3, #4
 800d7ca:	3004      	addeq	r0, #4
 800d7cc:	0799      	lsls	r1, r3, #30
 800d7ce:	bf04      	itt	eq
 800d7d0:	089b      	lsreq	r3, r3, #2
 800d7d2:	3002      	addeq	r0, #2
 800d7d4:	07d9      	lsls	r1, r3, #31
 800d7d6:	d403      	bmi.n	800d7e0 <__lo0bits+0x4e>
 800d7d8:	085b      	lsrs	r3, r3, #1
 800d7da:	f100 0001 	add.w	r0, r0, #1
 800d7de:	d003      	beq.n	800d7e8 <__lo0bits+0x56>
 800d7e0:	6013      	str	r3, [r2, #0]
 800d7e2:	4770      	bx	lr
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	4770      	bx	lr
 800d7e8:	2020      	movs	r0, #32
 800d7ea:	4770      	bx	lr

0800d7ec <__i2b>:
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	f7ff febd 	bl	800d570 <_Balloc>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	b928      	cbnz	r0, 800d806 <__i2b+0x1a>
 800d7fa:	4b05      	ldr	r3, [pc, #20]	@ (800d810 <__i2b+0x24>)
 800d7fc:	4805      	ldr	r0, [pc, #20]	@ (800d814 <__i2b+0x28>)
 800d7fe:	f240 1145 	movw	r1, #325	@ 0x145
 800d802:	f000 fff3 	bl	800e7ec <__assert_func>
 800d806:	2301      	movs	r3, #1
 800d808:	6144      	str	r4, [r0, #20]
 800d80a:	6103      	str	r3, [r0, #16]
 800d80c:	bd10      	pop	{r4, pc}
 800d80e:	bf00      	nop
 800d810:	0800fff5 	.word	0x0800fff5
 800d814:	08010066 	.word	0x08010066

0800d818 <__multiply>:
 800d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81c:	4614      	mov	r4, r2
 800d81e:	690a      	ldr	r2, [r1, #16]
 800d820:	6923      	ldr	r3, [r4, #16]
 800d822:	429a      	cmp	r2, r3
 800d824:	bfa8      	it	ge
 800d826:	4623      	movge	r3, r4
 800d828:	460f      	mov	r7, r1
 800d82a:	bfa4      	itt	ge
 800d82c:	460c      	movge	r4, r1
 800d82e:	461f      	movge	r7, r3
 800d830:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d834:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d838:	68a3      	ldr	r3, [r4, #8]
 800d83a:	6861      	ldr	r1, [r4, #4]
 800d83c:	eb0a 0609 	add.w	r6, sl, r9
 800d840:	42b3      	cmp	r3, r6
 800d842:	b085      	sub	sp, #20
 800d844:	bfb8      	it	lt
 800d846:	3101      	addlt	r1, #1
 800d848:	f7ff fe92 	bl	800d570 <_Balloc>
 800d84c:	b930      	cbnz	r0, 800d85c <__multiply+0x44>
 800d84e:	4602      	mov	r2, r0
 800d850:	4b44      	ldr	r3, [pc, #272]	@ (800d964 <__multiply+0x14c>)
 800d852:	4845      	ldr	r0, [pc, #276]	@ (800d968 <__multiply+0x150>)
 800d854:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d858:	f000 ffc8 	bl	800e7ec <__assert_func>
 800d85c:	f100 0514 	add.w	r5, r0, #20
 800d860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d864:	462b      	mov	r3, r5
 800d866:	2200      	movs	r2, #0
 800d868:	4543      	cmp	r3, r8
 800d86a:	d321      	bcc.n	800d8b0 <__multiply+0x98>
 800d86c:	f107 0114 	add.w	r1, r7, #20
 800d870:	f104 0214 	add.w	r2, r4, #20
 800d874:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d878:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d87c:	9302      	str	r3, [sp, #8]
 800d87e:	1b13      	subs	r3, r2, r4
 800d880:	3b15      	subs	r3, #21
 800d882:	f023 0303 	bic.w	r3, r3, #3
 800d886:	3304      	adds	r3, #4
 800d888:	f104 0715 	add.w	r7, r4, #21
 800d88c:	42ba      	cmp	r2, r7
 800d88e:	bf38      	it	cc
 800d890:	2304      	movcc	r3, #4
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	9b02      	ldr	r3, [sp, #8]
 800d896:	9103      	str	r1, [sp, #12]
 800d898:	428b      	cmp	r3, r1
 800d89a:	d80c      	bhi.n	800d8b6 <__multiply+0x9e>
 800d89c:	2e00      	cmp	r6, #0
 800d89e:	dd03      	ble.n	800d8a8 <__multiply+0x90>
 800d8a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d05b      	beq.n	800d960 <__multiply+0x148>
 800d8a8:	6106      	str	r6, [r0, #16]
 800d8aa:	b005      	add	sp, #20
 800d8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b0:	f843 2b04 	str.w	r2, [r3], #4
 800d8b4:	e7d8      	b.n	800d868 <__multiply+0x50>
 800d8b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8ba:	f1ba 0f00 	cmp.w	sl, #0
 800d8be:	d024      	beq.n	800d90a <__multiply+0xf2>
 800d8c0:	f104 0e14 	add.w	lr, r4, #20
 800d8c4:	46a9      	mov	r9, r5
 800d8c6:	f04f 0c00 	mov.w	ip, #0
 800d8ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8ce:	f8d9 3000 	ldr.w	r3, [r9]
 800d8d2:	fa1f fb87 	uxth.w	fp, r7
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d8dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d8e0:	f8d9 7000 	ldr.w	r7, [r9]
 800d8e4:	4463      	add	r3, ip
 800d8e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800d8ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d8f8:	4572      	cmp	r2, lr
 800d8fa:	f849 3b04 	str.w	r3, [r9], #4
 800d8fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d902:	d8e2      	bhi.n	800d8ca <__multiply+0xb2>
 800d904:	9b01      	ldr	r3, [sp, #4]
 800d906:	f845 c003 	str.w	ip, [r5, r3]
 800d90a:	9b03      	ldr	r3, [sp, #12]
 800d90c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d910:	3104      	adds	r1, #4
 800d912:	f1b9 0f00 	cmp.w	r9, #0
 800d916:	d021      	beq.n	800d95c <__multiply+0x144>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	f104 0c14 	add.w	ip, r4, #20
 800d91e:	46ae      	mov	lr, r5
 800d920:	f04f 0a00 	mov.w	sl, #0
 800d924:	f8bc b000 	ldrh.w	fp, [ip]
 800d928:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d92c:	fb09 770b 	mla	r7, r9, fp, r7
 800d930:	4457      	add	r7, sl
 800d932:	b29b      	uxth	r3, r3
 800d934:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d938:	f84e 3b04 	str.w	r3, [lr], #4
 800d93c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d944:	f8be 3000 	ldrh.w	r3, [lr]
 800d948:	fb09 330a 	mla	r3, r9, sl, r3
 800d94c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d950:	4562      	cmp	r2, ip
 800d952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d956:	d8e5      	bhi.n	800d924 <__multiply+0x10c>
 800d958:	9f01      	ldr	r7, [sp, #4]
 800d95a:	51eb      	str	r3, [r5, r7]
 800d95c:	3504      	adds	r5, #4
 800d95e:	e799      	b.n	800d894 <__multiply+0x7c>
 800d960:	3e01      	subs	r6, #1
 800d962:	e79b      	b.n	800d89c <__multiply+0x84>
 800d964:	0800fff5 	.word	0x0800fff5
 800d968:	08010066 	.word	0x08010066

0800d96c <__pow5mult>:
 800d96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d970:	4615      	mov	r5, r2
 800d972:	f012 0203 	ands.w	r2, r2, #3
 800d976:	4607      	mov	r7, r0
 800d978:	460e      	mov	r6, r1
 800d97a:	d007      	beq.n	800d98c <__pow5mult+0x20>
 800d97c:	4c25      	ldr	r4, [pc, #148]	@ (800da14 <__pow5mult+0xa8>)
 800d97e:	3a01      	subs	r2, #1
 800d980:	2300      	movs	r3, #0
 800d982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d986:	f7ff fe55 	bl	800d634 <__multadd>
 800d98a:	4606      	mov	r6, r0
 800d98c:	10ad      	asrs	r5, r5, #2
 800d98e:	d03d      	beq.n	800da0c <__pow5mult+0xa0>
 800d990:	69fc      	ldr	r4, [r7, #28]
 800d992:	b97c      	cbnz	r4, 800d9b4 <__pow5mult+0x48>
 800d994:	2010      	movs	r0, #16
 800d996:	f7ff fd23 	bl	800d3e0 <malloc>
 800d99a:	4602      	mov	r2, r0
 800d99c:	61f8      	str	r0, [r7, #28]
 800d99e:	b928      	cbnz	r0, 800d9ac <__pow5mult+0x40>
 800d9a0:	4b1d      	ldr	r3, [pc, #116]	@ (800da18 <__pow5mult+0xac>)
 800d9a2:	481e      	ldr	r0, [pc, #120]	@ (800da1c <__pow5mult+0xb0>)
 800d9a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d9a8:	f000 ff20 	bl	800e7ec <__assert_func>
 800d9ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9b0:	6004      	str	r4, [r0, #0]
 800d9b2:	60c4      	str	r4, [r0, #12]
 800d9b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9bc:	b94c      	cbnz	r4, 800d9d2 <__pow5mult+0x66>
 800d9be:	f240 2171 	movw	r1, #625	@ 0x271
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	f7ff ff12 	bl	800d7ec <__i2b>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	6003      	str	r3, [r0, #0]
 800d9d2:	f04f 0900 	mov.w	r9, #0
 800d9d6:	07eb      	lsls	r3, r5, #31
 800d9d8:	d50a      	bpl.n	800d9f0 <__pow5mult+0x84>
 800d9da:	4631      	mov	r1, r6
 800d9dc:	4622      	mov	r2, r4
 800d9de:	4638      	mov	r0, r7
 800d9e0:	f7ff ff1a 	bl	800d818 <__multiply>
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4680      	mov	r8, r0
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff fe01 	bl	800d5f0 <_Bfree>
 800d9ee:	4646      	mov	r6, r8
 800d9f0:	106d      	asrs	r5, r5, #1
 800d9f2:	d00b      	beq.n	800da0c <__pow5mult+0xa0>
 800d9f4:	6820      	ldr	r0, [r4, #0]
 800d9f6:	b938      	cbnz	r0, 800da08 <__pow5mult+0x9c>
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	f7ff ff0b 	bl	800d818 <__multiply>
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	f8c0 9000 	str.w	r9, [r0]
 800da08:	4604      	mov	r4, r0
 800da0a:	e7e4      	b.n	800d9d6 <__pow5mult+0x6a>
 800da0c:	4630      	mov	r0, r6
 800da0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da12:	bf00      	nop
 800da14:	080100c0 	.word	0x080100c0
 800da18:	0800ff86 	.word	0x0800ff86
 800da1c:	08010066 	.word	0x08010066

0800da20 <__lshift>:
 800da20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da24:	460c      	mov	r4, r1
 800da26:	6849      	ldr	r1, [r1, #4]
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	4607      	mov	r7, r0
 800da32:	4691      	mov	r9, r2
 800da34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da38:	f108 0601 	add.w	r6, r8, #1
 800da3c:	42b3      	cmp	r3, r6
 800da3e:	db0b      	blt.n	800da58 <__lshift+0x38>
 800da40:	4638      	mov	r0, r7
 800da42:	f7ff fd95 	bl	800d570 <_Balloc>
 800da46:	4605      	mov	r5, r0
 800da48:	b948      	cbnz	r0, 800da5e <__lshift+0x3e>
 800da4a:	4602      	mov	r2, r0
 800da4c:	4b28      	ldr	r3, [pc, #160]	@ (800daf0 <__lshift+0xd0>)
 800da4e:	4829      	ldr	r0, [pc, #164]	@ (800daf4 <__lshift+0xd4>)
 800da50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da54:	f000 feca 	bl	800e7ec <__assert_func>
 800da58:	3101      	adds	r1, #1
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	e7ee      	b.n	800da3c <__lshift+0x1c>
 800da5e:	2300      	movs	r3, #0
 800da60:	f100 0114 	add.w	r1, r0, #20
 800da64:	f100 0210 	add.w	r2, r0, #16
 800da68:	4618      	mov	r0, r3
 800da6a:	4553      	cmp	r3, sl
 800da6c:	db33      	blt.n	800dad6 <__lshift+0xb6>
 800da6e:	6920      	ldr	r0, [r4, #16]
 800da70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da74:	f104 0314 	add.w	r3, r4, #20
 800da78:	f019 091f 	ands.w	r9, r9, #31
 800da7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da84:	d02b      	beq.n	800dade <__lshift+0xbe>
 800da86:	f1c9 0e20 	rsb	lr, r9, #32
 800da8a:	468a      	mov	sl, r1
 800da8c:	2200      	movs	r2, #0
 800da8e:	6818      	ldr	r0, [r3, #0]
 800da90:	fa00 f009 	lsl.w	r0, r0, r9
 800da94:	4310      	orrs	r0, r2
 800da96:	f84a 0b04 	str.w	r0, [sl], #4
 800da9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da9e:	459c      	cmp	ip, r3
 800daa0:	fa22 f20e 	lsr.w	r2, r2, lr
 800daa4:	d8f3      	bhi.n	800da8e <__lshift+0x6e>
 800daa6:	ebac 0304 	sub.w	r3, ip, r4
 800daaa:	3b15      	subs	r3, #21
 800daac:	f023 0303 	bic.w	r3, r3, #3
 800dab0:	3304      	adds	r3, #4
 800dab2:	f104 0015 	add.w	r0, r4, #21
 800dab6:	4584      	cmp	ip, r0
 800dab8:	bf38      	it	cc
 800daba:	2304      	movcc	r3, #4
 800dabc:	50ca      	str	r2, [r1, r3]
 800dabe:	b10a      	cbz	r2, 800dac4 <__lshift+0xa4>
 800dac0:	f108 0602 	add.w	r6, r8, #2
 800dac4:	3e01      	subs	r6, #1
 800dac6:	4638      	mov	r0, r7
 800dac8:	612e      	str	r6, [r5, #16]
 800daca:	4621      	mov	r1, r4
 800dacc:	f7ff fd90 	bl	800d5f0 <_Bfree>
 800dad0:	4628      	mov	r0, r5
 800dad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dada:	3301      	adds	r3, #1
 800dadc:	e7c5      	b.n	800da6a <__lshift+0x4a>
 800dade:	3904      	subs	r1, #4
 800dae0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae4:	f841 2f04 	str.w	r2, [r1, #4]!
 800dae8:	459c      	cmp	ip, r3
 800daea:	d8f9      	bhi.n	800dae0 <__lshift+0xc0>
 800daec:	e7ea      	b.n	800dac4 <__lshift+0xa4>
 800daee:	bf00      	nop
 800daf0:	0800fff5 	.word	0x0800fff5
 800daf4:	08010066 	.word	0x08010066

0800daf8 <__mcmp>:
 800daf8:	690a      	ldr	r2, [r1, #16]
 800dafa:	4603      	mov	r3, r0
 800dafc:	6900      	ldr	r0, [r0, #16]
 800dafe:	1a80      	subs	r0, r0, r2
 800db00:	b530      	push	{r4, r5, lr}
 800db02:	d10e      	bne.n	800db22 <__mcmp+0x2a>
 800db04:	3314      	adds	r3, #20
 800db06:	3114      	adds	r1, #20
 800db08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db18:	4295      	cmp	r5, r2
 800db1a:	d003      	beq.n	800db24 <__mcmp+0x2c>
 800db1c:	d205      	bcs.n	800db2a <__mcmp+0x32>
 800db1e:	f04f 30ff 	mov.w	r0, #4294967295
 800db22:	bd30      	pop	{r4, r5, pc}
 800db24:	42a3      	cmp	r3, r4
 800db26:	d3f3      	bcc.n	800db10 <__mcmp+0x18>
 800db28:	e7fb      	b.n	800db22 <__mcmp+0x2a>
 800db2a:	2001      	movs	r0, #1
 800db2c:	e7f9      	b.n	800db22 <__mcmp+0x2a>
	...

0800db30 <__mdiff>:
 800db30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	4689      	mov	r9, r1
 800db36:	4606      	mov	r6, r0
 800db38:	4611      	mov	r1, r2
 800db3a:	4648      	mov	r0, r9
 800db3c:	4614      	mov	r4, r2
 800db3e:	f7ff ffdb 	bl	800daf8 <__mcmp>
 800db42:	1e05      	subs	r5, r0, #0
 800db44:	d112      	bne.n	800db6c <__mdiff+0x3c>
 800db46:	4629      	mov	r1, r5
 800db48:	4630      	mov	r0, r6
 800db4a:	f7ff fd11 	bl	800d570 <_Balloc>
 800db4e:	4602      	mov	r2, r0
 800db50:	b928      	cbnz	r0, 800db5e <__mdiff+0x2e>
 800db52:	4b3f      	ldr	r3, [pc, #252]	@ (800dc50 <__mdiff+0x120>)
 800db54:	f240 2137 	movw	r1, #567	@ 0x237
 800db58:	483e      	ldr	r0, [pc, #248]	@ (800dc54 <__mdiff+0x124>)
 800db5a:	f000 fe47 	bl	800e7ec <__assert_func>
 800db5e:	2301      	movs	r3, #1
 800db60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db64:	4610      	mov	r0, r2
 800db66:	b003      	add	sp, #12
 800db68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db6c:	bfbc      	itt	lt
 800db6e:	464b      	movlt	r3, r9
 800db70:	46a1      	movlt	r9, r4
 800db72:	4630      	mov	r0, r6
 800db74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800db78:	bfba      	itte	lt
 800db7a:	461c      	movlt	r4, r3
 800db7c:	2501      	movlt	r5, #1
 800db7e:	2500      	movge	r5, #0
 800db80:	f7ff fcf6 	bl	800d570 <_Balloc>
 800db84:	4602      	mov	r2, r0
 800db86:	b918      	cbnz	r0, 800db90 <__mdiff+0x60>
 800db88:	4b31      	ldr	r3, [pc, #196]	@ (800dc50 <__mdiff+0x120>)
 800db8a:	f240 2145 	movw	r1, #581	@ 0x245
 800db8e:	e7e3      	b.n	800db58 <__mdiff+0x28>
 800db90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800db94:	6926      	ldr	r6, [r4, #16]
 800db96:	60c5      	str	r5, [r0, #12]
 800db98:	f109 0310 	add.w	r3, r9, #16
 800db9c:	f109 0514 	add.w	r5, r9, #20
 800dba0:	f104 0e14 	add.w	lr, r4, #20
 800dba4:	f100 0b14 	add.w	fp, r0, #20
 800dba8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dbac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	46d9      	mov	r9, fp
 800dbb4:	f04f 0c00 	mov.w	ip, #0
 800dbb8:	9b01      	ldr	r3, [sp, #4]
 800dbba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dbbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dbc2:	9301      	str	r3, [sp, #4]
 800dbc4:	fa1f f38a 	uxth.w	r3, sl
 800dbc8:	4619      	mov	r1, r3
 800dbca:	b283      	uxth	r3, r0
 800dbcc:	1acb      	subs	r3, r1, r3
 800dbce:	0c00      	lsrs	r0, r0, #16
 800dbd0:	4463      	add	r3, ip
 800dbd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dbd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dbe0:	4576      	cmp	r6, lr
 800dbe2:	f849 3b04 	str.w	r3, [r9], #4
 800dbe6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dbea:	d8e5      	bhi.n	800dbb8 <__mdiff+0x88>
 800dbec:	1b33      	subs	r3, r6, r4
 800dbee:	3b15      	subs	r3, #21
 800dbf0:	f023 0303 	bic.w	r3, r3, #3
 800dbf4:	3415      	adds	r4, #21
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	42a6      	cmp	r6, r4
 800dbfa:	bf38      	it	cc
 800dbfc:	2304      	movcc	r3, #4
 800dbfe:	441d      	add	r5, r3
 800dc00:	445b      	add	r3, fp
 800dc02:	461e      	mov	r6, r3
 800dc04:	462c      	mov	r4, r5
 800dc06:	4544      	cmp	r4, r8
 800dc08:	d30e      	bcc.n	800dc28 <__mdiff+0xf8>
 800dc0a:	f108 0103 	add.w	r1, r8, #3
 800dc0e:	1b49      	subs	r1, r1, r5
 800dc10:	f021 0103 	bic.w	r1, r1, #3
 800dc14:	3d03      	subs	r5, #3
 800dc16:	45a8      	cmp	r8, r5
 800dc18:	bf38      	it	cc
 800dc1a:	2100      	movcc	r1, #0
 800dc1c:	440b      	add	r3, r1
 800dc1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc22:	b191      	cbz	r1, 800dc4a <__mdiff+0x11a>
 800dc24:	6117      	str	r7, [r2, #16]
 800dc26:	e79d      	b.n	800db64 <__mdiff+0x34>
 800dc28:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc2c:	46e6      	mov	lr, ip
 800dc2e:	0c08      	lsrs	r0, r1, #16
 800dc30:	fa1c fc81 	uxtah	ip, ip, r1
 800dc34:	4471      	add	r1, lr
 800dc36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc3a:	b289      	uxth	r1, r1
 800dc3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc40:	f846 1b04 	str.w	r1, [r6], #4
 800dc44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc48:	e7dd      	b.n	800dc06 <__mdiff+0xd6>
 800dc4a:	3f01      	subs	r7, #1
 800dc4c:	e7e7      	b.n	800dc1e <__mdiff+0xee>
 800dc4e:	bf00      	nop
 800dc50:	0800fff5 	.word	0x0800fff5
 800dc54:	08010066 	.word	0x08010066

0800dc58 <__ulp>:
 800dc58:	b082      	sub	sp, #8
 800dc5a:	ed8d 0b00 	vstr	d0, [sp]
 800dc5e:	9a01      	ldr	r2, [sp, #4]
 800dc60:	4b0f      	ldr	r3, [pc, #60]	@ (800dca0 <__ulp+0x48>)
 800dc62:	4013      	ands	r3, r2
 800dc64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	dc08      	bgt.n	800dc7e <__ulp+0x26>
 800dc6c:	425b      	negs	r3, r3
 800dc6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dc72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dc76:	da04      	bge.n	800dc82 <__ulp+0x2a>
 800dc78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dc7c:	4113      	asrs	r3, r2
 800dc7e:	2200      	movs	r2, #0
 800dc80:	e008      	b.n	800dc94 <__ulp+0x3c>
 800dc82:	f1a2 0314 	sub.w	r3, r2, #20
 800dc86:	2b1e      	cmp	r3, #30
 800dc88:	bfda      	itte	le
 800dc8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dc8e:	40da      	lsrle	r2, r3
 800dc90:	2201      	movgt	r2, #1
 800dc92:	2300      	movs	r3, #0
 800dc94:	4619      	mov	r1, r3
 800dc96:	4610      	mov	r0, r2
 800dc98:	ec41 0b10 	vmov	d0, r0, r1
 800dc9c:	b002      	add	sp, #8
 800dc9e:	4770      	bx	lr
 800dca0:	7ff00000 	.word	0x7ff00000

0800dca4 <__b2d>:
 800dca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca8:	6906      	ldr	r6, [r0, #16]
 800dcaa:	f100 0814 	add.w	r8, r0, #20
 800dcae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dcb2:	1f37      	subs	r7, r6, #4
 800dcb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dcb8:	4610      	mov	r0, r2
 800dcba:	f7ff fd4b 	bl	800d754 <__hi0bits>
 800dcbe:	f1c0 0320 	rsb	r3, r0, #32
 800dcc2:	280a      	cmp	r0, #10
 800dcc4:	600b      	str	r3, [r1, #0]
 800dcc6:	491b      	ldr	r1, [pc, #108]	@ (800dd34 <__b2d+0x90>)
 800dcc8:	dc15      	bgt.n	800dcf6 <__b2d+0x52>
 800dcca:	f1c0 0c0b 	rsb	ip, r0, #11
 800dcce:	fa22 f30c 	lsr.w	r3, r2, ip
 800dcd2:	45b8      	cmp	r8, r7
 800dcd4:	ea43 0501 	orr.w	r5, r3, r1
 800dcd8:	bf34      	ite	cc
 800dcda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dcde:	2300      	movcs	r3, #0
 800dce0:	3015      	adds	r0, #21
 800dce2:	fa02 f000 	lsl.w	r0, r2, r0
 800dce6:	fa23 f30c 	lsr.w	r3, r3, ip
 800dcea:	4303      	orrs	r3, r0
 800dcec:	461c      	mov	r4, r3
 800dcee:	ec45 4b10 	vmov	d0, r4, r5
 800dcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf6:	45b8      	cmp	r8, r7
 800dcf8:	bf3a      	itte	cc
 800dcfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dcfe:	f1a6 0708 	subcc.w	r7, r6, #8
 800dd02:	2300      	movcs	r3, #0
 800dd04:	380b      	subs	r0, #11
 800dd06:	d012      	beq.n	800dd2e <__b2d+0x8a>
 800dd08:	f1c0 0120 	rsb	r1, r0, #32
 800dd0c:	fa23 f401 	lsr.w	r4, r3, r1
 800dd10:	4082      	lsls	r2, r0
 800dd12:	4322      	orrs	r2, r4
 800dd14:	4547      	cmp	r7, r8
 800dd16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dd1a:	bf8c      	ite	hi
 800dd1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dd20:	2200      	movls	r2, #0
 800dd22:	4083      	lsls	r3, r0
 800dd24:	40ca      	lsrs	r2, r1
 800dd26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	e7de      	b.n	800dcec <__b2d+0x48>
 800dd2e:	ea42 0501 	orr.w	r5, r2, r1
 800dd32:	e7db      	b.n	800dcec <__b2d+0x48>
 800dd34:	3ff00000 	.word	0x3ff00000

0800dd38 <__d2b>:
 800dd38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd3c:	460f      	mov	r7, r1
 800dd3e:	2101      	movs	r1, #1
 800dd40:	ec59 8b10 	vmov	r8, r9, d0
 800dd44:	4616      	mov	r6, r2
 800dd46:	f7ff fc13 	bl	800d570 <_Balloc>
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	b930      	cbnz	r0, 800dd5c <__d2b+0x24>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	4b23      	ldr	r3, [pc, #140]	@ (800dde0 <__d2b+0xa8>)
 800dd52:	4824      	ldr	r0, [pc, #144]	@ (800dde4 <__d2b+0xac>)
 800dd54:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd58:	f000 fd48 	bl	800e7ec <__assert_func>
 800dd5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd64:	b10d      	cbz	r5, 800dd6a <__d2b+0x32>
 800dd66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd6a:	9301      	str	r3, [sp, #4]
 800dd6c:	f1b8 0300 	subs.w	r3, r8, #0
 800dd70:	d023      	beq.n	800ddba <__d2b+0x82>
 800dd72:	4668      	mov	r0, sp
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	f7ff fd0c 	bl	800d792 <__lo0bits>
 800dd7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd7e:	b1d0      	cbz	r0, 800ddb6 <__d2b+0x7e>
 800dd80:	f1c0 0320 	rsb	r3, r0, #32
 800dd84:	fa02 f303 	lsl.w	r3, r2, r3
 800dd88:	430b      	orrs	r3, r1
 800dd8a:	40c2      	lsrs	r2, r0
 800dd8c:	6163      	str	r3, [r4, #20]
 800dd8e:	9201      	str	r2, [sp, #4]
 800dd90:	9b01      	ldr	r3, [sp, #4]
 800dd92:	61a3      	str	r3, [r4, #24]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	bf0c      	ite	eq
 800dd98:	2201      	moveq	r2, #1
 800dd9a:	2202      	movne	r2, #2
 800dd9c:	6122      	str	r2, [r4, #16]
 800dd9e:	b1a5      	cbz	r5, 800ddca <__d2b+0x92>
 800dda0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dda4:	4405      	add	r5, r0
 800dda6:	603d      	str	r5, [r7, #0]
 800dda8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ddac:	6030      	str	r0, [r6, #0]
 800ddae:	4620      	mov	r0, r4
 800ddb0:	b003      	add	sp, #12
 800ddb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddb6:	6161      	str	r1, [r4, #20]
 800ddb8:	e7ea      	b.n	800dd90 <__d2b+0x58>
 800ddba:	a801      	add	r0, sp, #4
 800ddbc:	f7ff fce9 	bl	800d792 <__lo0bits>
 800ddc0:	9b01      	ldr	r3, [sp, #4]
 800ddc2:	6163      	str	r3, [r4, #20]
 800ddc4:	3020      	adds	r0, #32
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	e7e8      	b.n	800dd9c <__d2b+0x64>
 800ddca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddd2:	6038      	str	r0, [r7, #0]
 800ddd4:	6918      	ldr	r0, [r3, #16]
 800ddd6:	f7ff fcbd 	bl	800d754 <__hi0bits>
 800ddda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddde:	e7e5      	b.n	800ddac <__d2b+0x74>
 800dde0:	0800fff5 	.word	0x0800fff5
 800dde4:	08010066 	.word	0x08010066

0800dde8 <__ratio>:
 800dde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddec:	b085      	sub	sp, #20
 800ddee:	e9cd 1000 	strd	r1, r0, [sp]
 800ddf2:	a902      	add	r1, sp, #8
 800ddf4:	f7ff ff56 	bl	800dca4 <__b2d>
 800ddf8:	9800      	ldr	r0, [sp, #0]
 800ddfa:	a903      	add	r1, sp, #12
 800ddfc:	ec55 4b10 	vmov	r4, r5, d0
 800de00:	f7ff ff50 	bl	800dca4 <__b2d>
 800de04:	9b01      	ldr	r3, [sp, #4]
 800de06:	6919      	ldr	r1, [r3, #16]
 800de08:	9b00      	ldr	r3, [sp, #0]
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	1ac9      	subs	r1, r1, r3
 800de0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800de12:	1a9b      	subs	r3, r3, r2
 800de14:	ec5b ab10 	vmov	sl, fp, d0
 800de18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	bfce      	itee	gt
 800de20:	462a      	movgt	r2, r5
 800de22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de26:	465a      	movle	r2, fp
 800de28:	462f      	mov	r7, r5
 800de2a:	46d9      	mov	r9, fp
 800de2c:	bfcc      	ite	gt
 800de2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800de36:	464b      	mov	r3, r9
 800de38:	4652      	mov	r2, sl
 800de3a:	4620      	mov	r0, r4
 800de3c:	4639      	mov	r1, r7
 800de3e:	f7f2 fd05 	bl	800084c <__aeabi_ddiv>
 800de42:	ec41 0b10 	vmov	d0, r0, r1
 800de46:	b005      	add	sp, #20
 800de48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de4c <__copybits>:
 800de4c:	3901      	subs	r1, #1
 800de4e:	b570      	push	{r4, r5, r6, lr}
 800de50:	1149      	asrs	r1, r1, #5
 800de52:	6914      	ldr	r4, [r2, #16]
 800de54:	3101      	adds	r1, #1
 800de56:	f102 0314 	add.w	r3, r2, #20
 800de5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de62:	1f05      	subs	r5, r0, #4
 800de64:	42a3      	cmp	r3, r4
 800de66:	d30c      	bcc.n	800de82 <__copybits+0x36>
 800de68:	1aa3      	subs	r3, r4, r2
 800de6a:	3b11      	subs	r3, #17
 800de6c:	f023 0303 	bic.w	r3, r3, #3
 800de70:	3211      	adds	r2, #17
 800de72:	42a2      	cmp	r2, r4
 800de74:	bf88      	it	hi
 800de76:	2300      	movhi	r3, #0
 800de78:	4418      	add	r0, r3
 800de7a:	2300      	movs	r3, #0
 800de7c:	4288      	cmp	r0, r1
 800de7e:	d305      	bcc.n	800de8c <__copybits+0x40>
 800de80:	bd70      	pop	{r4, r5, r6, pc}
 800de82:	f853 6b04 	ldr.w	r6, [r3], #4
 800de86:	f845 6f04 	str.w	r6, [r5, #4]!
 800de8a:	e7eb      	b.n	800de64 <__copybits+0x18>
 800de8c:	f840 3b04 	str.w	r3, [r0], #4
 800de90:	e7f4      	b.n	800de7c <__copybits+0x30>

0800de92 <__any_on>:
 800de92:	f100 0214 	add.w	r2, r0, #20
 800de96:	6900      	ldr	r0, [r0, #16]
 800de98:	114b      	asrs	r3, r1, #5
 800de9a:	4298      	cmp	r0, r3
 800de9c:	b510      	push	{r4, lr}
 800de9e:	db11      	blt.n	800dec4 <__any_on+0x32>
 800dea0:	dd0a      	ble.n	800deb8 <__any_on+0x26>
 800dea2:	f011 011f 	ands.w	r1, r1, #31
 800dea6:	d007      	beq.n	800deb8 <__any_on+0x26>
 800dea8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800deac:	fa24 f001 	lsr.w	r0, r4, r1
 800deb0:	fa00 f101 	lsl.w	r1, r0, r1
 800deb4:	428c      	cmp	r4, r1
 800deb6:	d10b      	bne.n	800ded0 <__any_on+0x3e>
 800deb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800debc:	4293      	cmp	r3, r2
 800debe:	d803      	bhi.n	800dec8 <__any_on+0x36>
 800dec0:	2000      	movs	r0, #0
 800dec2:	bd10      	pop	{r4, pc}
 800dec4:	4603      	mov	r3, r0
 800dec6:	e7f7      	b.n	800deb8 <__any_on+0x26>
 800dec8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800decc:	2900      	cmp	r1, #0
 800dece:	d0f5      	beq.n	800debc <__any_on+0x2a>
 800ded0:	2001      	movs	r0, #1
 800ded2:	e7f6      	b.n	800dec2 <__any_on+0x30>

0800ded4 <_strtol_l.constprop.0>:
 800ded4:	2b24      	cmp	r3, #36	@ 0x24
 800ded6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deda:	4686      	mov	lr, r0
 800dedc:	4690      	mov	r8, r2
 800dede:	d801      	bhi.n	800dee4 <_strtol_l.constprop.0+0x10>
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d106      	bne.n	800def2 <_strtol_l.constprop.0+0x1e>
 800dee4:	f7fe f85e 	bl	800bfa4 <__errno>
 800dee8:	2316      	movs	r3, #22
 800deea:	6003      	str	r3, [r0, #0]
 800deec:	2000      	movs	r0, #0
 800deee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def2:	4834      	ldr	r0, [pc, #208]	@ (800dfc4 <_strtol_l.constprop.0+0xf0>)
 800def4:	460d      	mov	r5, r1
 800def6:	462a      	mov	r2, r5
 800def8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800defc:	5d06      	ldrb	r6, [r0, r4]
 800defe:	f016 0608 	ands.w	r6, r6, #8
 800df02:	d1f8      	bne.n	800def6 <_strtol_l.constprop.0+0x22>
 800df04:	2c2d      	cmp	r4, #45	@ 0x2d
 800df06:	d12d      	bne.n	800df64 <_strtol_l.constprop.0+0x90>
 800df08:	782c      	ldrb	r4, [r5, #0]
 800df0a:	2601      	movs	r6, #1
 800df0c:	1c95      	adds	r5, r2, #2
 800df0e:	f033 0210 	bics.w	r2, r3, #16
 800df12:	d109      	bne.n	800df28 <_strtol_l.constprop.0+0x54>
 800df14:	2c30      	cmp	r4, #48	@ 0x30
 800df16:	d12a      	bne.n	800df6e <_strtol_l.constprop.0+0x9a>
 800df18:	782a      	ldrb	r2, [r5, #0]
 800df1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df1e:	2a58      	cmp	r2, #88	@ 0x58
 800df20:	d125      	bne.n	800df6e <_strtol_l.constprop.0+0x9a>
 800df22:	786c      	ldrb	r4, [r5, #1]
 800df24:	2310      	movs	r3, #16
 800df26:	3502      	adds	r5, #2
 800df28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800df2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df30:	2200      	movs	r2, #0
 800df32:	fbbc f9f3 	udiv	r9, ip, r3
 800df36:	4610      	mov	r0, r2
 800df38:	fb03 ca19 	mls	sl, r3, r9, ip
 800df3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800df40:	2f09      	cmp	r7, #9
 800df42:	d81b      	bhi.n	800df7c <_strtol_l.constprop.0+0xa8>
 800df44:	463c      	mov	r4, r7
 800df46:	42a3      	cmp	r3, r4
 800df48:	dd27      	ble.n	800df9a <_strtol_l.constprop.0+0xc6>
 800df4a:	1c57      	adds	r7, r2, #1
 800df4c:	d007      	beq.n	800df5e <_strtol_l.constprop.0+0x8a>
 800df4e:	4581      	cmp	r9, r0
 800df50:	d320      	bcc.n	800df94 <_strtol_l.constprop.0+0xc0>
 800df52:	d101      	bne.n	800df58 <_strtol_l.constprop.0+0x84>
 800df54:	45a2      	cmp	sl, r4
 800df56:	db1d      	blt.n	800df94 <_strtol_l.constprop.0+0xc0>
 800df58:	fb00 4003 	mla	r0, r0, r3, r4
 800df5c:	2201      	movs	r2, #1
 800df5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df62:	e7eb      	b.n	800df3c <_strtol_l.constprop.0+0x68>
 800df64:	2c2b      	cmp	r4, #43	@ 0x2b
 800df66:	bf04      	itt	eq
 800df68:	782c      	ldrbeq	r4, [r5, #0]
 800df6a:	1c95      	addeq	r5, r2, #2
 800df6c:	e7cf      	b.n	800df0e <_strtol_l.constprop.0+0x3a>
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1da      	bne.n	800df28 <_strtol_l.constprop.0+0x54>
 800df72:	2c30      	cmp	r4, #48	@ 0x30
 800df74:	bf0c      	ite	eq
 800df76:	2308      	moveq	r3, #8
 800df78:	230a      	movne	r3, #10
 800df7a:	e7d5      	b.n	800df28 <_strtol_l.constprop.0+0x54>
 800df7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800df80:	2f19      	cmp	r7, #25
 800df82:	d801      	bhi.n	800df88 <_strtol_l.constprop.0+0xb4>
 800df84:	3c37      	subs	r4, #55	@ 0x37
 800df86:	e7de      	b.n	800df46 <_strtol_l.constprop.0+0x72>
 800df88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800df8c:	2f19      	cmp	r7, #25
 800df8e:	d804      	bhi.n	800df9a <_strtol_l.constprop.0+0xc6>
 800df90:	3c57      	subs	r4, #87	@ 0x57
 800df92:	e7d8      	b.n	800df46 <_strtol_l.constprop.0+0x72>
 800df94:	f04f 32ff 	mov.w	r2, #4294967295
 800df98:	e7e1      	b.n	800df5e <_strtol_l.constprop.0+0x8a>
 800df9a:	1c53      	adds	r3, r2, #1
 800df9c:	d108      	bne.n	800dfb0 <_strtol_l.constprop.0+0xdc>
 800df9e:	2322      	movs	r3, #34	@ 0x22
 800dfa0:	f8ce 3000 	str.w	r3, [lr]
 800dfa4:	4660      	mov	r0, ip
 800dfa6:	f1b8 0f00 	cmp.w	r8, #0
 800dfaa:	d0a0      	beq.n	800deee <_strtol_l.constprop.0+0x1a>
 800dfac:	1e69      	subs	r1, r5, #1
 800dfae:	e006      	b.n	800dfbe <_strtol_l.constprop.0+0xea>
 800dfb0:	b106      	cbz	r6, 800dfb4 <_strtol_l.constprop.0+0xe0>
 800dfb2:	4240      	negs	r0, r0
 800dfb4:	f1b8 0f00 	cmp.w	r8, #0
 800dfb8:	d099      	beq.n	800deee <_strtol_l.constprop.0+0x1a>
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	d1f6      	bne.n	800dfac <_strtol_l.constprop.0+0xd8>
 800dfbe:	f8c8 1000 	str.w	r1, [r8]
 800dfc2:	e794      	b.n	800deee <_strtol_l.constprop.0+0x1a>
 800dfc4:	080101c1 	.word	0x080101c1

0800dfc8 <_strtol_r>:
 800dfc8:	f7ff bf84 	b.w	800ded4 <_strtol_l.constprop.0>

0800dfcc <__ascii_wctomb>:
 800dfcc:	4603      	mov	r3, r0
 800dfce:	4608      	mov	r0, r1
 800dfd0:	b141      	cbz	r1, 800dfe4 <__ascii_wctomb+0x18>
 800dfd2:	2aff      	cmp	r2, #255	@ 0xff
 800dfd4:	d904      	bls.n	800dfe0 <__ascii_wctomb+0x14>
 800dfd6:	228a      	movs	r2, #138	@ 0x8a
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	f04f 30ff 	mov.w	r0, #4294967295
 800dfde:	4770      	bx	lr
 800dfe0:	700a      	strb	r2, [r1, #0]
 800dfe2:	2001      	movs	r0, #1
 800dfe4:	4770      	bx	lr

0800dfe6 <__ssputs_r>:
 800dfe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfea:	688e      	ldr	r6, [r1, #8]
 800dfec:	461f      	mov	r7, r3
 800dfee:	42be      	cmp	r6, r7
 800dff0:	680b      	ldr	r3, [r1, #0]
 800dff2:	4682      	mov	sl, r0
 800dff4:	460c      	mov	r4, r1
 800dff6:	4690      	mov	r8, r2
 800dff8:	d82d      	bhi.n	800e056 <__ssputs_r+0x70>
 800dffa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dffe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e002:	d026      	beq.n	800e052 <__ssputs_r+0x6c>
 800e004:	6965      	ldr	r5, [r4, #20]
 800e006:	6909      	ldr	r1, [r1, #16]
 800e008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e00c:	eba3 0901 	sub.w	r9, r3, r1
 800e010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e014:	1c7b      	adds	r3, r7, #1
 800e016:	444b      	add	r3, r9
 800e018:	106d      	asrs	r5, r5, #1
 800e01a:	429d      	cmp	r5, r3
 800e01c:	bf38      	it	cc
 800e01e:	461d      	movcc	r5, r3
 800e020:	0553      	lsls	r3, r2, #21
 800e022:	d527      	bpl.n	800e074 <__ssputs_r+0x8e>
 800e024:	4629      	mov	r1, r5
 800e026:	f7ff fa05 	bl	800d434 <_malloc_r>
 800e02a:	4606      	mov	r6, r0
 800e02c:	b360      	cbz	r0, 800e088 <__ssputs_r+0xa2>
 800e02e:	6921      	ldr	r1, [r4, #16]
 800e030:	464a      	mov	r2, r9
 800e032:	f7fd ffe4 	bl	800bffe <memcpy>
 800e036:	89a3      	ldrh	r3, [r4, #12]
 800e038:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e03c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e040:	81a3      	strh	r3, [r4, #12]
 800e042:	6126      	str	r6, [r4, #16]
 800e044:	6165      	str	r5, [r4, #20]
 800e046:	444e      	add	r6, r9
 800e048:	eba5 0509 	sub.w	r5, r5, r9
 800e04c:	6026      	str	r6, [r4, #0]
 800e04e:	60a5      	str	r5, [r4, #8]
 800e050:	463e      	mov	r6, r7
 800e052:	42be      	cmp	r6, r7
 800e054:	d900      	bls.n	800e058 <__ssputs_r+0x72>
 800e056:	463e      	mov	r6, r7
 800e058:	6820      	ldr	r0, [r4, #0]
 800e05a:	4632      	mov	r2, r6
 800e05c:	4641      	mov	r1, r8
 800e05e:	f000 fb9b 	bl	800e798 <memmove>
 800e062:	68a3      	ldr	r3, [r4, #8]
 800e064:	1b9b      	subs	r3, r3, r6
 800e066:	60a3      	str	r3, [r4, #8]
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	4433      	add	r3, r6
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	2000      	movs	r0, #0
 800e070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e074:	462a      	mov	r2, r5
 800e076:	f000 fbeb 	bl	800e850 <_realloc_r>
 800e07a:	4606      	mov	r6, r0
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d1e0      	bne.n	800e042 <__ssputs_r+0x5c>
 800e080:	6921      	ldr	r1, [r4, #16]
 800e082:	4650      	mov	r0, sl
 800e084:	f7fe fe28 	bl	800ccd8 <_free_r>
 800e088:	230c      	movs	r3, #12
 800e08a:	f8ca 3000 	str.w	r3, [sl]
 800e08e:	89a3      	ldrh	r3, [r4, #12]
 800e090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e094:	81a3      	strh	r3, [r4, #12]
 800e096:	f04f 30ff 	mov.w	r0, #4294967295
 800e09a:	e7e9      	b.n	800e070 <__ssputs_r+0x8a>

0800e09c <_svfiprintf_r>:
 800e09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a0:	4698      	mov	r8, r3
 800e0a2:	898b      	ldrh	r3, [r1, #12]
 800e0a4:	061b      	lsls	r3, r3, #24
 800e0a6:	b09d      	sub	sp, #116	@ 0x74
 800e0a8:	4607      	mov	r7, r0
 800e0aa:	460d      	mov	r5, r1
 800e0ac:	4614      	mov	r4, r2
 800e0ae:	d510      	bpl.n	800e0d2 <_svfiprintf_r+0x36>
 800e0b0:	690b      	ldr	r3, [r1, #16]
 800e0b2:	b973      	cbnz	r3, 800e0d2 <_svfiprintf_r+0x36>
 800e0b4:	2140      	movs	r1, #64	@ 0x40
 800e0b6:	f7ff f9bd 	bl	800d434 <_malloc_r>
 800e0ba:	6028      	str	r0, [r5, #0]
 800e0bc:	6128      	str	r0, [r5, #16]
 800e0be:	b930      	cbnz	r0, 800e0ce <_svfiprintf_r+0x32>
 800e0c0:	230c      	movs	r3, #12
 800e0c2:	603b      	str	r3, [r7, #0]
 800e0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c8:	b01d      	add	sp, #116	@ 0x74
 800e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ce:	2340      	movs	r3, #64	@ 0x40
 800e0d0:	616b      	str	r3, [r5, #20]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0d6:	2320      	movs	r3, #32
 800e0d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e0:	2330      	movs	r3, #48	@ 0x30
 800e0e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e280 <_svfiprintf_r+0x1e4>
 800e0e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0ea:	f04f 0901 	mov.w	r9, #1
 800e0ee:	4623      	mov	r3, r4
 800e0f0:	469a      	mov	sl, r3
 800e0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f6:	b10a      	cbz	r2, 800e0fc <_svfiprintf_r+0x60>
 800e0f8:	2a25      	cmp	r2, #37	@ 0x25
 800e0fa:	d1f9      	bne.n	800e0f0 <_svfiprintf_r+0x54>
 800e0fc:	ebba 0b04 	subs.w	fp, sl, r4
 800e100:	d00b      	beq.n	800e11a <_svfiprintf_r+0x7e>
 800e102:	465b      	mov	r3, fp
 800e104:	4622      	mov	r2, r4
 800e106:	4629      	mov	r1, r5
 800e108:	4638      	mov	r0, r7
 800e10a:	f7ff ff6c 	bl	800dfe6 <__ssputs_r>
 800e10e:	3001      	adds	r0, #1
 800e110:	f000 80a7 	beq.w	800e262 <_svfiprintf_r+0x1c6>
 800e114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e116:	445a      	add	r2, fp
 800e118:	9209      	str	r2, [sp, #36]	@ 0x24
 800e11a:	f89a 3000 	ldrb.w	r3, [sl]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f000 809f 	beq.w	800e262 <_svfiprintf_r+0x1c6>
 800e124:	2300      	movs	r3, #0
 800e126:	f04f 32ff 	mov.w	r2, #4294967295
 800e12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e12e:	f10a 0a01 	add.w	sl, sl, #1
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	9307      	str	r3, [sp, #28]
 800e136:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e13a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e13c:	4654      	mov	r4, sl
 800e13e:	2205      	movs	r2, #5
 800e140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e144:	484e      	ldr	r0, [pc, #312]	@ (800e280 <_svfiprintf_r+0x1e4>)
 800e146:	f7f2 f843 	bl	80001d0 <memchr>
 800e14a:	9a04      	ldr	r2, [sp, #16]
 800e14c:	b9d8      	cbnz	r0, 800e186 <_svfiprintf_r+0xea>
 800e14e:	06d0      	lsls	r0, r2, #27
 800e150:	bf44      	itt	mi
 800e152:	2320      	movmi	r3, #32
 800e154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e158:	0711      	lsls	r1, r2, #28
 800e15a:	bf44      	itt	mi
 800e15c:	232b      	movmi	r3, #43	@ 0x2b
 800e15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e162:	f89a 3000 	ldrb.w	r3, [sl]
 800e166:	2b2a      	cmp	r3, #42	@ 0x2a
 800e168:	d015      	beq.n	800e196 <_svfiprintf_r+0xfa>
 800e16a:	9a07      	ldr	r2, [sp, #28]
 800e16c:	4654      	mov	r4, sl
 800e16e:	2000      	movs	r0, #0
 800e170:	f04f 0c0a 	mov.w	ip, #10
 800e174:	4621      	mov	r1, r4
 800e176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e17a:	3b30      	subs	r3, #48	@ 0x30
 800e17c:	2b09      	cmp	r3, #9
 800e17e:	d94b      	bls.n	800e218 <_svfiprintf_r+0x17c>
 800e180:	b1b0      	cbz	r0, 800e1b0 <_svfiprintf_r+0x114>
 800e182:	9207      	str	r2, [sp, #28]
 800e184:	e014      	b.n	800e1b0 <_svfiprintf_r+0x114>
 800e186:	eba0 0308 	sub.w	r3, r0, r8
 800e18a:	fa09 f303 	lsl.w	r3, r9, r3
 800e18e:	4313      	orrs	r3, r2
 800e190:	9304      	str	r3, [sp, #16]
 800e192:	46a2      	mov	sl, r4
 800e194:	e7d2      	b.n	800e13c <_svfiprintf_r+0xa0>
 800e196:	9b03      	ldr	r3, [sp, #12]
 800e198:	1d19      	adds	r1, r3, #4
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	9103      	str	r1, [sp, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfbb      	ittet	lt
 800e1a2:	425b      	neglt	r3, r3
 800e1a4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1a8:	9307      	strge	r3, [sp, #28]
 800e1aa:	9307      	strlt	r3, [sp, #28]
 800e1ac:	bfb8      	it	lt
 800e1ae:	9204      	strlt	r2, [sp, #16]
 800e1b0:	7823      	ldrb	r3, [r4, #0]
 800e1b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1b4:	d10a      	bne.n	800e1cc <_svfiprintf_r+0x130>
 800e1b6:	7863      	ldrb	r3, [r4, #1]
 800e1b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1ba:	d132      	bne.n	800e222 <_svfiprintf_r+0x186>
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	1d1a      	adds	r2, r3, #4
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	9203      	str	r2, [sp, #12]
 800e1c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1c8:	3402      	adds	r4, #2
 800e1ca:	9305      	str	r3, [sp, #20]
 800e1cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e290 <_svfiprintf_r+0x1f4>
 800e1d0:	7821      	ldrb	r1, [r4, #0]
 800e1d2:	2203      	movs	r2, #3
 800e1d4:	4650      	mov	r0, sl
 800e1d6:	f7f1 fffb 	bl	80001d0 <memchr>
 800e1da:	b138      	cbz	r0, 800e1ec <_svfiprintf_r+0x150>
 800e1dc:	9b04      	ldr	r3, [sp, #16]
 800e1de:	eba0 000a 	sub.w	r0, r0, sl
 800e1e2:	2240      	movs	r2, #64	@ 0x40
 800e1e4:	4082      	lsls	r2, r0
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	3401      	adds	r4, #1
 800e1ea:	9304      	str	r3, [sp, #16]
 800e1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f0:	4824      	ldr	r0, [pc, #144]	@ (800e284 <_svfiprintf_r+0x1e8>)
 800e1f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1f6:	2206      	movs	r2, #6
 800e1f8:	f7f1 ffea 	bl	80001d0 <memchr>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d036      	beq.n	800e26e <_svfiprintf_r+0x1d2>
 800e200:	4b21      	ldr	r3, [pc, #132]	@ (800e288 <_svfiprintf_r+0x1ec>)
 800e202:	bb1b      	cbnz	r3, 800e24c <_svfiprintf_r+0x1b0>
 800e204:	9b03      	ldr	r3, [sp, #12]
 800e206:	3307      	adds	r3, #7
 800e208:	f023 0307 	bic.w	r3, r3, #7
 800e20c:	3308      	adds	r3, #8
 800e20e:	9303      	str	r3, [sp, #12]
 800e210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e212:	4433      	add	r3, r6
 800e214:	9309      	str	r3, [sp, #36]	@ 0x24
 800e216:	e76a      	b.n	800e0ee <_svfiprintf_r+0x52>
 800e218:	fb0c 3202 	mla	r2, ip, r2, r3
 800e21c:	460c      	mov	r4, r1
 800e21e:	2001      	movs	r0, #1
 800e220:	e7a8      	b.n	800e174 <_svfiprintf_r+0xd8>
 800e222:	2300      	movs	r3, #0
 800e224:	3401      	adds	r4, #1
 800e226:	9305      	str	r3, [sp, #20]
 800e228:	4619      	mov	r1, r3
 800e22a:	f04f 0c0a 	mov.w	ip, #10
 800e22e:	4620      	mov	r0, r4
 800e230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e234:	3a30      	subs	r2, #48	@ 0x30
 800e236:	2a09      	cmp	r2, #9
 800e238:	d903      	bls.n	800e242 <_svfiprintf_r+0x1a6>
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d0c6      	beq.n	800e1cc <_svfiprintf_r+0x130>
 800e23e:	9105      	str	r1, [sp, #20]
 800e240:	e7c4      	b.n	800e1cc <_svfiprintf_r+0x130>
 800e242:	fb0c 2101 	mla	r1, ip, r1, r2
 800e246:	4604      	mov	r4, r0
 800e248:	2301      	movs	r3, #1
 800e24a:	e7f0      	b.n	800e22e <_svfiprintf_r+0x192>
 800e24c:	ab03      	add	r3, sp, #12
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	462a      	mov	r2, r5
 800e252:	4b0e      	ldr	r3, [pc, #56]	@ (800e28c <_svfiprintf_r+0x1f0>)
 800e254:	a904      	add	r1, sp, #16
 800e256:	4638      	mov	r0, r7
 800e258:	f7fc ff3c 	bl	800b0d4 <_printf_float>
 800e25c:	1c42      	adds	r2, r0, #1
 800e25e:	4606      	mov	r6, r0
 800e260:	d1d6      	bne.n	800e210 <_svfiprintf_r+0x174>
 800e262:	89ab      	ldrh	r3, [r5, #12]
 800e264:	065b      	lsls	r3, r3, #25
 800e266:	f53f af2d 	bmi.w	800e0c4 <_svfiprintf_r+0x28>
 800e26a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e26c:	e72c      	b.n	800e0c8 <_svfiprintf_r+0x2c>
 800e26e:	ab03      	add	r3, sp, #12
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	462a      	mov	r2, r5
 800e274:	4b05      	ldr	r3, [pc, #20]	@ (800e28c <_svfiprintf_r+0x1f0>)
 800e276:	a904      	add	r1, sp, #16
 800e278:	4638      	mov	r0, r7
 800e27a:	f7fd f9c3 	bl	800b604 <_printf_i>
 800e27e:	e7ed      	b.n	800e25c <_svfiprintf_r+0x1c0>
 800e280:	080102c1 	.word	0x080102c1
 800e284:	080102cb 	.word	0x080102cb
 800e288:	0800b0d5 	.word	0x0800b0d5
 800e28c:	0800dfe7 	.word	0x0800dfe7
 800e290:	080102c7 	.word	0x080102c7

0800e294 <__sfputc_r>:
 800e294:	6893      	ldr	r3, [r2, #8]
 800e296:	3b01      	subs	r3, #1
 800e298:	2b00      	cmp	r3, #0
 800e29a:	b410      	push	{r4}
 800e29c:	6093      	str	r3, [r2, #8]
 800e29e:	da08      	bge.n	800e2b2 <__sfputc_r+0x1e>
 800e2a0:	6994      	ldr	r4, [r2, #24]
 800e2a2:	42a3      	cmp	r3, r4
 800e2a4:	db01      	blt.n	800e2aa <__sfputc_r+0x16>
 800e2a6:	290a      	cmp	r1, #10
 800e2a8:	d103      	bne.n	800e2b2 <__sfputc_r+0x1e>
 800e2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ae:	f000 b9df 	b.w	800e670 <__swbuf_r>
 800e2b2:	6813      	ldr	r3, [r2, #0]
 800e2b4:	1c58      	adds	r0, r3, #1
 800e2b6:	6010      	str	r0, [r2, #0]
 800e2b8:	7019      	strb	r1, [r3, #0]
 800e2ba:	4608      	mov	r0, r1
 800e2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2c0:	4770      	bx	lr

0800e2c2 <__sfputs_r>:
 800e2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	460f      	mov	r7, r1
 800e2c8:	4614      	mov	r4, r2
 800e2ca:	18d5      	adds	r5, r2, r3
 800e2cc:	42ac      	cmp	r4, r5
 800e2ce:	d101      	bne.n	800e2d4 <__sfputs_r+0x12>
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	e007      	b.n	800e2e4 <__sfputs_r+0x22>
 800e2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d8:	463a      	mov	r2, r7
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7ff ffda 	bl	800e294 <__sfputc_r>
 800e2e0:	1c43      	adds	r3, r0, #1
 800e2e2:	d1f3      	bne.n	800e2cc <__sfputs_r+0xa>
 800e2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e2e8 <_vfiprintf_r>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	b09d      	sub	sp, #116	@ 0x74
 800e2f0:	4614      	mov	r4, r2
 800e2f2:	4698      	mov	r8, r3
 800e2f4:	4606      	mov	r6, r0
 800e2f6:	b118      	cbz	r0, 800e300 <_vfiprintf_r+0x18>
 800e2f8:	6a03      	ldr	r3, [r0, #32]
 800e2fa:	b90b      	cbnz	r3, 800e300 <_vfiprintf_r+0x18>
 800e2fc:	f7fd fd42 	bl	800bd84 <__sinit>
 800e300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e302:	07d9      	lsls	r1, r3, #31
 800e304:	d405      	bmi.n	800e312 <_vfiprintf_r+0x2a>
 800e306:	89ab      	ldrh	r3, [r5, #12]
 800e308:	059a      	lsls	r2, r3, #22
 800e30a:	d402      	bmi.n	800e312 <_vfiprintf_r+0x2a>
 800e30c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e30e:	f7fd fe74 	bl	800bffa <__retarget_lock_acquire_recursive>
 800e312:	89ab      	ldrh	r3, [r5, #12]
 800e314:	071b      	lsls	r3, r3, #28
 800e316:	d501      	bpl.n	800e31c <_vfiprintf_r+0x34>
 800e318:	692b      	ldr	r3, [r5, #16]
 800e31a:	b99b      	cbnz	r3, 800e344 <_vfiprintf_r+0x5c>
 800e31c:	4629      	mov	r1, r5
 800e31e:	4630      	mov	r0, r6
 800e320:	f000 f9e4 	bl	800e6ec <__swsetup_r>
 800e324:	b170      	cbz	r0, 800e344 <_vfiprintf_r+0x5c>
 800e326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e328:	07dc      	lsls	r4, r3, #31
 800e32a:	d504      	bpl.n	800e336 <_vfiprintf_r+0x4e>
 800e32c:	f04f 30ff 	mov.w	r0, #4294967295
 800e330:	b01d      	add	sp, #116	@ 0x74
 800e332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e336:	89ab      	ldrh	r3, [r5, #12]
 800e338:	0598      	lsls	r0, r3, #22
 800e33a:	d4f7      	bmi.n	800e32c <_vfiprintf_r+0x44>
 800e33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e33e:	f7fd fe5d 	bl	800bffc <__retarget_lock_release_recursive>
 800e342:	e7f3      	b.n	800e32c <_vfiprintf_r+0x44>
 800e344:	2300      	movs	r3, #0
 800e346:	9309      	str	r3, [sp, #36]	@ 0x24
 800e348:	2320      	movs	r3, #32
 800e34a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e352:	2330      	movs	r3, #48	@ 0x30
 800e354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e504 <_vfiprintf_r+0x21c>
 800e358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e35c:	f04f 0901 	mov.w	r9, #1
 800e360:	4623      	mov	r3, r4
 800e362:	469a      	mov	sl, r3
 800e364:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e368:	b10a      	cbz	r2, 800e36e <_vfiprintf_r+0x86>
 800e36a:	2a25      	cmp	r2, #37	@ 0x25
 800e36c:	d1f9      	bne.n	800e362 <_vfiprintf_r+0x7a>
 800e36e:	ebba 0b04 	subs.w	fp, sl, r4
 800e372:	d00b      	beq.n	800e38c <_vfiprintf_r+0xa4>
 800e374:	465b      	mov	r3, fp
 800e376:	4622      	mov	r2, r4
 800e378:	4629      	mov	r1, r5
 800e37a:	4630      	mov	r0, r6
 800e37c:	f7ff ffa1 	bl	800e2c2 <__sfputs_r>
 800e380:	3001      	adds	r0, #1
 800e382:	f000 80a7 	beq.w	800e4d4 <_vfiprintf_r+0x1ec>
 800e386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e388:	445a      	add	r2, fp
 800e38a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e38c:	f89a 3000 	ldrb.w	r3, [sl]
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 809f 	beq.w	800e4d4 <_vfiprintf_r+0x1ec>
 800e396:	2300      	movs	r3, #0
 800e398:	f04f 32ff 	mov.w	r2, #4294967295
 800e39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3a0:	f10a 0a01 	add.w	sl, sl, #1
 800e3a4:	9304      	str	r3, [sp, #16]
 800e3a6:	9307      	str	r3, [sp, #28]
 800e3a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3ae:	4654      	mov	r4, sl
 800e3b0:	2205      	movs	r2, #5
 800e3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3b6:	4853      	ldr	r0, [pc, #332]	@ (800e504 <_vfiprintf_r+0x21c>)
 800e3b8:	f7f1 ff0a 	bl	80001d0 <memchr>
 800e3bc:	9a04      	ldr	r2, [sp, #16]
 800e3be:	b9d8      	cbnz	r0, 800e3f8 <_vfiprintf_r+0x110>
 800e3c0:	06d1      	lsls	r1, r2, #27
 800e3c2:	bf44      	itt	mi
 800e3c4:	2320      	movmi	r3, #32
 800e3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3ca:	0713      	lsls	r3, r2, #28
 800e3cc:	bf44      	itt	mi
 800e3ce:	232b      	movmi	r3, #43	@ 0x2b
 800e3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3da:	d015      	beq.n	800e408 <_vfiprintf_r+0x120>
 800e3dc:	9a07      	ldr	r2, [sp, #28]
 800e3de:	4654      	mov	r4, sl
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	f04f 0c0a 	mov.w	ip, #10
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3ec:	3b30      	subs	r3, #48	@ 0x30
 800e3ee:	2b09      	cmp	r3, #9
 800e3f0:	d94b      	bls.n	800e48a <_vfiprintf_r+0x1a2>
 800e3f2:	b1b0      	cbz	r0, 800e422 <_vfiprintf_r+0x13a>
 800e3f4:	9207      	str	r2, [sp, #28]
 800e3f6:	e014      	b.n	800e422 <_vfiprintf_r+0x13a>
 800e3f8:	eba0 0308 	sub.w	r3, r0, r8
 800e3fc:	fa09 f303 	lsl.w	r3, r9, r3
 800e400:	4313      	orrs	r3, r2
 800e402:	9304      	str	r3, [sp, #16]
 800e404:	46a2      	mov	sl, r4
 800e406:	e7d2      	b.n	800e3ae <_vfiprintf_r+0xc6>
 800e408:	9b03      	ldr	r3, [sp, #12]
 800e40a:	1d19      	adds	r1, r3, #4
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	9103      	str	r1, [sp, #12]
 800e410:	2b00      	cmp	r3, #0
 800e412:	bfbb      	ittet	lt
 800e414:	425b      	neglt	r3, r3
 800e416:	f042 0202 	orrlt.w	r2, r2, #2
 800e41a:	9307      	strge	r3, [sp, #28]
 800e41c:	9307      	strlt	r3, [sp, #28]
 800e41e:	bfb8      	it	lt
 800e420:	9204      	strlt	r2, [sp, #16]
 800e422:	7823      	ldrb	r3, [r4, #0]
 800e424:	2b2e      	cmp	r3, #46	@ 0x2e
 800e426:	d10a      	bne.n	800e43e <_vfiprintf_r+0x156>
 800e428:	7863      	ldrb	r3, [r4, #1]
 800e42a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e42c:	d132      	bne.n	800e494 <_vfiprintf_r+0x1ac>
 800e42e:	9b03      	ldr	r3, [sp, #12]
 800e430:	1d1a      	adds	r2, r3, #4
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	9203      	str	r2, [sp, #12]
 800e436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e43a:	3402      	adds	r4, #2
 800e43c:	9305      	str	r3, [sp, #20]
 800e43e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e514 <_vfiprintf_r+0x22c>
 800e442:	7821      	ldrb	r1, [r4, #0]
 800e444:	2203      	movs	r2, #3
 800e446:	4650      	mov	r0, sl
 800e448:	f7f1 fec2 	bl	80001d0 <memchr>
 800e44c:	b138      	cbz	r0, 800e45e <_vfiprintf_r+0x176>
 800e44e:	9b04      	ldr	r3, [sp, #16]
 800e450:	eba0 000a 	sub.w	r0, r0, sl
 800e454:	2240      	movs	r2, #64	@ 0x40
 800e456:	4082      	lsls	r2, r0
 800e458:	4313      	orrs	r3, r2
 800e45a:	3401      	adds	r4, #1
 800e45c:	9304      	str	r3, [sp, #16]
 800e45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e462:	4829      	ldr	r0, [pc, #164]	@ (800e508 <_vfiprintf_r+0x220>)
 800e464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e468:	2206      	movs	r2, #6
 800e46a:	f7f1 feb1 	bl	80001d0 <memchr>
 800e46e:	2800      	cmp	r0, #0
 800e470:	d03f      	beq.n	800e4f2 <_vfiprintf_r+0x20a>
 800e472:	4b26      	ldr	r3, [pc, #152]	@ (800e50c <_vfiprintf_r+0x224>)
 800e474:	bb1b      	cbnz	r3, 800e4be <_vfiprintf_r+0x1d6>
 800e476:	9b03      	ldr	r3, [sp, #12]
 800e478:	3307      	adds	r3, #7
 800e47a:	f023 0307 	bic.w	r3, r3, #7
 800e47e:	3308      	adds	r3, #8
 800e480:	9303      	str	r3, [sp, #12]
 800e482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e484:	443b      	add	r3, r7
 800e486:	9309      	str	r3, [sp, #36]	@ 0x24
 800e488:	e76a      	b.n	800e360 <_vfiprintf_r+0x78>
 800e48a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e48e:	460c      	mov	r4, r1
 800e490:	2001      	movs	r0, #1
 800e492:	e7a8      	b.n	800e3e6 <_vfiprintf_r+0xfe>
 800e494:	2300      	movs	r3, #0
 800e496:	3401      	adds	r4, #1
 800e498:	9305      	str	r3, [sp, #20]
 800e49a:	4619      	mov	r1, r3
 800e49c:	f04f 0c0a 	mov.w	ip, #10
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4a6:	3a30      	subs	r2, #48	@ 0x30
 800e4a8:	2a09      	cmp	r2, #9
 800e4aa:	d903      	bls.n	800e4b4 <_vfiprintf_r+0x1cc>
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d0c6      	beq.n	800e43e <_vfiprintf_r+0x156>
 800e4b0:	9105      	str	r1, [sp, #20]
 800e4b2:	e7c4      	b.n	800e43e <_vfiprintf_r+0x156>
 800e4b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e7f0      	b.n	800e4a0 <_vfiprintf_r+0x1b8>
 800e4be:	ab03      	add	r3, sp, #12
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	462a      	mov	r2, r5
 800e4c4:	4b12      	ldr	r3, [pc, #72]	@ (800e510 <_vfiprintf_r+0x228>)
 800e4c6:	a904      	add	r1, sp, #16
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	f7fc fe03 	bl	800b0d4 <_printf_float>
 800e4ce:	4607      	mov	r7, r0
 800e4d0:	1c78      	adds	r0, r7, #1
 800e4d2:	d1d6      	bne.n	800e482 <_vfiprintf_r+0x19a>
 800e4d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4d6:	07d9      	lsls	r1, r3, #31
 800e4d8:	d405      	bmi.n	800e4e6 <_vfiprintf_r+0x1fe>
 800e4da:	89ab      	ldrh	r3, [r5, #12]
 800e4dc:	059a      	lsls	r2, r3, #22
 800e4de:	d402      	bmi.n	800e4e6 <_vfiprintf_r+0x1fe>
 800e4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4e2:	f7fd fd8b 	bl	800bffc <__retarget_lock_release_recursive>
 800e4e6:	89ab      	ldrh	r3, [r5, #12]
 800e4e8:	065b      	lsls	r3, r3, #25
 800e4ea:	f53f af1f 	bmi.w	800e32c <_vfiprintf_r+0x44>
 800e4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4f0:	e71e      	b.n	800e330 <_vfiprintf_r+0x48>
 800e4f2:	ab03      	add	r3, sp, #12
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	462a      	mov	r2, r5
 800e4f8:	4b05      	ldr	r3, [pc, #20]	@ (800e510 <_vfiprintf_r+0x228>)
 800e4fa:	a904      	add	r1, sp, #16
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f7fd f881 	bl	800b604 <_printf_i>
 800e502:	e7e4      	b.n	800e4ce <_vfiprintf_r+0x1e6>
 800e504:	080102c1 	.word	0x080102c1
 800e508:	080102cb 	.word	0x080102cb
 800e50c:	0800b0d5 	.word	0x0800b0d5
 800e510:	0800e2c3 	.word	0x0800e2c3
 800e514:	080102c7 	.word	0x080102c7

0800e518 <__sflush_r>:
 800e518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e520:	0716      	lsls	r6, r2, #28
 800e522:	4605      	mov	r5, r0
 800e524:	460c      	mov	r4, r1
 800e526:	d454      	bmi.n	800e5d2 <__sflush_r+0xba>
 800e528:	684b      	ldr	r3, [r1, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	dc02      	bgt.n	800e534 <__sflush_r+0x1c>
 800e52e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e530:	2b00      	cmp	r3, #0
 800e532:	dd48      	ble.n	800e5c6 <__sflush_r+0xae>
 800e534:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e536:	2e00      	cmp	r6, #0
 800e538:	d045      	beq.n	800e5c6 <__sflush_r+0xae>
 800e53a:	2300      	movs	r3, #0
 800e53c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e540:	682f      	ldr	r7, [r5, #0]
 800e542:	6a21      	ldr	r1, [r4, #32]
 800e544:	602b      	str	r3, [r5, #0]
 800e546:	d030      	beq.n	800e5aa <__sflush_r+0x92>
 800e548:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	0759      	lsls	r1, r3, #29
 800e54e:	d505      	bpl.n	800e55c <__sflush_r+0x44>
 800e550:	6863      	ldr	r3, [r4, #4]
 800e552:	1ad2      	subs	r2, r2, r3
 800e554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e556:	b10b      	cbz	r3, 800e55c <__sflush_r+0x44>
 800e558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e55a:	1ad2      	subs	r2, r2, r3
 800e55c:	2300      	movs	r3, #0
 800e55e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e560:	6a21      	ldr	r1, [r4, #32]
 800e562:	4628      	mov	r0, r5
 800e564:	47b0      	blx	r6
 800e566:	1c43      	adds	r3, r0, #1
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	d106      	bne.n	800e57a <__sflush_r+0x62>
 800e56c:	6829      	ldr	r1, [r5, #0]
 800e56e:	291d      	cmp	r1, #29
 800e570:	d82b      	bhi.n	800e5ca <__sflush_r+0xb2>
 800e572:	4a2a      	ldr	r2, [pc, #168]	@ (800e61c <__sflush_r+0x104>)
 800e574:	410a      	asrs	r2, r1
 800e576:	07d6      	lsls	r6, r2, #31
 800e578:	d427      	bmi.n	800e5ca <__sflush_r+0xb2>
 800e57a:	2200      	movs	r2, #0
 800e57c:	6062      	str	r2, [r4, #4]
 800e57e:	04d9      	lsls	r1, r3, #19
 800e580:	6922      	ldr	r2, [r4, #16]
 800e582:	6022      	str	r2, [r4, #0]
 800e584:	d504      	bpl.n	800e590 <__sflush_r+0x78>
 800e586:	1c42      	adds	r2, r0, #1
 800e588:	d101      	bne.n	800e58e <__sflush_r+0x76>
 800e58a:	682b      	ldr	r3, [r5, #0]
 800e58c:	b903      	cbnz	r3, 800e590 <__sflush_r+0x78>
 800e58e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e592:	602f      	str	r7, [r5, #0]
 800e594:	b1b9      	cbz	r1, 800e5c6 <__sflush_r+0xae>
 800e596:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e59a:	4299      	cmp	r1, r3
 800e59c:	d002      	beq.n	800e5a4 <__sflush_r+0x8c>
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f7fe fb9a 	bl	800ccd8 <_free_r>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5a8:	e00d      	b.n	800e5c6 <__sflush_r+0xae>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	47b0      	blx	r6
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	1c50      	adds	r0, r2, #1
 800e5b4:	d1c9      	bne.n	800e54a <__sflush_r+0x32>
 800e5b6:	682b      	ldr	r3, [r5, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0c6      	beq.n	800e54a <__sflush_r+0x32>
 800e5bc:	2b1d      	cmp	r3, #29
 800e5be:	d001      	beq.n	800e5c4 <__sflush_r+0xac>
 800e5c0:	2b16      	cmp	r3, #22
 800e5c2:	d11e      	bne.n	800e602 <__sflush_r+0xea>
 800e5c4:	602f      	str	r7, [r5, #0]
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	e022      	b.n	800e610 <__sflush_r+0xf8>
 800e5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ce:	b21b      	sxth	r3, r3
 800e5d0:	e01b      	b.n	800e60a <__sflush_r+0xf2>
 800e5d2:	690f      	ldr	r7, [r1, #16]
 800e5d4:	2f00      	cmp	r7, #0
 800e5d6:	d0f6      	beq.n	800e5c6 <__sflush_r+0xae>
 800e5d8:	0793      	lsls	r3, r2, #30
 800e5da:	680e      	ldr	r6, [r1, #0]
 800e5dc:	bf08      	it	eq
 800e5de:	694b      	ldreq	r3, [r1, #20]
 800e5e0:	600f      	str	r7, [r1, #0]
 800e5e2:	bf18      	it	ne
 800e5e4:	2300      	movne	r3, #0
 800e5e6:	eba6 0807 	sub.w	r8, r6, r7
 800e5ea:	608b      	str	r3, [r1, #8]
 800e5ec:	f1b8 0f00 	cmp.w	r8, #0
 800e5f0:	dde9      	ble.n	800e5c6 <__sflush_r+0xae>
 800e5f2:	6a21      	ldr	r1, [r4, #32]
 800e5f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e5f6:	4643      	mov	r3, r8
 800e5f8:	463a      	mov	r2, r7
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	47b0      	blx	r6
 800e5fe:	2800      	cmp	r0, #0
 800e600:	dc08      	bgt.n	800e614 <__sflush_r+0xfc>
 800e602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e60a:	81a3      	strh	r3, [r4, #12]
 800e60c:	f04f 30ff 	mov.w	r0, #4294967295
 800e610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e614:	4407      	add	r7, r0
 800e616:	eba8 0800 	sub.w	r8, r8, r0
 800e61a:	e7e7      	b.n	800e5ec <__sflush_r+0xd4>
 800e61c:	dfbffffe 	.word	0xdfbffffe

0800e620 <_fflush_r>:
 800e620:	b538      	push	{r3, r4, r5, lr}
 800e622:	690b      	ldr	r3, [r1, #16]
 800e624:	4605      	mov	r5, r0
 800e626:	460c      	mov	r4, r1
 800e628:	b913      	cbnz	r3, 800e630 <_fflush_r+0x10>
 800e62a:	2500      	movs	r5, #0
 800e62c:	4628      	mov	r0, r5
 800e62e:	bd38      	pop	{r3, r4, r5, pc}
 800e630:	b118      	cbz	r0, 800e63a <_fflush_r+0x1a>
 800e632:	6a03      	ldr	r3, [r0, #32]
 800e634:	b90b      	cbnz	r3, 800e63a <_fflush_r+0x1a>
 800e636:	f7fd fba5 	bl	800bd84 <__sinit>
 800e63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d0f3      	beq.n	800e62a <_fflush_r+0xa>
 800e642:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e644:	07d0      	lsls	r0, r2, #31
 800e646:	d404      	bmi.n	800e652 <_fflush_r+0x32>
 800e648:	0599      	lsls	r1, r3, #22
 800e64a:	d402      	bmi.n	800e652 <_fflush_r+0x32>
 800e64c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e64e:	f7fd fcd4 	bl	800bffa <__retarget_lock_acquire_recursive>
 800e652:	4628      	mov	r0, r5
 800e654:	4621      	mov	r1, r4
 800e656:	f7ff ff5f 	bl	800e518 <__sflush_r>
 800e65a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e65c:	07da      	lsls	r2, r3, #31
 800e65e:	4605      	mov	r5, r0
 800e660:	d4e4      	bmi.n	800e62c <_fflush_r+0xc>
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	059b      	lsls	r3, r3, #22
 800e666:	d4e1      	bmi.n	800e62c <_fflush_r+0xc>
 800e668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e66a:	f7fd fcc7 	bl	800bffc <__retarget_lock_release_recursive>
 800e66e:	e7dd      	b.n	800e62c <_fflush_r+0xc>

0800e670 <__swbuf_r>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	460e      	mov	r6, r1
 800e674:	4614      	mov	r4, r2
 800e676:	4605      	mov	r5, r0
 800e678:	b118      	cbz	r0, 800e682 <__swbuf_r+0x12>
 800e67a:	6a03      	ldr	r3, [r0, #32]
 800e67c:	b90b      	cbnz	r3, 800e682 <__swbuf_r+0x12>
 800e67e:	f7fd fb81 	bl	800bd84 <__sinit>
 800e682:	69a3      	ldr	r3, [r4, #24]
 800e684:	60a3      	str	r3, [r4, #8]
 800e686:	89a3      	ldrh	r3, [r4, #12]
 800e688:	071a      	lsls	r2, r3, #28
 800e68a:	d501      	bpl.n	800e690 <__swbuf_r+0x20>
 800e68c:	6923      	ldr	r3, [r4, #16]
 800e68e:	b943      	cbnz	r3, 800e6a2 <__swbuf_r+0x32>
 800e690:	4621      	mov	r1, r4
 800e692:	4628      	mov	r0, r5
 800e694:	f000 f82a 	bl	800e6ec <__swsetup_r>
 800e698:	b118      	cbz	r0, 800e6a2 <__swbuf_r+0x32>
 800e69a:	f04f 37ff 	mov.w	r7, #4294967295
 800e69e:	4638      	mov	r0, r7
 800e6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	6922      	ldr	r2, [r4, #16]
 800e6a6:	1a98      	subs	r0, r3, r2
 800e6a8:	6963      	ldr	r3, [r4, #20]
 800e6aa:	b2f6      	uxtb	r6, r6
 800e6ac:	4283      	cmp	r3, r0
 800e6ae:	4637      	mov	r7, r6
 800e6b0:	dc05      	bgt.n	800e6be <__swbuf_r+0x4e>
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f7ff ffb3 	bl	800e620 <_fflush_r>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d1ed      	bne.n	800e69a <__swbuf_r+0x2a>
 800e6be:	68a3      	ldr	r3, [r4, #8]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	60a3      	str	r3, [r4, #8]
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	6022      	str	r2, [r4, #0]
 800e6ca:	701e      	strb	r6, [r3, #0]
 800e6cc:	6962      	ldr	r2, [r4, #20]
 800e6ce:	1c43      	adds	r3, r0, #1
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d004      	beq.n	800e6de <__swbuf_r+0x6e>
 800e6d4:	89a3      	ldrh	r3, [r4, #12]
 800e6d6:	07db      	lsls	r3, r3, #31
 800e6d8:	d5e1      	bpl.n	800e69e <__swbuf_r+0x2e>
 800e6da:	2e0a      	cmp	r6, #10
 800e6dc:	d1df      	bne.n	800e69e <__swbuf_r+0x2e>
 800e6de:	4621      	mov	r1, r4
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f7ff ff9d 	bl	800e620 <_fflush_r>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	d0d9      	beq.n	800e69e <__swbuf_r+0x2e>
 800e6ea:	e7d6      	b.n	800e69a <__swbuf_r+0x2a>

0800e6ec <__swsetup_r>:
 800e6ec:	b538      	push	{r3, r4, r5, lr}
 800e6ee:	4b29      	ldr	r3, [pc, #164]	@ (800e794 <__swsetup_r+0xa8>)
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	6818      	ldr	r0, [r3, #0]
 800e6f4:	460c      	mov	r4, r1
 800e6f6:	b118      	cbz	r0, 800e700 <__swsetup_r+0x14>
 800e6f8:	6a03      	ldr	r3, [r0, #32]
 800e6fa:	b90b      	cbnz	r3, 800e700 <__swsetup_r+0x14>
 800e6fc:	f7fd fb42 	bl	800bd84 <__sinit>
 800e700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e704:	0719      	lsls	r1, r3, #28
 800e706:	d422      	bmi.n	800e74e <__swsetup_r+0x62>
 800e708:	06da      	lsls	r2, r3, #27
 800e70a:	d407      	bmi.n	800e71c <__swsetup_r+0x30>
 800e70c:	2209      	movs	r2, #9
 800e70e:	602a      	str	r2, [r5, #0]
 800e710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e714:	81a3      	strh	r3, [r4, #12]
 800e716:	f04f 30ff 	mov.w	r0, #4294967295
 800e71a:	e033      	b.n	800e784 <__swsetup_r+0x98>
 800e71c:	0758      	lsls	r0, r3, #29
 800e71e:	d512      	bpl.n	800e746 <__swsetup_r+0x5a>
 800e720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e722:	b141      	cbz	r1, 800e736 <__swsetup_r+0x4a>
 800e724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e728:	4299      	cmp	r1, r3
 800e72a:	d002      	beq.n	800e732 <__swsetup_r+0x46>
 800e72c:	4628      	mov	r0, r5
 800e72e:	f7fe fad3 	bl	800ccd8 <_free_r>
 800e732:	2300      	movs	r3, #0
 800e734:	6363      	str	r3, [r4, #52]	@ 0x34
 800e736:	89a3      	ldrh	r3, [r4, #12]
 800e738:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e73c:	81a3      	strh	r3, [r4, #12]
 800e73e:	2300      	movs	r3, #0
 800e740:	6063      	str	r3, [r4, #4]
 800e742:	6923      	ldr	r3, [r4, #16]
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	89a3      	ldrh	r3, [r4, #12]
 800e748:	f043 0308 	orr.w	r3, r3, #8
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	6923      	ldr	r3, [r4, #16]
 800e750:	b94b      	cbnz	r3, 800e766 <__swsetup_r+0x7a>
 800e752:	89a3      	ldrh	r3, [r4, #12]
 800e754:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e75c:	d003      	beq.n	800e766 <__swsetup_r+0x7a>
 800e75e:	4621      	mov	r1, r4
 800e760:	4628      	mov	r0, r5
 800e762:	f000 f8db 	bl	800e91c <__smakebuf_r>
 800e766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e76a:	f013 0201 	ands.w	r2, r3, #1
 800e76e:	d00a      	beq.n	800e786 <__swsetup_r+0x9a>
 800e770:	2200      	movs	r2, #0
 800e772:	60a2      	str	r2, [r4, #8]
 800e774:	6962      	ldr	r2, [r4, #20]
 800e776:	4252      	negs	r2, r2
 800e778:	61a2      	str	r2, [r4, #24]
 800e77a:	6922      	ldr	r2, [r4, #16]
 800e77c:	b942      	cbnz	r2, 800e790 <__swsetup_r+0xa4>
 800e77e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e782:	d1c5      	bne.n	800e710 <__swsetup_r+0x24>
 800e784:	bd38      	pop	{r3, r4, r5, pc}
 800e786:	0799      	lsls	r1, r3, #30
 800e788:	bf58      	it	pl
 800e78a:	6962      	ldrpl	r2, [r4, #20]
 800e78c:	60a2      	str	r2, [r4, #8]
 800e78e:	e7f4      	b.n	800e77a <__swsetup_r+0x8e>
 800e790:	2000      	movs	r0, #0
 800e792:	e7f7      	b.n	800e784 <__swsetup_r+0x98>
 800e794:	200001bc 	.word	0x200001bc

0800e798 <memmove>:
 800e798:	4288      	cmp	r0, r1
 800e79a:	b510      	push	{r4, lr}
 800e79c:	eb01 0402 	add.w	r4, r1, r2
 800e7a0:	d902      	bls.n	800e7a8 <memmove+0x10>
 800e7a2:	4284      	cmp	r4, r0
 800e7a4:	4623      	mov	r3, r4
 800e7a6:	d807      	bhi.n	800e7b8 <memmove+0x20>
 800e7a8:	1e43      	subs	r3, r0, #1
 800e7aa:	42a1      	cmp	r1, r4
 800e7ac:	d008      	beq.n	800e7c0 <memmove+0x28>
 800e7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7b6:	e7f8      	b.n	800e7aa <memmove+0x12>
 800e7b8:	4402      	add	r2, r0
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	428a      	cmp	r2, r1
 800e7be:	d100      	bne.n	800e7c2 <memmove+0x2a>
 800e7c0:	bd10      	pop	{r4, pc}
 800e7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7ca:	e7f7      	b.n	800e7bc <memmove+0x24>

0800e7cc <_sbrk_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d06      	ldr	r5, [pc, #24]	@ (800e7e8 <_sbrk_r+0x1c>)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	602b      	str	r3, [r5, #0]
 800e7d8:	f7f4 fc54 	bl	8003084 <_sbrk>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_sbrk_r+0x1a>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_sbrk_r+0x1a>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	20000be0 	.word	0x20000be0

0800e7ec <__assert_func>:
 800e7ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7ee:	4614      	mov	r4, r2
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	4b09      	ldr	r3, [pc, #36]	@ (800e818 <__assert_func+0x2c>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	68d8      	ldr	r0, [r3, #12]
 800e7fa:	b954      	cbnz	r4, 800e812 <__assert_func+0x26>
 800e7fc:	4b07      	ldr	r3, [pc, #28]	@ (800e81c <__assert_func+0x30>)
 800e7fe:	461c      	mov	r4, r3
 800e800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e804:	9100      	str	r1, [sp, #0]
 800e806:	462b      	mov	r3, r5
 800e808:	4905      	ldr	r1, [pc, #20]	@ (800e820 <__assert_func+0x34>)
 800e80a:	f000 f84f 	bl	800e8ac <fiprintf>
 800e80e:	f000 f8e3 	bl	800e9d8 <abort>
 800e812:	4b04      	ldr	r3, [pc, #16]	@ (800e824 <__assert_func+0x38>)
 800e814:	e7f4      	b.n	800e800 <__assert_func+0x14>
 800e816:	bf00      	nop
 800e818:	200001bc 	.word	0x200001bc
 800e81c:	0801030d 	.word	0x0801030d
 800e820:	080102df 	.word	0x080102df
 800e824:	080102d2 	.word	0x080102d2

0800e828 <_calloc_r>:
 800e828:	b570      	push	{r4, r5, r6, lr}
 800e82a:	fba1 5402 	umull	r5, r4, r1, r2
 800e82e:	b93c      	cbnz	r4, 800e840 <_calloc_r+0x18>
 800e830:	4629      	mov	r1, r5
 800e832:	f7fe fdff 	bl	800d434 <_malloc_r>
 800e836:	4606      	mov	r6, r0
 800e838:	b928      	cbnz	r0, 800e846 <_calloc_r+0x1e>
 800e83a:	2600      	movs	r6, #0
 800e83c:	4630      	mov	r0, r6
 800e83e:	bd70      	pop	{r4, r5, r6, pc}
 800e840:	220c      	movs	r2, #12
 800e842:	6002      	str	r2, [r0, #0]
 800e844:	e7f9      	b.n	800e83a <_calloc_r+0x12>
 800e846:	462a      	mov	r2, r5
 800e848:	4621      	mov	r1, r4
 800e84a:	f7fd fb46 	bl	800beda <memset>
 800e84e:	e7f5      	b.n	800e83c <_calloc_r+0x14>

0800e850 <_realloc_r>:
 800e850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e854:	4680      	mov	r8, r0
 800e856:	4615      	mov	r5, r2
 800e858:	460c      	mov	r4, r1
 800e85a:	b921      	cbnz	r1, 800e866 <_realloc_r+0x16>
 800e85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e860:	4611      	mov	r1, r2
 800e862:	f7fe bde7 	b.w	800d434 <_malloc_r>
 800e866:	b92a      	cbnz	r2, 800e874 <_realloc_r+0x24>
 800e868:	f7fe fa36 	bl	800ccd8 <_free_r>
 800e86c:	2400      	movs	r4, #0
 800e86e:	4620      	mov	r0, r4
 800e870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e874:	f000 f8b7 	bl	800e9e6 <_malloc_usable_size_r>
 800e878:	4285      	cmp	r5, r0
 800e87a:	4606      	mov	r6, r0
 800e87c:	d802      	bhi.n	800e884 <_realloc_r+0x34>
 800e87e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e882:	d8f4      	bhi.n	800e86e <_realloc_r+0x1e>
 800e884:	4629      	mov	r1, r5
 800e886:	4640      	mov	r0, r8
 800e888:	f7fe fdd4 	bl	800d434 <_malloc_r>
 800e88c:	4607      	mov	r7, r0
 800e88e:	2800      	cmp	r0, #0
 800e890:	d0ec      	beq.n	800e86c <_realloc_r+0x1c>
 800e892:	42b5      	cmp	r5, r6
 800e894:	462a      	mov	r2, r5
 800e896:	4621      	mov	r1, r4
 800e898:	bf28      	it	cs
 800e89a:	4632      	movcs	r2, r6
 800e89c:	f7fd fbaf 	bl	800bffe <memcpy>
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	4640      	mov	r0, r8
 800e8a4:	f7fe fa18 	bl	800ccd8 <_free_r>
 800e8a8:	463c      	mov	r4, r7
 800e8aa:	e7e0      	b.n	800e86e <_realloc_r+0x1e>

0800e8ac <fiprintf>:
 800e8ac:	b40e      	push	{r1, r2, r3}
 800e8ae:	b503      	push	{r0, r1, lr}
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	ab03      	add	r3, sp, #12
 800e8b4:	4805      	ldr	r0, [pc, #20]	@ (800e8cc <fiprintf+0x20>)
 800e8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ba:	6800      	ldr	r0, [r0, #0]
 800e8bc:	9301      	str	r3, [sp, #4]
 800e8be:	f7ff fd13 	bl	800e2e8 <_vfiprintf_r>
 800e8c2:	b002      	add	sp, #8
 800e8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8c8:	b003      	add	sp, #12
 800e8ca:	4770      	bx	lr
 800e8cc:	200001bc 	.word	0x200001bc

0800e8d0 <__swhatbuf_r>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	460c      	mov	r4, r1
 800e8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d8:	2900      	cmp	r1, #0
 800e8da:	b096      	sub	sp, #88	@ 0x58
 800e8dc:	4615      	mov	r5, r2
 800e8de:	461e      	mov	r6, r3
 800e8e0:	da0d      	bge.n	800e8fe <__swhatbuf_r+0x2e>
 800e8e2:	89a3      	ldrh	r3, [r4, #12]
 800e8e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8e8:	f04f 0100 	mov.w	r1, #0
 800e8ec:	bf14      	ite	ne
 800e8ee:	2340      	movne	r3, #64	@ 0x40
 800e8f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	6031      	str	r1, [r6, #0]
 800e8f8:	602b      	str	r3, [r5, #0]
 800e8fa:	b016      	add	sp, #88	@ 0x58
 800e8fc:	bd70      	pop	{r4, r5, r6, pc}
 800e8fe:	466a      	mov	r2, sp
 800e900:	f000 f848 	bl	800e994 <_fstat_r>
 800e904:	2800      	cmp	r0, #0
 800e906:	dbec      	blt.n	800e8e2 <__swhatbuf_r+0x12>
 800e908:	9901      	ldr	r1, [sp, #4]
 800e90a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e90e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e912:	4259      	negs	r1, r3
 800e914:	4159      	adcs	r1, r3
 800e916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e91a:	e7eb      	b.n	800e8f4 <__swhatbuf_r+0x24>

0800e91c <__smakebuf_r>:
 800e91c:	898b      	ldrh	r3, [r1, #12]
 800e91e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e920:	079d      	lsls	r5, r3, #30
 800e922:	4606      	mov	r6, r0
 800e924:	460c      	mov	r4, r1
 800e926:	d507      	bpl.n	800e938 <__smakebuf_r+0x1c>
 800e928:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	6123      	str	r3, [r4, #16]
 800e930:	2301      	movs	r3, #1
 800e932:	6163      	str	r3, [r4, #20]
 800e934:	b003      	add	sp, #12
 800e936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e938:	ab01      	add	r3, sp, #4
 800e93a:	466a      	mov	r2, sp
 800e93c:	f7ff ffc8 	bl	800e8d0 <__swhatbuf_r>
 800e940:	9f00      	ldr	r7, [sp, #0]
 800e942:	4605      	mov	r5, r0
 800e944:	4639      	mov	r1, r7
 800e946:	4630      	mov	r0, r6
 800e948:	f7fe fd74 	bl	800d434 <_malloc_r>
 800e94c:	b948      	cbnz	r0, 800e962 <__smakebuf_r+0x46>
 800e94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e952:	059a      	lsls	r2, r3, #22
 800e954:	d4ee      	bmi.n	800e934 <__smakebuf_r+0x18>
 800e956:	f023 0303 	bic.w	r3, r3, #3
 800e95a:	f043 0302 	orr.w	r3, r3, #2
 800e95e:	81a3      	strh	r3, [r4, #12]
 800e960:	e7e2      	b.n	800e928 <__smakebuf_r+0xc>
 800e962:	89a3      	ldrh	r3, [r4, #12]
 800e964:	6020      	str	r0, [r4, #0]
 800e966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e96a:	81a3      	strh	r3, [r4, #12]
 800e96c:	9b01      	ldr	r3, [sp, #4]
 800e96e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e972:	b15b      	cbz	r3, 800e98c <__smakebuf_r+0x70>
 800e974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e978:	4630      	mov	r0, r6
 800e97a:	f000 f81d 	bl	800e9b8 <_isatty_r>
 800e97e:	b128      	cbz	r0, 800e98c <__smakebuf_r+0x70>
 800e980:	89a3      	ldrh	r3, [r4, #12]
 800e982:	f023 0303 	bic.w	r3, r3, #3
 800e986:	f043 0301 	orr.w	r3, r3, #1
 800e98a:	81a3      	strh	r3, [r4, #12]
 800e98c:	89a3      	ldrh	r3, [r4, #12]
 800e98e:	431d      	orrs	r5, r3
 800e990:	81a5      	strh	r5, [r4, #12]
 800e992:	e7cf      	b.n	800e934 <__smakebuf_r+0x18>

0800e994 <_fstat_r>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4d07      	ldr	r5, [pc, #28]	@ (800e9b4 <_fstat_r+0x20>)
 800e998:	2300      	movs	r3, #0
 800e99a:	4604      	mov	r4, r0
 800e99c:	4608      	mov	r0, r1
 800e99e:	4611      	mov	r1, r2
 800e9a0:	602b      	str	r3, [r5, #0]
 800e9a2:	f7f4 fb47 	bl	8003034 <_fstat>
 800e9a6:	1c43      	adds	r3, r0, #1
 800e9a8:	d102      	bne.n	800e9b0 <_fstat_r+0x1c>
 800e9aa:	682b      	ldr	r3, [r5, #0]
 800e9ac:	b103      	cbz	r3, 800e9b0 <_fstat_r+0x1c>
 800e9ae:	6023      	str	r3, [r4, #0]
 800e9b0:	bd38      	pop	{r3, r4, r5, pc}
 800e9b2:	bf00      	nop
 800e9b4:	20000be0 	.word	0x20000be0

0800e9b8 <_isatty_r>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	4d06      	ldr	r5, [pc, #24]	@ (800e9d4 <_isatty_r+0x1c>)
 800e9bc:	2300      	movs	r3, #0
 800e9be:	4604      	mov	r4, r0
 800e9c0:	4608      	mov	r0, r1
 800e9c2:	602b      	str	r3, [r5, #0]
 800e9c4:	f7f4 fb46 	bl	8003054 <_isatty>
 800e9c8:	1c43      	adds	r3, r0, #1
 800e9ca:	d102      	bne.n	800e9d2 <_isatty_r+0x1a>
 800e9cc:	682b      	ldr	r3, [r5, #0]
 800e9ce:	b103      	cbz	r3, 800e9d2 <_isatty_r+0x1a>
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	bd38      	pop	{r3, r4, r5, pc}
 800e9d4:	20000be0 	.word	0x20000be0

0800e9d8 <abort>:
 800e9d8:	b508      	push	{r3, lr}
 800e9da:	2006      	movs	r0, #6
 800e9dc:	f000 f834 	bl	800ea48 <raise>
 800e9e0:	2001      	movs	r0, #1
 800e9e2:	f7f4 fad7 	bl	8002f94 <_exit>

0800e9e6 <_malloc_usable_size_r>:
 800e9e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9ea:	1f18      	subs	r0, r3, #4
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	bfbc      	itt	lt
 800e9f0:	580b      	ldrlt	r3, [r1, r0]
 800e9f2:	18c0      	addlt	r0, r0, r3
 800e9f4:	4770      	bx	lr

0800e9f6 <_raise_r>:
 800e9f6:	291f      	cmp	r1, #31
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	460c      	mov	r4, r1
 800e9fe:	d904      	bls.n	800ea0a <_raise_r+0x14>
 800ea00:	2316      	movs	r3, #22
 800ea02:	6003      	str	r3, [r0, #0]
 800ea04:	f04f 30ff 	mov.w	r0, #4294967295
 800ea08:	bd38      	pop	{r3, r4, r5, pc}
 800ea0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ea0c:	b112      	cbz	r2, 800ea14 <_raise_r+0x1e>
 800ea0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea12:	b94b      	cbnz	r3, 800ea28 <_raise_r+0x32>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f000 f831 	bl	800ea7c <_getpid_r>
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	4601      	mov	r1, r0
 800ea1e:	4628      	mov	r0, r5
 800ea20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea24:	f000 b818 	b.w	800ea58 <_kill_r>
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d00a      	beq.n	800ea42 <_raise_r+0x4c>
 800ea2c:	1c59      	adds	r1, r3, #1
 800ea2e:	d103      	bne.n	800ea38 <_raise_r+0x42>
 800ea30:	2316      	movs	r3, #22
 800ea32:	6003      	str	r3, [r0, #0]
 800ea34:	2001      	movs	r0, #1
 800ea36:	e7e7      	b.n	800ea08 <_raise_r+0x12>
 800ea38:	2100      	movs	r1, #0
 800ea3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea3e:	4620      	mov	r0, r4
 800ea40:	4798      	blx	r3
 800ea42:	2000      	movs	r0, #0
 800ea44:	e7e0      	b.n	800ea08 <_raise_r+0x12>
	...

0800ea48 <raise>:
 800ea48:	4b02      	ldr	r3, [pc, #8]	@ (800ea54 <raise+0xc>)
 800ea4a:	4601      	mov	r1, r0
 800ea4c:	6818      	ldr	r0, [r3, #0]
 800ea4e:	f7ff bfd2 	b.w	800e9f6 <_raise_r>
 800ea52:	bf00      	nop
 800ea54:	200001bc 	.word	0x200001bc

0800ea58 <_kill_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4d07      	ldr	r5, [pc, #28]	@ (800ea78 <_kill_r+0x20>)
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	4608      	mov	r0, r1
 800ea62:	4611      	mov	r1, r2
 800ea64:	602b      	str	r3, [r5, #0]
 800ea66:	f7f4 fa85 	bl	8002f74 <_kill>
 800ea6a:	1c43      	adds	r3, r0, #1
 800ea6c:	d102      	bne.n	800ea74 <_kill_r+0x1c>
 800ea6e:	682b      	ldr	r3, [r5, #0]
 800ea70:	b103      	cbz	r3, 800ea74 <_kill_r+0x1c>
 800ea72:	6023      	str	r3, [r4, #0]
 800ea74:	bd38      	pop	{r3, r4, r5, pc}
 800ea76:	bf00      	nop
 800ea78:	20000be0 	.word	0x20000be0

0800ea7c <_getpid_r>:
 800ea7c:	f7f4 ba72 	b.w	8002f64 <_getpid>

0800ea80 <sqrt>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	ed2d 8b02 	vpush	{d8}
 800ea86:	ec55 4b10 	vmov	r4, r5, d0
 800ea8a:	f000 f879 	bl	800eb80 <__ieee754_sqrt>
 800ea8e:	4622      	mov	r2, r4
 800ea90:	462b      	mov	r3, r5
 800ea92:	4620      	mov	r0, r4
 800ea94:	4629      	mov	r1, r5
 800ea96:	eeb0 8a40 	vmov.f32	s16, s0
 800ea9a:	eef0 8a60 	vmov.f32	s17, s1
 800ea9e:	f7f2 f845 	bl	8000b2c <__aeabi_dcmpun>
 800eaa2:	b990      	cbnz	r0, 800eaca <sqrt+0x4a>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	4629      	mov	r1, r5
 800eaac:	f7f2 f816 	bl	8000adc <__aeabi_dcmplt>
 800eab0:	b158      	cbz	r0, 800eaca <sqrt+0x4a>
 800eab2:	f7fd fa77 	bl	800bfa4 <__errno>
 800eab6:	2321      	movs	r3, #33	@ 0x21
 800eab8:	6003      	str	r3, [r0, #0]
 800eaba:	2200      	movs	r2, #0
 800eabc:	2300      	movs	r3, #0
 800eabe:	4610      	mov	r0, r2
 800eac0:	4619      	mov	r1, r3
 800eac2:	f7f1 fec3 	bl	800084c <__aeabi_ddiv>
 800eac6:	ec41 0b18 	vmov	d8, r0, r1
 800eaca:	eeb0 0a48 	vmov.f32	s0, s16
 800eace:	eef0 0a68 	vmov.f32	s1, s17
 800ead2:	ecbd 8b02 	vpop	{d8}
 800ead6:	bd38      	pop	{r3, r4, r5, pc}

0800ead8 <cos>:
 800ead8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eada:	ec53 2b10 	vmov	r2, r3, d0
 800eade:	4826      	ldr	r0, [pc, #152]	@ (800eb78 <cos+0xa0>)
 800eae0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eae4:	4281      	cmp	r1, r0
 800eae6:	d806      	bhi.n	800eaf6 <cos+0x1e>
 800eae8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800eb70 <cos+0x98>
 800eaec:	b005      	add	sp, #20
 800eaee:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaf2:	f000 b921 	b.w	800ed38 <__kernel_cos>
 800eaf6:	4821      	ldr	r0, [pc, #132]	@ (800eb7c <cos+0xa4>)
 800eaf8:	4281      	cmp	r1, r0
 800eafa:	d908      	bls.n	800eb0e <cos+0x36>
 800eafc:	4610      	mov	r0, r2
 800eafe:	4619      	mov	r1, r3
 800eb00:	f7f1 fbc2 	bl	8000288 <__aeabi_dsub>
 800eb04:	ec41 0b10 	vmov	d0, r0, r1
 800eb08:	b005      	add	sp, #20
 800eb0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb0e:	4668      	mov	r0, sp
 800eb10:	f000 fa96 	bl	800f040 <__ieee754_rem_pio2>
 800eb14:	f000 0003 	and.w	r0, r0, #3
 800eb18:	2801      	cmp	r0, #1
 800eb1a:	d00b      	beq.n	800eb34 <cos+0x5c>
 800eb1c:	2802      	cmp	r0, #2
 800eb1e:	d015      	beq.n	800eb4c <cos+0x74>
 800eb20:	b9d8      	cbnz	r0, 800eb5a <cos+0x82>
 800eb22:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb26:	ed9d 0b00 	vldr	d0, [sp]
 800eb2a:	f000 f905 	bl	800ed38 <__kernel_cos>
 800eb2e:	ec51 0b10 	vmov	r0, r1, d0
 800eb32:	e7e7      	b.n	800eb04 <cos+0x2c>
 800eb34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb38:	ed9d 0b00 	vldr	d0, [sp]
 800eb3c:	f000 f9c4 	bl	800eec8 <__kernel_sin>
 800eb40:	ec53 2b10 	vmov	r2, r3, d0
 800eb44:	4610      	mov	r0, r2
 800eb46:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800eb4a:	e7db      	b.n	800eb04 <cos+0x2c>
 800eb4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb50:	ed9d 0b00 	vldr	d0, [sp]
 800eb54:	f000 f8f0 	bl	800ed38 <__kernel_cos>
 800eb58:	e7f2      	b.n	800eb40 <cos+0x68>
 800eb5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb5e:	ed9d 0b00 	vldr	d0, [sp]
 800eb62:	2001      	movs	r0, #1
 800eb64:	f000 f9b0 	bl	800eec8 <__kernel_sin>
 800eb68:	e7e1      	b.n	800eb2e <cos+0x56>
 800eb6a:	bf00      	nop
 800eb6c:	f3af 8000 	nop.w
	...
 800eb78:	3fe921fb 	.word	0x3fe921fb
 800eb7c:	7fefffff 	.word	0x7fefffff

0800eb80 <__ieee754_sqrt>:
 800eb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb84:	4a68      	ldr	r2, [pc, #416]	@ (800ed28 <__ieee754_sqrt+0x1a8>)
 800eb86:	ec55 4b10 	vmov	r4, r5, d0
 800eb8a:	43aa      	bics	r2, r5
 800eb8c:	462b      	mov	r3, r5
 800eb8e:	4621      	mov	r1, r4
 800eb90:	d110      	bne.n	800ebb4 <__ieee754_sqrt+0x34>
 800eb92:	4622      	mov	r2, r4
 800eb94:	4620      	mov	r0, r4
 800eb96:	4629      	mov	r1, r5
 800eb98:	f7f1 fd2e 	bl	80005f8 <__aeabi_dmul>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	460b      	mov	r3, r1
 800eba0:	4620      	mov	r0, r4
 800eba2:	4629      	mov	r1, r5
 800eba4:	f7f1 fb72 	bl	800028c <__adddf3>
 800eba8:	4604      	mov	r4, r0
 800ebaa:	460d      	mov	r5, r1
 800ebac:	ec45 4b10 	vmov	d0, r4, r5
 800ebb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb4:	2d00      	cmp	r5, #0
 800ebb6:	dc0e      	bgt.n	800ebd6 <__ieee754_sqrt+0x56>
 800ebb8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ebbc:	4322      	orrs	r2, r4
 800ebbe:	d0f5      	beq.n	800ebac <__ieee754_sqrt+0x2c>
 800ebc0:	b19d      	cbz	r5, 800ebea <__ieee754_sqrt+0x6a>
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	4629      	mov	r1, r5
 800ebc8:	f7f1 fb5e 	bl	8000288 <__aeabi_dsub>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	f7f1 fe3c 	bl	800084c <__aeabi_ddiv>
 800ebd4:	e7e8      	b.n	800eba8 <__ieee754_sqrt+0x28>
 800ebd6:	152a      	asrs	r2, r5, #20
 800ebd8:	d115      	bne.n	800ec06 <__ieee754_sqrt+0x86>
 800ebda:	2000      	movs	r0, #0
 800ebdc:	e009      	b.n	800ebf2 <__ieee754_sqrt+0x72>
 800ebde:	0acb      	lsrs	r3, r1, #11
 800ebe0:	3a15      	subs	r2, #21
 800ebe2:	0549      	lsls	r1, r1, #21
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d0fa      	beq.n	800ebde <__ieee754_sqrt+0x5e>
 800ebe8:	e7f7      	b.n	800ebda <__ieee754_sqrt+0x5a>
 800ebea:	462a      	mov	r2, r5
 800ebec:	e7fa      	b.n	800ebe4 <__ieee754_sqrt+0x64>
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	02dc      	lsls	r4, r3, #11
 800ebf4:	d5fb      	bpl.n	800ebee <__ieee754_sqrt+0x6e>
 800ebf6:	1e44      	subs	r4, r0, #1
 800ebf8:	1b12      	subs	r2, r2, r4
 800ebfa:	f1c0 0420 	rsb	r4, r0, #32
 800ebfe:	fa21 f404 	lsr.w	r4, r1, r4
 800ec02:	4323      	orrs	r3, r4
 800ec04:	4081      	lsls	r1, r0
 800ec06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ec0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec12:	07d2      	lsls	r2, r2, #31
 800ec14:	bf5c      	itt	pl
 800ec16:	005b      	lslpl	r3, r3, #1
 800ec18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ec1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec20:	bf58      	it	pl
 800ec22:	0049      	lslpl	r1, r1, #1
 800ec24:	2600      	movs	r6, #0
 800ec26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ec2a:	106d      	asrs	r5, r5, #1
 800ec2c:	0049      	lsls	r1, r1, #1
 800ec2e:	2016      	movs	r0, #22
 800ec30:	4632      	mov	r2, r6
 800ec32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ec36:	1917      	adds	r7, r2, r4
 800ec38:	429f      	cmp	r7, r3
 800ec3a:	bfde      	ittt	le
 800ec3c:	193a      	addle	r2, r7, r4
 800ec3e:	1bdb      	suble	r3, r3, r7
 800ec40:	1936      	addle	r6, r6, r4
 800ec42:	0fcf      	lsrs	r7, r1, #31
 800ec44:	3801      	subs	r0, #1
 800ec46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ec4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ec4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ec52:	d1f0      	bne.n	800ec36 <__ieee754_sqrt+0xb6>
 800ec54:	4604      	mov	r4, r0
 800ec56:	2720      	movs	r7, #32
 800ec58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	eb00 0e0c 	add.w	lr, r0, ip
 800ec62:	db02      	blt.n	800ec6a <__ieee754_sqrt+0xea>
 800ec64:	d113      	bne.n	800ec8e <__ieee754_sqrt+0x10e>
 800ec66:	458e      	cmp	lr, r1
 800ec68:	d811      	bhi.n	800ec8e <__ieee754_sqrt+0x10e>
 800ec6a:	f1be 0f00 	cmp.w	lr, #0
 800ec6e:	eb0e 000c 	add.w	r0, lr, ip
 800ec72:	da42      	bge.n	800ecfa <__ieee754_sqrt+0x17a>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	db40      	blt.n	800ecfa <__ieee754_sqrt+0x17a>
 800ec78:	f102 0801 	add.w	r8, r2, #1
 800ec7c:	1a9b      	subs	r3, r3, r2
 800ec7e:	458e      	cmp	lr, r1
 800ec80:	bf88      	it	hi
 800ec82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ec86:	eba1 010e 	sub.w	r1, r1, lr
 800ec8a:	4464      	add	r4, ip
 800ec8c:	4642      	mov	r2, r8
 800ec8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ec92:	3f01      	subs	r7, #1
 800ec94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ec98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ec9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800eca0:	d1dc      	bne.n	800ec5c <__ieee754_sqrt+0xdc>
 800eca2:	4319      	orrs	r1, r3
 800eca4:	d01b      	beq.n	800ecde <__ieee754_sqrt+0x15e>
 800eca6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ed2c <__ieee754_sqrt+0x1ac>
 800ecaa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ed30 <__ieee754_sqrt+0x1b0>
 800ecae:	e9da 0100 	ldrd	r0, r1, [sl]
 800ecb2:	e9db 2300 	ldrd	r2, r3, [fp]
 800ecb6:	f7f1 fae7 	bl	8000288 <__aeabi_dsub>
 800ecba:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	4649      	mov	r1, r9
 800ecc6:	f7f1 ff13 	bl	8000af0 <__aeabi_dcmple>
 800ecca:	b140      	cbz	r0, 800ecde <__ieee754_sqrt+0x15e>
 800eccc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ecd0:	e9da 0100 	ldrd	r0, r1, [sl]
 800ecd4:	e9db 2300 	ldrd	r2, r3, [fp]
 800ecd8:	d111      	bne.n	800ecfe <__ieee754_sqrt+0x17e>
 800ecda:	3601      	adds	r6, #1
 800ecdc:	463c      	mov	r4, r7
 800ecde:	1072      	asrs	r2, r6, #1
 800ece0:	0863      	lsrs	r3, r4, #1
 800ece2:	07f1      	lsls	r1, r6, #31
 800ece4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ece8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ecec:	bf48      	it	mi
 800ecee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ecf2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	e756      	b.n	800eba8 <__ieee754_sqrt+0x28>
 800ecfa:	4690      	mov	r8, r2
 800ecfc:	e7be      	b.n	800ec7c <__ieee754_sqrt+0xfc>
 800ecfe:	f7f1 fac5 	bl	800028c <__adddf3>
 800ed02:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed06:	4602      	mov	r2, r0
 800ed08:	460b      	mov	r3, r1
 800ed0a:	4640      	mov	r0, r8
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	f7f1 fee5 	bl	8000adc <__aeabi_dcmplt>
 800ed12:	b120      	cbz	r0, 800ed1e <__ieee754_sqrt+0x19e>
 800ed14:	1ca0      	adds	r0, r4, #2
 800ed16:	bf08      	it	eq
 800ed18:	3601      	addeq	r6, #1
 800ed1a:	3402      	adds	r4, #2
 800ed1c:	e7df      	b.n	800ecde <__ieee754_sqrt+0x15e>
 800ed1e:	1c63      	adds	r3, r4, #1
 800ed20:	f023 0401 	bic.w	r4, r3, #1
 800ed24:	e7db      	b.n	800ecde <__ieee754_sqrt+0x15e>
 800ed26:	bf00      	nop
 800ed28:	7ff00000 	.word	0x7ff00000
 800ed2c:	20000218 	.word	0x20000218
 800ed30:	20000210 	.word	0x20000210
 800ed34:	00000000 	.word	0x00000000

0800ed38 <__kernel_cos>:
 800ed38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed3c:	ec57 6b10 	vmov	r6, r7, d0
 800ed40:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ed44:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ed48:	ed8d 1b00 	vstr	d1, [sp]
 800ed4c:	d206      	bcs.n	800ed5c <__kernel_cos+0x24>
 800ed4e:	4630      	mov	r0, r6
 800ed50:	4639      	mov	r1, r7
 800ed52:	f7f1 ff01 	bl	8000b58 <__aeabi_d2iz>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	f000 8088 	beq.w	800ee6c <__kernel_cos+0x134>
 800ed5c:	4632      	mov	r2, r6
 800ed5e:	463b      	mov	r3, r7
 800ed60:	4630      	mov	r0, r6
 800ed62:	4639      	mov	r1, r7
 800ed64:	f7f1 fc48 	bl	80005f8 <__aeabi_dmul>
 800ed68:	4b51      	ldr	r3, [pc, #324]	@ (800eeb0 <__kernel_cos+0x178>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	460d      	mov	r5, r1
 800ed70:	f7f1 fc42 	bl	80005f8 <__aeabi_dmul>
 800ed74:	a340      	add	r3, pc, #256	@ (adr r3, 800ee78 <__kernel_cos+0x140>)
 800ed76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7a:	4682      	mov	sl, r0
 800ed7c:	468b      	mov	fp, r1
 800ed7e:	4620      	mov	r0, r4
 800ed80:	4629      	mov	r1, r5
 800ed82:	f7f1 fc39 	bl	80005f8 <__aeabi_dmul>
 800ed86:	a33e      	add	r3, pc, #248	@ (adr r3, 800ee80 <__kernel_cos+0x148>)
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	f7f1 fa7e 	bl	800028c <__adddf3>
 800ed90:	4622      	mov	r2, r4
 800ed92:	462b      	mov	r3, r5
 800ed94:	f7f1 fc30 	bl	80005f8 <__aeabi_dmul>
 800ed98:	a33b      	add	r3, pc, #236	@ (adr r3, 800ee88 <__kernel_cos+0x150>)
 800ed9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9e:	f7f1 fa73 	bl	8000288 <__aeabi_dsub>
 800eda2:	4622      	mov	r2, r4
 800eda4:	462b      	mov	r3, r5
 800eda6:	f7f1 fc27 	bl	80005f8 <__aeabi_dmul>
 800edaa:	a339      	add	r3, pc, #228	@ (adr r3, 800ee90 <__kernel_cos+0x158>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa6c 	bl	800028c <__adddf3>
 800edb4:	4622      	mov	r2, r4
 800edb6:	462b      	mov	r3, r5
 800edb8:	f7f1 fc1e 	bl	80005f8 <__aeabi_dmul>
 800edbc:	a336      	add	r3, pc, #216	@ (adr r3, 800ee98 <__kernel_cos+0x160>)
 800edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc2:	f7f1 fa61 	bl	8000288 <__aeabi_dsub>
 800edc6:	4622      	mov	r2, r4
 800edc8:	462b      	mov	r3, r5
 800edca:	f7f1 fc15 	bl	80005f8 <__aeabi_dmul>
 800edce:	a334      	add	r3, pc, #208	@ (adr r3, 800eea0 <__kernel_cos+0x168>)
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	f7f1 fa5a 	bl	800028c <__adddf3>
 800edd8:	4622      	mov	r2, r4
 800edda:	462b      	mov	r3, r5
 800eddc:	f7f1 fc0c 	bl	80005f8 <__aeabi_dmul>
 800ede0:	4622      	mov	r2, r4
 800ede2:	462b      	mov	r3, r5
 800ede4:	f7f1 fc08 	bl	80005f8 <__aeabi_dmul>
 800ede8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edec:	4604      	mov	r4, r0
 800edee:	460d      	mov	r5, r1
 800edf0:	4630      	mov	r0, r6
 800edf2:	4639      	mov	r1, r7
 800edf4:	f7f1 fc00 	bl	80005f8 <__aeabi_dmul>
 800edf8:	460b      	mov	r3, r1
 800edfa:	4602      	mov	r2, r0
 800edfc:	4629      	mov	r1, r5
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7f1 fa42 	bl	8000288 <__aeabi_dsub>
 800ee04:	4b2b      	ldr	r3, [pc, #172]	@ (800eeb4 <__kernel_cos+0x17c>)
 800ee06:	4598      	cmp	r8, r3
 800ee08:	4606      	mov	r6, r0
 800ee0a:	460f      	mov	r7, r1
 800ee0c:	d810      	bhi.n	800ee30 <__kernel_cos+0xf8>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	4650      	mov	r0, sl
 800ee14:	4659      	mov	r1, fp
 800ee16:	f7f1 fa37 	bl	8000288 <__aeabi_dsub>
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	4926      	ldr	r1, [pc, #152]	@ (800eeb8 <__kernel_cos+0x180>)
 800ee1e:	4602      	mov	r2, r0
 800ee20:	2000      	movs	r0, #0
 800ee22:	f7f1 fa31 	bl	8000288 <__aeabi_dsub>
 800ee26:	ec41 0b10 	vmov	d0, r0, r1
 800ee2a:	b003      	add	sp, #12
 800ee2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee30:	4b22      	ldr	r3, [pc, #136]	@ (800eebc <__kernel_cos+0x184>)
 800ee32:	4921      	ldr	r1, [pc, #132]	@ (800eeb8 <__kernel_cos+0x180>)
 800ee34:	4598      	cmp	r8, r3
 800ee36:	bf8c      	ite	hi
 800ee38:	4d21      	ldrhi	r5, [pc, #132]	@ (800eec0 <__kernel_cos+0x188>)
 800ee3a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ee3e:	2400      	movs	r4, #0
 800ee40:	4622      	mov	r2, r4
 800ee42:	462b      	mov	r3, r5
 800ee44:	2000      	movs	r0, #0
 800ee46:	f7f1 fa1f 	bl	8000288 <__aeabi_dsub>
 800ee4a:	4622      	mov	r2, r4
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	4689      	mov	r9, r1
 800ee50:	462b      	mov	r3, r5
 800ee52:	4650      	mov	r0, sl
 800ee54:	4659      	mov	r1, fp
 800ee56:	f7f1 fa17 	bl	8000288 <__aeabi_dsub>
 800ee5a:	4632      	mov	r2, r6
 800ee5c:	463b      	mov	r3, r7
 800ee5e:	f7f1 fa13 	bl	8000288 <__aeabi_dsub>
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	4640      	mov	r0, r8
 800ee68:	4649      	mov	r1, r9
 800ee6a:	e7da      	b.n	800ee22 <__kernel_cos+0xea>
 800ee6c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800eea8 <__kernel_cos+0x170>
 800ee70:	e7db      	b.n	800ee2a <__kernel_cos+0xf2>
 800ee72:	bf00      	nop
 800ee74:	f3af 8000 	nop.w
 800ee78:	be8838d4 	.word	0xbe8838d4
 800ee7c:	bda8fae9 	.word	0xbda8fae9
 800ee80:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee84:	3e21ee9e 	.word	0x3e21ee9e
 800ee88:	809c52ad 	.word	0x809c52ad
 800ee8c:	3e927e4f 	.word	0x3e927e4f
 800ee90:	19cb1590 	.word	0x19cb1590
 800ee94:	3efa01a0 	.word	0x3efa01a0
 800ee98:	16c15177 	.word	0x16c15177
 800ee9c:	3f56c16c 	.word	0x3f56c16c
 800eea0:	5555554c 	.word	0x5555554c
 800eea4:	3fa55555 	.word	0x3fa55555
 800eea8:	00000000 	.word	0x00000000
 800eeac:	3ff00000 	.word	0x3ff00000
 800eeb0:	3fe00000 	.word	0x3fe00000
 800eeb4:	3fd33332 	.word	0x3fd33332
 800eeb8:	3ff00000 	.word	0x3ff00000
 800eebc:	3fe90000 	.word	0x3fe90000
 800eec0:	3fd20000 	.word	0x3fd20000
 800eec4:	00000000 	.word	0x00000000

0800eec8 <__kernel_sin>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	ec55 4b10 	vmov	r4, r5, d0
 800eed0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800eed4:	b085      	sub	sp, #20
 800eed6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800eeda:	ed8d 1b02 	vstr	d1, [sp, #8]
 800eede:	4680      	mov	r8, r0
 800eee0:	d205      	bcs.n	800eeee <__kernel_sin+0x26>
 800eee2:	4620      	mov	r0, r4
 800eee4:	4629      	mov	r1, r5
 800eee6:	f7f1 fe37 	bl	8000b58 <__aeabi_d2iz>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d052      	beq.n	800ef94 <__kernel_sin+0xcc>
 800eeee:	4622      	mov	r2, r4
 800eef0:	462b      	mov	r3, r5
 800eef2:	4620      	mov	r0, r4
 800eef4:	4629      	mov	r1, r5
 800eef6:	f7f1 fb7f 	bl	80005f8 <__aeabi_dmul>
 800eefa:	4682      	mov	sl, r0
 800eefc:	468b      	mov	fp, r1
 800eefe:	4602      	mov	r2, r0
 800ef00:	460b      	mov	r3, r1
 800ef02:	4620      	mov	r0, r4
 800ef04:	4629      	mov	r1, r5
 800ef06:	f7f1 fb77 	bl	80005f8 <__aeabi_dmul>
 800ef0a:	a342      	add	r3, pc, #264	@ (adr r3, 800f014 <__kernel_sin+0x14c>)
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	e9cd 0100 	strd	r0, r1, [sp]
 800ef14:	4650      	mov	r0, sl
 800ef16:	4659      	mov	r1, fp
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	a33f      	add	r3, pc, #252	@ (adr r3, 800f01c <__kernel_sin+0x154>)
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f7f1 f9b1 	bl	8000288 <__aeabi_dsub>
 800ef26:	4652      	mov	r2, sl
 800ef28:	465b      	mov	r3, fp
 800ef2a:	f7f1 fb65 	bl	80005f8 <__aeabi_dmul>
 800ef2e:	a33d      	add	r3, pc, #244	@ (adr r3, 800f024 <__kernel_sin+0x15c>)
 800ef30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef34:	f7f1 f9aa 	bl	800028c <__adddf3>
 800ef38:	4652      	mov	r2, sl
 800ef3a:	465b      	mov	r3, fp
 800ef3c:	f7f1 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ef40:	a33a      	add	r3, pc, #232	@ (adr r3, 800f02c <__kernel_sin+0x164>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f7f1 f99f 	bl	8000288 <__aeabi_dsub>
 800ef4a:	4652      	mov	r2, sl
 800ef4c:	465b      	mov	r3, fp
 800ef4e:	f7f1 fb53 	bl	80005f8 <__aeabi_dmul>
 800ef52:	a338      	add	r3, pc, #224	@ (adr r3, 800f034 <__kernel_sin+0x16c>)
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	f7f1 f998 	bl	800028c <__adddf3>
 800ef5c:	4606      	mov	r6, r0
 800ef5e:	460f      	mov	r7, r1
 800ef60:	f1b8 0f00 	cmp.w	r8, #0
 800ef64:	d11b      	bne.n	800ef9e <__kernel_sin+0xd6>
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4650      	mov	r0, sl
 800ef6c:	4659      	mov	r1, fp
 800ef6e:	f7f1 fb43 	bl	80005f8 <__aeabi_dmul>
 800ef72:	a325      	add	r3, pc, #148	@ (adr r3, 800f008 <__kernel_sin+0x140>)
 800ef74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef78:	f7f1 f986 	bl	8000288 <__aeabi_dsub>
 800ef7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef80:	f7f1 fb3a 	bl	80005f8 <__aeabi_dmul>
 800ef84:	4602      	mov	r2, r0
 800ef86:	460b      	mov	r3, r1
 800ef88:	4620      	mov	r0, r4
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	f7f1 f97e 	bl	800028c <__adddf3>
 800ef90:	4604      	mov	r4, r0
 800ef92:	460d      	mov	r5, r1
 800ef94:	ec45 4b10 	vmov	d0, r4, r5
 800ef98:	b005      	add	sp, #20
 800ef9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efa2:	4b1b      	ldr	r3, [pc, #108]	@ (800f010 <__kernel_sin+0x148>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	f7f1 fb27 	bl	80005f8 <__aeabi_dmul>
 800efaa:	4632      	mov	r2, r6
 800efac:	4680      	mov	r8, r0
 800efae:	4689      	mov	r9, r1
 800efb0:	463b      	mov	r3, r7
 800efb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efb6:	f7f1 fb1f 	bl	80005f8 <__aeabi_dmul>
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	4640      	mov	r0, r8
 800efc0:	4649      	mov	r1, r9
 800efc2:	f7f1 f961 	bl	8000288 <__aeabi_dsub>
 800efc6:	4652      	mov	r2, sl
 800efc8:	465b      	mov	r3, fp
 800efca:	f7f1 fb15 	bl	80005f8 <__aeabi_dmul>
 800efce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efd2:	f7f1 f959 	bl	8000288 <__aeabi_dsub>
 800efd6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f008 <__kernel_sin+0x140>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	4606      	mov	r6, r0
 800efde:	460f      	mov	r7, r1
 800efe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efe4:	f7f1 fb08 	bl	80005f8 <__aeabi_dmul>
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	4630      	mov	r0, r6
 800efee:	4639      	mov	r1, r7
 800eff0:	f7f1 f94c 	bl	800028c <__adddf3>
 800eff4:	4602      	mov	r2, r0
 800eff6:	460b      	mov	r3, r1
 800eff8:	4620      	mov	r0, r4
 800effa:	4629      	mov	r1, r5
 800effc:	f7f1 f944 	bl	8000288 <__aeabi_dsub>
 800f000:	e7c6      	b.n	800ef90 <__kernel_sin+0xc8>
 800f002:	bf00      	nop
 800f004:	f3af 8000 	nop.w
 800f008:	55555549 	.word	0x55555549
 800f00c:	3fc55555 	.word	0x3fc55555
 800f010:	3fe00000 	.word	0x3fe00000
 800f014:	5acfd57c 	.word	0x5acfd57c
 800f018:	3de5d93a 	.word	0x3de5d93a
 800f01c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f020:	3e5ae5e6 	.word	0x3e5ae5e6
 800f024:	57b1fe7d 	.word	0x57b1fe7d
 800f028:	3ec71de3 	.word	0x3ec71de3
 800f02c:	19c161d5 	.word	0x19c161d5
 800f030:	3f2a01a0 	.word	0x3f2a01a0
 800f034:	1110f8a6 	.word	0x1110f8a6
 800f038:	3f811111 	.word	0x3f811111
 800f03c:	00000000 	.word	0x00000000

0800f040 <__ieee754_rem_pio2>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	ec57 6b10 	vmov	r6, r7, d0
 800f048:	4bc5      	ldr	r3, [pc, #788]	@ (800f360 <__ieee754_rem_pio2+0x320>)
 800f04a:	b08d      	sub	sp, #52	@ 0x34
 800f04c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f050:	4598      	cmp	r8, r3
 800f052:	4604      	mov	r4, r0
 800f054:	9704      	str	r7, [sp, #16]
 800f056:	d807      	bhi.n	800f068 <__ieee754_rem_pio2+0x28>
 800f058:	2200      	movs	r2, #0
 800f05a:	2300      	movs	r3, #0
 800f05c:	ed80 0b00 	vstr	d0, [r0]
 800f060:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f064:	2500      	movs	r5, #0
 800f066:	e028      	b.n	800f0ba <__ieee754_rem_pio2+0x7a>
 800f068:	4bbe      	ldr	r3, [pc, #760]	@ (800f364 <__ieee754_rem_pio2+0x324>)
 800f06a:	4598      	cmp	r8, r3
 800f06c:	d878      	bhi.n	800f160 <__ieee754_rem_pio2+0x120>
 800f06e:	9b04      	ldr	r3, [sp, #16]
 800f070:	4dbd      	ldr	r5, [pc, #756]	@ (800f368 <__ieee754_rem_pio2+0x328>)
 800f072:	2b00      	cmp	r3, #0
 800f074:	4630      	mov	r0, r6
 800f076:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f328 <__ieee754_rem_pio2+0x2e8>)
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	4639      	mov	r1, r7
 800f07e:	dd38      	ble.n	800f0f2 <__ieee754_rem_pio2+0xb2>
 800f080:	f7f1 f902 	bl	8000288 <__aeabi_dsub>
 800f084:	45a8      	cmp	r8, r5
 800f086:	4606      	mov	r6, r0
 800f088:	460f      	mov	r7, r1
 800f08a:	d01a      	beq.n	800f0c2 <__ieee754_rem_pio2+0x82>
 800f08c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f330 <__ieee754_rem_pio2+0x2f0>)
 800f08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f092:	f7f1 f8f9 	bl	8000288 <__aeabi_dsub>
 800f096:	4602      	mov	r2, r0
 800f098:	460b      	mov	r3, r1
 800f09a:	4680      	mov	r8, r0
 800f09c:	4689      	mov	r9, r1
 800f09e:	4630      	mov	r0, r6
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	f7f1 f8f1 	bl	8000288 <__aeabi_dsub>
 800f0a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f330 <__ieee754_rem_pio2+0x2f0>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	f7f1 f8ec 	bl	8000288 <__aeabi_dsub>
 800f0b0:	e9c4 8900 	strd	r8, r9, [r4]
 800f0b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f0b8:	2501      	movs	r5, #1
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	b00d      	add	sp, #52	@ 0x34
 800f0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c2:	a39d      	add	r3, pc, #628	@ (adr r3, 800f338 <__ieee754_rem_pio2+0x2f8>)
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f1 f8de 	bl	8000288 <__aeabi_dsub>
 800f0cc:	a39c      	add	r3, pc, #624	@ (adr r3, 800f340 <__ieee754_rem_pio2+0x300>)
 800f0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	f7f1 f8d7 	bl	8000288 <__aeabi_dsub>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4680      	mov	r8, r0
 800f0e0:	4689      	mov	r9, r1
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 f8cf 	bl	8000288 <__aeabi_dsub>
 800f0ea:	a395      	add	r3, pc, #596	@ (adr r3, 800f340 <__ieee754_rem_pio2+0x300>)
 800f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f0:	e7dc      	b.n	800f0ac <__ieee754_rem_pio2+0x6c>
 800f0f2:	f7f1 f8cb 	bl	800028c <__adddf3>
 800f0f6:	45a8      	cmp	r8, r5
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	460f      	mov	r7, r1
 800f0fc:	d018      	beq.n	800f130 <__ieee754_rem_pio2+0xf0>
 800f0fe:	a38c      	add	r3, pc, #560	@ (adr r3, 800f330 <__ieee754_rem_pio2+0x2f0>)
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	f7f1 f8c2 	bl	800028c <__adddf3>
 800f108:	4602      	mov	r2, r0
 800f10a:	460b      	mov	r3, r1
 800f10c:	4680      	mov	r8, r0
 800f10e:	4689      	mov	r9, r1
 800f110:	4630      	mov	r0, r6
 800f112:	4639      	mov	r1, r7
 800f114:	f7f1 f8b8 	bl	8000288 <__aeabi_dsub>
 800f118:	a385      	add	r3, pc, #532	@ (adr r3, 800f330 <__ieee754_rem_pio2+0x2f0>)
 800f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11e:	f7f1 f8b5 	bl	800028c <__adddf3>
 800f122:	f04f 35ff 	mov.w	r5, #4294967295
 800f126:	e9c4 8900 	strd	r8, r9, [r4]
 800f12a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f12e:	e7c4      	b.n	800f0ba <__ieee754_rem_pio2+0x7a>
 800f130:	a381      	add	r3, pc, #516	@ (adr r3, 800f338 <__ieee754_rem_pio2+0x2f8>)
 800f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f136:	f7f1 f8a9 	bl	800028c <__adddf3>
 800f13a:	a381      	add	r3, pc, #516	@ (adr r3, 800f340 <__ieee754_rem_pio2+0x300>)
 800f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f140:	4606      	mov	r6, r0
 800f142:	460f      	mov	r7, r1
 800f144:	f7f1 f8a2 	bl	800028c <__adddf3>
 800f148:	4602      	mov	r2, r0
 800f14a:	460b      	mov	r3, r1
 800f14c:	4680      	mov	r8, r0
 800f14e:	4689      	mov	r9, r1
 800f150:	4630      	mov	r0, r6
 800f152:	4639      	mov	r1, r7
 800f154:	f7f1 f898 	bl	8000288 <__aeabi_dsub>
 800f158:	a379      	add	r3, pc, #484	@ (adr r3, 800f340 <__ieee754_rem_pio2+0x300>)
 800f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15e:	e7de      	b.n	800f11e <__ieee754_rem_pio2+0xde>
 800f160:	4b82      	ldr	r3, [pc, #520]	@ (800f36c <__ieee754_rem_pio2+0x32c>)
 800f162:	4598      	cmp	r8, r3
 800f164:	f200 80d1 	bhi.w	800f30a <__ieee754_rem_pio2+0x2ca>
 800f168:	f000 f966 	bl	800f438 <fabs>
 800f16c:	ec57 6b10 	vmov	r6, r7, d0
 800f170:	a375      	add	r3, pc, #468	@ (adr r3, 800f348 <__ieee754_rem_pio2+0x308>)
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	4630      	mov	r0, r6
 800f178:	4639      	mov	r1, r7
 800f17a:	f7f1 fa3d 	bl	80005f8 <__aeabi_dmul>
 800f17e:	4b7c      	ldr	r3, [pc, #496]	@ (800f370 <__ieee754_rem_pio2+0x330>)
 800f180:	2200      	movs	r2, #0
 800f182:	f7f1 f883 	bl	800028c <__adddf3>
 800f186:	f7f1 fce7 	bl	8000b58 <__aeabi_d2iz>
 800f18a:	4605      	mov	r5, r0
 800f18c:	f7f1 f9ca 	bl	8000524 <__aeabi_i2d>
 800f190:	4602      	mov	r2, r0
 800f192:	460b      	mov	r3, r1
 800f194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f198:	a363      	add	r3, pc, #396	@ (adr r3, 800f328 <__ieee754_rem_pio2+0x2e8>)
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	f7f1 fa2b 	bl	80005f8 <__aeabi_dmul>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	f7f1 f86d 	bl	8000288 <__aeabi_dsub>
 800f1ae:	a360      	add	r3, pc, #384	@ (adr r3, 800f330 <__ieee754_rem_pio2+0x2f0>)
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	4682      	mov	sl, r0
 800f1b6:	468b      	mov	fp, r1
 800f1b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1bc:	f7f1 fa1c 	bl	80005f8 <__aeabi_dmul>
 800f1c0:	2d1f      	cmp	r5, #31
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460f      	mov	r7, r1
 800f1c6:	dc0c      	bgt.n	800f1e2 <__ieee754_rem_pio2+0x1a2>
 800f1c8:	4b6a      	ldr	r3, [pc, #424]	@ (800f374 <__ieee754_rem_pio2+0x334>)
 800f1ca:	1e6a      	subs	r2, r5, #1
 800f1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d0:	4543      	cmp	r3, r8
 800f1d2:	d006      	beq.n	800f1e2 <__ieee754_rem_pio2+0x1a2>
 800f1d4:	4632      	mov	r2, r6
 800f1d6:	463b      	mov	r3, r7
 800f1d8:	4650      	mov	r0, sl
 800f1da:	4659      	mov	r1, fp
 800f1dc:	f7f1 f854 	bl	8000288 <__aeabi_dsub>
 800f1e0:	e00e      	b.n	800f200 <__ieee754_rem_pio2+0x1c0>
 800f1e2:	463b      	mov	r3, r7
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	4659      	mov	r1, fp
 800f1ea:	f7f1 f84d 	bl	8000288 <__aeabi_dsub>
 800f1ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f1f2:	9305      	str	r3, [sp, #20]
 800f1f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f1fc:	2b10      	cmp	r3, #16
 800f1fe:	dc02      	bgt.n	800f206 <__ieee754_rem_pio2+0x1c6>
 800f200:	e9c4 0100 	strd	r0, r1, [r4]
 800f204:	e039      	b.n	800f27a <__ieee754_rem_pio2+0x23a>
 800f206:	a34c      	add	r3, pc, #304	@ (adr r3, 800f338 <__ieee754_rem_pio2+0x2f8>)
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f210:	f7f1 f9f2 	bl	80005f8 <__aeabi_dmul>
 800f214:	4606      	mov	r6, r0
 800f216:	460f      	mov	r7, r1
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	4650      	mov	r0, sl
 800f21e:	4659      	mov	r1, fp
 800f220:	f7f1 f832 	bl	8000288 <__aeabi_dsub>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	4680      	mov	r8, r0
 800f22a:	4689      	mov	r9, r1
 800f22c:	4650      	mov	r0, sl
 800f22e:	4659      	mov	r1, fp
 800f230:	f7f1 f82a 	bl	8000288 <__aeabi_dsub>
 800f234:	4632      	mov	r2, r6
 800f236:	463b      	mov	r3, r7
 800f238:	f7f1 f826 	bl	8000288 <__aeabi_dsub>
 800f23c:	a340      	add	r3, pc, #256	@ (adr r3, 800f340 <__ieee754_rem_pio2+0x300>)
 800f23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f242:	4606      	mov	r6, r0
 800f244:	460f      	mov	r7, r1
 800f246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f24a:	f7f1 f9d5 	bl	80005f8 <__aeabi_dmul>
 800f24e:	4632      	mov	r2, r6
 800f250:	463b      	mov	r3, r7
 800f252:	f7f1 f819 	bl	8000288 <__aeabi_dsub>
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	4606      	mov	r6, r0
 800f25c:	460f      	mov	r7, r1
 800f25e:	4640      	mov	r0, r8
 800f260:	4649      	mov	r1, r9
 800f262:	f7f1 f811 	bl	8000288 <__aeabi_dsub>
 800f266:	9a05      	ldr	r2, [sp, #20]
 800f268:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	2b31      	cmp	r3, #49	@ 0x31
 800f270:	dc20      	bgt.n	800f2b4 <__ieee754_rem_pio2+0x274>
 800f272:	e9c4 0100 	strd	r0, r1, [r4]
 800f276:	46c2      	mov	sl, r8
 800f278:	46cb      	mov	fp, r9
 800f27a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f27e:	4650      	mov	r0, sl
 800f280:	4642      	mov	r2, r8
 800f282:	464b      	mov	r3, r9
 800f284:	4659      	mov	r1, fp
 800f286:	f7f0 ffff 	bl	8000288 <__aeabi_dsub>
 800f28a:	463b      	mov	r3, r7
 800f28c:	4632      	mov	r2, r6
 800f28e:	f7f0 fffb 	bl	8000288 <__aeabi_dsub>
 800f292:	9b04      	ldr	r3, [sp, #16]
 800f294:	2b00      	cmp	r3, #0
 800f296:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f29a:	f6bf af0e 	bge.w	800f0ba <__ieee754_rem_pio2+0x7a>
 800f29e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f2a2:	6063      	str	r3, [r4, #4]
 800f2a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2a8:	f8c4 8000 	str.w	r8, [r4]
 800f2ac:	60a0      	str	r0, [r4, #8]
 800f2ae:	60e3      	str	r3, [r4, #12]
 800f2b0:	426d      	negs	r5, r5
 800f2b2:	e702      	b.n	800f0ba <__ieee754_rem_pio2+0x7a>
 800f2b4:	a326      	add	r3, pc, #152	@ (adr r3, 800f350 <__ieee754_rem_pio2+0x310>)
 800f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2be:	f7f1 f99b 	bl	80005f8 <__aeabi_dmul>
 800f2c2:	4606      	mov	r6, r0
 800f2c4:	460f      	mov	r7, r1
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4640      	mov	r0, r8
 800f2cc:	4649      	mov	r1, r9
 800f2ce:	f7f0 ffdb 	bl	8000288 <__aeabi_dsub>
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	4682      	mov	sl, r0
 800f2d8:	468b      	mov	fp, r1
 800f2da:	4640      	mov	r0, r8
 800f2dc:	4649      	mov	r1, r9
 800f2de:	f7f0 ffd3 	bl	8000288 <__aeabi_dsub>
 800f2e2:	4632      	mov	r2, r6
 800f2e4:	463b      	mov	r3, r7
 800f2e6:	f7f0 ffcf 	bl	8000288 <__aeabi_dsub>
 800f2ea:	a31b      	add	r3, pc, #108	@ (adr r3, 800f358 <__ieee754_rem_pio2+0x318>)
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	460f      	mov	r7, r1
 800f2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2f8:	f7f1 f97e 	bl	80005f8 <__aeabi_dmul>
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	463b      	mov	r3, r7
 800f300:	f7f0 ffc2 	bl	8000288 <__aeabi_dsub>
 800f304:	4606      	mov	r6, r0
 800f306:	460f      	mov	r7, r1
 800f308:	e764      	b.n	800f1d4 <__ieee754_rem_pio2+0x194>
 800f30a:	4b1b      	ldr	r3, [pc, #108]	@ (800f378 <__ieee754_rem_pio2+0x338>)
 800f30c:	4598      	cmp	r8, r3
 800f30e:	d935      	bls.n	800f37c <__ieee754_rem_pio2+0x33c>
 800f310:	4632      	mov	r2, r6
 800f312:	463b      	mov	r3, r7
 800f314:	4630      	mov	r0, r6
 800f316:	4639      	mov	r1, r7
 800f318:	f7f0 ffb6 	bl	8000288 <__aeabi_dsub>
 800f31c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f320:	e9c4 0100 	strd	r0, r1, [r4]
 800f324:	e69e      	b.n	800f064 <__ieee754_rem_pio2+0x24>
 800f326:	bf00      	nop
 800f328:	54400000 	.word	0x54400000
 800f32c:	3ff921fb 	.word	0x3ff921fb
 800f330:	1a626331 	.word	0x1a626331
 800f334:	3dd0b461 	.word	0x3dd0b461
 800f338:	1a600000 	.word	0x1a600000
 800f33c:	3dd0b461 	.word	0x3dd0b461
 800f340:	2e037073 	.word	0x2e037073
 800f344:	3ba3198a 	.word	0x3ba3198a
 800f348:	6dc9c883 	.word	0x6dc9c883
 800f34c:	3fe45f30 	.word	0x3fe45f30
 800f350:	2e000000 	.word	0x2e000000
 800f354:	3ba3198a 	.word	0x3ba3198a
 800f358:	252049c1 	.word	0x252049c1
 800f35c:	397b839a 	.word	0x397b839a
 800f360:	3fe921fb 	.word	0x3fe921fb
 800f364:	4002d97b 	.word	0x4002d97b
 800f368:	3ff921fb 	.word	0x3ff921fb
 800f36c:	413921fb 	.word	0x413921fb
 800f370:	3fe00000 	.word	0x3fe00000
 800f374:	08010310 	.word	0x08010310
 800f378:	7fefffff 	.word	0x7fefffff
 800f37c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f380:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f384:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f388:	4630      	mov	r0, r6
 800f38a:	460f      	mov	r7, r1
 800f38c:	f7f1 fbe4 	bl	8000b58 <__aeabi_d2iz>
 800f390:	f7f1 f8c8 	bl	8000524 <__aeabi_i2d>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	4630      	mov	r0, r6
 800f39a:	4639      	mov	r1, r7
 800f39c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f3a0:	f7f0 ff72 	bl	8000288 <__aeabi_dsub>
 800f3a4:	4b22      	ldr	r3, [pc, #136]	@ (800f430 <__ieee754_rem_pio2+0x3f0>)
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f7f1 f926 	bl	80005f8 <__aeabi_dmul>
 800f3ac:	460f      	mov	r7, r1
 800f3ae:	4606      	mov	r6, r0
 800f3b0:	f7f1 fbd2 	bl	8000b58 <__aeabi_d2iz>
 800f3b4:	f7f1 f8b6 	bl	8000524 <__aeabi_i2d>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	4630      	mov	r0, r6
 800f3be:	4639      	mov	r1, r7
 800f3c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f3c4:	f7f0 ff60 	bl	8000288 <__aeabi_dsub>
 800f3c8:	4b19      	ldr	r3, [pc, #100]	@ (800f430 <__ieee754_rem_pio2+0x3f0>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f7f1 f914 	bl	80005f8 <__aeabi_dmul>
 800f3d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f3d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f3d8:	f04f 0803 	mov.w	r8, #3
 800f3dc:	2600      	movs	r6, #0
 800f3de:	2700      	movs	r7, #0
 800f3e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f3e4:	4632      	mov	r2, r6
 800f3e6:	463b      	mov	r3, r7
 800f3e8:	46c2      	mov	sl, r8
 800f3ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3ee:	f7f1 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d1f4      	bne.n	800f3e0 <__ieee754_rem_pio2+0x3a0>
 800f3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f434 <__ieee754_rem_pio2+0x3f4>)
 800f3f8:	9301      	str	r3, [sp, #4]
 800f3fa:	2302      	movs	r3, #2
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	462a      	mov	r2, r5
 800f400:	4653      	mov	r3, sl
 800f402:	4621      	mov	r1, r4
 800f404:	a806      	add	r0, sp, #24
 800f406:	f000 f81f 	bl	800f448 <__kernel_rem_pio2>
 800f40a:	9b04      	ldr	r3, [sp, #16]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	4605      	mov	r5, r0
 800f410:	f6bf ae53 	bge.w	800f0ba <__ieee754_rem_pio2+0x7a>
 800f414:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f41c:	e9c4 2300 	strd	r2, r3, [r4]
 800f420:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f424:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f428:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f42c:	e740      	b.n	800f2b0 <__ieee754_rem_pio2+0x270>
 800f42e:	bf00      	nop
 800f430:	41700000 	.word	0x41700000
 800f434:	08010390 	.word	0x08010390

0800f438 <fabs>:
 800f438:	ec51 0b10 	vmov	r0, r1, d0
 800f43c:	4602      	mov	r2, r0
 800f43e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f442:	ec43 2b10 	vmov	d0, r2, r3
 800f446:	4770      	bx	lr

0800f448 <__kernel_rem_pio2>:
 800f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44c:	ed2d 8b02 	vpush	{d8}
 800f450:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f454:	f112 0f14 	cmn.w	r2, #20
 800f458:	9306      	str	r3, [sp, #24]
 800f45a:	9104      	str	r1, [sp, #16]
 800f45c:	4bbe      	ldr	r3, [pc, #760]	@ (800f758 <__kernel_rem_pio2+0x310>)
 800f45e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f460:	9008      	str	r0, [sp, #32]
 800f462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	9b06      	ldr	r3, [sp, #24]
 800f46a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f46e:	bfa8      	it	ge
 800f470:	1ed4      	subge	r4, r2, #3
 800f472:	9305      	str	r3, [sp, #20]
 800f474:	bfb2      	itee	lt
 800f476:	2400      	movlt	r4, #0
 800f478:	2318      	movge	r3, #24
 800f47a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f47e:	f06f 0317 	mvn.w	r3, #23
 800f482:	fb04 3303 	mla	r3, r4, r3, r3
 800f486:	eb03 0b02 	add.w	fp, r3, r2
 800f48a:	9b00      	ldr	r3, [sp, #0]
 800f48c:	9a05      	ldr	r2, [sp, #20]
 800f48e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800f748 <__kernel_rem_pio2+0x300>
 800f492:	eb03 0802 	add.w	r8, r3, r2
 800f496:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f498:	1aa7      	subs	r7, r4, r2
 800f49a:	ae20      	add	r6, sp, #128	@ 0x80
 800f49c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f4a0:	2500      	movs	r5, #0
 800f4a2:	4545      	cmp	r5, r8
 800f4a4:	dd13      	ble.n	800f4ce <__kernel_rem_pio2+0x86>
 800f4a6:	9b06      	ldr	r3, [sp, #24]
 800f4a8:	aa20      	add	r2, sp, #128	@ 0x80
 800f4aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f4ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f4b2:	f04f 0800 	mov.w	r8, #0
 800f4b6:	9b00      	ldr	r3, [sp, #0]
 800f4b8:	4598      	cmp	r8, r3
 800f4ba:	dc31      	bgt.n	800f520 <__kernel_rem_pio2+0xd8>
 800f4bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800f748 <__kernel_rem_pio2+0x300>
 800f4c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4c8:	462f      	mov	r7, r5
 800f4ca:	2600      	movs	r6, #0
 800f4cc:	e01b      	b.n	800f506 <__kernel_rem_pio2+0xbe>
 800f4ce:	42ef      	cmn	r7, r5
 800f4d0:	d407      	bmi.n	800f4e2 <__kernel_rem_pio2+0x9a>
 800f4d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f4d6:	f7f1 f825 	bl	8000524 <__aeabi_i2d>
 800f4da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f4de:	3501      	adds	r5, #1
 800f4e0:	e7df      	b.n	800f4a2 <__kernel_rem_pio2+0x5a>
 800f4e2:	ec51 0b18 	vmov	r0, r1, d8
 800f4e6:	e7f8      	b.n	800f4da <__kernel_rem_pio2+0x92>
 800f4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f4f0:	f7f1 f882 	bl	80005f8 <__aeabi_dmul>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4fc:	f7f0 fec6 	bl	800028c <__adddf3>
 800f500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f504:	3601      	adds	r6, #1
 800f506:	9b05      	ldr	r3, [sp, #20]
 800f508:	429e      	cmp	r6, r3
 800f50a:	f1a7 0708 	sub.w	r7, r7, #8
 800f50e:	ddeb      	ble.n	800f4e8 <__kernel_rem_pio2+0xa0>
 800f510:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f514:	f108 0801 	add.w	r8, r8, #1
 800f518:	ecaa 7b02 	vstmia	sl!, {d7}
 800f51c:	3508      	adds	r5, #8
 800f51e:	e7ca      	b.n	800f4b6 <__kernel_rem_pio2+0x6e>
 800f520:	9b00      	ldr	r3, [sp, #0]
 800f522:	f8dd 8000 	ldr.w	r8, [sp]
 800f526:	aa0c      	add	r2, sp, #48	@ 0x30
 800f528:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f52c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f52e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f530:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f534:	9309      	str	r3, [sp, #36]	@ 0x24
 800f536:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f53a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f53c:	ab98      	add	r3, sp, #608	@ 0x260
 800f53e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f542:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f546:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f54a:	ac0c      	add	r4, sp, #48	@ 0x30
 800f54c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f54e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f552:	46a1      	mov	r9, r4
 800f554:	46c2      	mov	sl, r8
 800f556:	f1ba 0f00 	cmp.w	sl, #0
 800f55a:	f1a5 0508 	sub.w	r5, r5, #8
 800f55e:	dc77      	bgt.n	800f650 <__kernel_rem_pio2+0x208>
 800f560:	4658      	mov	r0, fp
 800f562:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f566:	f000 fac7 	bl	800faf8 <scalbn>
 800f56a:	ec57 6b10 	vmov	r6, r7, d0
 800f56e:	2200      	movs	r2, #0
 800f570:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f574:	4630      	mov	r0, r6
 800f576:	4639      	mov	r1, r7
 800f578:	f7f1 f83e 	bl	80005f8 <__aeabi_dmul>
 800f57c:	ec41 0b10 	vmov	d0, r0, r1
 800f580:	f000 fb3a 	bl	800fbf8 <floor>
 800f584:	4b75      	ldr	r3, [pc, #468]	@ (800f75c <__kernel_rem_pio2+0x314>)
 800f586:	ec51 0b10 	vmov	r0, r1, d0
 800f58a:	2200      	movs	r2, #0
 800f58c:	f7f1 f834 	bl	80005f8 <__aeabi_dmul>
 800f590:	4602      	mov	r2, r0
 800f592:	460b      	mov	r3, r1
 800f594:	4630      	mov	r0, r6
 800f596:	4639      	mov	r1, r7
 800f598:	f7f0 fe76 	bl	8000288 <__aeabi_dsub>
 800f59c:	460f      	mov	r7, r1
 800f59e:	4606      	mov	r6, r0
 800f5a0:	f7f1 fada 	bl	8000b58 <__aeabi_d2iz>
 800f5a4:	9002      	str	r0, [sp, #8]
 800f5a6:	f7f0 ffbd 	bl	8000524 <__aeabi_i2d>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	4639      	mov	r1, r7
 800f5b2:	f7f0 fe69 	bl	8000288 <__aeabi_dsub>
 800f5b6:	f1bb 0f00 	cmp.w	fp, #0
 800f5ba:	4606      	mov	r6, r0
 800f5bc:	460f      	mov	r7, r1
 800f5be:	dd6c      	ble.n	800f69a <__kernel_rem_pio2+0x252>
 800f5c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800f5c4:	ab0c      	add	r3, sp, #48	@ 0x30
 800f5c6:	9d02      	ldr	r5, [sp, #8]
 800f5c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5cc:	f1cb 0018 	rsb	r0, fp, #24
 800f5d0:	fa43 f200 	asr.w	r2, r3, r0
 800f5d4:	4415      	add	r5, r2
 800f5d6:	4082      	lsls	r2, r0
 800f5d8:	1a9b      	subs	r3, r3, r2
 800f5da:	aa0c      	add	r2, sp, #48	@ 0x30
 800f5dc:	9502      	str	r5, [sp, #8]
 800f5de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f5e2:	f1cb 0217 	rsb	r2, fp, #23
 800f5e6:	fa43 f902 	asr.w	r9, r3, r2
 800f5ea:	f1b9 0f00 	cmp.w	r9, #0
 800f5ee:	dd64      	ble.n	800f6ba <__kernel_rem_pio2+0x272>
 800f5f0:	9b02      	ldr	r3, [sp, #8]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	9302      	str	r3, [sp, #8]
 800f5f8:	4615      	mov	r5, r2
 800f5fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f5fe:	4590      	cmp	r8, r2
 800f600:	f300 80b8 	bgt.w	800f774 <__kernel_rem_pio2+0x32c>
 800f604:	f1bb 0f00 	cmp.w	fp, #0
 800f608:	dd07      	ble.n	800f61a <__kernel_rem_pio2+0x1d2>
 800f60a:	f1bb 0f01 	cmp.w	fp, #1
 800f60e:	f000 80bf 	beq.w	800f790 <__kernel_rem_pio2+0x348>
 800f612:	f1bb 0f02 	cmp.w	fp, #2
 800f616:	f000 80c6 	beq.w	800f7a6 <__kernel_rem_pio2+0x35e>
 800f61a:	f1b9 0f02 	cmp.w	r9, #2
 800f61e:	d14c      	bne.n	800f6ba <__kernel_rem_pio2+0x272>
 800f620:	4632      	mov	r2, r6
 800f622:	463b      	mov	r3, r7
 800f624:	494e      	ldr	r1, [pc, #312]	@ (800f760 <__kernel_rem_pio2+0x318>)
 800f626:	2000      	movs	r0, #0
 800f628:	f7f0 fe2e 	bl	8000288 <__aeabi_dsub>
 800f62c:	4606      	mov	r6, r0
 800f62e:	460f      	mov	r7, r1
 800f630:	2d00      	cmp	r5, #0
 800f632:	d042      	beq.n	800f6ba <__kernel_rem_pio2+0x272>
 800f634:	4658      	mov	r0, fp
 800f636:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800f750 <__kernel_rem_pio2+0x308>
 800f63a:	f000 fa5d 	bl	800faf8 <scalbn>
 800f63e:	4630      	mov	r0, r6
 800f640:	4639      	mov	r1, r7
 800f642:	ec53 2b10 	vmov	r2, r3, d0
 800f646:	f7f0 fe1f 	bl	8000288 <__aeabi_dsub>
 800f64a:	4606      	mov	r6, r0
 800f64c:	460f      	mov	r7, r1
 800f64e:	e034      	b.n	800f6ba <__kernel_rem_pio2+0x272>
 800f650:	4b44      	ldr	r3, [pc, #272]	@ (800f764 <__kernel_rem_pio2+0x31c>)
 800f652:	2200      	movs	r2, #0
 800f654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f658:	f7f0 ffce 	bl	80005f8 <__aeabi_dmul>
 800f65c:	f7f1 fa7c 	bl	8000b58 <__aeabi_d2iz>
 800f660:	f7f0 ff60 	bl	8000524 <__aeabi_i2d>
 800f664:	4b40      	ldr	r3, [pc, #256]	@ (800f768 <__kernel_rem_pio2+0x320>)
 800f666:	2200      	movs	r2, #0
 800f668:	4606      	mov	r6, r0
 800f66a:	460f      	mov	r7, r1
 800f66c:	f7f0 ffc4 	bl	80005f8 <__aeabi_dmul>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f678:	f7f0 fe06 	bl	8000288 <__aeabi_dsub>
 800f67c:	f7f1 fa6c 	bl	8000b58 <__aeabi_d2iz>
 800f680:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f684:	f849 0b04 	str.w	r0, [r9], #4
 800f688:	4639      	mov	r1, r7
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7f0 fdfe 	bl	800028c <__adddf3>
 800f690:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f698:	e75d      	b.n	800f556 <__kernel_rem_pio2+0x10e>
 800f69a:	d107      	bne.n	800f6ac <__kernel_rem_pio2+0x264>
 800f69c:	f108 33ff 	add.w	r3, r8, #4294967295
 800f6a0:	aa0c      	add	r2, sp, #48	@ 0x30
 800f6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f6aa:	e79e      	b.n	800f5ea <__kernel_rem_pio2+0x1a2>
 800f6ac:	4b2f      	ldr	r3, [pc, #188]	@ (800f76c <__kernel_rem_pio2+0x324>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f7f1 fa28 	bl	8000b04 <__aeabi_dcmpge>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d143      	bne.n	800f740 <__kernel_rem_pio2+0x2f8>
 800f6b8:	4681      	mov	r9, r0
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2300      	movs	r3, #0
 800f6be:	4630      	mov	r0, r6
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f7f1 fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	f000 80bf 	beq.w	800f84a <__kernel_rem_pio2+0x402>
 800f6cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	9900      	ldr	r1, [sp, #0]
 800f6d4:	428b      	cmp	r3, r1
 800f6d6:	da6e      	bge.n	800f7b6 <__kernel_rem_pio2+0x36e>
 800f6d8:	2a00      	cmp	r2, #0
 800f6da:	f000 8089 	beq.w	800f7f0 <__kernel_rem_pio2+0x3a8>
 800f6de:	f108 38ff 	add.w	r8, r8, #4294967295
 800f6e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f6e4:	f1ab 0b18 	sub.w	fp, fp, #24
 800f6e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0f6      	beq.n	800f6de <__kernel_rem_pio2+0x296>
 800f6f0:	4658      	mov	r0, fp
 800f6f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800f750 <__kernel_rem_pio2+0x308>
 800f6f6:	f000 f9ff 	bl	800faf8 <scalbn>
 800f6fa:	f108 0301 	add.w	r3, r8, #1
 800f6fe:	00da      	lsls	r2, r3, #3
 800f700:	9205      	str	r2, [sp, #20]
 800f702:	ec55 4b10 	vmov	r4, r5, d0
 800f706:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f708:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800f764 <__kernel_rem_pio2+0x31c>
 800f70c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f710:	4646      	mov	r6, r8
 800f712:	f04f 0a00 	mov.w	sl, #0
 800f716:	2e00      	cmp	r6, #0
 800f718:	f280 80cf 	bge.w	800f8ba <__kernel_rem_pio2+0x472>
 800f71c:	4644      	mov	r4, r8
 800f71e:	2c00      	cmp	r4, #0
 800f720:	f2c0 80fd 	blt.w	800f91e <__kernel_rem_pio2+0x4d6>
 800f724:	4b12      	ldr	r3, [pc, #72]	@ (800f770 <__kernel_rem_pio2+0x328>)
 800f726:	461f      	mov	r7, r3
 800f728:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f72a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f72e:	9306      	str	r3, [sp, #24]
 800f730:	f04f 0a00 	mov.w	sl, #0
 800f734:	f04f 0b00 	mov.w	fp, #0
 800f738:	2600      	movs	r6, #0
 800f73a:	eba8 0504 	sub.w	r5, r8, r4
 800f73e:	e0e2      	b.n	800f906 <__kernel_rem_pio2+0x4be>
 800f740:	f04f 0902 	mov.w	r9, #2
 800f744:	e754      	b.n	800f5f0 <__kernel_rem_pio2+0x1a8>
 800f746:	bf00      	nop
	...
 800f754:	3ff00000 	.word	0x3ff00000
 800f758:	080104d8 	.word	0x080104d8
 800f75c:	40200000 	.word	0x40200000
 800f760:	3ff00000 	.word	0x3ff00000
 800f764:	3e700000 	.word	0x3e700000
 800f768:	41700000 	.word	0x41700000
 800f76c:	3fe00000 	.word	0x3fe00000
 800f770:	08010498 	.word	0x08010498
 800f774:	f854 3b04 	ldr.w	r3, [r4], #4
 800f778:	b945      	cbnz	r5, 800f78c <__kernel_rem_pio2+0x344>
 800f77a:	b123      	cbz	r3, 800f786 <__kernel_rem_pio2+0x33e>
 800f77c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f780:	f844 3c04 	str.w	r3, [r4, #-4]
 800f784:	2301      	movs	r3, #1
 800f786:	3201      	adds	r2, #1
 800f788:	461d      	mov	r5, r3
 800f78a:	e738      	b.n	800f5fe <__kernel_rem_pio2+0x1b6>
 800f78c:	1acb      	subs	r3, r1, r3
 800f78e:	e7f7      	b.n	800f780 <__kernel_rem_pio2+0x338>
 800f790:	f108 32ff 	add.w	r2, r8, #4294967295
 800f794:	ab0c      	add	r3, sp, #48	@ 0x30
 800f796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f79e:	a90c      	add	r1, sp, #48	@ 0x30
 800f7a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f7a4:	e739      	b.n	800f61a <__kernel_rem_pio2+0x1d2>
 800f7a6:	f108 32ff 	add.w	r2, r8, #4294967295
 800f7aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f7b4:	e7f3      	b.n	800f79e <__kernel_rem_pio2+0x356>
 800f7b6:	a90c      	add	r1, sp, #48	@ 0x30
 800f7b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	430a      	orrs	r2, r1
 800f7c0:	e787      	b.n	800f6d2 <__kernel_rem_pio2+0x28a>
 800f7c2:	3401      	adds	r4, #1
 800f7c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f7c8:	2a00      	cmp	r2, #0
 800f7ca:	d0fa      	beq.n	800f7c2 <__kernel_rem_pio2+0x37a>
 800f7cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f7d2:	eb0d 0503 	add.w	r5, sp, r3
 800f7d6:	9b06      	ldr	r3, [sp, #24]
 800f7d8:	aa20      	add	r2, sp, #128	@ 0x80
 800f7da:	4443      	add	r3, r8
 800f7dc:	f108 0701 	add.w	r7, r8, #1
 800f7e0:	3d98      	subs	r5, #152	@ 0x98
 800f7e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f7e6:	4444      	add	r4, r8
 800f7e8:	42bc      	cmp	r4, r7
 800f7ea:	da04      	bge.n	800f7f6 <__kernel_rem_pio2+0x3ae>
 800f7ec:	46a0      	mov	r8, r4
 800f7ee:	e6a2      	b.n	800f536 <__kernel_rem_pio2+0xee>
 800f7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7f2:	2401      	movs	r4, #1
 800f7f4:	e7e6      	b.n	800f7c4 <__kernel_rem_pio2+0x37c>
 800f7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f7fc:	f7f0 fe92 	bl	8000524 <__aeabi_i2d>
 800f800:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800fac8 <__kernel_rem_pio2+0x680>
 800f804:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f808:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f80c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f810:	46b2      	mov	sl, r6
 800f812:	f04f 0800 	mov.w	r8, #0
 800f816:	9b05      	ldr	r3, [sp, #20]
 800f818:	4598      	cmp	r8, r3
 800f81a:	dd05      	ble.n	800f828 <__kernel_rem_pio2+0x3e0>
 800f81c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f820:	3701      	adds	r7, #1
 800f822:	eca5 7b02 	vstmia	r5!, {d7}
 800f826:	e7df      	b.n	800f7e8 <__kernel_rem_pio2+0x3a0>
 800f828:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f82c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f830:	f7f0 fee2 	bl	80005f8 <__aeabi_dmul>
 800f834:	4602      	mov	r2, r0
 800f836:	460b      	mov	r3, r1
 800f838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f83c:	f7f0 fd26 	bl	800028c <__adddf3>
 800f840:	f108 0801 	add.w	r8, r8, #1
 800f844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f848:	e7e5      	b.n	800f816 <__kernel_rem_pio2+0x3ce>
 800f84a:	f1cb 0000 	rsb	r0, fp, #0
 800f84e:	ec47 6b10 	vmov	d0, r6, r7
 800f852:	f000 f951 	bl	800faf8 <scalbn>
 800f856:	ec55 4b10 	vmov	r4, r5, d0
 800f85a:	4b9d      	ldr	r3, [pc, #628]	@ (800fad0 <__kernel_rem_pio2+0x688>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	4620      	mov	r0, r4
 800f860:	4629      	mov	r1, r5
 800f862:	f7f1 f94f 	bl	8000b04 <__aeabi_dcmpge>
 800f866:	b300      	cbz	r0, 800f8aa <__kernel_rem_pio2+0x462>
 800f868:	4b9a      	ldr	r3, [pc, #616]	@ (800fad4 <__kernel_rem_pio2+0x68c>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	4620      	mov	r0, r4
 800f86e:	4629      	mov	r1, r5
 800f870:	f7f0 fec2 	bl	80005f8 <__aeabi_dmul>
 800f874:	f7f1 f970 	bl	8000b58 <__aeabi_d2iz>
 800f878:	4606      	mov	r6, r0
 800f87a:	f7f0 fe53 	bl	8000524 <__aeabi_i2d>
 800f87e:	4b94      	ldr	r3, [pc, #592]	@ (800fad0 <__kernel_rem_pio2+0x688>)
 800f880:	2200      	movs	r2, #0
 800f882:	f7f0 feb9 	bl	80005f8 <__aeabi_dmul>
 800f886:	460b      	mov	r3, r1
 800f888:	4602      	mov	r2, r0
 800f88a:	4629      	mov	r1, r5
 800f88c:	4620      	mov	r0, r4
 800f88e:	f7f0 fcfb 	bl	8000288 <__aeabi_dsub>
 800f892:	f7f1 f961 	bl	8000b58 <__aeabi_d2iz>
 800f896:	ab0c      	add	r3, sp, #48	@ 0x30
 800f898:	f10b 0b18 	add.w	fp, fp, #24
 800f89c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f8a0:	f108 0801 	add.w	r8, r8, #1
 800f8a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f8a8:	e722      	b.n	800f6f0 <__kernel_rem_pio2+0x2a8>
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	f7f1 f953 	bl	8000b58 <__aeabi_d2iz>
 800f8b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f8b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f8b8:	e71a      	b.n	800f6f0 <__kernel_rem_pio2+0x2a8>
 800f8ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800f8bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f8c0:	f7f0 fe30 	bl	8000524 <__aeabi_i2d>
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	462b      	mov	r3, r5
 800f8c8:	f7f0 fe96 	bl	80005f8 <__aeabi_dmul>
 800f8cc:	4652      	mov	r2, sl
 800f8ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f8d2:	465b      	mov	r3, fp
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	f7f0 fe8e 	bl	80005f8 <__aeabi_dmul>
 800f8dc:	3e01      	subs	r6, #1
 800f8de:	4604      	mov	r4, r0
 800f8e0:	460d      	mov	r5, r1
 800f8e2:	e718      	b.n	800f716 <__kernel_rem_pio2+0x2ce>
 800f8e4:	9906      	ldr	r1, [sp, #24]
 800f8e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f8ea:	9106      	str	r1, [sp, #24]
 800f8ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f8f0:	f7f0 fe82 	bl	80005f8 <__aeabi_dmul>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	4650      	mov	r0, sl
 800f8fa:	4659      	mov	r1, fp
 800f8fc:	f7f0 fcc6 	bl	800028c <__adddf3>
 800f900:	3601      	adds	r6, #1
 800f902:	4682      	mov	sl, r0
 800f904:	468b      	mov	fp, r1
 800f906:	9b00      	ldr	r3, [sp, #0]
 800f908:	429e      	cmp	r6, r3
 800f90a:	dc01      	bgt.n	800f910 <__kernel_rem_pio2+0x4c8>
 800f90c:	42b5      	cmp	r5, r6
 800f90e:	dae9      	bge.n	800f8e4 <__kernel_rem_pio2+0x49c>
 800f910:	ab48      	add	r3, sp, #288	@ 0x120
 800f912:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f916:	e9c5 ab00 	strd	sl, fp, [r5]
 800f91a:	3c01      	subs	r4, #1
 800f91c:	e6ff      	b.n	800f71e <__kernel_rem_pio2+0x2d6>
 800f91e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f920:	2b02      	cmp	r3, #2
 800f922:	dc0b      	bgt.n	800f93c <__kernel_rem_pio2+0x4f4>
 800f924:	2b00      	cmp	r3, #0
 800f926:	dc39      	bgt.n	800f99c <__kernel_rem_pio2+0x554>
 800f928:	d05d      	beq.n	800f9e6 <__kernel_rem_pio2+0x59e>
 800f92a:	9b02      	ldr	r3, [sp, #8]
 800f92c:	f003 0007 	and.w	r0, r3, #7
 800f930:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f934:	ecbd 8b02 	vpop	{d8}
 800f938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f93c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f93e:	2b03      	cmp	r3, #3
 800f940:	d1f3      	bne.n	800f92a <__kernel_rem_pio2+0x4e2>
 800f942:	9b05      	ldr	r3, [sp, #20]
 800f944:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f948:	eb0d 0403 	add.w	r4, sp, r3
 800f94c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f950:	4625      	mov	r5, r4
 800f952:	46c2      	mov	sl, r8
 800f954:	f1ba 0f00 	cmp.w	sl, #0
 800f958:	f1a5 0508 	sub.w	r5, r5, #8
 800f95c:	dc6b      	bgt.n	800fa36 <__kernel_rem_pio2+0x5ee>
 800f95e:	4645      	mov	r5, r8
 800f960:	2d01      	cmp	r5, #1
 800f962:	f1a4 0408 	sub.w	r4, r4, #8
 800f966:	f300 8087 	bgt.w	800fa78 <__kernel_rem_pio2+0x630>
 800f96a:	9c05      	ldr	r4, [sp, #20]
 800f96c:	ab48      	add	r3, sp, #288	@ 0x120
 800f96e:	441c      	add	r4, r3
 800f970:	2000      	movs	r0, #0
 800f972:	2100      	movs	r1, #0
 800f974:	f1b8 0f01 	cmp.w	r8, #1
 800f978:	f300 809c 	bgt.w	800fab4 <__kernel_rem_pio2+0x66c>
 800f97c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f980:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f984:	f1b9 0f00 	cmp.w	r9, #0
 800f988:	f040 80a6 	bne.w	800fad8 <__kernel_rem_pio2+0x690>
 800f98c:	9b04      	ldr	r3, [sp, #16]
 800f98e:	e9c3 7800 	strd	r7, r8, [r3]
 800f992:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f996:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f99a:	e7c6      	b.n	800f92a <__kernel_rem_pio2+0x4e2>
 800f99c:	9d05      	ldr	r5, [sp, #20]
 800f99e:	ab48      	add	r3, sp, #288	@ 0x120
 800f9a0:	441d      	add	r5, r3
 800f9a2:	4644      	mov	r4, r8
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	2c00      	cmp	r4, #0
 800f9aa:	da35      	bge.n	800fa18 <__kernel_rem_pio2+0x5d0>
 800f9ac:	f1b9 0f00 	cmp.w	r9, #0
 800f9b0:	d038      	beq.n	800fa24 <__kernel_rem_pio2+0x5dc>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9b8:	9c04      	ldr	r4, [sp, #16]
 800f9ba:	e9c4 2300 	strd	r2, r3, [r4]
 800f9be:	4602      	mov	r2, r0
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f9c6:	f7f0 fc5f 	bl	8000288 <__aeabi_dsub>
 800f9ca:	ad4a      	add	r5, sp, #296	@ 0x128
 800f9cc:	2401      	movs	r4, #1
 800f9ce:	45a0      	cmp	r8, r4
 800f9d0:	da2b      	bge.n	800fa2a <__kernel_rem_pio2+0x5e2>
 800f9d2:	f1b9 0f00 	cmp.w	r9, #0
 800f9d6:	d002      	beq.n	800f9de <__kernel_rem_pio2+0x596>
 800f9d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9dc:	4619      	mov	r1, r3
 800f9de:	9b04      	ldr	r3, [sp, #16]
 800f9e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f9e4:	e7a1      	b.n	800f92a <__kernel_rem_pio2+0x4e2>
 800f9e6:	9c05      	ldr	r4, [sp, #20]
 800f9e8:	ab48      	add	r3, sp, #288	@ 0x120
 800f9ea:	441c      	add	r4, r3
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	f1b8 0f00 	cmp.w	r8, #0
 800f9f4:	da09      	bge.n	800fa0a <__kernel_rem_pio2+0x5c2>
 800f9f6:	f1b9 0f00 	cmp.w	r9, #0
 800f9fa:	d002      	beq.n	800fa02 <__kernel_rem_pio2+0x5ba>
 800f9fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa00:	4619      	mov	r1, r3
 800fa02:	9b04      	ldr	r3, [sp, #16]
 800fa04:	e9c3 0100 	strd	r0, r1, [r3]
 800fa08:	e78f      	b.n	800f92a <__kernel_rem_pio2+0x4e2>
 800fa0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fa0e:	f7f0 fc3d 	bl	800028c <__adddf3>
 800fa12:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa16:	e7eb      	b.n	800f9f0 <__kernel_rem_pio2+0x5a8>
 800fa18:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fa1c:	f7f0 fc36 	bl	800028c <__adddf3>
 800fa20:	3c01      	subs	r4, #1
 800fa22:	e7c1      	b.n	800f9a8 <__kernel_rem_pio2+0x560>
 800fa24:	4602      	mov	r2, r0
 800fa26:	460b      	mov	r3, r1
 800fa28:	e7c6      	b.n	800f9b8 <__kernel_rem_pio2+0x570>
 800fa2a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fa2e:	f7f0 fc2d 	bl	800028c <__adddf3>
 800fa32:	3401      	adds	r4, #1
 800fa34:	e7cb      	b.n	800f9ce <__kernel_rem_pio2+0x586>
 800fa36:	ed95 7b00 	vldr	d7, [r5]
 800fa3a:	ed8d 7b00 	vstr	d7, [sp]
 800fa3e:	ed95 7b02 	vldr	d7, [r5, #8]
 800fa42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa46:	ec53 2b17 	vmov	r2, r3, d7
 800fa4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa4e:	f7f0 fc1d 	bl	800028c <__adddf3>
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	4606      	mov	r6, r0
 800fa58:	460f      	mov	r7, r1
 800fa5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa5e:	f7f0 fc13 	bl	8000288 <__aeabi_dsub>
 800fa62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa66:	f7f0 fc11 	bl	800028c <__adddf3>
 800fa6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa6e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800fa72:	e9c5 6700 	strd	r6, r7, [r5]
 800fa76:	e76d      	b.n	800f954 <__kernel_rem_pio2+0x50c>
 800fa78:	ed94 7b00 	vldr	d7, [r4]
 800fa7c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800fa80:	ec51 0b17 	vmov	r0, r1, d7
 800fa84:	4652      	mov	r2, sl
 800fa86:	465b      	mov	r3, fp
 800fa88:	ed8d 7b00 	vstr	d7, [sp]
 800fa8c:	f7f0 fbfe 	bl	800028c <__adddf3>
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
 800fa94:	4606      	mov	r6, r0
 800fa96:	460f      	mov	r7, r1
 800fa98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa9c:	f7f0 fbf4 	bl	8000288 <__aeabi_dsub>
 800faa0:	4652      	mov	r2, sl
 800faa2:	465b      	mov	r3, fp
 800faa4:	f7f0 fbf2 	bl	800028c <__adddf3>
 800faa8:	3d01      	subs	r5, #1
 800faaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800faae:	e9c4 6700 	strd	r6, r7, [r4]
 800fab2:	e755      	b.n	800f960 <__kernel_rem_pio2+0x518>
 800fab4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fab8:	f7f0 fbe8 	bl	800028c <__adddf3>
 800fabc:	f108 38ff 	add.w	r8, r8, #4294967295
 800fac0:	e758      	b.n	800f974 <__kernel_rem_pio2+0x52c>
 800fac2:	bf00      	nop
 800fac4:	f3af 8000 	nop.w
	...
 800fad0:	41700000 	.word	0x41700000
 800fad4:	3e700000 	.word	0x3e700000
 800fad8:	9b04      	ldr	r3, [sp, #16]
 800fada:	9a04      	ldr	r2, [sp, #16]
 800fadc:	601f      	str	r7, [r3, #0]
 800fade:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800fae2:	605c      	str	r4, [r3, #4]
 800fae4:	609d      	str	r5, [r3, #8]
 800fae6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800faea:	60d3      	str	r3, [r2, #12]
 800faec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800faf0:	6110      	str	r0, [r2, #16]
 800faf2:	6153      	str	r3, [r2, #20]
 800faf4:	e719      	b.n	800f92a <__kernel_rem_pio2+0x4e2>
 800faf6:	bf00      	nop

0800faf8 <scalbn>:
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	ec55 4b10 	vmov	r4, r5, d0
 800fafe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fb02:	4606      	mov	r6, r0
 800fb04:	462b      	mov	r3, r5
 800fb06:	b991      	cbnz	r1, 800fb2e <scalbn+0x36>
 800fb08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fb0c:	4323      	orrs	r3, r4
 800fb0e:	d03d      	beq.n	800fb8c <scalbn+0x94>
 800fb10:	4b35      	ldr	r3, [pc, #212]	@ (800fbe8 <scalbn+0xf0>)
 800fb12:	4620      	mov	r0, r4
 800fb14:	4629      	mov	r1, r5
 800fb16:	2200      	movs	r2, #0
 800fb18:	f7f0 fd6e 	bl	80005f8 <__aeabi_dmul>
 800fb1c:	4b33      	ldr	r3, [pc, #204]	@ (800fbec <scalbn+0xf4>)
 800fb1e:	429e      	cmp	r6, r3
 800fb20:	4604      	mov	r4, r0
 800fb22:	460d      	mov	r5, r1
 800fb24:	da0f      	bge.n	800fb46 <scalbn+0x4e>
 800fb26:	a328      	add	r3, pc, #160	@ (adr r3, 800fbc8 <scalbn+0xd0>)
 800fb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2c:	e01e      	b.n	800fb6c <scalbn+0x74>
 800fb2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fb32:	4291      	cmp	r1, r2
 800fb34:	d10b      	bne.n	800fb4e <scalbn+0x56>
 800fb36:	4622      	mov	r2, r4
 800fb38:	4620      	mov	r0, r4
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	f7f0 fba6 	bl	800028c <__adddf3>
 800fb40:	4604      	mov	r4, r0
 800fb42:	460d      	mov	r5, r1
 800fb44:	e022      	b.n	800fb8c <scalbn+0x94>
 800fb46:	460b      	mov	r3, r1
 800fb48:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fb4c:	3936      	subs	r1, #54	@ 0x36
 800fb4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fb52:	4296      	cmp	r6, r2
 800fb54:	dd0d      	ble.n	800fb72 <scalbn+0x7a>
 800fb56:	2d00      	cmp	r5, #0
 800fb58:	a11d      	add	r1, pc, #116	@ (adr r1, 800fbd0 <scalbn+0xd8>)
 800fb5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb5e:	da02      	bge.n	800fb66 <scalbn+0x6e>
 800fb60:	a11d      	add	r1, pc, #116	@ (adr r1, 800fbd8 <scalbn+0xe0>)
 800fb62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb66:	a31a      	add	r3, pc, #104	@ (adr r3, 800fbd0 <scalbn+0xd8>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	f7f0 fd44 	bl	80005f8 <__aeabi_dmul>
 800fb70:	e7e6      	b.n	800fb40 <scalbn+0x48>
 800fb72:	1872      	adds	r2, r6, r1
 800fb74:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fb78:	428a      	cmp	r2, r1
 800fb7a:	dcec      	bgt.n	800fb56 <scalbn+0x5e>
 800fb7c:	2a00      	cmp	r2, #0
 800fb7e:	dd08      	ble.n	800fb92 <scalbn+0x9a>
 800fb80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fb88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb8c:	ec45 4b10 	vmov	d0, r4, r5
 800fb90:	bd70      	pop	{r4, r5, r6, pc}
 800fb92:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fb96:	da08      	bge.n	800fbaa <scalbn+0xb2>
 800fb98:	2d00      	cmp	r5, #0
 800fb9a:	a10b      	add	r1, pc, #44	@ (adr r1, 800fbc8 <scalbn+0xd0>)
 800fb9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fba0:	dac1      	bge.n	800fb26 <scalbn+0x2e>
 800fba2:	a10f      	add	r1, pc, #60	@ (adr r1, 800fbe0 <scalbn+0xe8>)
 800fba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fba8:	e7bd      	b.n	800fb26 <scalbn+0x2e>
 800fbaa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fbae:	3236      	adds	r2, #54	@ 0x36
 800fbb0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fbb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fbb8:	4620      	mov	r0, r4
 800fbba:	4b0d      	ldr	r3, [pc, #52]	@ (800fbf0 <scalbn+0xf8>)
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	e7d4      	b.n	800fb6c <scalbn+0x74>
 800fbc2:	bf00      	nop
 800fbc4:	f3af 8000 	nop.w
 800fbc8:	c2f8f359 	.word	0xc2f8f359
 800fbcc:	01a56e1f 	.word	0x01a56e1f
 800fbd0:	8800759c 	.word	0x8800759c
 800fbd4:	7e37e43c 	.word	0x7e37e43c
 800fbd8:	8800759c 	.word	0x8800759c
 800fbdc:	fe37e43c 	.word	0xfe37e43c
 800fbe0:	c2f8f359 	.word	0xc2f8f359
 800fbe4:	81a56e1f 	.word	0x81a56e1f
 800fbe8:	43500000 	.word	0x43500000
 800fbec:	ffff3cb0 	.word	0xffff3cb0
 800fbf0:	3c900000 	.word	0x3c900000
 800fbf4:	00000000 	.word	0x00000000

0800fbf8 <floor>:
 800fbf8:	ec51 0b10 	vmov	r0, r1, d0
 800fbfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fc08:	2e13      	cmp	r6, #19
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	4605      	mov	r5, r0
 800fc0e:	4680      	mov	r8, r0
 800fc10:	dc34      	bgt.n	800fc7c <floor+0x84>
 800fc12:	2e00      	cmp	r6, #0
 800fc14:	da17      	bge.n	800fc46 <floor+0x4e>
 800fc16:	a332      	add	r3, pc, #200	@ (adr r3, 800fce0 <floor+0xe8>)
 800fc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1c:	f7f0 fb36 	bl	800028c <__adddf3>
 800fc20:	2200      	movs	r2, #0
 800fc22:	2300      	movs	r3, #0
 800fc24:	f7f0 ff78 	bl	8000b18 <__aeabi_dcmpgt>
 800fc28:	b150      	cbz	r0, 800fc40 <floor+0x48>
 800fc2a:	2c00      	cmp	r4, #0
 800fc2c:	da55      	bge.n	800fcda <floor+0xe2>
 800fc2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fc32:	432c      	orrs	r4, r5
 800fc34:	2500      	movs	r5, #0
 800fc36:	42ac      	cmp	r4, r5
 800fc38:	4c2b      	ldr	r4, [pc, #172]	@ (800fce8 <floor+0xf0>)
 800fc3a:	bf08      	it	eq
 800fc3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fc40:	4621      	mov	r1, r4
 800fc42:	4628      	mov	r0, r5
 800fc44:	e023      	b.n	800fc8e <floor+0x96>
 800fc46:	4f29      	ldr	r7, [pc, #164]	@ (800fcec <floor+0xf4>)
 800fc48:	4137      	asrs	r7, r6
 800fc4a:	ea01 0307 	and.w	r3, r1, r7
 800fc4e:	4303      	orrs	r3, r0
 800fc50:	d01d      	beq.n	800fc8e <floor+0x96>
 800fc52:	a323      	add	r3, pc, #140	@ (adr r3, 800fce0 <floor+0xe8>)
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	f7f0 fb18 	bl	800028c <__adddf3>
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	2300      	movs	r3, #0
 800fc60:	f7f0 ff5a 	bl	8000b18 <__aeabi_dcmpgt>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d0eb      	beq.n	800fc40 <floor+0x48>
 800fc68:	2c00      	cmp	r4, #0
 800fc6a:	bfbe      	ittt	lt
 800fc6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fc70:	4133      	asrlt	r3, r6
 800fc72:	18e4      	addlt	r4, r4, r3
 800fc74:	ea24 0407 	bic.w	r4, r4, r7
 800fc78:	2500      	movs	r5, #0
 800fc7a:	e7e1      	b.n	800fc40 <floor+0x48>
 800fc7c:	2e33      	cmp	r6, #51	@ 0x33
 800fc7e:	dd0a      	ble.n	800fc96 <floor+0x9e>
 800fc80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fc84:	d103      	bne.n	800fc8e <floor+0x96>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	f7f0 faff 	bl	800028c <__adddf3>
 800fc8e:	ec41 0b10 	vmov	d0, r0, r1
 800fc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fc9a:	f04f 37ff 	mov.w	r7, #4294967295
 800fc9e:	40df      	lsrs	r7, r3
 800fca0:	4207      	tst	r7, r0
 800fca2:	d0f4      	beq.n	800fc8e <floor+0x96>
 800fca4:	a30e      	add	r3, pc, #56	@ (adr r3, 800fce0 <floor+0xe8>)
 800fca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcaa:	f7f0 faef 	bl	800028c <__adddf3>
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	f7f0 ff31 	bl	8000b18 <__aeabi_dcmpgt>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d0c2      	beq.n	800fc40 <floor+0x48>
 800fcba:	2c00      	cmp	r4, #0
 800fcbc:	da0a      	bge.n	800fcd4 <floor+0xdc>
 800fcbe:	2e14      	cmp	r6, #20
 800fcc0:	d101      	bne.n	800fcc6 <floor+0xce>
 800fcc2:	3401      	adds	r4, #1
 800fcc4:	e006      	b.n	800fcd4 <floor+0xdc>
 800fcc6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fcca:	2301      	movs	r3, #1
 800fccc:	40b3      	lsls	r3, r6
 800fcce:	441d      	add	r5, r3
 800fcd0:	4545      	cmp	r5, r8
 800fcd2:	d3f6      	bcc.n	800fcc2 <floor+0xca>
 800fcd4:	ea25 0507 	bic.w	r5, r5, r7
 800fcd8:	e7b2      	b.n	800fc40 <floor+0x48>
 800fcda:	2500      	movs	r5, #0
 800fcdc:	462c      	mov	r4, r5
 800fcde:	e7af      	b.n	800fc40 <floor+0x48>
 800fce0:	8800759c 	.word	0x8800759c
 800fce4:	7e37e43c 	.word	0x7e37e43c
 800fce8:	bff00000 	.word	0xbff00000
 800fcec:	000fffff 	.word	0x000fffff

0800fcf0 <_init>:
 800fcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf2:	bf00      	nop
 800fcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcf6:	bc08      	pop	{r3}
 800fcf8:	469e      	mov	lr, r3
 800fcfa:	4770      	bx	lr

0800fcfc <_fini>:
 800fcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfe:	bf00      	nop
 800fd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd02:	bc08      	pop	{r3}
 800fd04:	469e      	mov	lr, r3
 800fd06:	4770      	bx	lr


armband-all-updated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  08010cb8  08010cb8  00020cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011430  08011430  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08011430  08011430  00021430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011438  08011438  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011438  08011438  00021438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801143c  0801143c  0002143c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011440  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e8  20000220  08011660  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  08011660  00030c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6bb  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000455c  00000000  00000000  0004e94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c50  00000000  00000000  00052eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160f  00000000  00000000  00054b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265e2  00000000  00000000  0005610f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021807  00000000  00000000  0007c6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e419a  00000000  00000000  0009def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009088  00000000  00000000  00182094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0018b11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ca0 	.word	0x08010ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08010ca0 	.word	0x08010ca0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <fix_msb_loss>:
 * exceed 286 m/s2
 * this is 100% fine for gravity vector
 * this is most likely fine for acc vector as no runner is
 * putting out 30g's while running
 */
uint16_t fix_msb_loss(uint16_t val){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if ((val & 0xF000) == 0x7000) {
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001000:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001004:	d105      	bne.n	8001012 <fix_msb_loss+0x22>
		val |= 0x8000;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800100c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001010:	80fb      	strh	r3, [r7, #6]
	}
	return val;
 8001012:	88fb      	ldrh	r3, [r7, #6]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <startup_IMU>:

uint8_t startup_IMU(I2C_HandleTypeDef *hi2c){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	// verify i2c is working properly by reading chip id
	read_to_buf(hi2c, 0x00, buf, 1);
 8001028:	f107 020c 	add.w	r2, r7, #12
 800102c:	2301      	movs	r3, #1
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f856 	bl	80010e2 <read_to_buf>
	if(buf[0] != 0xA0) {
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	2ba0      	cmp	r3, #160	; 0xa0
 800103a:	d004      	beq.n	8001046 <startup_IMU+0x26>
		printf("IMU ERROR: wrong/no chip ID returned\n\r");
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <startup_IMU+0x4c>)
 800103e:	f00b fe99 	bl	800cd74 <iprintf>
		return 1;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <startup_IMU+0x44>
	}
	printf("IMU success: chip ID returned\n\r");
 8001046:	480a      	ldr	r0, [pc, #40]	; (8001070 <startup_IMU+0x50>)
 8001048:	f00b fe94 	bl	800cd74 <iprintf>

	// put chip in configuration mode
	buf[0] = 0x3D;
 800104c:	233d      	movs	r3, #61	; 0x3d
 800104e:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 8001050:	2300      	movs	r3, #0
 8001052:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2202      	movs	r2, #2
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f825 	bl	80010ac <transmit_buf>
	return 0;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	08010cb8 	.word	0x08010cb8
 8001070:	08010ce0 	.word	0x08010ce0

08001074 <init_IMU>:

uint8_t init_IMU(I2C_HandleTypeDef *hi2c){
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	if(startup_IMU(hi2c)) return 1;
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffcf 	bl	8001020 <startup_IMU>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <init_IMU+0x18>
 8001088:	2301      	movs	r3, #1
 800108a:	e00b      	b.n	80010a4 <init_IMU+0x30>

	// put chip in IMU mode
	buf[0] = 0x3D;
 800108c:	233d      	movs	r3, #61	; 0x3d
 800108e:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x08;
 8001090:	2308      	movs	r3, #8
 8001092:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2202      	movs	r2, #2
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f805 	bl	80010ac <transmit_buf>
	return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <transmit_buf>:
	buf[1] = buf[0];
	buf[0] = 0x3B;
	transmit_buf(hi2c, buf, 2);
}

uint8_t transmit_buf(I2C_HandleTypeDef *hi2c, uint8_t *buf, uint16_t bytes) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, bytes, 1000);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c0:	9200      	str	r2, [sp, #0]
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	2150      	movs	r1, #80	; 0x50
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f004 fce0 	bl	8005a8c <HAL_I2C_Master_Transmit>
 80010cc:	4603      	mov	r3, r0
 80010ce:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f838 	bl	8001148 <check_ret>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <read_to_buf>:

uint8_t read_to_buf(I2C_HandleTypeDef *hi2c, uint8_t subAddr, uint8_t *buf, uint16_t bytes){
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b088      	sub	sp, #32
 80010e6:	af02      	add	r7, sp, #8
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	461a      	mov	r2, r3
 80010ee:	460b      	mov	r3, r1
 80010f0:	72fb      	strb	r3, [r7, #11]
 80010f2:	4613      	mov	r3, r2
 80010f4:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, &subAddr, 1, 1000);
 80010f6:	f107 020b 	add.w	r2, r7, #11
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	2150      	movs	r1, #80	; 0x50
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f004 fcc1 	bl	8005a8c <HAL_I2C_Master_Transmit>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
	if (!check_ret(ret)) return 0;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f819 	bl	8001148 <check_ret>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <read_to_buf+0x3e>
 800111c:	2300      	movs	r3, #0
 800111e:	e00f      	b.n	8001140 <read_to_buf+0x5e>
	ret = HAL_I2C_Master_Receive(hi2c, SAD_R, buf, bytes, 1000);
 8001120:	893b      	ldrh	r3, [r7, #8]
 8001122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	2151      	movs	r1, #81	; 0x51
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f004 fdc5 	bl	8005cbc <HAL_I2C_Master_Receive>
 8001132:	4603      	mov	r3, r0
 8001134:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f805 	bl	8001148 <check_ret>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <check_ret>:

uint8_t check_ret(HAL_StatusTypeDef ret) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <check_ret+0x14>
		return 1;
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <check_ret+0x16>
	} else {
		// TODO:
		// add more descriptive error
		//printf("i2c error!\n\r");
		return 0;
 800115c:	2300      	movs	r3, #0
	}
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <lin_acc_vec_raw>:

void lin_acc_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x28, buf, 6);
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	2306      	movs	r3, #6
 800117a:	2128      	movs	r1, #40	; 0x28
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffb0 	bl	80010e2 <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 8001182:	7a3b      	ldrb	r3, [r7, #8]
 8001184:	b21a      	sxth	r2, r3
 8001186:	7a7b      	ldrb	r3, [r7, #9]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21b      	sxth	r3, r3
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff2c 	bl	8000ff0 <fix_msb_loss>
 8001198:	4603      	mov	r3, r0
 800119a:	b21a      	sxth	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff1d 	bl	8000ff0 <fix_msb_loss>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	b212      	sxth	r2, r2
 80011c0:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 80011c2:	7b3b      	ldrb	r3, [r7, #12]
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff0c 	bl	8000ff0 <fix_msb_loss>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3304      	adds	r3, #4
 80011e0:	b212      	sxth	r2, r2
 80011e2:	801a      	strh	r2, [r3, #0]
	return;
 80011e4:	bf00      	nop
}
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <initPulseSensor>:
static bool first_beat = true;		// first beat bool
static bool second_beat = false; 	// second beat bool
static bool pulse = false; 		// pulse recognized bool
static int samples_since_last_beat = 0;

void initPulseSensor(ADC_HandleTypeDef *hadc_in) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <initPulseSensor+0x1c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000023c 	.word	0x2000023c

0800120c <updatePulseSensor>:

void updatePulseSensor(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	read_ADC();
 8001210:	f000 f804 	bl	800121c <read_ADC>
	get_pulse();
 8001214:	f000 f834 	bl	8001280 <get_pulse>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <read_ADC>:

void read_ADC(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	//uint32_t val;
	unsigned int val;

	HAL_ADC_Start(hadc);
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <read_ADC+0x54>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fa68 	bl	80046fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 0xFFFFFFFF);
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <read_ADC+0x54>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fac4 	bl	80047c2 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <read_ADC+0x54>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fb4e 	bl	80048e0 <HAL_ADC_GetValue>
 8001244:	6078      	str	r0, [r7, #4]
	signal = val * 3.3f / 4096.0f;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001250:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001274 <read_ADC+0x58>
 8001254:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001258:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001278 <read_ADC+0x5c>
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <read_ADC+0x60>)
 8001262:	edc3 7a00 	vstr	s15, [r3]
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000023c 	.word	0x2000023c
 8001274:	40533333 	.word	0x40533333
 8001278:	45800000 	.word	0x45800000
 800127c:	200002bc 	.word	0x200002bc

08001280 <get_pulse>:

void get_pulse() {
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
	++samples_since_last_beat;
 8001286:	4b95      	ldr	r3, [pc, #596]	; (80014dc <get_pulse+0x25c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a93      	ldr	r2, [pc, #588]	; (80014dc <get_pulse+0x25c>)
 800128e:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_beat * SAMPLE_PERIOD;
 8001290:	4b92      	ldr	r3, [pc, #584]	; (80014dc <get_pulse+0x25c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2232      	movs	r2, #50	; 0x32
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	603b      	str	r3, [r7, #0]
	if (signal < thresh && N > (IBI / 5) * 3) { // avoid dicrotic noise by waiting 3/5 of last IBI
 800129c:	4b90      	ldr	r3, [pc, #576]	; (80014e0 <get_pulse+0x260>)
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	4b90      	ldr	r3, [pc, #576]	; (80014e4 <get_pulse+0x264>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	d51c      	bpl.n	80012ec <get_pulse+0x6c>
 80012b2:	4b8d      	ldr	r3, [pc, #564]	; (80014e8 <get_pulse+0x268>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a8d      	ldr	r2, [pc, #564]	; (80014ec <get_pulse+0x26c>)
 80012b8:	fb82 1203 	smull	r1, r2, r2, r3
 80012bc:	1052      	asrs	r2, r2, #1
 80012be:	17db      	asrs	r3, r3, #31
 80012c0:	1ad2      	subs	r2, r2, r3
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dd0e      	ble.n	80012ec <get_pulse+0x6c>
	    if (signal < trough_amp) {                        // T is the trough
 80012ce:	4b84      	ldr	r3, [pc, #528]	; (80014e0 <get_pulse+0x260>)
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	4b86      	ldr	r3, [pc, #536]	; (80014f0 <get_pulse+0x270>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	d503      	bpl.n	80012ec <get_pulse+0x6c>
	      trough_amp = signal;                            // keep track of lowest point in pulse wave
 80012e4:	4b7e      	ldr	r3, [pc, #504]	; (80014e0 <get_pulse+0x260>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a81      	ldr	r2, [pc, #516]	; (80014f0 <get_pulse+0x270>)
 80012ea:	6013      	str	r3, [r2, #0]
	    }
	  }

	  if (signal > thresh && signal > peak_amp) {       // thresh condition helps avoid noise
 80012ec:	4b7c      	ldr	r3, [pc, #496]	; (80014e0 <get_pulse+0x260>)
 80012ee:	ed93 7a00 	vldr	s14, [r3]
 80012f2:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <get_pulse+0x264>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd0e      	ble.n	8001320 <get_pulse+0xa0>
 8001302:	4b77      	ldr	r3, [pc, #476]	; (80014e0 <get_pulse+0x260>)
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <get_pulse+0x274>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dd03      	ble.n	8001320 <get_pulse+0xa0>
		  peak_amp = signal;                              // P is the peak
 8001318:	4b71      	ldr	r3, [pc, #452]	; (80014e0 <get_pulse+0x260>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a75      	ldr	r2, [pc, #468]	; (80014f4 <get_pulse+0x274>)
 800131e:	6013      	str	r3, [r2, #0]
	  }                                          // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  if (N > 250) {                             // avoid high frequency noise
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2bfa      	cmp	r3, #250	; 0xfa
 8001324:	dd7d      	ble.n	8001422 <get_pulse+0x1a2>
	    if ( (signal > thresh) && (pulse == false) && (N > ((IBI / 5) * 3)) ) {
 8001326:	4b6e      	ldr	r3, [pc, #440]	; (80014e0 <get_pulse+0x260>)
 8001328:	ed93 7a00 	vldr	s14, [r3]
 800132c:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <get_pulse+0x264>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	dd72      	ble.n	8001422 <get_pulse+0x1a2>
 800133c:	4b6e      	ldr	r3, [pc, #440]	; (80014f8 <get_pulse+0x278>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f083 0301 	eor.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d06b      	beq.n	8001422 <get_pulse+0x1a2>
 800134a:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <get_pulse+0x268>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a67      	ldr	r2, [pc, #412]	; (80014ec <get_pulse+0x26c>)
 8001350:	fb82 1203 	smull	r1, r2, r2, r3
 8001354:	1052      	asrs	r2, r2, #1
 8001356:	17db      	asrs	r3, r3, #31
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	dd5d      	ble.n	8001422 <get_pulse+0x1a2>
	      pulse = true;                             // set the Pulse flag when we think there is a pulse
 8001366:	4b64      	ldr	r3, [pc, #400]	; (80014f8 <get_pulse+0x278>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
	      IBI = N;    // measure time between beats in mS
 800136c:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <get_pulse+0x268>)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	6013      	str	r3, [r2, #0]
	      samples_since_last_beat = 0;
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <get_pulse+0x25c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

	      if (second_beat) {                      // if this is the second beat, if secondBeat == TRUE
 8001378:	4b60      	ldr	r3, [pc, #384]	; (80014fc <get_pulse+0x27c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d011      	beq.n	80013a4 <get_pulse+0x124>
	        second_beat = false;                    // clear secondBeat flag
 8001380:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <get_pulse+0x27c>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e008      	b.n	800139e <get_pulse+0x11e>
	          rate[i] = IBI;
 800138c:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <get_pulse+0x268>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	495b      	ldr	r1, [pc, #364]	; (8001500 <get_pulse+0x280>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b1d      	cmp	r3, #29
 80013a2:	ddf3      	ble.n	800138c <get_pulse+0x10c>
	        }
	      }

	      if (first_beat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <get_pulse+0x284>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <get_pulse+0x13a>
	    	first_beat = 0;                       // clear firstBeat flag
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <get_pulse+0x284>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
	    	second_beat = 1;                      // set the second beat flag
 80013b2:	4b52      	ldr	r3, [pc, #328]	; (80014fc <get_pulse+0x27c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
	        // IBI value is unreliable so discard it
	        return;
 80013b8:	e08b      	b.n	80014d2 <get_pulse+0x252>
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]

	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	e012      	b.n	80013ea <get_pulse+0x16a>
	        rate[i] = rate[i + 1];                // and drop the oldest IBI value
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <get_pulse+0x280>)
 80013ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ce:	494c      	ldr	r1, [pc, #304]	; (8001500 <get_pulse+0x280>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
 80013d6:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <get_pulse+0x280>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	4413      	add	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b1c      	cmp	r3, #28
 80013ee:	dde9      	ble.n	80013c4 <get_pulse+0x144>
	      }

	      rate[BUF_LENGTH - 1] = IBI;                          // add the latest IBI to the rate array
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <get_pulse+0x268>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a42      	ldr	r2, [pc, #264]	; (8001500 <get_pulse+0x280>)
 80013f6:	6753      	str	r3, [r2, #116]	; 0x74
	      runningTotal += rate[BUF_LENGTH - 1];                // add the latest IBI to runningTotal
 80013f8:	4b41      	ldr	r3, [pc, #260]	; (8001500 <get_pulse+0x280>)
 80013fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]
	      runningTotal /= BUF_LENGTH;                     // average the last 10 IBI values
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	4a40      	ldr	r2, [pc, #256]	; (8001508 <get_pulse+0x288>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	441a      	add	r2, r3
 800140c:	1112      	asrs	r2, r2, #4
 800140e:	17db      	asrs	r3, r3, #31
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	60bb      	str	r3, [r7, #8]
	      BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
 8001414:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	fb92 f3f3 	sdiv	r3, r2, r3
 800141e:	4a3b      	ldr	r2, [pc, #236]	; (800150c <get_pulse+0x28c>)
 8001420:	6013      	str	r3, [r2, #0]
	      //fadeLevel = MAX_FADE_LEVEL;             // If we're fading, re-light that LED.
	    }
	  }

	  if (signal < thresh && pulse) {  // when the values are going down, the beat is over
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <get_pulse+0x260>)
 8001424:	ed93 7a00 	vldr	s14, [r3]
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <get_pulse+0x264>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	d528      	bpl.n	800148a <get_pulse+0x20a>
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <get_pulse+0x278>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d024      	beq.n	800148a <get_pulse+0x20a>
	    pulse = false;                         // reset the Pulse flag so we can do it again
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <get_pulse+0x278>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	    amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <get_pulse+0x274>)
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <get_pulse+0x270>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <get_pulse+0x290>)
 8001458:	edc3 7a00 	vstr	s15, [r3]
	    thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <get_pulse+0x290>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001466:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <get_pulse+0x270>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <get_pulse+0x264>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <get_pulse+0x264>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <get_pulse+0x274>)
 8001480:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <get_pulse+0x264>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <get_pulse+0x270>)
 8001488:	6013      	str	r3, [r2, #0]
	  }

	  if (N > 2500) {                          // if 2.5 seconds go by without a beat
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001490:	4293      	cmp	r3, r2
 8001492:	dd1e      	ble.n	80014d2 <get_pulse+0x252>
	    thresh = THRESH_DEFAULT;                // set thresh default
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <get_pulse+0x264>)
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <get_pulse+0x294>)
 8001498:	601a      	str	r2, [r3, #0]
	    peak_amp = THRESH_DEFAULT;                               // set P default
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <get_pulse+0x274>)
 800149c:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <get_pulse+0x294>)
 800149e:	601a      	str	r2, [r3, #0]
	    trough_amp = THRESH_DEFAULT;                               // set T default
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <get_pulse+0x270>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <get_pulse+0x294>)
 80014a4:	601a      	str	r2, [r3, #0]
	    samples_since_last_beat = 0;          // bring the lastBeatTime up to date
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <get_pulse+0x25c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
	    first_beat = true;                      // set these to avoid noise
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <get_pulse+0x284>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
	    second_beat = false;                    // when we get the heartbeat back
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <get_pulse+0x27c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
	    BPM = 0;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <get_pulse+0x28c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
	    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <get_pulse+0x268>)
 80014c0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014c4:	601a      	str	r2, [r3, #0]
	    pulse = false;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <get_pulse+0x278>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
	    amp = 100;                  // beat amplitude 1/10 of input range.
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <get_pulse+0x290>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <get_pulse+0x298>)
 80014d0:	601a      	str	r2, [r3, #0]

	  }
}
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	200002c4 	.word	0x200002c4
 80014e0:	200002bc 	.word	0x200002bc
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000000 	.word	0x20000000
 80014ec:	66666667 	.word	0x66666667
 80014f0:	20000010 	.word	0x20000010
 80014f4:	2000000c 	.word	0x2000000c
 80014f8:	200002c1 	.word	0x200002c1
 80014fc:	200002c0 	.word	0x200002c0
 8001500:	20000244 	.word	0x20000244
 8001504:	20000014 	.word	0x20000014
 8001508:	88888889 	.word	0x88888889
 800150c:	20000240 	.word	0x20000240
 8001510:	20000004 	.word	0x20000004
 8001514:	3fcccccd 	.word	0x3fcccccd
 8001518:	42c80000 	.word	0x42c80000

0800151c <get_BPM>:

int get_BPM(void) {
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return BPM;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <get_BPM+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000240 	.word	0x20000240

08001534 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
 800153e:	4603      	mov	r3, r0
 8001540:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001542:	ed97 7a01 	vldr	s14, [r7, #4]
 8001546:	eddf 6a20 	vldr	s13, [pc, #128]	; 80015c8 <GPS_nmea_to_dec+0x94>
 800154a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001552:	ee17 3a90 	vmov	r3, s15
 8001556:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2264      	movs	r2, #100	; 0x64
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	ed97 7a01 	vldr	s14, [r7, #4]
 800156c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001570:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001574:	ed97 7a03 	vldr	s14, [r7, #12]
 8001578:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015cc <GPS_nmea_to_dec+0x98>
 800157c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001580:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b53      	cmp	r3, #83	; 0x53
 800159e:	d002      	beq.n	80015a6 <GPS_nmea_to_dec+0x72>
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	2b57      	cmp	r3, #87	; 0x57
 80015a4:	d105      	bne.n	80015b2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80015a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015aa:	eef1 7a67 	vneg.f32	s15, s15
 80015ae:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	ee07 3a90 	vmov	s15, r3
}
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	42c80000 	.word	0x42c80000
 80015cc:	42700000 	.word	0x42700000

080015d0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6858      	ldr	r0, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	8adb      	ldrh	r3, [r3, #22]
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	f004 f973 	bl	80058e0 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	1cf9      	adds	r1, r7, #3
 8001604:	2201      	movs	r2, #1
 8001606:	f006 f9a0 	bl	800794a <HAL_SPI_Transmit>
 800160a:	4603      	mov	r3, r0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f107 010f 	add.w	r1, r7, #15
 800161a:	2201      	movs	r2, #1
 800161c:	f006 fb0a 	bl	8007c34 <HAL_SPI_Receive>
 8001620:	4603      	mov	r3, r0
 8001622:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6858      	ldr	r0, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	8adb      	ldrh	r3, [r3, #22]
 800162c:	2201      	movs	r2, #1
 800162e:	4619      	mov	r1, r3
 8001630:	f004 f956 	bl	80058e0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
 800164a:	4613      	mov	r3, r2
 800164c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001654:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001656:	78bb      	ldrb	r3, [r7, #2]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21a      	sxth	r2, r3
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21b      	sxth	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6858      	ldr	r0, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	8adb      	ldrh	r3, [r3, #22]
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	f004 f934 	bl	80058e0 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f107 010a 	add.w	r1, r7, #10
 8001684:	2202      	movs	r2, #2
 8001686:	f006 f960 	bl	800794a <HAL_SPI_Transmit>
 800168a:	4603      	mov	r3, r0
 800168c:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6858      	ldr	r0, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	8adb      	ldrh	r3, [r3, #22]
 8001696:	2201      	movs	r2, #1
 8001698:	4619      	mov	r1, r3
 800169a:	f004 f921 	bl	80058e0 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b088      	sub	sp, #32
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	4611      	mov	r1, r2
 80016b2:	461a      	mov	r2, r3
 80016b4:	460b      	mov	r3, r1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	4613      	mov	r3, r2
 80016ba:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6858      	ldr	r0, [r3, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8adb      	ldrh	r3, [r3, #22]
 80016c8:	2200      	movs	r2, #0
 80016ca:	4619      	mov	r1, r3
 80016cc:	f004 f908 	bl	80058e0 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f107 0117 	add.w	r1, r7, #23
 80016dc:	2201      	movs	r2, #1
 80016de:	f006 f934 	bl	800794a <HAL_SPI_Transmit>
 80016e2:	4603      	mov	r3, r0
 80016e4:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	79fa      	ldrb	r2, [r7, #7]
 80016f2:	b292      	uxth	r2, r2
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 fdf6 	bl	80082e8 <HAL_SPI_Transmit_DMA>
 80016fc:	e012      	b.n	8001724 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	f006 f91d 	bl	800794a <HAL_SPI_Transmit>
 8001710:	4603      	mov	r3, r0
 8001712:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6858      	ldr	r0, [r3, #4]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8adb      	ldrh	r3, [r3, #22]
 800171c:	2201      	movs	r2, #1
 800171e:	4619      	mov	r1, r3
 8001720:	f004 f8de 	bl	80058e0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	2101      	movs	r1, #1
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff7b 	bl	800163e <write_register>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b2c      	cmp	r3, #44	; 0x2c
 8001760:	d801      	bhi.n	8001766 <set_OCP+0x16>
    imax = 45;
 8001762:	232d      	movs	r3, #45	; 0x2d
 8001764:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	2bf0      	cmp	r3, #240	; 0xf0
 800176a:	d901      	bls.n	8001770 <set_OCP+0x20>
    imax = 240;
 800176c:	23f0      	movs	r3, #240	; 0xf0
 800176e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b81      	cmp	r3, #129	; 0x81
 8001774:	d809      	bhi.n	800178a <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	3b2d      	subs	r3, #45	; 0x2d
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <set_OCP+0x68>)
 800177c:	fb82 1203 	smull	r1, r2, r2, r3
 8001780:	1052      	asrs	r2, r2, #1
 8001782:	17db      	asrs	r3, r3, #31
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e008      	b.n	800179c <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	331e      	adds	r3, #30
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <set_OCP+0x68>)
 8001790:	fb82 1203 	smull	r1, r2, r2, r3
 8001794:	1092      	asrs	r2, r2, #2
 8001796:	17db      	asrs	r3, r3, #31
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	f043 0320 	orr.w	r3, r3, #32
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	210b      	movs	r1, #11
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff48 	bl	800163e <write_register>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	66666667 	.word	0x66666667

080017bc <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80017c4:	211d      	movs	r1, #29
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff02 	bl	80015d0 <read_register>
 80017cc:	4603      	mov	r3, r0
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2200      	movs	r2, #0
 80017d6:	461c      	mov	r4, r3
 80017d8:	4615      	mov	r5, r2
 80017da:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80017de:	211e      	movs	r1, #30
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fef5 	bl	80015d0 <read_register>
 80017e6:	4603      	mov	r3, r0
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80017ec:	2304      	movs	r3, #4
 80017ee:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b0a      	cmp	r3, #10
 80017f4:	d908      	bls.n	8001808 <set_low_data_rate_optimization+0x4c>
 80017f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017fa:	1fd1      	subs	r1, r2, #7
 80017fc:	430b      	orrs	r3, r1
 80017fe:	d103      	bne.n	8001808 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001800:	7ffb      	ldrb	r3, [r7, #31]
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	461a      	mov	r2, r3
 800180c:	2126      	movs	r1, #38	; 0x26
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ff15 	bl	800163e <write_register>
}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bdb0      	pop	{r4, r5, r7, pc}

0800181c <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001824:	2100      	movs	r1, #0
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff7f 	bl	800172a <set_mode>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <lora_mode_receive_single>:

  set_mode(lora, OPMODE_RX_CONTINUOUS);
}

void lora_mode_receive_single(lora_sx1276 *lora)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7d5b      	ldrb	r3, [r3, #21]
 8001840:	461a      	mov	r2, r3
 8001842:	210f      	movs	r1, #15
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fefa 	bl	800163e <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800184a:	22f0      	movs	r2, #240	; 0xf0
 800184c:	2112      	movs	r1, #18
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fef5 	bl	800163e <write_register>

  set_mode(lora, OPMODE_RX_SINGLE);
 8001854:	2106      	movs	r1, #6
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff67 	bl	800172a <set_mode>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <lora_mode_standby>:

void lora_mode_standby(lora_sx1276 *lora)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 800186c:	2101      	movs	r1, #1
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff5b 	bl	800172a <set_mode>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001884:	211d      	movs	r1, #29
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fea2 	bl	80015d0 <read_register>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	461a      	mov	r2, r3
 800189c:	211d      	movs	r1, #29
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fecd 	bl	800163e <write_register>
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10e      	bne.n	80018de <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	d901      	bls.n	80018ca <lora_set_tx_power+0x1e>
      level = 15;
 80018c6:	230f      	movs	r3, #15
 80018c8:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	2109      	movs	r1, #9
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff feb1 	bl	800163e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80018dc:	e02e      	b.n	800193c <lora_set_tx_power+0x90>
    if (level > 20) {
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	2b14      	cmp	r3, #20
 80018e2:	d901      	bls.n	80018e8 <lora_set_tx_power+0x3c>
      level = 20;
 80018e4:	2314      	movs	r3, #20
 80018e6:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d801      	bhi.n	80018f2 <lora_set_tx_power+0x46>
      level = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b11      	cmp	r3, #17
 80018f6:	d90c      	bls.n	8001912 <lora_set_tx_power+0x66>
      level -= 3;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	3b03      	subs	r3, #3
 80018fc:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80018fe:	2287      	movs	r2, #135	; 0x87
 8001900:	214d      	movs	r1, #77	; 0x4d
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fe9b 	bl	800163e <write_register>
      set_OCP(lora, 140);
 8001908:	218c      	movs	r1, #140	; 0x8c
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff20 	bl	8001750 <set_OCP>
 8001910:	e008      	b.n	8001924 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001912:	2284      	movs	r2, #132	; 0x84
 8001914:	214d      	movs	r1, #77	; 0x4d
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fe91 	bl	800163e <write_register>
      set_OCP(lora, 97);
 800191c:	2161      	movs	r1, #97	; 0x61
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff16 	bl	8001750 <set_OCP>
    level -= 2;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	3b02      	subs	r3, #2
 8001928:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	2109      	movs	r1, #9
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fe81 	bl	800163e <write_register>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	04d9      	lsls	r1, r3, #19
 800195e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001962:	04d0      	lsls	r0, r2, #19
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <lora_set_frequency+0x88>)
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	f7ff f98d 	bl	8000c88 <__aeabi_uldivmod>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001976:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	0c02      	lsrs	r2, r0, #16
 8001984:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001988:	0c0b      	lsrs	r3, r1, #16
 800198a:	b2d3      	uxtb	r3, r2
 800198c:	461a      	mov	r2, r3
 800198e:	2106      	movs	r1, #6
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff fe54 	bl	800163e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	0a02      	lsrs	r2, r0, #8
 80019a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80019a8:	0a0b      	lsrs	r3, r1, #8
 80019aa:	b2d3      	uxtb	r3, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	2107      	movs	r1, #7
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fe44 	bl	800163e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80019b6:	7c3b      	ldrb	r3, [r7, #16]
 80019b8:	461a      	mov	r2, r3
 80019ba:	2108      	movs	r1, #8
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f7ff fe3e 	bl	800163e <write_register>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	01e84800 	.word	0x01e84800

080019d0 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d802      	bhi.n	80019e8 <lora_set_spreading_factor+0x18>
    sf = 6;
 80019e2:	2306      	movs	r3, #6
 80019e4:	70fb      	strb	r3, [r7, #3]
 80019e6:	e004      	b.n	80019f2 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d901      	bls.n	80019f2 <lora_set_spreading_factor+0x22>
    sf = 12;
 80019ee:	230c      	movs	r3, #12
 80019f0:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	2b06      	cmp	r3, #6
 80019f6:	d10a      	bne.n	8001a0e <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80019f8:	22c5      	movs	r2, #197	; 0xc5
 80019fa:	2131      	movs	r1, #49	; 0x31
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fe1e 	bl	800163e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001a02:	220c      	movs	r2, #12
 8001a04:	2137      	movs	r1, #55	; 0x37
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fe19 	bl	800163e <write_register>
 8001a0c:	e009      	b.n	8001a22 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001a0e:	22c3      	movs	r2, #195	; 0xc3
 8001a10:	2131      	movs	r1, #49	; 0x31
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fe13 	bl	800163e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001a18:	220a      	movs	r2, #10
 8001a1a:	2137      	movs	r1, #55	; 0x37
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fe0e 	bl	800163e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001a22:	211e      	movs	r1, #30
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fdd3 	bl	80015d0 <read_register>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	b25a      	sxtb	r2, r3
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	461a      	mov	r2, r3
 8001a48:	211e      	movs	r1, #30
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fdf7 	bl	800163e <write_register>

  set_low_data_rate_optimization(lora);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff feb3 	bl	80017bc <set_low_data_rate_optimization>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	2120      	movs	r1, #32
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fde1 	bl	800163e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	2121      	movs	r1, #33	; 0x21
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fdd7 	bl	800163e <write_register>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001aa0:	2142      	movs	r1, #66	; 0x42
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fd94 	bl	80015d0 <read_register>
 8001aa8:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001aba:	2101      	movs	r1, #1
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fd87 	bl	80015d0 <read_register>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d101      	bne.n	8001ad4 <lora_is_transmitting+0x22>
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	e000      	b.n	8001ad6 <lora_is_transmitting+0x24>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff ffdc 	bl	8001ab2 <lora_is_transmitting>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001b00:	2305      	movs	r3, #5
 8001b02:	e02a      	b.n	8001b5a <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001b04:	2101      	movs	r1, #1
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fe0f 	bl	800172a <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f859 	bl	8001bc4 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	7d1b      	ldrb	r3, [r3, #20]
 8001b16:	461a      	mov	r2, r3
 8001b18:	210d      	movs	r1, #13
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fd8f 	bl	800163e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	7d1b      	ldrb	r3, [r3, #20]
 8001b24:	461a      	mov	r2, r3
 8001b26:	210e      	movs	r1, #14
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff fd88 	bl	800163e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	461a      	mov	r2, r3
 8001b32:	2122      	movs	r1, #34	; 0x22
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fd82 	bl	800163e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff fdb0 	bl	80016a6 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <lora_send_packet_base+0x72>
    return LORA_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e004      	b.n	8001b5a <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001b50:	2103      	movs	r1, #3
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fde9 	bl	800172a <set_mode>
  return LORA_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	2302      	movs	r3, #2
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff ffb1 	bl	8001ade <lora_send_packet_base>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8001b8e:	2112      	movs	r1, #18
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fd1d 	bl	80015d0 <read_register>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba0:	b2db      	uxtb	r3, r3
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <lora_enable_interrupt_rx_done>:

  return lora_receive_packet(lora, buffer, buffer_len, error);
}

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2140      	movs	r1, #64	; 0x40
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fd41 	bl	800163e <write_register>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8001bcc:	2208      	movs	r2, #8
 8001bce:	2112      	movs	r1, #18
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fd34 	bl	800163e <write_register>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001bfe:	6a3a      	ldr	r2, [r7, #32]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1c:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f7ff ff3a 	bl	8001a98 <lora_version>
 8001c24:	4603      	mov	r3, r0
 8001c26:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d001      	beq.n	8001c32 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	e031      	b.n	8001c96 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fdf2 	bl	800181c <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fdef 	bl	800181c <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff fe7e 	bl	8001944 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8001c48:	2107      	movs	r1, #7
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff fec0 	bl	80019d0 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001c50:	210a      	movs	r1, #10
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff ff03 	bl	8001a5e <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fe0f 	bl	800187c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001c5e:	210c      	movs	r1, #12
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff fcb5 	bl	80015d0 <read_register>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001c6a:	7dbb      	ldrb	r3, [r7, #22]
 8001c6c:	f043 0303 	orr.w	r3, r3, #3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	210c      	movs	r1, #12
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fce1 	bl	800163e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	2126      	movs	r1, #38	; 0x26
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7ff fcdc 	bl	800163e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001c86:	2111      	movs	r1, #17
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fe0f 	bl	80018ac <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff fde8 	bl	8001864 <lora_mode_standby>

  return LORA_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <lora_infINIT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* lora initiation helper, executes up to 100 times */
uint8_t lora_infINIT(int init_ctr) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	6078      	str	r0, [r7, #4]
	if (init_ctr < 100) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b63      	cmp	r3, #99	; 0x63
 8001cac:	dc18      	bgt.n	8001ce0 <lora_infINIT+0x40>
		uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8001cae:	a313      	add	r3, pc, #76	; (adr r3, 8001cfc <lora_infINIT+0x5c>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	e9cd 2300 	strd	r2, r3, [sp]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <lora_infINIT+0x50>)
 8001cbc:	490d      	ldr	r1, [pc, #52]	; (8001cf4 <lora_infINIT+0x54>)
 8001cbe:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <lora_infINIT+0x58>)
 8001cc0:	f7ff ff8d 	bl	8001bde <lora_init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
		if (res != LORA_OK) {
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <lora_infINIT+0x3c>
			// Initialization failed
			// retry lol
			return lora_infINIT(init_ctr + 1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ffe4 	bl	8001ca0 <lora_infINIT>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	e002      	b.n	8001ce2 <lora_infINIT+0x42>
	  	} else {
	  		return LORA_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <lora_infINIT+0x42>
	  	}
	} else {
		return LORA_ERROR;
 8001ce0:	2304      	movs	r3, #4
	}
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	f3af 8000 	nop.w
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	20000490 	.word	0x20000490
 8001cf8:	200005dc 	.word	0x200005dc
 8001cfc:	36e55840 	.word	0x36e55840
 8001d00:	00000000 	.word	0x00000000

08001d04 <IMUcallback>:

/* called @ 200Hz, updates step count based on IMU data */
inline void IMUcallback(void) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
//	grav_vec(&hi2c3, &gravity_vec.x);
//	input_step_data(gravity_vec, acc_vec);

	/* real good super awesome step count code! */
	vec_raw_t acc_vec;
	lin_acc_vec_raw(&hi2c3, &acc_vec.x);
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480b      	ldr	r0, [pc, #44]	; (8001d3c <IMUcallback+0x38>)
 8001d10:	f7ff fa2b 	bl	800116a <lin_acc_vec_raw>
	processSample(prog_time, acc_vec.x, acc_vec.y, acc_vec.z);
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <IMUcallback+0x3c>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001d1c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d24:	f001 fb18 	bl	8003358 <processSample>
	prog_time += STEP_PERIOD;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <IMUcallback+0x3c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3332      	adds	r3, #50	; 0x32
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <IMUcallback+0x3c>)
 8001d30:	6013      	str	r3, [r2, #0]
//	num_steps = getSteps();
//	printf("steps: %i\n\r", num_steps);
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000032c 	.word	0x2000032c
 8001d40:	200005f8 	.word	0x200005f8

08001d44 <IMU_infINIT>:
          //IMU_infINIT(&hi2c3);
void IMU_infINIT(I2C_HandleTypeDef *hi2c) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	int num_tries = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
	while (init_IMU(hi2c)) {
 8001d50:	e005      	b.n	8001d5e <IMU_infINIT+0x1a>
		//HAL_Delay(100);
		++num_tries;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
		if (num_tries > 100) return;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	dc06      	bgt.n	8001d6c <IMU_infINIT+0x28>
	while (init_IMU(hi2c)) {
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff f988 	bl	8001074 <init_IMU>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f3      	bne.n	8001d52 <IMU_infINIT+0xe>
 8001d6a:	e000      	b.n	8001d6e <IMU_infINIT+0x2a>
		if (num_tries > 100) return;
 8001d6c:	bf00      	nop
	}
}
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <loraCallback>:
	}

}

/* loraCallback(): called after gps is read (5s period) to send relevant data */
inline void loraCallback(void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	// possibly send 5 seconds late
	// before next* gps poll in order
	// to send at a precise times
	// --> 5 second delay should not have large effect

	lora_data.speed = (float)velocity;//get_velocity();	// speed from gps file
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <loraCallback+0x9c>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff31 	bl	8000be8 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <loraCallback+0xa0>)
 8001d8a:	6013      	str	r3, [r2, #0]
	lora_data.distance = (float)p2p_dist;//get_distance();	// distance from gps file
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <loraCallback+0xa4>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff27 	bl	8000be8 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <loraCallback+0xa0>)
 8001d9e:	6053      	str	r3, [r2, #4]
	lora_data.heart_rate = get_BPM();	// bpm from pulse sensor file
 8001da0:	f7ff fbbc 	bl	800151c <get_BPM>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <loraCallback+0xa0>)
 8001da8:	6093      	str	r3, [r2, #8]
	lora_data.steps = getSteps();	// step count from steps file
 8001daa:	f001 faef 	bl	800338c <getSteps>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <loraCallback+0xa0>)
 8001db4:	60da      	str	r2, [r3, #12]
	lora_send_packet(&lora, (uint8_t*)&lora_data, sizeof(lora_data));
 8001db6:	2210      	movs	r2, #16
 8001db8:	4916      	ldr	r1, [pc, #88]	; (8001e14 <loraCallback+0xa0>)
 8001dba:	4818      	ldr	r0, [pc, #96]	; (8001e1c <loraCallback+0xa8>)
 8001dbc:	f7ff fed1 	bl	8001b62 <lora_send_packet>
	lora_mode_receive_single(&lora);
 8001dc0:	4816      	ldr	r0, [pc, #88]	; (8001e1c <loraCallback+0xa8>)
 8001dc2:	f7ff fd37 	bl	8001834 <lora_mode_receive_single>

	/* debug code for use without lora */
	printf("sent to Base Station:\n\r");
 8001dc6:	4816      	ldr	r0, [pc, #88]	; (8001e20 <loraCallback+0xac>)
 8001dc8:	f00a ffd4 	bl	800cd74 <iprintf>
	printf("\t\tspeed: \t%f m/s\n\r", lora_data.speed);
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <loraCallback+0xa0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbb9 	bl	8000548 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4812      	ldr	r0, [pc, #72]	; (8001e24 <loraCallback+0xb0>)
 8001ddc:	f00a ffca 	bl	800cd74 <iprintf>
	printf("\tdistance: \t%f meters\n\r", lora_data.distance);
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <loraCallback+0xa0>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbaf 	bl	8000548 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	480e      	ldr	r0, [pc, #56]	; (8001e28 <loraCallback+0xb4>)
 8001df0:	f00a ffc0 	bl	800cd74 <iprintf>
	printf("\t\tpulse: \t%i bpm\n\r", lora_data.heart_rate);
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <loraCallback+0xa0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480c      	ldr	r0, [pc, #48]	; (8001e2c <loraCallback+0xb8>)
 8001dfc:	f00a ffba 	bl	800cd74 <iprintf>
	printf("\t\tsteps: \t%i steps\n\n\r", lora_data.steps);
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <loraCallback+0xa0>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4619      	mov	r1, r3
 8001e06:	480a      	ldr	r0, [pc, #40]	; (8001e30 <loraCallback+0xbc>)
 8001e08:	f00a ffb4 	bl	800cd74 <iprintf>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000670 	.word	0x20000670
 8001e14:	20000690 	.word	0x20000690
 8001e18:	20000668 	.word	0x20000668
 8001e1c:	200005dc 	.word	0x200005dc
 8001e20:	08010d00 	.word	0x08010d00
 8001e24:	08010d18 	.word	0x08010d18
 8001e28:	08010d2c 	.word	0x08010d2c
 8001e2c:	08010d44 	.word	0x08010d44
 8001e30:	08010d58 	.word	0x08010d58

08001e34 <HAL_TIM_PeriodElapsedCallback>:


//static char gps_flag2 = 0;
/* timer checker */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_PeriodElapsedCallback+0x1a>
		IMUcallback();
 8001e44:	f7ff ff5e 	bl	8001d04 <IMUcallback>
		updatePulseSensor();
 8001e48:	f7ff f9e0 	bl	800120c <updatePulseSensor>
		//gps_flag2 = 1;

		//HAL_NVIC_EnableIRQ(USART1_IRQn);
		//vibratorCallback();
	}
}
 8001e4c:	e006      	b.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x28>
	} else if (htim == &htim7) {
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d102      	bne.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x28>
		gps_flag = 1;
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000540 	.word	0x20000540
 8001e68:	2000058c 	.word	0x2000058c
 8001e6c:	200005f4 	.word	0x200005f4

08001e70 <HAL_UART_RxCpltCallback>:
int j = 0;
int done =0;
int go = 0;
int gps_ctr = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]


 	//UpdateGps_IT();
	//HAL_UART_Receive_IT(&huart1, &rx_data, 1);

	if (go){
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_UART_RxCpltCallback+0xe4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d04d      	beq.n	8001f1c <HAL_UART_RxCpltCallback+0xac>
		buf[j++] = a[0];
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	4934      	ldr	r1, [pc, #208]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001e88:	600a      	str	r2, [r1, #0]
 8001e8a:	4a34      	ldr	r2, [pc, #208]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001e8c:	7811      	ldrb	r1, [r2, #0]
 8001e8e:	4a34      	ldr	r2, [pc, #208]	; (8001f60 <HAL_UART_RxCpltCallback+0xf0>)
 8001e90:	54d1      	strb	r1, [r2, r3]
		if (a[0] == '\n'){
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b0a      	cmp	r3, #10
 8001e98:	d154      	bne.n	8001f44 <HAL_UART_RxCpltCallback+0xd4>
			buf[j++] = a[0];
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	492d      	ldr	r1, [pc, #180]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001ea2:	600a      	str	r2, [r1, #0]
 8001ea4:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001ea6:	7811      	ldrb	r1, [r2, #0]
 8001ea8:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_UART_RxCpltCallback+0xf0>)
 8001eaa:	54d1      	strb	r1, [r2, r3]

			done = 1;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_UART_RxCpltCallback+0xf4>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
			go = 0;
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_UART_RxCpltCallback+0xe4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
			//printf("\n\r");
			if (j < 50) {
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b31      	cmp	r3, #49	; 0x31
 8001ebe:	dc29      	bgt.n	8001f14 <HAL_UART_RxCpltCallback+0xa4>
				j = 0;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
				done = 0;
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_UART_RxCpltCallback+0xf4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 128; ++i){
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e007      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0x72>
					buf[i] = 0;
 8001ed2:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_UART_RxCpltCallback+0xf0>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 128; ++i){
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ee6:	ddf4      	ble.n	8001ed2 <HAL_UART_RxCpltCallback+0x62>
				}
				printf("bad gps data: retrying\n\r");
 8001ee8:	481f      	ldr	r0, [pc, #124]	; (8001f68 <HAL_UART_RxCpltCallback+0xf8>)
 8001eea:	f00a ff43 	bl	800cd74 <iprintf>
				if (gps_ctr < 12){
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_UART_RxCpltCallback+0xfc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b0b      	cmp	r3, #11
 8001ef4:	dc0a      	bgt.n	8001f0c <HAL_UART_RxCpltCallback+0x9c>
					HAL_UART_Receive_IT(&huart1, a, 1);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4918      	ldr	r1, [pc, #96]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001efa:	481d      	ldr	r0, [pc, #116]	; (8001f70 <HAL_UART_RxCpltCallback+0x100>)
 8001efc:	f007 fe3c 	bl	8009b78 <HAL_UART_Receive_IT>
					gps_ctr++;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_UART_RxCpltCallback+0xfc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_UART_RxCpltCallback+0xfc>)
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01b      	b.n	8001f44 <HAL_UART_RxCpltCallback+0xd4>
				}
				else {
					gps_ctr = 0;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_UART_RxCpltCallback+0xfc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
					return;
 8001f12:	e01c      	b.n	8001f4e <HAL_UART_RxCpltCallback+0xde>
				}

			}
			else{
				j = 0;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
				return;
 8001f1a:	e018      	b.n	8001f4e <HAL_UART_RxCpltCallback+0xde>
			}
		}

	}
	else if (a[0] == '$' && j == 0) {
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b24      	cmp	r3, #36	; 0x24
 8001f22:	d10f      	bne.n	8001f44 <HAL_UART_RxCpltCallback+0xd4>
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_UART_RxCpltCallback+0xd4>
		//printf("IN CALLBACK\n\r");
		buf[j++] = a[0];
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	4909      	ldr	r1, [pc, #36]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001f34:	600a      	str	r2, [r1, #0]
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001f38:	7811      	ldrb	r1, [r2, #0]
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_UART_RxCpltCallback+0xf0>)
 8001f3c:	54d1      	strb	r1, [r2, r3]
		go = 1;
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_UART_RxCpltCallback+0xe4>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(&huart1, a, 1);
 8001f44:	2201      	movs	r2, #1
 8001f46:	4905      	ldr	r1, [pc, #20]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <HAL_UART_RxCpltCallback+0x100>)
 8001f4a:	f007 fe15 	bl	8009b78 <HAL_UART_Receive_IT>
}
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000734 	.word	0x20000734
 8001f58:	2000072c 	.word	0x2000072c
 8001f5c:	200006a0 	.word	0x200006a0
 8001f60:	200006ac 	.word	0x200006ac
 8001f64:	20000730 	.word	0x20000730
 8001f68:	08010d70 	.word	0x08010d70
 8001f6c:	20000738 	.word	0x20000738
 8001f70:	20000408 	.word	0x20000408
 8001f74:	00000000 	.word	0x00000000

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f7c:	b094      	sub	sp, #80	; 0x50
 8001f7e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f80:	f002 f819 	bl	8003fb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f84:	f000 fabe 	bl	8002504 <SystemClock_Config>
  HAL_Delay(1000);
 8001f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f8c:	f002 f888 	bl	80040a0 <HAL_Delay>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f90:	f000 fd3a 	bl	8002a08 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001f94:	f000 fcc8 	bl	8002928 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001f98:	f000 fbc8 	bl	800272c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001f9c:	f000 faf8 	bl	8002590 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001fa0:	f000 fb98 	bl	80026d4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001fa4:	f000 fbf2 	bl	800278c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001fa8:	f000 fc2e 	bl	8002808 <MX_TIM1_Init>
  MX_TIM7_Init();
 8001fac:	f000 fcf4 	bl	8002998 <MX_TIM7_Init>
  MX_I2C3_Init();
 8001fb0:	f000 fb52 	bl	8002658 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  printf("before init\r\n");
 8001fb4:	4897      	ldr	r0, [pc, #604]	; (8002214 <main+0x29c>)
 8001fb6:	f00a ff4b 	bl	800ce50 <puts>

  initPulseSensor(&hadc1);
 8001fba:	4897      	ldr	r0, [pc, #604]	; (8002218 <main+0x2a0>)
 8001fbc:	f7ff f916 	bl	80011ec <initPulseSensor>
  IMU_infINIT(&hi2c3);
 8001fc0:	4896      	ldr	r0, [pc, #600]	; (800221c <main+0x2a4>)
 8001fc2:	f7ff febf 	bl	8001d44 <IMU_infINIT>
  printf("after imu init\r\n");
 8001fc6:	4896      	ldr	r0, [pc, #600]	; (8002220 <main+0x2a8>)
 8001fc8:	f00a ff42 	bl	800ce50 <puts>
  uint8_t res = lora_infINIT(0);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fe67 	bl	8001ca0 <lora_infINIT>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (res != LORA_OK) {
 8001fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <main+0x6e>
	  // restart whole system idk
	  printf("bad lora ret\r\n");
 8001fe0:	4890      	ldr	r0, [pc, #576]	; (8002224 <main+0x2ac>)
 8001fe2:	f00a ff35 	bl	800ce50 <puts>
  }
  initAlgo();
 8001fe6:	f001 f96b 	bl	80032c0 <initAlgo>

  printf("after init\r\n");
 8001fea:	488f      	ldr	r0, [pc, #572]	; (8002228 <main+0x2b0>)
 8001fec:	f00a ff30 	bl	800ce50 <puts>

  //GPS INIT, just calls HAL_UART_Receive_IT(&huart1, &rx_data, 1) to start
    //GPS_Init();

  // start your engines!
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	488e      	ldr	r0, [pc, #568]	; (800222c <main+0x2b4>)
 8001ff4:	f006 fdc8 	bl	8008b88 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001ff8:	488d      	ldr	r0, [pc, #564]	; (8002230 <main+0x2b8>)
 8001ffa:	f006 fd19 	bl	8008a30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001ffe:	488d      	ldr	r0, [pc, #564]	; (8002234 <main+0x2bc>)
 8002000:	f006 fd16 	bl	8008a30 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buzz = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Wait at least 5 seconds before clearing buzzer
  uint8_t wait = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  lora_enable_interrupt_rx_done(&lora);
 8002010:	4889      	ldr	r0, [pc, #548]	; (8002238 <main+0x2c0>)
 8002012:	f7ff fdca 	bl	8001baa <lora_enable_interrupt_rx_done>
  lora_mode_receive_single(&lora);
 8002016:	4888      	ldr	r0, [pc, #544]	; (8002238 <main+0x2c0>)
 8002018:	f7ff fc0c 	bl	8001834 <lora_mode_receive_single>
  {
	  if (gps_flag){

	  }
	  /* GPS Polling */
	  if (gps_flag) {
 800201c:	4b87      	ldr	r3, [pc, #540]	; (800223c <main+0x2c4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d022      	beq.n	800206a <main+0xf2>
		  //updateGPS();

		  gps_flag = 0;
 8002024:	4b85      	ldr	r3, [pc, #532]	; (800223c <main+0x2c4>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
		  loraCallback(); // transmit lora data after GPS bottleneck finishes
 800202a:	f7ff fea3 	bl	8001d74 <loraCallback>
		  HAL_UART_Receive_IT(&huart1, a, 1);
 800202e:	2201      	movs	r2, #1
 8002030:	4983      	ldr	r1, [pc, #524]	; (8002240 <main+0x2c8>)
 8002032:	4884      	ldr	r0, [pc, #528]	; (8002244 <main+0x2cc>)
 8002034:	f007 fda0 	bl	8009b78 <HAL_UART_Receive_IT>
      if (buzz && !wait) {
 8002038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <main+0xe4>
 8002040:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <main+0xe4>
		  	TIM1->CCR1 = 0;
 8002048:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <main+0x2d0>)
 800204a:	2200      	movs	r2, #0
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
        buzz = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        wait = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800205a:	e006      	b.n	800206a <main+0xf2>
		  } else if (buzz) {
 800205c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <main+0xf2>
			  wait = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		  }
    }

    /* poll lora receipt */
    if(LoRaRecieve == 1){
 800206a:	4b78      	ldr	r3, [pc, #480]	; (800224c <main+0x2d4>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10e      	bne.n	8002090 <main+0x118>
	  		  //Get data
	  //		  	  lora_mode_receive_continuous(&lora);

//	  		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
      if (!lora_is_packet_available(&lora)) {
 8002072:	4871      	ldr	r0, [pc, #452]	; (8002238 <main+0x2c0>)
 8002074:	f7ff fd87 	bl	8001b86 <lora_is_packet_available>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d108      	bne.n	8002090 <main+0x118>
        LoRaRecieve = 0;
 800207e:	4b73      	ldr	r3, [pc, #460]	; (800224c <main+0x2d4>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
        buzz = 1;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        lora_mode_receive_single(&lora);
 800208a:	486b      	ldr	r0, [pc, #428]	; (8002238 <main+0x2c0>)
 800208c:	f7ff fbd2 	bl	8001834 <lora_mode_receive_single>
      }

	  }

    /* poll buzzer */
	  if (buzz) {
 8002090:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <main+0x128>
		  TIM1->CCR1 = 65534;
 8002098:	4b6b      	ldr	r3, [pc, #428]	; (8002248 <main+0x2d0>)
 800209a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800209e:	635a      	str	r2, [r3, #52]	; 0x34
	  }



	  if (done){ //If gps buffer is full, is only possible every 5 seconds
 80020a0:	4b6b      	ldr	r3, [pc, #428]	; (8002250 <main+0x2d8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0b9      	beq.n	800201c <main+0xa4>
		  done = 0;
 80020a8:	4b69      	ldr	r3, [pc, #420]	; (8002250 <main+0x2d8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 128; ++i){
 80020ae:	2300      	movs	r3, #0
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
 80020b2:	e009      	b.n	80020c8 <main+0x150>
			  printf("%c", buf[i]);
 80020b4:	4a67      	ldr	r2, [pc, #412]	; (8002254 <main+0x2dc>)
 80020b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f00a fe6b 	bl	800cd98 <putchar>
		  for (int i = 0; i < 128; ++i){
 80020c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c4:	3301      	adds	r3, #1
 80020c6:	643b      	str	r3, [r7, #64]	; 0x40
 80020c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ca:	2b7f      	cmp	r3, #127	; 0x7f
 80020cc:	ddf2      	ble.n	80020b4 <main+0x13c>
		  }
		  printf("\n");
 80020ce:	200a      	movs	r0, #10
 80020d0:	f00a fe62 	bl	800cd98 <putchar>
		  for (int i = 0; i < 6; ++i){
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	e00b      	b.n	80020f2 <main+0x17a>
			  temp[i] = buf[i];
 80020da:	4a5e      	ldr	r2, [pc, #376]	; (8002254 <main+0x2dc>)
 80020dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020de:	4413      	add	r3, r2
 80020e0:	7819      	ldrb	r1, [r3, #0]
 80020e2:	4a5d      	ldr	r2, [pc, #372]	; (8002258 <main+0x2e0>)
 80020e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e6:	4413      	add	r3, r2
 80020e8:	460a      	mov	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 6; ++i){
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	3301      	adds	r3, #1
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	ddf0      	ble.n	80020da <main+0x162>
		  }
		  temp[6] = '\0';
 80020f8:	4b57      	ldr	r3, [pc, #348]	; (8002258 <main+0x2e0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	719a      	strb	r2, [r3, #6]

		  // If we have string we want, disable interrupt, do calc
		  if (!strncmp((char*)temp, "$GPGGA", 6)){
 80020fe:	2206      	movs	r2, #6
 8002100:	4956      	ldr	r1, [pc, #344]	; (800225c <main+0x2e4>)
 8002102:	4855      	ldr	r0, [pc, #340]	; (8002258 <main+0x2e0>)
 8002104:	f00a feac 	bl	800ce60 <strncmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 81ca 	bne.w	80024a4 <main+0x52c>
			  char lat_ns; //latitude north south
			  char lon[9]; //same as above bit longitude
			  char lon_ew;
			  char time[2];//only take the seconds

			  for (int i = 11; i < 13; ++i){
 8002110:	230b      	movs	r3, #11
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
 8002114:	e00c      	b.n	8002130 <main+0x1b8>
				  time[i-11] = buf[i];
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	3b0b      	subs	r3, #11
 800211a:	494e      	ldr	r1, [pc, #312]	; (8002254 <main+0x2dc>)
 800211c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800211e:	440a      	add	r2, r1
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	3348      	adds	r3, #72	; 0x48
 8002124:	443b      	add	r3, r7
 8002126:	f803 2c44 	strb.w	r2, [r3, #-68]
			  for (int i = 11; i < 13; ++i){
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	3301      	adds	r3, #1
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	2b0c      	cmp	r3, #12
 8002134:	ddef      	ble.n	8002116 <main+0x19e>

			  }
			  for (int i = 18; i < 27; i++){
 8002136:	2312      	movs	r3, #18
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
 800213a:	e02a      	b.n	8002192 <main+0x21a>
				  lat[i-18] = buf[i];
 800213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213e:	3b12      	subs	r3, #18
 8002140:	4944      	ldr	r1, [pc, #272]	; (8002254 <main+0x2dc>)
 8002142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002144:	440a      	add	r2, r1
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	3348      	adds	r3, #72	; 0x48
 800214a:	443b      	add	r3, r7
 800214c:	f803 2c34 	strb.w	r2, [r3, #-52]
				  if (lat[i-18] == ',' || lat[i-18] == 'N'){
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	3b12      	subs	r3, #18
 8002154:	3348      	adds	r3, #72	; 0x48
 8002156:	443b      	add	r3, r7
 8002158:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800215c:	2b2c      	cmp	r3, #44	; 0x2c
 800215e:	d007      	beq.n	8002170 <main+0x1f8>
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002162:	3b12      	subs	r3, #18
 8002164:	3348      	adds	r3, #72	; 0x48
 8002166:	443b      	add	r3, r7
 8002168:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800216c:	2b4e      	cmp	r3, #78	; 0x4e
 800216e:	d10d      	bne.n	800218c <main+0x214>
					  p2p_dist = 0;
 8002170:	493b      	ldr	r1, [pc, #236]	; (8002260 <main+0x2e8>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9c1 2300 	strd	r2, r3, [r1]
					  velocity = 0;
 800217e:	4939      	ldr	r1, [pc, #228]	; (8002264 <main+0x2ec>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9c1 2300 	strd	r2, r3, [r1]
			  for (int i = 18; i < 27; i++){
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	3301      	adds	r3, #1
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	2b1a      	cmp	r3, #26
 8002196:	ddd1      	ble.n	800213c <main+0x1c4>
				  }
			  }
			  lat_ns = buf[28];
 8002198:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <main+0x2dc>)
 800219a:	7f1b      	ldrb	r3, [r3, #28]
 800219c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  for (int i = 30; i < 40; i++){
 80021a0:	231e      	movs	r3, #30
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
 80021a4:	e02a      	b.n	80021fc <main+0x284>
				  lon[i-30] = buf[i];
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	3b1e      	subs	r3, #30
 80021aa:	492a      	ldr	r1, [pc, #168]	; (8002254 <main+0x2dc>)
 80021ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ae:	440a      	add	r2, r1
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	3348      	adds	r3, #72	; 0x48
 80021b4:	443b      	add	r3, r7
 80021b6:	f803 2c40 	strb.w	r2, [r3, #-64]
				  if (lon[i-30] == ',' || lon[i-30] == 'N'){
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	3b1e      	subs	r3, #30
 80021be:	3348      	adds	r3, #72	; 0x48
 80021c0:	443b      	add	r3, r7
 80021c2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80021c6:	2b2c      	cmp	r3, #44	; 0x2c
 80021c8:	d007      	beq.n	80021da <main+0x262>
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	3b1e      	subs	r3, #30
 80021ce:	3348      	adds	r3, #72	; 0x48
 80021d0:	443b      	add	r3, r7
 80021d2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80021d6:	2b4e      	cmp	r3, #78	; 0x4e
 80021d8:	d10d      	bne.n	80021f6 <main+0x27e>
					  p2p_dist = 0;
 80021da:	4921      	ldr	r1, [pc, #132]	; (8002260 <main+0x2e8>)
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9c1 2300 	strd	r2, r3, [r1]
					  velocity = 0;
 80021e8:	491e      	ldr	r1, [pc, #120]	; (8002264 <main+0x2ec>)
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
			  for (int i = 30; i < 40; i++){
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	3301      	adds	r3, #1
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	2b27      	cmp	r3, #39	; 0x27
 8002200:	ddd1      	ble.n	80021a6 <main+0x22e>

				  }
			  }
			  lon_ew = buf[41];
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <main+0x2dc>)
 8002204:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002208:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			  for (int i = 0; i < 128; ++i){
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002210:	e032      	b.n	8002278 <main+0x300>
 8002212:	bf00      	nop
 8002214:	08010d8c 	.word	0x08010d8c
 8002218:	200002c8 	.word	0x200002c8
 800221c:	2000032c 	.word	0x2000032c
 8002220:	08010d9c 	.word	0x08010d9c
 8002224:	08010dac 	.word	0x08010dac
 8002228:	08010dbc 	.word	0x08010dbc
 800222c:	200004f4 	.word	0x200004f4
 8002230:	20000540 	.word	0x20000540
 8002234:	2000058c 	.word	0x2000058c
 8002238:	200005dc 	.word	0x200005dc
 800223c:	200005f4 	.word	0x200005f4
 8002240:	200006a0 	.word	0x200006a0
 8002244:	20000408 	.word	0x20000408
 8002248:	40012c00 	.word	0x40012c00
 800224c:	200005d8 	.word	0x200005d8
 8002250:	20000730 	.word	0x20000730
 8002254:	200006ac 	.word	0x200006ac
 8002258:	20000688 	.word	0x20000688
 800225c:	08010dc8 	.word	0x08010dc8
 8002260:	20000668 	.word	0x20000668
 8002264:	20000670 	.word	0x20000670
				  buf[i] = 0;
 8002268:	4a9d      	ldr	r2, [pc, #628]	; (80024e0 <main+0x568>)
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	4413      	add	r3, r2
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 128; ++i){
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	3301      	adds	r3, #1
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	2b7f      	cmp	r3, #127	; 0x7f
 800227c:	ddf4      	ble.n	8002268 <main+0x2f0>
			  }
			  GPS2.time_sec = strtof(time, NULL);
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f00a fc6e 	bl	800cb64 <strtof>
 8002288:	eef0 7a40 	vmov.f32	s15, s0
 800228c:	4b95      	ldr	r3, [pc, #596]	; (80024e4 <main+0x56c>)
 800228e:	edc3 7a04 	vstr	s15, [r3, #16]
			  int d_time = abs(GPS2.time_sec-GPS2.prev_time_sec);
 8002292:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <main+0x56c>)
 8002294:	ed93 7a04 	vldr	s14, [r3, #16]
 8002298:	4b92      	ldr	r3, [pc, #584]	; (80024e4 <main+0x56c>)
 800229a:	edd3 7a05 	vldr	s15, [r3, #20]
 800229e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a6:	ee17 3a90 	vmov	r3, s15
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bfb8      	it	lt
 80022ae:	425b      	neglt	r3, r3
 80022b0:	623b      	str	r3, [r7, #32]
			  //printf("bruh %f\n\r", (double)strtof(lat, NULL));
			  //printf("bruh2 %f\n\r", (double)strtof(lon, NULL));
			  GPS2.dec_latitude = GPS_nmea_to_dec(strtof(lat, NULL), lat_ns)*(PI/180);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00a fc53 	bl	800cb64 <strtof>
 80022be:	eef0 7a40 	vmov.f32	s15, s0
 80022c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022c6:	4618      	mov	r0, r3
 80022c8:	eeb0 0a67 	vmov.f32	s0, s15
 80022cc:	f7ff f932 	bl	8001534 <GPS_nmea_to_dec>
 80022d0:	ee10 3a10 	vmov	r3, s0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f937 	bl	8000548 <__aeabi_f2d>
 80022da:	a37d      	add	r3, pc, #500	; (adr r3, 80024d0 <main+0x558>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fe f98a 	bl	80005f8 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fc7c 	bl	8000be8 <__aeabi_d2f>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4a7c      	ldr	r2, [pc, #496]	; (80024e4 <main+0x56c>)
 80022f4:	6053      	str	r3, [r2, #4]
			  GPS2.dec_longitude = GPS_nmea_to_dec(strtof(lon, NULL), lon_ew)*(PI/180);
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00a fc31 	bl	800cb64 <strtof>
 8002302:	eef0 7a40 	vmov.f32	s15, s0
 8002306:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800230a:	4618      	mov	r0, r3
 800230c:	eeb0 0a67 	vmov.f32	s0, s15
 8002310:	f7ff f910 	bl	8001534 <GPS_nmea_to_dec>
 8002314:	ee10 3a10 	vmov	r3, s0
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f915 	bl	8000548 <__aeabi_f2d>
 800231e:	a36c      	add	r3, pc, #432	; (adr r3, 80024d0 <main+0x558>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe f968 	bl	80005f8 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe fc5a 	bl	8000be8 <__aeabi_d2f>
 8002334:	4603      	mov	r3, r0
 8002336:	4a6b      	ldr	r2, [pc, #428]	; (80024e4 <main+0x56c>)
 8002338:	6013      	str	r3, [r2, #0]

			  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <main+0x56c>)
 800233c:	ed93 7a00 	vldr	s14, [r3]
 8002340:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <main+0x56c>)
 8002342:	edd3 7a02 	vldr	s15, [r3, #8]
 8002346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234a:	ee17 0a90 	vmov	r0, s15
 800234e:	f7fe f8fb 	bl	8000548 <__aeabi_f2d>
 8002352:	4604      	mov	r4, r0
 8002354:	460d      	mov	r5, r1
					  (cos(((double)GPS2.dec_latitude+(double)GPS2.dec_latitude_prev)/2));
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <main+0x56c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f8f4 	bl	8000548 <__aeabi_f2d>
 8002360:	4680      	mov	r8, r0
 8002362:	4689      	mov	r9, r1
 8002364:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <main+0x56c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8ed 	bl	8000548 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4640      	mov	r0, r8
 8002374:	4649      	mov	r1, r9
 8002376:	f7fd ff89 	bl	800028c <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800238a:	f7fe fa5f 	bl	800084c <__aeabi_ddiv>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	ec43 2b17 	vmov	d7, r2, r3
 8002396:	eeb0 0a47 	vmov.f32	s0, s14
 800239a:	eef0 0a67 	vmov.f32	s1, s15
 800239e:	f00d fb67 	bl	800fa70 <cos>
 80023a2:	ec53 2b10 	vmov	r2, r3, d0
			  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 80023a6:	4620      	mov	r0, r4
 80023a8:	4629      	mov	r1, r5
 80023aa:	f7fe f925 	bl	80005f8 <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	494d      	ldr	r1, [pc, #308]	; (80024e8 <main+0x570>)
 80023b4:	e9c1 2300 	strd	r2, r3, [r1]

			  y_cord = (double)(GPS2.dec_latitude - GPS2.dec_latitude_prev);
 80023b8:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <main+0x56c>)
 80023ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80023be:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <main+0x56c>)
 80023c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80023c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c8:	ee17 0a90 	vmov	r0, s15
 80023cc:	f7fe f8bc 	bl	8000548 <__aeabi_f2d>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4945      	ldr	r1, [pc, #276]	; (80024ec <main+0x574>)
 80023d6:	e9c1 2300 	strd	r2, r3, [r1]

			  //printf("dec1 %f",x_cord);
			  //printf("dec2 %f",y_cord);
			  p2p_dist = sqrt(x_cord*x_cord + y_cord*y_cord)*6371000;
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <main+0x570>)
 80023dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <main+0x570>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f907 	bl	80005f8 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4614      	mov	r4, r2
 80023f0:	461d      	mov	r5, r3
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <main+0x574>)
 80023f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f8:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <main+0x574>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fe f8fb 	bl	80005f8 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	f7fd ff3f 	bl	800028c <__adddf3>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	ec43 2b17 	vmov	d7, r2, r3
 8002416:	eeb0 0a47 	vmov.f32	s0, s14
 800241a:	eef0 0a67 	vmov.f32	s1, s15
 800241e:	f00d faf9 	bl	800fa14 <sqrt>
 8002422:	ec51 0b10 	vmov	r0, r1, d0
 8002426:	a32c      	add	r3, pc, #176	; (adr r3, 80024d8 <main+0x560>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	492e      	ldr	r1, [pc, #184]	; (80024f0 <main+0x578>)
 8002436:	e9c1 2300 	strd	r2, r3, [r1]
			  velocity = p2p_dist/ d_time;// m/s, timer is set for 5 sec
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <main+0x578>)
 800243c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002440:	6a38      	ldr	r0, [r7, #32]
 8002442:	f7fe f86f 	bl	8000524 <__aeabi_i2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4620      	mov	r0, r4
 800244c:	4629      	mov	r1, r5
 800244e:	f7fe f9fd 	bl	800084c <__aeabi_ddiv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <main+0x57c>)
 8002458:	e9c1 2300 	strd	r2, r3, [r1]
			  if (d_time == 0){
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <main+0x4f8>
				  velocity = 0;
 8002462:	4924      	ldr	r1, [pc, #144]	; (80024f4 <main+0x57c>)
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  printf("p2p: %f\nmeter/sec: %f\n\r", p2p_dist,velocity);
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <main+0x578>)
 8002472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <main+0x57c>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	e9cd 2300 	strd	r2, r3, [sp]
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	481c      	ldr	r0, [pc, #112]	; (80024f8 <main+0x580>)
 8002486:	f00a fc75 	bl	800cd74 <iprintf>
			  //printf("Minute Per Mile: %f\n\r", .08333/(p2p_dist/1609.3));
			  GPS2.dec_latitude_prev = GPS2.dec_latitude;
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <main+0x56c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <main+0x56c>)
 8002490:	60d3      	str	r3, [r2, #12]
			  GPS2.dec_longitude_prev = GPS2.dec_longitude;
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <main+0x56c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <main+0x56c>)
 8002498:	6093      	str	r3, [r2, #8]
			  GPS2.prev_time_sec = GPS2.time_sec;
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <main+0x56c>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <main+0x56c>)
 80024a0:	6153      	str	r3, [r2, #20]
 80024a2:	e004      	b.n	80024ae <main+0x536>
			  //HAL_NVIC_DisableIRQ(USART1_IRQn);

		  }
		  else {
			  HAL_UART_Receive_IT(&huart1, a, 1);
 80024a4:	2201      	movs	r2, #1
 80024a6:	4915      	ldr	r1, [pc, #84]	; (80024fc <main+0x584>)
 80024a8:	4815      	ldr	r0, [pc, #84]	; (8002500 <main+0x588>)
 80024aa:	f007 fb65 	bl	8009b78 <HAL_UART_Receive_IT>
		  }
		  for (int i = 0; i < 128; ++i){
 80024ae:	2300      	movs	r3, #0
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b2:	e007      	b.n	80024c4 <main+0x54c>
			  buf[i] = 0;
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <main+0x568>)
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	4413      	add	r3, r2
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 128; ++i){
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	3301      	adds	r3, #1
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	2b7f      	cmp	r3, #127	; 0x7f
 80024c8:	ddf4      	ble.n	80024b4 <main+0x53c>
	  if (gps_flag){
 80024ca:	e5a7      	b.n	800201c <main+0xa4>
 80024cc:	f3af 8000 	nop.w
 80024d0:	a2529d39 	.word	0xa2529d39
 80024d4:	3f91df46 	.word	0x3f91df46
 80024d8:	00000000 	.word	0x00000000
 80024dc:	41584dae 	.word	0x41584dae
 80024e0:	200006ac 	.word	0x200006ac
 80024e4:	200005fc 	.word	0x200005fc
 80024e8:	20000678 	.word	0x20000678
 80024ec:	20000680 	.word	0x20000680
 80024f0:	20000668 	.word	0x20000668
 80024f4:	20000670 	.word	0x20000670
 80024f8:	08010dd0 	.word	0x08010dd0
 80024fc:	200006a0 	.word	0x200006a0
 8002500:	20000408 	.word	0x20000408

08002504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b096      	sub	sp, #88	; 0x58
 8002508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	2244      	movs	r2, #68	; 0x44
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f00a fcb6 	bl	800ce84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002518:	463b      	mov	r3, r7
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800252a:	f003 fff5 	bl	8006518 <HAL_PWREx_ControlVoltageScaling>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002534:	f000 fae2 	bl	8002afc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002538:	2310      	movs	r3, #16
 800253a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800253c:	2301      	movs	r3, #1
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002544:	2360      	movs	r3, #96	; 0x60
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002548:	2300      	movs	r3, #0
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4618      	mov	r0, r3
 8002552:	f004 f837 	bl	80065c4 <HAL_RCC_OscConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800255c:	f000 face 	bl	8002afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002560:	230f      	movs	r3, #15
 8002562:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002574:	463b      	mov	r3, r7
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f004 fc37 	bl	8006dec <HAL_RCC_ClockConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002584:	f000 faba 	bl	8002afc <Error_Handler>
  }
}
 8002588:	bf00      	nop
 800258a:	3758      	adds	r7, #88	; 0x58
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002596:	463b      	mov	r3, r7
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
 80025a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <MX_ADC1_Init+0xbc>)
 80025a8:	4a29      	ldr	r2, [pc, #164]	; (8002650 <MX_ADC1_Init+0xc0>)
 80025aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <MX_ADC1_Init+0xbc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <MX_ADC1_Init+0xbc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <MX_ADC1_Init+0xbc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <MX_ADC1_Init+0xbc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <MX_ADC1_Init+0xbc>)
 80025c6:	2204      	movs	r2, #4
 80025c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <MX_ADC1_Init+0xbc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025d0:	4b1e      	ldr	r3, [pc, #120]	; (800264c <MX_ADC1_Init+0xbc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <MX_ADC1_Init+0xbc>)
 80025d8:	2201      	movs	r2, #1
 80025da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_ADC1_Init+0xbc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <MX_ADC1_Init+0xbc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <MX_ADC1_Init+0xbc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <MX_ADC1_Init+0xbc>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <MX_ADC1_Init+0xbc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <MX_ADC1_Init+0xbc>)
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002606:	4811      	ldr	r0, [pc, #68]	; (800264c <MX_ADC1_Init+0xbc>)
 8002608:	f001 ff36 	bl	8004478 <HAL_ADC_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002612:	f000 fa73 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_ADC1_Init+0xc4>)
 8002618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800261a:	2306      	movs	r3, #6
 800261c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002622:	237f      	movs	r3, #127	; 0x7f
 8002624:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002626:	2304      	movs	r3, #4
 8002628:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800262e:	463b      	mov	r3, r7
 8002630:	4619      	mov	r1, r3
 8002632:	4806      	ldr	r0, [pc, #24]	; (800264c <MX_ADC1_Init+0xbc>)
 8002634:	f002 f962 	bl	80048fc <HAL_ADC_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800263e:	f000 fa5d 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200002c8 	.word	0x200002c8
 8002650:	50040000 	.word	0x50040000
 8002654:	14f00020 	.word	0x14f00020

08002658 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <MX_I2C3_Init+0x74>)
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <MX_I2C3_Init+0x78>)
 8002660:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_I2C3_Init+0x74>)
 8002664:	f640 6214 	movw	r2, #3604	; 0xe14
 8002668:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <MX_I2C3_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <MX_I2C3_Init+0x74>)
 8002672:	2201      	movs	r2, #1
 8002674:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MX_I2C3_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <MX_I2C3_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <MX_I2C3_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002688:	4b10      	ldr	r3, [pc, #64]	; (80026cc <MX_I2C3_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <MX_I2C3_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002694:	480d      	ldr	r0, [pc, #52]	; (80026cc <MX_I2C3_Init+0x74>)
 8002696:	f003 f95e 	bl	8005956 <HAL_I2C_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80026a0:	f000 fa2c 	bl	8002afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a4:	2100      	movs	r1, #0
 80026a6:	4809      	ldr	r0, [pc, #36]	; (80026cc <MX_I2C3_Init+0x74>)
 80026a8:	f003 fe90 	bl	80063cc <HAL_I2CEx_ConfigAnalogFilter>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80026b2:	f000 fa23 	bl	8002afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <MX_I2C3_Init+0x74>)
 80026ba:	f003 fed2 	bl	8006462 <HAL_I2CEx_ConfigDigitalFilter>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80026c4:	f000 fa1a 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000032c 	.word	0x2000032c
 80026d0:	40005c00 	.word	0x40005c00

080026d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <MX_LPUART1_UART_Init+0x54>)
 80026dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <MX_LPUART1_UART_Init+0x50>)
 8002712:	f007 f959 	bl	80099c8 <HAL_UART_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800271c:	f000 f9ee 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000380 	.word	0x20000380
 8002728:	40008000 	.word	0x40008000

0800272c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002732:	4a15      	ldr	r2, [pc, #84]	; (8002788 <MX_USART1_UART_Init+0x5c>)
 8002734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800273c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_USART1_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_USART1_UART_Init+0x58>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_USART1_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_USART1_UART_Init+0x58>)
 8002770:	f007 f92a 	bl	80099c8 <HAL_UART_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800277a:	f000 f9bf 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000408 	.word	0x20000408
 8002788:	40013800 	.word	0x40013800

0800278c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <MX_SPI1_Init+0x74>)
 8002792:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <MX_SPI1_Init+0x78>)
 8002794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <MX_SPI1_Init+0x74>)
 8002798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800279c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <MX_SPI1_Init+0x74>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_SPI1_Init+0x74>)
 80027a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_SPI1_Init+0x74>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_SPI1_Init+0x74>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_SPI1_Init+0x74>)
 80027ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_SPI1_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_SPI1_Init+0x74>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_SPI1_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_SPI1_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_SPI1_Init+0x74>)
 80027da:	2207      	movs	r2, #7
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <MX_SPI1_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_SPI1_Init+0x74>)
 80027e6:	2208      	movs	r2, #8
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_SPI1_Init+0x74>)
 80027ec:	f005 f80a 	bl	8007804 <HAL_SPI_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80027f6:	f000 f981 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000490 	.word	0x20000490
 8002804:	40013000 	.word	0x40013000

08002808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b096      	sub	sp, #88	; 0x58
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	222c      	movs	r2, #44	; 0x2c
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f00a fb25 	bl	800ce84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <MX_TIM1_Init+0x118>)
 800283c:	4a39      	ldr	r2, [pc, #228]	; (8002924 <MX_TIM1_Init+0x11c>)
 800283e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <MX_TIM1_Init+0x118>)
 8002842:	2200      	movs	r2, #0
 8002844:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <MX_TIM1_Init+0x118>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <MX_TIM1_Init+0x118>)
 800284e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <MX_TIM1_Init+0x118>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <MX_TIM1_Init+0x118>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002860:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <MX_TIM1_Init+0x118>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002866:	482e      	ldr	r0, [pc, #184]	; (8002920 <MX_TIM1_Init+0x118>)
 8002868:	f006 f936 	bl	8008ad8 <HAL_TIM_PWM_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002872:	f000 f943 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002882:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002886:	4619      	mov	r1, r3
 8002888:	4825      	ldr	r0, [pc, #148]	; (8002920 <MX_TIM1_Init+0x118>)
 800288a:	f006 ffa1 	bl	80097d0 <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002894:	f000 f932 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002898:	2360      	movs	r3, #96	; 0x60
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028a4:	2300      	movs	r3, #0
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4818      	ldr	r0, [pc, #96]	; (8002920 <MX_TIM1_Init+0x118>)
 80028be:	f006 fb43 	bl	8008f48 <HAL_TIM_PWM_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80028c8:	f000 f918 	bl	8002afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	4619      	mov	r1, r3
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <MX_TIM1_Init+0x118>)
 8002902:	f006 ffcb 	bl	800989c <HAL_TIMEx_ConfigBreakDeadTime>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800290c:	f000 f8f6 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <MX_TIM1_Init+0x118>)
 8002912:	f000 fb61 	bl	8002fd8 <HAL_TIM_MspPostInit>

}
 8002916:	bf00      	nop
 8002918:	3758      	adds	r7, #88	; 0x58
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200004f4 	.word	0x200004f4
 8002924:	40012c00 	.word	0x40012c00

08002928 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_TIM6_Init+0x68>)
 800293a:	4a16      	ldr	r2, [pc, #88]	; (8002994 <MX_TIM6_Init+0x6c>)
 800293c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_TIM6_Init+0x68>)
 8002940:	f240 128f 	movw	r2, #399	; 0x18f
 8002944:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_TIM6_Init+0x68>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <MX_TIM6_Init+0x68>)
 800294e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002952:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_TIM6_Init+0x68>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800295a:	480d      	ldr	r0, [pc, #52]	; (8002990 <MX_TIM6_Init+0x68>)
 800295c:	f006 f810 	bl	8008980 <HAL_TIM_Base_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002966:	f000 f8c9 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4806      	ldr	r0, [pc, #24]	; (8002990 <MX_TIM6_Init+0x68>)
 8002978:	f006 ff2a 	bl	80097d0 <HAL_TIMEx_MasterConfigSynchronization>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002982:	f000 f8bb 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000540 	.word	0x20000540
 8002994:	40001000 	.word	0x40001000

08002998 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <MX_TIM7_Init+0x68>)
 80029aa:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <MX_TIM7_Init+0x6c>)
 80029ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 399;
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <MX_TIM7_Init+0x68>)
 80029b0:	f240 128f 	movw	r2, #399	; 0x18f
 80029b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_TIM7_Init+0x68>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <MX_TIM7_Init+0x68>)
 80029be:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80029c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_TIM7_Init+0x68>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029ca:	480d      	ldr	r0, [pc, #52]	; (8002a00 <MX_TIM7_Init+0x68>)
 80029cc:	f005 ffd8 	bl	8008980 <HAL_TIM_Base_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80029d6:	f000 f891 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <MX_TIM7_Init+0x68>)
 80029e8:	f006 fef2 	bl	80097d0 <HAL_TIMEx_MasterConfigSynchronization>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80029f2:	f000 f883 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000058c 	.word	0x2000058c
 8002a04:	40001400 	.word	0x40001400

08002a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <MX_GPIO_Init+0xc8>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <MX_GPIO_Init+0xc8>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <MX_GPIO_Init+0xc8>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <MX_GPIO_Init+0xc8>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <MX_GPIO_Init+0xc8>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <MX_GPIO_Init+0xc8>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2120      	movs	r1, #32
 8002a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a56:	f002 ff43 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	481d      	ldr	r0, [pc, #116]	; (8002ad4 <MX_GPIO_Init+0xcc>)
 8002a60:	f002 ff3e 	bl	80058e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a64:	2320      	movs	r3, #32
 8002a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7e:	f002 fdc5 	bl	800560c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a82:	2301      	movs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a86:	2301      	movs	r3, #1
 8002a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	4619      	mov	r1, r3
 8002a98:	480e      	ldr	r0, [pc, #56]	; (8002ad4 <MX_GPIO_Init+0xcc>)
 8002a9a:	f002 fdb7 	bl	800560c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aa2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4808      	ldr	r0, [pc, #32]	; (8002ad4 <MX_GPIO_Init+0xcc>)
 8002ab4:	f002 fdaa 	bl	800560c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2101      	movs	r1, #1
 8002abc:	2017      	movs	r0, #23
 8002abe:	f002 fc60 	bl	8005382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ac2:	2017      	movs	r0, #23
 8002ac4:	f002 fc79 	bl	80053ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ac8:	bf00      	nop
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48000400 	.word	0x48000400

08002ad8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002ae0:	1d39      	adds	r1, r7, #4
 8002ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4803      	ldr	r0, [pc, #12]	; (8002af8 <__io_putchar+0x20>)
 8002aea:	f006 ffbb 	bl	8009a64 <HAL_UART_Transmit>
  return ch;
 8002aee:	687b      	ldr	r3, [r7, #4]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000380 	.word	0x20000380

08002afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <Error_Handler+0x8>
	...

08002b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_MspInit+0x44>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <HAL_MspInit+0x44>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6613      	str	r3, [r2, #96]	; 0x60
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <HAL_MspInit+0x44>)
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_MspInit+0x44>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <HAL_MspInit+0x44>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6593      	str	r3, [r2, #88]	; 0x58
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_MspInit+0x44>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b09e      	sub	sp, #120	; 0x78
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	2254      	movs	r2, #84	; 0x54
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f00a f987 	bl	800ce84 <memset>
  if(hadc->Instance==ADC1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <HAL_ADC_MspInit+0xc0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d143      	bne.n	8002c08 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b84:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002b86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b8a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002b94:	2310      	movs	r3, #16
 8002b96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002b98:	2307      	movs	r3, #7
 8002b9a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002baa:	f107 0310 	add.w	r3, r7, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 fb40 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002bba:	f7ff ff9f 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_ADC_MspInit+0xc4>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <HAL_ADC_MspInit+0xc4>)
 8002bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_ADC_MspInit+0xc4>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_ADC_MspInit+0xc4>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <HAL_ADC_MspInit+0xc4>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_ADC_MspInit+0xc4>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bf2:	230b      	movs	r3, #11
 8002bf4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c04:	f002 fd02 	bl	800560c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c08:	bf00      	nop
 8002c0a:	3778      	adds	r7, #120	; 0x78
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	50040000 	.word	0x50040000
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b0a0      	sub	sp, #128	; 0x80
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	f107 0318 	add.w	r3, r7, #24
 8002c34:	2254      	movs	r2, #84	; 0x54
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f00a f923 	bl	800ce84 <memset>
  if(hi2c->Instance==I2C3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <HAL_I2C_MspInit+0xe0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d153      	bne.n	8002cf0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c52:	f107 0318 	add.w	r3, r7, #24
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 faec 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c62:	f7ff ff4b 	bl	8002afc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9a:	2312      	movs	r3, #18
 8002c9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb4:	f002 fcaa 	bl	800560c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cb8:	2310      	movs	r3, #16
 8002cba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbc:	2312      	movs	r3, #18
 8002cbe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480b      	ldr	r0, [pc, #44]	; (8002d00 <HAL_I2C_MspInit+0xe8>)
 8002cd4:	f002 fc9a 	bl	800560c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002cde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_I2C_MspInit+0xe4>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cf0:	bf00      	nop
 8002cf2:	3780      	adds	r7, #128	; 0x80
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005c00 	.word	0x40005c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	48000400 	.word	0x48000400

08002d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b0a2      	sub	sp, #136	; 0x88
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d1c:	f107 0320 	add.w	r3, r7, #32
 8002d20:	2254      	movs	r2, #84	; 0x54
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f00a f8ad 	bl	800ce84 <memset>
  if(huart->Instance==LPUART1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a53      	ldr	r2, [pc, #332]	; (8002e7c <HAL_UART_MspInit+0x178>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d139      	bne.n	8002da8 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d34:	2320      	movs	r3, #32
 8002d36:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d3c:	f107 0320 	add.w	r3, r7, #32
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fa77 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d4c:	f7ff fed6 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d50:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	4a4a      	ldr	r2, [pc, #296]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d5c:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	4b45      	ldr	r3, [pc, #276]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6c:	4a44      	ldr	r2, [pc, #272]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d74:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d80:	230c      	movs	r3, #12
 8002d82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d92:	2308      	movs	r3, #8
 8002d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da2:	f002 fc33 	bl	800560c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002da6:	e064      	b.n	8002e72 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a35      	ldr	r2, [pc, #212]	; (8002e84 <HAL_UART_MspInit+0x180>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d15f      	bne.n	8002e72 <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002db6:	2300      	movs	r3, #0
 8002db8:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dba:	f107 0320 	add.w	r3, r7, #32
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 fa38 	bl	8007234 <HAL_RCCEx_PeriphCLKConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_UART_MspInit+0xca>
      Error_Handler();
 8002dca:	f7ff fe97 	bl	8002afc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd2:	4a2b      	ldr	r2, [pc, #172]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_UART_MspInit+0x17c>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e1a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f002 fbe7 	bl	800560c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e50:	2307      	movs	r3, #7
 8002e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	480a      	ldr	r0, [pc, #40]	; (8002e88 <HAL_UART_MspInit+0x184>)
 8002e5e:	f002 fbd5 	bl	800560c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	2025      	movs	r0, #37	; 0x25
 8002e68:	f002 fa8b 	bl	8005382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e6c:	2025      	movs	r0, #37	; 0x25
 8002e6e:	f002 faa4 	bl	80053ba <HAL_NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3788      	adds	r7, #136	; 0x88
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40008000 	.word	0x40008000
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40013800 	.word	0x40013800
 8002e88:	48000400 	.word	0x48000400

08002e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_SPI_MspInit+0x80>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d129      	bne.n	8002f02 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_SPI_MspInit+0x84>)
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_SPI_MspInit+0x84>)
 8002eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_SPI_MspInit+0x84>)
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_SPI_MspInit+0x84>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_SPI_MspInit+0x84>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_SPI_MspInit+0x84>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002ede:	f641 0302 	movw	r3, #6146	; 0x1802
 8002ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eec:	2303      	movs	r3, #3
 8002eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efe:	f002 fb85 	bl	800560c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40013000 	.word	0x40013000
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_TIM_PWM_MspInit+0x38>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10b      	bne.n	8002f3e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f30:	6613      	str	r3, [r2, #96]	; 0x60
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40021000 	.word	0x40021000

08002f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_TIM_Base_MspInit+0x78>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d114      	bne.n	8002f90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_TIM_Base_MspInit+0x7c>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_TIM_Base_MspInit+0x7c>)
 8002f6c:	f043 0310 	orr.w	r3, r3, #16
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_TIM_Base_MspInit+0x7c>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2101      	movs	r1, #1
 8002f82:	2036      	movs	r0, #54	; 0x36
 8002f84:	f002 f9fd 	bl	8005382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f88:	2036      	movs	r0, #54	; 0x36
 8002f8a:	f002 fa16 	bl	80053ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002f8e:	e018      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_TIM_Base_MspInit+0x80>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d113      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_TIM_Base_MspInit+0x7c>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <HAL_TIM_Base_MspInit+0x7c>)
 8002fa0:	f043 0320 	orr.w	r3, r3, #32
 8002fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_TIM_Base_MspInit+0x7c>)
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	2037      	movs	r0, #55	; 0x37
 8002fb8:	f002 f9e3 	bl	8005382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fbc:	2037      	movs	r0, #55	; 0x37
 8002fbe:	f002 f9fc 	bl	80053ba <HAL_NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40001000 	.word	0x40001000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40001400 	.word	0x40001400

08002fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIM_MspPostInit+0x68>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11d      	bne.n	8003036 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_TIM_MspPostInit+0x6c>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_TIM_MspPostInit+0x6c>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_TIM_MspPostInit+0x6c>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003024:	2301      	movs	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003032:	f002 faeb 	bl	800560c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40021000 	.word	0x40021000

08003048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800304c:	e7fe      	b.n	800304c <NMI_Handler+0x4>

0800304e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003052:	e7fe      	b.n	8003052 <HardFault_Handler+0x4>

08003054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <MemManage_Handler+0x4>

0800305a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <BusFault_Handler+0x4>

08003060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <UsageFault_Handler+0x4>

08003066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003094:	f000 ffe4 	bl	8004060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	LoRaRecieve = 1;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <EXTI9_5_IRQHandler+0x14>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80030a6:	2020      	movs	r0, #32
 80030a8:	f002 fc32 	bl	8005910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200005d8 	.word	0x200005d8

080030b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <USART1_IRQHandler+0x10>)
 80030ba:	f006 fda9 	bl	8009c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000408 	.word	0x20000408

080030c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <TIM6_DAC_IRQHandler+0x10>)
 80030ce:	f005 fe39 	bl	8008d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000540 	.word	0x20000540

080030dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <TIM7_IRQHandler+0x10>)
 80030e2:	f005 fe2f 	bl	8008d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000058c 	.word	0x2000058c

080030f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return 1;
 80030f4:	2301      	movs	r3, #1
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_kill>:

int _kill(int pid, int sig)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800310a:	f009 ff0d 	bl	800cf28 <__errno>
 800310e:	4603      	mov	r3, r0
 8003110:	2216      	movs	r2, #22
 8003112:	601a      	str	r2, [r3, #0]
  return -1;
 8003114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <_exit>:

void _exit (int status)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ffe7 	bl	8003100 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003132:	e7fe      	b.n	8003132 <_exit+0x12>

08003134 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e00a      	b.n	800315c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003146:	f3af 8000 	nop.w
 800314a:	4601      	mov	r1, r0
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	60ba      	str	r2, [r7, #8]
 8003152:	b2ca      	uxtb	r2, r1
 8003154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3301      	adds	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	dbf0      	blt.n	8003146 <_read+0x12>
  }

  return len;
 8003164:	687b      	ldr	r3, [r7, #4]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e009      	b.n	8003194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	60ba      	str	r2, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fca5 	bl	8002ad8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	dbf1      	blt.n	8003180 <_write+0x12>
  }
  return len;
 800319c:	687b      	ldr	r3, [r7, #4]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <_close>:

int _close(int file)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ce:	605a      	str	r2, [r3, #4]
  return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <_isatty>:

int _isatty(int file)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <_sbrk+0x5c>)
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <_sbrk+0x60>)
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d102      	bne.n	8003232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <_sbrk+0x64>)
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <_sbrk+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	429a      	cmp	r2, r3
 800323e:	d207      	bcs.n	8003250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003240:	f009 fe72 	bl	800cf28 <__errno>
 8003244:	4603      	mov	r3, r0
 8003246:	220c      	movs	r2, #12
 8003248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800324e:	e009      	b.n	8003264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <_sbrk+0x64>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <_sbrk+0x64>)
 8003260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20010000 	.word	0x20010000
 8003270:	00000400 	.word	0x00000400
 8003274:	2000073c 	.word	0x2000073c
 8003278:	20000c08 	.word	0x20000c08

0800327c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <SystemInit+0x20>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <SystemInit+0x20>)
 8003288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800328c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <increaseStepCallback>:
#endif
static ring_buffer_t peakScoreBuf;
static ring_buffer_t peakBuf;

static void increaseStepCallback(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
    steps++;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <increaseStepCallback+0x1c>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <increaseStepCallback+0x1c>)
 80032ae:	801a      	strh	r2, [r3, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000740 	.word	0x20000740

080032c0 <initAlgo>:

void initAlgo()
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
    // init buffers
    ring_buffer_init(&rawBuf);
 80032c4:	4818      	ldr	r0, [pc, #96]	; (8003328 <initAlgo+0x68>)
 80032c6:	f000 fd1c 	bl	8003d02 <ring_buffer_init>
    ring_buffer_init(&ppBuf);
 80032ca:	4818      	ldr	r0, [pc, #96]	; (800332c <initAlgo+0x6c>)
 80032cc:	f000 fd19 	bl	8003d02 <ring_buffer_init>
    ring_buffer_init(&mdBuf);
 80032d0:	4817      	ldr	r0, [pc, #92]	; (8003330 <initAlgo+0x70>)
 80032d2:	f000 fd16 	bl	8003d02 <ring_buffer_init>
#ifndef SKIP_FILTER
    ring_buffer_init(&smoothBuf);
 80032d6:	4817      	ldr	r0, [pc, #92]	; (8003334 <initAlgo+0x74>)
 80032d8:	f000 fd13 	bl	8003d02 <ring_buffer_init>
#endif
    ring_buffer_init(&peakScoreBuf);
 80032dc:	4816      	ldr	r0, [pc, #88]	; (8003338 <initAlgo+0x78>)
 80032de:	f000 fd10 	bl	8003d02 <ring_buffer_init>
    ring_buffer_init(&peakBuf);
 80032e2:	4816      	ldr	r0, [pc, #88]	; (800333c <initAlgo+0x7c>)
 80032e4:	f000 fd0d 	bl	8003d02 <ring_buffer_init>

    initPreProcessStage(&rawBuf, &ppBuf, motionDetectStage);
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <initAlgo+0x80>)
 80032ea:	4910      	ldr	r1, [pc, #64]	; (800332c <initAlgo+0x6c>)
 80032ec:	480e      	ldr	r0, [pc, #56]	; (8003328 <initAlgo+0x68>)
 80032ee:	f000 fb7f 	bl	80039f0 <initPreProcessStage>
#ifdef SKIP_FILTER
    initMotionDetectStage(&ppBuf, &mdBuf, scoringStage);
    initScoringStage(&mdBuf, &peakScoreBuf, detectionStage);
#else
    initMotionDetectStage(&ppBuf, &mdBuf, filterStage);
 80032f2:	4a14      	ldr	r2, [pc, #80]	; (8003344 <initAlgo+0x84>)
 80032f4:	490e      	ldr	r1, [pc, #56]	; (8003330 <initAlgo+0x70>)
 80032f6:	480d      	ldr	r0, [pc, #52]	; (800332c <initAlgo+0x6c>)
 80032f8:	f000 fa40 	bl	800377c <initMotionDetectStage>
    initFilterStage(&mdBuf, &smoothBuf, scoringStage);
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <initAlgo+0x88>)
 80032fe:	490d      	ldr	r1, [pc, #52]	; (8003334 <initAlgo+0x74>)
 8003300:	480b      	ldr	r0, [pc, #44]	; (8003330 <initAlgo+0x70>)
 8003302:	f000 f9c9 	bl	8003698 <initFilterStage>
    initScoringStage(&smoothBuf, &peakScoreBuf, detectionStage);
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <initAlgo+0x8c>)
 8003308:	490b      	ldr	r1, [pc, #44]	; (8003338 <initAlgo+0x78>)
 800330a:	480a      	ldr	r0, [pc, #40]	; (8003334 <initAlgo+0x74>)
 800330c:	f000 fd90 	bl	8003e30 <initScoringStage>
#endif
    initDetectionStage(&peakScoreBuf, &peakBuf, postProcessingStage);
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <initAlgo+0x90>)
 8003312:	490a      	ldr	r1, [pc, #40]	; (800333c <initAlgo+0x7c>)
 8003314:	4808      	ldr	r0, [pc, #32]	; (8003338 <initAlgo+0x78>)
 8003316:	f000 f8ab 	bl	8003470 <initDetectionStage>
    initPostProcessingStage(&peakBuf, &increaseStepCallback);
 800331a:	490e      	ldr	r1, [pc, #56]	; (8003354 <initAlgo+0x94>)
 800331c:	4807      	ldr	r0, [pc, #28]	; (800333c <initAlgo+0x7c>)
 800331e:	f000 fa99 	bl	8003854 <initPostProcessingStage>
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000744 	.word	0x20000744
 800332c:	200007c8 	.word	0x200007c8
 8003330:	2000084c 	.word	0x2000084c
 8003334:	200008d0 	.word	0x200008d0
 8003338:	20000954 	.word	0x20000954
 800333c:	200009d8 	.word	0x200009d8
 8003340:	080037b5 	.word	0x080037b5
 8003344:	080036d1 	.word	0x080036d1
 8003348:	08003e69 	.word	0x08003e69
 800334c:	080034a9 	.word	0x080034a9
 8003350:	08003891 	.word	0x08003891
 8003354:	080032a1 	.word	0x080032a1

08003358 <processSample>:

void processSample(time_t time, accel_t x, accel_t y, accel_t z)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
    preProcessSample(time, x, y, z);
 8003372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003376:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800337a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fbaa 	bl	8003ad8 <preProcessSample>
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <getSteps>:
    ring_buffer_init(&peakScoreBuf);
    ring_buffer_init(&peakBuf);
}

steps_t getSteps(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
    return steps;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <getSteps+0x14>)
 8003392:	881b      	ldrh	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000740 	.word	0x20000740

080033a4 <sqrt2>:
#ifndef STEP_COUNTING_ALGO_UTILS_H
#define STEP_COUNTING_ALGO_UTILS_H
#include <stdint.h>

static int64_t sqrt2(int64_t number)
{
 80033a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80033a8:	b08b      	sub	sp, #44	; 0x2c
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int64_t base, i, y;
  base = 67108864; //2^24
 80033b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  y = 0;
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 1; i <= 24; i++)
 80033c8:	f04f 0201 	mov.w	r2, #1
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80033d4:	e03d      	b.n	8003452 <sqrt2+0xae>
  {
    y += base;
 80033d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033de:	eb10 0802 	adds.w	r8, r0, r2
 80033e2:	eb41 0903 	adc.w	r9, r1, r3
 80033e6:	e9c7 8904 	strd	r8, r9, [r7, #16]
    if ((y * y) > number)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	fb03 f202 	mul.w	r2, r3, r2
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	441a      	add	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	fba3 4503 	umull	r4, r5, r3, r3
 8003402:	1953      	adds	r3, r2, r5
 8003404:	461d      	mov	r5, r3
 8003406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800340a:	42a2      	cmp	r2, r4
 800340c:	41ab      	sbcs	r3, r5
 800340e:	da09      	bge.n	8003424 <sqrt2+0x80>
    {
      y -= base; // base should not have been added, so we substract again
 8003410:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003414:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003418:	ebb0 0a02 	subs.w	sl, r0, r2
 800341c:	eb61 0b03 	sbc.w	fp, r1, r3
 8003420:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    }
    base = base >> 1; // shift 1 digit to the right = divide by 2
 8003424:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	0842      	lsrs	r2, r0, #1
 8003432:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003436:	104b      	asrs	r3, r1, #1
 8003438:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (i = 1; i <= 24; i++)
 800343c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003440:	1c51      	adds	r1, r2, #1
 8003442:	6039      	str	r1, [r7, #0]
 8003444:	f143 0300 	adc.w	r3, r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800344e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003456:	2a19      	cmp	r2, #25
 8003458:	f173 0300 	sbcs.w	r3, r3, #0
 800345c:	dbbb      	blt.n	80033d6 <sqrt2+0x32>
  }
  return y;
 800345e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	372c      	adds	r7, #44	; 0x2c
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800346e:	4770      	bx	lr

08003470 <initDetectionStage>:
static time_t count = 0;
static int16_t threshold_int = 0;
static int16_t threshold_frac = 6;

void initDetectionStage(ring_buffer_t *pInBuff, ring_buffer_t *peakBufIn, void (*pNextStage)(void))
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <initDetectionStage+0x2c>)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6013      	str	r3, [r2, #0]
    outBuff = peakBufIn;
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <initDetectionStage+0x30>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003488:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <initDetectionStage+0x34>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    detectionFile = fopen(DUMP_DETECTION_FILE_NAME, "w+");
#endif
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000a5c 	.word	0x20000a5c
 80034a0:	20000a60 	.word	0x20000a60
 80034a4:	20000a64 	.word	0x20000a64

080034a8 <detectionStage>:

void detectionStage(void)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b088      	sub	sp, #32
 80034ae:	af00      	add	r7, sp, #0
    if (!ring_buffer_is_empty(inBuff))
 80034b0:	4b71      	ldr	r3, [pc, #452]	; (8003678 <detectionStage+0x1d0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fbe1 	bl	8003c7c <ring_buffer_is_empty>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 80d5 	bne.w	800366c <detectionStage+0x1c4>
    {
        accumulator_t oMean = mean;
 80034c2:	4b6e      	ldr	r3, [pc, #440]	; (800367c <detectionStage+0x1d4>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	61fb      	str	r3, [r7, #28]
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 80034c8:	4b6b      	ldr	r3, [pc, #428]	; (8003678 <detectionStage+0x1d0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f107 0208 	add.w	r2, r7, #8
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fc59 	bl	8003d8a <ring_buffer_dequeue>
        count++;
 80034d8:	4b69      	ldr	r3, [pc, #420]	; (8003680 <detectionStage+0x1d8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	4a68      	ldr	r2, [pc, #416]	; (8003680 <detectionStage+0x1d8>)
 80034e0:	6013      	str	r3, [r2, #0]
        if (count == 1)
 80034e2:	4b67      	ldr	r3, [pc, #412]	; (8003680 <detectionStage+0x1d8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d106      	bne.n	80034f8 <detectionStage+0x50>
        {
            mean = dataPoint.magnitude;
 80034ea:	893a      	ldrh	r2, [r7, #8]
 80034ec:	4b63      	ldr	r3, [pc, #396]	; (800367c <detectionStage+0x1d4>)
 80034ee:	801a      	strh	r2, [r3, #0]
            std = 0;
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <detectionStage+0x1dc>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e093      	b.n	8003620 <detectionStage+0x178>
        }
        else if (count == 2)
 80034f8:	4b61      	ldr	r3, [pc, #388]	; (8003680 <detectionStage+0x1d8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d13f      	bne.n	8003580 <detectionStage+0xd8>
        {
            mean = (mean + dataPoint.magnitude) / 2;
 8003500:	4b5e      	ldr	r3, [pc, #376]	; (800367c <detectionStage+0x1d4>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	893b      	ldrh	r3, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	0fda      	lsrs	r2, r3, #31
 800350c:	4413      	add	r3, r2
 800350e:	105b      	asrs	r3, r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	4b5a      	ldr	r3, [pc, #360]	; (800367c <detectionStage+0x1d4>)
 8003514:	801a      	strh	r2, [r3, #0]
            std = sqrt2(((dataPoint.magnitude - mean) * (dataPoint.magnitude - mean)) + ((oMean - mean) * (oMean - mean))) / 2;
 8003516:	893b      	ldrh	r3, [r7, #8]
 8003518:	461a      	mov	r2, r3
 800351a:	4b58      	ldr	r3, [pc, #352]	; (800367c <detectionStage+0x1d4>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	893a      	ldrh	r2, [r7, #8]
 8003522:	4611      	mov	r1, r2
 8003524:	4a55      	ldr	r2, [pc, #340]	; (800367c <detectionStage+0x1d4>)
 8003526:	8812      	ldrh	r2, [r2, #0]
 8003528:	1a8a      	subs	r2, r1, r2
 800352a:	fb03 f202 	mul.w	r2, r3, r2
 800352e:	4b53      	ldr	r3, [pc, #332]	; (800367c <detectionStage+0x1d4>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	1a5b      	subs	r3, r3, r1
 8003538:	4950      	ldr	r1, [pc, #320]	; (800367c <detectionStage+0x1d4>)
 800353a:	8809      	ldrh	r1, [r1, #0]
 800353c:	4608      	mov	r0, r1
 800353e:	69f9      	ldr	r1, [r7, #28]
 8003540:	1a09      	subs	r1, r1, r0
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	17da      	asrs	r2, r3, #31
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003552:	f7ff ff27 	bl	80033a4 <sqrt2>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	0fd9      	lsrs	r1, r3, #31
 800355c:	2000      	movs	r0, #0
 800355e:	4688      	mov	r8, r1
 8003560:	4681      	mov	r9, r0
 8003562:	eb18 0402 	adds.w	r4, r8, r2
 8003566:	eb49 0503 	adc.w	r5, r9, r3
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	0862      	lsrs	r2, r4, #1
 8003574:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8003578:	106b      	asrs	r3, r5, #1
 800357a:	4b42      	ldr	r3, [pc, #264]	; (8003684 <detectionStage+0x1dc>)
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e04f      	b.n	8003620 <detectionStage+0x178>
        }
        else
        {
            mean = (dataPoint.magnitude + ((count - 1) * mean)) / count;
 8003580:	893b      	ldrh	r3, [r7, #8]
 8003582:	4619      	mov	r1, r3
 8003584:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <detectionStage+0x1d8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	4a3c      	ldr	r2, [pc, #240]	; (800367c <detectionStage+0x1d4>)
 800358c:	8812      	ldrh	r2, [r2, #0]
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	18ca      	adds	r2, r1, r3
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <detectionStage+0x1d8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fb92 f3f3 	sdiv	r3, r2, r3
 800359c:	b29a      	uxth	r2, r3
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <detectionStage+0x1d4>)
 80035a0:	801a      	strh	r2, [r3, #0]
            accumulator_t part1 = ((std * std) / (count - 1)) * (count - 2);
 80035a2:	4b38      	ldr	r3, [pc, #224]	; (8003684 <detectionStage+0x1dc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a37      	ldr	r2, [pc, #220]	; (8003684 <detectionStage+0x1dc>)
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	fb03 f202 	mul.w	r2, r3, r2
 80035ae:	4b34      	ldr	r3, [pc, #208]	; (8003680 <detectionStage+0x1d8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80035b8:	4a31      	ldr	r2, [pc, #196]	; (8003680 <detectionStage+0x1d8>)
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	3a02      	subs	r2, #2
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	61bb      	str	r3, [r7, #24]
            accumulator_t part2 = ((oMean - mean) * (oMean - mean));
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <detectionStage+0x1d4>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <detectionStage+0x1d4>)
 80035d0:	8812      	ldrh	r2, [r2, #0]
 80035d2:	4611      	mov	r1, r2
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	1a52      	subs	r2, r2, r1
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
            accumulator_t part3 = ((dataPoint.magnitude - mean) * (dataPoint.magnitude - mean)) / count;
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <detectionStage+0x1d4>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	893a      	ldrh	r2, [r7, #8]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4a23      	ldr	r2, [pc, #140]	; (800367c <detectionStage+0x1d4>)
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	1a8a      	subs	r2, r1, r2
 80035f2:	fb03 f202 	mul.w	r2, r3, r2
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <detectionStage+0x1d8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80035fe:	613b      	str	r3, [r7, #16]
            std = (accumulator_t)sqrt2(part1 + part2 + part3);
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	441a      	add	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	17da      	asrs	r2, r3, #31
 800360c:	469a      	mov	sl, r3
 800360e:	4693      	mov	fp, r2
 8003610:	4650      	mov	r0, sl
 8003612:	4659      	mov	r1, fp
 8003614:	f7ff fec6 	bl	80033a4 <sqrt2>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <detectionStage+0x1dc>)
 800361e:	601a      	str	r2, [r3, #0]
        }
        if (count > 15)
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <detectionStage+0x1d8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	dd21      	ble.n	800366c <detectionStage+0x1c4>
        {
            if ((dataPoint.magnitude - mean) > (std * threshold_int + (std / threshold_frac)))
 8003628:	893b      	ldrh	r3, [r7, #8]
 800362a:	461a      	mov	r2, r3
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <detectionStage+0x1d4>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <detectionStage+0x1e0>)
 8003634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003638:	4619      	mov	r1, r3
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <detectionStage+0x1dc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fb03 f101 	mul.w	r1, r3, r1
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <detectionStage+0x1dc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4811      	ldr	r0, [pc, #68]	; (800368c <detectionStage+0x1e4>)
 8003648:	f9b0 0000 	ldrsh.w	r0, [r0]
 800364c:	fb93 f3f0 	sdiv	r3, r3, r0
 8003650:	440b      	add	r3, r1
 8003652:	429a      	cmp	r2, r3
 8003654:	dd0a      	ble.n	800366c <detectionStage+0x1c4>
            {
                // This is a peak
                ring_buffer_queue(outBuff, dataPoint);
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <detectionStage+0x1e8>)
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f107 0308 	add.w	r3, r7, #8
 800365e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003662:	f000 fb60 	bl	8003d26 <ring_buffer_queue>
                (*nextStage)();
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <detectionStage+0x1ec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4798      	blx	r3
                }
#endif
            }
        }
    }
}
 800366c:	bf00      	nop
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	20000a5c 	.word	0x20000a5c
 800367c:	20000a68 	.word	0x20000a68
 8003680:	20000a70 	.word	0x20000a70
 8003684:	20000a6c 	.word	0x20000a6c
 8003688:	20000a74 	.word	0x20000a74
 800368c:	2000001c 	.word	0x2000001c
 8003690:	20000a60 	.word	0x20000a60
 8003694:	20000a64 	.word	0x20000a64

08003698 <initFilterStage>:
    11354,
    -3734,
    -2696};

void initFilterStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 80036a4:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <initFilterStage+0x2c>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 80036aa:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <initFilterStage+0x30>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <initFilterStage+0x34>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    filteredFile = fopen(DUMP_FILTERED_FILE_NAME, "w+");
#endif
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000a78 	.word	0x20000a78
 80036c8:	20000a7c 	.word	0x20000a7c
 80036cc:	20000a80 	.word	0x20000a80

080036d0 <filterStage>:

void filterStage(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) == FILTER_TAP_NUM)
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <filterStage+0x9c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fafc 	bl	8003cd8 <ring_buffer_num_items>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b07      	cmp	r3, #7
 80036e4:	d13e      	bne.n	8003764 <filterStage+0x94>
    {
        accumulator_t sum = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
        data_point_t dataPoint;
        data_point_t out;

        for (int8_t i = 0; i < FILTER_TAP_NUM; i++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	74fb      	strb	r3, [r7, #19]
 80036ee:	e01f      	b.n	8003730 <filterStage+0x60>
        {
            ring_buffer_peek(inBuff, &dataPoint, i);
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <filterStage+0x9c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	7cfa      	ldrb	r2, [r7, #19]
 80036f6:	f107 0108 	add.w	r1, r7, #8
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fb6e 	bl	8003ddc <ring_buffer_peek>
            if (i == FILTER_TAP_NUM - 1)
 8003700:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d101      	bne.n	800370c <filterStage+0x3c>
                out.time = dataPoint.time;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	607b      	str	r3, [r7, #4]
            sum += dataPoint.magnitude * filter_taps[i];
 800370c:	893b      	ldrh	r3, [r7, #8]
 800370e:	4619      	mov	r1, r3
 8003710:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003714:	4a16      	ldr	r2, [pc, #88]	; (8003770 <filterStage+0xa0>)
 8003716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4413      	add	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
        for (int8_t i = 0; i < FILTER_TAP_NUM; i++)
 8003724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	3301      	adds	r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	74fb      	strb	r3, [r7, #19]
 8003730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003734:	2b06      	cmp	r3, #6
 8003736:	dddb      	ble.n	80036f0 <filterStage+0x20>
        }
        out.magnitude = sum >> 16;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	141b      	asrs	r3, r3, #16
 800373c:	b29b      	uxth	r3, r3
 800373e:	803b      	strh	r3, [r7, #0]

        ring_buffer_dequeue(inBuff, &dataPoint);
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <filterStage+0x9c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f107 0208 	add.w	r2, r7, #8
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fb1d 	bl	8003d8a <ring_buffer_dequeue>
        ring_buffer_queue(outBuff, out);
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <filterStage+0xa4>)
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	463b      	mov	r3, r7
 8003756:	e893 0006 	ldmia.w	r3, {r1, r2}
 800375a:	f000 fae4 	bl	8003d26 <ring_buffer_queue>
        (*nextStage)();
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <filterStage+0xa8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4798      	blx	r3
                puts("error writing file");
            fflush(filteredFile);
        }
#endif
    }
}
 8003764:	bf00      	nop
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000a78 	.word	0x20000a78
 8003770:	20000020 	.word	0x20000020
 8003774:	20000a7c 	.word	0x20000a7c
 8003778:	20000a80 	.word	0x20000a80

0800377c <initMotionDetectStage>:
static ring_buffer_t *inBuff;
static ring_buffer_t *outBuff;
static void (*nextStage)(void);

void initMotionDetectStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <initMotionDetectStage+0x2c>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <initMotionDetectStage+0x30>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003794:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <initMotionDetectStage+0x34>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000a84 	.word	0x20000a84
 80037ac:	20000a88 	.word	0x20000a88
 80037b0:	20000a8c 	.word	0x20000a8c

080037b4 <motionDetectStage>:

void motionDetectStage(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) >= 15)
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <motionDetectStage+0x94>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa8a 	bl	8003cd8 <ring_buffer_num_items>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b0e      	cmp	r3, #14
 80037c8:	d939      	bls.n	800383e <motionDetectStage+0x8a>
    {
        magnitude_t min = maxof(magnitude_t);
 80037ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ce:	82fb      	strh	r3, [r7, #22]
        magnitude_t max = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	82bb      	strh	r3, [r7, #20]
        for (int i = 0; i < 12; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e017      	b.n	800380a <motionDetectStage+0x56>
        {
            data_point_t dp;
            ring_buffer_peek(inBuff, &dp, i);
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <motionDetectStage+0x94>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f107 0108 	add.w	r1, r7, #8
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 faf8 	bl	8003ddc <ring_buffer_peek>
            if (dp.magnitude > max)
 80037ec:	893b      	ldrh	r3, [r7, #8]
 80037ee:	8aba      	ldrh	r2, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d201      	bcs.n	80037f8 <motionDetectStage+0x44>
                max = dp.magnitude;
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	82bb      	strh	r3, [r7, #20]
            if (dp.magnitude < min)
 80037f8:	893b      	ldrh	r3, [r7, #8]
 80037fa:	8afa      	ldrh	r2, [r7, #22]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d901      	bls.n	8003804 <motionDetectStage+0x50>
                min = dp.magnitude;
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 12; i++)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	3301      	adds	r3, #1
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b0b      	cmp	r3, #11
 800380e:	dde4      	ble.n	80037da <motionDetectStage+0x26>
        }

        if (max - min > MOTION_THRESHOLD)
 8003810:	8aba      	ldrh	r2, [r7, #20]
 8003812:	8afb      	ldrh	r3, [r7, #22]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800381a:	dd10      	ble.n	800383e <motionDetectStage+0x8a>
        {
            data_point_t dataPoint;
            ring_buffer_dequeue(inBuff, &dataPoint);
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <motionDetectStage+0x94>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	463a      	mov	r2, r7
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fab0 	bl	8003d8a <ring_buffer_dequeue>
            ring_buffer_queue(outBuff, dataPoint);
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <motionDetectStage+0x98>)
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	463b      	mov	r3, r7
 8003830:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003834:	f000 fa77 	bl	8003d26 <ring_buffer_queue>
            (*nextStage)();
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <motionDetectStage+0x9c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4798      	blx	r3
        }
    }
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000a84 	.word	0x20000a84
 800384c:	20000a88 	.word	0x20000a88
 8003850:	20000a8c 	.word	0x20000a8c

08003854 <initPostProcessingStage>:
static data_point_t lastDataPoint;
static int16_t timeThreshold = 300; // in ms, this discards steps that are too close in time, 3 steps /s is a reasonable maximum
static void (*stepCallback)(void);

void initPostProcessingStage(ring_buffer_t *pInBuff, void (*stepCallbackIn)(void))
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    inBuff = pInBuff;
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <initPostProcessingStage+0x30>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6013      	str	r3, [r2, #0]
    stepCallback = stepCallbackIn;
 8003864:	4a08      	ldr	r2, [pc, #32]	; (8003888 <initPostProcessingStage+0x34>)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6013      	str	r3, [r2, #0]
    lastDataPoint.time = 0;
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <initPostProcessingStage+0x38>)
 800386c:	2200      	movs	r2, #0
 800386e:	605a      	str	r2, [r3, #4]
    lastDataPoint.magnitude = 0;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <initPostProcessingStage+0x38>)
 8003872:	2200      	movs	r2, #0
 8003874:	801a      	strh	r2, [r3, #0]

#ifdef DUMP_FILE
    postProcFile = fopen(DUMP_POSTPROC_FILE_NAME, "w+");
#endif
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000a90 	.word	0x20000a90
 8003888:	20000a9c 	.word	0x20000a9c
 800388c:	20000a94 	.word	0x20000a94

08003890 <postProcessingStage>:

void postProcessingStage(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
    if (!ring_buffer_is_empty(inBuff))
 8003896:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <postProcessingStage+0x84>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f9ee 	bl	8003c7c <ring_buffer_is_empty>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d132      	bne.n	800390c <postProcessingStage+0x7c>
    {
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <postProcessingStage+0x84>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	463a      	mov	r2, r7
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fa6b 	bl	8003d8a <ring_buffer_dequeue>
        if (lastDataPoint.time == 0)
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <postProcessingStage+0x88>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d107      	bne.n	80038cc <postProcessingStage+0x3c>
        {
            lastDataPoint = dataPoint;
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <postProcessingStage+0x88>)
 80038be:	461a      	mov	r2, r3
 80038c0:	463b      	mov	r3, r7
 80038c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038c6:	e882 0003 	stmia.w	r2, {r0, r1}
                    lastDataPoint = dataPoint;
                }
            }
        }
    }
}
 80038ca:	e01f      	b.n	800390c <postProcessingStage+0x7c>
            if ((dataPoint.time - lastDataPoint.time) > timeThreshold)
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <postProcessingStage+0x88>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	4a11      	ldr	r2, [pc, #68]	; (800391c <postProcessingStage+0x8c>)
 80038d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80038da:	4293      	cmp	r3, r2
 80038dc:	dd0a      	ble.n	80038f4 <postProcessingStage+0x64>
                lastDataPoint = dataPoint;
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <postProcessingStage+0x88>)
 80038e0:	461a      	mov	r2, r3
 80038e2:	463b      	mov	r3, r7
 80038e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038e8:	e882 0003 	stmia.w	r2, {r0, r1}
                (*stepCallback)();
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <postProcessingStage+0x90>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4798      	blx	r3
}
 80038f2:	e00b      	b.n	800390c <postProcessingStage+0x7c>
                if (dataPoint.magnitude > lastDataPoint.magnitude)
 80038f4:	883a      	ldrh	r2, [r7, #0]
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <postProcessingStage+0x88>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d906      	bls.n	800390c <postProcessingStage+0x7c>
                    lastDataPoint = dataPoint;
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <postProcessingStage+0x88>)
 8003900:	461a      	mov	r2, r3
 8003902:	463b      	mov	r3, r7
 8003904:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003908:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000a90 	.word	0x20000a90
 8003918:	20000a94 	.word	0x20000a94
 800391c:	2000002e 	.word	0x2000002e
 8003920:	20000a9c 	.word	0x20000a9c

08003924 <sqrt2>:
{
 8003924:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003928:	b08b      	sub	sp, #44	; 0x2c
 800392a:	af00      	add	r7, sp, #0
 800392c:	e9c7 0102 	strd	r0, r1, [r7, #8]
  base = 67108864; //2^24
 8003930:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9c7 2308 	strd	r2, r3, [r7, #32]
  y = 0;
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 1; i <= 24; i++)
 8003948:	f04f 0201 	mov.w	r2, #1
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003954:	e03d      	b.n	80039d2 <sqrt2+0xae>
    y += base;
 8003956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800395a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395e:	eb10 0802 	adds.w	r8, r0, r2
 8003962:	eb41 0903 	adc.w	r9, r1, r3
 8003966:	e9c7 8904 	strd	r8, r9, [r7, #16]
    if ((y * y) > number)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	fb03 f202 	mul.w	r2, r3, r2
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6939      	ldr	r1, [r7, #16]
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	441a      	add	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	fba3 4503 	umull	r4, r5, r3, r3
 8003982:	1953      	adds	r3, r2, r5
 8003984:	461d      	mov	r5, r3
 8003986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800398a:	42a2      	cmp	r2, r4
 800398c:	41ab      	sbcs	r3, r5
 800398e:	da09      	bge.n	80039a4 <sqrt2+0x80>
      y -= base; // base should not have been added, so we substract again
 8003990:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003994:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003998:	ebb0 0a02 	subs.w	sl, r0, r2
 800399c:	eb61 0b03 	sbc.w	fp, r1, r3
 80039a0:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    base = base >> 1; // shift 1 digit to the right = divide by 2
 80039a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	0842      	lsrs	r2, r0, #1
 80039b2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80039b6:	104b      	asrs	r3, r1, #1
 80039b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (i = 1; i <= 24; i++)
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	1c51      	adds	r1, r2, #1
 80039c2:	6039      	str	r1, [r7, #0]
 80039c4:	f143 0300 	adc.w	r3, r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80039d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d6:	2a19      	cmp	r2, #25
 80039d8:	f173 0300 	sbcs.w	r3, r3, #0
 80039dc:	dbbb      	blt.n	8003956 <sqrt2+0x32>
  return y;
 80039de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	372c      	adds	r7, #44	; 0x2c
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039ee:	4770      	bx	lr

080039f0 <initPreProcessStage>:
static uint8_t samplingPeriod = 80;    //in ms, this can be smaller than the actual sampling frequency, but it will result in more computations
static uint16_t timeScalingFactor = 1; //use this for adjusting time to ms, in case the clock has higher precision
static time_t lastSampleTime = -1;

void initPreProcessStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 80039fc:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <initPreProcessStage+0x2c>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <initPreProcessStage+0x30>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <initPreProcessStage+0x34>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    magnitudeFile = fopen(DUMP_MAGNITUDE_FILE_NAME, "w+");
    interpolatedFile = fopen(DUMP_INTERPOLATED_FILE_NAME, "w+");
#endif
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000aa0 	.word	0x20000aa0
 8003a20:	20000aa4 	.word	0x20000aa4
 8003a24:	20000aa8 	.word	0x20000aa8

08003a28 <linearInterpolate>:

static data_point_t linearInterpolate(data_point_t dp1, data_point_t dp2, int64_t interpTime)
{
 8003a28:	b082      	sub	sp, #8
 8003a2a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	1d38      	adds	r0, r7, #4
 8003a36:	e880 0006 	stmia.w	r0, {r1, r2}
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    magnitude_t mag = (dp1.magnitude + ((dp2.magnitude - dp1.magnitude) / (dp2.time - dp1.time)) * (interpTime - dp1.time));
 8003a3c:	88b9      	ldrh	r1, [r7, #4]
 8003a3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003a40:	461a      	mov	r2, r3
 8003a42:	88bb      	ldrh	r3, [r7, #4]
 8003a44:	1ad2      	subs	r2, r2, r3
 8003a46:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	1ac3      	subs	r3, r0, r3
 8003a4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a50:	b298      	uxth	r0, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	17da      	asrs	r2, r3, #31
 8003a56:	461c      	mov	r4, r3
 8003a58:	4615      	mov	r5, r2
 8003a5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a5e:	ebb2 0804 	subs.w	r8, r2, r4
 8003a62:	eb63 0905 	sbc.w	r9, r3, r5
 8003a66:	fa1f f388 	uxth.w	r3, r8
 8003a6a:	fb10 f303 	smulbb	r3, r0, r3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	440b      	add	r3, r1
 8003a72:	83fb      	strh	r3, [r7, #30]
    data_point_t interp;
    interp.time = interpTime;
 8003a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a76:	61bb      	str	r3, [r7, #24]
    interp.magnitude = mag;
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	82bb      	strh	r3, [r7, #20]
    return interp;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a88:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	3724      	adds	r7, #36	; 0x24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003a96:	b002      	add	sp, #8
 8003a98:	4770      	bx	lr
	...

08003a9c <outPutDataPoint>:

static void outPutDataPoint(data_point_t dp)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	e883 0003 	stmia.w	r3, {r0, r1}
    lastSampleTime = dp.time;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a08      	ldr	r2, [pc, #32]	; (8003acc <outPutDataPoint+0x30>)
 8003aac:	6013      	str	r3, [r2, #0]
    ring_buffer_queue(outBuff, dp);
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <outPutDataPoint+0x34>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003ab8:	f000 f935 	bl	8003d26 <ring_buffer_queue>
    (*nextStage)();
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <outPutDataPoint+0x38>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4798      	blx	r3
        if (!fprintf(interpolatedFile, "%lld, %lld\n", dp.time, dp.magnitude))
            puts("error writing file");
        fflush(interpolatedFile);
    }
#endif
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000034 	.word	0x20000034
 8003ad0:	20000aa4 	.word	0x20000aa4
 8003ad4:	20000aa8 	.word	0x20000aa8

08003ad8 <preProcessSample>:

void preProcessSample(time_t time, accel_t x, accel_t y, accel_t z)
{
 8003ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003adc:	b096      	sub	sp, #88	; 0x58
 8003ade:	af04      	add	r7, sp, #16
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4603      	mov	r3, r0
 8003aea:	817b      	strh	r3, [r7, #10]
 8003aec:	460b      	mov	r3, r1
 8003aee:	813b      	strh	r3, [r7, #8]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
    time = time / timeScalingFactor;
 8003af4:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <preProcessSample+0x194>)
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

    magnitude_t magnitude = (magnitude_t)sqrt2((accumulator_t)(x * x + y * y + z * z));
 8003b02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b06:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b0a:	fb03 f202 	mul.w	r2, r3, r2
 8003b0e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003b12:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	441a      	add	r2, r3
 8003b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b20:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	17da      	asrs	r2, r3, #31
 8003b2c:	4698      	mov	r8, r3
 8003b2e:	4691      	mov	r9, r2
 8003b30:	4640      	mov	r0, r8
 8003b32:	4649      	mov	r1, r9
 8003b34:	f7ff fef6 	bl	8003924 <sqrt2>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    data_point_t dataPoint;
    dataPoint.time = time;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
    dataPoint.magnitude = magnitude;
 8003b46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b4a:	86bb      	strh	r3, [r7, #52]	; 0x34
#endif

#ifdef SKIP_INTERPOLATION
    outPutDataPoint(dataPoint);
#else
    ring_buffer_queue(inBuff, dataPoint);
 8003b4c:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <preProcessSample+0x198>)
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003b58:	f000 f8e5 	bl	8003d26 <ring_buffer_queue>
    if (ring_buffer_num_items(inBuff) >= 2)
 8003b5c:	4b44      	ldr	r3, [pc, #272]	; (8003c70 <preProcessSample+0x198>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f8b9 	bl	8003cd8 <ring_buffer_num_items>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d97a      	bls.n	8003c62 <preProcessSample+0x18a>
    {
        data_point_t dp1;
        data_point_t dp2;
        // take last 2 elements
        ring_buffer_peek(inBuff, &dp1, 0);
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <preProcessSample+0x198>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003b74:	2200      	movs	r2, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f930 	bl	8003ddc <ring_buffer_peek>
        ring_buffer_peek(inBuff, &dp2, 1);
 8003b7c:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <preProcessSample+0x198>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003b84:	2201      	movs	r2, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f928 	bl	8003ddc <ring_buffer_peek>
        if (lastSampleTime == -1)
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <preProcessSample+0x19c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b94:	d102      	bne.n	8003b9c <preProcessSample+0xc4>
            lastSampleTime = dp1.time;
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	4a36      	ldr	r2, [pc, #216]	; (8003c74 <preProcessSample+0x19c>)
 8003b9a:	6013      	str	r3, [r2, #0]

        if (dp2.time - lastSampleTime == samplingPeriod)
 8003b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9e:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <preProcessSample+0x19c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <preProcessSample+0x1a0>)
 8003ba6:	7812      	ldrb	r2, [r2, #0]
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d106      	bne.n	8003bba <preProcessSample+0xe2>
        {
            // no need to interpolate!
            outPutDataPoint(dp2);
 8003bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003bb4:	f7ff ff72 	bl	8003a9c <outPutDataPoint>
 8003bb8:	e04b      	b.n	8003c52 <preProcessSample+0x17a>
        }
        else if (dp2.time - lastSampleTime > samplingPeriod)
 8003bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <preProcessSample+0x19c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <preProcessSample+0x1a0>)
 8003bc4:	7812      	ldrb	r2, [r2, #0]
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	dd43      	ble.n	8003c52 <preProcessSample+0x17a>
        {
            int8_t numberOfPoints = 1 + ((((dp2.time - lastSampleTime)) - 1) / samplingPeriod); //number of points to be generated, ceiled
 8003bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <preProcessSample+0x19c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	4a28      	ldr	r2, [pc, #160]	; (8003c78 <preProcessSample+0x1a0>)
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

            for (int8_t i = 1; i < numberOfPoints; i++)
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003bec:	e02b      	b.n	8003c46 <preProcessSample+0x16e>
            {
                time_t interpTime = lastSampleTime + samplingPeriod;
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <preProcessSample+0x1a0>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <preProcessSample+0x19c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c

                if (dp1.time <= interpTime && interpTime <= dp2.time)
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	db19      	blt.n	8003c38 <preProcessSample+0x160>
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	dc15      	bgt.n	8003c38 <preProcessSample+0x160>
                {
                    data_point_t interpolated = linearInterpolate(dp1, dp2, interpTime);
 8003c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0e:	17da      	asrs	r2, r3, #31
 8003c10:	461c      	mov	r4, r3
 8003c12:	4615      	mov	r5, r2
 8003c14:	f107 0014 	add.w	r0, r7, #20
 8003c18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003c26:	ca06      	ldmia	r2, {r1, r2}
 8003c28:	f7ff fefe 	bl	8003a28 <linearInterpolate>
                    outPutDataPoint(interpolated);
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c34:	f7ff ff32 	bl	8003a9c <outPutDataPoint>
            for (int8_t i = 1; i < numberOfPoints; i++)
 8003c38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003c46:	f997 2047 	ldrsb.w	r2, [r7, #71]	; 0x47
 8003c4a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	dbcd      	blt.n	8003bee <preProcessSample+0x116>
                }
            }
        }
        // remove oldest element in queue
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <preProcessSample+0x198>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f107 021c 	add.w	r2, r7, #28
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f894 	bl	8003d8a <ring_buffer_dequeue>
    }
#endif
}
 8003c62:	bf00      	nop
 8003c64:	3748      	adds	r7, #72	; 0x48
 8003c66:	46bd      	mov	sp, r7
 8003c68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c6c:	20000032 	.word	0x20000032
 8003c70:	20000aa0 	.word	0x20000aa0
 8003c74:	20000034 	.word	0x20000034
 8003c78:	20000030 	.word	0x20000030

08003c7c <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c90:	429a      	cmp	r2, r3
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	bf0c      	ite	eq
 8003cc6:	2301      	moveq	r3, #1
 8003cc8:	2300      	movne	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	b2db      	uxtb	r3, r3
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  buffer->head_index = 0;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, data_point_t data)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Is buffer full? */
  if (ring_buffer_is_full(buffer))
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff ffb6 	bl	8003ca6 <ring_buffer_is_full>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <ring_buffer_queue+0x30>
  {
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d46:	3301      	adds	r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	1d3a      	adds	r2, r7, #4
 8003d64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d68:	e883 0003 	stmia.w	r3, {r0, r1}
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003d72:	3301      	adds	r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, data_point_t *data)
{
 8003d8a:	b590      	push	{r4, r7, lr}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  if (ring_buffer_is_empty(buffer))
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff71 	bl	8003c7c <ring_buffer_is_empty>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <ring_buffer_dequeue+0x1a>
  {
    /* No items */
    return 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e017      	b.n	8003dd4 <ring_buffer_dequeue+0x4a>
  }

  *data = buffer->buffer[buffer->tail_index];
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003daa:	6839      	ldr	r1, [r7, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	460c      	mov	r4, r1
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003db8:	e884 0003 	stmia.w	r4, {r0, r1}
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return 1;
 8003dd2:	2301      	movs	r3, #1
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd90      	pop	{r4, r7, pc}

08003ddc <ring_buffer_peek>:

ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, data_point_t *data, ring_buffer_size_t index)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
  if (index >= ring_buffer_num_items(buffer))
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff ff74 	bl	8003cd8 <ring_buffer_num_items>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d301      	bcc.n	8003dfe <ring_buffer_peek+0x22>
  {
    /* No items at index */
    return 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e013      	b.n	8003e26 <ring_buffer_peek+0x4a>
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	4413      	add	r3, r2
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	75fb      	strb	r3, [r7, #23]
  *data = buffer->buffer[data_index];
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	460c      	mov	r4, r1
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e20:	e884 0003 	stmia.w	r4, {r0, r1}
  return 1;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd90      	pop	{r4, r7, pc}
	...

08003e30 <initScoringStage>:

static ring_buffer_size_t windowSize = 10;
static ring_buffer_size_t midpoint = 5; //half of size

void initScoringStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 8003e3c:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <initScoringStage+0x2c>)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 8003e42:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <initScoringStage+0x30>)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003e48:	4a06      	ldr	r2, [pc, #24]	; (8003e64 <initScoringStage+0x34>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    scoringFile = fopen(DUMP_SCORING_FILE_NAME, "w+");
#endif
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000aac 	.word	0x20000aac
 8003e60:	20000ab0 	.word	0x20000ab0
 8003e64:	20000ab4 	.word	0x20000ab4

08003e68 <scoringStage>:

void scoringStage(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) == windowSize)
 8003e6e:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <scoringStage+0xe8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff30 	bl	8003cd8 <ring_buffer_num_items>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <scoringStage+0xec>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d161      	bne.n	8003f48 <scoringStage+0xe0>
    {
        magnitude_t diffLeft = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	83fb      	strh	r3, [r7, #30]
        magnitude_t diffRight = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	83bb      	strh	r3, [r7, #28]
        data_point_t midpointData;
        ring_buffer_peek(inBuff, &midpointData, midpoint);
 8003e8c:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <scoringStage+0xe8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <scoringStage+0xf0>)
 8003e92:	7812      	ldrb	r2, [r2, #0]
 8003e94:	f107 0110 	add.w	r1, r7, #16
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff9f 	bl	8003ddc <ring_buffer_peek>
        data_point_t dataPoint;
        for (ring_buffer_size_t i = 0; i < midpoint; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	76fb      	strb	r3, [r7, #27]
 8003ea2:	e011      	b.n	8003ec8 <scoringStage+0x60>
        {
            ring_buffer_peek(inBuff, &dataPoint, i);
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <scoringStage+0xe8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	7efa      	ldrb	r2, [r7, #27]
 8003eaa:	f107 0108 	add.w	r1, r7, #8
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff ff94 	bl	8003ddc <ring_buffer_peek>
            diffLeft += midpointData.magnitude - dataPoint.magnitude;
 8003eb4:	8a3a      	ldrh	r2, [r7, #16]
 8003eb6:	893b      	ldrh	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	8bfb      	ldrh	r3, [r7, #30]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	83fb      	strh	r3, [r7, #30]
        for (ring_buffer_size_t i = 0; i < midpoint; i++)
 8003ec2:	7efb      	ldrb	r3, [r7, #27]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <scoringStage+0xf0>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	7efa      	ldrb	r2, [r7, #27]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3e8      	bcc.n	8003ea4 <scoringStage+0x3c>
        }
        for (ring_buffer_size_t j = midpoint + 1; j < windowSize; j++)
 8003ed2:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <scoringStage+0xf0>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	76bb      	strb	r3, [r7, #26]
 8003eda:	e011      	b.n	8003f00 <scoringStage+0x98>
        {
            ring_buffer_peek(inBuff, &dataPoint, j);
 8003edc:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <scoringStage+0xe8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	7eba      	ldrb	r2, [r7, #26]
 8003ee2:	f107 0108 	add.w	r1, r7, #8
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff78 	bl	8003ddc <ring_buffer_peek>
            diffRight += midpointData.magnitude - dataPoint.magnitude;
 8003eec:	8a3a      	ldrh	r2, [r7, #16]
 8003eee:	893b      	ldrh	r3, [r7, #8]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	8bbb      	ldrh	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	83bb      	strh	r3, [r7, #28]
        for (ring_buffer_size_t j = midpoint + 1; j < windowSize; j++)
 8003efa:	7ebb      	ldrb	r3, [r7, #26]
 8003efc:	3301      	adds	r3, #1
 8003efe:	76bb      	strb	r3, [r7, #26]
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <scoringStage+0xec>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	7eba      	ldrb	r2, [r7, #26]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3e8      	bcc.n	8003edc <scoringStage+0x74>
        }
        magnitude_t scorePeak = (diffLeft + diffRight) / (windowSize - 1);
 8003f0a:	8bfa      	ldrh	r2, [r7, #30]
 8003f0c:	8bbb      	ldrh	r3, [r7, #28]
 8003f0e:	441a      	add	r2, r3
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <scoringStage+0xec>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f1a:	833b      	strh	r3, [r7, #24]
        data_point_t out;
        out.time = midpointData.time;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	607b      	str	r3, [r7, #4]
        out.magnitude = scorePeak;
 8003f20:	8b3b      	ldrh	r3, [r7, #24]
 8003f22:	803b      	strh	r3, [r7, #0]
        ring_buffer_queue(outBuff, out);
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <scoringStage+0xf4>)
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	463b      	mov	r3, r7
 8003f2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003f2e:	f7ff fefa 	bl	8003d26 <ring_buffer_queue>
        ring_buffer_dequeue(inBuff, &midpointData);
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <scoringStage+0xe8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f107 0210 	add.w	r2, r7, #16
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff24 	bl	8003d8a <ring_buffer_dequeue>
        (*nextStage)();
 8003f42:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <scoringStage+0xf8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4798      	blx	r3
                puts("error writing file");
            fflush(scoringFile);
        }
#endif
    }
}
 8003f48:	bf00      	nop
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000aac 	.word	0x20000aac
 8003f54:	20000038 	.word	0x20000038
 8003f58:	20000039 	.word	0x20000039
 8003f5c:	20000ab0 	.word	0x20000ab0
 8003f60:	20000ab4 	.word	0x20000ab4

08003f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f68:	f7ff f988 	bl	800327c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f6e:	490d      	ldr	r1, [pc, #52]	; (8003fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f70:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <LoopForever+0xe>)
  movs r3, #0
 8003f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f74:	e002      	b.n	8003f7c <LoopCopyDataInit>

08003f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f7a:	3304      	adds	r3, #4

08003f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f80:	d3f9      	bcc.n	8003f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f82:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f84:	4c0a      	ldr	r4, [pc, #40]	; (8003fb0 <LoopForever+0x16>)
  movs r3, #0
 8003f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f88:	e001      	b.n	8003f8e <LoopFillZerobss>

08003f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f8c:	3204      	adds	r2, #4

08003f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f90:	d3fb      	bcc.n	8003f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f92:	f008 ffcf 	bl	800cf34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f96:	f7fd ffef 	bl	8001f78 <main>

08003f9a <LoopForever>:

LoopForever:
    b LoopForever
 8003f9a:	e7fe      	b.n	8003f9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fa4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003fa8:	08011440 	.word	0x08011440
  ldr r2, =_sbss
 8003fac:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003fb0:	20000c08 	.word	0x20000c08

08003fb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fb4:	e7fe      	b.n	8003fb4 <ADC1_IRQHandler>

08003fb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc0:	2003      	movs	r0, #3
 8003fc2:	f001 f9d3 	bl	800536c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fc6:	200f      	movs	r0, #15
 8003fc8:	f000 f80e 	bl	8003fe8 <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	71fb      	strb	r3, [r7, #7]
 8003fd6:	e001      	b.n	8003fdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fd8:	f7fe fd96 	bl	8002b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_InitTick+0x6c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_InitTick+0x70>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_InitTick+0x6c>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400a:	fbb3 f3f1 	udiv	r3, r3, r1
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	4618      	mov	r0, r3
 8004014:	f001 f9df 	bl	80053d6 <HAL_SYSTICK_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d809      	bhi.n	8004038 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004024:	2200      	movs	r2, #0
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402c:	f001 f9a9 	bl	8005382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004030:	4a0a      	ldr	r2, [pc, #40]	; (800405c <HAL_InitTick+0x74>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e007      	b.n	8004048 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e004      	b.n	8004048 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e001      	b.n	8004048 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000040 	.word	0x20000040
 8004058:	20000018 	.word	0x20000018
 800405c:	2000003c 	.word	0x2000003c

08004060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_IncTick+0x20>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_IncTick+0x24>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4413      	add	r3, r2
 8004070:	4a04      	ldr	r2, [pc, #16]	; (8004084 <HAL_IncTick+0x24>)
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000040 	.word	0x20000040
 8004084:	20000ab8 	.word	0x20000ab8

08004088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return uwTick;
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_GetTick+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000ab8 	.word	0x20000ab8

080040a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7ff ffee 	bl	8004088 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b8:	d005      	beq.n	80040c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_Delay+0x44>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040c6:	bf00      	nop
 80040c8:	f7ff ffde 	bl	8004088 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d8f7      	bhi.n	80040c8 <HAL_Delay+0x28>
  {
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000040 	.word	0x20000040

080040e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3360      	adds	r3, #96	; 0x60
 8004162:	461a      	mov	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <LL_ADC_SetOffset+0x44>)
 8004172:	4013      	ands	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	03fff000 	.word	0x03fff000

08004198 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3360      	adds	r3, #96	; 0x60
 80041a6:	461a      	mov	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3360      	adds	r3, #96	; 0x60
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3330      	adds	r3, #48	; 0x30
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	4413      	add	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	211f      	movs	r1, #31
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	f003 011f 	and.w	r1, r3, #31
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	fa01 f303 	lsl.w	r3, r1, r3
 8004266:	431a      	orrs	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3314      	adds	r3, #20
 8004288:	461a      	mov	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	0e5b      	lsrs	r3, r3, #25
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0d1b      	lsrs	r3, r3, #20
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2107      	movs	r1, #7
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	401a      	ands	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	0d1b      	lsrs	r3, r3, #20
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0318 	and.w	r3, r3, #24
 80042f2:	4908      	ldr	r1, [pc, #32]	; (8004314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042f4:	40d9      	lsrs	r1, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	400b      	ands	r3, r1
 80042fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fe:	431a      	orrs	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	0007ffff 	.word	0x0007ffff

08004318 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6093      	str	r3, [r2, #8]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800434c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004350:	d101      	bne.n	8004356 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004378:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a0:	d101      	bne.n	80043a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <LL_ADC_IsEnabled+0x18>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <LL_ADC_IsEnabled+0x1a>
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004412:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004416:	f043 0204 	orr.w	r2, r3, #4
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d101      	bne.n	8004442 <LL_ADC_REG_IsConversionOngoing+0x18>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d101      	bne.n	8004468 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e126      	b.n	80046e0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fe fb55 	bl	8002b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff3f 	bl	800433c <LL_ADC_IsDeepPowerDownEnabled>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff25 	bl	8004318 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ff5a 	bl	800438c <LL_ADC_IsInternalRegulatorEnabled>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff3e 	bl	8004364 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e8:	4b7f      	ldr	r3, [pc, #508]	; (80046e8 <HAL_ADC_Init+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	4a7f      	ldr	r2, [pc, #508]	; (80046ec <HAL_ADC_Init+0x274>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044fc:	e002      	b.n	8004504 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b01      	subs	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f9      	bne.n	80044fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ff3c 	bl	800438c <LL_ADC_IsInternalRegulatorEnabled>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451e:	f043 0210 	orr.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff ff75 	bl	800442a <LL_ADC_REG_IsConversionOngoing>
 8004540:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80bf 	bne.w	80046ce <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f040 80bb 	bne.w	80046ce <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004560:	f043 0202 	orr.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff35 	bl	80043dc <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004578:	485d      	ldr	r0, [pc, #372]	; (80046f0 <HAL_ADC_Init+0x278>)
 800457a:	f7ff ff2f 	bl	80043dc <LL_ADC_IsEnabled>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4619      	mov	r1, r3
 800458a:	485a      	ldr	r0, [pc, #360]	; (80046f4 <HAL_ADC_Init+0x27c>)
 800458c:	f7ff fdac 	bl	80040e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7e5b      	ldrb	r3, [r3, #25]
 8004594:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800459a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80045a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80045a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d106      	bne.n	80045cc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	3b01      	subs	r3, #1
 80045c4:	045b      	lsls	r3, r3, #17
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <HAL_ADC_Init+0x280>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	69b9      	ldr	r1, [r7, #24]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff25 	bl	8004450 <LL_ADC_INJ_IsConversionOngoing>
 8004606:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d13d      	bne.n	800468a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13a      	bne.n	800468a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004618:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004620:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004630:	f023 0302 	bic.w	r3, r3, #2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	430b      	orrs	r3, r1
 800463c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004644:	2b01      	cmp	r3, #1
 8004646:	d118      	bne.n	800467a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004652:	f023 0304 	bic.w	r3, r3, #4
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800465e:	4311      	orrs	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800466a:	430a      	orrs	r2, r1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	611a      	str	r2, [r3, #16]
 8004678:	e007      	b.n	800468a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d10c      	bne.n	80046ac <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f023 010f 	bic.w	r1, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	1e5a      	subs	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
 80046aa:	e007      	b.n	80046bc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 020f 	bic.w	r2, r2, #15
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	f043 0201 	orr.w	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
 80046cc:	e007      	b.n	80046de <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f043 0210 	orr.w	r2, r3, #16
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046de:	7ffb      	ldrb	r3, [r7, #31]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000018 	.word	0x20000018
 80046ec:	053e2d63 	.word	0x053e2d63
 80046f0:	50040000 	.word	0x50040000
 80046f4:	50040300 	.word	0x50040300
 80046f8:	fff0c007 	.word	0xfff0c007

080046fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fe8e 	bl	800442a <LL_ADC_REG_IsConversionOngoing>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d14f      	bne.n	80047b4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_ADC_Start+0x26>
 800471e:	2302      	movs	r3, #2
 8004720:	e04b      	b.n	80047ba <HAL_ADC_Start+0xbe>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fcc8 	bl	80050c0 <ADC_Enable>
 8004730:	4603      	mov	r3, r0
 8004732:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d137      	bne.n	80047aa <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d106      	bne.n	800476a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	f023 0206 	bic.w	r2, r3, #6
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	659a      	str	r2, [r3, #88]	; 0x58
 8004768:	e002      	b.n	8004770 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	221c      	movs	r2, #28
 8004776:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004796:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fe2d 	bl	8004402 <LL_ADC_REG_StartConversion>
 80047a8:	e006      	b.n	80047b8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80047b2:	e001      	b.n	80047b8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
 80047b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d102      	bne.n	80047da <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80047d4:	2308      	movs	r3, #8
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e010      	b.n	80047fc <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f043 0220 	orr.w	r2, r3, #32
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e06f      	b.n	80048d8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80047f8:	2304      	movs	r3, #4
 80047fa:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80047fc:	f7ff fc44 	bl	8004088 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004802:	e021      	b.n	8004848 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480a:	d01d      	beq.n	8004848 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800480c:	f7ff fc3c 	bl	8004088 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <HAL_ADC_PollForConversion+0x60>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d112      	bne.n	8004848 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f043 0204 	orr.w	r2, r3, #4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e047      	b.n	80048d8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0d6      	beq.n	8004804 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fcc7 	bl	80041fa <LL_ADC_REG_IsTriggerSourceSWStart>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01c      	beq.n	80048ac <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7e5b      	ldrb	r3, [r3, #25]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d118      	bne.n	80048ac <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b08      	cmp	r3, #8
 8004886:	d111      	bne.n	80048ac <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d104      	bne.n	80048c4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2208      	movs	r2, #8
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	e008      	b.n	80048d6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	220c      	movs	r2, #12
 80048d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b0b6      	sub	sp, #216	; 0xd8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_ADC_ConfigChannel+0x22>
 800491a:	2302      	movs	r3, #2
 800491c:	e3bb      	b.n	8005096 <HAL_ADC_ConfigChannel+0x79a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fd7d 	bl	800442a <LL_ADC_REG_IsConversionOngoing>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 83a0 	bne.w	8005078 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d824      	bhi.n	8004992 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	3b02      	subs	r3, #2
 800494e:	2b03      	cmp	r3, #3
 8004950:	d81b      	bhi.n	800498a <HAL_ADC_ConfigChannel+0x8e>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <HAL_ADC_ConfigChannel+0x5c>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	08004971 	.word	0x08004971
 8004960:	08004979 	.word	0x08004979
 8004964:	08004981 	.word	0x08004981
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004968:	230c      	movs	r3, #12
 800496a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800496e:	e010      	b.n	8004992 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004970:	2312      	movs	r3, #18
 8004972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004976:	e00c      	b.n	8004992 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004978:	2318      	movs	r3, #24
 800497a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800497e:	e008      	b.n	8004992 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004988:	e003      	b.n	8004992 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800498a:	2306      	movs	r3, #6
 800498c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004990:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80049a0:	f7ff fc3e 	bl	8004220 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fd3e 	bl	800442a <LL_ADC_REG_IsConversionOngoing>
 80049ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fd4a 	bl	8004450 <LL_ADC_INJ_IsConversionOngoing>
 80049bc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 81a4 	bne.w	8004d12 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 819f 	bne.w	8004d12 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6819      	ldr	r1, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f7ff fc49 	bl	8004278 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	08db      	lsrs	r3, r3, #3
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d00a      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6919      	ldr	r1, [r3, #16]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a18:	f7ff fb9a 	bl	8004150 <LL_ADC_SetOffset>
 8004a1c:	e179      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fbb7 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x14e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fbac 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004a40:	4603      	mov	r3, r0
 8004a42:	0e9b      	lsrs	r3, r3, #26
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	e01e      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x18c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fba1 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e004      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x1a4>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	0e9b      	lsrs	r3, r3, #26
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	e018      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x1d6>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aac:	fa93 f3a3 	rbit	r3, r3
 8004ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004ab4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e004      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d106      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fb70 	bl	80041c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fb54 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x214>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2101      	movs	r1, #1
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fb49 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004b06:	4603      	mov	r3, r0
 8004b08:	0e9b      	lsrs	r3, r3, #26
 8004b0a:	f003 021f 	and.w	r2, r3, #31
 8004b0e:	e01e      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x252>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fb3e 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004b36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	e004      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b46:	fab3 f383 	clz	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <HAL_ADC_ConfigChannel+0x26a>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	0e9b      	lsrs	r3, r3, #26
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	e018      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x29c>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004b82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	e004      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d106      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fb0d 	bl	80041c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff faf1 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x2da>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff fae6 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	0e9b      	lsrs	r3, r3, #26
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	e01e      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x318>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2102      	movs	r1, #2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff fadb 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e004      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x330>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	0e9b      	lsrs	r3, r3, #26
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	e014      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x35a>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e004      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d106      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2102      	movs	r1, #2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff faae 	bl	80041c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2103      	movs	r1, #3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fa92 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x398>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2103      	movs	r1, #3
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fa87 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	0e9b      	lsrs	r3, r3, #26
 8004c8e:	f003 021f 	and.w	r2, r3, #31
 8004c92:	e017      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x3c8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2103      	movs	r1, #3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fa7c 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cae:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	e003      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x3e0>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	0e9b      	lsrs	r3, r3, #26
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	e011      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x404>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce4:	fa93 f3a3 	rbit	r3, r3
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cec:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	e003      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d106      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2103      	movs	r1, #3
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fa59 	bl	80041c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fb60 	bl	80043dc <LL_ADC_IsEnabled>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f040 8140 	bne.w	8004fa4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	461a      	mov	r2, r3
 8004d32:	f7ff facd 	bl	80042d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	4a8f      	ldr	r2, [pc, #572]	; (8004f78 <HAL_ADC_ConfigChannel+0x67c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	f040 8131 	bne.w	8004fa4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x46e>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	0e9b      	lsrs	r3, r3, #26
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2b09      	cmp	r3, #9
 8004d60:	bf94      	ite	ls
 8004d62:	2301      	movls	r3, #1
 8004d64:	2300      	movhi	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e019      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x4a2>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004d82:	2320      	movs	r3, #32
 8004d84:	e003      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	bf94      	ite	ls
 8004d98:	2301      	movls	r3, #1
 8004d9a:	2300      	movhi	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d079      	beq.n	8004e96 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d107      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x4c2>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0e9b      	lsrs	r3, r3, #26
 8004db4:	3301      	adds	r3, #1
 8004db6:	069b      	lsls	r3, r3, #26
 8004db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dbc:	e015      	b.n	8004dea <HAL_ADC_ConfigChannel+0x4ee>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e003      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	069b      	lsls	r3, r3, #26
 8004de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x50e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	0e9b      	lsrs	r3, r3, #26
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f303 	lsl.w	r3, r1, r3
 8004e08:	e017      	b.n	8004e3a <HAL_ADC_ConfigChannel+0x53e>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004e22:	2320      	movs	r3, #32
 8004e24:	e003      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2101      	movs	r1, #1
 8004e36:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3a:	ea42 0103 	orr.w	r1, r2, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x564>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	0e9b      	lsrs	r3, r3, #26
 8004e50:	3301      	adds	r3, #1
 8004e52:	f003 021f 	and.w	r2, r3, #31
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	051b      	lsls	r3, r3, #20
 8004e5e:	e018      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x596>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e003      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	f003 021f 	and.w	r2, r3, #31
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e92:	430b      	orrs	r3, r1
 8004e94:	e081      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d107      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x5b6>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	0e9b      	lsrs	r3, r3, #26
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	069b      	lsls	r3, r3, #26
 8004eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb0:	e015      	b.n	8004ede <HAL_ADC_ConfigChannel+0x5e2>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004eca:	2320      	movs	r3, #32
 8004ecc:	e003      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	069b      	lsls	r3, r3, #26
 8004eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x602>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	0e9b      	lsrs	r3, r3, #26
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	e017      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x632>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	61bb      	str	r3, [r7, #24]
  return result;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004f16:	2320      	movs	r3, #32
 8004f18:	e003      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	fab3 f383 	clz	r3, r3
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	3301      	adds	r3, #1
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2101      	movs	r1, #1
 8004f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2e:	ea42 0103 	orr.w	r1, r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x65e>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	0e9b      	lsrs	r3, r3, #26
 8004f44:	3301      	adds	r3, #1
 8004f46:	f003 021f 	and.w	r2, r3, #31
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	4413      	add	r3, r2
 8004f50:	3b1e      	subs	r3, #30
 8004f52:	051b      	lsls	r3, r3, #20
 8004f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f58:	e01e      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x69c>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	fa93 f3a3 	rbit	r3, r3
 8004f66:	60fb      	str	r3, [r7, #12]
  return result;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004f72:	2320      	movs	r3, #32
 8004f74:	e006      	b.n	8004f84 <HAL_ADC_ConfigChannel+0x688>
 8004f76:	bf00      	nop
 8004f78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fab3 f383 	clz	r3, r3
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f003 021f 	and.w	r2, r3, #31
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	3b1e      	subs	r3, #30
 8004f92:	051b      	lsls	r3, r3, #20
 8004f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f98:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f7ff f96a 	bl	8004278 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d06c      	beq.n	800508a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fb0:	483c      	ldr	r0, [pc, #240]	; (80050a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004fb2:	f7ff f8bf 	bl	8004134 <LL_ADC_GetCommonPathInternalCh>
 8004fb6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3a      	ldr	r2, [pc, #232]	; (80050a8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d127      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d121      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a35      	ldr	r2, [pc, #212]	; (80050ac <HAL_ADC_ConfigChannel+0x7b0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d157      	bne.n	800508a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	482f      	ldr	r0, [pc, #188]	; (80050a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004fe6:	f7ff f892 	bl	800410e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fea:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	4a30      	ldr	r2, [pc, #192]	; (80050b4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005004:	e002      	b.n	800500c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	3b01      	subs	r3, #1
 800500a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f9      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005012:	e03a      	b.n	800508a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <HAL_ADC_ConfigChannel+0x7bc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d113      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800501e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <HAL_ADC_ConfigChannel+0x7b0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d12a      	bne.n	800508a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800503c:	4619      	mov	r1, r3
 800503e:	4819      	ldr	r0, [pc, #100]	; (80050a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8005040:	f7ff f865 	bl	800410e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005044:	e021      	b.n	800508a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <HAL_ADC_ConfigChannel+0x7c0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d11c      	bne.n	800508a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d116      	bne.n	800508a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a12      	ldr	r2, [pc, #72]	; (80050ac <HAL_ADC_ConfigChannel+0x7b0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d111      	bne.n	800508a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800506a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800506e:	4619      	mov	r1, r3
 8005070:	480c      	ldr	r0, [pc, #48]	; (80050a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8005072:	f7ff f84c 	bl	800410e <LL_ADC_SetCommonPathInternalCh>
 8005076:	e008      	b.n	800508a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005092:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005096:	4618      	mov	r0, r3
 8005098:	37d8      	adds	r7, #216	; 0xd8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	80080000 	.word	0x80080000
 80050a4:	50040300 	.word	0x50040300
 80050a8:	c7520000 	.word	0xc7520000
 80050ac:	50040000 	.word	0x50040000
 80050b0:	20000018 	.word	0x20000018
 80050b4:	053e2d63 	.word	0x053e2d63
 80050b8:	cb840000 	.word	0xcb840000
 80050bc:	80000001 	.word	0x80000001

080050c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff f983 	bl	80043dc <LL_ADC_IsEnabled>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d169      	bne.n	80051b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <ADC_Enable+0xfc>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00d      	beq.n	8005106 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	f043 0210 	orr.w	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	f043 0201 	orr.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e055      	b.n	80051b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f952 	bl	80043b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005110:	482b      	ldr	r0, [pc, #172]	; (80051c0 <ADC_Enable+0x100>)
 8005112:	f7ff f80f 	bl	8004134 <LL_ADC_GetCommonPathInternalCh>
 8005116:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <ADC_Enable+0x104>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	099b      	lsrs	r3, r3, #6
 8005126:	4a28      	ldr	r2, [pc, #160]	; (80051c8 <ADC_Enable+0x108>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	4613      	mov	r3, r2
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800513a:	e002      	b.n	8005142 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	3b01      	subs	r3, #1
 8005140:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f9      	bne.n	800513c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005148:	f7fe ff9e 	bl	8004088 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800514e:	e028      	b.n	80051a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff f941 	bl	80043dc <LL_ADC_IsEnabled>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff f925 	bl	80043b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800516a:	f7fe ff8d 	bl	8004088 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d914      	bls.n	80051a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b01      	cmp	r3, #1
 8005184:	d00d      	beq.n	80051a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f043 0210 	orr.w	r2, r3, #16
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	f043 0201 	orr.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e007      	b.n	80051b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d1cf      	bne.n	8005150 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	8000003f 	.word	0x8000003f
 80051c0:	50040300 	.word	0x50040300
 80051c4:	20000018 	.word	0x20000018
 80051c8:	053e2d63 	.word	0x053e2d63

080051cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <__NVIC_SetPriorityGrouping+0x44>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051fe:	4a04      	ldr	r2, [pc, #16]	; (8005210 <__NVIC_SetPriorityGrouping+0x44>)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	60d3      	str	r3, [r2, #12]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005218:	4b04      	ldr	r3, [pc, #16]	; (800522c <__NVIC_GetPriorityGrouping+0x18>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	f003 0307 	and.w	r3, r3, #7
}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800523a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523e:	2b00      	cmp	r3, #0
 8005240:	db0b      	blt.n	800525a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	f003 021f 	and.w	r2, r3, #31
 8005248:	4907      	ldr	r1, [pc, #28]	; (8005268 <__NVIC_EnableIRQ+0x38>)
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2001      	movs	r0, #1
 8005252:	fa00 f202 	lsl.w	r2, r0, r2
 8005256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	e000e100 	.word	0xe000e100

0800526c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db0a      	blt.n	8005296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	490c      	ldr	r1, [pc, #48]	; (80052b8 <__NVIC_SetPriority+0x4c>)
 8005286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	440b      	add	r3, r1
 8005290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005294:	e00a      	b.n	80052ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4908      	ldr	r1, [pc, #32]	; (80052bc <__NVIC_SetPriority+0x50>)
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3b04      	subs	r3, #4
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	440b      	add	r3, r1
 80052aa:	761a      	strb	r2, [r3, #24]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000e100 	.word	0xe000e100
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f1c3 0307 	rsb	r3, r3, #7
 80052da:	2b04      	cmp	r3, #4
 80052dc:	bf28      	it	cs
 80052de:	2304      	movcs	r3, #4
 80052e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d902      	bls.n	80052f0 <NVIC_EncodePriority+0x30>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3b03      	subs	r3, #3
 80052ee:	e000      	b.n	80052f2 <NVIC_EncodePriority+0x32>
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43da      	mvns	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	401a      	ands	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	43d9      	mvns	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005318:	4313      	orrs	r3, r2
         );
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005338:	d301      	bcc.n	800533e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800533a:	2301      	movs	r3, #1
 800533c:	e00f      	b.n	800535e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800533e:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <SysTick_Config+0x40>)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3b01      	subs	r3, #1
 8005344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005346:	210f      	movs	r1, #15
 8005348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800534c:	f7ff ff8e 	bl	800526c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <SysTick_Config+0x40>)
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <SysTick_Config+0x40>)
 8005358:	2207      	movs	r2, #7
 800535a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	e000e010 	.word	0xe000e010

0800536c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff ff29 	bl	80051cc <__NVIC_SetPriorityGrouping>
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
 8005388:	4603      	mov	r3, r0
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005394:	f7ff ff3e 	bl	8005214 <__NVIC_GetPriorityGrouping>
 8005398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	6978      	ldr	r0, [r7, #20]
 80053a0:	f7ff ff8e 	bl	80052c0 <NVIC_EncodePriority>
 80053a4:	4602      	mov	r2, r0
 80053a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff ff5d 	bl	800526c <__NVIC_SetPriority>
}
 80053b2:	bf00      	nop
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	4603      	mov	r3, r0
 80053c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff ff31 	bl	8005230 <__NVIC_EnableIRQ>
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ffa2 	bl	8005328 <SysTick_Config>
 80053e4:	4603      	mov	r3, r0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_DMA_Start_IT+0x20>
 800540a:	2302      	movs	r3, #2
 800540c:	e04b      	b.n	80054a6 <HAL_DMA_Start_IT+0xb8>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	d13a      	bne.n	8005498 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2202      	movs	r2, #2
 8005426:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f8b0 	bl	80055ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 020e 	orr.w	r2, r2, #14
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e00f      	b.n	8005486 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0204 	bic.w	r2, r2, #4
 8005474:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 020a 	orr.w	r2, r2, #10
 8005484:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e005      	b.n	80054a4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
 80054a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d008      	beq.n	80054d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e022      	b.n	800551e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 020e 	bic.w	r2, r2, #14
 80054e6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	f003 021c 	and.w	r2, r3, #28
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f202 	lsl.w	r2, r1, r2
 800550a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d005      	beq.n	800554e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2204      	movs	r2, #4
 8005546:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
 800554c:	e029      	b.n	80055a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 020e 	bic.w	r2, r2, #14
 800555c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f003 021c 	and.w	r2, r3, #28
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	2101      	movs	r1, #1
 800557c:	fa01 f202 	lsl.w	r2, r1, r2
 8005580:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
    }
  }
  return status;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f003 021c 	and.w	r2, r3, #28
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	2101      	movs	r1, #1
 80055c8:	fa01 f202 	lsl.w	r2, r1, r2
 80055cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d108      	bne.n	80055f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055ee:	e007      	b.n	8005600 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800561a:	e148      	b.n	80058ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2101      	movs	r1, #1
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 813a 	beq.w	80058a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d005      	beq.n	800564c <HAL_GPIO_Init+0x40>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d130      	bne.n	80056ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	2203      	movs	r2, #3
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005682:	2201      	movs	r2, #1
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	091b      	lsrs	r3, r3, #4
 8005698:	f003 0201 	and.w	r2, r3, #1
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d017      	beq.n	80056ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	2203      	movs	r2, #3
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4013      	ands	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d123      	bne.n	800573e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	08da      	lsrs	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3208      	adds	r2, #8
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	220f      	movs	r2, #15
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	08da      	lsrs	r2, r3, #3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3208      	adds	r2, #8
 8005738:	6939      	ldr	r1, [r7, #16]
 800573a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	2203      	movs	r2, #3
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4013      	ands	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 0203 	and.w	r2, r3, #3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8094 	beq.w	80058a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005780:	4b52      	ldr	r3, [pc, #328]	; (80058cc <HAL_GPIO_Init+0x2c0>)
 8005782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005784:	4a51      	ldr	r2, [pc, #324]	; (80058cc <HAL_GPIO_Init+0x2c0>)
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	6613      	str	r3, [r2, #96]	; 0x60
 800578c:	4b4f      	ldr	r3, [pc, #316]	; (80058cc <HAL_GPIO_Init+0x2c0>)
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005798:	4a4d      	ldr	r2, [pc, #308]	; (80058d0 <HAL_GPIO_Init+0x2c4>)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	3302      	adds	r3, #2
 80057a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	220f      	movs	r2, #15
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057c2:	d00d      	beq.n	80057e0 <HAL_GPIO_Init+0x1d4>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a43      	ldr	r2, [pc, #268]	; (80058d4 <HAL_GPIO_Init+0x2c8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <HAL_GPIO_Init+0x1d0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a42      	ldr	r2, [pc, #264]	; (80058d8 <HAL_GPIO_Init+0x2cc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_GPIO_Init+0x1cc>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e004      	b.n	80057e2 <HAL_GPIO_Init+0x1d6>
 80057d8:	2307      	movs	r3, #7
 80057da:	e002      	b.n	80057e2 <HAL_GPIO_Init+0x1d6>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <HAL_GPIO_Init+0x1d6>
 80057e0:	2300      	movs	r3, #0
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	f002 0203 	and.w	r2, r2, #3
 80057e8:	0092      	lsls	r2, r2, #2
 80057ea:	4093      	lsls	r3, r2
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057f2:	4937      	ldr	r1, [pc, #220]	; (80058d0 <HAL_GPIO_Init+0x2c4>)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	089b      	lsrs	r3, r3, #2
 80057f8:	3302      	adds	r3, #2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005800:	4b36      	ldr	r3, [pc, #216]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	43db      	mvns	r3, r3
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4013      	ands	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005824:	4a2d      	ldr	r2, [pc, #180]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	43db      	mvns	r3, r3
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800584e:	4a23      	ldr	r2, [pc, #140]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005854:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	43db      	mvns	r3, r3
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4013      	ands	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005878:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800587e:	4b17      	ldr	r3, [pc, #92]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	43db      	mvns	r3, r3
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4013      	ands	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058a2:	4a0e      	ldr	r2, [pc, #56]	; (80058dc <HAL_GPIO_Init+0x2d0>)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3301      	adds	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f47f aeaf 	bne.w	800561c <HAL_GPIO_Init+0x10>
  }
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	40021000 	.word	0x40021000
 80058d0:	40010000 	.word	0x40010000
 80058d4:	48000400 	.word	0x48000400
 80058d8:	48000800 	.word	0x48000800
 80058dc:	40010400 	.word	0x40010400

080058e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
 80058ec:	4613      	mov	r3, r2
 80058ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058f0:	787b      	ldrb	r3, [r7, #1]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058fc:	e002      	b.n	8005904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058fe:	887a      	ldrh	r2, [r7, #2]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005926:	4a05      	ldr	r2, [pc, #20]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f806 	bl	8005940 <HAL_GPIO_EXTI_Callback>
  }
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40010400 	.word	0x40010400

08005940 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e08d      	b.n	8005a84 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fd f94b 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2224      	movs	r2, #36	; 0x24
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059cc:	609a      	str	r2, [r3, #8]
 80059ce:	e006      	b.n	80059de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d108      	bne.n	80059f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	e007      	b.n	8005a08 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69d9      	ldr	r1, [r3, #28]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	461a      	mov	r2, r3
 8005a98:	460b      	mov	r3, r1
 8005a9a:	817b      	strh	r3, [r7, #10]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	f040 80fd 	bne.w	8005ca8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_I2C_Master_Transmit+0x30>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e0f6      	b.n	8005caa <HAL_I2C_Master_Transmit+0x21e>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ac4:	f7fe fae0 	bl	8004088 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	2319      	movs	r3, #25
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fa0a 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0e1      	b.n	8005caa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2221      	movs	r2, #33	; 0x21
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2210      	movs	r2, #16
 8005af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	893a      	ldrh	r2, [r7, #8]
 8005b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2bff      	cmp	r3, #255	; 0xff
 8005b16:	d906      	bls.n	8005b26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e007      	b.n	8005b36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d024      	beq.n	8005b88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	3301      	adds	r3, #1
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	8979      	ldrh	r1, [r7, #10]
 8005b7a:	4b4e      	ldr	r3, [pc, #312]	; (8005cb4 <HAL_I2C_Master_Transmit+0x228>)
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fbf1 	bl	8006368 <I2C_TransferConfig>
 8005b86:	e066      	b.n	8005c56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	8979      	ldrh	r1, [r7, #10]
 8005b90:	4b48      	ldr	r3, [pc, #288]	; (8005cb4 <HAL_I2C_Master_Transmit+0x228>)
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fbe6 	bl	8006368 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b9c:	e05b      	b.n	8005c56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	6a39      	ldr	r1, [r7, #32]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f9f3 	bl	8005f8e <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e07b      	b.n	8005caa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	781a      	ldrb	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d034      	beq.n	8005c56 <HAL_I2C_Master_Transmit+0x1ca>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d130      	bne.n	8005c56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f976 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e04d      	b.n	8005caa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2bff      	cmp	r3, #255	; 0xff
 8005c16:	d90e      	bls.n	8005c36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	22ff      	movs	r2, #255	; 0xff
 8005c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	8979      	ldrh	r1, [r7, #10]
 8005c26:	2300      	movs	r3, #0
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fb9a 	bl	8006368 <I2C_TransferConfig>
 8005c34:	e00f      	b.n	8005c56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	8979      	ldrh	r1, [r7, #10]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fb89 	bl	8006368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d19e      	bne.n	8005b9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	6a39      	ldr	r1, [r7, #32]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f9d9 	bl	800601c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e01a      	b.n	8005caa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <HAL_I2C_Master_Transmit+0x22c>)
 8005c88:	400b      	ands	r3, r1
 8005c8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	80002000 	.word	0x80002000
 8005cb8:	fe00e800 	.word	0xfe00e800

08005cbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	607a      	str	r2, [r7, #4]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	460b      	mov	r3, r1
 8005cca:	817b      	strh	r3, [r7, #10]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	f040 80db 	bne.w	8005e94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_I2C_Master_Receive+0x30>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e0d4      	b.n	8005e96 <HAL_I2C_Master_Receive+0x1da>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cf4:	f7fe f9c8 	bl	8004088 <HAL_GetTick>
 8005cf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	2319      	movs	r3, #25
 8005d00:	2201      	movs	r2, #1
 8005d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8f2 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0bf      	b.n	8005e96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2222      	movs	r2, #34	; 0x22
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2210      	movs	r2, #16
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	893a      	ldrh	r2, [r7, #8]
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2bff      	cmp	r3, #255	; 0xff
 8005d46:	d90e      	bls.n	8005d66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	22ff      	movs	r2, #255	; 0xff
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	8979      	ldrh	r1, [r7, #10]
 8005d56:	4b52      	ldr	r3, [pc, #328]	; (8005ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fb02 	bl	8006368 <I2C_TransferConfig>
 8005d64:	e06d      	b.n	8005e42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	8979      	ldrh	r1, [r7, #10]
 8005d78:	4b49      	ldr	r3, [pc, #292]	; (8005ea0 <HAL_I2C_Master_Receive+0x1e4>)
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 faf1 	bl	8006368 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d86:	e05c      	b.n	8005e42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	6a39      	ldr	r1, [r7, #32]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f989 	bl	80060a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e07c      	b.n	8005e96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d034      	beq.n	8005e42 <HAL_I2C_Master_Receive+0x186>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d130      	bne.n	8005e42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	2200      	movs	r2, #0
 8005de8:	2180      	movs	r1, #128	; 0x80
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f880 	bl	8005ef0 <I2C_WaitOnFlagUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e04d      	b.n	8005e96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2bff      	cmp	r3, #255	; 0xff
 8005e02:	d90e      	bls.n	8005e22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	22ff      	movs	r2, #255	; 0xff
 8005e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	8979      	ldrh	r1, [r7, #10]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 faa4 	bl	8006368 <I2C_TransferConfig>
 8005e20:	e00f      	b.n	8005e42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	8979      	ldrh	r1, [r7, #10]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fa93 	bl	8006368 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d19d      	bne.n	8005d88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	6a39      	ldr	r1, [r7, #32]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f8e3 	bl	800601c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e01a      	b.n	8005e96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2220      	movs	r2, #32
 8005e66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <HAL_I2C_Master_Receive+0x1e8>)
 8005e74:	400b      	ands	r3, r1
 8005e76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e000      	b.n	8005e96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
  }
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	80002400 	.word	0x80002400
 8005ea4:	fe00e800 	.word	0xfe00e800

08005ea8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d103      	bne.n	8005ec6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d007      	beq.n	8005ee4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	619a      	str	r2, [r3, #24]
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f00:	e031      	b.n	8005f66 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f08:	d02d      	beq.n	8005f66 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fe f8bd 	bl	8004088 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d122      	bne.n	8005f66 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d113      	bne.n	8005f66 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f043 0220 	orr.w	r2, r3, #32
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e00f      	b.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699a      	ldr	r2, [r3, #24]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	bf0c      	ite	eq
 8005f76:	2301      	moveq	r3, #1
 8005f78:	2300      	movne	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d0be      	beq.n	8005f02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f9a:	e033      	b.n	8006004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f901 	bl	80061a8 <I2C_IsErrorOccurred>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e031      	b.n	8006014 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb6:	d025      	beq.n	8006004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb8:	f7fe f866 	bl	8004088 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d302      	bcc.n	8005fce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d11a      	bne.n	8006004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d013      	beq.n	8006004 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e007      	b.n	8006014 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	d1c4      	bne.n	8005f9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006028:	e02f      	b.n	800608a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f8ba 	bl	80061a8 <I2C_IsErrorOccurred>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e02d      	b.n	800609a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fe f823 	bl	8004088 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11a      	bne.n	800608a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b20      	cmp	r3, #32
 8006060:	d013      	beq.n	800608a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e007      	b.n	800609a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b20      	cmp	r3, #32
 8006096:	d1c8      	bne.n	800602a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060b0:	e06b      	b.n	800618a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f876 	bl	80061a8 <I2C_IsErrorOccurred>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e069      	b.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d138      	bne.n	8006146 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d105      	bne.n	80060ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e055      	b.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d107      	bne.n	800610c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2210      	movs	r2, #16
 8006102:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2204      	movs	r2, #4
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
 800610a:	e002      	b.n	8006112 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2220      	movs	r2, #32
 8006118:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6859      	ldr	r1, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006126:	400b      	ands	r3, r1
 8006128:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e029      	b.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006146:	f7fd ff9f 	bl	8004088 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d116      	bne.n	800618a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b04      	cmp	r3, #4
 8006168:	d00f      	beq.n	800618a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e007      	b.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b04      	cmp	r3, #4
 8006196:	d18c      	bne.n	80060b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	fe00e800 	.word	0xfe00e800

080061a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d068      	beq.n	80062a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2210      	movs	r2, #16
 80061da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061dc:	e049      	b.n	8006272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e4:	d045      	beq.n	8006272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061e6:	f7fd ff4f 	bl	8004088 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d302      	bcc.n	80061fc <I2C_IsErrorOccurred+0x54>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d13a      	bne.n	8006272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800620e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d121      	bne.n	8006264 <I2C_IsErrorOccurred+0xbc>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006226:	d01d      	beq.n	8006264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006228:	7cfb      	ldrb	r3, [r7, #19]
 800622a:	2b20      	cmp	r3, #32
 800622c:	d01a      	beq.n	8006264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800623c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800623e:	f7fd ff23 	bl	8004088 <HAL_GetTick>
 8006242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006244:	e00e      	b.n	8006264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006246:	f7fd ff1f 	bl	8004088 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b19      	cmp	r3, #25
 8006252:	d907      	bls.n	8006264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	f043 0320 	orr.w	r3, r3, #32
 800625a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006262:	e006      	b.n	8006272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b20      	cmp	r3, #32
 8006270:	d1e9      	bne.n	8006246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b20      	cmp	r3, #32
 800627e:	d003      	beq.n	8006288 <I2C_IsErrorOccurred+0xe0>
 8006280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0aa      	beq.n	80061de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2220      	movs	r2, #32
 8006296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	f043 0304 	orr.w	r3, r3, #4
 800629e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f043 0308 	orr.w	r3, r3, #8
 80062e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	f043 0302 	orr.w	r3, r3, #2
 8006302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800630c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01c      	beq.n	8006356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff fdc3 	bl	8005ea8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6859      	ldr	r1, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <I2C_IsErrorOccurred+0x1bc>)
 800632e:	400b      	ands	r3, r1
 8006330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	431a      	orrs	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800635a:	4618      	mov	r0, r3
 800635c:	3728      	adds	r7, #40	; 0x28
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	fe00e800 	.word	0xfe00e800

08006368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	817b      	strh	r3, [r7, #10]
 8006376:	4613      	mov	r3, r2
 8006378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800637a:	897b      	ldrh	r3, [r7, #10]
 800637c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006380:	7a7b      	ldrb	r3, [r7, #9]
 8006382:	041b      	lsls	r3, r3, #16
 8006384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	4313      	orrs	r3, r2
 8006392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	0d5b      	lsrs	r3, r3, #21
 80063a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <I2C_TransferConfig+0x60>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	43db      	mvns	r3, r3
 80063ac:	ea02 0103 	and.w	r1, r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	03ff63ff 	.word	0x03ff63ff

080063cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d138      	bne.n	8006454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e032      	b.n	8006456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2224      	movs	r2, #36	; 0x24
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0201 	bic.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800641e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b20      	cmp	r3, #32
 8006476:	d139      	bne.n	80064ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006482:	2302      	movs	r3, #2
 8006484:	e033      	b.n	80064ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e000      	b.n	80064ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006500:	4b04      	ldr	r3, [pc, #16]	; (8006514 <HAL_PWREx_GetVoltageRange+0x18>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40007000 	.word	0x40007000

08006518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006526:	d130      	bne.n	800658a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006528:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006534:	d038      	beq.n	80065a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006536:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800653e:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2232      	movs	r2, #50	; 0x32
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	0c9b      	lsrs	r3, r3, #18
 8006558:	3301      	adds	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800655c:	e002      	b.n	8006564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b01      	subs	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006564:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800656c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006570:	d102      	bne.n	8006578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f2      	bne.n	800655e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d110      	bne.n	80065a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e00f      	b.n	80065aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006596:	d007      	beq.n	80065a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065a0:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40007000 	.word	0x40007000
 80065bc:	20000018 	.word	0x20000018
 80065c0:	431bde83 	.word	0x431bde83

080065c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f000 bc02 	b.w	8006ddc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d8:	4b96      	ldr	r3, [pc, #600]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 030c 	and.w	r3, r3, #12
 80065e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065e2:	4b94      	ldr	r3, [pc, #592]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80e4 	beq.w	80067c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <HAL_RCC_OscConfig+0x4c>
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b0c      	cmp	r3, #12
 8006604:	f040 808b 	bne.w	800671e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b01      	cmp	r3, #1
 800660c:	f040 8087 	bne.w	800671e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006610:	4b88      	ldr	r3, [pc, #544]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_RCC_OscConfig+0x64>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e3d9      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1a      	ldr	r2, [r3, #32]
 800662c:	4b81      	ldr	r3, [pc, #516]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_RCC_OscConfig+0x7e>
 8006638:	4b7e      	ldr	r3, [pc, #504]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006640:	e005      	b.n	800664e <HAL_RCC_OscConfig+0x8a>
 8006642:	4b7c      	ldr	r3, [pc, #496]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006648:	091b      	lsrs	r3, r3, #4
 800664a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800664e:	4293      	cmp	r3, r2
 8006650:	d223      	bcs.n	800669a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fd8c 	bl	8007174 <RCC_SetFlashLatencyFromMSIRange>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e3ba      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006666:	4b73      	ldr	r3, [pc, #460]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a72      	ldr	r2, [pc, #456]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800666c:	f043 0308 	orr.w	r3, r3, #8
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	4b70      	ldr	r3, [pc, #448]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	496d      	ldr	r1, [pc, #436]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006680:	4313      	orrs	r3, r2
 8006682:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006684:	4b6b      	ldr	r3, [pc, #428]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	4968      	ldr	r1, [pc, #416]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006694:	4313      	orrs	r3, r2
 8006696:	604b      	str	r3, [r1, #4]
 8006698:	e025      	b.n	80066e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669a:	4b66      	ldr	r3, [pc, #408]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a65      	ldr	r2, [pc, #404]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80066a0:	f043 0308 	orr.w	r3, r3, #8
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	4b63      	ldr	r3, [pc, #396]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	4960      	ldr	r1, [pc, #384]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066b8:	4b5e      	ldr	r3, [pc, #376]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	495b      	ldr	r1, [pc, #364]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fd4c 	bl	8007174 <RCC_SetFlashLatencyFromMSIRange>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e37a      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066e6:	f000 fc81 	bl	8006fec <HAL_RCC_GetSysClockFreq>
 80066ea:	4602      	mov	r2, r0
 80066ec:	4b51      	ldr	r3, [pc, #324]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	4950      	ldr	r1, [pc, #320]	; (8006838 <HAL_RCC_OscConfig+0x274>)
 80066f8:	5ccb      	ldrb	r3, [r1, r3]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006702:	4a4e      	ldr	r2, [pc, #312]	; (800683c <HAL_RCC_OscConfig+0x278>)
 8006704:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006706:	4b4e      	ldr	r3, [pc, #312]	; (8006840 <HAL_RCC_OscConfig+0x27c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7fd fc6c 	bl	8003fe8 <HAL_InitTick>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d052      	beq.n	80067c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	e35e      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d032      	beq.n	800678c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006726:	4b43      	ldr	r3, [pc, #268]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a42      	ldr	r2, [pc, #264]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006732:	f7fd fca9 	bl	8004088 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800673a:	f7fd fca5 	bl	8004088 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e347      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800674c:	4b39      	ldr	r3, [pc, #228]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006758:	4b36      	ldr	r3, [pc, #216]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a35      	ldr	r2, [pc, #212]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800675e:	f043 0308 	orr.w	r3, r3, #8
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4b33      	ldr	r3, [pc, #204]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	4930      	ldr	r1, [pc, #192]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006772:	4313      	orrs	r3, r2
 8006774:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006776:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	492b      	ldr	r1, [pc, #172]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006786:	4313      	orrs	r3, r2
 8006788:	604b      	str	r3, [r1, #4]
 800678a:	e01a      	b.n	80067c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800678c:	4b29      	ldr	r3, [pc, #164]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a28      	ldr	r2, [pc, #160]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006798:	f7fd fc76 	bl	8004088 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067a0:	f7fd fc72 	bl	8004088 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e314      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x1dc>
 80067be:	e000      	b.n	80067c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d073      	beq.n	80068b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d005      	beq.n	80067e0 <HAL_RCC_OscConfig+0x21c>
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b0c      	cmp	r3, #12
 80067d8:	d10e      	bne.n	80067f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d10b      	bne.n	80067f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e0:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d063      	beq.n	80068b4 <HAL_RCC_OscConfig+0x2f0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d15f      	bne.n	80068b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e2f1      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006800:	d106      	bne.n	8006810 <HAL_RCC_OscConfig+0x24c>
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a0b      	ldr	r2, [pc, #44]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	e025      	b.n	800685c <HAL_RCC_OscConfig+0x298>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006818:	d114      	bne.n	8006844 <HAL_RCC_OscConfig+0x280>
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a05      	ldr	r2, [pc, #20]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	4b03      	ldr	r3, [pc, #12]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a02      	ldr	r2, [pc, #8]	; (8006834 <HAL_RCC_OscConfig+0x270>)
 800682c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e013      	b.n	800685c <HAL_RCC_OscConfig+0x298>
 8006834:	40021000 	.word	0x40021000
 8006838:	08010de8 	.word	0x08010de8
 800683c:	20000018 	.word	0x20000018
 8006840:	2000003c 	.word	0x2000003c
 8006844:	4ba0      	ldr	r3, [pc, #640]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a9f      	ldr	r2, [pc, #636]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 800684a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b9d      	ldr	r3, [pc, #628]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a9c      	ldr	r2, [pc, #624]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d013      	beq.n	800688c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006864:	f7fd fc10 	bl	8004088 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800686c:	f7fd fc0c 	bl	8004088 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e2ae      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800687e:	4b92      	ldr	r3, [pc, #584]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x2a8>
 800688a:	e014      	b.n	80068b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fd fbfc 	bl	8004088 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006894:	f7fd fbf8 	bl	8004088 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	; 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e29a      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068a6:	4b88      	ldr	r3, [pc, #544]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x2d0>
 80068b2:	e000      	b.n	80068b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d060      	beq.n	8006984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d005      	beq.n	80068d4 <HAL_RCC_OscConfig+0x310>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b0c      	cmp	r3, #12
 80068cc:	d119      	bne.n	8006902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d116      	bne.n	8006902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068d4:	4b7c      	ldr	r3, [pc, #496]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_RCC_OscConfig+0x328>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e277      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ec:	4b76      	ldr	r3, [pc, #472]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	061b      	lsls	r3, r3, #24
 80068fa:	4973      	ldr	r1, [pc, #460]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006900:	e040      	b.n	8006984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d023      	beq.n	8006952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800690a:	4b6f      	ldr	r3, [pc, #444]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6e      	ldr	r2, [pc, #440]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006916:	f7fd fbb7 	bl	8004088 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800691c:	e008      	b.n	8006930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800691e:	f7fd fbb3 	bl	8004088 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e255      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006930:	4b65      	ldr	r3, [pc, #404]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693c:	4b62      	ldr	r3, [pc, #392]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	061b      	lsls	r3, r3, #24
 800694a:	495f      	ldr	r1, [pc, #380]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 800694c:	4313      	orrs	r3, r2
 800694e:	604b      	str	r3, [r1, #4]
 8006950:	e018      	b.n	8006984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006952:	4b5d      	ldr	r3, [pc, #372]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a5c      	ldr	r2, [pc, #368]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800695c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fd fb93 	bl	8004088 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006966:	f7fd fb8f 	bl	8004088 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e231      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006978:	4b53      	ldr	r3, [pc, #332]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f0      	bne.n	8006966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d03c      	beq.n	8006a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01c      	beq.n	80069d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006998:	4b4b      	ldr	r3, [pc, #300]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 800699a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800699e:	4a4a      	ldr	r2, [pc, #296]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a8:	f7fd fb6e 	bl	8004088 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069b0:	f7fd fb6a 	bl	8004088 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e20c      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069c2:	4b41      	ldr	r3, [pc, #260]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80069c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0ef      	beq.n	80069b0 <HAL_RCC_OscConfig+0x3ec>
 80069d0:	e01b      	b.n	8006a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069d2:	4b3d      	ldr	r3, [pc, #244]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80069d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d8:	4a3b      	ldr	r2, [pc, #236]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e2:	f7fd fb51 	bl	8004088 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ea:	f7fd fb4d 	bl	8004088 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e1ef      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069fc:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 80069fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ef      	bne.n	80069ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 80a6 	beq.w	8006b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10d      	bne.n	8006a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a28:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	4a26      	ldr	r2, [pc, #152]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a32:	6593      	str	r3, [r2, #88]	; 0x58
 8006a34:	4b24      	ldr	r3, [pc, #144]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a40:	2301      	movs	r3, #1
 8006a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a44:	4b21      	ldr	r3, [pc, #132]	; (8006acc <HAL_RCC_OscConfig+0x508>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d118      	bne.n	8006a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a50:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <HAL_RCC_OscConfig+0x508>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <HAL_RCC_OscConfig+0x508>)
 8006a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a5c:	f7fd fb14 	bl	8004088 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a64:	f7fd fb10 	bl	8004088 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e1b2      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <HAL_RCC_OscConfig+0x508>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d108      	bne.n	8006a9c <HAL_RCC_OscConfig+0x4d8>
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a90:	4a0d      	ldr	r2, [pc, #52]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a9a:	e029      	b.n	8006af0 <HAL_RCC_OscConfig+0x52c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b05      	cmp	r3, #5
 8006aa2:	d115      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x50c>
 8006aa4:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aaa:	4a07      	ldr	r2, [pc, #28]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006aac:	f043 0304 	orr.w	r3, r3, #4
 8006ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ab4:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	4a03      	ldr	r2, [pc, #12]	; (8006ac8 <HAL_RCC_OscConfig+0x504>)
 8006abc:	f043 0301 	orr.w	r3, r3, #1
 8006ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ac4:	e014      	b.n	8006af0 <HAL_RCC_OscConfig+0x52c>
 8006ac6:	bf00      	nop
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40007000 	.word	0x40007000
 8006ad0:	4b9a      	ldr	r3, [pc, #616]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	4a99      	ldr	r2, [pc, #612]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae0:	4b96      	ldr	r3, [pc, #600]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	4a95      	ldr	r2, [pc, #596]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006ae8:	f023 0304 	bic.w	r3, r3, #4
 8006aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d016      	beq.n	8006b26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af8:	f7fd fac6 	bl	8004088 <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006afe:	e00a      	b.n	8006b16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b00:	f7fd fac2 	bl	8004088 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e162      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b16:	4b89      	ldr	r3, [pc, #548]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0ed      	beq.n	8006b00 <HAL_RCC_OscConfig+0x53c>
 8006b24:	e015      	b.n	8006b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b26:	f7fd faaf 	bl	8004088 <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b2c:	e00a      	b.n	8006b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b2e:	f7fd faab 	bl	8004088 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e14b      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b44:	4b7d      	ldr	r3, [pc, #500]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1ed      	bne.n	8006b2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d105      	bne.n	8006b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b58:	4b78      	ldr	r3, [pc, #480]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5c:	4a77      	ldr	r2, [pc, #476]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d03c      	beq.n	8006bea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01c      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b78:	4b70      	ldr	r3, [pc, #448]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b7e:	4a6f      	ldr	r2, [pc, #444]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b88:	f7fd fa7e 	bl	8004088 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b90:	f7fd fa7a 	bl	8004088 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e11c      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ba2:	4b66      	ldr	r3, [pc, #408]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0ef      	beq.n	8006b90 <HAL_RCC_OscConfig+0x5cc>
 8006bb0:	e01b      	b.n	8006bea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bb2:	4b62      	ldr	r3, [pc, #392]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bb8:	4a60      	ldr	r2, [pc, #384]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc2:	f7fd fa61 	bl	8004088 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bca:	f7fd fa5d 	bl	8004088 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e0ff      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bdc:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1ef      	bne.n	8006bca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 80f3 	beq.w	8006dda <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	f040 80c9 	bne.w	8006d90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006bfe:	4b4f      	ldr	r3, [pc, #316]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f003 0203 	and.w	r2, r3, #3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d12c      	bne.n	8006c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d123      	bne.n	8006c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d11b      	bne.n	8006c6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d113      	bne.n	8006c6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	3b01      	subs	r3, #1
 8006c52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d109      	bne.n	8006c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	3b01      	subs	r3, #1
 8006c66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d06b      	beq.n	8006d44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b0c      	cmp	r3, #12
 8006c70:	d062      	beq.n	8006d38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c72:	4b32      	ldr	r3, [pc, #200]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e0ac      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c82:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a2d      	ldr	r2, [pc, #180]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c8e:	f7fd f9fb 	bl	8004088 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c96:	f7fd f9f7 	bl	8004088 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e099      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca8:	4b24      	ldr	r3, [pc, #144]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f0      	bne.n	8006c96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <HAL_RCC_OscConfig+0x77c>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cc4:	3a01      	subs	r2, #1
 8006cc6:	0112      	lsls	r2, r2, #4
 8006cc8:	4311      	orrs	r1, r2
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cce:	0212      	lsls	r2, r2, #8
 8006cd0:	4311      	orrs	r1, r2
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006cd6:	0852      	lsrs	r2, r2, #1
 8006cd8:	3a01      	subs	r2, #1
 8006cda:	0552      	lsls	r2, r2, #21
 8006cdc:	4311      	orrs	r1, r2
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ce2:	0852      	lsrs	r2, r2, #1
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	0652      	lsls	r2, r2, #25
 8006ce8:	4311      	orrs	r1, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cee:	06d2      	lsls	r2, r2, #27
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	4912      	ldr	r1, [pc, #72]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006cf8:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a0f      	ldr	r2, [pc, #60]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4a0c      	ldr	r2, [pc, #48]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d10:	f7fd f9ba 	bl	8004088 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d18:	f7fd f9b6 	bl	8004088 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e058      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d2a:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <HAL_RCC_OscConfig+0x778>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d36:	e050      	b.n	8006dda <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e04f      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d44:	4b27      	ldr	r3, [pc, #156]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d144      	bne.n	8006dda <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d50:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a23      	ldr	r2, [pc, #140]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d5c:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4a20      	ldr	r2, [pc, #128]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d68:	f7fd f98e 	bl	8004088 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d70:	f7fd f98a 	bl	8004088 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e02c      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d82:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0x7ac>
 8006d8e:	e024      	b.n	8006dda <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b0c      	cmp	r3, #12
 8006d94:	d01f      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d96:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a12      	ldr	r2, [pc, #72]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da2:	f7fd f971 	bl	8004088 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006daa:	f7fd f96d 	bl	8004088 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e00f      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	4905      	ldr	r1, [pc, #20]	; (8006de4 <HAL_RCC_OscConfig+0x820>)
 8006dce:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <HAL_RCC_OscConfig+0x824>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60cb      	str	r3, [r1, #12]
 8006dd4:	e001      	b.n	8006dda <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	40021000 	.word	0x40021000
 8006de8:	feeefffc 	.word	0xfeeefffc

08006dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0e7      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e00:	4b75      	ldr	r3, [pc, #468]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d910      	bls.n	8006e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b72      	ldr	r3, [pc, #456]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f023 0207 	bic.w	r2, r3, #7
 8006e16:	4970      	ldr	r1, [pc, #448]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1e:	4b6e      	ldr	r3, [pc, #440]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d001      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0cf      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	4b66      	ldr	r3, [pc, #408]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d908      	bls.n	8006e5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e4c:	4b63      	ldr	r3, [pc, #396]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4960      	ldr	r1, [pc, #384]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04c      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e72:	4b5a      	ldr	r3, [pc, #360]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d121      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e0a6      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d107      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e8a:	4b54      	ldr	r3, [pc, #336]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d115      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e09a      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ea2:	4b4e      	ldr	r3, [pc, #312]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e08e      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eb2:	4b4a      	ldr	r3, [pc, #296]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e086      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ec2:	4b46      	ldr	r3, [pc, #280]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f023 0203 	bic.w	r2, r3, #3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4943      	ldr	r1, [pc, #268]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed4:	f7fd f8d8 	bl	8004088 <HAL_GetTick>
 8006ed8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eda:	e00a      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006edc:	f7fd f8d4 	bl	8004088 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e06e      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef2:	4b3a      	ldr	r3, [pc, #232]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 020c 	and.w	r2, r3, #12
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d1eb      	bne.n	8006edc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d010      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	4b31      	ldr	r3, [pc, #196]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d208      	bcs.n	8006f32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f20:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	492b      	ldr	r1, [pc, #172]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f32:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d210      	bcs.n	8006f62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f023 0207 	bic.w	r2, r3, #7
 8006f48:	4923      	ldr	r1, [pc, #140]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f50:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d001      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e036      	b.n	8006fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	4918      	ldr	r1, [pc, #96]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f8c:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	4910      	ldr	r1, [pc, #64]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fa0:	f000 f824 	bl	8006fec <HAL_RCC_GetSysClockFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <HAL_RCC_ClockConfig+0x1f0>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	091b      	lsrs	r3, r3, #4
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	490b      	ldr	r1, [pc, #44]	; (8006fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8006fbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006fc0:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fd f80f 	bl	8003fe8 <HAL_InitTick>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8006fce:	7afb      	ldrb	r3, [r7, #11]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40022000 	.word	0x40022000
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	08010de8 	.word	0x08010de8
 8006fe4:	20000018 	.word	0x20000018
 8006fe8:	2000003c 	.word	0x2000003c

08006fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b089      	sub	sp, #36	; 0x24
 8006ff0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffa:	4b3e      	ldr	r3, [pc, #248]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 030c 	and.w	r3, r3, #12
 8007002:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007004:	4b3b      	ldr	r3, [pc, #236]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0303 	and.w	r3, r3, #3
 800700c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_GetSysClockFreq+0x34>
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b0c      	cmp	r3, #12
 8007018:	d121      	bne.n	800705e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d11e      	bne.n	800705e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007020:	4b34      	ldr	r3, [pc, #208]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d107      	bne.n	800703c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800702c:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800702e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	e005      	b.n	8007048 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800703c:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007048:	4a2b      	ldr	r2, [pc, #172]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007050:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10d      	bne.n	8007074 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800705c:	e00a      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d102      	bne.n	800706a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_RCC_GetSysClockFreq+0x110>)
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	e004      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b08      	cmp	r3, #8
 800706e:	d101      	bne.n	8007074 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007070:	4b23      	ldr	r3, [pc, #140]	; (8007100 <HAL_RCC_GetSysClockFreq+0x114>)
 8007072:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b0c      	cmp	r3, #12
 8007078:	d134      	bne.n	80070e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800707a:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d003      	beq.n	8007092 <HAL_RCC_GetSysClockFreq+0xa6>
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b03      	cmp	r3, #3
 800708e:	d003      	beq.n	8007098 <HAL_RCC_GetSysClockFreq+0xac>
 8007090:	e005      	b.n	800709e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007092:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <HAL_RCC_GetSysClockFreq+0x110>)
 8007094:	617b      	str	r3, [r7, #20]
      break;
 8007096:	e005      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007098:	4b19      	ldr	r3, [pc, #100]	; (8007100 <HAL_RCC_GetSysClockFreq+0x114>)
 800709a:	617b      	str	r3, [r7, #20]
      break;
 800709c:	e002      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	617b      	str	r3, [r7, #20]
      break;
 80070a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070a4:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	091b      	lsrs	r3, r3, #4
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	3301      	adds	r3, #1
 80070b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	0a1b      	lsrs	r3, r3, #8
 80070b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	fb03 f202 	mul.w	r2, r3, r2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	0e5b      	lsrs	r3, r3, #25
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	3301      	adds	r3, #1
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80070e4:	69bb      	ldr	r3, [r7, #24]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3724      	adds	r7, #36	; 0x24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40021000 	.word	0x40021000
 80070f8:	08010e00 	.word	0x08010e00
 80070fc:	00f42400 	.word	0x00f42400
 8007100:	007a1200 	.word	0x007a1200

08007104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007108:	4b03      	ldr	r3, [pc, #12]	; (8007118 <HAL_RCC_GetHCLKFreq+0x14>)
 800710a:	681b      	ldr	r3, [r3, #0]
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000018 	.word	0x20000018

0800711c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007120:	f7ff fff0 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 8007124:	4602      	mov	r2, r0
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	0a1b      	lsrs	r3, r3, #8
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	4904      	ldr	r1, [pc, #16]	; (8007144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007132:	5ccb      	ldrb	r3, [r1, r3]
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800713c:	4618      	mov	r0, r3
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40021000 	.word	0x40021000
 8007144:	08010df8 	.word	0x08010df8

08007148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800714c:	f7ff ffda 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 8007150:	4602      	mov	r2, r0
 8007152:	4b06      	ldr	r3, [pc, #24]	; (800716c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	0adb      	lsrs	r3, r3, #11
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	4904      	ldr	r1, [pc, #16]	; (8007170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800715e:	5ccb      	ldrb	r3, [r1, r3]
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007168:	4618      	mov	r0, r3
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40021000 	.word	0x40021000
 8007170:	08010df8 	.word	0x08010df8

08007174 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007180:	4b2a      	ldr	r3, [pc, #168]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800718c:	f7ff f9b6 	bl	80064fc <HAL_PWREx_GetVoltageRange>
 8007190:	6178      	str	r0, [r7, #20]
 8007192:	e014      	b.n	80071be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007194:	4b25      	ldr	r3, [pc, #148]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	4a24      	ldr	r2, [pc, #144]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800719a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719e:	6593      	str	r3, [r2, #88]	; 0x58
 80071a0:	4b22      	ldr	r3, [pc, #136]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071ac:	f7ff f9a6 	bl	80064fc <HAL_PWREx_GetVoltageRange>
 80071b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071b2:	4b1e      	ldr	r3, [pc, #120]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	4a1d      	ldr	r2, [pc, #116]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071c4:	d10b      	bne.n	80071de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b80      	cmp	r3, #128	; 0x80
 80071ca:	d919      	bls.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2ba0      	cmp	r3, #160	; 0xa0
 80071d0:	d902      	bls.n	80071d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071d2:	2302      	movs	r3, #2
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	e013      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071d8:	2301      	movs	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	e010      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b80      	cmp	r3, #128	; 0x80
 80071e2:	d902      	bls.n	80071ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80071e4:	2303      	movs	r3, #3
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	e00a      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d102      	bne.n	80071f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071f0:	2302      	movs	r3, #2
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	e004      	b.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b70      	cmp	r3, #112	; 0x70
 80071fa:	d101      	bne.n	8007200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071fc:	2301      	movs	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f023 0207 	bic.w	r2, r3, #7
 8007208:	4909      	ldr	r1, [pc, #36]	; (8007230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	429a      	cmp	r2, r3
 800721c:	d001      	beq.n	8007222 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	40021000 	.word	0x40021000
 8007230:	40022000 	.word	0x40022000

08007234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800723c:	2300      	movs	r3, #0
 800723e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007240:	2300      	movs	r3, #0
 8007242:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724c:	2b00      	cmp	r3, #0
 800724e:	d031      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007254:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007258:	d01a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800725a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800725e:	d814      	bhi.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d009      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007268:	d10f      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800726a:	4b5d      	ldr	r3, [pc, #372]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	4a5c      	ldr	r2, [pc, #368]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007274:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007276:	e00c      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f9ce 	bl	8007620 <RCCEx_PLLSAI1_Config>
 8007284:	4603      	mov	r3, r0
 8007286:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	74fb      	strb	r3, [r7, #19]
      break;
 800728e:	e000      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007292:	7cfb      	ldrb	r3, [r7, #19]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10b      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007298:	4b51      	ldr	r3, [pc, #324]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800729a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	494e      	ldr	r1, [pc, #312]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80072ae:	e001      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 809e 	beq.w	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072c2:	2300      	movs	r3, #0
 80072c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072c6:	4b46      	ldr	r3, [pc, #280]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00d      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072dc:	4b40      	ldr	r3, [pc, #256]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e0:	4a3f      	ldr	r2, [pc, #252]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e6:	6593      	str	r3, [r2, #88]	; 0x58
 80072e8:	4b3d      	ldr	r3, [pc, #244]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072f4:	2301      	movs	r3, #1
 80072f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072f8:	4b3a      	ldr	r3, [pc, #232]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a39      	ldr	r2, [pc, #228]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007304:	f7fc fec0 	bl	8004088 <HAL_GetTick>
 8007308:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800730a:	e009      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800730c:	f7fc febc 	bl	8004088 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d902      	bls.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	74fb      	strb	r3, [r7, #19]
        break;
 800731e:	e005      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007320:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0ef      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800732c:	7cfb      	ldrb	r3, [r7, #19]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d15a      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007332:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01e      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	429a      	cmp	r2, r3
 800734c:	d019      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800734e:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007358:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800735a:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800735c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007360:	4a1f      	ldr	r2, [pc, #124]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800736a:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800737a:	4a19      	ldr	r2, [pc, #100]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d016      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738c:	f7fc fe7c 	bl	8004088 <HAL_GetTick>
 8007390:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007392:	e00b      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007394:	f7fc fe78 	bl	8004088 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d902      	bls.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	74fb      	strb	r3, [r7, #19]
            break;
 80073aa:	e006      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0ec      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80073ba:	7cfb      	ldrb	r3, [r7, #19]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073c0:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	4904      	ldr	r1, [pc, #16]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80073d6:	e009      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073d8:	7cfb      	ldrb	r3, [r7, #19]
 80073da:	74bb      	strb	r3, [r7, #18]
 80073dc:	e006      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80073de:	bf00      	nop
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e8:	7cfb      	ldrb	r3, [r7, #19]
 80073ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073ec:	7c7b      	ldrb	r3, [r7, #17]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d105      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f2:	4b8a      	ldr	r3, [pc, #552]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f6:	4a89      	ldr	r2, [pc, #548]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800740a:	4b84      	ldr	r3, [pc, #528]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	f023 0203 	bic.w	r2, r3, #3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	4980      	ldr	r1, [pc, #512]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800741a:	4313      	orrs	r3, r2
 800741c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800742c:	4b7b      	ldr	r3, [pc, #492]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007432:	f023 020c 	bic.w	r2, r3, #12
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	4978      	ldr	r1, [pc, #480]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800744e:	4b73      	ldr	r3, [pc, #460]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	496f      	ldr	r1, [pc, #444]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00a      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007470:	4b6a      	ldr	r3, [pc, #424]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747e:	4967      	ldr	r1, [pc, #412]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007492:	4b62      	ldr	r3, [pc, #392]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	495e      	ldr	r1, [pc, #376]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00a      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074b4:	4b59      	ldr	r3, [pc, #356]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	4956      	ldr	r1, [pc, #344]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074d6:	4b51      	ldr	r3, [pc, #324]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	494d      	ldr	r1, [pc, #308]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d028      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074f8:	4b48      	ldr	r3, [pc, #288]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	4945      	ldr	r1, [pc, #276]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007516:	d106      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007518:	4b40      	ldr	r3, [pc, #256]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a3f      	ldr	r2, [pc, #252]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800751e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007522:	60d3      	str	r3, [r2, #12]
 8007524:	e011      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800752e:	d10c      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3304      	adds	r3, #4
 8007534:	2101      	movs	r1, #1
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f872 	bl	8007620 <RCCEx_PLLSAI1_Config>
 800753c:	4603      	mov	r3, r0
 800753e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007540:	7cfb      	ldrb	r3, [r7, #19]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007546:	7cfb      	ldrb	r3, [r7, #19]
 8007548:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d028      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007556:	4b31      	ldr	r3, [pc, #196]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007564:	492d      	ldr	r1, [pc, #180]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007566:	4313      	orrs	r3, r2
 8007568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007574:	d106      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007576:	4b29      	ldr	r3, [pc, #164]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	4a28      	ldr	r2, [pc, #160]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800757c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007580:	60d3      	str	r3, [r2, #12]
 8007582:	e011      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800758c:	d10c      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3304      	adds	r3, #4
 8007592:	2101      	movs	r1, #1
 8007594:	4618      	mov	r0, r3
 8007596:	f000 f843 	bl	8007620 <RCCEx_PLLSAI1_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800759e:	7cfb      	ldrb	r3, [r7, #19]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80075a4:	7cfb      	ldrb	r3, [r7, #19]
 80075a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01c      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075b4:	4b19      	ldr	r3, [pc, #100]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c2:	4916      	ldr	r1, [pc, #88]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075d2:	d10c      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	2102      	movs	r1, #2
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f820 	bl	8007620 <RCCEx_PLLSAI1_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075e4:	7cfb      	ldrb	r3, [r7, #19]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80075ea:	7cfb      	ldrb	r3, [r7, #19]
 80075ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075fa:	4b08      	ldr	r3, [pc, #32]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007600:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007608:	4904      	ldr	r1, [pc, #16]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800760a:	4313      	orrs	r3, r2
 800760c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007610:	7cbb      	ldrb	r3, [r7, #18]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40021000 	.word	0x40021000

08007620 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800762e:	4b74      	ldr	r3, [pc, #464]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d018      	beq.n	800766c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800763a:	4b71      	ldr	r3, [pc, #452]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f003 0203 	and.w	r2, r3, #3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d10d      	bne.n	8007666 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
       ||
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007652:	4b6b      	ldr	r3, [pc, #428]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	091b      	lsrs	r3, r3, #4
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
       ||
 8007662:	429a      	cmp	r2, r3
 8007664:	d047      	beq.n	80076f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	73fb      	strb	r3, [r7, #15]
 800766a:	e044      	b.n	80076f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b03      	cmp	r3, #3
 8007672:	d018      	beq.n	80076a6 <RCCEx_PLLSAI1_Config+0x86>
 8007674:	2b03      	cmp	r3, #3
 8007676:	d825      	bhi.n	80076c4 <RCCEx_PLLSAI1_Config+0xa4>
 8007678:	2b01      	cmp	r3, #1
 800767a:	d002      	beq.n	8007682 <RCCEx_PLLSAI1_Config+0x62>
 800767c:	2b02      	cmp	r3, #2
 800767e:	d009      	beq.n	8007694 <RCCEx_PLLSAI1_Config+0x74>
 8007680:	e020      	b.n	80076c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007682:	4b5f      	ldr	r3, [pc, #380]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d11d      	bne.n	80076ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007692:	e01a      	b.n	80076ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007694:	4b5a      	ldr	r3, [pc, #360]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800769c:	2b00      	cmp	r3, #0
 800769e:	d116      	bne.n	80076ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a4:	e013      	b.n	80076ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076a6:	4b56      	ldr	r3, [pc, #344]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10f      	bne.n	80076d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076b2:	4b53      	ldr	r3, [pc, #332]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076c2:	e006      	b.n	80076d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
      break;
 80076c8:	e004      	b.n	80076d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076da:	4b49      	ldr	r3, [pc, #292]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6819      	ldr	r1, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	430b      	orrs	r3, r1
 80076f0:	4943      	ldr	r1, [pc, #268]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d17c      	bne.n	80077f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076fc:	4b40      	ldr	r3, [pc, #256]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a3f      	ldr	r2, [pc, #252]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007708:	f7fc fcbe 	bl	8004088 <HAL_GetTick>
 800770c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800770e:	e009      	b.n	8007724 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007710:	f7fc fcba 	bl	8004088 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d902      	bls.n	8007724 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	73fb      	strb	r3, [r7, #15]
        break;
 8007722:	e005      	b.n	8007730 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007724:	4b36      	ldr	r3, [pc, #216]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1ef      	bne.n	8007710 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d15f      	bne.n	80077f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d110      	bne.n	800775e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800773c:	4b30      	ldr	r3, [pc, #192]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007744:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6892      	ldr	r2, [r2, #8]
 800774c:	0211      	lsls	r1, r2, #8
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	68d2      	ldr	r2, [r2, #12]
 8007752:	06d2      	lsls	r2, r2, #27
 8007754:	430a      	orrs	r2, r1
 8007756:	492a      	ldr	r1, [pc, #168]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007758:	4313      	orrs	r3, r2
 800775a:	610b      	str	r3, [r1, #16]
 800775c:	e027      	b.n	80077ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d112      	bne.n	800778a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007764:	4b26      	ldr	r3, [pc, #152]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800776c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6892      	ldr	r2, [r2, #8]
 8007774:	0211      	lsls	r1, r2, #8
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6912      	ldr	r2, [r2, #16]
 800777a:	0852      	lsrs	r2, r2, #1
 800777c:	3a01      	subs	r2, #1
 800777e:	0552      	lsls	r2, r2, #21
 8007780:	430a      	orrs	r2, r1
 8007782:	491f      	ldr	r1, [pc, #124]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007784:	4313      	orrs	r3, r2
 8007786:	610b      	str	r3, [r1, #16]
 8007788:	e011      	b.n	80077ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800778a:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007792:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6892      	ldr	r2, [r2, #8]
 800779a:	0211      	lsls	r1, r2, #8
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6952      	ldr	r2, [r2, #20]
 80077a0:	0852      	lsrs	r2, r2, #1
 80077a2:	3a01      	subs	r2, #1
 80077a4:	0652      	lsls	r2, r2, #25
 80077a6:	430a      	orrs	r2, r1
 80077a8:	4915      	ldr	r1, [pc, #84]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a13      	ldr	r2, [pc, #76]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ba:	f7fc fc65 	bl	8004088 <HAL_GetTick>
 80077be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077c0:	e009      	b.n	80077d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077c2:	f7fc fc61 	bl	8004088 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d902      	bls.n	80077d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	73fb      	strb	r3, [r7, #15]
          break;
 80077d4:	e005      	b.n	80077e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0ef      	beq.n	80077c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	4903      	ldr	r1, [pc, #12]	; (8007800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40021000 	.word	0x40021000

08007804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e095      	b.n	8007942 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d108      	bne.n	8007830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007826:	d009      	beq.n	800783c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	61da      	str	r2, [r3, #28]
 800782e:	e005      	b.n	800783c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fb fb18 	bl	8002e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007872:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800787c:	d902      	bls.n	8007884 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e002      	b.n	800788a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007888:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007892:	d007      	beq.n	80078a4 <HAL_SPI_Init+0xa0>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800789c:	d002      	beq.n	80078a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e6:	ea42 0103 	orr.w	r1, r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	0c1b      	lsrs	r3, r3, #16
 8007900:	f003 0204 	and.w	r2, r3, #4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007920:	ea42 0103 	orr.w	r1, r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b088      	sub	sp, #32
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	603b      	str	r3, [r7, #0]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_SPI_Transmit+0x22>
 8007968:	2302      	movs	r3, #2
 800796a:	e15f      	b.n	8007c2c <HAL_SPI_Transmit+0x2e2>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007974:	f7fc fb88 	bl	8004088 <HAL_GetTick>
 8007978:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d002      	beq.n	8007990 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800798a:	2302      	movs	r3, #2
 800798c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800798e:	e148      	b.n	8007c22 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_SPI_Transmit+0x52>
 8007996:	88fb      	ldrh	r3, [r7, #6]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079a0:	e13f      	b.n	8007c22 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2203      	movs	r2, #3
 80079a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	88fa      	ldrh	r2, [r7, #6]
 80079c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ec:	d10f      	bne.n	8007a0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a18:	2b40      	cmp	r3, #64	; 0x40
 8007a1a:	d007      	beq.n	8007a2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a34:	d94f      	bls.n	8007ad6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_SPI_Transmit+0xfa>
 8007a3e:	8afb      	ldrh	r3, [r7, #22]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d142      	bne.n	8007aca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a68:	e02f      	b.n	8007aca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d112      	bne.n	8007a9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	881a      	ldrh	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	1c9a      	adds	r2, r3, #2
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a9c:	e015      	b.n	8007aca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a9e:	f7fc faf3 	bl	8004088 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d803      	bhi.n	8007ab6 <HAL_SPI_Transmit+0x16c>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab4:	d102      	bne.n	8007abc <HAL_SPI_Transmit+0x172>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007ac8:	e0ab      	b.n	8007c22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1ca      	bne.n	8007a6a <HAL_SPI_Transmit+0x120>
 8007ad4:	e080      	b.n	8007bd8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <HAL_SPI_Transmit+0x19a>
 8007ade:	8afb      	ldrh	r3, [r7, #22]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d174      	bne.n	8007bce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d912      	bls.n	8007b14 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	881a      	ldrh	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	1c9a      	adds	r2, r3, #2
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b02      	subs	r3, #2
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b12:	e05c      	b.n	8007bce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	7812      	ldrb	r2, [r2, #0]
 8007b20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b3a:	e048      	b.n	8007bce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d12b      	bne.n	8007ba2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d912      	bls.n	8007b7a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	881a      	ldrh	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b02      	subs	r3, #2
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b78:	e029      	b.n	8007bce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	7812      	ldrb	r2, [r2, #0]
 8007b86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ba0:	e015      	b.n	8007bce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ba2:	f7fc fa71 	bl	8004088 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d803      	bhi.n	8007bba <HAL_SPI_Transmit+0x270>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bb8:	d102      	bne.n	8007bc0 <HAL_SPI_Transmit+0x276>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007bcc:	e029      	b.n	8007c22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1b1      	bne.n	8007b3c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fe89 	bl	80088f4 <SPI_EndRxTxTransaction>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e003      	b.n	8007c22 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d002      	beq.n	8007c5a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007c54:	2302      	movs	r3, #2
 8007c56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c58:	e11a      	b.n	8007e90 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c62:	d112      	bne.n	8007c8a <HAL_SPI_Receive+0x56>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10e      	bne.n	8007c8a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2204      	movs	r2, #4
 8007c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c74:	88fa      	ldrh	r2, [r7, #6]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 f90e 	bl	8007ea2 <HAL_SPI_TransmitReceive>
 8007c86:	4603      	mov	r3, r0
 8007c88:	e107      	b.n	8007e9a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_SPI_Receive+0x64>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e100      	b.n	8007e9a <HAL_SPI_Receive+0x266>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ca0:	f7fc f9f2 	bl	8004088 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_SPI_Receive+0x7e>
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cb6:	e0eb      	b.n	8007e90 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d02:	d908      	bls.n	8007d16 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d12:	605a      	str	r2, [r3, #4]
 8007d14:	e007      	b.n	8007d26 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d24:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2e:	d10f      	bne.n	8007d50 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d007      	beq.n	8007d6e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d76:	d86f      	bhi.n	8007e58 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d78:	e034      	b.n	8007de4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d117      	bne.n	8007db8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f103 020c 	add.w	r2, r3, #12
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	7812      	ldrb	r2, [r2, #0]
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007db6:	e015      	b.n	8007de4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007db8:	f7fc f966 	bl	8004088 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d803      	bhi.n	8007dd0 <HAL_SPI_Receive+0x19c>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dce:	d102      	bne.n	8007dd6 <HAL_SPI_Receive+0x1a2>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007de2:	e055      	b.n	8007e90 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1c4      	bne.n	8007d7a <HAL_SPI_Receive+0x146>
 8007df0:	e038      	b.n	8007e64 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d115      	bne.n	8007e2c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	b292      	uxth	r2, r2
 8007e0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	1c9a      	adds	r2, r3, #2
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e2a:	e015      	b.n	8007e58 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e2c:	f7fc f92c 	bl	8004088 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d803      	bhi.n	8007e44 <HAL_SPI_Receive+0x210>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e42:	d102      	bne.n	8007e4a <HAL_SPI_Receive+0x216>
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007e56:	e01b      	b.n	8007e90 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1c6      	bne.n	8007df2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fceb 	bl	8008844 <SPI_EndRxTransaction>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2220      	movs	r2, #32
 8007e78:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
 8007e86:	e003      	b.n	8007e90 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b08a      	sub	sp, #40	; 0x28
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
 8007eae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_SPI_TransmitReceive+0x26>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e20a      	b.n	80082de <HAL_SPI_TransmitReceive+0x43c>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ed0:	f7fc f8da 	bl	8004088 <HAL_GetTick>
 8007ed4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007edc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ee4:	887b      	ldrh	r3, [r7, #2]
 8007ee6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007ee8:	887b      	ldrh	r3, [r7, #2]
 8007eea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007eec:	7efb      	ldrb	r3, [r7, #27]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d00e      	beq.n	8007f10 <HAL_SPI_TransmitReceive+0x6e>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ef8:	d106      	bne.n	8007f08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <HAL_SPI_TransmitReceive+0x66>
 8007f02:	7efb      	ldrb	r3, [r7, #27]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d003      	beq.n	8007f10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f0e:	e1e0      	b.n	80082d2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_SPI_TransmitReceive+0x80>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_SPI_TransmitReceive+0x80>
 8007f1c:	887b      	ldrh	r3, [r7, #2]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f28:	e1d3      	b.n	80082d2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d003      	beq.n	8007f3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2205      	movs	r2, #5
 8007f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	887a      	ldrh	r2, [r7, #2]
 8007f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	887a      	ldrh	r2, [r7, #2]
 8007f56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	887a      	ldrh	r2, [r7, #2]
 8007f64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	887a      	ldrh	r2, [r7, #2]
 8007f6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f80:	d802      	bhi.n	8007f88 <HAL_SPI_TransmitReceive+0xe6>
 8007f82:	8a3b      	ldrh	r3, [r7, #16]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d908      	bls.n	8007f9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f96:	605a      	str	r2, [r3, #4]
 8007f98:	e007      	b.n	8007faa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fa8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb4:	2b40      	cmp	r3, #64	; 0x40
 8007fb6:	d007      	beq.n	8007fc8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fd0:	f240 8081 	bls.w	80080d6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <HAL_SPI_TransmitReceive+0x140>
 8007fdc:	8a7b      	ldrh	r3, [r7, #18]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d16d      	bne.n	80080be <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	881a      	ldrh	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	1c9a      	adds	r2, r3, #2
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008006:	e05a      	b.n	80080be <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b02      	cmp	r3, #2
 8008014:	d11b      	bne.n	800804e <HAL_SPI_TransmitReceive+0x1ac>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800801a:	b29b      	uxth	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d016      	beq.n	800804e <HAL_SPI_TransmitReceive+0x1ac>
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	2b01      	cmp	r3, #1
 8008024:	d113      	bne.n	800804e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	881a      	ldrh	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	1c9a      	adds	r2, r3, #2
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b01      	cmp	r3, #1
 800805a:	d11c      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x1f4>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d016      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	b292      	uxth	r2, r2
 8008074:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	1c9a      	adds	r2, r3, #2
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008092:	2301      	movs	r3, #1
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008096:	f7fb fff7 	bl	8004088 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d80b      	bhi.n	80080be <HAL_SPI_TransmitReceive+0x21c>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ac:	d007      	beq.n	80080be <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80080bc:	e109      	b.n	80082d2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d19f      	bne.n	8008008 <HAL_SPI_TransmitReceive+0x166>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d199      	bne.n	8008008 <HAL_SPI_TransmitReceive+0x166>
 80080d4:	e0e3      	b.n	800829e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_SPI_TransmitReceive+0x244>
 80080de:	8a7b      	ldrh	r3, [r7, #18]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	f040 80cf 	bne.w	8008284 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d912      	bls.n	8008116 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	881a      	ldrh	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	1c9a      	adds	r2, r3, #2
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b02      	subs	r3, #2
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008114:	e0b6      	b.n	8008284 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	330c      	adds	r3, #12
 8008120:	7812      	ldrb	r2, [r2, #0]
 8008122:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800813c:	e0a2      	b.n	8008284 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b02      	cmp	r3, #2
 800814a:	d134      	bne.n	80081b6 <HAL_SPI_TransmitReceive+0x314>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d02f      	beq.n	80081b6 <HAL_SPI_TransmitReceive+0x314>
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	2b01      	cmp	r3, #1
 800815a:	d12c      	bne.n	80081b6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	d912      	bls.n	800818c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	881a      	ldrh	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	1c9a      	adds	r2, r3, #2
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b02      	subs	r3, #2
 8008184:	b29a      	uxth	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800818a:	e012      	b.n	80081b2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d148      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x3b4>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d042      	beq.n	8008256 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d923      	bls.n	8008224 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	b292      	uxth	r2, r2
 80081e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	1c9a      	adds	r2, r3, #2
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b02      	subs	r3, #2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b01      	cmp	r3, #1
 8008210:	d81f      	bhi.n	8008252 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008220:	605a      	str	r2, [r3, #4]
 8008222:	e016      	b.n	8008252 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f103 020c 	add.w	r2, r3, #12
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	7812      	ldrb	r2, [r2, #0]
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008252:	2301      	movs	r3, #1
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008256:	f7fb ff17 	bl	8004088 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008262:	429a      	cmp	r2, r3
 8008264:	d803      	bhi.n	800826e <HAL_SPI_TransmitReceive+0x3cc>
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826c:	d102      	bne.n	8008274 <HAL_SPI_TransmitReceive+0x3d2>
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d107      	bne.n	8008284 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8008282:	e026      	b.n	80082d2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	f47f af57 	bne.w	800813e <HAL_SPI_TransmitReceive+0x29c>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	f47f af50 	bne.w	800813e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fb26 	bl	80088f4 <SPI_EndRxTxTransaction>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c8:	e003      	b.n	80082d2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_SPI_Transmit_DMA+0x20>
 8008304:	2302      	movs	r3, #2
 8008306:	e0d4      	b.n	80084b2 <HAL_SPI_Transmit_DMA+0x1ca>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b01      	cmp	r3, #1
 800831a:	d002      	beq.n	8008322 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800831c:	2302      	movs	r3, #2
 800831e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008320:	e0c2      	b.n	80084a8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_SPI_Transmit_DMA+0x46>
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008332:	e0b9      	b.n	80084a8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2203      	movs	r2, #3
 8008338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	88fa      	ldrh	r2, [r7, #6]
 8008352:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837e:	d10f      	bne.n	80083a0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800838e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800839e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a4:	4a45      	ldr	r2, [pc, #276]	; (80084bc <HAL_SPI_Transmit_DMA+0x1d4>)
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ac:	4a44      	ldr	r2, [pc, #272]	; (80084c0 <HAL_SPI_Transmit_DMA+0x1d8>)
 80083ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b4:	4a43      	ldr	r2, [pc, #268]	; (80084c4 <HAL_SPI_Transmit_DMA+0x1dc>)
 80083b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083bc:	2200      	movs	r2, #0
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083ce:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083d8:	d82d      	bhi.n	8008436 <HAL_SPI_Transmit_DMA+0x14e>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e4:	d127      	bne.n	8008436 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10f      	bne.n	8008414 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008402:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008408:	b29b      	uxth	r3, r3
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008412:	e010      	b.n	8008436 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008422:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008428:	b29b      	uxth	r3, r3
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	b29b      	uxth	r3, r3
 800842e:	3301      	adds	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	4619      	mov	r1, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800844c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800844e:	f7fc ffce 	bl	80053ee <HAL_DMA_Start_IT>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d008      	beq.n	800846a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800845c:	f043 0210 	orr.w	r2, r3, #16
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008468:	e01e      	b.n	80084a8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d007      	beq.n	8008488 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008486:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0220 	orr.w	r2, r2, #32
 8008496:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0202 	orr.w	r2, r2, #2
 80084a6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	080085ab 	.word	0x080085ab
 80084c0:	08008505 	.word	0x08008505
 80084c4:	080085c7 	.word	0x080085c7

080084c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008512:	f7fb fdb9 	bl	8004088 <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b20      	cmp	r3, #32
 8008524:	d03b      	beq.n	800859e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0220 	bic.w	r2, r2, #32
 8008534:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0202 	bic.w	r2, r2, #2
 8008544:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	2164      	movs	r1, #100	; 0x64
 800854a:	6978      	ldr	r0, [r7, #20]
 800854c:	f000 f9d2 	bl	80088f4 <SPI_EndRxTxTransaction>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855a:	f043 0220 	orr.w	r2, r3, #32
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2200      	movs	r2, #0
 8008584:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008596:	6978      	ldr	r0, [r7, #20]
 8008598:	f7ff ffaa 	bl	80084f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800859c:	e002      	b.n	80085a4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800859e:	6978      	ldr	r0, [r7, #20]
 80085a0:	f7ff ff92 	bl	80084c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff ff8f 	bl	80084dc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0203 	bic.w	r2, r2, #3
 80085e2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e8:	f043 0210 	orr.w	r2, r3, #16
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff ff79 	bl	80084f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	4613      	mov	r3, r2
 8008616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008618:	f7fb fd36 	bl	8004088 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	4413      	add	r3, r2
 8008626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008628:	f7fb fd2e 	bl	8004088 <HAL_GetTick>
 800862c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800862e:	4b39      	ldr	r3, [pc, #228]	; (8008714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	015b      	lsls	r3, r3, #5
 8008634:	0d1b      	lsrs	r3, r3, #20
 8008636:	69fa      	ldr	r2, [r7, #28]
 8008638:	fb02 f303 	mul.w	r3, r2, r3
 800863c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800863e:	e054      	b.n	80086ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008646:	d050      	beq.n	80086ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008648:	f7fb fd1e 	bl	8004088 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	69fa      	ldr	r2, [r7, #28]
 8008654:	429a      	cmp	r2, r3
 8008656:	d902      	bls.n	800865e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d13d      	bne.n	80086da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800866c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008676:	d111      	bne.n	800869c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008680:	d004      	beq.n	800868c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800868a:	d107      	bne.n	800869c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800869a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a4:	d10f      	bne.n	80086c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e017      	b.n	800870a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4013      	ands	r3, r2
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	bf0c      	ite	eq
 80086fa:	2301      	moveq	r3, #1
 80086fc:	2300      	movne	r3, #0
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	429a      	cmp	r2, r3
 8008706:	d19b      	bne.n	8008640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3720      	adds	r7, #32
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000018 	.word	0x20000018

08008718 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800872a:	f7fb fcad 	bl	8004088 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	4413      	add	r3, r2
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800873a:	f7fb fca5 	bl	8004088 <HAL_GetTick>
 800873e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008748:	4b3d      	ldr	r3, [pc, #244]	; (8008840 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	00da      	lsls	r2, r3, #3
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	0d1b      	lsrs	r3, r3, #20
 8008758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875a:	fb02 f303 	mul.w	r3, r2, r3
 800875e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008760:	e060      	b.n	8008824 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008768:	d107      	bne.n	800877a <SPI_WaitFifoStateUntilTimeout+0x62>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d104      	bne.n	800877a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008778:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008780:	d050      	beq.n	8008824 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008782:	f7fb fc81 	bl	8004088 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878e:	429a      	cmp	r2, r3
 8008790:	d902      	bls.n	8008798 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d13d      	bne.n	8008814 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087b0:	d111      	bne.n	80087d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ba:	d004      	beq.n	80087c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c4:	d107      	bne.n	80087d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087de:	d10f      	bne.n	8008800 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e010      	b.n	8008836 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	3b01      	subs	r3, #1
 8008822:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	429a      	cmp	r2, r3
 8008832:	d196      	bne.n	8008762 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3728      	adds	r7, #40	; 0x28
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000018 	.word	0x20000018

08008844 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af02      	add	r7, sp, #8
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008858:	d111      	bne.n	800887e <SPI_EndRxTransaction+0x3a>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008862:	d004      	beq.n	800886e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800886c:	d107      	bne.n	800887e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800887c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	2180      	movs	r1, #128	; 0x80
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff febd 	bl	8008608 <SPI_WaitFlagStateUntilTimeout>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d007      	beq.n	80088a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008898:	f043 0220 	orr.w	r2, r3, #32
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e023      	b.n	80088ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ac:	d11d      	bne.n	80088ea <SPI_EndRxTransaction+0xa6>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088b6:	d004      	beq.n	80088c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c0:	d113      	bne.n	80088ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff ff22 	bl	8008718 <SPI_WaitFifoStateUntilTimeout>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d007      	beq.n	80088ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088de:	f043 0220 	orr.w	r2, r3, #32
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e000      	b.n	80088ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff ff03 	bl	8008718 <SPI_WaitFifoStateUntilTimeout>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891c:	f043 0220 	orr.w	r2, r3, #32
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e027      	b.n	8008978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	2180      	movs	r1, #128	; 0x80
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fe68 	bl	8008608 <SPI_WaitFlagStateUntilTimeout>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008942:	f043 0220 	orr.w	r2, r3, #32
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e014      	b.n	8008978 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2200      	movs	r2, #0
 8008956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f7ff fedc 	bl	8008718 <SPI_WaitFifoStateUntilTimeout>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d007      	beq.n	8008976 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800896a:	f043 0220 	orr.w	r2, r3, #32
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e000      	b.n	8008978 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e049      	b.n	8008a26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fa fad4 	bl	8002f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f000 fbfe 	bl	80091c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d001      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e03b      	b.n	8008ac0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0201 	orr.w	r2, r2, #1
 8008a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a19      	ldr	r2, [pc, #100]	; (8008acc <HAL_TIM_Base_Start_IT+0x9c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d009      	beq.n	8008a7e <HAL_TIM_Base_Start_IT+0x4e>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a72:	d004      	beq.n	8008a7e <HAL_TIM_Base_Start_IT+0x4e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d115      	bne.n	8008aaa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xa4>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2b06      	cmp	r3, #6
 8008a8e:	d015      	beq.n	8008abc <HAL_TIM_Base_Start_IT+0x8c>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a96:	d011      	beq.n	8008abc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0201 	orr.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa8:	e008      	b.n	8008abc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f042 0201 	orr.w	r2, r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	e000      	b.n	8008abe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	40012c00 	.word	0x40012c00
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	00010007 	.word	0x00010007

08008ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e049      	b.n	8008b7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7fa fa08 	bl	8002f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f000 fb52 	bl	80091c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_TIM_PWM_Start+0x24>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	bf14      	ite	ne
 8008ba4:	2301      	movne	r3, #1
 8008ba6:	2300      	moveq	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	e03c      	b.n	8008c26 <HAL_TIM_PWM_Start+0x9e>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d109      	bne.n	8008bc6 <HAL_TIM_PWM_Start+0x3e>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	bf14      	ite	ne
 8008bbe:	2301      	movne	r3, #1
 8008bc0:	2300      	moveq	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	e02f      	b.n	8008c26 <HAL_TIM_PWM_Start+0x9e>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d109      	bne.n	8008be0 <HAL_TIM_PWM_Start+0x58>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e022      	b.n	8008c26 <HAL_TIM_PWM_Start+0x9e>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b0c      	cmp	r3, #12
 8008be4:	d109      	bne.n	8008bfa <HAL_TIM_PWM_Start+0x72>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	bf14      	ite	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	2300      	moveq	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	e015      	b.n	8008c26 <HAL_TIM_PWM_Start+0x9e>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d109      	bne.n	8008c14 <HAL_TIM_PWM_Start+0x8c>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	bf14      	ite	ne
 8008c0c:	2301      	movne	r3, #1
 8008c0e:	2300      	moveq	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	e008      	b.n	8008c26 <HAL_TIM_PWM_Start+0x9e>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e07e      	b.n	8008d2c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <HAL_TIM_PWM_Start+0xb6>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c3c:	e023      	b.n	8008c86 <HAL_TIM_PWM_Start+0xfe>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d104      	bne.n	8008c4e <HAL_TIM_PWM_Start+0xc6>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c4c:	e01b      	b.n	8008c86 <HAL_TIM_PWM_Start+0xfe>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d104      	bne.n	8008c5e <HAL_TIM_PWM_Start+0xd6>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c5c:	e013      	b.n	8008c86 <HAL_TIM_PWM_Start+0xfe>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b0c      	cmp	r3, #12
 8008c62:	d104      	bne.n	8008c6e <HAL_TIM_PWM_Start+0xe6>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c6c:	e00b      	b.n	8008c86 <HAL_TIM_PWM_Start+0xfe>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	d104      	bne.n	8008c7e <HAL_TIM_PWM_Start+0xf6>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c7c:	e003      	b.n	8008c86 <HAL_TIM_PWM_Start+0xfe>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fd78 	bl	8009784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a26      	ldr	r2, [pc, #152]	; (8008d34 <HAL_TIM_PWM_Start+0x1ac>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d009      	beq.n	8008cb2 <HAL_TIM_PWM_Start+0x12a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a25      	ldr	r2, [pc, #148]	; (8008d38 <HAL_TIM_PWM_Start+0x1b0>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d004      	beq.n	8008cb2 <HAL_TIM_PWM_Start+0x12a>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a23      	ldr	r2, [pc, #140]	; (8008d3c <HAL_TIM_PWM_Start+0x1b4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d101      	bne.n	8008cb6 <HAL_TIM_PWM_Start+0x12e>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e000      	b.n	8008cb8 <HAL_TIM_PWM_Start+0x130>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a18      	ldr	r2, [pc, #96]	; (8008d34 <HAL_TIM_PWM_Start+0x1ac>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d009      	beq.n	8008cea <HAL_TIM_PWM_Start+0x162>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cde:	d004      	beq.n	8008cea <HAL_TIM_PWM_Start+0x162>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a14      	ldr	r2, [pc, #80]	; (8008d38 <HAL_TIM_PWM_Start+0x1b0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d115      	bne.n	8008d16 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	4b13      	ldr	r3, [pc, #76]	; (8008d40 <HAL_TIM_PWM_Start+0x1b8>)
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b06      	cmp	r3, #6
 8008cfa:	d015      	beq.n	8008d28 <HAL_TIM_PWM_Start+0x1a0>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d02:	d011      	beq.n	8008d28 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d14:	e008      	b.n	8008d28 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0201 	orr.w	r2, r2, #1
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	e000      	b.n	8008d2a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40012c00 	.word	0x40012c00
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40014400 	.word	0x40014400
 8008d40:	00010007 	.word	0x00010007

08008d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d020      	beq.n	8008da8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01b      	beq.n	8008da8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f06f 0202 	mvn.w	r2, #2
 8008d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f003 0303 	and.w	r3, r3, #3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9f8 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008d94:	e005      	b.n	8008da2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f9ea 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f9fb 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d020      	beq.n	8008df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01b      	beq.n	8008df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f06f 0204 	mvn.w	r2, #4
 8008dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f9d2 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008de0:	e005      	b.n	8008dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9c4 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9d5 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d020      	beq.n	8008e40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f003 0308 	and.w	r3, r3, #8
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01b      	beq.n	8008e40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0208 	mvn.w	r2, #8
 8008e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2204      	movs	r2, #4
 8008e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f9ac 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008e2c:	e005      	b.n	8008e3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f99e 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f9af 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f003 0310 	and.w	r3, r3, #16
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d020      	beq.n	8008e8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d01b      	beq.n	8008e8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f06f 0210 	mvn.w	r2, #16
 8008e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2208      	movs	r2, #8
 8008e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f986 	bl	8009184 <HAL_TIM_IC_CaptureCallback>
 8008e78:	e005      	b.n	8008e86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f978 	bl	8009170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f989 	bl	8009198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00c      	beq.n	8008eb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f06f 0201 	mvn.w	r2, #1
 8008ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f8 ffc2 	bl	8001e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00c      	beq.n	8008ed4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d007      	beq.n	8008ed4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fd66 	bl	80099a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d007      	beq.n	8008ef8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fd5e 	bl	80099b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00c      	beq.n	8008f1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d007      	beq.n	8008f1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f948 	bl	80091ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f003 0320 	and.w	r3, r3, #32
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00c      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f06f 0220 	mvn.w	r2, #32
 8008f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fd26 	bl	800998c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d101      	bne.n	8008f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f62:	2302      	movs	r3, #2
 8008f64:	e0ff      	b.n	8009166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b14      	cmp	r3, #20
 8008f72:	f200 80f0 	bhi.w	8009156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f76:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008fd1 	.word	0x08008fd1
 8008f80:	08009157 	.word	0x08009157
 8008f84:	08009157 	.word	0x08009157
 8008f88:	08009157 	.word	0x08009157
 8008f8c:	08009011 	.word	0x08009011
 8008f90:	08009157 	.word	0x08009157
 8008f94:	08009157 	.word	0x08009157
 8008f98:	08009157 	.word	0x08009157
 8008f9c:	08009053 	.word	0x08009053
 8008fa0:	08009157 	.word	0x08009157
 8008fa4:	08009157 	.word	0x08009157
 8008fa8:	08009157 	.word	0x08009157
 8008fac:	08009093 	.word	0x08009093
 8008fb0:	08009157 	.word	0x08009157
 8008fb4:	08009157 	.word	0x08009157
 8008fb8:	08009157 	.word	0x08009157
 8008fbc:	080090d5 	.word	0x080090d5
 8008fc0:	08009157 	.word	0x08009157
 8008fc4:	08009157 	.word	0x08009157
 8008fc8:	08009157 	.word	0x08009157
 8008fcc:	08009115 	.word	0x08009115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f956 	bl	8009288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0208 	orr.w	r2, r2, #8
 8008fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699a      	ldr	r2, [r3, #24]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0204 	bic.w	r2, r2, #4
 8008ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6999      	ldr	r1, [r3, #24]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	691a      	ldr	r2, [r3, #16]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	619a      	str	r2, [r3, #24]
      break;
 800900e:	e0a5      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f9b2 	bl	8009380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699a      	ldr	r2, [r3, #24]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800902a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800903a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6999      	ldr	r1, [r3, #24]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	021a      	lsls	r2, r3, #8
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	619a      	str	r2, [r3, #24]
      break;
 8009050:	e084      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fa0b 	bl	8009474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	69da      	ldr	r2, [r3, #28]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0208 	orr.w	r2, r2, #8
 800906c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69da      	ldr	r2, [r3, #28]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f022 0204 	bic.w	r2, r2, #4
 800907c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69d9      	ldr	r1, [r3, #28]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	61da      	str	r2, [r3, #28]
      break;
 8009090:	e064      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fa63 	bl	8009564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69da      	ldr	r2, [r3, #28]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69da      	ldr	r2, [r3, #28]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69d9      	ldr	r1, [r3, #28]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	021a      	lsls	r2, r3, #8
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	61da      	str	r2, [r3, #28]
      break;
 80090d2:	e043      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 faa0 	bl	8009620 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f042 0208 	orr.w	r2, r2, #8
 80090ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0204 	bic.w	r2, r2, #4
 80090fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	691a      	ldr	r2, [r3, #16]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009112:	e023      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fad8 	bl	80096d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800912e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800913e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	021a      	lsls	r2, r3, #8
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009154:	e002      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	75fb      	strb	r3, [r7, #23]
      break;
 800915a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009164:	7dfb      	ldrb	r3, [r7, #23]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop

08009170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a2a      	ldr	r2, [pc, #168]	; (800927c <TIM_Base_SetConfig+0xbc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d003      	beq.n	80091e0 <TIM_Base_SetConfig+0x20>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091de:	d108      	bne.n	80091f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a21      	ldr	r2, [pc, #132]	; (800927c <TIM_Base_SetConfig+0xbc>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00b      	beq.n	8009212 <TIM_Base_SetConfig+0x52>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009200:	d007      	beq.n	8009212 <TIM_Base_SetConfig+0x52>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <TIM_Base_SetConfig+0xc0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d003      	beq.n	8009212 <TIM_Base_SetConfig+0x52>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a1d      	ldr	r2, [pc, #116]	; (8009284 <TIM_Base_SetConfig+0xc4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d108      	bne.n	8009224 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a0c      	ldr	r2, [pc, #48]	; (800927c <TIM_Base_SetConfig+0xbc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d007      	beq.n	8009260 <TIM_Base_SetConfig+0xa0>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a0b      	ldr	r2, [pc, #44]	; (8009280 <TIM_Base_SetConfig+0xc0>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d003      	beq.n	8009260 <TIM_Base_SetConfig+0xa0>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a0a      	ldr	r2, [pc, #40]	; (8009284 <TIM_Base_SetConfig+0xc4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d103      	bne.n	8009268 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	615a      	str	r2, [r3, #20]
}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	40012c00 	.word	0x40012c00
 8009280:	40014000 	.word	0x40014000
 8009284:	40014400 	.word	0x40014400

08009288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	f023 0201 	bic.w	r2, r3, #1
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0303 	bic.w	r3, r3, #3
 80092c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f023 0302 	bic.w	r3, r3, #2
 80092d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a24      	ldr	r2, [pc, #144]	; (8009374 <TIM_OC1_SetConfig+0xec>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d007      	beq.n	80092f8 <TIM_OC1_SetConfig+0x70>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a23      	ldr	r2, [pc, #140]	; (8009378 <TIM_OC1_SetConfig+0xf0>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d003      	beq.n	80092f8 <TIM_OC1_SetConfig+0x70>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a22      	ldr	r2, [pc, #136]	; (800937c <TIM_OC1_SetConfig+0xf4>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d10c      	bne.n	8009312 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f023 0308 	bic.w	r3, r3, #8
 80092fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f023 0304 	bic.w	r3, r3, #4
 8009310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a17      	ldr	r2, [pc, #92]	; (8009374 <TIM_OC1_SetConfig+0xec>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d007      	beq.n	800932a <TIM_OC1_SetConfig+0xa2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a16      	ldr	r2, [pc, #88]	; (8009378 <TIM_OC1_SetConfig+0xf0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d003      	beq.n	800932a <TIM_OC1_SetConfig+0xa2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a15      	ldr	r2, [pc, #84]	; (800937c <TIM_OC1_SetConfig+0xf4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d111      	bne.n	800934e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	4313      	orrs	r3, r2
 800934c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	621a      	str	r2, [r3, #32]
}
 8009368:	bf00      	nop
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	40012c00 	.word	0x40012c00
 8009378:	40014000 	.word	0x40014000
 800937c:	40014400 	.word	0x40014400

08009380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	f023 0210 	bic.w	r2, r3, #16
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f023 0320 	bic.w	r3, r3, #32
 80093ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a22      	ldr	r2, [pc, #136]	; (8009468 <TIM_OC2_SetConfig+0xe8>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d10d      	bne.n	8009400 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a19      	ldr	r2, [pc, #100]	; (8009468 <TIM_OC2_SetConfig+0xe8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d007      	beq.n	8009418 <TIM_OC2_SetConfig+0x98>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a18      	ldr	r2, [pc, #96]	; (800946c <TIM_OC2_SetConfig+0xec>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d003      	beq.n	8009418 <TIM_OC2_SetConfig+0x98>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a17      	ldr	r2, [pc, #92]	; (8009470 <TIM_OC2_SetConfig+0xf0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d113      	bne.n	8009440 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800941e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	621a      	str	r2, [r3, #32]
}
 800945a:	bf00      	nop
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	40012c00 	.word	0x40012c00
 800946c:	40014000 	.word	0x40014000
 8009470:	40014400 	.word	0x40014400

08009474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0303 	bic.w	r3, r3, #3
 80094ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a21      	ldr	r2, [pc, #132]	; (8009558 <TIM_OC3_SetConfig+0xe4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d10d      	bne.n	80094f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a18      	ldr	r2, [pc, #96]	; (8009558 <TIM_OC3_SetConfig+0xe4>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d007      	beq.n	800950a <TIM_OC3_SetConfig+0x96>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a17      	ldr	r2, [pc, #92]	; (800955c <TIM_OC3_SetConfig+0xe8>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d003      	beq.n	800950a <TIM_OC3_SetConfig+0x96>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a16      	ldr	r2, [pc, #88]	; (8009560 <TIM_OC3_SetConfig+0xec>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d113      	bne.n	8009532 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	4313      	orrs	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	011b      	lsls	r3, r3, #4
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	4313      	orrs	r3, r2
 8009530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	621a      	str	r2, [r3, #32]
}
 800954c:	bf00      	nop
 800954e:	371c      	adds	r7, #28
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	40012c00 	.word	0x40012c00
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400

08009564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800959e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	021b      	lsls	r3, r3, #8
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	031b      	lsls	r3, r3, #12
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	4313      	orrs	r3, r2
 80095be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a14      	ldr	r2, [pc, #80]	; (8009614 <TIM_OC4_SetConfig+0xb0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d007      	beq.n	80095d8 <TIM_OC4_SetConfig+0x74>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a13      	ldr	r2, [pc, #76]	; (8009618 <TIM_OC4_SetConfig+0xb4>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_OC4_SetConfig+0x74>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a12      	ldr	r2, [pc, #72]	; (800961c <TIM_OC4_SetConfig+0xb8>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d109      	bne.n	80095ec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	019b      	lsls	r3, r3, #6
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	621a      	str	r2, [r3, #32]
}
 8009606:	bf00      	nop
 8009608:	371c      	adds	r7, #28
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40012c00 	.word	0x40012c00
 8009618:	40014000 	.word	0x40014000
 800961c:	40014400 	.word	0x40014400

08009620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800964e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009664:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a13      	ldr	r2, [pc, #76]	; (80096c4 <TIM_OC5_SetConfig+0xa4>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d007      	beq.n	800968a <TIM_OC5_SetConfig+0x6a>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a12      	ldr	r2, [pc, #72]	; (80096c8 <TIM_OC5_SetConfig+0xa8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_OC5_SetConfig+0x6a>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a11      	ldr	r2, [pc, #68]	; (80096cc <TIM_OC5_SetConfig+0xac>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d109      	bne.n	800969e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009690:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	621a      	str	r2, [r3, #32]
}
 80096b8:	bf00      	nop
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	40012c00 	.word	0x40012c00
 80096c8:	40014000 	.word	0x40014000
 80096cc:	40014400 	.word	0x40014400

080096d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	021b      	lsls	r3, r3, #8
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	051b      	lsls	r3, r3, #20
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	4313      	orrs	r3, r2
 8009722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a14      	ldr	r2, [pc, #80]	; (8009778 <TIM_OC6_SetConfig+0xa8>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d007      	beq.n	800973c <TIM_OC6_SetConfig+0x6c>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a13      	ldr	r2, [pc, #76]	; (800977c <TIM_OC6_SetConfig+0xac>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d003      	beq.n	800973c <TIM_OC6_SetConfig+0x6c>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a12      	ldr	r2, [pc, #72]	; (8009780 <TIM_OC6_SetConfig+0xb0>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d109      	bne.n	8009750 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	029b      	lsls	r3, r3, #10
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	4313      	orrs	r3, r2
 800974e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	621a      	str	r2, [r3, #32]
}
 800976a:	bf00      	nop
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	40012c00 	.word	0x40012c00
 800977c:	40014000 	.word	0x40014000
 8009780:	40014400 	.word	0x40014400

08009784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f003 031f 	and.w	r3, r3, #31
 8009796:	2201      	movs	r2, #1
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6a1a      	ldr	r2, [r3, #32]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	43db      	mvns	r3, r3
 80097a6:	401a      	ands	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a1a      	ldr	r2, [r3, #32]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f003 031f 	and.w	r3, r3, #31
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	fa01 f303 	lsl.w	r3, r1, r3
 80097bc:	431a      	orrs	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	621a      	str	r2, [r3, #32]
}
 80097c2:	bf00      	nop
 80097c4:	371c      	adds	r7, #28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e04f      	b.n	8009888 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a21      	ldr	r2, [pc, #132]	; (8009894 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d108      	bne.n	8009824 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009818:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a14      	ldr	r2, [pc, #80]	; (8009894 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d009      	beq.n	800985c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009850:	d004      	beq.n	800985c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a10      	ldr	r2, [pc, #64]	; (8009898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d10c      	bne.n	8009876 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	4313      	orrs	r3, r2
 800986c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40014000 	.word	0x40014000

0800989c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d101      	bne.n	80098b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80098b4:	2302      	movs	r3, #2
 80098b6:	e060      	b.n	800997a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	041b      	lsls	r3, r3, #16
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a14      	ldr	r2, [pc, #80]	; (8009988 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d115      	bne.n	8009968 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	051b      	lsls	r3, r3, #20
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	4313      	orrs	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40012c00 	.word	0x40012c00

0800998c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e040      	b.n	8009a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d106      	bne.n	80099f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7f9 f98a 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2224      	movs	r2, #36	; 0x24
 80099f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0201 	bic.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fe34 	bl	800a67c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fc05 	bl	800a224 <UART_SetConfig>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d101      	bne.n	8009a24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e01b      	b.n	8009a5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 feb3 	bl	800a7c0 <UART_CheckIdleState>
 8009a5a:	4603      	mov	r3, r0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08a      	sub	sp, #40	; 0x28
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	4613      	mov	r3, r2
 8009a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a78:	2b20      	cmp	r3, #32
 8009a7a:	d178      	bne.n	8009b6e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d002      	beq.n	8009a88 <HAL_UART_Transmit+0x24>
 8009a82:	88fb      	ldrh	r3, [r7, #6]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e071      	b.n	8009b70 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2221      	movs	r2, #33	; 0x21
 8009a98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a9a:	f7fa faf5 	bl	8004088 <HAL_GetTick>
 8009a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	88fa      	ldrh	r2, [r7, #6]
 8009aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	88fa      	ldrh	r2, [r7, #6]
 8009aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab8:	d108      	bne.n	8009acc <HAL_UART_Transmit+0x68>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d104      	bne.n	8009acc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	e003      	b.n	8009ad4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ad4:	e030      	b.n	8009b38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2200      	movs	r2, #0
 8009ade:	2180      	movs	r1, #128	; 0x80
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 ff15 	bl	800a910 <UART_WaitOnFlagUntilTimeout>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2220      	movs	r2, #32
 8009af0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e03c      	b.n	8009b70 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10b      	bne.n	8009b14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	881a      	ldrh	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b08:	b292      	uxth	r2, r2
 8009b0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	3302      	adds	r3, #2
 8009b10:	61bb      	str	r3, [r7, #24]
 8009b12:	e008      	b.n	8009b26 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	781a      	ldrb	r2, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	b292      	uxth	r2, r2
 8009b1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	3301      	adds	r3, #1
 8009b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1c8      	bne.n	8009ad6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2140      	movs	r1, #64	; 0x40
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 fede 	bl	800a910 <UART_WaitOnFlagUntilTimeout>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d004      	beq.n	8009b64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e005      	b.n	8009b70 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2220      	movs	r2, #32
 8009b68:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e000      	b.n	8009b70 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009b6e:	2302      	movs	r3, #2
  }
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3720      	adds	r7, #32
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	4613      	mov	r3, r2
 8009b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	d137      	bne.n	8009c00 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <HAL_UART_Receive_IT+0x24>
 8009b96:	88fb      	ldrh	r3, [r7, #6]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e030      	b.n	8009c02 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <HAL_UART_Receive_IT+0x94>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d01f      	beq.n	8009bf0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d018      	beq.n	8009bf0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	e853 3f00 	ldrex	r3, [r3]
 8009bca:	613b      	str	r3, [r7, #16]
   return(result);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	623b      	str	r3, [r7, #32]
 8009bde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be0:	69f9      	ldr	r1, [r7, #28]
 8009be2:	6a3a      	ldr	r2, [r7, #32]
 8009be4:	e841 2300 	strex	r3, r2, [r1]
 8009be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e6      	bne.n	8009bbe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fef2 	bl	800a9e0 <UART_Start_Receive_IT>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	e000      	b.n	8009c02 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c00:	2302      	movs	r3, #2
  }
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3728      	adds	r7, #40	; 0x28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40008000 	.word	0x40008000

08009c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b0ba      	sub	sp, #232	; 0xe8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009c3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c3e:	4013      	ands	r3, r2
 8009c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d115      	bne.n	8009c78 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c50:	f003 0320 	and.w	r3, r3, #32
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00f      	beq.n	8009c78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c5c:	f003 0320 	and.w	r3, r3, #32
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 82ae 	beq.w	800a1ca <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	4798      	blx	r3
      }
      return;
 8009c76:	e2a8      	b.n	800a1ca <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 8117 	beq.w	8009eb0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009c8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009c92:	4b85      	ldr	r3, [pc, #532]	; (8009ea8 <HAL_UART_IRQHandler+0x298>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 810a 	beq.w	8009eb0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d011      	beq.n	8009ccc <HAL_UART_IRQHandler+0xbc>
 8009ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc2:	f043 0201 	orr.w	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d011      	beq.n	8009cfc <HAL_UART_IRQHandler+0xec>
 8009cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00b      	beq.n	8009cfc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2202      	movs	r2, #2
 8009cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cf2:	f043 0204 	orr.w	r2, r3, #4
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d011      	beq.n	8009d2c <HAL_UART_IRQHandler+0x11c>
 8009d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00b      	beq.n	8009d2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2204      	movs	r2, #4
 8009d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d22:	f043 0202 	orr.w	r2, r3, #2
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d30:	f003 0308 	and.w	r3, r3, #8
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d017      	beq.n	8009d68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3c:	f003 0320 	and.w	r3, r3, #32
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00b      	beq.n	8009d68 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2208      	movs	r2, #8
 8009d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d5e:	f043 0208 	orr.w	r2, r3, #8
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d012      	beq.n	8009d9a <HAL_UART_IRQHandler+0x18a>
 8009d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00c      	beq.n	8009d9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d90:	f043 0220 	orr.w	r2, r3, #32
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 8214 	beq.w	800a1ce <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00d      	beq.n	8009dce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d005      	beq.n	8009df2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d04f      	beq.n	8009e92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 feba 	bl	800ab6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e02:	2b40      	cmp	r3, #64	; 0x40
 8009e04:	d141      	bne.n	8009e8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1d9      	bne.n	8009e06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d013      	beq.n	8009e82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e5e:	4a13      	ldr	r2, [pc, #76]	; (8009eac <HAL_UART_IRQHandler+0x29c>)
 8009e60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fb fb5f 	bl	800552a <HAL_DMA_Abort_IT>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d017      	beq.n	8009ea2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e80:	e00f      	b.n	8009ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f9b8 	bl	800a1f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e88:	e00b      	b.n	8009ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f9b4 	bl	800a1f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e90:	e007      	b.n	8009ea2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f9b0 	bl	800a1f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009ea0:	e195      	b.n	800a1ce <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea2:	bf00      	nop
    return;
 8009ea4:	e193      	b.n	800a1ce <HAL_UART_IRQHandler+0x5be>
 8009ea6:	bf00      	nop
 8009ea8:	04000120 	.word	0x04000120
 8009eac:	0800ac35 	.word	0x0800ac35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	f040 814e 	bne.w	800a156 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f000 8147 	beq.w	800a156 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ecc:	f003 0310 	and.w	r3, r3, #16
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 8140 	beq.w	800a156 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2210      	movs	r2, #16
 8009edc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	f040 80b8 	bne.w	800a05e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009efa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 8167 	beq.w	800a1d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	f080 815f 	bcs.w	800a1d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0320 	and.w	r3, r3, #32
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f040 8086 	bne.w	800a03c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
 8009f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1da      	bne.n	8009f30 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e1      	bne.n	8009f7a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3308      	adds	r3, #8
 8009fbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e3      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a00a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a00c:	f023 0310 	bic.w	r3, r3, #16
 800a010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a01e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a020:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e4      	bne.n	8009ffc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a036:	4618      	mov	r0, r3
 800a038:	f7fb fa39 	bl	80054ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a04e:	b29b      	uxth	r3, r3
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	b29b      	uxth	r3, r3
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f8d8 	bl	800a20c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a05c:	e0b9      	b.n	800a1d2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a078:	b29b      	uxth	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 80ab 	beq.w	800a1d6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800a080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 80a6 	beq.w	800a1d6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a09e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0b4:	e841 2300 	strex	r3, r2, [r1]
 800a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e4      	bne.n	800a08a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	623b      	str	r3, [r7, #32]
   return(result);
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a0e4:	633a      	str	r2, [r7, #48]	; 0x30
 800a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ec:	e841 2300 	strex	r3, r2, [r1]
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1e3      	bne.n	800a0c0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	60fb      	str	r3, [r7, #12]
   return(result);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f023 0310 	bic.w	r3, r3, #16
 800a120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	69b9      	ldr	r1, [r7, #24]
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	617b      	str	r3, [r7, #20]
   return(result);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e4      	bne.n	800a10c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2202      	movs	r2, #2
 800a146:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f85c 	bl	800a20c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a154:	e03f      	b.n	800a1d6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00e      	beq.n	800a180 <HAL_UART_IRQHandler+0x570>
 800a162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d008      	beq.n	800a180 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 ff57 	bl	800b02c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a17e:	e02d      	b.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00e      	beq.n	800a1aa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a194:	2b00      	cmp	r3, #0
 800a196:	d008      	beq.n	800a1aa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d01c      	beq.n	800a1da <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	4798      	blx	r3
    }
    return;
 800a1a8:	e017      	b.n	800a1da <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d012      	beq.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
 800a1b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00c      	beq.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fd4c 	bl	800ac60 <UART_EndTransmit_IT>
    return;
 800a1c8:	e008      	b.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
      return;
 800a1ca:	bf00      	nop
 800a1cc:	e006      	b.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
    return;
 800a1ce:	bf00      	nop
 800a1d0:	e004      	b.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
      return;
 800a1d2:	bf00      	nop
 800a1d4:	e002      	b.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
      return;
 800a1d6:	bf00      	nop
 800a1d8:	e000      	b.n	800a1dc <HAL_UART_IRQHandler+0x5cc>
    return;
 800a1da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a1dc:	37e8      	adds	r7, #232	; 0xe8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop

0800a1e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a228:	b08a      	sub	sp, #40	; 0x28
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	431a      	orrs	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	431a      	orrs	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	4313      	orrs	r3, r2
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4bb4      	ldr	r3, [pc, #720]	; (800a524 <UART_SetConfig+0x300>)
 800a254:	4013      	ands	r3, r2
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a25c:	430b      	orrs	r3, r1
 800a25e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4aa9      	ldr	r2, [pc, #676]	; (800a528 <UART_SetConfig+0x304>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d004      	beq.n	800a290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28c:	4313      	orrs	r3, r2
 800a28e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4aa0      	ldr	r2, [pc, #640]	; (800a52c <UART_SetConfig+0x308>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d126      	bne.n	800a2fc <UART_SetConfig+0xd8>
 800a2ae:	4ba0      	ldr	r3, [pc, #640]	; (800a530 <UART_SetConfig+0x30c>)
 800a2b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b4:	f003 0303 	and.w	r3, r3, #3
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d81b      	bhi.n	800a2f4 <UART_SetConfig+0xd0>
 800a2bc:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <UART_SetConfig+0xa0>)
 800a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a2d5 	.word	0x0800a2d5
 800a2c8:	0800a2e5 	.word	0x0800a2e5
 800a2cc:	0800a2dd 	.word	0x0800a2dd
 800a2d0:	0800a2ed 	.word	0x0800a2ed
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2da:	e080      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2e2:	e07c      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2ea:	e078      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a2ec:	2308      	movs	r3, #8
 800a2ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2f2:	e074      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2fa:	e070      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a8c      	ldr	r2, [pc, #560]	; (800a534 <UART_SetConfig+0x310>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d138      	bne.n	800a378 <UART_SetConfig+0x154>
 800a306:	4b8a      	ldr	r3, [pc, #552]	; (800a530 <UART_SetConfig+0x30c>)
 800a308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30c:	f003 030c 	and.w	r3, r3, #12
 800a310:	2b0c      	cmp	r3, #12
 800a312:	d82d      	bhi.n	800a370 <UART_SetConfig+0x14c>
 800a314:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <UART_SetConfig+0xf8>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a351 	.word	0x0800a351
 800a320:	0800a371 	.word	0x0800a371
 800a324:	0800a371 	.word	0x0800a371
 800a328:	0800a371 	.word	0x0800a371
 800a32c:	0800a361 	.word	0x0800a361
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800a371 	.word	0x0800a371
 800a338:	0800a371 	.word	0x0800a371
 800a33c:	0800a359 	.word	0x0800a359
 800a340:	0800a371 	.word	0x0800a371
 800a344:	0800a371 	.word	0x0800a371
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a369 	.word	0x0800a369
 800a350:	2300      	movs	r3, #0
 800a352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a356:	e042      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a358:	2302      	movs	r3, #2
 800a35a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a35e:	e03e      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a360:	2304      	movs	r3, #4
 800a362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a366:	e03a      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a368:	2308      	movs	r3, #8
 800a36a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a36e:	e036      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a370:	2310      	movs	r3, #16
 800a372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a376:	e032      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a6a      	ldr	r2, [pc, #424]	; (800a528 <UART_SetConfig+0x304>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d12a      	bne.n	800a3d8 <UART_SetConfig+0x1b4>
 800a382:	4b6b      	ldr	r3, [pc, #428]	; (800a530 <UART_SetConfig+0x30c>)
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a38c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a390:	d01a      	beq.n	800a3c8 <UART_SetConfig+0x1a4>
 800a392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a396:	d81b      	bhi.n	800a3d0 <UART_SetConfig+0x1ac>
 800a398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39c:	d00c      	beq.n	800a3b8 <UART_SetConfig+0x194>
 800a39e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3a2:	d815      	bhi.n	800a3d0 <UART_SetConfig+0x1ac>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <UART_SetConfig+0x18c>
 800a3a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ac:	d008      	beq.n	800a3c0 <UART_SetConfig+0x19c>
 800a3ae:	e00f      	b.n	800a3d0 <UART_SetConfig+0x1ac>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3b6:	e012      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3be:	e00e      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3c6:	e00a      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3ce:	e006      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3d6:	e002      	b.n	800a3de <UART_SetConfig+0x1ba>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a51      	ldr	r2, [pc, #324]	; (800a528 <UART_SetConfig+0x304>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d17a      	bne.n	800a4de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d824      	bhi.n	800a43a <UART_SetConfig+0x216>
 800a3f0:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <UART_SetConfig+0x1d4>)
 800a3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f6:	bf00      	nop
 800a3f8:	0800a41d 	.word	0x0800a41d
 800a3fc:	0800a43b 	.word	0x0800a43b
 800a400:	0800a425 	.word	0x0800a425
 800a404:	0800a43b 	.word	0x0800a43b
 800a408:	0800a42b 	.word	0x0800a42b
 800a40c:	0800a43b 	.word	0x0800a43b
 800a410:	0800a43b 	.word	0x0800a43b
 800a414:	0800a43b 	.word	0x0800a43b
 800a418:	0800a433 	.word	0x0800a433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a41c:	f7fc fe7e 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 800a420:	61f8      	str	r0, [r7, #28]
        break;
 800a422:	e010      	b.n	800a446 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a424:	4b44      	ldr	r3, [pc, #272]	; (800a538 <UART_SetConfig+0x314>)
 800a426:	61fb      	str	r3, [r7, #28]
        break;
 800a428:	e00d      	b.n	800a446 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a42a:	f7fc fddf 	bl	8006fec <HAL_RCC_GetSysClockFreq>
 800a42e:	61f8      	str	r0, [r7, #28]
        break;
 800a430:	e009      	b.n	800a446 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a436:	61fb      	str	r3, [r7, #28]
        break;
 800a438:	e005      	b.n	800a446 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 8107 	beq.w	800a65c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	4613      	mov	r3, r2
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	4413      	add	r3, r2
 800a458:	69fa      	ldr	r2, [r7, #28]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d305      	bcc.n	800a46a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a464:	69fa      	ldr	r2, [r7, #28]
 800a466:	429a      	cmp	r2, r3
 800a468:	d903      	bls.n	800a472 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a470:	e0f4      	b.n	800a65c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	2200      	movs	r2, #0
 800a476:	461c      	mov	r4, r3
 800a478:	4615      	mov	r5, r2
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	f04f 0300 	mov.w	r3, #0
 800a482:	022b      	lsls	r3, r5, #8
 800a484:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a488:	0222      	lsls	r2, r4, #8
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	6849      	ldr	r1, [r1, #4]
 800a48e:	0849      	lsrs	r1, r1, #1
 800a490:	2000      	movs	r0, #0
 800a492:	4688      	mov	r8, r1
 800a494:	4681      	mov	r9, r0
 800a496:	eb12 0a08 	adds.w	sl, r2, r8
 800a49a:	eb43 0b09 	adc.w	fp, r3, r9
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	4659      	mov	r1, fp
 800a4b0:	f7f6 fbea 	bl	8000c88 <__aeabi_uldivmod>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4c2:	d308      	bcc.n	800a4d6 <UART_SetConfig+0x2b2>
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ca:	d204      	bcs.n	800a4d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	60da      	str	r2, [r3, #12]
 800a4d4:	e0c2      	b.n	800a65c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a4dc:	e0be      	b.n	800a65c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4e6:	d16a      	bne.n	800a5be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a4e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d834      	bhi.n	800a55a <UART_SetConfig+0x336>
 800a4f0:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <UART_SetConfig+0x2d4>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a51d 	.word	0x0800a51d
 800a4fc:	0800a53d 	.word	0x0800a53d
 800a500:	0800a545 	.word	0x0800a545
 800a504:	0800a55b 	.word	0x0800a55b
 800a508:	0800a54b 	.word	0x0800a54b
 800a50c:	0800a55b 	.word	0x0800a55b
 800a510:	0800a55b 	.word	0x0800a55b
 800a514:	0800a55b 	.word	0x0800a55b
 800a518:	0800a553 	.word	0x0800a553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a51c:	f7fc fdfe 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 800a520:	61f8      	str	r0, [r7, #28]
        break;
 800a522:	e020      	b.n	800a566 <UART_SetConfig+0x342>
 800a524:	efff69f3 	.word	0xefff69f3
 800a528:	40008000 	.word	0x40008000
 800a52c:	40013800 	.word	0x40013800
 800a530:	40021000 	.word	0x40021000
 800a534:	40004400 	.word	0x40004400
 800a538:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a53c:	f7fc fe04 	bl	8007148 <HAL_RCC_GetPCLK2Freq>
 800a540:	61f8      	str	r0, [r7, #28]
        break;
 800a542:	e010      	b.n	800a566 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a544:	4b4c      	ldr	r3, [pc, #304]	; (800a678 <UART_SetConfig+0x454>)
 800a546:	61fb      	str	r3, [r7, #28]
        break;
 800a548:	e00d      	b.n	800a566 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a54a:	f7fc fd4f 	bl	8006fec <HAL_RCC_GetSysClockFreq>
 800a54e:	61f8      	str	r0, [r7, #28]
        break;
 800a550:	e009      	b.n	800a566 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a556:	61fb      	str	r3, [r7, #28]
        break;
 800a558:	e005      	b.n	800a566 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d077      	beq.n	800a65c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	005a      	lsls	r2, r3, #1
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	085b      	lsrs	r3, r3, #1
 800a576:	441a      	add	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a580:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	2b0f      	cmp	r3, #15
 800a586:	d916      	bls.n	800a5b6 <UART_SetConfig+0x392>
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a58e:	d212      	bcs.n	800a5b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	b29b      	uxth	r3, r3
 800a594:	f023 030f 	bic.w	r3, r3, #15
 800a598:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	085b      	lsrs	r3, r3, #1
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	f003 0307 	and.w	r3, r3, #7
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	8afb      	ldrh	r3, [r7, #22]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	8afa      	ldrh	r2, [r7, #22]
 800a5b2:	60da      	str	r2, [r3, #12]
 800a5b4:	e052      	b.n	800a65c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a5bc:	e04e      	b.n	800a65c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5c2:	2b08      	cmp	r3, #8
 800a5c4:	d827      	bhi.n	800a616 <UART_SetConfig+0x3f2>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <UART_SetConfig+0x3a8>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	0800a617 	.word	0x0800a617
 800a5dc:	0800a607 	.word	0x0800a607
 800a5e0:	0800a617 	.word	0x0800a617
 800a5e4:	0800a617 	.word	0x0800a617
 800a5e8:	0800a617 	.word	0x0800a617
 800a5ec:	0800a60f 	.word	0x0800a60f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f0:	f7fc fd94 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 800a5f4:	61f8      	str	r0, [r7, #28]
        break;
 800a5f6:	e014      	b.n	800a622 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5f8:	f7fc fda6 	bl	8007148 <HAL_RCC_GetPCLK2Freq>
 800a5fc:	61f8      	str	r0, [r7, #28]
        break;
 800a5fe:	e010      	b.n	800a622 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a600:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <UART_SetConfig+0x454>)
 800a602:	61fb      	str	r3, [r7, #28]
        break;
 800a604:	e00d      	b.n	800a622 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a606:	f7fc fcf1 	bl	8006fec <HAL_RCC_GetSysClockFreq>
 800a60a:	61f8      	str	r0, [r7, #28]
        break;
 800a60c:	e009      	b.n	800a622 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a612:	61fb      	str	r3, [r7, #28]
        break;
 800a614:	e005      	b.n	800a622 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a620:	bf00      	nop
    }

    if (pclk != 0U)
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d019      	beq.n	800a65c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	085a      	lsrs	r2, r3, #1
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	441a      	add	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	2b0f      	cmp	r3, #15
 800a640:	d909      	bls.n	800a656 <UART_SetConfig+0x432>
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a648:	d205      	bcs.n	800a656 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	e002      	b.n	800a65c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a668:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3728      	adds	r7, #40	; 0x28
 800a670:	46bd      	mov	sp, r7
 800a672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a676:	bf00      	nop
 800a678:	00f42400 	.word	0x00f42400

0800a67c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	f003 0308 	and.w	r3, r3, #8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00a      	beq.n	800a6a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00a      	beq.n	800a6c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00a      	beq.n	800a6ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00a      	beq.n	800a72e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01a      	beq.n	800a792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	430a      	orrs	r2, r1
 800a770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a77a:	d10a      	bne.n	800a792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b098      	sub	sp, #96	; 0x60
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7d0:	f7f9 fc5a 	bl	8004088 <HAL_GetTick>
 800a7d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0308 	and.w	r3, r3, #8
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d12e      	bne.n	800a842 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f88c 	bl	800a910 <UART_WaitOnFlagUntilTimeout>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d021      	beq.n	800a842 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a812:	653b      	str	r3, [r7, #80]	; 0x50
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a81c:	647b      	str	r3, [r7, #68]	; 0x44
 800a81e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a820:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a824:	e841 2300 	strex	r3, r2, [r1]
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d1e6      	bne.n	800a7fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e062      	b.n	800a908 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d149      	bne.n	800a8e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f856 	bl	800a910 <UART_WaitOnFlagUntilTimeout>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d03c      	beq.n	800a8e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	e853 3f00 	ldrex	r3, [r3]
 800a876:	623b      	str	r3, [r7, #32]
   return(result);
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a87e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a888:	633b      	str	r3, [r7, #48]	; 0x30
 800a88a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e6      	bne.n	800a86a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f023 0301 	bic.w	r3, r3, #1
 800a8b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8bc:	61fa      	str	r2, [r7, #28]
 800a8be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	69b9      	ldr	r1, [r7, #24]
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e5      	bne.n	800a89c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e011      	b.n	800a908 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3758      	adds	r7, #88	; 0x58
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	4613      	mov	r3, r2
 800a91e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a920:	e049      	b.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a928:	d045      	beq.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a92a:	f7f9 fbad 	bl	8004088 <HAL_GetTick>
 800a92e:	4602      	mov	r2, r0
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	69ba      	ldr	r2, [r7, #24]
 800a936:	429a      	cmp	r2, r3
 800a938:	d302      	bcc.n	800a940 <UART_WaitOnFlagUntilTimeout+0x30>
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e048      	b.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0304 	and.w	r3, r3, #4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d031      	beq.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	f003 0308 	and.w	r3, r3, #8
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d110      	bne.n	800a982 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2208      	movs	r2, #8
 800a966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 f8ff 	bl	800ab6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2208      	movs	r2, #8
 800a972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e029      	b.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69db      	ldr	r3, [r3, #28]
 800a988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a98c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a990:	d111      	bne.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f8e5 	bl	800ab6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2220      	movs	r2, #32
 800a9a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e00f      	b.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69da      	ldr	r2, [r3, #28]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	bf0c      	ite	eq
 800a9c6:	2301      	moveq	r3, #1
 800a9c8:	2300      	movne	r3, #0
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d0a6      	beq.n	800a922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b097      	sub	sp, #92	; 0x5c
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	88fa      	ldrh	r2, [r7, #6]
 800a9f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	88fa      	ldrh	r2, [r7, #6]
 800aa00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa12:	d10e      	bne.n	800aa32 <UART_Start_Receive_IT+0x52>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d105      	bne.n	800aa28 <UART_Start_Receive_IT+0x48>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aa22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa26:	e02d      	b.n	800aa84 <UART_Start_Receive_IT+0xa4>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	22ff      	movs	r2, #255	; 0xff
 800aa2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa30:	e028      	b.n	800aa84 <UART_Start_Receive_IT+0xa4>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10d      	bne.n	800aa56 <UART_Start_Receive_IT+0x76>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <UART_Start_Receive_IT+0x6c>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	22ff      	movs	r2, #255	; 0xff
 800aa46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa4a:	e01b      	b.n	800aa84 <UART_Start_Receive_IT+0xa4>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	227f      	movs	r2, #127	; 0x7f
 800aa50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa54:	e016      	b.n	800aa84 <UART_Start_Receive_IT+0xa4>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa5e:	d10d      	bne.n	800aa7c <UART_Start_Receive_IT+0x9c>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d104      	bne.n	800aa72 <UART_Start_Receive_IT+0x92>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	227f      	movs	r2, #127	; 0x7f
 800aa6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa70:	e008      	b.n	800aa84 <UART_Start_Receive_IT+0xa4>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	223f      	movs	r2, #63	; 0x3f
 800aa76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa7a:	e003      	b.n	800aa84 <UART_Start_Receive_IT+0xa4>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2222      	movs	r2, #34	; 0x22
 800aa90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3308      	adds	r3, #8
 800aa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9e:	e853 3f00 	ldrex	r3, [r3]
 800aaa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	657b      	str	r3, [r7, #84]	; 0x54
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3308      	adds	r3, #8
 800aab2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aab4:	64ba      	str	r2, [r7, #72]	; 0x48
 800aab6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aabc:	e841 2300 	strex	r3, r2, [r1]
 800aac0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1e5      	bne.n	800aa94 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad0:	d107      	bne.n	800aae2 <UART_Start_Receive_IT+0x102>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d103      	bne.n	800aae2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4a21      	ldr	r2, [pc, #132]	; (800ab64 <UART_Start_Receive_IT+0x184>)
 800aade:	669a      	str	r2, [r3, #104]	; 0x68
 800aae0:	e002      	b.n	800aae8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4a20      	ldr	r2, [pc, #128]	; (800ab68 <UART_Start_Receive_IT+0x188>)
 800aae6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d019      	beq.n	800ab24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ab04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e6      	bne.n	800aaf0 <UART_Start_Receive_IT+0x110>
 800ab22:	e018      	b.n	800ab56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	613b      	str	r3, [r7, #16]
   return(result);
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	f043 0320 	orr.w	r3, r3, #32
 800ab38:	653b      	str	r3, [r7, #80]	; 0x50
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab42:	623b      	str	r3, [r7, #32]
 800ab44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	69f9      	ldr	r1, [r7, #28]
 800ab48:	6a3a      	ldr	r2, [r7, #32]
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e6      	bne.n	800ab24 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	375c      	adds	r7, #92	; 0x5c
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	0800ae71 	.word	0x0800ae71
 800ab68:	0800acb5 	.word	0x0800acb5

0800ab6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b095      	sub	sp, #84	; 0x54
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab92:	643b      	str	r3, [r7, #64]	; 0x40
 800ab94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e6      	bne.n	800ab74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3308      	adds	r3, #8
 800abac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	f023 0301 	bic.w	r3, r3, #1
 800abbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3308      	adds	r3, #8
 800abc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e5      	bne.n	800aba6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d118      	bne.n	800ac14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	60bb      	str	r3, [r7, #8]
   return(result);
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f023 0310 	bic.w	r3, r3, #16
 800abf6:	647b      	str	r3, [r7, #68]	; 0x44
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac00:	61bb      	str	r3, [r7, #24]
 800ac02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6979      	ldr	r1, [r7, #20]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e6      	bne.n	800abe2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2220      	movs	r2, #32
 800ac18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ac28:	bf00      	nop
 800ac2a:	3754      	adds	r7, #84	; 0x54
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7ff fad0 	bl	800a1f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7c:	61fb      	str	r3, [r7, #28]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	61bb      	str	r3, [r7, #24]
 800ac88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8a:	6979      	ldr	r1, [r7, #20]
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	e841 2300 	strex	r3, r2, [r1]
 800ac92:	613b      	str	r3, [r7, #16]
   return(result);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e6      	bne.n	800ac68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fa9c 	bl	800a1e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acac:	bf00      	nop
 800acae:	3720      	adds	r7, #32
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b09c      	sub	sp, #112	; 0x70
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800accc:	2b22      	cmp	r3, #34	; 0x22
 800acce:	f040 80be 	bne.w	800ae4e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800acd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800acdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ace0:	b2d9      	uxtb	r1, r3
 800ace2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acec:	400a      	ands	r2, r1
 800acee:	b2d2      	uxtb	r2, r2
 800acf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	3b01      	subs	r3, #1
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f040 80a3 	bne.w	800ae62 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad30:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad42:	e841 2300 	strex	r3, r2, [r1]
 800ad46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e6      	bne.n	800ad1c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3308      	adds	r3, #8
 800ad54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad60:	f023 0301 	bic.w	r3, r3, #1
 800ad64:	667b      	str	r3, [r7, #100]	; 0x64
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad6e:	647a      	str	r2, [r7, #68]	; 0x44
 800ad70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e5      	bne.n	800ad4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a34      	ldr	r2, [pc, #208]	; (800ae6c <UART_RxISR_8BIT+0x1b8>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d01f      	beq.n	800ade0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d018      	beq.n	800ade0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	e853 3f00 	ldrex	r3, [r3]
 800adba:	623b      	str	r3, [r7, #32]
   return(result);
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800adc2:	663b      	str	r3, [r7, #96]	; 0x60
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	461a      	mov	r2, r3
 800adca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adcc:	633b      	str	r3, [r7, #48]	; 0x30
 800adce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800add2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add4:	e841 2300 	strex	r3, r2, [r1]
 800add8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1e6      	bne.n	800adae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d12e      	bne.n	800ae46 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	e853 3f00 	ldrex	r3, [r3]
 800adfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f023 0310 	bic.w	r3, r3, #16
 800ae02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae0c:	61fb      	str	r3, [r7, #28]
 800ae0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae10:	69b9      	ldr	r1, [r7, #24]
 800ae12:	69fa      	ldr	r2, [r7, #28]
 800ae14:	e841 2300 	strex	r3, r2, [r1]
 800ae18:	617b      	str	r3, [r7, #20]
   return(result);
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e6      	bne.n	800adee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	f003 0310 	and.w	r3, r3, #16
 800ae2a:	2b10      	cmp	r3, #16
 800ae2c:	d103      	bne.n	800ae36 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2210      	movs	r2, #16
 800ae34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff f9e4 	bl	800a20c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae44:	e00d      	b.n	800ae62 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7f7 f812 	bl	8001e70 <HAL_UART_RxCpltCallback>
}
 800ae4c:	e009      	b.n	800ae62 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	8b1b      	ldrh	r3, [r3, #24]
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f042 0208 	orr.w	r2, r2, #8
 800ae5e:	b292      	uxth	r2, r2
 800ae60:	831a      	strh	r2, [r3, #24]
}
 800ae62:	bf00      	nop
 800ae64:	3770      	adds	r7, #112	; 0x70
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	40008000 	.word	0x40008000

0800ae70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b09c      	sub	sp, #112	; 0x70
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae88:	2b22      	cmp	r3, #34	; 0x22
 800ae8a:	f040 80be 	bne.w	800b00a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ae9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800aea2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800aea6:	4013      	ands	r3, r2
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb2:	1c9a      	adds	r2, r3, #2
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b01      	subs	r3, #1
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f040 80a3 	bne.w	800b01e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aeec:	667b      	str	r3, [r7, #100]	; 0x64
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aef6:	657b      	str	r3, [r7, #84]	; 0x54
 800aef8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aefc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aefe:	e841 2300 	strex	r3, r2, [r1]
 800af02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1e6      	bne.n	800aed8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3308      	adds	r3, #8
 800af10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	f023 0301 	bic.w	r3, r3, #1
 800af20:	663b      	str	r3, [r7, #96]	; 0x60
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3308      	adds	r3, #8
 800af28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af2a:	643a      	str	r2, [r7, #64]	; 0x40
 800af2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af32:	e841 2300 	strex	r3, r2, [r1]
 800af36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1e5      	bne.n	800af0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a34      	ldr	r2, [pc, #208]	; (800b028 <UART_RxISR_16BIT+0x1b8>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d01f      	beq.n	800af9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d018      	beq.n	800af9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	e853 3f00 	ldrex	r3, [r3]
 800af76:	61fb      	str	r3, [r7, #28]
   return(result);
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	461a      	mov	r2, r3
 800af86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af90:	e841 2300 	strex	r3, r2, [r1]
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1e6      	bne.n	800af6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d12e      	bne.n	800b002 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	e853 3f00 	ldrex	r3, [r3]
 800afb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f023 0310 	bic.w	r3, r3, #16
 800afbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	461a      	mov	r2, r3
 800afc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afcc:	6979      	ldr	r1, [r7, #20]
 800afce:	69ba      	ldr	r2, [r7, #24]
 800afd0:	e841 2300 	strex	r3, r2, [r1]
 800afd4:	613b      	str	r3, [r7, #16]
   return(result);
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e6      	bne.n	800afaa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	69db      	ldr	r3, [r3, #28]
 800afe2:	f003 0310 	and.w	r3, r3, #16
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d103      	bne.n	800aff2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2210      	movs	r2, #16
 800aff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff f906 	bl	800a20c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b000:	e00d      	b.n	800b01e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f6 ff34 	bl	8001e70 <HAL_UART_RxCpltCallback>
}
 800b008:	e009      	b.n	800b01e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	8b1b      	ldrh	r3, [r3, #24]
 800b010:	b29a      	uxth	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0208 	orr.w	r2, r2, #8
 800b01a:	b292      	uxth	r2, r2
 800b01c:	831a      	strh	r2, [r3, #24]
}
 800b01e:	bf00      	nop
 800b020:	3770      	adds	r7, #112	; 0x70
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	40008000 	.word	0x40008000

0800b02c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <__cvt>:
 800b040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b044:	ec55 4b10 	vmov	r4, r5, d0
 800b048:	2d00      	cmp	r5, #0
 800b04a:	460e      	mov	r6, r1
 800b04c:	4619      	mov	r1, r3
 800b04e:	462b      	mov	r3, r5
 800b050:	bfbb      	ittet	lt
 800b052:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b056:	461d      	movlt	r5, r3
 800b058:	2300      	movge	r3, #0
 800b05a:	232d      	movlt	r3, #45	; 0x2d
 800b05c:	700b      	strb	r3, [r1, #0]
 800b05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b060:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b064:	4691      	mov	r9, r2
 800b066:	f023 0820 	bic.w	r8, r3, #32
 800b06a:	bfbc      	itt	lt
 800b06c:	4622      	movlt	r2, r4
 800b06e:	4614      	movlt	r4, r2
 800b070:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b074:	d005      	beq.n	800b082 <__cvt+0x42>
 800b076:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b07a:	d100      	bne.n	800b07e <__cvt+0x3e>
 800b07c:	3601      	adds	r6, #1
 800b07e:	2102      	movs	r1, #2
 800b080:	e000      	b.n	800b084 <__cvt+0x44>
 800b082:	2103      	movs	r1, #3
 800b084:	ab03      	add	r3, sp, #12
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	ab02      	add	r3, sp, #8
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	ec45 4b10 	vmov	d0, r4, r5
 800b090:	4653      	mov	r3, sl
 800b092:	4632      	mov	r2, r6
 800b094:	f002 f81c 	bl	800d0d0 <_dtoa_r>
 800b098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b09c:	4607      	mov	r7, r0
 800b09e:	d102      	bne.n	800b0a6 <__cvt+0x66>
 800b0a0:	f019 0f01 	tst.w	r9, #1
 800b0a4:	d022      	beq.n	800b0ec <__cvt+0xac>
 800b0a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0aa:	eb07 0906 	add.w	r9, r7, r6
 800b0ae:	d110      	bne.n	800b0d2 <__cvt+0x92>
 800b0b0:	783b      	ldrb	r3, [r7, #0]
 800b0b2:	2b30      	cmp	r3, #48	; 0x30
 800b0b4:	d10a      	bne.n	800b0cc <__cvt+0x8c>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	4629      	mov	r1, r5
 800b0be:	f7f5 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c2:	b918      	cbnz	r0, 800b0cc <__cvt+0x8c>
 800b0c4:	f1c6 0601 	rsb	r6, r6, #1
 800b0c8:	f8ca 6000 	str.w	r6, [sl]
 800b0cc:	f8da 3000 	ldr.w	r3, [sl]
 800b0d0:	4499      	add	r9, r3
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	4629      	mov	r1, r5
 800b0da:	f7f5 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0de:	b108      	cbz	r0, 800b0e4 <__cvt+0xa4>
 800b0e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0e4:	2230      	movs	r2, #48	; 0x30
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	454b      	cmp	r3, r9
 800b0ea:	d307      	bcc.n	800b0fc <__cvt+0xbc>
 800b0ec:	9b03      	ldr	r3, [sp, #12]
 800b0ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0f0:	1bdb      	subs	r3, r3, r7
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	b004      	add	sp, #16
 800b0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fc:	1c59      	adds	r1, r3, #1
 800b0fe:	9103      	str	r1, [sp, #12]
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	e7f0      	b.n	800b0e6 <__cvt+0xa6>

0800b104 <__exponent>:
 800b104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b106:	4603      	mov	r3, r0
 800b108:	2900      	cmp	r1, #0
 800b10a:	bfb8      	it	lt
 800b10c:	4249      	neglt	r1, r1
 800b10e:	f803 2b02 	strb.w	r2, [r3], #2
 800b112:	bfb4      	ite	lt
 800b114:	222d      	movlt	r2, #45	; 0x2d
 800b116:	222b      	movge	r2, #43	; 0x2b
 800b118:	2909      	cmp	r1, #9
 800b11a:	7042      	strb	r2, [r0, #1]
 800b11c:	dd2a      	ble.n	800b174 <__exponent+0x70>
 800b11e:	f10d 0207 	add.w	r2, sp, #7
 800b122:	4617      	mov	r7, r2
 800b124:	260a      	movs	r6, #10
 800b126:	4694      	mov	ip, r2
 800b128:	fb91 f5f6 	sdiv	r5, r1, r6
 800b12c:	fb06 1415 	mls	r4, r6, r5, r1
 800b130:	3430      	adds	r4, #48	; 0x30
 800b132:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b136:	460c      	mov	r4, r1
 800b138:	2c63      	cmp	r4, #99	; 0x63
 800b13a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b13e:	4629      	mov	r1, r5
 800b140:	dcf1      	bgt.n	800b126 <__exponent+0x22>
 800b142:	3130      	adds	r1, #48	; 0x30
 800b144:	f1ac 0402 	sub.w	r4, ip, #2
 800b148:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b14c:	1c41      	adds	r1, r0, #1
 800b14e:	4622      	mov	r2, r4
 800b150:	42ba      	cmp	r2, r7
 800b152:	d30a      	bcc.n	800b16a <__exponent+0x66>
 800b154:	f10d 0209 	add.w	r2, sp, #9
 800b158:	eba2 020c 	sub.w	r2, r2, ip
 800b15c:	42bc      	cmp	r4, r7
 800b15e:	bf88      	it	hi
 800b160:	2200      	movhi	r2, #0
 800b162:	4413      	add	r3, r2
 800b164:	1a18      	subs	r0, r3, r0
 800b166:	b003      	add	sp, #12
 800b168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b16e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b172:	e7ed      	b.n	800b150 <__exponent+0x4c>
 800b174:	2330      	movs	r3, #48	; 0x30
 800b176:	3130      	adds	r1, #48	; 0x30
 800b178:	7083      	strb	r3, [r0, #2]
 800b17a:	70c1      	strb	r1, [r0, #3]
 800b17c:	1d03      	adds	r3, r0, #4
 800b17e:	e7f1      	b.n	800b164 <__exponent+0x60>

0800b180 <_printf_float>:
 800b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b184:	ed2d 8b02 	vpush	{d8}
 800b188:	b08d      	sub	sp, #52	; 0x34
 800b18a:	460c      	mov	r4, r1
 800b18c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b190:	4616      	mov	r6, r2
 800b192:	461f      	mov	r7, r3
 800b194:	4605      	mov	r5, r0
 800b196:	f001 fe7d 	bl	800ce94 <_localeconv_r>
 800b19a:	f8d0 a000 	ldr.w	sl, [r0]
 800b19e:	4650      	mov	r0, sl
 800b1a0:	f7f5 f866 	bl	8000270 <strlen>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	9305      	str	r3, [sp, #20]
 800b1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1b4:	3307      	adds	r3, #7
 800b1b6:	f023 0307 	bic.w	r3, r3, #7
 800b1ba:	f103 0208 	add.w	r2, r3, #8
 800b1be:	f8c8 2000 	str.w	r2, [r8]
 800b1c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1ca:	9307      	str	r3, [sp, #28]
 800b1cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1d0:	ee08 0a10 	vmov	s16, r0
 800b1d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b1d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1dc:	4b9e      	ldr	r3, [pc, #632]	; (800b458 <_printf_float+0x2d8>)
 800b1de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1e2:	f7f5 fca3 	bl	8000b2c <__aeabi_dcmpun>
 800b1e6:	bb88      	cbnz	r0, 800b24c <_printf_float+0xcc>
 800b1e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ec:	4b9a      	ldr	r3, [pc, #616]	; (800b458 <_printf_float+0x2d8>)
 800b1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1f2:	f7f5 fc7d 	bl	8000af0 <__aeabi_dcmple>
 800b1f6:	bb48      	cbnz	r0, 800b24c <_printf_float+0xcc>
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800b204:	b110      	cbz	r0, 800b20c <_printf_float+0x8c>
 800b206:	232d      	movs	r3, #45	; 0x2d
 800b208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b20c:	4a93      	ldr	r2, [pc, #588]	; (800b45c <_printf_float+0x2dc>)
 800b20e:	4b94      	ldr	r3, [pc, #592]	; (800b460 <_printf_float+0x2e0>)
 800b210:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b214:	bf94      	ite	ls
 800b216:	4690      	movls	r8, r2
 800b218:	4698      	movhi	r8, r3
 800b21a:	2303      	movs	r3, #3
 800b21c:	6123      	str	r3, [r4, #16]
 800b21e:	9b05      	ldr	r3, [sp, #20]
 800b220:	f023 0304 	bic.w	r3, r3, #4
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	f04f 0900 	mov.w	r9, #0
 800b22a:	9700      	str	r7, [sp, #0]
 800b22c:	4633      	mov	r3, r6
 800b22e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b230:	4621      	mov	r1, r4
 800b232:	4628      	mov	r0, r5
 800b234:	f000 f9da 	bl	800b5ec <_printf_common>
 800b238:	3001      	adds	r0, #1
 800b23a:	f040 8090 	bne.w	800b35e <_printf_float+0x1de>
 800b23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b242:	b00d      	add	sp, #52	; 0x34
 800b244:	ecbd 8b02 	vpop	{d8}
 800b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24c:	4642      	mov	r2, r8
 800b24e:	464b      	mov	r3, r9
 800b250:	4640      	mov	r0, r8
 800b252:	4649      	mov	r1, r9
 800b254:	f7f5 fc6a 	bl	8000b2c <__aeabi_dcmpun>
 800b258:	b140      	cbz	r0, 800b26c <_printf_float+0xec>
 800b25a:	464b      	mov	r3, r9
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	bfbc      	itt	lt
 800b260:	232d      	movlt	r3, #45	; 0x2d
 800b262:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b266:	4a7f      	ldr	r2, [pc, #508]	; (800b464 <_printf_float+0x2e4>)
 800b268:	4b7f      	ldr	r3, [pc, #508]	; (800b468 <_printf_float+0x2e8>)
 800b26a:	e7d1      	b.n	800b210 <_printf_float+0x90>
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b272:	9206      	str	r2, [sp, #24]
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	d13f      	bne.n	800b2f8 <_printf_float+0x178>
 800b278:	2306      	movs	r3, #6
 800b27a:	6063      	str	r3, [r4, #4]
 800b27c:	9b05      	ldr	r3, [sp, #20]
 800b27e:	6861      	ldr	r1, [r4, #4]
 800b280:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b284:	2300      	movs	r3, #0
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	ab0a      	add	r3, sp, #40	; 0x28
 800b28a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b28e:	ab09      	add	r3, sp, #36	; 0x24
 800b290:	ec49 8b10 	vmov	d0, r8, r9
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	6022      	str	r2, [r4, #0]
 800b298:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b29c:	4628      	mov	r0, r5
 800b29e:	f7ff fecf 	bl	800b040 <__cvt>
 800b2a2:	9b06      	ldr	r3, [sp, #24]
 800b2a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2a6:	2b47      	cmp	r3, #71	; 0x47
 800b2a8:	4680      	mov	r8, r0
 800b2aa:	d108      	bne.n	800b2be <_printf_float+0x13e>
 800b2ac:	1cc8      	adds	r0, r1, #3
 800b2ae:	db02      	blt.n	800b2b6 <_printf_float+0x136>
 800b2b0:	6863      	ldr	r3, [r4, #4]
 800b2b2:	4299      	cmp	r1, r3
 800b2b4:	dd41      	ble.n	800b33a <_printf_float+0x1ba>
 800b2b6:	f1ab 0302 	sub.w	r3, fp, #2
 800b2ba:	fa5f fb83 	uxtb.w	fp, r3
 800b2be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2c2:	d820      	bhi.n	800b306 <_printf_float+0x186>
 800b2c4:	3901      	subs	r1, #1
 800b2c6:	465a      	mov	r2, fp
 800b2c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2cc:	9109      	str	r1, [sp, #36]	; 0x24
 800b2ce:	f7ff ff19 	bl	800b104 <__exponent>
 800b2d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2d4:	1813      	adds	r3, r2, r0
 800b2d6:	2a01      	cmp	r2, #1
 800b2d8:	4681      	mov	r9, r0
 800b2da:	6123      	str	r3, [r4, #16]
 800b2dc:	dc02      	bgt.n	800b2e4 <_printf_float+0x164>
 800b2de:	6822      	ldr	r2, [r4, #0]
 800b2e0:	07d2      	lsls	r2, r2, #31
 800b2e2:	d501      	bpl.n	800b2e8 <_printf_float+0x168>
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d09c      	beq.n	800b22a <_printf_float+0xaa>
 800b2f0:	232d      	movs	r3, #45	; 0x2d
 800b2f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2f6:	e798      	b.n	800b22a <_printf_float+0xaa>
 800b2f8:	9a06      	ldr	r2, [sp, #24]
 800b2fa:	2a47      	cmp	r2, #71	; 0x47
 800b2fc:	d1be      	bne.n	800b27c <_printf_float+0xfc>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1bc      	bne.n	800b27c <_printf_float+0xfc>
 800b302:	2301      	movs	r3, #1
 800b304:	e7b9      	b.n	800b27a <_printf_float+0xfa>
 800b306:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b30a:	d118      	bne.n	800b33e <_printf_float+0x1be>
 800b30c:	2900      	cmp	r1, #0
 800b30e:	6863      	ldr	r3, [r4, #4]
 800b310:	dd0b      	ble.n	800b32a <_printf_float+0x1aa>
 800b312:	6121      	str	r1, [r4, #16]
 800b314:	b913      	cbnz	r3, 800b31c <_printf_float+0x19c>
 800b316:	6822      	ldr	r2, [r4, #0]
 800b318:	07d0      	lsls	r0, r2, #31
 800b31a:	d502      	bpl.n	800b322 <_printf_float+0x1a2>
 800b31c:	3301      	adds	r3, #1
 800b31e:	440b      	add	r3, r1
 800b320:	6123      	str	r3, [r4, #16]
 800b322:	65a1      	str	r1, [r4, #88]	; 0x58
 800b324:	f04f 0900 	mov.w	r9, #0
 800b328:	e7de      	b.n	800b2e8 <_printf_float+0x168>
 800b32a:	b913      	cbnz	r3, 800b332 <_printf_float+0x1b2>
 800b32c:	6822      	ldr	r2, [r4, #0]
 800b32e:	07d2      	lsls	r2, r2, #31
 800b330:	d501      	bpl.n	800b336 <_printf_float+0x1b6>
 800b332:	3302      	adds	r3, #2
 800b334:	e7f4      	b.n	800b320 <_printf_float+0x1a0>
 800b336:	2301      	movs	r3, #1
 800b338:	e7f2      	b.n	800b320 <_printf_float+0x1a0>
 800b33a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b340:	4299      	cmp	r1, r3
 800b342:	db05      	blt.n	800b350 <_printf_float+0x1d0>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	6121      	str	r1, [r4, #16]
 800b348:	07d8      	lsls	r0, r3, #31
 800b34a:	d5ea      	bpl.n	800b322 <_printf_float+0x1a2>
 800b34c:	1c4b      	adds	r3, r1, #1
 800b34e:	e7e7      	b.n	800b320 <_printf_float+0x1a0>
 800b350:	2900      	cmp	r1, #0
 800b352:	bfd4      	ite	le
 800b354:	f1c1 0202 	rsble	r2, r1, #2
 800b358:	2201      	movgt	r2, #1
 800b35a:	4413      	add	r3, r2
 800b35c:	e7e0      	b.n	800b320 <_printf_float+0x1a0>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	055a      	lsls	r2, r3, #21
 800b362:	d407      	bmi.n	800b374 <_printf_float+0x1f4>
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	4642      	mov	r2, r8
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b8      	blx	r7
 800b36e:	3001      	adds	r0, #1
 800b370:	d12c      	bne.n	800b3cc <_printf_float+0x24c>
 800b372:	e764      	b.n	800b23e <_printf_float+0xbe>
 800b374:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b378:	f240 80e0 	bls.w	800b53c <_printf_float+0x3bc>
 800b37c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b380:	2200      	movs	r2, #0
 800b382:	2300      	movs	r3, #0
 800b384:	f7f5 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d034      	beq.n	800b3f6 <_printf_float+0x276>
 800b38c:	4a37      	ldr	r2, [pc, #220]	; (800b46c <_printf_float+0x2ec>)
 800b38e:	2301      	movs	r3, #1
 800b390:	4631      	mov	r1, r6
 800b392:	4628      	mov	r0, r5
 800b394:	47b8      	blx	r7
 800b396:	3001      	adds	r0, #1
 800b398:	f43f af51 	beq.w	800b23e <_printf_float+0xbe>
 800b39c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	db02      	blt.n	800b3aa <_printf_float+0x22a>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	07d8      	lsls	r0, r3, #31
 800b3a8:	d510      	bpl.n	800b3cc <_printf_float+0x24c>
 800b3aa:	ee18 3a10 	vmov	r3, s16
 800b3ae:	4652      	mov	r2, sl
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47b8      	blx	r7
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	f43f af41 	beq.w	800b23e <_printf_float+0xbe>
 800b3bc:	f04f 0800 	mov.w	r8, #0
 800b3c0:	f104 091a 	add.w	r9, r4, #26
 800b3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	4543      	cmp	r3, r8
 800b3ca:	dc09      	bgt.n	800b3e0 <_printf_float+0x260>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	079b      	lsls	r3, r3, #30
 800b3d0:	f100 8107 	bmi.w	800b5e2 <_printf_float+0x462>
 800b3d4:	68e0      	ldr	r0, [r4, #12]
 800b3d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3d8:	4298      	cmp	r0, r3
 800b3da:	bfb8      	it	lt
 800b3dc:	4618      	movlt	r0, r3
 800b3de:	e730      	b.n	800b242 <_printf_float+0xc2>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	464a      	mov	r2, r9
 800b3e4:	4631      	mov	r1, r6
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	47b8      	blx	r7
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	f43f af27 	beq.w	800b23e <_printf_float+0xbe>
 800b3f0:	f108 0801 	add.w	r8, r8, #1
 800b3f4:	e7e6      	b.n	800b3c4 <_printf_float+0x244>
 800b3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dc39      	bgt.n	800b470 <_printf_float+0x2f0>
 800b3fc:	4a1b      	ldr	r2, [pc, #108]	; (800b46c <_printf_float+0x2ec>)
 800b3fe:	2301      	movs	r3, #1
 800b400:	4631      	mov	r1, r6
 800b402:	4628      	mov	r0, r5
 800b404:	47b8      	blx	r7
 800b406:	3001      	adds	r0, #1
 800b408:	f43f af19 	beq.w	800b23e <_printf_float+0xbe>
 800b40c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b410:	4313      	orrs	r3, r2
 800b412:	d102      	bne.n	800b41a <_printf_float+0x29a>
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	07d9      	lsls	r1, r3, #31
 800b418:	d5d8      	bpl.n	800b3cc <_printf_float+0x24c>
 800b41a:	ee18 3a10 	vmov	r3, s16
 800b41e:	4652      	mov	r2, sl
 800b420:	4631      	mov	r1, r6
 800b422:	4628      	mov	r0, r5
 800b424:	47b8      	blx	r7
 800b426:	3001      	adds	r0, #1
 800b428:	f43f af09 	beq.w	800b23e <_printf_float+0xbe>
 800b42c:	f04f 0900 	mov.w	r9, #0
 800b430:	f104 0a1a 	add.w	sl, r4, #26
 800b434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b436:	425b      	negs	r3, r3
 800b438:	454b      	cmp	r3, r9
 800b43a:	dc01      	bgt.n	800b440 <_printf_float+0x2c0>
 800b43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43e:	e792      	b.n	800b366 <_printf_float+0x1e6>
 800b440:	2301      	movs	r3, #1
 800b442:	4652      	mov	r2, sl
 800b444:	4631      	mov	r1, r6
 800b446:	4628      	mov	r0, r5
 800b448:	47b8      	blx	r7
 800b44a:	3001      	adds	r0, #1
 800b44c:	f43f aef7 	beq.w	800b23e <_printf_float+0xbe>
 800b450:	f109 0901 	add.w	r9, r9, #1
 800b454:	e7ee      	b.n	800b434 <_printf_float+0x2b4>
 800b456:	bf00      	nop
 800b458:	7fefffff 	.word	0x7fefffff
 800b45c:	08010e30 	.word	0x08010e30
 800b460:	08010e34 	.word	0x08010e34
 800b464:	08010e38 	.word	0x08010e38
 800b468:	08010e3c 	.word	0x08010e3c
 800b46c:	08010e40 	.word	0x08010e40
 800b470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b474:	429a      	cmp	r2, r3
 800b476:	bfa8      	it	ge
 800b478:	461a      	movge	r2, r3
 800b47a:	2a00      	cmp	r2, #0
 800b47c:	4691      	mov	r9, r2
 800b47e:	dc37      	bgt.n	800b4f0 <_printf_float+0x370>
 800b480:	f04f 0b00 	mov.w	fp, #0
 800b484:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b488:	f104 021a 	add.w	r2, r4, #26
 800b48c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b48e:	9305      	str	r3, [sp, #20]
 800b490:	eba3 0309 	sub.w	r3, r3, r9
 800b494:	455b      	cmp	r3, fp
 800b496:	dc33      	bgt.n	800b500 <_printf_float+0x380>
 800b498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b49c:	429a      	cmp	r2, r3
 800b49e:	db3b      	blt.n	800b518 <_printf_float+0x398>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	07da      	lsls	r2, r3, #31
 800b4a4:	d438      	bmi.n	800b518 <_printf_float+0x398>
 800b4a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b4aa:	eba2 0903 	sub.w	r9, r2, r3
 800b4ae:	9b05      	ldr	r3, [sp, #20]
 800b4b0:	1ad2      	subs	r2, r2, r3
 800b4b2:	4591      	cmp	r9, r2
 800b4b4:	bfa8      	it	ge
 800b4b6:	4691      	movge	r9, r2
 800b4b8:	f1b9 0f00 	cmp.w	r9, #0
 800b4bc:	dc35      	bgt.n	800b52a <_printf_float+0x3aa>
 800b4be:	f04f 0800 	mov.w	r8, #0
 800b4c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4c6:	f104 0a1a 	add.w	sl, r4, #26
 800b4ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	eba3 0309 	sub.w	r3, r3, r9
 800b4d4:	4543      	cmp	r3, r8
 800b4d6:	f77f af79 	ble.w	800b3cc <_printf_float+0x24c>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f43f aeaa 	beq.w	800b23e <_printf_float+0xbe>
 800b4ea:	f108 0801 	add.w	r8, r8, #1
 800b4ee:	e7ec      	b.n	800b4ca <_printf_float+0x34a>
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4642      	mov	r2, r8
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	47b8      	blx	r7
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	d1c0      	bne.n	800b480 <_printf_float+0x300>
 800b4fe:	e69e      	b.n	800b23e <_printf_float+0xbe>
 800b500:	2301      	movs	r3, #1
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	9205      	str	r2, [sp, #20]
 800b508:	47b8      	blx	r7
 800b50a:	3001      	adds	r0, #1
 800b50c:	f43f ae97 	beq.w	800b23e <_printf_float+0xbe>
 800b510:	9a05      	ldr	r2, [sp, #20]
 800b512:	f10b 0b01 	add.w	fp, fp, #1
 800b516:	e7b9      	b.n	800b48c <_printf_float+0x30c>
 800b518:	ee18 3a10 	vmov	r3, s16
 800b51c:	4652      	mov	r2, sl
 800b51e:	4631      	mov	r1, r6
 800b520:	4628      	mov	r0, r5
 800b522:	47b8      	blx	r7
 800b524:	3001      	adds	r0, #1
 800b526:	d1be      	bne.n	800b4a6 <_printf_float+0x326>
 800b528:	e689      	b.n	800b23e <_printf_float+0xbe>
 800b52a:	9a05      	ldr	r2, [sp, #20]
 800b52c:	464b      	mov	r3, r9
 800b52e:	4442      	add	r2, r8
 800b530:	4631      	mov	r1, r6
 800b532:	4628      	mov	r0, r5
 800b534:	47b8      	blx	r7
 800b536:	3001      	adds	r0, #1
 800b538:	d1c1      	bne.n	800b4be <_printf_float+0x33e>
 800b53a:	e680      	b.n	800b23e <_printf_float+0xbe>
 800b53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b53e:	2a01      	cmp	r2, #1
 800b540:	dc01      	bgt.n	800b546 <_printf_float+0x3c6>
 800b542:	07db      	lsls	r3, r3, #31
 800b544:	d53a      	bpl.n	800b5bc <_printf_float+0x43c>
 800b546:	2301      	movs	r3, #1
 800b548:	4642      	mov	r2, r8
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b8      	blx	r7
 800b550:	3001      	adds	r0, #1
 800b552:	f43f ae74 	beq.w	800b23e <_printf_float+0xbe>
 800b556:	ee18 3a10 	vmov	r3, s16
 800b55a:	4652      	mov	r2, sl
 800b55c:	4631      	mov	r1, r6
 800b55e:	4628      	mov	r0, r5
 800b560:	47b8      	blx	r7
 800b562:	3001      	adds	r0, #1
 800b564:	f43f ae6b 	beq.w	800b23e <_printf_float+0xbe>
 800b568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b56c:	2200      	movs	r2, #0
 800b56e:	2300      	movs	r3, #0
 800b570:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b574:	f7f5 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b578:	b9d8      	cbnz	r0, 800b5b2 <_printf_float+0x432>
 800b57a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b57e:	f108 0201 	add.w	r2, r8, #1
 800b582:	4631      	mov	r1, r6
 800b584:	4628      	mov	r0, r5
 800b586:	47b8      	blx	r7
 800b588:	3001      	adds	r0, #1
 800b58a:	d10e      	bne.n	800b5aa <_printf_float+0x42a>
 800b58c:	e657      	b.n	800b23e <_printf_float+0xbe>
 800b58e:	2301      	movs	r3, #1
 800b590:	4652      	mov	r2, sl
 800b592:	4631      	mov	r1, r6
 800b594:	4628      	mov	r0, r5
 800b596:	47b8      	blx	r7
 800b598:	3001      	adds	r0, #1
 800b59a:	f43f ae50 	beq.w	800b23e <_printf_float+0xbe>
 800b59e:	f108 0801 	add.w	r8, r8, #1
 800b5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	4543      	cmp	r3, r8
 800b5a8:	dcf1      	bgt.n	800b58e <_printf_float+0x40e>
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5b0:	e6da      	b.n	800b368 <_printf_float+0x1e8>
 800b5b2:	f04f 0800 	mov.w	r8, #0
 800b5b6:	f104 0a1a 	add.w	sl, r4, #26
 800b5ba:	e7f2      	b.n	800b5a2 <_printf_float+0x422>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	4642      	mov	r2, r8
 800b5c0:	e7df      	b.n	800b582 <_printf_float+0x402>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	464a      	mov	r2, r9
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b8      	blx	r7
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	f43f ae36 	beq.w	800b23e <_printf_float+0xbe>
 800b5d2:	f108 0801 	add.w	r8, r8, #1
 800b5d6:	68e3      	ldr	r3, [r4, #12]
 800b5d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5da:	1a5b      	subs	r3, r3, r1
 800b5dc:	4543      	cmp	r3, r8
 800b5de:	dcf0      	bgt.n	800b5c2 <_printf_float+0x442>
 800b5e0:	e6f8      	b.n	800b3d4 <_printf_float+0x254>
 800b5e2:	f04f 0800 	mov.w	r8, #0
 800b5e6:	f104 0919 	add.w	r9, r4, #25
 800b5ea:	e7f4      	b.n	800b5d6 <_printf_float+0x456>

0800b5ec <_printf_common>:
 800b5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	4699      	mov	r9, r3
 800b5f4:	688a      	ldr	r2, [r1, #8]
 800b5f6:	690b      	ldr	r3, [r1, #16]
 800b5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	bfb8      	it	lt
 800b600:	4613      	movlt	r3, r2
 800b602:	6033      	str	r3, [r6, #0]
 800b604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b608:	4607      	mov	r7, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	b10a      	cbz	r2, 800b612 <_printf_common+0x26>
 800b60e:	3301      	adds	r3, #1
 800b610:	6033      	str	r3, [r6, #0]
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	0699      	lsls	r1, r3, #26
 800b616:	bf42      	ittt	mi
 800b618:	6833      	ldrmi	r3, [r6, #0]
 800b61a:	3302      	addmi	r3, #2
 800b61c:	6033      	strmi	r3, [r6, #0]
 800b61e:	6825      	ldr	r5, [r4, #0]
 800b620:	f015 0506 	ands.w	r5, r5, #6
 800b624:	d106      	bne.n	800b634 <_printf_common+0x48>
 800b626:	f104 0a19 	add.w	sl, r4, #25
 800b62a:	68e3      	ldr	r3, [r4, #12]
 800b62c:	6832      	ldr	r2, [r6, #0]
 800b62e:	1a9b      	subs	r3, r3, r2
 800b630:	42ab      	cmp	r3, r5
 800b632:	dc26      	bgt.n	800b682 <_printf_common+0x96>
 800b634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b638:	1e13      	subs	r3, r2, #0
 800b63a:	6822      	ldr	r2, [r4, #0]
 800b63c:	bf18      	it	ne
 800b63e:	2301      	movne	r3, #1
 800b640:	0692      	lsls	r2, r2, #26
 800b642:	d42b      	bmi.n	800b69c <_printf_common+0xb0>
 800b644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b648:	4649      	mov	r1, r9
 800b64a:	4638      	mov	r0, r7
 800b64c:	47c0      	blx	r8
 800b64e:	3001      	adds	r0, #1
 800b650:	d01e      	beq.n	800b690 <_printf_common+0xa4>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	6922      	ldr	r2, [r4, #16]
 800b656:	f003 0306 	and.w	r3, r3, #6
 800b65a:	2b04      	cmp	r3, #4
 800b65c:	bf02      	ittt	eq
 800b65e:	68e5      	ldreq	r5, [r4, #12]
 800b660:	6833      	ldreq	r3, [r6, #0]
 800b662:	1aed      	subeq	r5, r5, r3
 800b664:	68a3      	ldr	r3, [r4, #8]
 800b666:	bf0c      	ite	eq
 800b668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b66c:	2500      	movne	r5, #0
 800b66e:	4293      	cmp	r3, r2
 800b670:	bfc4      	itt	gt
 800b672:	1a9b      	subgt	r3, r3, r2
 800b674:	18ed      	addgt	r5, r5, r3
 800b676:	2600      	movs	r6, #0
 800b678:	341a      	adds	r4, #26
 800b67a:	42b5      	cmp	r5, r6
 800b67c:	d11a      	bne.n	800b6b4 <_printf_common+0xc8>
 800b67e:	2000      	movs	r0, #0
 800b680:	e008      	b.n	800b694 <_printf_common+0xa8>
 800b682:	2301      	movs	r3, #1
 800b684:	4652      	mov	r2, sl
 800b686:	4649      	mov	r1, r9
 800b688:	4638      	mov	r0, r7
 800b68a:	47c0      	blx	r8
 800b68c:	3001      	adds	r0, #1
 800b68e:	d103      	bne.n	800b698 <_printf_common+0xac>
 800b690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b698:	3501      	adds	r5, #1
 800b69a:	e7c6      	b.n	800b62a <_printf_common+0x3e>
 800b69c:	18e1      	adds	r1, r4, r3
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	2030      	movs	r0, #48	; 0x30
 800b6a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6a6:	4422      	add	r2, r4
 800b6a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b0:	3302      	adds	r3, #2
 800b6b2:	e7c7      	b.n	800b644 <_printf_common+0x58>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	47c0      	blx	r8
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d0e6      	beq.n	800b690 <_printf_common+0xa4>
 800b6c2:	3601      	adds	r6, #1
 800b6c4:	e7d9      	b.n	800b67a <_printf_common+0x8e>
	...

0800b6c8 <_printf_i>:
 800b6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	7e0f      	ldrb	r7, [r1, #24]
 800b6ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6d0:	2f78      	cmp	r7, #120	; 0x78
 800b6d2:	4691      	mov	r9, r2
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	469a      	mov	sl, r3
 800b6da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6de:	d807      	bhi.n	800b6f0 <_printf_i+0x28>
 800b6e0:	2f62      	cmp	r7, #98	; 0x62
 800b6e2:	d80a      	bhi.n	800b6fa <_printf_i+0x32>
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	f000 80d4 	beq.w	800b892 <_printf_i+0x1ca>
 800b6ea:	2f58      	cmp	r7, #88	; 0x58
 800b6ec:	f000 80c0 	beq.w	800b870 <_printf_i+0x1a8>
 800b6f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6f8:	e03a      	b.n	800b770 <_printf_i+0xa8>
 800b6fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6fe:	2b15      	cmp	r3, #21
 800b700:	d8f6      	bhi.n	800b6f0 <_printf_i+0x28>
 800b702:	a101      	add	r1, pc, #4	; (adr r1, 800b708 <_printf_i+0x40>)
 800b704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b708:	0800b761 	.word	0x0800b761
 800b70c:	0800b775 	.word	0x0800b775
 800b710:	0800b6f1 	.word	0x0800b6f1
 800b714:	0800b6f1 	.word	0x0800b6f1
 800b718:	0800b6f1 	.word	0x0800b6f1
 800b71c:	0800b6f1 	.word	0x0800b6f1
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b6f1 	.word	0x0800b6f1
 800b728:	0800b6f1 	.word	0x0800b6f1
 800b72c:	0800b6f1 	.word	0x0800b6f1
 800b730:	0800b6f1 	.word	0x0800b6f1
 800b734:	0800b879 	.word	0x0800b879
 800b738:	0800b7a1 	.word	0x0800b7a1
 800b73c:	0800b833 	.word	0x0800b833
 800b740:	0800b6f1 	.word	0x0800b6f1
 800b744:	0800b6f1 	.word	0x0800b6f1
 800b748:	0800b89b 	.word	0x0800b89b
 800b74c:	0800b6f1 	.word	0x0800b6f1
 800b750:	0800b7a1 	.word	0x0800b7a1
 800b754:	0800b6f1 	.word	0x0800b6f1
 800b758:	0800b6f1 	.word	0x0800b6f1
 800b75c:	0800b83b 	.word	0x0800b83b
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	1d1a      	adds	r2, r3, #4
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	602a      	str	r2, [r5, #0]
 800b768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b76c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b770:	2301      	movs	r3, #1
 800b772:	e09f      	b.n	800b8b4 <_printf_i+0x1ec>
 800b774:	6820      	ldr	r0, [r4, #0]
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	0607      	lsls	r7, r0, #24
 800b77a:	f103 0104 	add.w	r1, r3, #4
 800b77e:	6029      	str	r1, [r5, #0]
 800b780:	d501      	bpl.n	800b786 <_printf_i+0xbe>
 800b782:	681e      	ldr	r6, [r3, #0]
 800b784:	e003      	b.n	800b78e <_printf_i+0xc6>
 800b786:	0646      	lsls	r6, r0, #25
 800b788:	d5fb      	bpl.n	800b782 <_printf_i+0xba>
 800b78a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b78e:	2e00      	cmp	r6, #0
 800b790:	da03      	bge.n	800b79a <_printf_i+0xd2>
 800b792:	232d      	movs	r3, #45	; 0x2d
 800b794:	4276      	negs	r6, r6
 800b796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b79a:	485a      	ldr	r0, [pc, #360]	; (800b904 <_printf_i+0x23c>)
 800b79c:	230a      	movs	r3, #10
 800b79e:	e012      	b.n	800b7c6 <_printf_i+0xfe>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	6820      	ldr	r0, [r4, #0]
 800b7a4:	1d19      	adds	r1, r3, #4
 800b7a6:	6029      	str	r1, [r5, #0]
 800b7a8:	0605      	lsls	r5, r0, #24
 800b7aa:	d501      	bpl.n	800b7b0 <_printf_i+0xe8>
 800b7ac:	681e      	ldr	r6, [r3, #0]
 800b7ae:	e002      	b.n	800b7b6 <_printf_i+0xee>
 800b7b0:	0641      	lsls	r1, r0, #25
 800b7b2:	d5fb      	bpl.n	800b7ac <_printf_i+0xe4>
 800b7b4:	881e      	ldrh	r6, [r3, #0]
 800b7b6:	4853      	ldr	r0, [pc, #332]	; (800b904 <_printf_i+0x23c>)
 800b7b8:	2f6f      	cmp	r7, #111	; 0x6f
 800b7ba:	bf0c      	ite	eq
 800b7bc:	2308      	moveq	r3, #8
 800b7be:	230a      	movne	r3, #10
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7c6:	6865      	ldr	r5, [r4, #4]
 800b7c8:	60a5      	str	r5, [r4, #8]
 800b7ca:	2d00      	cmp	r5, #0
 800b7cc:	bfa2      	ittt	ge
 800b7ce:	6821      	ldrge	r1, [r4, #0]
 800b7d0:	f021 0104 	bicge.w	r1, r1, #4
 800b7d4:	6021      	strge	r1, [r4, #0]
 800b7d6:	b90e      	cbnz	r6, 800b7dc <_printf_i+0x114>
 800b7d8:	2d00      	cmp	r5, #0
 800b7da:	d04b      	beq.n	800b874 <_printf_i+0x1ac>
 800b7dc:	4615      	mov	r5, r2
 800b7de:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7e2:	fb03 6711 	mls	r7, r3, r1, r6
 800b7e6:	5dc7      	ldrb	r7, [r0, r7]
 800b7e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7ec:	4637      	mov	r7, r6
 800b7ee:	42bb      	cmp	r3, r7
 800b7f0:	460e      	mov	r6, r1
 800b7f2:	d9f4      	bls.n	800b7de <_printf_i+0x116>
 800b7f4:	2b08      	cmp	r3, #8
 800b7f6:	d10b      	bne.n	800b810 <_printf_i+0x148>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	07de      	lsls	r6, r3, #31
 800b7fc:	d508      	bpl.n	800b810 <_printf_i+0x148>
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	6861      	ldr	r1, [r4, #4]
 800b802:	4299      	cmp	r1, r3
 800b804:	bfde      	ittt	le
 800b806:	2330      	movle	r3, #48	; 0x30
 800b808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b80c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b810:	1b52      	subs	r2, r2, r5
 800b812:	6122      	str	r2, [r4, #16]
 800b814:	f8cd a000 	str.w	sl, [sp]
 800b818:	464b      	mov	r3, r9
 800b81a:	aa03      	add	r2, sp, #12
 800b81c:	4621      	mov	r1, r4
 800b81e:	4640      	mov	r0, r8
 800b820:	f7ff fee4 	bl	800b5ec <_printf_common>
 800b824:	3001      	adds	r0, #1
 800b826:	d14a      	bne.n	800b8be <_printf_i+0x1f6>
 800b828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b82c:	b004      	add	sp, #16
 800b82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	f043 0320 	orr.w	r3, r3, #32
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	4833      	ldr	r0, [pc, #204]	; (800b908 <_printf_i+0x240>)
 800b83c:	2778      	movs	r7, #120	; 0x78
 800b83e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	6829      	ldr	r1, [r5, #0]
 800b846:	061f      	lsls	r7, r3, #24
 800b848:	f851 6b04 	ldr.w	r6, [r1], #4
 800b84c:	d402      	bmi.n	800b854 <_printf_i+0x18c>
 800b84e:	065f      	lsls	r7, r3, #25
 800b850:	bf48      	it	mi
 800b852:	b2b6      	uxthmi	r6, r6
 800b854:	07df      	lsls	r7, r3, #31
 800b856:	bf48      	it	mi
 800b858:	f043 0320 	orrmi.w	r3, r3, #32
 800b85c:	6029      	str	r1, [r5, #0]
 800b85e:	bf48      	it	mi
 800b860:	6023      	strmi	r3, [r4, #0]
 800b862:	b91e      	cbnz	r6, 800b86c <_printf_i+0x1a4>
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	f023 0320 	bic.w	r3, r3, #32
 800b86a:	6023      	str	r3, [r4, #0]
 800b86c:	2310      	movs	r3, #16
 800b86e:	e7a7      	b.n	800b7c0 <_printf_i+0xf8>
 800b870:	4824      	ldr	r0, [pc, #144]	; (800b904 <_printf_i+0x23c>)
 800b872:	e7e4      	b.n	800b83e <_printf_i+0x176>
 800b874:	4615      	mov	r5, r2
 800b876:	e7bd      	b.n	800b7f4 <_printf_i+0x12c>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	6826      	ldr	r6, [r4, #0]
 800b87c:	6961      	ldr	r1, [r4, #20]
 800b87e:	1d18      	adds	r0, r3, #4
 800b880:	6028      	str	r0, [r5, #0]
 800b882:	0635      	lsls	r5, r6, #24
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	d501      	bpl.n	800b88c <_printf_i+0x1c4>
 800b888:	6019      	str	r1, [r3, #0]
 800b88a:	e002      	b.n	800b892 <_printf_i+0x1ca>
 800b88c:	0670      	lsls	r0, r6, #25
 800b88e:	d5fb      	bpl.n	800b888 <_printf_i+0x1c0>
 800b890:	8019      	strh	r1, [r3, #0]
 800b892:	2300      	movs	r3, #0
 800b894:	6123      	str	r3, [r4, #16]
 800b896:	4615      	mov	r5, r2
 800b898:	e7bc      	b.n	800b814 <_printf_i+0x14c>
 800b89a:	682b      	ldr	r3, [r5, #0]
 800b89c:	1d1a      	adds	r2, r3, #4
 800b89e:	602a      	str	r2, [r5, #0]
 800b8a0:	681d      	ldr	r5, [r3, #0]
 800b8a2:	6862      	ldr	r2, [r4, #4]
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	f7f4 fc92 	bl	80001d0 <memchr>
 800b8ac:	b108      	cbz	r0, 800b8b2 <_printf_i+0x1ea>
 800b8ae:	1b40      	subs	r0, r0, r5
 800b8b0:	6060      	str	r0, [r4, #4]
 800b8b2:	6863      	ldr	r3, [r4, #4]
 800b8b4:	6123      	str	r3, [r4, #16]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8bc:	e7aa      	b.n	800b814 <_printf_i+0x14c>
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	462a      	mov	r2, r5
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	47d0      	blx	sl
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	d0ad      	beq.n	800b828 <_printf_i+0x160>
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	079b      	lsls	r3, r3, #30
 800b8d0:	d413      	bmi.n	800b8fa <_printf_i+0x232>
 800b8d2:	68e0      	ldr	r0, [r4, #12]
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	4298      	cmp	r0, r3
 800b8d8:	bfb8      	it	lt
 800b8da:	4618      	movlt	r0, r3
 800b8dc:	e7a6      	b.n	800b82c <_printf_i+0x164>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	4632      	mov	r2, r6
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	47d0      	blx	sl
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	d09d      	beq.n	800b828 <_printf_i+0x160>
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	68e3      	ldr	r3, [r4, #12]
 800b8f0:	9903      	ldr	r1, [sp, #12]
 800b8f2:	1a5b      	subs	r3, r3, r1
 800b8f4:	42ab      	cmp	r3, r5
 800b8f6:	dcf2      	bgt.n	800b8de <_printf_i+0x216>
 800b8f8:	e7eb      	b.n	800b8d2 <_printf_i+0x20a>
 800b8fa:	2500      	movs	r5, #0
 800b8fc:	f104 0619 	add.w	r6, r4, #25
 800b900:	e7f5      	b.n	800b8ee <_printf_i+0x226>
 800b902:	bf00      	nop
 800b904:	08010e42 	.word	0x08010e42
 800b908:	08010e53 	.word	0x08010e53

0800b90c <_scanf_float>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	b087      	sub	sp, #28
 800b912:	4617      	mov	r7, r2
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	688b      	ldr	r3, [r1, #8]
 800b918:	1e5a      	subs	r2, r3, #1
 800b91a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b91e:	bf83      	ittte	hi
 800b920:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b924:	195b      	addhi	r3, r3, r5
 800b926:	9302      	strhi	r3, [sp, #8]
 800b928:	2300      	movls	r3, #0
 800b92a:	bf86      	itte	hi
 800b92c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b930:	608b      	strhi	r3, [r1, #8]
 800b932:	9302      	strls	r3, [sp, #8]
 800b934:	680b      	ldr	r3, [r1, #0]
 800b936:	468b      	mov	fp, r1
 800b938:	2500      	movs	r5, #0
 800b93a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b93e:	f84b 3b1c 	str.w	r3, [fp], #28
 800b942:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b946:	4680      	mov	r8, r0
 800b948:	460c      	mov	r4, r1
 800b94a:	465e      	mov	r6, fp
 800b94c:	46aa      	mov	sl, r5
 800b94e:	46a9      	mov	r9, r5
 800b950:	9501      	str	r5, [sp, #4]
 800b952:	68a2      	ldr	r2, [r4, #8]
 800b954:	b152      	cbz	r2, 800b96c <_scanf_float+0x60>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b4e      	cmp	r3, #78	; 0x4e
 800b95c:	d864      	bhi.n	800ba28 <_scanf_float+0x11c>
 800b95e:	2b40      	cmp	r3, #64	; 0x40
 800b960:	d83c      	bhi.n	800b9dc <_scanf_float+0xd0>
 800b962:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b966:	b2c8      	uxtb	r0, r1
 800b968:	280e      	cmp	r0, #14
 800b96a:	d93a      	bls.n	800b9e2 <_scanf_float+0xd6>
 800b96c:	f1b9 0f00 	cmp.w	r9, #0
 800b970:	d003      	beq.n	800b97a <_scanf_float+0x6e>
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b97e:	f1ba 0f01 	cmp.w	sl, #1
 800b982:	f200 8113 	bhi.w	800bbac <_scanf_float+0x2a0>
 800b986:	455e      	cmp	r6, fp
 800b988:	f200 8105 	bhi.w	800bb96 <_scanf_float+0x28a>
 800b98c:	2501      	movs	r5, #1
 800b98e:	4628      	mov	r0, r5
 800b990:	b007      	add	sp, #28
 800b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b996:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b99a:	2a0d      	cmp	r2, #13
 800b99c:	d8e6      	bhi.n	800b96c <_scanf_float+0x60>
 800b99e:	a101      	add	r1, pc, #4	; (adr r1, 800b9a4 <_scanf_float+0x98>)
 800b9a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b9a4:	0800bae3 	.word	0x0800bae3
 800b9a8:	0800b96d 	.word	0x0800b96d
 800b9ac:	0800b96d 	.word	0x0800b96d
 800b9b0:	0800b96d 	.word	0x0800b96d
 800b9b4:	0800bb43 	.word	0x0800bb43
 800b9b8:	0800bb1b 	.word	0x0800bb1b
 800b9bc:	0800b96d 	.word	0x0800b96d
 800b9c0:	0800b96d 	.word	0x0800b96d
 800b9c4:	0800baf1 	.word	0x0800baf1
 800b9c8:	0800b96d 	.word	0x0800b96d
 800b9cc:	0800b96d 	.word	0x0800b96d
 800b9d0:	0800b96d 	.word	0x0800b96d
 800b9d4:	0800b96d 	.word	0x0800b96d
 800b9d8:	0800baa9 	.word	0x0800baa9
 800b9dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b9e0:	e7db      	b.n	800b99a <_scanf_float+0x8e>
 800b9e2:	290e      	cmp	r1, #14
 800b9e4:	d8c2      	bhi.n	800b96c <_scanf_float+0x60>
 800b9e6:	a001      	add	r0, pc, #4	; (adr r0, 800b9ec <_scanf_float+0xe0>)
 800b9e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b9ec:	0800ba9b 	.word	0x0800ba9b
 800b9f0:	0800b96d 	.word	0x0800b96d
 800b9f4:	0800ba9b 	.word	0x0800ba9b
 800b9f8:	0800bb2f 	.word	0x0800bb2f
 800b9fc:	0800b96d 	.word	0x0800b96d
 800ba00:	0800ba49 	.word	0x0800ba49
 800ba04:	0800ba85 	.word	0x0800ba85
 800ba08:	0800ba85 	.word	0x0800ba85
 800ba0c:	0800ba85 	.word	0x0800ba85
 800ba10:	0800ba85 	.word	0x0800ba85
 800ba14:	0800ba85 	.word	0x0800ba85
 800ba18:	0800ba85 	.word	0x0800ba85
 800ba1c:	0800ba85 	.word	0x0800ba85
 800ba20:	0800ba85 	.word	0x0800ba85
 800ba24:	0800ba85 	.word	0x0800ba85
 800ba28:	2b6e      	cmp	r3, #110	; 0x6e
 800ba2a:	d809      	bhi.n	800ba40 <_scanf_float+0x134>
 800ba2c:	2b60      	cmp	r3, #96	; 0x60
 800ba2e:	d8b2      	bhi.n	800b996 <_scanf_float+0x8a>
 800ba30:	2b54      	cmp	r3, #84	; 0x54
 800ba32:	d077      	beq.n	800bb24 <_scanf_float+0x218>
 800ba34:	2b59      	cmp	r3, #89	; 0x59
 800ba36:	d199      	bne.n	800b96c <_scanf_float+0x60>
 800ba38:	2d07      	cmp	r5, #7
 800ba3a:	d197      	bne.n	800b96c <_scanf_float+0x60>
 800ba3c:	2508      	movs	r5, #8
 800ba3e:	e029      	b.n	800ba94 <_scanf_float+0x188>
 800ba40:	2b74      	cmp	r3, #116	; 0x74
 800ba42:	d06f      	beq.n	800bb24 <_scanf_float+0x218>
 800ba44:	2b79      	cmp	r3, #121	; 0x79
 800ba46:	e7f6      	b.n	800ba36 <_scanf_float+0x12a>
 800ba48:	6821      	ldr	r1, [r4, #0]
 800ba4a:	05c8      	lsls	r0, r1, #23
 800ba4c:	d51a      	bpl.n	800ba84 <_scanf_float+0x178>
 800ba4e:	9b02      	ldr	r3, [sp, #8]
 800ba50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ba54:	6021      	str	r1, [r4, #0]
 800ba56:	f109 0901 	add.w	r9, r9, #1
 800ba5a:	b11b      	cbz	r3, 800ba64 <_scanf_float+0x158>
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	3201      	adds	r2, #1
 800ba60:	9302      	str	r3, [sp, #8]
 800ba62:	60a2      	str	r2, [r4, #8]
 800ba64:	68a3      	ldr	r3, [r4, #8]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	60a3      	str	r3, [r4, #8]
 800ba6a:	6923      	ldr	r3, [r4, #16]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3b01      	subs	r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	607b      	str	r3, [r7, #4]
 800ba78:	f340 8084 	ble.w	800bb84 <_scanf_float+0x278>
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	603b      	str	r3, [r7, #0]
 800ba82:	e766      	b.n	800b952 <_scanf_float+0x46>
 800ba84:	eb1a 0f05 	cmn.w	sl, r5
 800ba88:	f47f af70 	bne.w	800b96c <_scanf_float+0x60>
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ba92:	6022      	str	r2, [r4, #0]
 800ba94:	f806 3b01 	strb.w	r3, [r6], #1
 800ba98:	e7e4      	b.n	800ba64 <_scanf_float+0x158>
 800ba9a:	6822      	ldr	r2, [r4, #0]
 800ba9c:	0610      	lsls	r0, r2, #24
 800ba9e:	f57f af65 	bpl.w	800b96c <_scanf_float+0x60>
 800baa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800baa6:	e7f4      	b.n	800ba92 <_scanf_float+0x186>
 800baa8:	f1ba 0f00 	cmp.w	sl, #0
 800baac:	d10e      	bne.n	800bacc <_scanf_float+0x1c0>
 800baae:	f1b9 0f00 	cmp.w	r9, #0
 800bab2:	d10e      	bne.n	800bad2 <_scanf_float+0x1c6>
 800bab4:	6822      	ldr	r2, [r4, #0]
 800bab6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800baba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800babe:	d108      	bne.n	800bad2 <_scanf_float+0x1c6>
 800bac0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bac4:	6022      	str	r2, [r4, #0]
 800bac6:	f04f 0a01 	mov.w	sl, #1
 800baca:	e7e3      	b.n	800ba94 <_scanf_float+0x188>
 800bacc:	f1ba 0f02 	cmp.w	sl, #2
 800bad0:	d055      	beq.n	800bb7e <_scanf_float+0x272>
 800bad2:	2d01      	cmp	r5, #1
 800bad4:	d002      	beq.n	800badc <_scanf_float+0x1d0>
 800bad6:	2d04      	cmp	r5, #4
 800bad8:	f47f af48 	bne.w	800b96c <_scanf_float+0x60>
 800badc:	3501      	adds	r5, #1
 800bade:	b2ed      	uxtb	r5, r5
 800bae0:	e7d8      	b.n	800ba94 <_scanf_float+0x188>
 800bae2:	f1ba 0f01 	cmp.w	sl, #1
 800bae6:	f47f af41 	bne.w	800b96c <_scanf_float+0x60>
 800baea:	f04f 0a02 	mov.w	sl, #2
 800baee:	e7d1      	b.n	800ba94 <_scanf_float+0x188>
 800baf0:	b97d      	cbnz	r5, 800bb12 <_scanf_float+0x206>
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	f47f af3c 	bne.w	800b972 <_scanf_float+0x66>
 800bafa:	6822      	ldr	r2, [r4, #0]
 800bafc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bb00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bb04:	f47f af39 	bne.w	800b97a <_scanf_float+0x6e>
 800bb08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb0c:	6022      	str	r2, [r4, #0]
 800bb0e:	2501      	movs	r5, #1
 800bb10:	e7c0      	b.n	800ba94 <_scanf_float+0x188>
 800bb12:	2d03      	cmp	r5, #3
 800bb14:	d0e2      	beq.n	800badc <_scanf_float+0x1d0>
 800bb16:	2d05      	cmp	r5, #5
 800bb18:	e7de      	b.n	800bad8 <_scanf_float+0x1cc>
 800bb1a:	2d02      	cmp	r5, #2
 800bb1c:	f47f af26 	bne.w	800b96c <_scanf_float+0x60>
 800bb20:	2503      	movs	r5, #3
 800bb22:	e7b7      	b.n	800ba94 <_scanf_float+0x188>
 800bb24:	2d06      	cmp	r5, #6
 800bb26:	f47f af21 	bne.w	800b96c <_scanf_float+0x60>
 800bb2a:	2507      	movs	r5, #7
 800bb2c:	e7b2      	b.n	800ba94 <_scanf_float+0x188>
 800bb2e:	6822      	ldr	r2, [r4, #0]
 800bb30:	0591      	lsls	r1, r2, #22
 800bb32:	f57f af1b 	bpl.w	800b96c <_scanf_float+0x60>
 800bb36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bb3a:	6022      	str	r2, [r4, #0]
 800bb3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb40:	e7a8      	b.n	800ba94 <_scanf_float+0x188>
 800bb42:	6822      	ldr	r2, [r4, #0]
 800bb44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bb48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bb4c:	d006      	beq.n	800bb5c <_scanf_float+0x250>
 800bb4e:	0550      	lsls	r0, r2, #21
 800bb50:	f57f af0c 	bpl.w	800b96c <_scanf_float+0x60>
 800bb54:	f1b9 0f00 	cmp.w	r9, #0
 800bb58:	f43f af0f 	beq.w	800b97a <_scanf_float+0x6e>
 800bb5c:	0591      	lsls	r1, r2, #22
 800bb5e:	bf58      	it	pl
 800bb60:	9901      	ldrpl	r1, [sp, #4]
 800bb62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb66:	bf58      	it	pl
 800bb68:	eba9 0101 	subpl.w	r1, r9, r1
 800bb6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bb70:	bf58      	it	pl
 800bb72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb76:	6022      	str	r2, [r4, #0]
 800bb78:	f04f 0900 	mov.w	r9, #0
 800bb7c:	e78a      	b.n	800ba94 <_scanf_float+0x188>
 800bb7e:	f04f 0a03 	mov.w	sl, #3
 800bb82:	e787      	b.n	800ba94 <_scanf_float+0x188>
 800bb84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb88:	4639      	mov	r1, r7
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	4798      	blx	r3
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f aedf 	beq.w	800b952 <_scanf_float+0x46>
 800bb94:	e6ea      	b.n	800b96c <_scanf_float+0x60>
 800bb96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb9e:	463a      	mov	r2, r7
 800bba0:	4640      	mov	r0, r8
 800bba2:	4798      	blx	r3
 800bba4:	6923      	ldr	r3, [r4, #16]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	e6ec      	b.n	800b986 <_scanf_float+0x7a>
 800bbac:	1e6b      	subs	r3, r5, #1
 800bbae:	2b06      	cmp	r3, #6
 800bbb0:	d825      	bhi.n	800bbfe <_scanf_float+0x2f2>
 800bbb2:	2d02      	cmp	r5, #2
 800bbb4:	d836      	bhi.n	800bc24 <_scanf_float+0x318>
 800bbb6:	455e      	cmp	r6, fp
 800bbb8:	f67f aee8 	bls.w	800b98c <_scanf_float+0x80>
 800bbbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbc4:	463a      	mov	r2, r7
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	4798      	blx	r3
 800bbca:	6923      	ldr	r3, [r4, #16]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	6123      	str	r3, [r4, #16]
 800bbd0:	e7f1      	b.n	800bbb6 <_scanf_float+0x2aa>
 800bbd2:	9802      	ldr	r0, [sp, #8]
 800bbd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bbdc:	9002      	str	r0, [sp, #8]
 800bbde:	463a      	mov	r2, r7
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4798      	blx	r3
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	6123      	str	r3, [r4, #16]
 800bbea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bbee:	fa5f fa8a 	uxtb.w	sl, sl
 800bbf2:	f1ba 0f02 	cmp.w	sl, #2
 800bbf6:	d1ec      	bne.n	800bbd2 <_scanf_float+0x2c6>
 800bbf8:	3d03      	subs	r5, #3
 800bbfa:	b2ed      	uxtb	r5, r5
 800bbfc:	1b76      	subs	r6, r6, r5
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	05da      	lsls	r2, r3, #23
 800bc02:	d52f      	bpl.n	800bc64 <_scanf_float+0x358>
 800bc04:	055b      	lsls	r3, r3, #21
 800bc06:	d510      	bpl.n	800bc2a <_scanf_float+0x31e>
 800bc08:	455e      	cmp	r6, fp
 800bc0a:	f67f aebf 	bls.w	800b98c <_scanf_float+0x80>
 800bc0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc16:	463a      	mov	r2, r7
 800bc18:	4640      	mov	r0, r8
 800bc1a:	4798      	blx	r3
 800bc1c:	6923      	ldr	r3, [r4, #16]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	6123      	str	r3, [r4, #16]
 800bc22:	e7f1      	b.n	800bc08 <_scanf_float+0x2fc>
 800bc24:	46aa      	mov	sl, r5
 800bc26:	9602      	str	r6, [sp, #8]
 800bc28:	e7df      	b.n	800bbea <_scanf_float+0x2de>
 800bc2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	2965      	cmp	r1, #101	; 0x65
 800bc32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bc36:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800bc3a:	6123      	str	r3, [r4, #16]
 800bc3c:	d00c      	beq.n	800bc58 <_scanf_float+0x34c>
 800bc3e:	2945      	cmp	r1, #69	; 0x45
 800bc40:	d00a      	beq.n	800bc58 <_scanf_float+0x34c>
 800bc42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc46:	463a      	mov	r2, r7
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4798      	blx	r3
 800bc4c:	6923      	ldr	r3, [r4, #16]
 800bc4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	1eb5      	subs	r5, r6, #2
 800bc56:	6123      	str	r3, [r4, #16]
 800bc58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc5c:	463a      	mov	r2, r7
 800bc5e:	4640      	mov	r0, r8
 800bc60:	4798      	blx	r3
 800bc62:	462e      	mov	r6, r5
 800bc64:	6825      	ldr	r5, [r4, #0]
 800bc66:	f015 0510 	ands.w	r5, r5, #16
 800bc6a:	d158      	bne.n	800bd1e <_scanf_float+0x412>
 800bc6c:	7035      	strb	r5, [r6, #0]
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bc74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc78:	d11c      	bne.n	800bcb4 <_scanf_float+0x3a8>
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	454b      	cmp	r3, r9
 800bc7e:	eba3 0209 	sub.w	r2, r3, r9
 800bc82:	d124      	bne.n	800bcce <_scanf_float+0x3c2>
 800bc84:	2200      	movs	r2, #0
 800bc86:	4659      	mov	r1, fp
 800bc88:	4640      	mov	r0, r8
 800bc8a:	f000 ff65 	bl	800cb58 <_strtod_r>
 800bc8e:	9b03      	ldr	r3, [sp, #12]
 800bc90:	6821      	ldr	r1, [r4, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f011 0f02 	tst.w	r1, #2
 800bc98:	ec57 6b10 	vmov	r6, r7, d0
 800bc9c:	f103 0204 	add.w	r2, r3, #4
 800bca0:	d020      	beq.n	800bce4 <_scanf_float+0x3d8>
 800bca2:	9903      	ldr	r1, [sp, #12]
 800bca4:	600a      	str	r2, [r1, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	e9c3 6700 	strd	r6, r7, [r3]
 800bcac:	68e3      	ldr	r3, [r4, #12]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	60e3      	str	r3, [r4, #12]
 800bcb2:	e66c      	b.n	800b98e <_scanf_float+0x82>
 800bcb4:	9b04      	ldr	r3, [sp, #16]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d0e4      	beq.n	800bc84 <_scanf_float+0x378>
 800bcba:	9905      	ldr	r1, [sp, #20]
 800bcbc:	230a      	movs	r3, #10
 800bcbe:	462a      	mov	r2, r5
 800bcc0:	3101      	adds	r1, #1
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	f001 f836 	bl	800cd34 <_strtol_r>
 800bcc8:	9b04      	ldr	r3, [sp, #16]
 800bcca:	9e05      	ldr	r6, [sp, #20]
 800bccc:	1ac2      	subs	r2, r0, r3
 800bcce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bcd2:	429e      	cmp	r6, r3
 800bcd4:	bf28      	it	cs
 800bcd6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bcda:	4912      	ldr	r1, [pc, #72]	; (800bd24 <_scanf_float+0x418>)
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f000 f825 	bl	800bd2c <siprintf>
 800bce2:	e7cf      	b.n	800bc84 <_scanf_float+0x378>
 800bce4:	f011 0f04 	tst.w	r1, #4
 800bce8:	9903      	ldr	r1, [sp, #12]
 800bcea:	600a      	str	r2, [r1, #0]
 800bcec:	d1db      	bne.n	800bca6 <_scanf_float+0x39a>
 800bcee:	f8d3 8000 	ldr.w	r8, [r3]
 800bcf2:	ee10 2a10 	vmov	r2, s0
 800bcf6:	ee10 0a10 	vmov	r0, s0
 800bcfa:	463b      	mov	r3, r7
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	f7f4 ff15 	bl	8000b2c <__aeabi_dcmpun>
 800bd02:	b128      	cbz	r0, 800bd10 <_scanf_float+0x404>
 800bd04:	4808      	ldr	r0, [pc, #32]	; (800bd28 <_scanf_float+0x41c>)
 800bd06:	f001 f953 	bl	800cfb0 <nanf>
 800bd0a:	ed88 0a00 	vstr	s0, [r8]
 800bd0e:	e7cd      	b.n	800bcac <_scanf_float+0x3a0>
 800bd10:	4630      	mov	r0, r6
 800bd12:	4639      	mov	r1, r7
 800bd14:	f7f4 ff68 	bl	8000be8 <__aeabi_d2f>
 800bd18:	f8c8 0000 	str.w	r0, [r8]
 800bd1c:	e7c6      	b.n	800bcac <_scanf_float+0x3a0>
 800bd1e:	2500      	movs	r5, #0
 800bd20:	e635      	b.n	800b98e <_scanf_float+0x82>
 800bd22:	bf00      	nop
 800bd24:	08010e64 	.word	0x08010e64
 800bd28:	08011257 	.word	0x08011257

0800bd2c <siprintf>:
 800bd2c:	b40e      	push	{r1, r2, r3}
 800bd2e:	b500      	push	{lr}
 800bd30:	b09c      	sub	sp, #112	; 0x70
 800bd32:	ab1d      	add	r3, sp, #116	; 0x74
 800bd34:	9002      	str	r0, [sp, #8]
 800bd36:	9006      	str	r0, [sp, #24]
 800bd38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd3c:	4809      	ldr	r0, [pc, #36]	; (800bd64 <siprintf+0x38>)
 800bd3e:	9107      	str	r1, [sp, #28]
 800bd40:	9104      	str	r1, [sp, #16]
 800bd42:	4909      	ldr	r1, [pc, #36]	; (800bd68 <siprintf+0x3c>)
 800bd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd48:	9105      	str	r1, [sp, #20]
 800bd4a:	6800      	ldr	r0, [r0, #0]
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	a902      	add	r1, sp, #8
 800bd50:	f002 fbae 	bl	800e4b0 <_svfiprintf_r>
 800bd54:	9b02      	ldr	r3, [sp, #8]
 800bd56:	2200      	movs	r2, #0
 800bd58:	701a      	strb	r2, [r3, #0]
 800bd5a:	b01c      	add	sp, #112	; 0x70
 800bd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd60:	b003      	add	sp, #12
 800bd62:	4770      	bx	lr
 800bd64:	20000208 	.word	0x20000208
 800bd68:	ffff0208 	.word	0xffff0208

0800bd6c <__sread>:
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	460c      	mov	r4, r1
 800bd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd74:	f001 f8b4 	bl	800cee0 <_read_r>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	bfab      	itete	ge
 800bd7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd7e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd80:	181b      	addge	r3, r3, r0
 800bd82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd86:	bfac      	ite	ge
 800bd88:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd8a:	81a3      	strhlt	r3, [r4, #12]
 800bd8c:	bd10      	pop	{r4, pc}

0800bd8e <__swrite>:
 800bd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd92:	461f      	mov	r7, r3
 800bd94:	898b      	ldrh	r3, [r1, #12]
 800bd96:	05db      	lsls	r3, r3, #23
 800bd98:	4605      	mov	r5, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	4616      	mov	r6, r2
 800bd9e:	d505      	bpl.n	800bdac <__swrite+0x1e>
 800bda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda4:	2302      	movs	r3, #2
 800bda6:	2200      	movs	r2, #0
 800bda8:	f001 f888 	bl	800cebc <_lseek_r>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdb6:	81a3      	strh	r3, [r4, #12]
 800bdb8:	4632      	mov	r2, r6
 800bdba:	463b      	mov	r3, r7
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc2:	f001 b89f 	b.w	800cf04 <_write_r>

0800bdc6 <__sseek>:
 800bdc6:	b510      	push	{r4, lr}
 800bdc8:	460c      	mov	r4, r1
 800bdca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdce:	f001 f875 	bl	800cebc <_lseek_r>
 800bdd2:	1c43      	adds	r3, r0, #1
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	bf15      	itete	ne
 800bdd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bde2:	81a3      	strheq	r3, [r4, #12]
 800bde4:	bf18      	it	ne
 800bde6:	81a3      	strhne	r3, [r4, #12]
 800bde8:	bd10      	pop	{r4, pc}

0800bdea <__sclose>:
 800bdea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdee:	f001 b855 	b.w	800ce9c <_close_r>
	...

0800bdf4 <std>:
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	b510      	push	{r4, lr}
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	e9c0 3300 	strd	r3, r3, [r0]
 800bdfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be02:	6083      	str	r3, [r0, #8]
 800be04:	8181      	strh	r1, [r0, #12]
 800be06:	6643      	str	r3, [r0, #100]	; 0x64
 800be08:	81c2      	strh	r2, [r0, #14]
 800be0a:	6183      	str	r3, [r0, #24]
 800be0c:	4619      	mov	r1, r3
 800be0e:	2208      	movs	r2, #8
 800be10:	305c      	adds	r0, #92	; 0x5c
 800be12:	f001 f837 	bl	800ce84 <memset>
 800be16:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <std+0x58>)
 800be18:	6263      	str	r3, [r4, #36]	; 0x24
 800be1a:	4b0d      	ldr	r3, [pc, #52]	; (800be50 <std+0x5c>)
 800be1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be1e:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <std+0x60>)
 800be20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be22:	4b0d      	ldr	r3, [pc, #52]	; (800be58 <std+0x64>)
 800be24:	6323      	str	r3, [r4, #48]	; 0x30
 800be26:	4b0d      	ldr	r3, [pc, #52]	; (800be5c <std+0x68>)
 800be28:	6224      	str	r4, [r4, #32]
 800be2a:	429c      	cmp	r4, r3
 800be2c:	d006      	beq.n	800be3c <std+0x48>
 800be2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800be32:	4294      	cmp	r4, r2
 800be34:	d002      	beq.n	800be3c <std+0x48>
 800be36:	33d0      	adds	r3, #208	; 0xd0
 800be38:	429c      	cmp	r4, r3
 800be3a:	d105      	bne.n	800be48 <std+0x54>
 800be3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be44:	f001 b89a 	b.w	800cf7c <__retarget_lock_init_recursive>
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	0800bd6d 	.word	0x0800bd6d
 800be50:	0800bd8f 	.word	0x0800bd8f
 800be54:	0800bdc7 	.word	0x0800bdc7
 800be58:	0800bdeb 	.word	0x0800bdeb
 800be5c:	20000abc 	.word	0x20000abc

0800be60 <stdio_exit_handler>:
 800be60:	4a02      	ldr	r2, [pc, #8]	; (800be6c <stdio_exit_handler+0xc>)
 800be62:	4903      	ldr	r1, [pc, #12]	; (800be70 <stdio_exit_handler+0x10>)
 800be64:	4803      	ldr	r0, [pc, #12]	; (800be74 <stdio_exit_handler+0x14>)
 800be66:	f000 bf67 	b.w	800cd38 <_fwalk_sglue>
 800be6a:	bf00      	nop
 800be6c:	20000044 	.word	0x20000044
 800be70:	0800ebb5 	.word	0x0800ebb5
 800be74:	200001bc 	.word	0x200001bc

0800be78 <cleanup_stdio>:
 800be78:	6841      	ldr	r1, [r0, #4]
 800be7a:	4b0c      	ldr	r3, [pc, #48]	; (800beac <cleanup_stdio+0x34>)
 800be7c:	4299      	cmp	r1, r3
 800be7e:	b510      	push	{r4, lr}
 800be80:	4604      	mov	r4, r0
 800be82:	d001      	beq.n	800be88 <cleanup_stdio+0x10>
 800be84:	f002 fe96 	bl	800ebb4 <_fflush_r>
 800be88:	68a1      	ldr	r1, [r4, #8]
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <cleanup_stdio+0x38>)
 800be8c:	4299      	cmp	r1, r3
 800be8e:	d002      	beq.n	800be96 <cleanup_stdio+0x1e>
 800be90:	4620      	mov	r0, r4
 800be92:	f002 fe8f 	bl	800ebb4 <_fflush_r>
 800be96:	68e1      	ldr	r1, [r4, #12]
 800be98:	4b06      	ldr	r3, [pc, #24]	; (800beb4 <cleanup_stdio+0x3c>)
 800be9a:	4299      	cmp	r1, r3
 800be9c:	d004      	beq.n	800bea8 <cleanup_stdio+0x30>
 800be9e:	4620      	mov	r0, r4
 800bea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bea4:	f002 be86 	b.w	800ebb4 <_fflush_r>
 800bea8:	bd10      	pop	{r4, pc}
 800beaa:	bf00      	nop
 800beac:	20000abc 	.word	0x20000abc
 800beb0:	20000b24 	.word	0x20000b24
 800beb4:	20000b8c 	.word	0x20000b8c

0800beb8 <global_stdio_init.part.0>:
 800beb8:	b510      	push	{r4, lr}
 800beba:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <global_stdio_init.part.0+0x30>)
 800bebc:	4c0b      	ldr	r4, [pc, #44]	; (800beec <global_stdio_init.part.0+0x34>)
 800bebe:	4a0c      	ldr	r2, [pc, #48]	; (800bef0 <global_stdio_init.part.0+0x38>)
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	4620      	mov	r0, r4
 800bec4:	2200      	movs	r2, #0
 800bec6:	2104      	movs	r1, #4
 800bec8:	f7ff ff94 	bl	800bdf4 <std>
 800becc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bed0:	2201      	movs	r2, #1
 800bed2:	2109      	movs	r1, #9
 800bed4:	f7ff ff8e 	bl	800bdf4 <std>
 800bed8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bedc:	2202      	movs	r2, #2
 800bede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee2:	2112      	movs	r1, #18
 800bee4:	f7ff bf86 	b.w	800bdf4 <std>
 800bee8:	20000bf4 	.word	0x20000bf4
 800beec:	20000abc 	.word	0x20000abc
 800bef0:	0800be61 	.word	0x0800be61

0800bef4 <__sfp_lock_acquire>:
 800bef4:	4801      	ldr	r0, [pc, #4]	; (800befc <__sfp_lock_acquire+0x8>)
 800bef6:	f001 b842 	b.w	800cf7e <__retarget_lock_acquire_recursive>
 800befa:	bf00      	nop
 800befc:	20000bfd 	.word	0x20000bfd

0800bf00 <__sfp_lock_release>:
 800bf00:	4801      	ldr	r0, [pc, #4]	; (800bf08 <__sfp_lock_release+0x8>)
 800bf02:	f001 b83d 	b.w	800cf80 <__retarget_lock_release_recursive>
 800bf06:	bf00      	nop
 800bf08:	20000bfd 	.word	0x20000bfd

0800bf0c <__sinit>:
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	4604      	mov	r4, r0
 800bf10:	f7ff fff0 	bl	800bef4 <__sfp_lock_acquire>
 800bf14:	6a23      	ldr	r3, [r4, #32]
 800bf16:	b11b      	cbz	r3, 800bf20 <__sinit+0x14>
 800bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf1c:	f7ff bff0 	b.w	800bf00 <__sfp_lock_release>
 800bf20:	4b04      	ldr	r3, [pc, #16]	; (800bf34 <__sinit+0x28>)
 800bf22:	6223      	str	r3, [r4, #32]
 800bf24:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <__sinit+0x2c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1f5      	bne.n	800bf18 <__sinit+0xc>
 800bf2c:	f7ff ffc4 	bl	800beb8 <global_stdio_init.part.0>
 800bf30:	e7f2      	b.n	800bf18 <__sinit+0xc>
 800bf32:	bf00      	nop
 800bf34:	0800be79 	.word	0x0800be79
 800bf38:	20000bf4 	.word	0x20000bf4

0800bf3c <sulp>:
 800bf3c:	b570      	push	{r4, r5, r6, lr}
 800bf3e:	4604      	mov	r4, r0
 800bf40:	460d      	mov	r5, r1
 800bf42:	ec45 4b10 	vmov	d0, r4, r5
 800bf46:	4616      	mov	r6, r2
 800bf48:	f003 f9d4 	bl	800f2f4 <__ulp>
 800bf4c:	ec51 0b10 	vmov	r0, r1, d0
 800bf50:	b17e      	cbz	r6, 800bf72 <sulp+0x36>
 800bf52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dd09      	ble.n	800bf72 <sulp+0x36>
 800bf5e:	051b      	lsls	r3, r3, #20
 800bf60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf64:	2400      	movs	r4, #0
 800bf66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	f7f4 fb43 	bl	80005f8 <__aeabi_dmul>
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	0000      	movs	r0, r0
	...

0800bf78 <_strtod_l>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	ed2d 8b02 	vpush	{d8}
 800bf80:	b09b      	sub	sp, #108	; 0x6c
 800bf82:	4604      	mov	r4, r0
 800bf84:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf86:	2200      	movs	r2, #0
 800bf88:	9216      	str	r2, [sp, #88]	; 0x58
 800bf8a:	460d      	mov	r5, r1
 800bf8c:	f04f 0800 	mov.w	r8, #0
 800bf90:	f04f 0900 	mov.w	r9, #0
 800bf94:	460a      	mov	r2, r1
 800bf96:	9215      	str	r2, [sp, #84]	; 0x54
 800bf98:	7811      	ldrb	r1, [r2, #0]
 800bf9a:	292b      	cmp	r1, #43	; 0x2b
 800bf9c:	d04c      	beq.n	800c038 <_strtod_l+0xc0>
 800bf9e:	d83a      	bhi.n	800c016 <_strtod_l+0x9e>
 800bfa0:	290d      	cmp	r1, #13
 800bfa2:	d834      	bhi.n	800c00e <_strtod_l+0x96>
 800bfa4:	2908      	cmp	r1, #8
 800bfa6:	d834      	bhi.n	800c012 <_strtod_l+0x9a>
 800bfa8:	2900      	cmp	r1, #0
 800bfaa:	d03d      	beq.n	800c028 <_strtod_l+0xb0>
 800bfac:	2200      	movs	r2, #0
 800bfae:	920a      	str	r2, [sp, #40]	; 0x28
 800bfb0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bfb2:	7832      	ldrb	r2, [r6, #0]
 800bfb4:	2a30      	cmp	r2, #48	; 0x30
 800bfb6:	f040 80b4 	bne.w	800c122 <_strtod_l+0x1aa>
 800bfba:	7872      	ldrb	r2, [r6, #1]
 800bfbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bfc0:	2a58      	cmp	r2, #88	; 0x58
 800bfc2:	d170      	bne.n	800c0a6 <_strtod_l+0x12e>
 800bfc4:	9302      	str	r3, [sp, #8]
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc8:	9301      	str	r3, [sp, #4]
 800bfca:	ab16      	add	r3, sp, #88	; 0x58
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	4a8e      	ldr	r2, [pc, #568]	; (800c208 <_strtod_l+0x290>)
 800bfd0:	ab17      	add	r3, sp, #92	; 0x5c
 800bfd2:	a915      	add	r1, sp, #84	; 0x54
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f001 ff21 	bl	800de1c <__gethex>
 800bfda:	f010 070f 	ands.w	r7, r0, #15
 800bfde:	4605      	mov	r5, r0
 800bfe0:	d005      	beq.n	800bfee <_strtod_l+0x76>
 800bfe2:	2f06      	cmp	r7, #6
 800bfe4:	d12a      	bne.n	800c03c <_strtod_l+0xc4>
 800bfe6:	3601      	adds	r6, #1
 800bfe8:	2300      	movs	r3, #0
 800bfea:	9615      	str	r6, [sp, #84]	; 0x54
 800bfec:	930a      	str	r3, [sp, #40]	; 0x28
 800bfee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f040 857f 	bne.w	800caf4 <_strtod_l+0xb7c>
 800bff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff8:	b1db      	cbz	r3, 800c032 <_strtod_l+0xba>
 800bffa:	4642      	mov	r2, r8
 800bffc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c000:	ec43 2b10 	vmov	d0, r2, r3
 800c004:	b01b      	add	sp, #108	; 0x6c
 800c006:	ecbd 8b02 	vpop	{d8}
 800c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00e:	2920      	cmp	r1, #32
 800c010:	d1cc      	bne.n	800bfac <_strtod_l+0x34>
 800c012:	3201      	adds	r2, #1
 800c014:	e7bf      	b.n	800bf96 <_strtod_l+0x1e>
 800c016:	292d      	cmp	r1, #45	; 0x2d
 800c018:	d1c8      	bne.n	800bfac <_strtod_l+0x34>
 800c01a:	2101      	movs	r1, #1
 800c01c:	910a      	str	r1, [sp, #40]	; 0x28
 800c01e:	1c51      	adds	r1, r2, #1
 800c020:	9115      	str	r1, [sp, #84]	; 0x54
 800c022:	7852      	ldrb	r2, [r2, #1]
 800c024:	2a00      	cmp	r2, #0
 800c026:	d1c3      	bne.n	800bfb0 <_strtod_l+0x38>
 800c028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c02a:	9515      	str	r5, [sp, #84]	; 0x54
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f040 855f 	bne.w	800caf0 <_strtod_l+0xb78>
 800c032:	4642      	mov	r2, r8
 800c034:	464b      	mov	r3, r9
 800c036:	e7e3      	b.n	800c000 <_strtod_l+0x88>
 800c038:	2100      	movs	r1, #0
 800c03a:	e7ef      	b.n	800c01c <_strtod_l+0xa4>
 800c03c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c03e:	b13a      	cbz	r2, 800c050 <_strtod_l+0xd8>
 800c040:	2135      	movs	r1, #53	; 0x35
 800c042:	a818      	add	r0, sp, #96	; 0x60
 800c044:	f003 fa53 	bl	800f4ee <__copybits>
 800c048:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c04a:	4620      	mov	r0, r4
 800c04c:	f002 fe26 	bl	800ec9c <_Bfree>
 800c050:	3f01      	subs	r7, #1
 800c052:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c054:	2f04      	cmp	r7, #4
 800c056:	d806      	bhi.n	800c066 <_strtod_l+0xee>
 800c058:	e8df f007 	tbb	[pc, r7]
 800c05c:	201d0314 	.word	0x201d0314
 800c060:	14          	.byte	0x14
 800c061:	00          	.byte	0x00
 800c062:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c066:	05e9      	lsls	r1, r5, #23
 800c068:	bf48      	it	mi
 800c06a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c06e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c072:	0d1b      	lsrs	r3, r3, #20
 800c074:	051b      	lsls	r3, r3, #20
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1b9      	bne.n	800bfee <_strtod_l+0x76>
 800c07a:	f000 ff55 	bl	800cf28 <__errno>
 800c07e:	2322      	movs	r3, #34	; 0x22
 800c080:	6003      	str	r3, [r0, #0]
 800c082:	e7b4      	b.n	800bfee <_strtod_l+0x76>
 800c084:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c088:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c08c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c090:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c094:	e7e7      	b.n	800c066 <_strtod_l+0xee>
 800c096:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c210 <_strtod_l+0x298>
 800c09a:	e7e4      	b.n	800c066 <_strtod_l+0xee>
 800c09c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c0a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c0a4:	e7df      	b.n	800c066 <_strtod_l+0xee>
 800c0a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	9215      	str	r2, [sp, #84]	; 0x54
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	2b30      	cmp	r3, #48	; 0x30
 800c0b0:	d0f9      	beq.n	800c0a6 <_strtod_l+0x12e>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d09b      	beq.n	800bfee <_strtod_l+0x76>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	f04f 0a00 	mov.w	sl, #0
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c0c6:	46d3      	mov	fp, sl
 800c0c8:	220a      	movs	r2, #10
 800c0ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c0cc:	7806      	ldrb	r6, [r0, #0]
 800c0ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c0d2:	b2d9      	uxtb	r1, r3
 800c0d4:	2909      	cmp	r1, #9
 800c0d6:	d926      	bls.n	800c126 <_strtod_l+0x1ae>
 800c0d8:	494c      	ldr	r1, [pc, #304]	; (800c20c <_strtod_l+0x294>)
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f000 fec0 	bl	800ce60 <strncmp>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d030      	beq.n	800c146 <_strtod_l+0x1ce>
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	9005      	str	r0, [sp, #20]
 800c0ea:	465e      	mov	r6, fp
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2a65      	cmp	r2, #101	; 0x65
 800c0f0:	d001      	beq.n	800c0f6 <_strtod_l+0x17e>
 800c0f2:	2a45      	cmp	r2, #69	; 0x45
 800c0f4:	d113      	bne.n	800c11e <_strtod_l+0x1a6>
 800c0f6:	b91e      	cbnz	r6, 800c100 <_strtod_l+0x188>
 800c0f8:	9a04      	ldr	r2, [sp, #16]
 800c0fa:	4302      	orrs	r2, r0
 800c0fc:	d094      	beq.n	800c028 <_strtod_l+0xb0>
 800c0fe:	2600      	movs	r6, #0
 800c100:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c102:	1c6a      	adds	r2, r5, #1
 800c104:	9215      	str	r2, [sp, #84]	; 0x54
 800c106:	786a      	ldrb	r2, [r5, #1]
 800c108:	2a2b      	cmp	r2, #43	; 0x2b
 800c10a:	d074      	beq.n	800c1f6 <_strtod_l+0x27e>
 800c10c:	2a2d      	cmp	r2, #45	; 0x2d
 800c10e:	d078      	beq.n	800c202 <_strtod_l+0x28a>
 800c110:	f04f 0c00 	mov.w	ip, #0
 800c114:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c118:	2909      	cmp	r1, #9
 800c11a:	d97f      	bls.n	800c21c <_strtod_l+0x2a4>
 800c11c:	9515      	str	r5, [sp, #84]	; 0x54
 800c11e:	2700      	movs	r7, #0
 800c120:	e09e      	b.n	800c260 <_strtod_l+0x2e8>
 800c122:	2300      	movs	r3, #0
 800c124:	e7c8      	b.n	800c0b8 <_strtod_l+0x140>
 800c126:	f1bb 0f08 	cmp.w	fp, #8
 800c12a:	bfd8      	it	le
 800c12c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c12e:	f100 0001 	add.w	r0, r0, #1
 800c132:	bfda      	itte	le
 800c134:	fb02 3301 	mlale	r3, r2, r1, r3
 800c138:	9309      	strle	r3, [sp, #36]	; 0x24
 800c13a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c13e:	f10b 0b01 	add.w	fp, fp, #1
 800c142:	9015      	str	r0, [sp, #84]	; 0x54
 800c144:	e7c1      	b.n	800c0ca <_strtod_l+0x152>
 800c146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	9215      	str	r2, [sp, #84]	; 0x54
 800c14c:	785a      	ldrb	r2, [r3, #1]
 800c14e:	f1bb 0f00 	cmp.w	fp, #0
 800c152:	d037      	beq.n	800c1c4 <_strtod_l+0x24c>
 800c154:	9005      	str	r0, [sp, #20]
 800c156:	465e      	mov	r6, fp
 800c158:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c15c:	2b09      	cmp	r3, #9
 800c15e:	d912      	bls.n	800c186 <_strtod_l+0x20e>
 800c160:	2301      	movs	r3, #1
 800c162:	e7c4      	b.n	800c0ee <_strtod_l+0x176>
 800c164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c166:	1c5a      	adds	r2, r3, #1
 800c168:	9215      	str	r2, [sp, #84]	; 0x54
 800c16a:	785a      	ldrb	r2, [r3, #1]
 800c16c:	3001      	adds	r0, #1
 800c16e:	2a30      	cmp	r2, #48	; 0x30
 800c170:	d0f8      	beq.n	800c164 <_strtod_l+0x1ec>
 800c172:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c176:	2b08      	cmp	r3, #8
 800c178:	f200 84c1 	bhi.w	800cafe <_strtod_l+0xb86>
 800c17c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c17e:	9005      	str	r0, [sp, #20]
 800c180:	2000      	movs	r0, #0
 800c182:	930b      	str	r3, [sp, #44]	; 0x2c
 800c184:	4606      	mov	r6, r0
 800c186:	3a30      	subs	r2, #48	; 0x30
 800c188:	f100 0301 	add.w	r3, r0, #1
 800c18c:	d014      	beq.n	800c1b8 <_strtod_l+0x240>
 800c18e:	9905      	ldr	r1, [sp, #20]
 800c190:	4419      	add	r1, r3
 800c192:	9105      	str	r1, [sp, #20]
 800c194:	4633      	mov	r3, r6
 800c196:	eb00 0c06 	add.w	ip, r0, r6
 800c19a:	210a      	movs	r1, #10
 800c19c:	4563      	cmp	r3, ip
 800c19e:	d113      	bne.n	800c1c8 <_strtod_l+0x250>
 800c1a0:	1833      	adds	r3, r6, r0
 800c1a2:	2b08      	cmp	r3, #8
 800c1a4:	f106 0601 	add.w	r6, r6, #1
 800c1a8:	4406      	add	r6, r0
 800c1aa:	dc1a      	bgt.n	800c1e2 <_strtod_l+0x26a>
 800c1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1ae:	230a      	movs	r3, #10
 800c1b0:	fb03 2301 	mla	r3, r3, r1, r2
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1ba:	1c51      	adds	r1, r2, #1
 800c1bc:	9115      	str	r1, [sp, #84]	; 0x54
 800c1be:	7852      	ldrb	r2, [r2, #1]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	e7c9      	b.n	800c158 <_strtod_l+0x1e0>
 800c1c4:	4658      	mov	r0, fp
 800c1c6:	e7d2      	b.n	800c16e <_strtod_l+0x1f6>
 800c1c8:	2b08      	cmp	r3, #8
 800c1ca:	f103 0301 	add.w	r3, r3, #1
 800c1ce:	dc03      	bgt.n	800c1d8 <_strtod_l+0x260>
 800c1d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1d2:	434f      	muls	r7, r1
 800c1d4:	9709      	str	r7, [sp, #36]	; 0x24
 800c1d6:	e7e1      	b.n	800c19c <_strtod_l+0x224>
 800c1d8:	2b10      	cmp	r3, #16
 800c1da:	bfd8      	it	le
 800c1dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c1e0:	e7dc      	b.n	800c19c <_strtod_l+0x224>
 800c1e2:	2e10      	cmp	r6, #16
 800c1e4:	bfdc      	itt	le
 800c1e6:	230a      	movle	r3, #10
 800c1e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c1ec:	e7e3      	b.n	800c1b6 <_strtod_l+0x23e>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9305      	str	r3, [sp, #20]
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e780      	b.n	800c0f8 <_strtod_l+0x180>
 800c1f6:	f04f 0c00 	mov.w	ip, #0
 800c1fa:	1caa      	adds	r2, r5, #2
 800c1fc:	9215      	str	r2, [sp, #84]	; 0x54
 800c1fe:	78aa      	ldrb	r2, [r5, #2]
 800c200:	e788      	b.n	800c114 <_strtod_l+0x19c>
 800c202:	f04f 0c01 	mov.w	ip, #1
 800c206:	e7f8      	b.n	800c1fa <_strtod_l+0x282>
 800c208:	08010e6c 	.word	0x08010e6c
 800c20c:	08010e69 	.word	0x08010e69
 800c210:	7ff00000 	.word	0x7ff00000
 800c214:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c216:	1c51      	adds	r1, r2, #1
 800c218:	9115      	str	r1, [sp, #84]	; 0x54
 800c21a:	7852      	ldrb	r2, [r2, #1]
 800c21c:	2a30      	cmp	r2, #48	; 0x30
 800c21e:	d0f9      	beq.n	800c214 <_strtod_l+0x29c>
 800c220:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c224:	2908      	cmp	r1, #8
 800c226:	f63f af7a 	bhi.w	800c11e <_strtod_l+0x1a6>
 800c22a:	3a30      	subs	r2, #48	; 0x30
 800c22c:	9208      	str	r2, [sp, #32]
 800c22e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c230:	920c      	str	r2, [sp, #48]	; 0x30
 800c232:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c234:	1c57      	adds	r7, r2, #1
 800c236:	9715      	str	r7, [sp, #84]	; 0x54
 800c238:	7852      	ldrb	r2, [r2, #1]
 800c23a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c23e:	f1be 0f09 	cmp.w	lr, #9
 800c242:	d938      	bls.n	800c2b6 <_strtod_l+0x33e>
 800c244:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c246:	1a7f      	subs	r7, r7, r1
 800c248:	2f08      	cmp	r7, #8
 800c24a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c24e:	dc03      	bgt.n	800c258 <_strtod_l+0x2e0>
 800c250:	9908      	ldr	r1, [sp, #32]
 800c252:	428f      	cmp	r7, r1
 800c254:	bfa8      	it	ge
 800c256:	460f      	movge	r7, r1
 800c258:	f1bc 0f00 	cmp.w	ip, #0
 800c25c:	d000      	beq.n	800c260 <_strtod_l+0x2e8>
 800c25e:	427f      	negs	r7, r7
 800c260:	2e00      	cmp	r6, #0
 800c262:	d14f      	bne.n	800c304 <_strtod_l+0x38c>
 800c264:	9904      	ldr	r1, [sp, #16]
 800c266:	4301      	orrs	r1, r0
 800c268:	f47f aec1 	bne.w	800bfee <_strtod_l+0x76>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f47f aedb 	bne.w	800c028 <_strtod_l+0xb0>
 800c272:	2a69      	cmp	r2, #105	; 0x69
 800c274:	d029      	beq.n	800c2ca <_strtod_l+0x352>
 800c276:	dc26      	bgt.n	800c2c6 <_strtod_l+0x34e>
 800c278:	2a49      	cmp	r2, #73	; 0x49
 800c27a:	d026      	beq.n	800c2ca <_strtod_l+0x352>
 800c27c:	2a4e      	cmp	r2, #78	; 0x4e
 800c27e:	f47f aed3 	bne.w	800c028 <_strtod_l+0xb0>
 800c282:	499b      	ldr	r1, [pc, #620]	; (800c4f0 <_strtod_l+0x578>)
 800c284:	a815      	add	r0, sp, #84	; 0x54
 800c286:	f002 f809 	bl	800e29c <__match>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f43f aecc 	beq.w	800c028 <_strtod_l+0xb0>
 800c290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b28      	cmp	r3, #40	; 0x28
 800c296:	d12f      	bne.n	800c2f8 <_strtod_l+0x380>
 800c298:	4996      	ldr	r1, [pc, #600]	; (800c4f4 <_strtod_l+0x57c>)
 800c29a:	aa18      	add	r2, sp, #96	; 0x60
 800c29c:	a815      	add	r0, sp, #84	; 0x54
 800c29e:	f002 f811 	bl	800e2c4 <__hexnan>
 800c2a2:	2805      	cmp	r0, #5
 800c2a4:	d128      	bne.n	800c2f8 <_strtod_l+0x380>
 800c2a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c2ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c2b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c2b4:	e69b      	b.n	800bfee <_strtod_l+0x76>
 800c2b6:	9f08      	ldr	r7, [sp, #32]
 800c2b8:	210a      	movs	r1, #10
 800c2ba:	fb01 2107 	mla	r1, r1, r7, r2
 800c2be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c2c2:	9208      	str	r2, [sp, #32]
 800c2c4:	e7b5      	b.n	800c232 <_strtod_l+0x2ba>
 800c2c6:	2a6e      	cmp	r2, #110	; 0x6e
 800c2c8:	e7d9      	b.n	800c27e <_strtod_l+0x306>
 800c2ca:	498b      	ldr	r1, [pc, #556]	; (800c4f8 <_strtod_l+0x580>)
 800c2cc:	a815      	add	r0, sp, #84	; 0x54
 800c2ce:	f001 ffe5 	bl	800e29c <__match>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	f43f aea8 	beq.w	800c028 <_strtod_l+0xb0>
 800c2d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2da:	4988      	ldr	r1, [pc, #544]	; (800c4fc <_strtod_l+0x584>)
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	a815      	add	r0, sp, #84	; 0x54
 800c2e0:	9315      	str	r3, [sp, #84]	; 0x54
 800c2e2:	f001 ffdb 	bl	800e29c <__match>
 800c2e6:	b910      	cbnz	r0, 800c2ee <_strtod_l+0x376>
 800c2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	9315      	str	r3, [sp, #84]	; 0x54
 800c2ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c50c <_strtod_l+0x594>
 800c2f2:	f04f 0800 	mov.w	r8, #0
 800c2f6:	e67a      	b.n	800bfee <_strtod_l+0x76>
 800c2f8:	4881      	ldr	r0, [pc, #516]	; (800c500 <_strtod_l+0x588>)
 800c2fa:	f000 fe51 	bl	800cfa0 <nan>
 800c2fe:	ec59 8b10 	vmov	r8, r9, d0
 800c302:	e674      	b.n	800bfee <_strtod_l+0x76>
 800c304:	9b05      	ldr	r3, [sp, #20]
 800c306:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c308:	1afb      	subs	r3, r7, r3
 800c30a:	f1bb 0f00 	cmp.w	fp, #0
 800c30e:	bf08      	it	eq
 800c310:	46b3      	moveq	fp, r6
 800c312:	2e10      	cmp	r6, #16
 800c314:	9308      	str	r3, [sp, #32]
 800c316:	4635      	mov	r5, r6
 800c318:	bfa8      	it	ge
 800c31a:	2510      	movge	r5, #16
 800c31c:	f7f4 f8f2 	bl	8000504 <__aeabi_ui2d>
 800c320:	2e09      	cmp	r6, #9
 800c322:	4680      	mov	r8, r0
 800c324:	4689      	mov	r9, r1
 800c326:	dd13      	ble.n	800c350 <_strtod_l+0x3d8>
 800c328:	4b76      	ldr	r3, [pc, #472]	; (800c504 <_strtod_l+0x58c>)
 800c32a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c32e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c332:	f7f4 f961 	bl	80005f8 <__aeabi_dmul>
 800c336:	4680      	mov	r8, r0
 800c338:	4650      	mov	r0, sl
 800c33a:	4689      	mov	r9, r1
 800c33c:	f7f4 f8e2 	bl	8000504 <__aeabi_ui2d>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4640      	mov	r0, r8
 800c346:	4649      	mov	r1, r9
 800c348:	f7f3 ffa0 	bl	800028c <__adddf3>
 800c34c:	4680      	mov	r8, r0
 800c34e:	4689      	mov	r9, r1
 800c350:	2e0f      	cmp	r6, #15
 800c352:	dc38      	bgt.n	800c3c6 <_strtod_l+0x44e>
 800c354:	9b08      	ldr	r3, [sp, #32]
 800c356:	2b00      	cmp	r3, #0
 800c358:	f43f ae49 	beq.w	800bfee <_strtod_l+0x76>
 800c35c:	dd24      	ble.n	800c3a8 <_strtod_l+0x430>
 800c35e:	2b16      	cmp	r3, #22
 800c360:	dc0b      	bgt.n	800c37a <_strtod_l+0x402>
 800c362:	4968      	ldr	r1, [pc, #416]	; (800c504 <_strtod_l+0x58c>)
 800c364:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c36c:	4642      	mov	r2, r8
 800c36e:	464b      	mov	r3, r9
 800c370:	f7f4 f942 	bl	80005f8 <__aeabi_dmul>
 800c374:	4680      	mov	r8, r0
 800c376:	4689      	mov	r9, r1
 800c378:	e639      	b.n	800bfee <_strtod_l+0x76>
 800c37a:	9a08      	ldr	r2, [sp, #32]
 800c37c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c380:	4293      	cmp	r3, r2
 800c382:	db20      	blt.n	800c3c6 <_strtod_l+0x44e>
 800c384:	4c5f      	ldr	r4, [pc, #380]	; (800c504 <_strtod_l+0x58c>)
 800c386:	f1c6 060f 	rsb	r6, r6, #15
 800c38a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c38e:	4642      	mov	r2, r8
 800c390:	464b      	mov	r3, r9
 800c392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c396:	f7f4 f92f 	bl	80005f8 <__aeabi_dmul>
 800c39a:	9b08      	ldr	r3, [sp, #32]
 800c39c:	1b9e      	subs	r6, r3, r6
 800c39e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c3a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c3a6:	e7e3      	b.n	800c370 <_strtod_l+0x3f8>
 800c3a8:	9b08      	ldr	r3, [sp, #32]
 800c3aa:	3316      	adds	r3, #22
 800c3ac:	db0b      	blt.n	800c3c6 <_strtod_l+0x44e>
 800c3ae:	9b05      	ldr	r3, [sp, #20]
 800c3b0:	1bdf      	subs	r7, r3, r7
 800c3b2:	4b54      	ldr	r3, [pc, #336]	; (800c504 <_strtod_l+0x58c>)
 800c3b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3bc:	4640      	mov	r0, r8
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f7f4 fa44 	bl	800084c <__aeabi_ddiv>
 800c3c4:	e7d6      	b.n	800c374 <_strtod_l+0x3fc>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	1b75      	subs	r5, r6, r5
 800c3ca:	441d      	add	r5, r3
 800c3cc:	2d00      	cmp	r5, #0
 800c3ce:	dd70      	ble.n	800c4b2 <_strtod_l+0x53a>
 800c3d0:	f015 030f 	ands.w	r3, r5, #15
 800c3d4:	d00a      	beq.n	800c3ec <_strtod_l+0x474>
 800c3d6:	494b      	ldr	r1, [pc, #300]	; (800c504 <_strtod_l+0x58c>)
 800c3d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3dc:	4642      	mov	r2, r8
 800c3de:	464b      	mov	r3, r9
 800c3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3e4:	f7f4 f908 	bl	80005f8 <__aeabi_dmul>
 800c3e8:	4680      	mov	r8, r0
 800c3ea:	4689      	mov	r9, r1
 800c3ec:	f035 050f 	bics.w	r5, r5, #15
 800c3f0:	d04d      	beq.n	800c48e <_strtod_l+0x516>
 800c3f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c3f6:	dd22      	ble.n	800c43e <_strtod_l+0x4c6>
 800c3f8:	2500      	movs	r5, #0
 800c3fa:	46ab      	mov	fp, r5
 800c3fc:	9509      	str	r5, [sp, #36]	; 0x24
 800c3fe:	9505      	str	r5, [sp, #20]
 800c400:	2322      	movs	r3, #34	; 0x22
 800c402:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c50c <_strtod_l+0x594>
 800c406:	6023      	str	r3, [r4, #0]
 800c408:	f04f 0800 	mov.w	r8, #0
 800c40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f43f aded 	beq.w	800bfee <_strtod_l+0x76>
 800c414:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c416:	4620      	mov	r0, r4
 800c418:	f002 fc40 	bl	800ec9c <_Bfree>
 800c41c:	9905      	ldr	r1, [sp, #20]
 800c41e:	4620      	mov	r0, r4
 800c420:	f002 fc3c 	bl	800ec9c <_Bfree>
 800c424:	4659      	mov	r1, fp
 800c426:	4620      	mov	r0, r4
 800c428:	f002 fc38 	bl	800ec9c <_Bfree>
 800c42c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c42e:	4620      	mov	r0, r4
 800c430:	f002 fc34 	bl	800ec9c <_Bfree>
 800c434:	4629      	mov	r1, r5
 800c436:	4620      	mov	r0, r4
 800c438:	f002 fc30 	bl	800ec9c <_Bfree>
 800c43c:	e5d7      	b.n	800bfee <_strtod_l+0x76>
 800c43e:	4b32      	ldr	r3, [pc, #200]	; (800c508 <_strtod_l+0x590>)
 800c440:	9304      	str	r3, [sp, #16]
 800c442:	2300      	movs	r3, #0
 800c444:	112d      	asrs	r5, r5, #4
 800c446:	4640      	mov	r0, r8
 800c448:	4649      	mov	r1, r9
 800c44a:	469a      	mov	sl, r3
 800c44c:	2d01      	cmp	r5, #1
 800c44e:	dc21      	bgt.n	800c494 <_strtod_l+0x51c>
 800c450:	b10b      	cbz	r3, 800c456 <_strtod_l+0x4de>
 800c452:	4680      	mov	r8, r0
 800c454:	4689      	mov	r9, r1
 800c456:	492c      	ldr	r1, [pc, #176]	; (800c508 <_strtod_l+0x590>)
 800c458:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c45c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c460:	4642      	mov	r2, r8
 800c462:	464b      	mov	r3, r9
 800c464:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c468:	f7f4 f8c6 	bl	80005f8 <__aeabi_dmul>
 800c46c:	4b27      	ldr	r3, [pc, #156]	; (800c50c <_strtod_l+0x594>)
 800c46e:	460a      	mov	r2, r1
 800c470:	400b      	ands	r3, r1
 800c472:	4927      	ldr	r1, [pc, #156]	; (800c510 <_strtod_l+0x598>)
 800c474:	428b      	cmp	r3, r1
 800c476:	4680      	mov	r8, r0
 800c478:	d8be      	bhi.n	800c3f8 <_strtod_l+0x480>
 800c47a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c47e:	428b      	cmp	r3, r1
 800c480:	bf86      	itte	hi
 800c482:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c514 <_strtod_l+0x59c>
 800c486:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800c48a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c48e:	2300      	movs	r3, #0
 800c490:	9304      	str	r3, [sp, #16]
 800c492:	e07b      	b.n	800c58c <_strtod_l+0x614>
 800c494:	07ea      	lsls	r2, r5, #31
 800c496:	d505      	bpl.n	800c4a4 <_strtod_l+0x52c>
 800c498:	9b04      	ldr	r3, [sp, #16]
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	f7f4 f8ab 	bl	80005f8 <__aeabi_dmul>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	9a04      	ldr	r2, [sp, #16]
 800c4a6:	3208      	adds	r2, #8
 800c4a8:	f10a 0a01 	add.w	sl, sl, #1
 800c4ac:	106d      	asrs	r5, r5, #1
 800c4ae:	9204      	str	r2, [sp, #16]
 800c4b0:	e7cc      	b.n	800c44c <_strtod_l+0x4d4>
 800c4b2:	d0ec      	beq.n	800c48e <_strtod_l+0x516>
 800c4b4:	426d      	negs	r5, r5
 800c4b6:	f015 020f 	ands.w	r2, r5, #15
 800c4ba:	d00a      	beq.n	800c4d2 <_strtod_l+0x55a>
 800c4bc:	4b11      	ldr	r3, [pc, #68]	; (800c504 <_strtod_l+0x58c>)
 800c4be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	f7f4 f9bf 	bl	800084c <__aeabi_ddiv>
 800c4ce:	4680      	mov	r8, r0
 800c4d0:	4689      	mov	r9, r1
 800c4d2:	112d      	asrs	r5, r5, #4
 800c4d4:	d0db      	beq.n	800c48e <_strtod_l+0x516>
 800c4d6:	2d1f      	cmp	r5, #31
 800c4d8:	dd1e      	ble.n	800c518 <_strtod_l+0x5a0>
 800c4da:	2500      	movs	r5, #0
 800c4dc:	46ab      	mov	fp, r5
 800c4de:	9509      	str	r5, [sp, #36]	; 0x24
 800c4e0:	9505      	str	r5, [sp, #20]
 800c4e2:	2322      	movs	r3, #34	; 0x22
 800c4e4:	f04f 0800 	mov.w	r8, #0
 800c4e8:	f04f 0900 	mov.w	r9, #0
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	e78d      	b.n	800c40c <_strtod_l+0x494>
 800c4f0:	08010e3d 	.word	0x08010e3d
 800c4f4:	08010e80 	.word	0x08010e80
 800c4f8:	08010e35 	.word	0x08010e35
 800c4fc:	08010fcc 	.word	0x08010fcc
 800c500:	08011257 	.word	0x08011257
 800c504:	08011148 	.word	0x08011148
 800c508:	08011120 	.word	0x08011120
 800c50c:	7ff00000 	.word	0x7ff00000
 800c510:	7ca00000 	.word	0x7ca00000
 800c514:	7fefffff 	.word	0x7fefffff
 800c518:	f015 0310 	ands.w	r3, r5, #16
 800c51c:	bf18      	it	ne
 800c51e:	236a      	movne	r3, #106	; 0x6a
 800c520:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c8c4 <_strtod_l+0x94c>
 800c524:	9304      	str	r3, [sp, #16]
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	2300      	movs	r3, #0
 800c52c:	07ea      	lsls	r2, r5, #31
 800c52e:	d504      	bpl.n	800c53a <_strtod_l+0x5c2>
 800c530:	e9da 2300 	ldrd	r2, r3, [sl]
 800c534:	f7f4 f860 	bl	80005f8 <__aeabi_dmul>
 800c538:	2301      	movs	r3, #1
 800c53a:	106d      	asrs	r5, r5, #1
 800c53c:	f10a 0a08 	add.w	sl, sl, #8
 800c540:	d1f4      	bne.n	800c52c <_strtod_l+0x5b4>
 800c542:	b10b      	cbz	r3, 800c548 <_strtod_l+0x5d0>
 800c544:	4680      	mov	r8, r0
 800c546:	4689      	mov	r9, r1
 800c548:	9b04      	ldr	r3, [sp, #16]
 800c54a:	b1bb      	cbz	r3, 800c57c <_strtod_l+0x604>
 800c54c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c550:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c554:	2b00      	cmp	r3, #0
 800c556:	4649      	mov	r1, r9
 800c558:	dd10      	ble.n	800c57c <_strtod_l+0x604>
 800c55a:	2b1f      	cmp	r3, #31
 800c55c:	f340 811e 	ble.w	800c79c <_strtod_l+0x824>
 800c560:	2b34      	cmp	r3, #52	; 0x34
 800c562:	bfde      	ittt	le
 800c564:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c568:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c56c:	4093      	lslle	r3, r2
 800c56e:	f04f 0800 	mov.w	r8, #0
 800c572:	bfcc      	ite	gt
 800c574:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c578:	ea03 0901 	andle.w	r9, r3, r1
 800c57c:	2200      	movs	r2, #0
 800c57e:	2300      	movs	r3, #0
 800c580:	4640      	mov	r0, r8
 800c582:	4649      	mov	r1, r9
 800c584:	f7f4 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d1a6      	bne.n	800c4da <_strtod_l+0x562>
 800c58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c592:	4633      	mov	r3, r6
 800c594:	465a      	mov	r2, fp
 800c596:	4620      	mov	r0, r4
 800c598:	f002 fbe8 	bl	800ed6c <__s2b>
 800c59c:	9009      	str	r0, [sp, #36]	; 0x24
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f43f af2a 	beq.w	800c3f8 <_strtod_l+0x480>
 800c5a4:	9a08      	ldr	r2, [sp, #32]
 800c5a6:	9b05      	ldr	r3, [sp, #20]
 800c5a8:	2a00      	cmp	r2, #0
 800c5aa:	eba3 0307 	sub.w	r3, r3, r7
 800c5ae:	bfa8      	it	ge
 800c5b0:	2300      	movge	r3, #0
 800c5b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5b4:	2500      	movs	r5, #0
 800c5b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c5ba:	9312      	str	r3, [sp, #72]	; 0x48
 800c5bc:	46ab      	mov	fp, r5
 800c5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	6859      	ldr	r1, [r3, #4]
 800c5c4:	f002 fb2a 	bl	800ec1c <_Balloc>
 800c5c8:	9005      	str	r0, [sp, #20]
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	f43f af18 	beq.w	800c400 <_strtod_l+0x488>
 800c5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d2:	691a      	ldr	r2, [r3, #16]
 800c5d4:	3202      	adds	r2, #2
 800c5d6:	f103 010c 	add.w	r1, r3, #12
 800c5da:	0092      	lsls	r2, r2, #2
 800c5dc:	300c      	adds	r0, #12
 800c5de:	f000 fcd0 	bl	800cf82 <memcpy>
 800c5e2:	ec49 8b10 	vmov	d0, r8, r9
 800c5e6:	aa18      	add	r2, sp, #96	; 0x60
 800c5e8:	a917      	add	r1, sp, #92	; 0x5c
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f002 fef2 	bl	800f3d4 <__d2b>
 800c5f0:	ec49 8b18 	vmov	d8, r8, r9
 800c5f4:	9016      	str	r0, [sp, #88]	; 0x58
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f43f af02 	beq.w	800c400 <_strtod_l+0x488>
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	4620      	mov	r0, r4
 800c600:	f002 fc4c 	bl	800ee9c <__i2b>
 800c604:	4683      	mov	fp, r0
 800c606:	2800      	cmp	r0, #0
 800c608:	f43f aefa 	beq.w	800c400 <_strtod_l+0x488>
 800c60c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c60e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c610:	2e00      	cmp	r6, #0
 800c612:	bfab      	itete	ge
 800c614:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c616:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c618:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c61a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c61e:	bfac      	ite	ge
 800c620:	eb06 0a03 	addge.w	sl, r6, r3
 800c624:	1b9f      	sublt	r7, r3, r6
 800c626:	9b04      	ldr	r3, [sp, #16]
 800c628:	1af6      	subs	r6, r6, r3
 800c62a:	4416      	add	r6, r2
 800c62c:	4ba0      	ldr	r3, [pc, #640]	; (800c8b0 <_strtod_l+0x938>)
 800c62e:	3e01      	subs	r6, #1
 800c630:	429e      	cmp	r6, r3
 800c632:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c636:	f280 80c4 	bge.w	800c7c2 <_strtod_l+0x84a>
 800c63a:	1b9b      	subs	r3, r3, r6
 800c63c:	2b1f      	cmp	r3, #31
 800c63e:	eba2 0203 	sub.w	r2, r2, r3
 800c642:	f04f 0101 	mov.w	r1, #1
 800c646:	f300 80b0 	bgt.w	800c7aa <_strtod_l+0x832>
 800c64a:	fa01 f303 	lsl.w	r3, r1, r3
 800c64e:	930e      	str	r3, [sp, #56]	; 0x38
 800c650:	2300      	movs	r3, #0
 800c652:	930d      	str	r3, [sp, #52]	; 0x34
 800c654:	eb0a 0602 	add.w	r6, sl, r2
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	45b2      	cmp	sl, r6
 800c65c:	4417      	add	r7, r2
 800c65e:	441f      	add	r7, r3
 800c660:	4653      	mov	r3, sl
 800c662:	bfa8      	it	ge
 800c664:	4633      	movge	r3, r6
 800c666:	42bb      	cmp	r3, r7
 800c668:	bfa8      	it	ge
 800c66a:	463b      	movge	r3, r7
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bfc2      	ittt	gt
 800c670:	1af6      	subgt	r6, r6, r3
 800c672:	1aff      	subgt	r7, r7, r3
 800c674:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	dd17      	ble.n	800c6ae <_strtod_l+0x736>
 800c67e:	4659      	mov	r1, fp
 800c680:	461a      	mov	r2, r3
 800c682:	4620      	mov	r0, r4
 800c684:	f002 fcca 	bl	800f01c <__pow5mult>
 800c688:	4683      	mov	fp, r0
 800c68a:	2800      	cmp	r0, #0
 800c68c:	f43f aeb8 	beq.w	800c400 <_strtod_l+0x488>
 800c690:	4601      	mov	r1, r0
 800c692:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c694:	4620      	mov	r0, r4
 800c696:	f002 fc17 	bl	800eec8 <__multiply>
 800c69a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c69c:	2800      	cmp	r0, #0
 800c69e:	f43f aeaf 	beq.w	800c400 <_strtod_l+0x488>
 800c6a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f002 faf9 	bl	800ec9c <_Bfree>
 800c6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6ac:	9316      	str	r3, [sp, #88]	; 0x58
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	f300 808c 	bgt.w	800c7cc <_strtod_l+0x854>
 800c6b4:	9b08      	ldr	r3, [sp, #32]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	dd08      	ble.n	800c6cc <_strtod_l+0x754>
 800c6ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6bc:	9905      	ldr	r1, [sp, #20]
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f002 fcac 	bl	800f01c <__pow5mult>
 800c6c4:	9005      	str	r0, [sp, #20]
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f ae9a 	beq.w	800c400 <_strtod_l+0x488>
 800c6cc:	2f00      	cmp	r7, #0
 800c6ce:	dd08      	ble.n	800c6e2 <_strtod_l+0x76a>
 800c6d0:	9905      	ldr	r1, [sp, #20]
 800c6d2:	463a      	mov	r2, r7
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f002 fcfb 	bl	800f0d0 <__lshift>
 800c6da:	9005      	str	r0, [sp, #20]
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	f43f ae8f 	beq.w	800c400 <_strtod_l+0x488>
 800c6e2:	f1ba 0f00 	cmp.w	sl, #0
 800c6e6:	dd08      	ble.n	800c6fa <_strtod_l+0x782>
 800c6e8:	4659      	mov	r1, fp
 800c6ea:	4652      	mov	r2, sl
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f002 fcef 	bl	800f0d0 <__lshift>
 800c6f2:	4683      	mov	fp, r0
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	f43f ae83 	beq.w	800c400 <_strtod_l+0x488>
 800c6fa:	9a05      	ldr	r2, [sp, #20]
 800c6fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6fe:	4620      	mov	r0, r4
 800c700:	f002 fd6e 	bl	800f1e0 <__mdiff>
 800c704:	4605      	mov	r5, r0
 800c706:	2800      	cmp	r0, #0
 800c708:	f43f ae7a 	beq.w	800c400 <_strtod_l+0x488>
 800c70c:	68c3      	ldr	r3, [r0, #12]
 800c70e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c710:	2300      	movs	r3, #0
 800c712:	60c3      	str	r3, [r0, #12]
 800c714:	4659      	mov	r1, fp
 800c716:	f002 fd47 	bl	800f1a8 <__mcmp>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	da60      	bge.n	800c7e0 <_strtod_l+0x868>
 800c71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c720:	ea53 0308 	orrs.w	r3, r3, r8
 800c724:	f040 8084 	bne.w	800c830 <_strtod_l+0x8b8>
 800c728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d17f      	bne.n	800c830 <_strtod_l+0x8b8>
 800c730:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c734:	0d1b      	lsrs	r3, r3, #20
 800c736:	051b      	lsls	r3, r3, #20
 800c738:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c73c:	d978      	bls.n	800c830 <_strtod_l+0x8b8>
 800c73e:	696b      	ldr	r3, [r5, #20]
 800c740:	b913      	cbnz	r3, 800c748 <_strtod_l+0x7d0>
 800c742:	692b      	ldr	r3, [r5, #16]
 800c744:	2b01      	cmp	r3, #1
 800c746:	dd73      	ble.n	800c830 <_strtod_l+0x8b8>
 800c748:	4629      	mov	r1, r5
 800c74a:	2201      	movs	r2, #1
 800c74c:	4620      	mov	r0, r4
 800c74e:	f002 fcbf 	bl	800f0d0 <__lshift>
 800c752:	4659      	mov	r1, fp
 800c754:	4605      	mov	r5, r0
 800c756:	f002 fd27 	bl	800f1a8 <__mcmp>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	dd68      	ble.n	800c830 <_strtod_l+0x8b8>
 800c75e:	9904      	ldr	r1, [sp, #16]
 800c760:	4a54      	ldr	r2, [pc, #336]	; (800c8b4 <_strtod_l+0x93c>)
 800c762:	464b      	mov	r3, r9
 800c764:	2900      	cmp	r1, #0
 800c766:	f000 8084 	beq.w	800c872 <_strtod_l+0x8fa>
 800c76a:	ea02 0109 	and.w	r1, r2, r9
 800c76e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c772:	dc7e      	bgt.n	800c872 <_strtod_l+0x8fa>
 800c774:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c778:	f77f aeb3 	ble.w	800c4e2 <_strtod_l+0x56a>
 800c77c:	4b4e      	ldr	r3, [pc, #312]	; (800c8b8 <_strtod_l+0x940>)
 800c77e:	4640      	mov	r0, r8
 800c780:	4649      	mov	r1, r9
 800c782:	2200      	movs	r2, #0
 800c784:	f7f3 ff38 	bl	80005f8 <__aeabi_dmul>
 800c788:	4b4a      	ldr	r3, [pc, #296]	; (800c8b4 <_strtod_l+0x93c>)
 800c78a:	400b      	ands	r3, r1
 800c78c:	4680      	mov	r8, r0
 800c78e:	4689      	mov	r9, r1
 800c790:	2b00      	cmp	r3, #0
 800c792:	f47f ae3f 	bne.w	800c414 <_strtod_l+0x49c>
 800c796:	2322      	movs	r3, #34	; 0x22
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	e63b      	b.n	800c414 <_strtod_l+0x49c>
 800c79c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a4:	ea03 0808 	and.w	r8, r3, r8
 800c7a8:	e6e8      	b.n	800c57c <_strtod_l+0x604>
 800c7aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c7ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c7b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c7b6:	36e2      	adds	r6, #226	; 0xe2
 800c7b8:	fa01 f306 	lsl.w	r3, r1, r6
 800c7bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c7c0:	e748      	b.n	800c654 <_strtod_l+0x6dc>
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c7ca:	e743      	b.n	800c654 <_strtod_l+0x6dc>
 800c7cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f002 fc7d 	bl	800f0d0 <__lshift>
 800c7d6:	9016      	str	r0, [sp, #88]	; 0x58
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	f47f af6b 	bne.w	800c6b4 <_strtod_l+0x73c>
 800c7de:	e60f      	b.n	800c400 <_strtod_l+0x488>
 800c7e0:	46ca      	mov	sl, r9
 800c7e2:	d171      	bne.n	800c8c8 <_strtod_l+0x950>
 800c7e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7ea:	b352      	cbz	r2, 800c842 <_strtod_l+0x8ca>
 800c7ec:	4a33      	ldr	r2, [pc, #204]	; (800c8bc <_strtod_l+0x944>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d12a      	bne.n	800c848 <_strtod_l+0x8d0>
 800c7f2:	9b04      	ldr	r3, [sp, #16]
 800c7f4:	4641      	mov	r1, r8
 800c7f6:	b1fb      	cbz	r3, 800c838 <_strtod_l+0x8c0>
 800c7f8:	4b2e      	ldr	r3, [pc, #184]	; (800c8b4 <_strtod_l+0x93c>)
 800c7fa:	ea09 0303 	and.w	r3, r9, r3
 800c7fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c806:	d81a      	bhi.n	800c83e <_strtod_l+0x8c6>
 800c808:	0d1b      	lsrs	r3, r3, #20
 800c80a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c80e:	fa02 f303 	lsl.w	r3, r2, r3
 800c812:	4299      	cmp	r1, r3
 800c814:	d118      	bne.n	800c848 <_strtod_l+0x8d0>
 800c816:	4b2a      	ldr	r3, [pc, #168]	; (800c8c0 <_strtod_l+0x948>)
 800c818:	459a      	cmp	sl, r3
 800c81a:	d102      	bne.n	800c822 <_strtod_l+0x8aa>
 800c81c:	3101      	adds	r1, #1
 800c81e:	f43f adef 	beq.w	800c400 <_strtod_l+0x488>
 800c822:	4b24      	ldr	r3, [pc, #144]	; (800c8b4 <_strtod_l+0x93c>)
 800c824:	ea0a 0303 	and.w	r3, sl, r3
 800c828:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c82c:	f04f 0800 	mov.w	r8, #0
 800c830:	9b04      	ldr	r3, [sp, #16]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1a2      	bne.n	800c77c <_strtod_l+0x804>
 800c836:	e5ed      	b.n	800c414 <_strtod_l+0x49c>
 800c838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c83c:	e7e9      	b.n	800c812 <_strtod_l+0x89a>
 800c83e:	4613      	mov	r3, r2
 800c840:	e7e7      	b.n	800c812 <_strtod_l+0x89a>
 800c842:	ea53 0308 	orrs.w	r3, r3, r8
 800c846:	d08a      	beq.n	800c75e <_strtod_l+0x7e6>
 800c848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c84a:	b1e3      	cbz	r3, 800c886 <_strtod_l+0x90e>
 800c84c:	ea13 0f0a 	tst.w	r3, sl
 800c850:	d0ee      	beq.n	800c830 <_strtod_l+0x8b8>
 800c852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c854:	9a04      	ldr	r2, [sp, #16]
 800c856:	4640      	mov	r0, r8
 800c858:	4649      	mov	r1, r9
 800c85a:	b1c3      	cbz	r3, 800c88e <_strtod_l+0x916>
 800c85c:	f7ff fb6e 	bl	800bf3c <sulp>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	ec51 0b18 	vmov	r0, r1, d8
 800c868:	f7f3 fd10 	bl	800028c <__adddf3>
 800c86c:	4680      	mov	r8, r0
 800c86e:	4689      	mov	r9, r1
 800c870:	e7de      	b.n	800c830 <_strtod_l+0x8b8>
 800c872:	4013      	ands	r3, r2
 800c874:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c878:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c87c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c880:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c884:	e7d4      	b.n	800c830 <_strtod_l+0x8b8>
 800c886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c888:	ea13 0f08 	tst.w	r3, r8
 800c88c:	e7e0      	b.n	800c850 <_strtod_l+0x8d8>
 800c88e:	f7ff fb55 	bl	800bf3c <sulp>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	ec51 0b18 	vmov	r0, r1, d8
 800c89a:	f7f3 fcf5 	bl	8000288 <__aeabi_dsub>
 800c89e:	2200      	movs	r2, #0
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	4680      	mov	r8, r0
 800c8a4:	4689      	mov	r9, r1
 800c8a6:	f7f4 f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d0c0      	beq.n	800c830 <_strtod_l+0x8b8>
 800c8ae:	e618      	b.n	800c4e2 <_strtod_l+0x56a>
 800c8b0:	fffffc02 	.word	0xfffffc02
 800c8b4:	7ff00000 	.word	0x7ff00000
 800c8b8:	39500000 	.word	0x39500000
 800c8bc:	000fffff 	.word	0x000fffff
 800c8c0:	7fefffff 	.word	0x7fefffff
 800c8c4:	08010e98 	.word	0x08010e98
 800c8c8:	4659      	mov	r1, fp
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	f002 fddc 	bl	800f488 <__ratio>
 800c8d0:	ec57 6b10 	vmov	r6, r7, d0
 800c8d4:	ee10 0a10 	vmov	r0, s0
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8de:	4639      	mov	r1, r7
 800c8e0:	f7f4 f906 	bl	8000af0 <__aeabi_dcmple>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d071      	beq.n	800c9cc <_strtod_l+0xa54>
 800c8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d17c      	bne.n	800c9e8 <_strtod_l+0xa70>
 800c8ee:	f1b8 0f00 	cmp.w	r8, #0
 800c8f2:	d15a      	bne.n	800c9aa <_strtod_l+0xa32>
 800c8f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d15d      	bne.n	800c9b8 <_strtod_l+0xa40>
 800c8fc:	4b90      	ldr	r3, [pc, #576]	; (800cb40 <_strtod_l+0xbc8>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	4630      	mov	r0, r6
 800c902:	4639      	mov	r1, r7
 800c904:	f7f4 f8ea 	bl	8000adc <__aeabi_dcmplt>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d15c      	bne.n	800c9c6 <_strtod_l+0xa4e>
 800c90c:	4630      	mov	r0, r6
 800c90e:	4639      	mov	r1, r7
 800c910:	4b8c      	ldr	r3, [pc, #560]	; (800cb44 <_strtod_l+0xbcc>)
 800c912:	2200      	movs	r2, #0
 800c914:	f7f3 fe70 	bl	80005f8 <__aeabi_dmul>
 800c918:	4606      	mov	r6, r0
 800c91a:	460f      	mov	r7, r1
 800c91c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c920:	9606      	str	r6, [sp, #24]
 800c922:	9307      	str	r3, [sp, #28]
 800c924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c928:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c92c:	4b86      	ldr	r3, [pc, #536]	; (800cb48 <_strtod_l+0xbd0>)
 800c92e:	ea0a 0303 	and.w	r3, sl, r3
 800c932:	930d      	str	r3, [sp, #52]	; 0x34
 800c934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c936:	4b85      	ldr	r3, [pc, #532]	; (800cb4c <_strtod_l+0xbd4>)
 800c938:	429a      	cmp	r2, r3
 800c93a:	f040 8090 	bne.w	800ca5e <_strtod_l+0xae6>
 800c93e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c942:	ec49 8b10 	vmov	d0, r8, r9
 800c946:	f002 fcd5 	bl	800f2f4 <__ulp>
 800c94a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c94e:	ec51 0b10 	vmov	r0, r1, d0
 800c952:	f7f3 fe51 	bl	80005f8 <__aeabi_dmul>
 800c956:	4642      	mov	r2, r8
 800c958:	464b      	mov	r3, r9
 800c95a:	f7f3 fc97 	bl	800028c <__adddf3>
 800c95e:	460b      	mov	r3, r1
 800c960:	4979      	ldr	r1, [pc, #484]	; (800cb48 <_strtod_l+0xbd0>)
 800c962:	4a7b      	ldr	r2, [pc, #492]	; (800cb50 <_strtod_l+0xbd8>)
 800c964:	4019      	ands	r1, r3
 800c966:	4291      	cmp	r1, r2
 800c968:	4680      	mov	r8, r0
 800c96a:	d944      	bls.n	800c9f6 <_strtod_l+0xa7e>
 800c96c:	ee18 2a90 	vmov	r2, s17
 800c970:	4b78      	ldr	r3, [pc, #480]	; (800cb54 <_strtod_l+0xbdc>)
 800c972:	429a      	cmp	r2, r3
 800c974:	d104      	bne.n	800c980 <_strtod_l+0xa08>
 800c976:	ee18 3a10 	vmov	r3, s16
 800c97a:	3301      	adds	r3, #1
 800c97c:	f43f ad40 	beq.w	800c400 <_strtod_l+0x488>
 800c980:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800cb54 <_strtod_l+0xbdc>
 800c984:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c988:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c98a:	4620      	mov	r0, r4
 800c98c:	f002 f986 	bl	800ec9c <_Bfree>
 800c990:	9905      	ldr	r1, [sp, #20]
 800c992:	4620      	mov	r0, r4
 800c994:	f002 f982 	bl	800ec9c <_Bfree>
 800c998:	4659      	mov	r1, fp
 800c99a:	4620      	mov	r0, r4
 800c99c:	f002 f97e 	bl	800ec9c <_Bfree>
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f002 f97a 	bl	800ec9c <_Bfree>
 800c9a8:	e609      	b.n	800c5be <_strtod_l+0x646>
 800c9aa:	f1b8 0f01 	cmp.w	r8, #1
 800c9ae:	d103      	bne.n	800c9b8 <_strtod_l+0xa40>
 800c9b0:	f1b9 0f00 	cmp.w	r9, #0
 800c9b4:	f43f ad95 	beq.w	800c4e2 <_strtod_l+0x56a>
 800c9b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800cb10 <_strtod_l+0xb98>
 800c9bc:	4f60      	ldr	r7, [pc, #384]	; (800cb40 <_strtod_l+0xbc8>)
 800c9be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9c2:	2600      	movs	r6, #0
 800c9c4:	e7ae      	b.n	800c924 <_strtod_l+0x9ac>
 800c9c6:	4f5f      	ldr	r7, [pc, #380]	; (800cb44 <_strtod_l+0xbcc>)
 800c9c8:	2600      	movs	r6, #0
 800c9ca:	e7a7      	b.n	800c91c <_strtod_l+0x9a4>
 800c9cc:	4b5d      	ldr	r3, [pc, #372]	; (800cb44 <_strtod_l+0xbcc>)
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	4639      	mov	r1, r7
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f7f3 fe10 	bl	80005f8 <__aeabi_dmul>
 800c9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460f      	mov	r7, r1
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d09c      	beq.n	800c91c <_strtod_l+0x9a4>
 800c9e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c9e6:	e79d      	b.n	800c924 <_strtod_l+0x9ac>
 800c9e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800cb18 <_strtod_l+0xba0>
 800c9ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9f0:	ec57 6b17 	vmov	r6, r7, d7
 800c9f4:	e796      	b.n	800c924 <_strtod_l+0x9ac>
 800c9f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c9fa:	9b04      	ldr	r3, [sp, #16]
 800c9fc:	46ca      	mov	sl, r9
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1c2      	bne.n	800c988 <_strtod_l+0xa10>
 800ca02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca08:	0d1b      	lsrs	r3, r3, #20
 800ca0a:	051b      	lsls	r3, r3, #20
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d1bb      	bne.n	800c988 <_strtod_l+0xa10>
 800ca10:	4630      	mov	r0, r6
 800ca12:	4639      	mov	r1, r7
 800ca14:	f7f4 f950 	bl	8000cb8 <__aeabi_d2lz>
 800ca18:	f7f3 fdc0 	bl	800059c <__aeabi_l2d>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4630      	mov	r0, r6
 800ca22:	4639      	mov	r1, r7
 800ca24:	f7f3 fc30 	bl	8000288 <__aeabi_dsub>
 800ca28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca2e:	ea43 0308 	orr.w	r3, r3, r8
 800ca32:	4313      	orrs	r3, r2
 800ca34:	4606      	mov	r6, r0
 800ca36:	460f      	mov	r7, r1
 800ca38:	d054      	beq.n	800cae4 <_strtod_l+0xb6c>
 800ca3a:	a339      	add	r3, pc, #228	; (adr r3, 800cb20 <_strtod_l+0xba8>)
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	f7f4 f84c 	bl	8000adc <__aeabi_dcmplt>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	f47f ace5 	bne.w	800c414 <_strtod_l+0x49c>
 800ca4a:	a337      	add	r3, pc, #220	; (adr r3, 800cb28 <_strtod_l+0xbb0>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f4 f860 	bl	8000b18 <__aeabi_dcmpgt>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d095      	beq.n	800c988 <_strtod_l+0xa10>
 800ca5c:	e4da      	b.n	800c414 <_strtod_l+0x49c>
 800ca5e:	9b04      	ldr	r3, [sp, #16]
 800ca60:	b333      	cbz	r3, 800cab0 <_strtod_l+0xb38>
 800ca62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca68:	d822      	bhi.n	800cab0 <_strtod_l+0xb38>
 800ca6a:	a331      	add	r3, pc, #196	; (adr r3, 800cb30 <_strtod_l+0xbb8>)
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	4630      	mov	r0, r6
 800ca72:	4639      	mov	r1, r7
 800ca74:	f7f4 f83c 	bl	8000af0 <__aeabi_dcmple>
 800ca78:	b1a0      	cbz	r0, 800caa4 <_strtod_l+0xb2c>
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f7f4 f893 	bl	8000ba8 <__aeabi_d2uiz>
 800ca82:	2801      	cmp	r0, #1
 800ca84:	bf38      	it	cc
 800ca86:	2001      	movcc	r0, #1
 800ca88:	f7f3 fd3c 	bl	8000504 <__aeabi_ui2d>
 800ca8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca8e:	4606      	mov	r6, r0
 800ca90:	460f      	mov	r7, r1
 800ca92:	bb23      	cbnz	r3, 800cade <_strtod_l+0xb66>
 800ca94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca98:	9010      	str	r0, [sp, #64]	; 0x40
 800ca9a:	9311      	str	r3, [sp, #68]	; 0x44
 800ca9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800caa0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800caa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800caa8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800caac:	1a9b      	subs	r3, r3, r2
 800caae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cab4:	eeb0 0a48 	vmov.f32	s0, s16
 800cab8:	eef0 0a68 	vmov.f32	s1, s17
 800cabc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cac0:	f002 fc18 	bl	800f2f4 <__ulp>
 800cac4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cac8:	ec53 2b10 	vmov	r2, r3, d0
 800cacc:	f7f3 fd94 	bl	80005f8 <__aeabi_dmul>
 800cad0:	ec53 2b18 	vmov	r2, r3, d8
 800cad4:	f7f3 fbda 	bl	800028c <__adddf3>
 800cad8:	4680      	mov	r8, r0
 800cada:	4689      	mov	r9, r1
 800cadc:	e78d      	b.n	800c9fa <_strtod_l+0xa82>
 800cade:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cae2:	e7db      	b.n	800ca9c <_strtod_l+0xb24>
 800cae4:	a314      	add	r3, pc, #80	; (adr r3, 800cb38 <_strtod_l+0xbc0>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	f7f3 fff7 	bl	8000adc <__aeabi_dcmplt>
 800caee:	e7b3      	b.n	800ca58 <_strtod_l+0xae0>
 800caf0:	2300      	movs	r3, #0
 800caf2:	930a      	str	r3, [sp, #40]	; 0x28
 800caf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800caf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caf8:	6013      	str	r3, [r2, #0]
 800cafa:	f7ff ba7c 	b.w	800bff6 <_strtod_l+0x7e>
 800cafe:	2a65      	cmp	r2, #101	; 0x65
 800cb00:	f43f ab75 	beq.w	800c1ee <_strtod_l+0x276>
 800cb04:	2a45      	cmp	r2, #69	; 0x45
 800cb06:	f43f ab72 	beq.w	800c1ee <_strtod_l+0x276>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	f7ff bbaa 	b.w	800c264 <_strtod_l+0x2ec>
 800cb10:	00000000 	.word	0x00000000
 800cb14:	bff00000 	.word	0xbff00000
 800cb18:	00000000 	.word	0x00000000
 800cb1c:	3ff00000 	.word	0x3ff00000
 800cb20:	94a03595 	.word	0x94a03595
 800cb24:	3fdfffff 	.word	0x3fdfffff
 800cb28:	35afe535 	.word	0x35afe535
 800cb2c:	3fe00000 	.word	0x3fe00000
 800cb30:	ffc00000 	.word	0xffc00000
 800cb34:	41dfffff 	.word	0x41dfffff
 800cb38:	94a03595 	.word	0x94a03595
 800cb3c:	3fcfffff 	.word	0x3fcfffff
 800cb40:	3ff00000 	.word	0x3ff00000
 800cb44:	3fe00000 	.word	0x3fe00000
 800cb48:	7ff00000 	.word	0x7ff00000
 800cb4c:	7fe00000 	.word	0x7fe00000
 800cb50:	7c9fffff 	.word	0x7c9fffff
 800cb54:	7fefffff 	.word	0x7fefffff

0800cb58 <_strtod_r>:
 800cb58:	4b01      	ldr	r3, [pc, #4]	; (800cb60 <_strtod_r+0x8>)
 800cb5a:	f7ff ba0d 	b.w	800bf78 <_strtod_l>
 800cb5e:	bf00      	nop
 800cb60:	20000050 	.word	0x20000050

0800cb64 <strtof>:
 800cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb68:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800cc2c <strtof+0xc8>
 800cb6c:	4b2a      	ldr	r3, [pc, #168]	; (800cc18 <strtof+0xb4>)
 800cb6e:	460a      	mov	r2, r1
 800cb70:	ed2d 8b02 	vpush	{d8}
 800cb74:	4601      	mov	r1, r0
 800cb76:	f8d8 0000 	ldr.w	r0, [r8]
 800cb7a:	f7ff f9fd 	bl	800bf78 <_strtod_l>
 800cb7e:	ec55 4b10 	vmov	r4, r5, d0
 800cb82:	ee10 2a10 	vmov	r2, s0
 800cb86:	ee10 0a10 	vmov	r0, s0
 800cb8a:	462b      	mov	r3, r5
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f7f3 ffcd 	bl	8000b2c <__aeabi_dcmpun>
 800cb92:	b190      	cbz	r0, 800cbba <strtof+0x56>
 800cb94:	2d00      	cmp	r5, #0
 800cb96:	4821      	ldr	r0, [pc, #132]	; (800cc1c <strtof+0xb8>)
 800cb98:	da09      	bge.n	800cbae <strtof+0x4a>
 800cb9a:	f000 fa09 	bl	800cfb0 <nanf>
 800cb9e:	eeb1 8a40 	vneg.f32	s16, s0
 800cba2:	eeb0 0a48 	vmov.f32	s0, s16
 800cba6:	ecbd 8b02 	vpop	{d8}
 800cbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbae:	ecbd 8b02 	vpop	{d8}
 800cbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb6:	f000 b9fb 	b.w	800cfb0 <nanf>
 800cbba:	4620      	mov	r0, r4
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7f4 f813 	bl	8000be8 <__aeabi_d2f>
 800cbc2:	ee08 0a10 	vmov	s16, r0
 800cbc6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800cc20 <strtof+0xbc>
 800cbca:	eeb0 7ac8 	vabs.f32	s14, s16
 800cbce:	eeb4 7a67 	vcmp.f32	s14, s15
 800cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd6:	dd11      	ble.n	800cbfc <strtof+0x98>
 800cbd8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800cbdc:	4b11      	ldr	r3, [pc, #68]	; (800cc24 <strtof+0xc0>)
 800cbde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 ffa1 	bl	8000b2c <__aeabi_dcmpun>
 800cbea:	b980      	cbnz	r0, 800cc0e <strtof+0xaa>
 800cbec:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <strtof+0xc0>)
 800cbee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	f7f3 ff7b 	bl	8000af0 <__aeabi_dcmple>
 800cbfa:	b940      	cbnz	r0, 800cc0e <strtof+0xaa>
 800cbfc:	ee18 3a10 	vmov	r3, s16
 800cc00:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cc04:	d1cd      	bne.n	800cba2 <strtof+0x3e>
 800cc06:	4b08      	ldr	r3, [pc, #32]	; (800cc28 <strtof+0xc4>)
 800cc08:	402b      	ands	r3, r5
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0c9      	beq.n	800cba2 <strtof+0x3e>
 800cc0e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc12:	2222      	movs	r2, #34	; 0x22
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	e7c4      	b.n	800cba2 <strtof+0x3e>
 800cc18:	20000050 	.word	0x20000050
 800cc1c:	08011257 	.word	0x08011257
 800cc20:	7f7fffff 	.word	0x7f7fffff
 800cc24:	7fefffff 	.word	0x7fefffff
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	20000208 	.word	0x20000208

0800cc30 <_strtol_l.constprop.0>:
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc36:	d001      	beq.n	800cc3c <_strtol_l.constprop.0+0xc>
 800cc38:	2b24      	cmp	r3, #36	; 0x24
 800cc3a:	d906      	bls.n	800cc4a <_strtol_l.constprop.0+0x1a>
 800cc3c:	f000 f974 	bl	800cf28 <__errno>
 800cc40:	2316      	movs	r3, #22
 800cc42:	6003      	str	r3, [r0, #0]
 800cc44:	2000      	movs	r0, #0
 800cc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cd30 <_strtol_l.constprop.0+0x100>
 800cc4e:	460d      	mov	r5, r1
 800cc50:	462e      	mov	r6, r5
 800cc52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc56:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cc5a:	f017 0708 	ands.w	r7, r7, #8
 800cc5e:	d1f7      	bne.n	800cc50 <_strtol_l.constprop.0+0x20>
 800cc60:	2c2d      	cmp	r4, #45	; 0x2d
 800cc62:	d132      	bne.n	800ccca <_strtol_l.constprop.0+0x9a>
 800cc64:	782c      	ldrb	r4, [r5, #0]
 800cc66:	2701      	movs	r7, #1
 800cc68:	1cb5      	adds	r5, r6, #2
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d05b      	beq.n	800cd26 <_strtol_l.constprop.0+0xf6>
 800cc6e:	2b10      	cmp	r3, #16
 800cc70:	d109      	bne.n	800cc86 <_strtol_l.constprop.0+0x56>
 800cc72:	2c30      	cmp	r4, #48	; 0x30
 800cc74:	d107      	bne.n	800cc86 <_strtol_l.constprop.0+0x56>
 800cc76:	782c      	ldrb	r4, [r5, #0]
 800cc78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cc7c:	2c58      	cmp	r4, #88	; 0x58
 800cc7e:	d14d      	bne.n	800cd1c <_strtol_l.constprop.0+0xec>
 800cc80:	786c      	ldrb	r4, [r5, #1]
 800cc82:	2310      	movs	r3, #16
 800cc84:	3502      	adds	r5, #2
 800cc86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cc8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cc8e:	f04f 0e00 	mov.w	lr, #0
 800cc92:	fbb8 f9f3 	udiv	r9, r8, r3
 800cc96:	4676      	mov	r6, lr
 800cc98:	fb03 8a19 	mls	sl, r3, r9, r8
 800cc9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cca0:	f1bc 0f09 	cmp.w	ip, #9
 800cca4:	d816      	bhi.n	800ccd4 <_strtol_l.constprop.0+0xa4>
 800cca6:	4664      	mov	r4, ip
 800cca8:	42a3      	cmp	r3, r4
 800ccaa:	dd24      	ble.n	800ccf6 <_strtol_l.constprop.0+0xc6>
 800ccac:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ccb0:	d008      	beq.n	800ccc4 <_strtol_l.constprop.0+0x94>
 800ccb2:	45b1      	cmp	r9, r6
 800ccb4:	d31c      	bcc.n	800ccf0 <_strtol_l.constprop.0+0xc0>
 800ccb6:	d101      	bne.n	800ccbc <_strtol_l.constprop.0+0x8c>
 800ccb8:	45a2      	cmp	sl, r4
 800ccba:	db19      	blt.n	800ccf0 <_strtol_l.constprop.0+0xc0>
 800ccbc:	fb06 4603 	mla	r6, r6, r3, r4
 800ccc0:	f04f 0e01 	mov.w	lr, #1
 800ccc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccc8:	e7e8      	b.n	800cc9c <_strtol_l.constprop.0+0x6c>
 800ccca:	2c2b      	cmp	r4, #43	; 0x2b
 800cccc:	bf04      	itt	eq
 800ccce:	782c      	ldrbeq	r4, [r5, #0]
 800ccd0:	1cb5      	addeq	r5, r6, #2
 800ccd2:	e7ca      	b.n	800cc6a <_strtol_l.constprop.0+0x3a>
 800ccd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ccd8:	f1bc 0f19 	cmp.w	ip, #25
 800ccdc:	d801      	bhi.n	800cce2 <_strtol_l.constprop.0+0xb2>
 800ccde:	3c37      	subs	r4, #55	; 0x37
 800cce0:	e7e2      	b.n	800cca8 <_strtol_l.constprop.0+0x78>
 800cce2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cce6:	f1bc 0f19 	cmp.w	ip, #25
 800ccea:	d804      	bhi.n	800ccf6 <_strtol_l.constprop.0+0xc6>
 800ccec:	3c57      	subs	r4, #87	; 0x57
 800ccee:	e7db      	b.n	800cca8 <_strtol_l.constprop.0+0x78>
 800ccf0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ccf4:	e7e6      	b.n	800ccc4 <_strtol_l.constprop.0+0x94>
 800ccf6:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ccfa:	d105      	bne.n	800cd08 <_strtol_l.constprop.0+0xd8>
 800ccfc:	2322      	movs	r3, #34	; 0x22
 800ccfe:	6003      	str	r3, [r0, #0]
 800cd00:	4646      	mov	r6, r8
 800cd02:	b942      	cbnz	r2, 800cd16 <_strtol_l.constprop.0+0xe6>
 800cd04:	4630      	mov	r0, r6
 800cd06:	e79e      	b.n	800cc46 <_strtol_l.constprop.0+0x16>
 800cd08:	b107      	cbz	r7, 800cd0c <_strtol_l.constprop.0+0xdc>
 800cd0a:	4276      	negs	r6, r6
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d0f9      	beq.n	800cd04 <_strtol_l.constprop.0+0xd4>
 800cd10:	f1be 0f00 	cmp.w	lr, #0
 800cd14:	d000      	beq.n	800cd18 <_strtol_l.constprop.0+0xe8>
 800cd16:	1e69      	subs	r1, r5, #1
 800cd18:	6011      	str	r1, [r2, #0]
 800cd1a:	e7f3      	b.n	800cd04 <_strtol_l.constprop.0+0xd4>
 800cd1c:	2430      	movs	r4, #48	; 0x30
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1b1      	bne.n	800cc86 <_strtol_l.constprop.0+0x56>
 800cd22:	2308      	movs	r3, #8
 800cd24:	e7af      	b.n	800cc86 <_strtol_l.constprop.0+0x56>
 800cd26:	2c30      	cmp	r4, #48	; 0x30
 800cd28:	d0a5      	beq.n	800cc76 <_strtol_l.constprop.0+0x46>
 800cd2a:	230a      	movs	r3, #10
 800cd2c:	e7ab      	b.n	800cc86 <_strtol_l.constprop.0+0x56>
 800cd2e:	bf00      	nop
 800cd30:	08010ec9 	.word	0x08010ec9

0800cd34 <_strtol_r>:
 800cd34:	f7ff bf7c 	b.w	800cc30 <_strtol_l.constprop.0>

0800cd38 <_fwalk_sglue>:
 800cd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	4688      	mov	r8, r1
 800cd40:	4614      	mov	r4, r2
 800cd42:	2600      	movs	r6, #0
 800cd44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd48:	f1b9 0901 	subs.w	r9, r9, #1
 800cd4c:	d505      	bpl.n	800cd5a <_fwalk_sglue+0x22>
 800cd4e:	6824      	ldr	r4, [r4, #0]
 800cd50:	2c00      	cmp	r4, #0
 800cd52:	d1f7      	bne.n	800cd44 <_fwalk_sglue+0xc>
 800cd54:	4630      	mov	r0, r6
 800cd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	89ab      	ldrh	r3, [r5, #12]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d907      	bls.n	800cd70 <_fwalk_sglue+0x38>
 800cd60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd64:	3301      	adds	r3, #1
 800cd66:	d003      	beq.n	800cd70 <_fwalk_sglue+0x38>
 800cd68:	4629      	mov	r1, r5
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	47c0      	blx	r8
 800cd6e:	4306      	orrs	r6, r0
 800cd70:	3568      	adds	r5, #104	; 0x68
 800cd72:	e7e9      	b.n	800cd48 <_fwalk_sglue+0x10>

0800cd74 <iprintf>:
 800cd74:	b40f      	push	{r0, r1, r2, r3}
 800cd76:	b507      	push	{r0, r1, r2, lr}
 800cd78:	4906      	ldr	r1, [pc, #24]	; (800cd94 <iprintf+0x20>)
 800cd7a:	ab04      	add	r3, sp, #16
 800cd7c:	6808      	ldr	r0, [r1, #0]
 800cd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd82:	6881      	ldr	r1, [r0, #8]
 800cd84:	9301      	str	r3, [sp, #4]
 800cd86:	f001 fcbb 	bl	800e700 <_vfiprintf_r>
 800cd8a:	b003      	add	sp, #12
 800cd8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd90:	b004      	add	sp, #16
 800cd92:	4770      	bx	lr
 800cd94:	20000208 	.word	0x20000208

0800cd98 <putchar>:
 800cd98:	4b02      	ldr	r3, [pc, #8]	; (800cda4 <putchar+0xc>)
 800cd9a:	4601      	mov	r1, r0
 800cd9c:	6818      	ldr	r0, [r3, #0]
 800cd9e:	6882      	ldr	r2, [r0, #8]
 800cda0:	f002 bd1d 	b.w	800f7de <_putc_r>
 800cda4:	20000208 	.word	0x20000208

0800cda8 <_puts_r>:
 800cda8:	6a03      	ldr	r3, [r0, #32]
 800cdaa:	b570      	push	{r4, r5, r6, lr}
 800cdac:	6884      	ldr	r4, [r0, #8]
 800cdae:	4605      	mov	r5, r0
 800cdb0:	460e      	mov	r6, r1
 800cdb2:	b90b      	cbnz	r3, 800cdb8 <_puts_r+0x10>
 800cdb4:	f7ff f8aa 	bl	800bf0c <__sinit>
 800cdb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdba:	07db      	lsls	r3, r3, #31
 800cdbc:	d405      	bmi.n	800cdca <_puts_r+0x22>
 800cdbe:	89a3      	ldrh	r3, [r4, #12]
 800cdc0:	0598      	lsls	r0, r3, #22
 800cdc2:	d402      	bmi.n	800cdca <_puts_r+0x22>
 800cdc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdc6:	f000 f8da 	bl	800cf7e <__retarget_lock_acquire_recursive>
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	0719      	lsls	r1, r3, #28
 800cdce:	d513      	bpl.n	800cdf8 <_puts_r+0x50>
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	b18b      	cbz	r3, 800cdf8 <_puts_r+0x50>
 800cdd4:	3e01      	subs	r6, #1
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cddc:	3b01      	subs	r3, #1
 800cdde:	60a3      	str	r3, [r4, #8]
 800cde0:	b9e9      	cbnz	r1, 800ce1e <_puts_r+0x76>
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	da2e      	bge.n	800ce44 <_puts_r+0x9c>
 800cde6:	4622      	mov	r2, r4
 800cde8:	210a      	movs	r1, #10
 800cdea:	4628      	mov	r0, r5
 800cdec:	f002 fbf2 	bl	800f5d4 <__swbuf_r>
 800cdf0:	3001      	adds	r0, #1
 800cdf2:	d007      	beq.n	800ce04 <_puts_r+0x5c>
 800cdf4:	250a      	movs	r5, #10
 800cdf6:	e007      	b.n	800ce08 <_puts_r+0x60>
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f002 fc28 	bl	800f650 <__swsetup_r>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d0e7      	beq.n	800cdd4 <_puts_r+0x2c>
 800ce04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ce08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce0a:	07da      	lsls	r2, r3, #31
 800ce0c:	d405      	bmi.n	800ce1a <_puts_r+0x72>
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	059b      	lsls	r3, r3, #22
 800ce12:	d402      	bmi.n	800ce1a <_puts_r+0x72>
 800ce14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce16:	f000 f8b3 	bl	800cf80 <__retarget_lock_release_recursive>
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	bd70      	pop	{r4, r5, r6, pc}
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	da04      	bge.n	800ce2c <_puts_r+0x84>
 800ce22:	69a2      	ldr	r2, [r4, #24]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	dc06      	bgt.n	800ce36 <_puts_r+0x8e>
 800ce28:	290a      	cmp	r1, #10
 800ce2a:	d004      	beq.n	800ce36 <_puts_r+0x8e>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	1c5a      	adds	r2, r3, #1
 800ce30:	6022      	str	r2, [r4, #0]
 800ce32:	7019      	strb	r1, [r3, #0]
 800ce34:	e7cf      	b.n	800cdd6 <_puts_r+0x2e>
 800ce36:	4622      	mov	r2, r4
 800ce38:	4628      	mov	r0, r5
 800ce3a:	f002 fbcb 	bl	800f5d4 <__swbuf_r>
 800ce3e:	3001      	adds	r0, #1
 800ce40:	d1c9      	bne.n	800cdd6 <_puts_r+0x2e>
 800ce42:	e7df      	b.n	800ce04 <_puts_r+0x5c>
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	250a      	movs	r5, #10
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	6022      	str	r2, [r4, #0]
 800ce4c:	701d      	strb	r5, [r3, #0]
 800ce4e:	e7db      	b.n	800ce08 <_puts_r+0x60>

0800ce50 <puts>:
 800ce50:	4b02      	ldr	r3, [pc, #8]	; (800ce5c <puts+0xc>)
 800ce52:	4601      	mov	r1, r0
 800ce54:	6818      	ldr	r0, [r3, #0]
 800ce56:	f7ff bfa7 	b.w	800cda8 <_puts_r>
 800ce5a:	bf00      	nop
 800ce5c:	20000208 	.word	0x20000208

0800ce60 <strncmp>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	b16a      	cbz	r2, 800ce80 <strncmp+0x20>
 800ce64:	3901      	subs	r1, #1
 800ce66:	1884      	adds	r4, r0, r2
 800ce68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d103      	bne.n	800ce7c <strncmp+0x1c>
 800ce74:	42a0      	cmp	r0, r4
 800ce76:	d001      	beq.n	800ce7c <strncmp+0x1c>
 800ce78:	2a00      	cmp	r2, #0
 800ce7a:	d1f5      	bne.n	800ce68 <strncmp+0x8>
 800ce7c:	1ad0      	subs	r0, r2, r3
 800ce7e:	bd10      	pop	{r4, pc}
 800ce80:	4610      	mov	r0, r2
 800ce82:	e7fc      	b.n	800ce7e <strncmp+0x1e>

0800ce84 <memset>:
 800ce84:	4402      	add	r2, r0
 800ce86:	4603      	mov	r3, r0
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d100      	bne.n	800ce8e <memset+0xa>
 800ce8c:	4770      	bx	lr
 800ce8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce92:	e7f9      	b.n	800ce88 <memset+0x4>

0800ce94 <_localeconv_r>:
 800ce94:	4800      	ldr	r0, [pc, #0]	; (800ce98 <_localeconv_r+0x4>)
 800ce96:	4770      	bx	lr
 800ce98:	20000140 	.word	0x20000140

0800ce9c <_close_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d06      	ldr	r5, [pc, #24]	; (800ceb8 <_close_r+0x1c>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	f7f6 f97d 	bl	80031a6 <_close>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_close_r+0x1a>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_close_r+0x1a>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	20000bf8 	.word	0x20000bf8

0800cebc <_lseek_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_lseek_r+0x20>)
 800cec0:	4604      	mov	r4, r0
 800cec2:	4608      	mov	r0, r1
 800cec4:	4611      	mov	r1, r2
 800cec6:	2200      	movs	r2, #0
 800cec8:	602a      	str	r2, [r5, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7f6 f992 	bl	80031f4 <_lseek>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_lseek_r+0x1e>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_lseek_r+0x1e>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20000bf8 	.word	0x20000bf8

0800cee0 <_read_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d07      	ldr	r5, [pc, #28]	; (800cf00 <_read_r+0x20>)
 800cee4:	4604      	mov	r4, r0
 800cee6:	4608      	mov	r0, r1
 800cee8:	4611      	mov	r1, r2
 800ceea:	2200      	movs	r2, #0
 800ceec:	602a      	str	r2, [r5, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	f7f6 f920 	bl	8003134 <_read>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_read_r+0x1e>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_read_r+0x1e>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	20000bf8 	.word	0x20000bf8

0800cf04 <_write_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4d07      	ldr	r5, [pc, #28]	; (800cf24 <_write_r+0x20>)
 800cf08:	4604      	mov	r4, r0
 800cf0a:	4608      	mov	r0, r1
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	2200      	movs	r2, #0
 800cf10:	602a      	str	r2, [r5, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	f7f6 f92b 	bl	800316e <_write>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_write_r+0x1e>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_write_r+0x1e>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	20000bf8 	.word	0x20000bf8

0800cf28 <__errno>:
 800cf28:	4b01      	ldr	r3, [pc, #4]	; (800cf30 <__errno+0x8>)
 800cf2a:	6818      	ldr	r0, [r3, #0]
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	20000208 	.word	0x20000208

0800cf34 <__libc_init_array>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	4d0d      	ldr	r5, [pc, #52]	; (800cf6c <__libc_init_array+0x38>)
 800cf38:	4c0d      	ldr	r4, [pc, #52]	; (800cf70 <__libc_init_array+0x3c>)
 800cf3a:	1b64      	subs	r4, r4, r5
 800cf3c:	10a4      	asrs	r4, r4, #2
 800cf3e:	2600      	movs	r6, #0
 800cf40:	42a6      	cmp	r6, r4
 800cf42:	d109      	bne.n	800cf58 <__libc_init_array+0x24>
 800cf44:	4d0b      	ldr	r5, [pc, #44]	; (800cf74 <__libc_init_array+0x40>)
 800cf46:	4c0c      	ldr	r4, [pc, #48]	; (800cf78 <__libc_init_array+0x44>)
 800cf48:	f003 feaa 	bl	8010ca0 <_init>
 800cf4c:	1b64      	subs	r4, r4, r5
 800cf4e:	10a4      	asrs	r4, r4, #2
 800cf50:	2600      	movs	r6, #0
 800cf52:	42a6      	cmp	r6, r4
 800cf54:	d105      	bne.n	800cf62 <__libc_init_array+0x2e>
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf5c:	4798      	blx	r3
 800cf5e:	3601      	adds	r6, #1
 800cf60:	e7ee      	b.n	800cf40 <__libc_init_array+0xc>
 800cf62:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf66:	4798      	blx	r3
 800cf68:	3601      	adds	r6, #1
 800cf6a:	e7f2      	b.n	800cf52 <__libc_init_array+0x1e>
 800cf6c:	08011438 	.word	0x08011438
 800cf70:	08011438 	.word	0x08011438
 800cf74:	08011438 	.word	0x08011438
 800cf78:	0801143c 	.word	0x0801143c

0800cf7c <__retarget_lock_init_recursive>:
 800cf7c:	4770      	bx	lr

0800cf7e <__retarget_lock_acquire_recursive>:
 800cf7e:	4770      	bx	lr

0800cf80 <__retarget_lock_release_recursive>:
 800cf80:	4770      	bx	lr

0800cf82 <memcpy>:
 800cf82:	440a      	add	r2, r1
 800cf84:	4291      	cmp	r1, r2
 800cf86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf8a:	d100      	bne.n	800cf8e <memcpy+0xc>
 800cf8c:	4770      	bx	lr
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf98:	4291      	cmp	r1, r2
 800cf9a:	d1f9      	bne.n	800cf90 <memcpy+0xe>
 800cf9c:	bd10      	pop	{r4, pc}
	...

0800cfa0 <nan>:
 800cfa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfa8 <nan+0x8>
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	00000000 	.word	0x00000000
 800cfac:	7ff80000 	.word	0x7ff80000

0800cfb0 <nanf>:
 800cfb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cfb8 <nanf+0x8>
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	7fc00000 	.word	0x7fc00000

0800cfbc <quorem>:
 800cfbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc0:	6903      	ldr	r3, [r0, #16]
 800cfc2:	690c      	ldr	r4, [r1, #16]
 800cfc4:	42a3      	cmp	r3, r4
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	db7e      	blt.n	800d0c8 <quorem+0x10c>
 800cfca:	3c01      	subs	r4, #1
 800cfcc:	f101 0814 	add.w	r8, r1, #20
 800cfd0:	f100 0514 	add.w	r5, r0, #20
 800cfd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cfea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cfee:	fbb2 f6f3 	udiv	r6, r2, r3
 800cff2:	d331      	bcc.n	800d058 <quorem+0x9c>
 800cff4:	f04f 0e00 	mov.w	lr, #0
 800cff8:	4640      	mov	r0, r8
 800cffa:	46ac      	mov	ip, r5
 800cffc:	46f2      	mov	sl, lr
 800cffe:	f850 2b04 	ldr.w	r2, [r0], #4
 800d002:	b293      	uxth	r3, r2
 800d004:	fb06 e303 	mla	r3, r6, r3, lr
 800d008:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d00c:	0c1a      	lsrs	r2, r3, #16
 800d00e:	b29b      	uxth	r3, r3
 800d010:	ebaa 0303 	sub.w	r3, sl, r3
 800d014:	f8dc a000 	ldr.w	sl, [ip]
 800d018:	fa13 f38a 	uxtah	r3, r3, sl
 800d01c:	fb06 220e 	mla	r2, r6, lr, r2
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	9b00      	ldr	r3, [sp, #0]
 800d024:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d028:	b292      	uxth	r2, r2
 800d02a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d02e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d032:	f8bd 3000 	ldrh.w	r3, [sp]
 800d036:	4581      	cmp	r9, r0
 800d038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d03c:	f84c 3b04 	str.w	r3, [ip], #4
 800d040:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d044:	d2db      	bcs.n	800cffe <quorem+0x42>
 800d046:	f855 300b 	ldr.w	r3, [r5, fp]
 800d04a:	b92b      	cbnz	r3, 800d058 <quorem+0x9c>
 800d04c:	9b01      	ldr	r3, [sp, #4]
 800d04e:	3b04      	subs	r3, #4
 800d050:	429d      	cmp	r5, r3
 800d052:	461a      	mov	r2, r3
 800d054:	d32c      	bcc.n	800d0b0 <quorem+0xf4>
 800d056:	613c      	str	r4, [r7, #16]
 800d058:	4638      	mov	r0, r7
 800d05a:	f002 f8a5 	bl	800f1a8 <__mcmp>
 800d05e:	2800      	cmp	r0, #0
 800d060:	db22      	blt.n	800d0a8 <quorem+0xec>
 800d062:	3601      	adds	r6, #1
 800d064:	4629      	mov	r1, r5
 800d066:	2000      	movs	r0, #0
 800d068:	f858 2b04 	ldr.w	r2, [r8], #4
 800d06c:	f8d1 c000 	ldr.w	ip, [r1]
 800d070:	b293      	uxth	r3, r2
 800d072:	1ac3      	subs	r3, r0, r3
 800d074:	0c12      	lsrs	r2, r2, #16
 800d076:	fa13 f38c 	uxtah	r3, r3, ip
 800d07a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d07e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d082:	b29b      	uxth	r3, r3
 800d084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d088:	45c1      	cmp	r9, r8
 800d08a:	f841 3b04 	str.w	r3, [r1], #4
 800d08e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d092:	d2e9      	bcs.n	800d068 <quorem+0xac>
 800d094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d09c:	b922      	cbnz	r2, 800d0a8 <quorem+0xec>
 800d09e:	3b04      	subs	r3, #4
 800d0a0:	429d      	cmp	r5, r3
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	d30a      	bcc.n	800d0bc <quorem+0x100>
 800d0a6:	613c      	str	r4, [r7, #16]
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	b003      	add	sp, #12
 800d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b0:	6812      	ldr	r2, [r2, #0]
 800d0b2:	3b04      	subs	r3, #4
 800d0b4:	2a00      	cmp	r2, #0
 800d0b6:	d1ce      	bne.n	800d056 <quorem+0x9a>
 800d0b8:	3c01      	subs	r4, #1
 800d0ba:	e7c9      	b.n	800d050 <quorem+0x94>
 800d0bc:	6812      	ldr	r2, [r2, #0]
 800d0be:	3b04      	subs	r3, #4
 800d0c0:	2a00      	cmp	r2, #0
 800d0c2:	d1f0      	bne.n	800d0a6 <quorem+0xea>
 800d0c4:	3c01      	subs	r4, #1
 800d0c6:	e7eb      	b.n	800d0a0 <quorem+0xe4>
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	e7ee      	b.n	800d0aa <quorem+0xee>
 800d0cc:	0000      	movs	r0, r0
	...

0800d0d0 <_dtoa_r>:
 800d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	ed2d 8b04 	vpush	{d8-d9}
 800d0d8:	69c5      	ldr	r5, [r0, #28]
 800d0da:	b093      	sub	sp, #76	; 0x4c
 800d0dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d0e0:	ec57 6b10 	vmov	r6, r7, d0
 800d0e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d0e8:	9107      	str	r1, [sp, #28]
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	920a      	str	r2, [sp, #40]	; 0x28
 800d0ee:	930d      	str	r3, [sp, #52]	; 0x34
 800d0f0:	b975      	cbnz	r5, 800d110 <_dtoa_r+0x40>
 800d0f2:	2010      	movs	r0, #16
 800d0f4:	f001 fc1e 	bl	800e934 <malloc>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	61e0      	str	r0, [r4, #28]
 800d0fc:	b920      	cbnz	r0, 800d108 <_dtoa_r+0x38>
 800d0fe:	4bae      	ldr	r3, [pc, #696]	; (800d3b8 <_dtoa_r+0x2e8>)
 800d100:	21ef      	movs	r1, #239	; 0xef
 800d102:	48ae      	ldr	r0, [pc, #696]	; (800d3bc <_dtoa_r+0x2ec>)
 800d104:	f002 fbec 	bl	800f8e0 <__assert_func>
 800d108:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d10c:	6005      	str	r5, [r0, #0]
 800d10e:	60c5      	str	r5, [r0, #12]
 800d110:	69e3      	ldr	r3, [r4, #28]
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	b151      	cbz	r1, 800d12c <_dtoa_r+0x5c>
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	604a      	str	r2, [r1, #4]
 800d11a:	2301      	movs	r3, #1
 800d11c:	4093      	lsls	r3, r2
 800d11e:	608b      	str	r3, [r1, #8]
 800d120:	4620      	mov	r0, r4
 800d122:	f001 fdbb 	bl	800ec9c <_Bfree>
 800d126:	69e3      	ldr	r3, [r4, #28]
 800d128:	2200      	movs	r2, #0
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	1e3b      	subs	r3, r7, #0
 800d12e:	bfbb      	ittet	lt
 800d130:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d134:	9303      	strlt	r3, [sp, #12]
 800d136:	2300      	movge	r3, #0
 800d138:	2201      	movlt	r2, #1
 800d13a:	bfac      	ite	ge
 800d13c:	f8c8 3000 	strge.w	r3, [r8]
 800d140:	f8c8 2000 	strlt.w	r2, [r8]
 800d144:	4b9e      	ldr	r3, [pc, #632]	; (800d3c0 <_dtoa_r+0x2f0>)
 800d146:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d14a:	ea33 0308 	bics.w	r3, r3, r8
 800d14e:	d11b      	bne.n	800d188 <_dtoa_r+0xb8>
 800d150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d152:	f242 730f 	movw	r3, #9999	; 0x270f
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d15c:	4333      	orrs	r3, r6
 800d15e:	f000 8593 	beq.w	800dc88 <_dtoa_r+0xbb8>
 800d162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d164:	b963      	cbnz	r3, 800d180 <_dtoa_r+0xb0>
 800d166:	4b97      	ldr	r3, [pc, #604]	; (800d3c4 <_dtoa_r+0x2f4>)
 800d168:	e027      	b.n	800d1ba <_dtoa_r+0xea>
 800d16a:	4b97      	ldr	r3, [pc, #604]	; (800d3c8 <_dtoa_r+0x2f8>)
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	3308      	adds	r3, #8
 800d170:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	9800      	ldr	r0, [sp, #0]
 800d176:	b013      	add	sp, #76	; 0x4c
 800d178:	ecbd 8b04 	vpop	{d8-d9}
 800d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d180:	4b90      	ldr	r3, [pc, #576]	; (800d3c4 <_dtoa_r+0x2f4>)
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	3303      	adds	r3, #3
 800d186:	e7f3      	b.n	800d170 <_dtoa_r+0xa0>
 800d188:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d18c:	2200      	movs	r2, #0
 800d18e:	ec51 0b17 	vmov	r0, r1, d7
 800d192:	eeb0 8a47 	vmov.f32	s16, s14
 800d196:	eef0 8a67 	vmov.f32	s17, s15
 800d19a:	2300      	movs	r3, #0
 800d19c:	f7f3 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1a0:	4681      	mov	r9, r0
 800d1a2:	b160      	cbz	r0, 800d1be <_dtoa_r+0xee>
 800d1a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8568 	beq.w	800dc82 <_dtoa_r+0xbb2>
 800d1b2:	4b86      	ldr	r3, [pc, #536]	; (800d3cc <_dtoa_r+0x2fc>)
 800d1b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	e7da      	b.n	800d174 <_dtoa_r+0xa4>
 800d1be:	aa10      	add	r2, sp, #64	; 0x40
 800d1c0:	a911      	add	r1, sp, #68	; 0x44
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d1c8:	eef0 0a68 	vmov.f32	s1, s17
 800d1cc:	f002 f902 	bl	800f3d4 <__d2b>
 800d1d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d1d4:	4682      	mov	sl, r0
 800d1d6:	2d00      	cmp	r5, #0
 800d1d8:	d07f      	beq.n	800d2da <_dtoa_r+0x20a>
 800d1da:	ee18 3a90 	vmov	r3, s17
 800d1de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d1e6:	ec51 0b18 	vmov	r0, r1, d8
 800d1ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d1ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d1f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	4b75      	ldr	r3, [pc, #468]	; (800d3d0 <_dtoa_r+0x300>)
 800d1fc:	f7f3 f844 	bl	8000288 <__aeabi_dsub>
 800d200:	a367      	add	r3, pc, #412	; (adr r3, 800d3a0 <_dtoa_r+0x2d0>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f7f3 f9f7 	bl	80005f8 <__aeabi_dmul>
 800d20a:	a367      	add	r3, pc, #412	; (adr r3, 800d3a8 <_dtoa_r+0x2d8>)
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	f7f3 f83c 	bl	800028c <__adddf3>
 800d214:	4606      	mov	r6, r0
 800d216:	4628      	mov	r0, r5
 800d218:	460f      	mov	r7, r1
 800d21a:	f7f3 f983 	bl	8000524 <__aeabi_i2d>
 800d21e:	a364      	add	r3, pc, #400	; (adr r3, 800d3b0 <_dtoa_r+0x2e0>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	f7f3 f9e8 	bl	80005f8 <__aeabi_dmul>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4630      	mov	r0, r6
 800d22e:	4639      	mov	r1, r7
 800d230:	f7f3 f82c 	bl	800028c <__adddf3>
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	f7f3 fc8e 	bl	8000b58 <__aeabi_d2iz>
 800d23c:	2200      	movs	r2, #0
 800d23e:	4683      	mov	fp, r0
 800d240:	2300      	movs	r3, #0
 800d242:	4630      	mov	r0, r6
 800d244:	4639      	mov	r1, r7
 800d246:	f7f3 fc49 	bl	8000adc <__aeabi_dcmplt>
 800d24a:	b148      	cbz	r0, 800d260 <_dtoa_r+0x190>
 800d24c:	4658      	mov	r0, fp
 800d24e:	f7f3 f969 	bl	8000524 <__aeabi_i2d>
 800d252:	4632      	mov	r2, r6
 800d254:	463b      	mov	r3, r7
 800d256:	f7f3 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800d25a:	b908      	cbnz	r0, 800d260 <_dtoa_r+0x190>
 800d25c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d260:	f1bb 0f16 	cmp.w	fp, #22
 800d264:	d857      	bhi.n	800d316 <_dtoa_r+0x246>
 800d266:	4b5b      	ldr	r3, [pc, #364]	; (800d3d4 <_dtoa_r+0x304>)
 800d268:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	ec51 0b18 	vmov	r0, r1, d8
 800d274:	f7f3 fc32 	bl	8000adc <__aeabi_dcmplt>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d04e      	beq.n	800d31a <_dtoa_r+0x24a>
 800d27c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d280:	2300      	movs	r3, #0
 800d282:	930c      	str	r3, [sp, #48]	; 0x30
 800d284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d286:	1b5b      	subs	r3, r3, r5
 800d288:	1e5a      	subs	r2, r3, #1
 800d28a:	bf45      	ittet	mi
 800d28c:	f1c3 0301 	rsbmi	r3, r3, #1
 800d290:	9305      	strmi	r3, [sp, #20]
 800d292:	2300      	movpl	r3, #0
 800d294:	2300      	movmi	r3, #0
 800d296:	9206      	str	r2, [sp, #24]
 800d298:	bf54      	ite	pl
 800d29a:	9305      	strpl	r3, [sp, #20]
 800d29c:	9306      	strmi	r3, [sp, #24]
 800d29e:	f1bb 0f00 	cmp.w	fp, #0
 800d2a2:	db3c      	blt.n	800d31e <_dtoa_r+0x24e>
 800d2a4:	9b06      	ldr	r3, [sp, #24]
 800d2a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d2aa:	445b      	add	r3, fp
 800d2ac:	9306      	str	r3, [sp, #24]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	9308      	str	r3, [sp, #32]
 800d2b2:	9b07      	ldr	r3, [sp, #28]
 800d2b4:	2b09      	cmp	r3, #9
 800d2b6:	d868      	bhi.n	800d38a <_dtoa_r+0x2ba>
 800d2b8:	2b05      	cmp	r3, #5
 800d2ba:	bfc4      	itt	gt
 800d2bc:	3b04      	subgt	r3, #4
 800d2be:	9307      	strgt	r3, [sp, #28]
 800d2c0:	9b07      	ldr	r3, [sp, #28]
 800d2c2:	f1a3 0302 	sub.w	r3, r3, #2
 800d2c6:	bfcc      	ite	gt
 800d2c8:	2500      	movgt	r5, #0
 800d2ca:	2501      	movle	r5, #1
 800d2cc:	2b03      	cmp	r3, #3
 800d2ce:	f200 8085 	bhi.w	800d3dc <_dtoa_r+0x30c>
 800d2d2:	e8df f003 	tbb	[pc, r3]
 800d2d6:	3b2e      	.short	0x3b2e
 800d2d8:	5839      	.short	0x5839
 800d2da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d2de:	441d      	add	r5, r3
 800d2e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d2e4:	2b20      	cmp	r3, #32
 800d2e6:	bfc1      	itttt	gt
 800d2e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d2ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800d2f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d2f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d2f8:	bfd6      	itet	le
 800d2fa:	f1c3 0320 	rsble	r3, r3, #32
 800d2fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800d302:	fa06 f003 	lslle.w	r0, r6, r3
 800d306:	f7f3 f8fd 	bl	8000504 <__aeabi_ui2d>
 800d30a:	2201      	movs	r2, #1
 800d30c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d310:	3d01      	subs	r5, #1
 800d312:	920e      	str	r2, [sp, #56]	; 0x38
 800d314:	e76f      	b.n	800d1f6 <_dtoa_r+0x126>
 800d316:	2301      	movs	r3, #1
 800d318:	e7b3      	b.n	800d282 <_dtoa_r+0x1b2>
 800d31a:	900c      	str	r0, [sp, #48]	; 0x30
 800d31c:	e7b2      	b.n	800d284 <_dtoa_r+0x1b4>
 800d31e:	9b05      	ldr	r3, [sp, #20]
 800d320:	eba3 030b 	sub.w	r3, r3, fp
 800d324:	9305      	str	r3, [sp, #20]
 800d326:	f1cb 0300 	rsb	r3, fp, #0
 800d32a:	9308      	str	r3, [sp, #32]
 800d32c:	2300      	movs	r3, #0
 800d32e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d330:	e7bf      	b.n	800d2b2 <_dtoa_r+0x1e2>
 800d332:	2300      	movs	r3, #0
 800d334:	9309      	str	r3, [sp, #36]	; 0x24
 800d336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d338:	2b00      	cmp	r3, #0
 800d33a:	dc52      	bgt.n	800d3e2 <_dtoa_r+0x312>
 800d33c:	2301      	movs	r3, #1
 800d33e:	9301      	str	r3, [sp, #4]
 800d340:	9304      	str	r3, [sp, #16]
 800d342:	461a      	mov	r2, r3
 800d344:	920a      	str	r2, [sp, #40]	; 0x28
 800d346:	e00b      	b.n	800d360 <_dtoa_r+0x290>
 800d348:	2301      	movs	r3, #1
 800d34a:	e7f3      	b.n	800d334 <_dtoa_r+0x264>
 800d34c:	2300      	movs	r3, #0
 800d34e:	9309      	str	r3, [sp, #36]	; 0x24
 800d350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d352:	445b      	add	r3, fp
 800d354:	9301      	str	r3, [sp, #4]
 800d356:	3301      	adds	r3, #1
 800d358:	2b01      	cmp	r3, #1
 800d35a:	9304      	str	r3, [sp, #16]
 800d35c:	bfb8      	it	lt
 800d35e:	2301      	movlt	r3, #1
 800d360:	69e0      	ldr	r0, [r4, #28]
 800d362:	2100      	movs	r1, #0
 800d364:	2204      	movs	r2, #4
 800d366:	f102 0614 	add.w	r6, r2, #20
 800d36a:	429e      	cmp	r6, r3
 800d36c:	d93d      	bls.n	800d3ea <_dtoa_r+0x31a>
 800d36e:	6041      	str	r1, [r0, #4]
 800d370:	4620      	mov	r0, r4
 800d372:	f001 fc53 	bl	800ec1c <_Balloc>
 800d376:	9000      	str	r0, [sp, #0]
 800d378:	2800      	cmp	r0, #0
 800d37a:	d139      	bne.n	800d3f0 <_dtoa_r+0x320>
 800d37c:	4b16      	ldr	r3, [pc, #88]	; (800d3d8 <_dtoa_r+0x308>)
 800d37e:	4602      	mov	r2, r0
 800d380:	f240 11af 	movw	r1, #431	; 0x1af
 800d384:	e6bd      	b.n	800d102 <_dtoa_r+0x32>
 800d386:	2301      	movs	r3, #1
 800d388:	e7e1      	b.n	800d34e <_dtoa_r+0x27e>
 800d38a:	2501      	movs	r5, #1
 800d38c:	2300      	movs	r3, #0
 800d38e:	9307      	str	r3, [sp, #28]
 800d390:	9509      	str	r5, [sp, #36]	; 0x24
 800d392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d396:	9301      	str	r3, [sp, #4]
 800d398:	9304      	str	r3, [sp, #16]
 800d39a:	2200      	movs	r2, #0
 800d39c:	2312      	movs	r3, #18
 800d39e:	e7d1      	b.n	800d344 <_dtoa_r+0x274>
 800d3a0:	636f4361 	.word	0x636f4361
 800d3a4:	3fd287a7 	.word	0x3fd287a7
 800d3a8:	8b60c8b3 	.word	0x8b60c8b3
 800d3ac:	3fc68a28 	.word	0x3fc68a28
 800d3b0:	509f79fb 	.word	0x509f79fb
 800d3b4:	3fd34413 	.word	0x3fd34413
 800d3b8:	08010fd6 	.word	0x08010fd6
 800d3bc:	08010fed 	.word	0x08010fed
 800d3c0:	7ff00000 	.word	0x7ff00000
 800d3c4:	08010fd2 	.word	0x08010fd2
 800d3c8:	08010fc9 	.word	0x08010fc9
 800d3cc:	08010e41 	.word	0x08010e41
 800d3d0:	3ff80000 	.word	0x3ff80000
 800d3d4:	08011148 	.word	0x08011148
 800d3d8:	08011045 	.word	0x08011045
 800d3dc:	2301      	movs	r3, #1
 800d3de:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e0:	e7d7      	b.n	800d392 <_dtoa_r+0x2c2>
 800d3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3e4:	9301      	str	r3, [sp, #4]
 800d3e6:	9304      	str	r3, [sp, #16]
 800d3e8:	e7ba      	b.n	800d360 <_dtoa_r+0x290>
 800d3ea:	3101      	adds	r1, #1
 800d3ec:	0052      	lsls	r2, r2, #1
 800d3ee:	e7ba      	b.n	800d366 <_dtoa_r+0x296>
 800d3f0:	69e3      	ldr	r3, [r4, #28]
 800d3f2:	9a00      	ldr	r2, [sp, #0]
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	9b04      	ldr	r3, [sp, #16]
 800d3f8:	2b0e      	cmp	r3, #14
 800d3fa:	f200 80a8 	bhi.w	800d54e <_dtoa_r+0x47e>
 800d3fe:	2d00      	cmp	r5, #0
 800d400:	f000 80a5 	beq.w	800d54e <_dtoa_r+0x47e>
 800d404:	f1bb 0f00 	cmp.w	fp, #0
 800d408:	dd38      	ble.n	800d47c <_dtoa_r+0x3ac>
 800d40a:	4bc0      	ldr	r3, [pc, #768]	; (800d70c <_dtoa_r+0x63c>)
 800d40c:	f00b 020f 	and.w	r2, fp, #15
 800d410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d414:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d418:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d41c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d420:	d019      	beq.n	800d456 <_dtoa_r+0x386>
 800d422:	4bbb      	ldr	r3, [pc, #748]	; (800d710 <_dtoa_r+0x640>)
 800d424:	ec51 0b18 	vmov	r0, r1, d8
 800d428:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d42c:	f7f3 fa0e 	bl	800084c <__aeabi_ddiv>
 800d430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d434:	f008 080f 	and.w	r8, r8, #15
 800d438:	2503      	movs	r5, #3
 800d43a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d710 <_dtoa_r+0x640>
 800d43e:	f1b8 0f00 	cmp.w	r8, #0
 800d442:	d10a      	bne.n	800d45a <_dtoa_r+0x38a>
 800d444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d448:	4632      	mov	r2, r6
 800d44a:	463b      	mov	r3, r7
 800d44c:	f7f3 f9fe 	bl	800084c <__aeabi_ddiv>
 800d450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d454:	e02b      	b.n	800d4ae <_dtoa_r+0x3de>
 800d456:	2502      	movs	r5, #2
 800d458:	e7ef      	b.n	800d43a <_dtoa_r+0x36a>
 800d45a:	f018 0f01 	tst.w	r8, #1
 800d45e:	d008      	beq.n	800d472 <_dtoa_r+0x3a2>
 800d460:	4630      	mov	r0, r6
 800d462:	4639      	mov	r1, r7
 800d464:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d468:	f7f3 f8c6 	bl	80005f8 <__aeabi_dmul>
 800d46c:	3501      	adds	r5, #1
 800d46e:	4606      	mov	r6, r0
 800d470:	460f      	mov	r7, r1
 800d472:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d476:	f109 0908 	add.w	r9, r9, #8
 800d47a:	e7e0      	b.n	800d43e <_dtoa_r+0x36e>
 800d47c:	f000 809f 	beq.w	800d5be <_dtoa_r+0x4ee>
 800d480:	f1cb 0600 	rsb	r6, fp, #0
 800d484:	4ba1      	ldr	r3, [pc, #644]	; (800d70c <_dtoa_r+0x63c>)
 800d486:	4fa2      	ldr	r7, [pc, #648]	; (800d710 <_dtoa_r+0x640>)
 800d488:	f006 020f 	and.w	r2, r6, #15
 800d48c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	ec51 0b18 	vmov	r0, r1, d8
 800d498:	f7f3 f8ae 	bl	80005f8 <__aeabi_dmul>
 800d49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4a0:	1136      	asrs	r6, r6, #4
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	2502      	movs	r5, #2
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	d17e      	bne.n	800d5a8 <_dtoa_r+0x4d8>
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1d0      	bne.n	800d450 <_dtoa_r+0x380>
 800d4ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 8084 	beq.w	800d5c2 <_dtoa_r+0x4f2>
 800d4ba:	4b96      	ldr	r3, [pc, #600]	; (800d714 <_dtoa_r+0x644>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	4640      	mov	r0, r8
 800d4c0:	4649      	mov	r1, r9
 800d4c2:	f7f3 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d07b      	beq.n	800d5c2 <_dtoa_r+0x4f2>
 800d4ca:	9b04      	ldr	r3, [sp, #16]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d078      	beq.n	800d5c2 <_dtoa_r+0x4f2>
 800d4d0:	9b01      	ldr	r3, [sp, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	dd39      	ble.n	800d54a <_dtoa_r+0x47a>
 800d4d6:	4b90      	ldr	r3, [pc, #576]	; (800d718 <_dtoa_r+0x648>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	4640      	mov	r0, r8
 800d4dc:	4649      	mov	r1, r9
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4e6:	9e01      	ldr	r6, [sp, #4]
 800d4e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d4ec:	3501      	adds	r5, #1
 800d4ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	f7f3 f816 	bl	8000524 <__aeabi_i2d>
 800d4f8:	4642      	mov	r2, r8
 800d4fa:	464b      	mov	r3, r9
 800d4fc:	f7f3 f87c 	bl	80005f8 <__aeabi_dmul>
 800d500:	4b86      	ldr	r3, [pc, #536]	; (800d71c <_dtoa_r+0x64c>)
 800d502:	2200      	movs	r2, #0
 800d504:	f7f2 fec2 	bl	800028c <__adddf3>
 800d508:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d50c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d510:	9303      	str	r3, [sp, #12]
 800d512:	2e00      	cmp	r6, #0
 800d514:	d158      	bne.n	800d5c8 <_dtoa_r+0x4f8>
 800d516:	4b82      	ldr	r3, [pc, #520]	; (800d720 <_dtoa_r+0x650>)
 800d518:	2200      	movs	r2, #0
 800d51a:	4640      	mov	r0, r8
 800d51c:	4649      	mov	r1, r9
 800d51e:	f7f2 feb3 	bl	8000288 <__aeabi_dsub>
 800d522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d526:	4680      	mov	r8, r0
 800d528:	4689      	mov	r9, r1
 800d52a:	f7f3 faf5 	bl	8000b18 <__aeabi_dcmpgt>
 800d52e:	2800      	cmp	r0, #0
 800d530:	f040 8296 	bne.w	800da60 <_dtoa_r+0x990>
 800d534:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d538:	4640      	mov	r0, r8
 800d53a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d53e:	4649      	mov	r1, r9
 800d540:	f7f3 facc 	bl	8000adc <__aeabi_dcmplt>
 800d544:	2800      	cmp	r0, #0
 800d546:	f040 8289 	bne.w	800da5c <_dtoa_r+0x98c>
 800d54a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d54e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d550:	2b00      	cmp	r3, #0
 800d552:	f2c0 814e 	blt.w	800d7f2 <_dtoa_r+0x722>
 800d556:	f1bb 0f0e 	cmp.w	fp, #14
 800d55a:	f300 814a 	bgt.w	800d7f2 <_dtoa_r+0x722>
 800d55e:	4b6b      	ldr	r3, [pc, #428]	; (800d70c <_dtoa_r+0x63c>)
 800d560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d564:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f280 80dc 	bge.w	800d728 <_dtoa_r+0x658>
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f300 80d8 	bgt.w	800d728 <_dtoa_r+0x658>
 800d578:	f040 826f 	bne.w	800da5a <_dtoa_r+0x98a>
 800d57c:	4b68      	ldr	r3, [pc, #416]	; (800d720 <_dtoa_r+0x650>)
 800d57e:	2200      	movs	r2, #0
 800d580:	4640      	mov	r0, r8
 800d582:	4649      	mov	r1, r9
 800d584:	f7f3 f838 	bl	80005f8 <__aeabi_dmul>
 800d588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d58c:	f7f3 faba 	bl	8000b04 <__aeabi_dcmpge>
 800d590:	9e04      	ldr	r6, [sp, #16]
 800d592:	4637      	mov	r7, r6
 800d594:	2800      	cmp	r0, #0
 800d596:	f040 8245 	bne.w	800da24 <_dtoa_r+0x954>
 800d59a:	9d00      	ldr	r5, [sp, #0]
 800d59c:	2331      	movs	r3, #49	; 0x31
 800d59e:	f805 3b01 	strb.w	r3, [r5], #1
 800d5a2:	f10b 0b01 	add.w	fp, fp, #1
 800d5a6:	e241      	b.n	800da2c <_dtoa_r+0x95c>
 800d5a8:	07f2      	lsls	r2, r6, #31
 800d5aa:	d505      	bpl.n	800d5b8 <_dtoa_r+0x4e8>
 800d5ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5b0:	f7f3 f822 	bl	80005f8 <__aeabi_dmul>
 800d5b4:	3501      	adds	r5, #1
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	1076      	asrs	r6, r6, #1
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	e773      	b.n	800d4a6 <_dtoa_r+0x3d6>
 800d5be:	2502      	movs	r5, #2
 800d5c0:	e775      	b.n	800d4ae <_dtoa_r+0x3de>
 800d5c2:	9e04      	ldr	r6, [sp, #16]
 800d5c4:	465f      	mov	r7, fp
 800d5c6:	e792      	b.n	800d4ee <_dtoa_r+0x41e>
 800d5c8:	9900      	ldr	r1, [sp, #0]
 800d5ca:	4b50      	ldr	r3, [pc, #320]	; (800d70c <_dtoa_r+0x63c>)
 800d5cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5d0:	4431      	add	r1, r6
 800d5d2:	9102      	str	r1, [sp, #8]
 800d5d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5d6:	eeb0 9a47 	vmov.f32	s18, s14
 800d5da:	eef0 9a67 	vmov.f32	s19, s15
 800d5de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d5e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d044      	beq.n	800d674 <_dtoa_r+0x5a4>
 800d5ea:	494e      	ldr	r1, [pc, #312]	; (800d724 <_dtoa_r+0x654>)
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	f7f3 f92d 	bl	800084c <__aeabi_ddiv>
 800d5f2:	ec53 2b19 	vmov	r2, r3, d9
 800d5f6:	f7f2 fe47 	bl	8000288 <__aeabi_dsub>
 800d5fa:	9d00      	ldr	r5, [sp, #0]
 800d5fc:	ec41 0b19 	vmov	d9, r0, r1
 800d600:	4649      	mov	r1, r9
 800d602:	4640      	mov	r0, r8
 800d604:	f7f3 faa8 	bl	8000b58 <__aeabi_d2iz>
 800d608:	4606      	mov	r6, r0
 800d60a:	f7f2 ff8b 	bl	8000524 <__aeabi_i2d>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4640      	mov	r0, r8
 800d614:	4649      	mov	r1, r9
 800d616:	f7f2 fe37 	bl	8000288 <__aeabi_dsub>
 800d61a:	3630      	adds	r6, #48	; 0x30
 800d61c:	f805 6b01 	strb.w	r6, [r5], #1
 800d620:	ec53 2b19 	vmov	r2, r3, d9
 800d624:	4680      	mov	r8, r0
 800d626:	4689      	mov	r9, r1
 800d628:	f7f3 fa58 	bl	8000adc <__aeabi_dcmplt>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d164      	bne.n	800d6fa <_dtoa_r+0x62a>
 800d630:	4642      	mov	r2, r8
 800d632:	464b      	mov	r3, r9
 800d634:	4937      	ldr	r1, [pc, #220]	; (800d714 <_dtoa_r+0x644>)
 800d636:	2000      	movs	r0, #0
 800d638:	f7f2 fe26 	bl	8000288 <__aeabi_dsub>
 800d63c:	ec53 2b19 	vmov	r2, r3, d9
 800d640:	f7f3 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800d644:	2800      	cmp	r0, #0
 800d646:	f040 80b6 	bne.w	800d7b6 <_dtoa_r+0x6e6>
 800d64a:	9b02      	ldr	r3, [sp, #8]
 800d64c:	429d      	cmp	r5, r3
 800d64e:	f43f af7c 	beq.w	800d54a <_dtoa_r+0x47a>
 800d652:	4b31      	ldr	r3, [pc, #196]	; (800d718 <_dtoa_r+0x648>)
 800d654:	ec51 0b19 	vmov	r0, r1, d9
 800d658:	2200      	movs	r2, #0
 800d65a:	f7f2 ffcd 	bl	80005f8 <__aeabi_dmul>
 800d65e:	4b2e      	ldr	r3, [pc, #184]	; (800d718 <_dtoa_r+0x648>)
 800d660:	ec41 0b19 	vmov	d9, r0, r1
 800d664:	2200      	movs	r2, #0
 800d666:	4640      	mov	r0, r8
 800d668:	4649      	mov	r1, r9
 800d66a:	f7f2 ffc5 	bl	80005f8 <__aeabi_dmul>
 800d66e:	4680      	mov	r8, r0
 800d670:	4689      	mov	r9, r1
 800d672:	e7c5      	b.n	800d600 <_dtoa_r+0x530>
 800d674:	ec51 0b17 	vmov	r0, r1, d7
 800d678:	f7f2 ffbe 	bl	80005f8 <__aeabi_dmul>
 800d67c:	9b02      	ldr	r3, [sp, #8]
 800d67e:	9d00      	ldr	r5, [sp, #0]
 800d680:	930f      	str	r3, [sp, #60]	; 0x3c
 800d682:	ec41 0b19 	vmov	d9, r0, r1
 800d686:	4649      	mov	r1, r9
 800d688:	4640      	mov	r0, r8
 800d68a:	f7f3 fa65 	bl	8000b58 <__aeabi_d2iz>
 800d68e:	4606      	mov	r6, r0
 800d690:	f7f2 ff48 	bl	8000524 <__aeabi_i2d>
 800d694:	3630      	adds	r6, #48	; 0x30
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	4640      	mov	r0, r8
 800d69c:	4649      	mov	r1, r9
 800d69e:	f7f2 fdf3 	bl	8000288 <__aeabi_dsub>
 800d6a2:	f805 6b01 	strb.w	r6, [r5], #1
 800d6a6:	9b02      	ldr	r3, [sp, #8]
 800d6a8:	429d      	cmp	r5, r3
 800d6aa:	4680      	mov	r8, r0
 800d6ac:	4689      	mov	r9, r1
 800d6ae:	f04f 0200 	mov.w	r2, #0
 800d6b2:	d124      	bne.n	800d6fe <_dtoa_r+0x62e>
 800d6b4:	4b1b      	ldr	r3, [pc, #108]	; (800d724 <_dtoa_r+0x654>)
 800d6b6:	ec51 0b19 	vmov	r0, r1, d9
 800d6ba:	f7f2 fde7 	bl	800028c <__adddf3>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	4649      	mov	r1, r9
 800d6c6:	f7f3 fa27 	bl	8000b18 <__aeabi_dcmpgt>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d173      	bne.n	800d7b6 <_dtoa_r+0x6e6>
 800d6ce:	ec53 2b19 	vmov	r2, r3, d9
 800d6d2:	4914      	ldr	r1, [pc, #80]	; (800d724 <_dtoa_r+0x654>)
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	f7f2 fdd7 	bl	8000288 <__aeabi_dsub>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	460b      	mov	r3, r1
 800d6de:	4640      	mov	r0, r8
 800d6e0:	4649      	mov	r1, r9
 800d6e2:	f7f3 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f43f af2f 	beq.w	800d54a <_dtoa_r+0x47a>
 800d6ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d6ee:	1e6b      	subs	r3, r5, #1
 800d6f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d6f6:	2b30      	cmp	r3, #48	; 0x30
 800d6f8:	d0f8      	beq.n	800d6ec <_dtoa_r+0x61c>
 800d6fa:	46bb      	mov	fp, r7
 800d6fc:	e04a      	b.n	800d794 <_dtoa_r+0x6c4>
 800d6fe:	4b06      	ldr	r3, [pc, #24]	; (800d718 <_dtoa_r+0x648>)
 800d700:	f7f2 ff7a 	bl	80005f8 <__aeabi_dmul>
 800d704:	4680      	mov	r8, r0
 800d706:	4689      	mov	r9, r1
 800d708:	e7bd      	b.n	800d686 <_dtoa_r+0x5b6>
 800d70a:	bf00      	nop
 800d70c:	08011148 	.word	0x08011148
 800d710:	08011120 	.word	0x08011120
 800d714:	3ff00000 	.word	0x3ff00000
 800d718:	40240000 	.word	0x40240000
 800d71c:	401c0000 	.word	0x401c0000
 800d720:	40140000 	.word	0x40140000
 800d724:	3fe00000 	.word	0x3fe00000
 800d728:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d72c:	9d00      	ldr	r5, [sp, #0]
 800d72e:	4642      	mov	r2, r8
 800d730:	464b      	mov	r3, r9
 800d732:	4630      	mov	r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	f7f3 f889 	bl	800084c <__aeabi_ddiv>
 800d73a:	f7f3 fa0d 	bl	8000b58 <__aeabi_d2iz>
 800d73e:	9001      	str	r0, [sp, #4]
 800d740:	f7f2 fef0 	bl	8000524 <__aeabi_i2d>
 800d744:	4642      	mov	r2, r8
 800d746:	464b      	mov	r3, r9
 800d748:	f7f2 ff56 	bl	80005f8 <__aeabi_dmul>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	f7f2 fd98 	bl	8000288 <__aeabi_dsub>
 800d758:	9e01      	ldr	r6, [sp, #4]
 800d75a:	9f04      	ldr	r7, [sp, #16]
 800d75c:	3630      	adds	r6, #48	; 0x30
 800d75e:	f805 6b01 	strb.w	r6, [r5], #1
 800d762:	9e00      	ldr	r6, [sp, #0]
 800d764:	1bae      	subs	r6, r5, r6
 800d766:	42b7      	cmp	r7, r6
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	d134      	bne.n	800d7d8 <_dtoa_r+0x708>
 800d76e:	f7f2 fd8d 	bl	800028c <__adddf3>
 800d772:	4642      	mov	r2, r8
 800d774:	464b      	mov	r3, r9
 800d776:	4606      	mov	r6, r0
 800d778:	460f      	mov	r7, r1
 800d77a:	f7f3 f9cd 	bl	8000b18 <__aeabi_dcmpgt>
 800d77e:	b9c8      	cbnz	r0, 800d7b4 <_dtoa_r+0x6e4>
 800d780:	4642      	mov	r2, r8
 800d782:	464b      	mov	r3, r9
 800d784:	4630      	mov	r0, r6
 800d786:	4639      	mov	r1, r7
 800d788:	f7f3 f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d78c:	b110      	cbz	r0, 800d794 <_dtoa_r+0x6c4>
 800d78e:	9b01      	ldr	r3, [sp, #4]
 800d790:	07db      	lsls	r3, r3, #31
 800d792:	d40f      	bmi.n	800d7b4 <_dtoa_r+0x6e4>
 800d794:	4651      	mov	r1, sl
 800d796:	4620      	mov	r0, r4
 800d798:	f001 fa80 	bl	800ec9c <_Bfree>
 800d79c:	2300      	movs	r3, #0
 800d79e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7a0:	702b      	strb	r3, [r5, #0]
 800d7a2:	f10b 0301 	add.w	r3, fp, #1
 800d7a6:	6013      	str	r3, [r2, #0]
 800d7a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f43f ace2 	beq.w	800d174 <_dtoa_r+0xa4>
 800d7b0:	601d      	str	r5, [r3, #0]
 800d7b2:	e4df      	b.n	800d174 <_dtoa_r+0xa4>
 800d7b4:	465f      	mov	r7, fp
 800d7b6:	462b      	mov	r3, r5
 800d7b8:	461d      	mov	r5, r3
 800d7ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7be:	2a39      	cmp	r2, #57	; 0x39
 800d7c0:	d106      	bne.n	800d7d0 <_dtoa_r+0x700>
 800d7c2:	9a00      	ldr	r2, [sp, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d1f7      	bne.n	800d7b8 <_dtoa_r+0x6e8>
 800d7c8:	9900      	ldr	r1, [sp, #0]
 800d7ca:	2230      	movs	r2, #48	; 0x30
 800d7cc:	3701      	adds	r7, #1
 800d7ce:	700a      	strb	r2, [r1, #0]
 800d7d0:	781a      	ldrb	r2, [r3, #0]
 800d7d2:	3201      	adds	r2, #1
 800d7d4:	701a      	strb	r2, [r3, #0]
 800d7d6:	e790      	b.n	800d6fa <_dtoa_r+0x62a>
 800d7d8:	4ba3      	ldr	r3, [pc, #652]	; (800da68 <_dtoa_r+0x998>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f7f2 ff0c 	bl	80005f8 <__aeabi_dmul>
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	4606      	mov	r6, r0
 800d7e6:	460f      	mov	r7, r1
 800d7e8:	f7f3 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d09e      	beq.n	800d72e <_dtoa_r+0x65e>
 800d7f0:	e7d0      	b.n	800d794 <_dtoa_r+0x6c4>
 800d7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	f000 80ca 	beq.w	800d98e <_dtoa_r+0x8be>
 800d7fa:	9a07      	ldr	r2, [sp, #28]
 800d7fc:	2a01      	cmp	r2, #1
 800d7fe:	f300 80ad 	bgt.w	800d95c <_dtoa_r+0x88c>
 800d802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d804:	2a00      	cmp	r2, #0
 800d806:	f000 80a5 	beq.w	800d954 <_dtoa_r+0x884>
 800d80a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d80e:	9e08      	ldr	r6, [sp, #32]
 800d810:	9d05      	ldr	r5, [sp, #20]
 800d812:	9a05      	ldr	r2, [sp, #20]
 800d814:	441a      	add	r2, r3
 800d816:	9205      	str	r2, [sp, #20]
 800d818:	9a06      	ldr	r2, [sp, #24]
 800d81a:	2101      	movs	r1, #1
 800d81c:	441a      	add	r2, r3
 800d81e:	4620      	mov	r0, r4
 800d820:	9206      	str	r2, [sp, #24]
 800d822:	f001 fb3b 	bl	800ee9c <__i2b>
 800d826:	4607      	mov	r7, r0
 800d828:	b165      	cbz	r5, 800d844 <_dtoa_r+0x774>
 800d82a:	9b06      	ldr	r3, [sp, #24]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	dd09      	ble.n	800d844 <_dtoa_r+0x774>
 800d830:	42ab      	cmp	r3, r5
 800d832:	9a05      	ldr	r2, [sp, #20]
 800d834:	bfa8      	it	ge
 800d836:	462b      	movge	r3, r5
 800d838:	1ad2      	subs	r2, r2, r3
 800d83a:	9205      	str	r2, [sp, #20]
 800d83c:	9a06      	ldr	r2, [sp, #24]
 800d83e:	1aed      	subs	r5, r5, r3
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	9306      	str	r3, [sp, #24]
 800d844:	9b08      	ldr	r3, [sp, #32]
 800d846:	b1f3      	cbz	r3, 800d886 <_dtoa_r+0x7b6>
 800d848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f000 80a3 	beq.w	800d996 <_dtoa_r+0x8c6>
 800d850:	2e00      	cmp	r6, #0
 800d852:	dd10      	ble.n	800d876 <_dtoa_r+0x7a6>
 800d854:	4639      	mov	r1, r7
 800d856:	4632      	mov	r2, r6
 800d858:	4620      	mov	r0, r4
 800d85a:	f001 fbdf 	bl	800f01c <__pow5mult>
 800d85e:	4652      	mov	r2, sl
 800d860:	4601      	mov	r1, r0
 800d862:	4607      	mov	r7, r0
 800d864:	4620      	mov	r0, r4
 800d866:	f001 fb2f 	bl	800eec8 <__multiply>
 800d86a:	4651      	mov	r1, sl
 800d86c:	4680      	mov	r8, r0
 800d86e:	4620      	mov	r0, r4
 800d870:	f001 fa14 	bl	800ec9c <_Bfree>
 800d874:	46c2      	mov	sl, r8
 800d876:	9b08      	ldr	r3, [sp, #32]
 800d878:	1b9a      	subs	r2, r3, r6
 800d87a:	d004      	beq.n	800d886 <_dtoa_r+0x7b6>
 800d87c:	4651      	mov	r1, sl
 800d87e:	4620      	mov	r0, r4
 800d880:	f001 fbcc 	bl	800f01c <__pow5mult>
 800d884:	4682      	mov	sl, r0
 800d886:	2101      	movs	r1, #1
 800d888:	4620      	mov	r0, r4
 800d88a:	f001 fb07 	bl	800ee9c <__i2b>
 800d88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d890:	2b00      	cmp	r3, #0
 800d892:	4606      	mov	r6, r0
 800d894:	f340 8081 	ble.w	800d99a <_dtoa_r+0x8ca>
 800d898:	461a      	mov	r2, r3
 800d89a:	4601      	mov	r1, r0
 800d89c:	4620      	mov	r0, r4
 800d89e:	f001 fbbd 	bl	800f01c <__pow5mult>
 800d8a2:	9b07      	ldr	r3, [sp, #28]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	dd7a      	ble.n	800d9a0 <_dtoa_r+0x8d0>
 800d8aa:	f04f 0800 	mov.w	r8, #0
 800d8ae:	6933      	ldr	r3, [r6, #16]
 800d8b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d8b4:	6918      	ldr	r0, [r3, #16]
 800d8b6:	f001 faa3 	bl	800ee00 <__hi0bits>
 800d8ba:	f1c0 0020 	rsb	r0, r0, #32
 800d8be:	9b06      	ldr	r3, [sp, #24]
 800d8c0:	4418      	add	r0, r3
 800d8c2:	f010 001f 	ands.w	r0, r0, #31
 800d8c6:	f000 8094 	beq.w	800d9f2 <_dtoa_r+0x922>
 800d8ca:	f1c0 0320 	rsb	r3, r0, #32
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	f340 8085 	ble.w	800d9de <_dtoa_r+0x90e>
 800d8d4:	9b05      	ldr	r3, [sp, #20]
 800d8d6:	f1c0 001c 	rsb	r0, r0, #28
 800d8da:	4403      	add	r3, r0
 800d8dc:	9305      	str	r3, [sp, #20]
 800d8de:	9b06      	ldr	r3, [sp, #24]
 800d8e0:	4403      	add	r3, r0
 800d8e2:	4405      	add	r5, r0
 800d8e4:	9306      	str	r3, [sp, #24]
 800d8e6:	9b05      	ldr	r3, [sp, #20]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	dd05      	ble.n	800d8f8 <_dtoa_r+0x828>
 800d8ec:	4651      	mov	r1, sl
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f001 fbed 	bl	800f0d0 <__lshift>
 800d8f6:	4682      	mov	sl, r0
 800d8f8:	9b06      	ldr	r3, [sp, #24]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	dd05      	ble.n	800d90a <_dtoa_r+0x83a>
 800d8fe:	4631      	mov	r1, r6
 800d900:	461a      	mov	r2, r3
 800d902:	4620      	mov	r0, r4
 800d904:	f001 fbe4 	bl	800f0d0 <__lshift>
 800d908:	4606      	mov	r6, r0
 800d90a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d072      	beq.n	800d9f6 <_dtoa_r+0x926>
 800d910:	4631      	mov	r1, r6
 800d912:	4650      	mov	r0, sl
 800d914:	f001 fc48 	bl	800f1a8 <__mcmp>
 800d918:	2800      	cmp	r0, #0
 800d91a:	da6c      	bge.n	800d9f6 <_dtoa_r+0x926>
 800d91c:	2300      	movs	r3, #0
 800d91e:	4651      	mov	r1, sl
 800d920:	220a      	movs	r2, #10
 800d922:	4620      	mov	r0, r4
 800d924:	f001 f9dc 	bl	800ece0 <__multadd>
 800d928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d92a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d92e:	4682      	mov	sl, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 81b0 	beq.w	800dc96 <_dtoa_r+0xbc6>
 800d936:	2300      	movs	r3, #0
 800d938:	4639      	mov	r1, r7
 800d93a:	220a      	movs	r2, #10
 800d93c:	4620      	mov	r0, r4
 800d93e:	f001 f9cf 	bl	800ece0 <__multadd>
 800d942:	9b01      	ldr	r3, [sp, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	4607      	mov	r7, r0
 800d948:	f300 8096 	bgt.w	800da78 <_dtoa_r+0x9a8>
 800d94c:	9b07      	ldr	r3, [sp, #28]
 800d94e:	2b02      	cmp	r3, #2
 800d950:	dc59      	bgt.n	800da06 <_dtoa_r+0x936>
 800d952:	e091      	b.n	800da78 <_dtoa_r+0x9a8>
 800d954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d95a:	e758      	b.n	800d80e <_dtoa_r+0x73e>
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	1e5e      	subs	r6, r3, #1
 800d960:	9b08      	ldr	r3, [sp, #32]
 800d962:	42b3      	cmp	r3, r6
 800d964:	bfbf      	itttt	lt
 800d966:	9b08      	ldrlt	r3, [sp, #32]
 800d968:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d96a:	9608      	strlt	r6, [sp, #32]
 800d96c:	1af3      	sublt	r3, r6, r3
 800d96e:	bfb4      	ite	lt
 800d970:	18d2      	addlt	r2, r2, r3
 800d972:	1b9e      	subge	r6, r3, r6
 800d974:	9b04      	ldr	r3, [sp, #16]
 800d976:	bfbc      	itt	lt
 800d978:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d97a:	2600      	movlt	r6, #0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	bfb7      	itett	lt
 800d980:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d984:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d988:	1a9d      	sublt	r5, r3, r2
 800d98a:	2300      	movlt	r3, #0
 800d98c:	e741      	b.n	800d812 <_dtoa_r+0x742>
 800d98e:	9e08      	ldr	r6, [sp, #32]
 800d990:	9d05      	ldr	r5, [sp, #20]
 800d992:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d994:	e748      	b.n	800d828 <_dtoa_r+0x758>
 800d996:	9a08      	ldr	r2, [sp, #32]
 800d998:	e770      	b.n	800d87c <_dtoa_r+0x7ac>
 800d99a:	9b07      	ldr	r3, [sp, #28]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	dc19      	bgt.n	800d9d4 <_dtoa_r+0x904>
 800d9a0:	9b02      	ldr	r3, [sp, #8]
 800d9a2:	b9bb      	cbnz	r3, 800d9d4 <_dtoa_r+0x904>
 800d9a4:	9b03      	ldr	r3, [sp, #12]
 800d9a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9aa:	b99b      	cbnz	r3, 800d9d4 <_dtoa_r+0x904>
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9b2:	0d1b      	lsrs	r3, r3, #20
 800d9b4:	051b      	lsls	r3, r3, #20
 800d9b6:	b183      	cbz	r3, 800d9da <_dtoa_r+0x90a>
 800d9b8:	9b05      	ldr	r3, [sp, #20]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	9305      	str	r3, [sp, #20]
 800d9be:	9b06      	ldr	r3, [sp, #24]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	9306      	str	r3, [sp, #24]
 800d9c4:	f04f 0801 	mov.w	r8, #1
 800d9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f47f af6f 	bne.w	800d8ae <_dtoa_r+0x7de>
 800d9d0:	2001      	movs	r0, #1
 800d9d2:	e774      	b.n	800d8be <_dtoa_r+0x7ee>
 800d9d4:	f04f 0800 	mov.w	r8, #0
 800d9d8:	e7f6      	b.n	800d9c8 <_dtoa_r+0x8f8>
 800d9da:	4698      	mov	r8, r3
 800d9dc:	e7f4      	b.n	800d9c8 <_dtoa_r+0x8f8>
 800d9de:	d082      	beq.n	800d8e6 <_dtoa_r+0x816>
 800d9e0:	9a05      	ldr	r2, [sp, #20]
 800d9e2:	331c      	adds	r3, #28
 800d9e4:	441a      	add	r2, r3
 800d9e6:	9205      	str	r2, [sp, #20]
 800d9e8:	9a06      	ldr	r2, [sp, #24]
 800d9ea:	441a      	add	r2, r3
 800d9ec:	441d      	add	r5, r3
 800d9ee:	9206      	str	r2, [sp, #24]
 800d9f0:	e779      	b.n	800d8e6 <_dtoa_r+0x816>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	e7f4      	b.n	800d9e0 <_dtoa_r+0x910>
 800d9f6:	9b04      	ldr	r3, [sp, #16]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	dc37      	bgt.n	800da6c <_dtoa_r+0x99c>
 800d9fc:	9b07      	ldr	r3, [sp, #28]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	dd34      	ble.n	800da6c <_dtoa_r+0x99c>
 800da02:	9b04      	ldr	r3, [sp, #16]
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	9b01      	ldr	r3, [sp, #4]
 800da08:	b963      	cbnz	r3, 800da24 <_dtoa_r+0x954>
 800da0a:	4631      	mov	r1, r6
 800da0c:	2205      	movs	r2, #5
 800da0e:	4620      	mov	r0, r4
 800da10:	f001 f966 	bl	800ece0 <__multadd>
 800da14:	4601      	mov	r1, r0
 800da16:	4606      	mov	r6, r0
 800da18:	4650      	mov	r0, sl
 800da1a:	f001 fbc5 	bl	800f1a8 <__mcmp>
 800da1e:	2800      	cmp	r0, #0
 800da20:	f73f adbb 	bgt.w	800d59a <_dtoa_r+0x4ca>
 800da24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da26:	9d00      	ldr	r5, [sp, #0]
 800da28:	ea6f 0b03 	mvn.w	fp, r3
 800da2c:	f04f 0800 	mov.w	r8, #0
 800da30:	4631      	mov	r1, r6
 800da32:	4620      	mov	r0, r4
 800da34:	f001 f932 	bl	800ec9c <_Bfree>
 800da38:	2f00      	cmp	r7, #0
 800da3a:	f43f aeab 	beq.w	800d794 <_dtoa_r+0x6c4>
 800da3e:	f1b8 0f00 	cmp.w	r8, #0
 800da42:	d005      	beq.n	800da50 <_dtoa_r+0x980>
 800da44:	45b8      	cmp	r8, r7
 800da46:	d003      	beq.n	800da50 <_dtoa_r+0x980>
 800da48:	4641      	mov	r1, r8
 800da4a:	4620      	mov	r0, r4
 800da4c:	f001 f926 	bl	800ec9c <_Bfree>
 800da50:	4639      	mov	r1, r7
 800da52:	4620      	mov	r0, r4
 800da54:	f001 f922 	bl	800ec9c <_Bfree>
 800da58:	e69c      	b.n	800d794 <_dtoa_r+0x6c4>
 800da5a:	2600      	movs	r6, #0
 800da5c:	4637      	mov	r7, r6
 800da5e:	e7e1      	b.n	800da24 <_dtoa_r+0x954>
 800da60:	46bb      	mov	fp, r7
 800da62:	4637      	mov	r7, r6
 800da64:	e599      	b.n	800d59a <_dtoa_r+0x4ca>
 800da66:	bf00      	nop
 800da68:	40240000 	.word	0x40240000
 800da6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f000 80c8 	beq.w	800dc04 <_dtoa_r+0xb34>
 800da74:	9b04      	ldr	r3, [sp, #16]
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	2d00      	cmp	r5, #0
 800da7a:	dd05      	ble.n	800da88 <_dtoa_r+0x9b8>
 800da7c:	4639      	mov	r1, r7
 800da7e:	462a      	mov	r2, r5
 800da80:	4620      	mov	r0, r4
 800da82:	f001 fb25 	bl	800f0d0 <__lshift>
 800da86:	4607      	mov	r7, r0
 800da88:	f1b8 0f00 	cmp.w	r8, #0
 800da8c:	d05b      	beq.n	800db46 <_dtoa_r+0xa76>
 800da8e:	6879      	ldr	r1, [r7, #4]
 800da90:	4620      	mov	r0, r4
 800da92:	f001 f8c3 	bl	800ec1c <_Balloc>
 800da96:	4605      	mov	r5, r0
 800da98:	b928      	cbnz	r0, 800daa6 <_dtoa_r+0x9d6>
 800da9a:	4b83      	ldr	r3, [pc, #524]	; (800dca8 <_dtoa_r+0xbd8>)
 800da9c:	4602      	mov	r2, r0
 800da9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800daa2:	f7ff bb2e 	b.w	800d102 <_dtoa_r+0x32>
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	3202      	adds	r2, #2
 800daaa:	0092      	lsls	r2, r2, #2
 800daac:	f107 010c 	add.w	r1, r7, #12
 800dab0:	300c      	adds	r0, #12
 800dab2:	f7ff fa66 	bl	800cf82 <memcpy>
 800dab6:	2201      	movs	r2, #1
 800dab8:	4629      	mov	r1, r5
 800daba:	4620      	mov	r0, r4
 800dabc:	f001 fb08 	bl	800f0d0 <__lshift>
 800dac0:	9b00      	ldr	r3, [sp, #0]
 800dac2:	3301      	adds	r3, #1
 800dac4:	9304      	str	r3, [sp, #16]
 800dac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daca:	4413      	add	r3, r2
 800dacc:	9308      	str	r3, [sp, #32]
 800dace:	9b02      	ldr	r3, [sp, #8]
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	46b8      	mov	r8, r7
 800dad6:	9306      	str	r3, [sp, #24]
 800dad8:	4607      	mov	r7, r0
 800dada:	9b04      	ldr	r3, [sp, #16]
 800dadc:	4631      	mov	r1, r6
 800dade:	3b01      	subs	r3, #1
 800dae0:	4650      	mov	r0, sl
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	f7ff fa6a 	bl	800cfbc <quorem>
 800dae8:	4641      	mov	r1, r8
 800daea:	9002      	str	r0, [sp, #8]
 800daec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800daf0:	4650      	mov	r0, sl
 800daf2:	f001 fb59 	bl	800f1a8 <__mcmp>
 800daf6:	463a      	mov	r2, r7
 800daf8:	9005      	str	r0, [sp, #20]
 800dafa:	4631      	mov	r1, r6
 800dafc:	4620      	mov	r0, r4
 800dafe:	f001 fb6f 	bl	800f1e0 <__mdiff>
 800db02:	68c2      	ldr	r2, [r0, #12]
 800db04:	4605      	mov	r5, r0
 800db06:	bb02      	cbnz	r2, 800db4a <_dtoa_r+0xa7a>
 800db08:	4601      	mov	r1, r0
 800db0a:	4650      	mov	r0, sl
 800db0c:	f001 fb4c 	bl	800f1a8 <__mcmp>
 800db10:	4602      	mov	r2, r0
 800db12:	4629      	mov	r1, r5
 800db14:	4620      	mov	r0, r4
 800db16:	9209      	str	r2, [sp, #36]	; 0x24
 800db18:	f001 f8c0 	bl	800ec9c <_Bfree>
 800db1c:	9b07      	ldr	r3, [sp, #28]
 800db1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db20:	9d04      	ldr	r5, [sp, #16]
 800db22:	ea43 0102 	orr.w	r1, r3, r2
 800db26:	9b06      	ldr	r3, [sp, #24]
 800db28:	4319      	orrs	r1, r3
 800db2a:	d110      	bne.n	800db4e <_dtoa_r+0xa7e>
 800db2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800db30:	d029      	beq.n	800db86 <_dtoa_r+0xab6>
 800db32:	9b05      	ldr	r3, [sp, #20]
 800db34:	2b00      	cmp	r3, #0
 800db36:	dd02      	ble.n	800db3e <_dtoa_r+0xa6e>
 800db38:	9b02      	ldr	r3, [sp, #8]
 800db3a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800db3e:	9b01      	ldr	r3, [sp, #4]
 800db40:	f883 9000 	strb.w	r9, [r3]
 800db44:	e774      	b.n	800da30 <_dtoa_r+0x960>
 800db46:	4638      	mov	r0, r7
 800db48:	e7ba      	b.n	800dac0 <_dtoa_r+0x9f0>
 800db4a:	2201      	movs	r2, #1
 800db4c:	e7e1      	b.n	800db12 <_dtoa_r+0xa42>
 800db4e:	9b05      	ldr	r3, [sp, #20]
 800db50:	2b00      	cmp	r3, #0
 800db52:	db04      	blt.n	800db5e <_dtoa_r+0xa8e>
 800db54:	9907      	ldr	r1, [sp, #28]
 800db56:	430b      	orrs	r3, r1
 800db58:	9906      	ldr	r1, [sp, #24]
 800db5a:	430b      	orrs	r3, r1
 800db5c:	d120      	bne.n	800dba0 <_dtoa_r+0xad0>
 800db5e:	2a00      	cmp	r2, #0
 800db60:	dded      	ble.n	800db3e <_dtoa_r+0xa6e>
 800db62:	4651      	mov	r1, sl
 800db64:	2201      	movs	r2, #1
 800db66:	4620      	mov	r0, r4
 800db68:	f001 fab2 	bl	800f0d0 <__lshift>
 800db6c:	4631      	mov	r1, r6
 800db6e:	4682      	mov	sl, r0
 800db70:	f001 fb1a 	bl	800f1a8 <__mcmp>
 800db74:	2800      	cmp	r0, #0
 800db76:	dc03      	bgt.n	800db80 <_dtoa_r+0xab0>
 800db78:	d1e1      	bne.n	800db3e <_dtoa_r+0xa6e>
 800db7a:	f019 0f01 	tst.w	r9, #1
 800db7e:	d0de      	beq.n	800db3e <_dtoa_r+0xa6e>
 800db80:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800db84:	d1d8      	bne.n	800db38 <_dtoa_r+0xa68>
 800db86:	9a01      	ldr	r2, [sp, #4]
 800db88:	2339      	movs	r3, #57	; 0x39
 800db8a:	7013      	strb	r3, [r2, #0]
 800db8c:	462b      	mov	r3, r5
 800db8e:	461d      	mov	r5, r3
 800db90:	3b01      	subs	r3, #1
 800db92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800db96:	2a39      	cmp	r2, #57	; 0x39
 800db98:	d06c      	beq.n	800dc74 <_dtoa_r+0xba4>
 800db9a:	3201      	adds	r2, #1
 800db9c:	701a      	strb	r2, [r3, #0]
 800db9e:	e747      	b.n	800da30 <_dtoa_r+0x960>
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	dd07      	ble.n	800dbb4 <_dtoa_r+0xae4>
 800dba4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800dba8:	d0ed      	beq.n	800db86 <_dtoa_r+0xab6>
 800dbaa:	9a01      	ldr	r2, [sp, #4]
 800dbac:	f109 0301 	add.w	r3, r9, #1
 800dbb0:	7013      	strb	r3, [r2, #0]
 800dbb2:	e73d      	b.n	800da30 <_dtoa_r+0x960>
 800dbb4:	9b04      	ldr	r3, [sp, #16]
 800dbb6:	9a08      	ldr	r2, [sp, #32]
 800dbb8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d043      	beq.n	800dc48 <_dtoa_r+0xb78>
 800dbc0:	4651      	mov	r1, sl
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	220a      	movs	r2, #10
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f001 f88a 	bl	800ece0 <__multadd>
 800dbcc:	45b8      	cmp	r8, r7
 800dbce:	4682      	mov	sl, r0
 800dbd0:	f04f 0300 	mov.w	r3, #0
 800dbd4:	f04f 020a 	mov.w	r2, #10
 800dbd8:	4641      	mov	r1, r8
 800dbda:	4620      	mov	r0, r4
 800dbdc:	d107      	bne.n	800dbee <_dtoa_r+0xb1e>
 800dbde:	f001 f87f 	bl	800ece0 <__multadd>
 800dbe2:	4680      	mov	r8, r0
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	9b04      	ldr	r3, [sp, #16]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	9304      	str	r3, [sp, #16]
 800dbec:	e775      	b.n	800dada <_dtoa_r+0xa0a>
 800dbee:	f001 f877 	bl	800ece0 <__multadd>
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	4680      	mov	r8, r0
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	220a      	movs	r2, #10
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f001 f870 	bl	800ece0 <__multadd>
 800dc00:	4607      	mov	r7, r0
 800dc02:	e7f0      	b.n	800dbe6 <_dtoa_r+0xb16>
 800dc04:	9b04      	ldr	r3, [sp, #16]
 800dc06:	9301      	str	r3, [sp, #4]
 800dc08:	9d00      	ldr	r5, [sp, #0]
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	4650      	mov	r0, sl
 800dc0e:	f7ff f9d5 	bl	800cfbc <quorem>
 800dc12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dc16:	9b00      	ldr	r3, [sp, #0]
 800dc18:	f805 9b01 	strb.w	r9, [r5], #1
 800dc1c:	1aea      	subs	r2, r5, r3
 800dc1e:	9b01      	ldr	r3, [sp, #4]
 800dc20:	4293      	cmp	r3, r2
 800dc22:	dd07      	ble.n	800dc34 <_dtoa_r+0xb64>
 800dc24:	4651      	mov	r1, sl
 800dc26:	2300      	movs	r3, #0
 800dc28:	220a      	movs	r2, #10
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f001 f858 	bl	800ece0 <__multadd>
 800dc30:	4682      	mov	sl, r0
 800dc32:	e7ea      	b.n	800dc0a <_dtoa_r+0xb3a>
 800dc34:	9b01      	ldr	r3, [sp, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bfc8      	it	gt
 800dc3a:	461d      	movgt	r5, r3
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	bfd8      	it	le
 800dc40:	2501      	movle	r5, #1
 800dc42:	441d      	add	r5, r3
 800dc44:	f04f 0800 	mov.w	r8, #0
 800dc48:	4651      	mov	r1, sl
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f001 fa3f 	bl	800f0d0 <__lshift>
 800dc52:	4631      	mov	r1, r6
 800dc54:	4682      	mov	sl, r0
 800dc56:	f001 faa7 	bl	800f1a8 <__mcmp>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	dc96      	bgt.n	800db8c <_dtoa_r+0xabc>
 800dc5e:	d102      	bne.n	800dc66 <_dtoa_r+0xb96>
 800dc60:	f019 0f01 	tst.w	r9, #1
 800dc64:	d192      	bne.n	800db8c <_dtoa_r+0xabc>
 800dc66:	462b      	mov	r3, r5
 800dc68:	461d      	mov	r5, r3
 800dc6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc6e:	2a30      	cmp	r2, #48	; 0x30
 800dc70:	d0fa      	beq.n	800dc68 <_dtoa_r+0xb98>
 800dc72:	e6dd      	b.n	800da30 <_dtoa_r+0x960>
 800dc74:	9a00      	ldr	r2, [sp, #0]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d189      	bne.n	800db8e <_dtoa_r+0xabe>
 800dc7a:	f10b 0b01 	add.w	fp, fp, #1
 800dc7e:	2331      	movs	r3, #49	; 0x31
 800dc80:	e796      	b.n	800dbb0 <_dtoa_r+0xae0>
 800dc82:	4b0a      	ldr	r3, [pc, #40]	; (800dcac <_dtoa_r+0xbdc>)
 800dc84:	f7ff ba99 	b.w	800d1ba <_dtoa_r+0xea>
 800dc88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f47f aa6d 	bne.w	800d16a <_dtoa_r+0x9a>
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <_dtoa_r+0xbe0>)
 800dc92:	f7ff ba92 	b.w	800d1ba <_dtoa_r+0xea>
 800dc96:	9b01      	ldr	r3, [sp, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dcb5      	bgt.n	800dc08 <_dtoa_r+0xb38>
 800dc9c:	9b07      	ldr	r3, [sp, #28]
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	f73f aeb1 	bgt.w	800da06 <_dtoa_r+0x936>
 800dca4:	e7b0      	b.n	800dc08 <_dtoa_r+0xb38>
 800dca6:	bf00      	nop
 800dca8:	08011045 	.word	0x08011045
 800dcac:	08010e40 	.word	0x08010e40
 800dcb0:	08010fc9 	.word	0x08010fc9

0800dcb4 <_free_r>:
 800dcb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcb6:	2900      	cmp	r1, #0
 800dcb8:	d044      	beq.n	800dd44 <_free_r+0x90>
 800dcba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcbe:	9001      	str	r0, [sp, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f1a1 0404 	sub.w	r4, r1, #4
 800dcc6:	bfb8      	it	lt
 800dcc8:	18e4      	addlt	r4, r4, r3
 800dcca:	f000 ff9b 	bl	800ec04 <__malloc_lock>
 800dcce:	4a1e      	ldr	r2, [pc, #120]	; (800dd48 <_free_r+0x94>)
 800dcd0:	9801      	ldr	r0, [sp, #4]
 800dcd2:	6813      	ldr	r3, [r2, #0]
 800dcd4:	b933      	cbnz	r3, 800dce4 <_free_r+0x30>
 800dcd6:	6063      	str	r3, [r4, #4]
 800dcd8:	6014      	str	r4, [r2, #0]
 800dcda:	b003      	add	sp, #12
 800dcdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dce0:	f000 bf96 	b.w	800ec10 <__malloc_unlock>
 800dce4:	42a3      	cmp	r3, r4
 800dce6:	d908      	bls.n	800dcfa <_free_r+0x46>
 800dce8:	6825      	ldr	r5, [r4, #0]
 800dcea:	1961      	adds	r1, r4, r5
 800dcec:	428b      	cmp	r3, r1
 800dcee:	bf01      	itttt	eq
 800dcf0:	6819      	ldreq	r1, [r3, #0]
 800dcf2:	685b      	ldreq	r3, [r3, #4]
 800dcf4:	1949      	addeq	r1, r1, r5
 800dcf6:	6021      	streq	r1, [r4, #0]
 800dcf8:	e7ed      	b.n	800dcd6 <_free_r+0x22>
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	b10b      	cbz	r3, 800dd04 <_free_r+0x50>
 800dd00:	42a3      	cmp	r3, r4
 800dd02:	d9fa      	bls.n	800dcfa <_free_r+0x46>
 800dd04:	6811      	ldr	r1, [r2, #0]
 800dd06:	1855      	adds	r5, r2, r1
 800dd08:	42a5      	cmp	r5, r4
 800dd0a:	d10b      	bne.n	800dd24 <_free_r+0x70>
 800dd0c:	6824      	ldr	r4, [r4, #0]
 800dd0e:	4421      	add	r1, r4
 800dd10:	1854      	adds	r4, r2, r1
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	6011      	str	r1, [r2, #0]
 800dd16:	d1e0      	bne.n	800dcda <_free_r+0x26>
 800dd18:	681c      	ldr	r4, [r3, #0]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	6053      	str	r3, [r2, #4]
 800dd1e:	440c      	add	r4, r1
 800dd20:	6014      	str	r4, [r2, #0]
 800dd22:	e7da      	b.n	800dcda <_free_r+0x26>
 800dd24:	d902      	bls.n	800dd2c <_free_r+0x78>
 800dd26:	230c      	movs	r3, #12
 800dd28:	6003      	str	r3, [r0, #0]
 800dd2a:	e7d6      	b.n	800dcda <_free_r+0x26>
 800dd2c:	6825      	ldr	r5, [r4, #0]
 800dd2e:	1961      	adds	r1, r4, r5
 800dd30:	428b      	cmp	r3, r1
 800dd32:	bf04      	itt	eq
 800dd34:	6819      	ldreq	r1, [r3, #0]
 800dd36:	685b      	ldreq	r3, [r3, #4]
 800dd38:	6063      	str	r3, [r4, #4]
 800dd3a:	bf04      	itt	eq
 800dd3c:	1949      	addeq	r1, r1, r5
 800dd3e:	6021      	streq	r1, [r4, #0]
 800dd40:	6054      	str	r4, [r2, #4]
 800dd42:	e7ca      	b.n	800dcda <_free_r+0x26>
 800dd44:	b003      	add	sp, #12
 800dd46:	bd30      	pop	{r4, r5, pc}
 800dd48:	20000c00 	.word	0x20000c00

0800dd4c <rshift>:
 800dd4c:	6903      	ldr	r3, [r0, #16]
 800dd4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd5a:	f100 0414 	add.w	r4, r0, #20
 800dd5e:	dd45      	ble.n	800ddec <rshift+0xa0>
 800dd60:	f011 011f 	ands.w	r1, r1, #31
 800dd64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd6c:	d10c      	bne.n	800dd88 <rshift+0x3c>
 800dd6e:	f100 0710 	add.w	r7, r0, #16
 800dd72:	4629      	mov	r1, r5
 800dd74:	42b1      	cmp	r1, r6
 800dd76:	d334      	bcc.n	800dde2 <rshift+0x96>
 800dd78:	1a9b      	subs	r3, r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	1eea      	subs	r2, r5, #3
 800dd7e:	4296      	cmp	r6, r2
 800dd80:	bf38      	it	cc
 800dd82:	2300      	movcc	r3, #0
 800dd84:	4423      	add	r3, r4
 800dd86:	e015      	b.n	800ddb4 <rshift+0x68>
 800dd88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd8c:	f1c1 0820 	rsb	r8, r1, #32
 800dd90:	40cf      	lsrs	r7, r1
 800dd92:	f105 0e04 	add.w	lr, r5, #4
 800dd96:	46a1      	mov	r9, r4
 800dd98:	4576      	cmp	r6, lr
 800dd9a:	46f4      	mov	ip, lr
 800dd9c:	d815      	bhi.n	800ddca <rshift+0x7e>
 800dd9e:	1a9a      	subs	r2, r3, r2
 800dda0:	0092      	lsls	r2, r2, #2
 800dda2:	3a04      	subs	r2, #4
 800dda4:	3501      	adds	r5, #1
 800dda6:	42ae      	cmp	r6, r5
 800dda8:	bf38      	it	cc
 800ddaa:	2200      	movcc	r2, #0
 800ddac:	18a3      	adds	r3, r4, r2
 800ddae:	50a7      	str	r7, [r4, r2]
 800ddb0:	b107      	cbz	r7, 800ddb4 <rshift+0x68>
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	1b1a      	subs	r2, r3, r4
 800ddb6:	42a3      	cmp	r3, r4
 800ddb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddbc:	bf08      	it	eq
 800ddbe:	2300      	moveq	r3, #0
 800ddc0:	6102      	str	r2, [r0, #16]
 800ddc2:	bf08      	it	eq
 800ddc4:	6143      	streq	r3, [r0, #20]
 800ddc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddca:	f8dc c000 	ldr.w	ip, [ip]
 800ddce:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddd2:	ea4c 0707 	orr.w	r7, ip, r7
 800ddd6:	f849 7b04 	str.w	r7, [r9], #4
 800ddda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddde:	40cf      	lsrs	r7, r1
 800dde0:	e7da      	b.n	800dd98 <rshift+0x4c>
 800dde2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dde6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddea:	e7c3      	b.n	800dd74 <rshift+0x28>
 800ddec:	4623      	mov	r3, r4
 800ddee:	e7e1      	b.n	800ddb4 <rshift+0x68>

0800ddf0 <__hexdig_fun>:
 800ddf0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ddf4:	2b09      	cmp	r3, #9
 800ddf6:	d802      	bhi.n	800ddfe <__hexdig_fun+0xe>
 800ddf8:	3820      	subs	r0, #32
 800ddfa:	b2c0      	uxtb	r0, r0
 800ddfc:	4770      	bx	lr
 800ddfe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de02:	2b05      	cmp	r3, #5
 800de04:	d801      	bhi.n	800de0a <__hexdig_fun+0x1a>
 800de06:	3847      	subs	r0, #71	; 0x47
 800de08:	e7f7      	b.n	800ddfa <__hexdig_fun+0xa>
 800de0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de0e:	2b05      	cmp	r3, #5
 800de10:	d801      	bhi.n	800de16 <__hexdig_fun+0x26>
 800de12:	3827      	subs	r0, #39	; 0x27
 800de14:	e7f1      	b.n	800ddfa <__hexdig_fun+0xa>
 800de16:	2000      	movs	r0, #0
 800de18:	4770      	bx	lr
	...

0800de1c <__gethex>:
 800de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de20:	4617      	mov	r7, r2
 800de22:	680a      	ldr	r2, [r1, #0]
 800de24:	b085      	sub	sp, #20
 800de26:	f102 0b02 	add.w	fp, r2, #2
 800de2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de32:	4681      	mov	r9, r0
 800de34:	468a      	mov	sl, r1
 800de36:	9302      	str	r3, [sp, #8]
 800de38:	32fe      	adds	r2, #254	; 0xfe
 800de3a:	eb02 030b 	add.w	r3, r2, fp
 800de3e:	46d8      	mov	r8, fp
 800de40:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	2830      	cmp	r0, #48	; 0x30
 800de48:	d0f7      	beq.n	800de3a <__gethex+0x1e>
 800de4a:	f7ff ffd1 	bl	800ddf0 <__hexdig_fun>
 800de4e:	4604      	mov	r4, r0
 800de50:	2800      	cmp	r0, #0
 800de52:	d138      	bne.n	800dec6 <__gethex+0xaa>
 800de54:	49a7      	ldr	r1, [pc, #668]	; (800e0f4 <__gethex+0x2d8>)
 800de56:	2201      	movs	r2, #1
 800de58:	4640      	mov	r0, r8
 800de5a:	f7ff f801 	bl	800ce60 <strncmp>
 800de5e:	4606      	mov	r6, r0
 800de60:	2800      	cmp	r0, #0
 800de62:	d169      	bne.n	800df38 <__gethex+0x11c>
 800de64:	f898 0001 	ldrb.w	r0, [r8, #1]
 800de68:	465d      	mov	r5, fp
 800de6a:	f7ff ffc1 	bl	800ddf0 <__hexdig_fun>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d064      	beq.n	800df3c <__gethex+0x120>
 800de72:	465a      	mov	r2, fp
 800de74:	7810      	ldrb	r0, [r2, #0]
 800de76:	2830      	cmp	r0, #48	; 0x30
 800de78:	4690      	mov	r8, r2
 800de7a:	f102 0201 	add.w	r2, r2, #1
 800de7e:	d0f9      	beq.n	800de74 <__gethex+0x58>
 800de80:	f7ff ffb6 	bl	800ddf0 <__hexdig_fun>
 800de84:	2301      	movs	r3, #1
 800de86:	fab0 f480 	clz	r4, r0
 800de8a:	0964      	lsrs	r4, r4, #5
 800de8c:	465e      	mov	r6, fp
 800de8e:	9301      	str	r3, [sp, #4]
 800de90:	4642      	mov	r2, r8
 800de92:	4615      	mov	r5, r2
 800de94:	3201      	adds	r2, #1
 800de96:	7828      	ldrb	r0, [r5, #0]
 800de98:	f7ff ffaa 	bl	800ddf0 <__hexdig_fun>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d1f8      	bne.n	800de92 <__gethex+0x76>
 800dea0:	4994      	ldr	r1, [pc, #592]	; (800e0f4 <__gethex+0x2d8>)
 800dea2:	2201      	movs	r2, #1
 800dea4:	4628      	mov	r0, r5
 800dea6:	f7fe ffdb 	bl	800ce60 <strncmp>
 800deaa:	b978      	cbnz	r0, 800decc <__gethex+0xb0>
 800deac:	b946      	cbnz	r6, 800dec0 <__gethex+0xa4>
 800deae:	1c6e      	adds	r6, r5, #1
 800deb0:	4632      	mov	r2, r6
 800deb2:	4615      	mov	r5, r2
 800deb4:	3201      	adds	r2, #1
 800deb6:	7828      	ldrb	r0, [r5, #0]
 800deb8:	f7ff ff9a 	bl	800ddf0 <__hexdig_fun>
 800debc:	2800      	cmp	r0, #0
 800debe:	d1f8      	bne.n	800deb2 <__gethex+0x96>
 800dec0:	1b73      	subs	r3, r6, r5
 800dec2:	009e      	lsls	r6, r3, #2
 800dec4:	e004      	b.n	800ded0 <__gethex+0xb4>
 800dec6:	2400      	movs	r4, #0
 800dec8:	4626      	mov	r6, r4
 800deca:	e7e1      	b.n	800de90 <__gethex+0x74>
 800decc:	2e00      	cmp	r6, #0
 800dece:	d1f7      	bne.n	800dec0 <__gethex+0xa4>
 800ded0:	782b      	ldrb	r3, [r5, #0]
 800ded2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ded6:	2b50      	cmp	r3, #80	; 0x50
 800ded8:	d13d      	bne.n	800df56 <__gethex+0x13a>
 800deda:	786b      	ldrb	r3, [r5, #1]
 800dedc:	2b2b      	cmp	r3, #43	; 0x2b
 800dede:	d02f      	beq.n	800df40 <__gethex+0x124>
 800dee0:	2b2d      	cmp	r3, #45	; 0x2d
 800dee2:	d031      	beq.n	800df48 <__gethex+0x12c>
 800dee4:	1c69      	adds	r1, r5, #1
 800dee6:	f04f 0b00 	mov.w	fp, #0
 800deea:	7808      	ldrb	r0, [r1, #0]
 800deec:	f7ff ff80 	bl	800ddf0 <__hexdig_fun>
 800def0:	1e42      	subs	r2, r0, #1
 800def2:	b2d2      	uxtb	r2, r2
 800def4:	2a18      	cmp	r2, #24
 800def6:	d82e      	bhi.n	800df56 <__gethex+0x13a>
 800def8:	f1a0 0210 	sub.w	r2, r0, #16
 800defc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df00:	f7ff ff76 	bl	800ddf0 <__hexdig_fun>
 800df04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800df08:	fa5f fc8c 	uxtb.w	ip, ip
 800df0c:	f1bc 0f18 	cmp.w	ip, #24
 800df10:	d91d      	bls.n	800df4e <__gethex+0x132>
 800df12:	f1bb 0f00 	cmp.w	fp, #0
 800df16:	d000      	beq.n	800df1a <__gethex+0xfe>
 800df18:	4252      	negs	r2, r2
 800df1a:	4416      	add	r6, r2
 800df1c:	f8ca 1000 	str.w	r1, [sl]
 800df20:	b1dc      	cbz	r4, 800df5a <__gethex+0x13e>
 800df22:	9b01      	ldr	r3, [sp, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	bf14      	ite	ne
 800df28:	f04f 0800 	movne.w	r8, #0
 800df2c:	f04f 0806 	moveq.w	r8, #6
 800df30:	4640      	mov	r0, r8
 800df32:	b005      	add	sp, #20
 800df34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df38:	4645      	mov	r5, r8
 800df3a:	4626      	mov	r6, r4
 800df3c:	2401      	movs	r4, #1
 800df3e:	e7c7      	b.n	800ded0 <__gethex+0xb4>
 800df40:	f04f 0b00 	mov.w	fp, #0
 800df44:	1ca9      	adds	r1, r5, #2
 800df46:	e7d0      	b.n	800deea <__gethex+0xce>
 800df48:	f04f 0b01 	mov.w	fp, #1
 800df4c:	e7fa      	b.n	800df44 <__gethex+0x128>
 800df4e:	230a      	movs	r3, #10
 800df50:	fb03 0002 	mla	r0, r3, r2, r0
 800df54:	e7d0      	b.n	800def8 <__gethex+0xdc>
 800df56:	4629      	mov	r1, r5
 800df58:	e7e0      	b.n	800df1c <__gethex+0x100>
 800df5a:	eba5 0308 	sub.w	r3, r5, r8
 800df5e:	3b01      	subs	r3, #1
 800df60:	4621      	mov	r1, r4
 800df62:	2b07      	cmp	r3, #7
 800df64:	dc0a      	bgt.n	800df7c <__gethex+0x160>
 800df66:	4648      	mov	r0, r9
 800df68:	f000 fe58 	bl	800ec1c <_Balloc>
 800df6c:	4604      	mov	r4, r0
 800df6e:	b940      	cbnz	r0, 800df82 <__gethex+0x166>
 800df70:	4b61      	ldr	r3, [pc, #388]	; (800e0f8 <__gethex+0x2dc>)
 800df72:	4602      	mov	r2, r0
 800df74:	21e4      	movs	r1, #228	; 0xe4
 800df76:	4861      	ldr	r0, [pc, #388]	; (800e0fc <__gethex+0x2e0>)
 800df78:	f001 fcb2 	bl	800f8e0 <__assert_func>
 800df7c:	3101      	adds	r1, #1
 800df7e:	105b      	asrs	r3, r3, #1
 800df80:	e7ef      	b.n	800df62 <__gethex+0x146>
 800df82:	f100 0a14 	add.w	sl, r0, #20
 800df86:	2300      	movs	r3, #0
 800df88:	495a      	ldr	r1, [pc, #360]	; (800e0f4 <__gethex+0x2d8>)
 800df8a:	f8cd a004 	str.w	sl, [sp, #4]
 800df8e:	469b      	mov	fp, r3
 800df90:	45a8      	cmp	r8, r5
 800df92:	d342      	bcc.n	800e01a <__gethex+0x1fe>
 800df94:	9801      	ldr	r0, [sp, #4]
 800df96:	f840 bb04 	str.w	fp, [r0], #4
 800df9a:	eba0 000a 	sub.w	r0, r0, sl
 800df9e:	1080      	asrs	r0, r0, #2
 800dfa0:	6120      	str	r0, [r4, #16]
 800dfa2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800dfa6:	4658      	mov	r0, fp
 800dfa8:	f000 ff2a 	bl	800ee00 <__hi0bits>
 800dfac:	683d      	ldr	r5, [r7, #0]
 800dfae:	eba8 0000 	sub.w	r0, r8, r0
 800dfb2:	42a8      	cmp	r0, r5
 800dfb4:	dd59      	ble.n	800e06a <__gethex+0x24e>
 800dfb6:	eba0 0805 	sub.w	r8, r0, r5
 800dfba:	4641      	mov	r1, r8
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f001 fab9 	bl	800f534 <__any_on>
 800dfc2:	4683      	mov	fp, r0
 800dfc4:	b1b8      	cbz	r0, 800dff6 <__gethex+0x1da>
 800dfc6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800dfca:	1159      	asrs	r1, r3, #5
 800dfcc:	f003 021f 	and.w	r2, r3, #31
 800dfd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dfd4:	f04f 0b01 	mov.w	fp, #1
 800dfd8:	fa0b f202 	lsl.w	r2, fp, r2
 800dfdc:	420a      	tst	r2, r1
 800dfde:	d00a      	beq.n	800dff6 <__gethex+0x1da>
 800dfe0:	455b      	cmp	r3, fp
 800dfe2:	dd06      	ble.n	800dff2 <__gethex+0x1d6>
 800dfe4:	f1a8 0102 	sub.w	r1, r8, #2
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f001 faa3 	bl	800f534 <__any_on>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d138      	bne.n	800e064 <__gethex+0x248>
 800dff2:	f04f 0b02 	mov.w	fp, #2
 800dff6:	4641      	mov	r1, r8
 800dff8:	4620      	mov	r0, r4
 800dffa:	f7ff fea7 	bl	800dd4c <rshift>
 800dffe:	4446      	add	r6, r8
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	42b3      	cmp	r3, r6
 800e004:	da41      	bge.n	800e08a <__gethex+0x26e>
 800e006:	4621      	mov	r1, r4
 800e008:	4648      	mov	r0, r9
 800e00a:	f000 fe47 	bl	800ec9c <_Bfree>
 800e00e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e010:	2300      	movs	r3, #0
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e018:	e78a      	b.n	800df30 <__gethex+0x114>
 800e01a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e01e:	2a2e      	cmp	r2, #46	; 0x2e
 800e020:	d014      	beq.n	800e04c <__gethex+0x230>
 800e022:	2b20      	cmp	r3, #32
 800e024:	d106      	bne.n	800e034 <__gethex+0x218>
 800e026:	9b01      	ldr	r3, [sp, #4]
 800e028:	f843 bb04 	str.w	fp, [r3], #4
 800e02c:	f04f 0b00 	mov.w	fp, #0
 800e030:	9301      	str	r3, [sp, #4]
 800e032:	465b      	mov	r3, fp
 800e034:	7828      	ldrb	r0, [r5, #0]
 800e036:	9303      	str	r3, [sp, #12]
 800e038:	f7ff feda 	bl	800ddf0 <__hexdig_fun>
 800e03c:	9b03      	ldr	r3, [sp, #12]
 800e03e:	f000 000f 	and.w	r0, r0, #15
 800e042:	4098      	lsls	r0, r3
 800e044:	ea4b 0b00 	orr.w	fp, fp, r0
 800e048:	3304      	adds	r3, #4
 800e04a:	e7a1      	b.n	800df90 <__gethex+0x174>
 800e04c:	45a8      	cmp	r8, r5
 800e04e:	d8e8      	bhi.n	800e022 <__gethex+0x206>
 800e050:	2201      	movs	r2, #1
 800e052:	4628      	mov	r0, r5
 800e054:	9303      	str	r3, [sp, #12]
 800e056:	f7fe ff03 	bl	800ce60 <strncmp>
 800e05a:	4926      	ldr	r1, [pc, #152]	; (800e0f4 <__gethex+0x2d8>)
 800e05c:	9b03      	ldr	r3, [sp, #12]
 800e05e:	2800      	cmp	r0, #0
 800e060:	d1df      	bne.n	800e022 <__gethex+0x206>
 800e062:	e795      	b.n	800df90 <__gethex+0x174>
 800e064:	f04f 0b03 	mov.w	fp, #3
 800e068:	e7c5      	b.n	800dff6 <__gethex+0x1da>
 800e06a:	da0b      	bge.n	800e084 <__gethex+0x268>
 800e06c:	eba5 0800 	sub.w	r8, r5, r0
 800e070:	4621      	mov	r1, r4
 800e072:	4642      	mov	r2, r8
 800e074:	4648      	mov	r0, r9
 800e076:	f001 f82b 	bl	800f0d0 <__lshift>
 800e07a:	eba6 0608 	sub.w	r6, r6, r8
 800e07e:	4604      	mov	r4, r0
 800e080:	f100 0a14 	add.w	sl, r0, #20
 800e084:	f04f 0b00 	mov.w	fp, #0
 800e088:	e7ba      	b.n	800e000 <__gethex+0x1e4>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	42b3      	cmp	r3, r6
 800e08e:	dd73      	ble.n	800e178 <__gethex+0x35c>
 800e090:	1b9e      	subs	r6, r3, r6
 800e092:	42b5      	cmp	r5, r6
 800e094:	dc34      	bgt.n	800e100 <__gethex+0x2e4>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d023      	beq.n	800e0e4 <__gethex+0x2c8>
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d025      	beq.n	800e0ec <__gethex+0x2d0>
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d115      	bne.n	800e0d0 <__gethex+0x2b4>
 800e0a4:	42b5      	cmp	r5, r6
 800e0a6:	d113      	bne.n	800e0d0 <__gethex+0x2b4>
 800e0a8:	2d01      	cmp	r5, #1
 800e0aa:	d10b      	bne.n	800e0c4 <__gethex+0x2a8>
 800e0ac:	9a02      	ldr	r2, [sp, #8]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	6123      	str	r3, [r4, #16]
 800e0b6:	f8ca 3000 	str.w	r3, [sl]
 800e0ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0bc:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e0c0:	601c      	str	r4, [r3, #0]
 800e0c2:	e735      	b.n	800df30 <__gethex+0x114>
 800e0c4:	1e69      	subs	r1, r5, #1
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f001 fa34 	bl	800f534 <__any_on>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d1ed      	bne.n	800e0ac <__gethex+0x290>
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	4648      	mov	r0, r9
 800e0d4:	f000 fde2 	bl	800ec9c <_Bfree>
 800e0d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0da:	2300      	movs	r3, #0
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e0e2:	e725      	b.n	800df30 <__gethex+0x114>
 800e0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d1f2      	bne.n	800e0d0 <__gethex+0x2b4>
 800e0ea:	e7df      	b.n	800e0ac <__gethex+0x290>
 800e0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1dc      	bne.n	800e0ac <__gethex+0x290>
 800e0f2:	e7ed      	b.n	800e0d0 <__gethex+0x2b4>
 800e0f4:	08010e69 	.word	0x08010e69
 800e0f8:	08011045 	.word	0x08011045
 800e0fc:	08011056 	.word	0x08011056
 800e100:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800e104:	f1bb 0f00 	cmp.w	fp, #0
 800e108:	d133      	bne.n	800e172 <__gethex+0x356>
 800e10a:	f1b8 0f00 	cmp.w	r8, #0
 800e10e:	d004      	beq.n	800e11a <__gethex+0x2fe>
 800e110:	4641      	mov	r1, r8
 800e112:	4620      	mov	r0, r4
 800e114:	f001 fa0e 	bl	800f534 <__any_on>
 800e118:	4683      	mov	fp, r0
 800e11a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e11e:	2301      	movs	r3, #1
 800e120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e124:	f008 081f 	and.w	r8, r8, #31
 800e128:	fa03 f308 	lsl.w	r3, r3, r8
 800e12c:	4213      	tst	r3, r2
 800e12e:	4631      	mov	r1, r6
 800e130:	4620      	mov	r0, r4
 800e132:	bf18      	it	ne
 800e134:	f04b 0b02 	orrne.w	fp, fp, #2
 800e138:	1bad      	subs	r5, r5, r6
 800e13a:	f7ff fe07 	bl	800dd4c <rshift>
 800e13e:	687e      	ldr	r6, [r7, #4]
 800e140:	f04f 0802 	mov.w	r8, #2
 800e144:	f1bb 0f00 	cmp.w	fp, #0
 800e148:	d04a      	beq.n	800e1e0 <__gethex+0x3c4>
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d016      	beq.n	800e17e <__gethex+0x362>
 800e150:	2b03      	cmp	r3, #3
 800e152:	d018      	beq.n	800e186 <__gethex+0x36a>
 800e154:	2b01      	cmp	r3, #1
 800e156:	d109      	bne.n	800e16c <__gethex+0x350>
 800e158:	f01b 0f02 	tst.w	fp, #2
 800e15c:	d006      	beq.n	800e16c <__gethex+0x350>
 800e15e:	f8da 3000 	ldr.w	r3, [sl]
 800e162:	ea4b 0b03 	orr.w	fp, fp, r3
 800e166:	f01b 0f01 	tst.w	fp, #1
 800e16a:	d10f      	bne.n	800e18c <__gethex+0x370>
 800e16c:	f048 0810 	orr.w	r8, r8, #16
 800e170:	e036      	b.n	800e1e0 <__gethex+0x3c4>
 800e172:	f04f 0b01 	mov.w	fp, #1
 800e176:	e7d0      	b.n	800e11a <__gethex+0x2fe>
 800e178:	f04f 0801 	mov.w	r8, #1
 800e17c:	e7e2      	b.n	800e144 <__gethex+0x328>
 800e17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e180:	f1c3 0301 	rsb	r3, r3, #1
 800e184:	930f      	str	r3, [sp, #60]	; 0x3c
 800e186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d0ef      	beq.n	800e16c <__gethex+0x350>
 800e18c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e190:	f104 0214 	add.w	r2, r4, #20
 800e194:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e198:	9301      	str	r3, [sp, #4]
 800e19a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e19e:	2300      	movs	r3, #0
 800e1a0:	4694      	mov	ip, r2
 800e1a2:	f852 1b04 	ldr.w	r1, [r2], #4
 800e1a6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800e1aa:	d01e      	beq.n	800e1ea <__gethex+0x3ce>
 800e1ac:	3101      	adds	r1, #1
 800e1ae:	f8cc 1000 	str.w	r1, [ip]
 800e1b2:	f1b8 0f02 	cmp.w	r8, #2
 800e1b6:	f104 0214 	add.w	r2, r4, #20
 800e1ba:	d13d      	bne.n	800e238 <__gethex+0x41c>
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	42ab      	cmp	r3, r5
 800e1c2:	d10b      	bne.n	800e1dc <__gethex+0x3c0>
 800e1c4:	1169      	asrs	r1, r5, #5
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	f005 051f 	and.w	r5, r5, #31
 800e1cc:	fa03 f505 	lsl.w	r5, r3, r5
 800e1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1d4:	421d      	tst	r5, r3
 800e1d6:	bf18      	it	ne
 800e1d8:	f04f 0801 	movne.w	r8, #1
 800e1dc:	f048 0820 	orr.w	r8, r8, #32
 800e1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1e2:	601c      	str	r4, [r3, #0]
 800e1e4:	9b02      	ldr	r3, [sp, #8]
 800e1e6:	601e      	str	r6, [r3, #0]
 800e1e8:	e6a2      	b.n	800df30 <__gethex+0x114>
 800e1ea:	4290      	cmp	r0, r2
 800e1ec:	f842 3c04 	str.w	r3, [r2, #-4]
 800e1f0:	d8d6      	bhi.n	800e1a0 <__gethex+0x384>
 800e1f2:	68a2      	ldr	r2, [r4, #8]
 800e1f4:	4593      	cmp	fp, r2
 800e1f6:	db17      	blt.n	800e228 <__gethex+0x40c>
 800e1f8:	6861      	ldr	r1, [r4, #4]
 800e1fa:	4648      	mov	r0, r9
 800e1fc:	3101      	adds	r1, #1
 800e1fe:	f000 fd0d 	bl	800ec1c <_Balloc>
 800e202:	4682      	mov	sl, r0
 800e204:	b918      	cbnz	r0, 800e20e <__gethex+0x3f2>
 800e206:	4b1b      	ldr	r3, [pc, #108]	; (800e274 <__gethex+0x458>)
 800e208:	4602      	mov	r2, r0
 800e20a:	2184      	movs	r1, #132	; 0x84
 800e20c:	e6b3      	b.n	800df76 <__gethex+0x15a>
 800e20e:	6922      	ldr	r2, [r4, #16]
 800e210:	3202      	adds	r2, #2
 800e212:	f104 010c 	add.w	r1, r4, #12
 800e216:	0092      	lsls	r2, r2, #2
 800e218:	300c      	adds	r0, #12
 800e21a:	f7fe feb2 	bl	800cf82 <memcpy>
 800e21e:	4621      	mov	r1, r4
 800e220:	4648      	mov	r0, r9
 800e222:	f000 fd3b 	bl	800ec9c <_Bfree>
 800e226:	4654      	mov	r4, sl
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	1c51      	adds	r1, r2, #1
 800e22c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e230:	6121      	str	r1, [r4, #16]
 800e232:	2101      	movs	r1, #1
 800e234:	6151      	str	r1, [r2, #20]
 800e236:	e7bc      	b.n	800e1b2 <__gethex+0x396>
 800e238:	6921      	ldr	r1, [r4, #16]
 800e23a:	4559      	cmp	r1, fp
 800e23c:	dd0b      	ble.n	800e256 <__gethex+0x43a>
 800e23e:	2101      	movs	r1, #1
 800e240:	4620      	mov	r0, r4
 800e242:	f7ff fd83 	bl	800dd4c <rshift>
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	3601      	adds	r6, #1
 800e24a:	42b3      	cmp	r3, r6
 800e24c:	f6ff aedb 	blt.w	800e006 <__gethex+0x1ea>
 800e250:	f04f 0801 	mov.w	r8, #1
 800e254:	e7c2      	b.n	800e1dc <__gethex+0x3c0>
 800e256:	f015 051f 	ands.w	r5, r5, #31
 800e25a:	d0f9      	beq.n	800e250 <__gethex+0x434>
 800e25c:	9b01      	ldr	r3, [sp, #4]
 800e25e:	441a      	add	r2, r3
 800e260:	f1c5 0520 	rsb	r5, r5, #32
 800e264:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e268:	f000 fdca 	bl	800ee00 <__hi0bits>
 800e26c:	42a8      	cmp	r0, r5
 800e26e:	dbe6      	blt.n	800e23e <__gethex+0x422>
 800e270:	e7ee      	b.n	800e250 <__gethex+0x434>
 800e272:	bf00      	nop
 800e274:	08011045 	.word	0x08011045

0800e278 <L_shift>:
 800e278:	f1c2 0208 	rsb	r2, r2, #8
 800e27c:	0092      	lsls	r2, r2, #2
 800e27e:	b570      	push	{r4, r5, r6, lr}
 800e280:	f1c2 0620 	rsb	r6, r2, #32
 800e284:	6843      	ldr	r3, [r0, #4]
 800e286:	6804      	ldr	r4, [r0, #0]
 800e288:	fa03 f506 	lsl.w	r5, r3, r6
 800e28c:	432c      	orrs	r4, r5
 800e28e:	40d3      	lsrs	r3, r2
 800e290:	6004      	str	r4, [r0, #0]
 800e292:	f840 3f04 	str.w	r3, [r0, #4]!
 800e296:	4288      	cmp	r0, r1
 800e298:	d3f4      	bcc.n	800e284 <L_shift+0xc>
 800e29a:	bd70      	pop	{r4, r5, r6, pc}

0800e29c <__match>:
 800e29c:	b530      	push	{r4, r5, lr}
 800e29e:	6803      	ldr	r3, [r0, #0]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2a6:	b914      	cbnz	r4, 800e2ae <__match+0x12>
 800e2a8:	6003      	str	r3, [r0, #0]
 800e2aa:	2001      	movs	r0, #1
 800e2ac:	bd30      	pop	{r4, r5, pc}
 800e2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2b6:	2d19      	cmp	r5, #25
 800e2b8:	bf98      	it	ls
 800e2ba:	3220      	addls	r2, #32
 800e2bc:	42a2      	cmp	r2, r4
 800e2be:	d0f0      	beq.n	800e2a2 <__match+0x6>
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	e7f3      	b.n	800e2ac <__match+0x10>

0800e2c4 <__hexnan>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	680b      	ldr	r3, [r1, #0]
 800e2ca:	6801      	ldr	r1, [r0, #0]
 800e2cc:	115e      	asrs	r6, r3, #5
 800e2ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2d2:	f013 031f 	ands.w	r3, r3, #31
 800e2d6:	b087      	sub	sp, #28
 800e2d8:	bf18      	it	ne
 800e2da:	3604      	addne	r6, #4
 800e2dc:	2500      	movs	r5, #0
 800e2de:	1f37      	subs	r7, r6, #4
 800e2e0:	4682      	mov	sl, r0
 800e2e2:	4690      	mov	r8, r2
 800e2e4:	9301      	str	r3, [sp, #4]
 800e2e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2ea:	46b9      	mov	r9, r7
 800e2ec:	463c      	mov	r4, r7
 800e2ee:	9502      	str	r5, [sp, #8]
 800e2f0:	46ab      	mov	fp, r5
 800e2f2:	784a      	ldrb	r2, [r1, #1]
 800e2f4:	1c4b      	adds	r3, r1, #1
 800e2f6:	9303      	str	r3, [sp, #12]
 800e2f8:	b342      	cbz	r2, 800e34c <__hexnan+0x88>
 800e2fa:	4610      	mov	r0, r2
 800e2fc:	9105      	str	r1, [sp, #20]
 800e2fe:	9204      	str	r2, [sp, #16]
 800e300:	f7ff fd76 	bl	800ddf0 <__hexdig_fun>
 800e304:	2800      	cmp	r0, #0
 800e306:	d14f      	bne.n	800e3a8 <__hexnan+0xe4>
 800e308:	9a04      	ldr	r2, [sp, #16]
 800e30a:	9905      	ldr	r1, [sp, #20]
 800e30c:	2a20      	cmp	r2, #32
 800e30e:	d818      	bhi.n	800e342 <__hexnan+0x7e>
 800e310:	9b02      	ldr	r3, [sp, #8]
 800e312:	459b      	cmp	fp, r3
 800e314:	dd13      	ble.n	800e33e <__hexnan+0x7a>
 800e316:	454c      	cmp	r4, r9
 800e318:	d206      	bcs.n	800e328 <__hexnan+0x64>
 800e31a:	2d07      	cmp	r5, #7
 800e31c:	dc04      	bgt.n	800e328 <__hexnan+0x64>
 800e31e:	462a      	mov	r2, r5
 800e320:	4649      	mov	r1, r9
 800e322:	4620      	mov	r0, r4
 800e324:	f7ff ffa8 	bl	800e278 <L_shift>
 800e328:	4544      	cmp	r4, r8
 800e32a:	d950      	bls.n	800e3ce <__hexnan+0x10a>
 800e32c:	2300      	movs	r3, #0
 800e32e:	f1a4 0904 	sub.w	r9, r4, #4
 800e332:	f844 3c04 	str.w	r3, [r4, #-4]
 800e336:	f8cd b008 	str.w	fp, [sp, #8]
 800e33a:	464c      	mov	r4, r9
 800e33c:	461d      	mov	r5, r3
 800e33e:	9903      	ldr	r1, [sp, #12]
 800e340:	e7d7      	b.n	800e2f2 <__hexnan+0x2e>
 800e342:	2a29      	cmp	r2, #41	; 0x29
 800e344:	d155      	bne.n	800e3f2 <__hexnan+0x12e>
 800e346:	3102      	adds	r1, #2
 800e348:	f8ca 1000 	str.w	r1, [sl]
 800e34c:	f1bb 0f00 	cmp.w	fp, #0
 800e350:	d04f      	beq.n	800e3f2 <__hexnan+0x12e>
 800e352:	454c      	cmp	r4, r9
 800e354:	d206      	bcs.n	800e364 <__hexnan+0xa0>
 800e356:	2d07      	cmp	r5, #7
 800e358:	dc04      	bgt.n	800e364 <__hexnan+0xa0>
 800e35a:	462a      	mov	r2, r5
 800e35c:	4649      	mov	r1, r9
 800e35e:	4620      	mov	r0, r4
 800e360:	f7ff ff8a 	bl	800e278 <L_shift>
 800e364:	4544      	cmp	r4, r8
 800e366:	d934      	bls.n	800e3d2 <__hexnan+0x10e>
 800e368:	f1a8 0204 	sub.w	r2, r8, #4
 800e36c:	4623      	mov	r3, r4
 800e36e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e372:	f842 1f04 	str.w	r1, [r2, #4]!
 800e376:	429f      	cmp	r7, r3
 800e378:	d2f9      	bcs.n	800e36e <__hexnan+0xaa>
 800e37a:	1b3b      	subs	r3, r7, r4
 800e37c:	f023 0303 	bic.w	r3, r3, #3
 800e380:	3304      	adds	r3, #4
 800e382:	3e03      	subs	r6, #3
 800e384:	3401      	adds	r4, #1
 800e386:	42a6      	cmp	r6, r4
 800e388:	bf38      	it	cc
 800e38a:	2304      	movcc	r3, #4
 800e38c:	4443      	add	r3, r8
 800e38e:	2200      	movs	r2, #0
 800e390:	f843 2b04 	str.w	r2, [r3], #4
 800e394:	429f      	cmp	r7, r3
 800e396:	d2fb      	bcs.n	800e390 <__hexnan+0xcc>
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	b91b      	cbnz	r3, 800e3a4 <__hexnan+0xe0>
 800e39c:	4547      	cmp	r7, r8
 800e39e:	d126      	bne.n	800e3ee <__hexnan+0x12a>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	603b      	str	r3, [r7, #0]
 800e3a4:	2005      	movs	r0, #5
 800e3a6:	e025      	b.n	800e3f4 <__hexnan+0x130>
 800e3a8:	3501      	adds	r5, #1
 800e3aa:	2d08      	cmp	r5, #8
 800e3ac:	f10b 0b01 	add.w	fp, fp, #1
 800e3b0:	dd06      	ble.n	800e3c0 <__hexnan+0xfc>
 800e3b2:	4544      	cmp	r4, r8
 800e3b4:	d9c3      	bls.n	800e33e <__hexnan+0x7a>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3bc:	2501      	movs	r5, #1
 800e3be:	3c04      	subs	r4, #4
 800e3c0:	6822      	ldr	r2, [r4, #0]
 800e3c2:	f000 000f 	and.w	r0, r0, #15
 800e3c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3ca:	6020      	str	r0, [r4, #0]
 800e3cc:	e7b7      	b.n	800e33e <__hexnan+0x7a>
 800e3ce:	2508      	movs	r5, #8
 800e3d0:	e7b5      	b.n	800e33e <__hexnan+0x7a>
 800e3d2:	9b01      	ldr	r3, [sp, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d0df      	beq.n	800e398 <__hexnan+0xd4>
 800e3d8:	f1c3 0320 	rsb	r3, r3, #32
 800e3dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3e0:	40da      	lsrs	r2, r3
 800e3e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3ec:	e7d4      	b.n	800e398 <__hexnan+0xd4>
 800e3ee:	3f04      	subs	r7, #4
 800e3f0:	e7d2      	b.n	800e398 <__hexnan+0xd4>
 800e3f2:	2004      	movs	r0, #4
 800e3f4:	b007      	add	sp, #28
 800e3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3fa <__ssputs_r>:
 800e3fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3fe:	688e      	ldr	r6, [r1, #8]
 800e400:	461f      	mov	r7, r3
 800e402:	42be      	cmp	r6, r7
 800e404:	680b      	ldr	r3, [r1, #0]
 800e406:	4682      	mov	sl, r0
 800e408:	460c      	mov	r4, r1
 800e40a:	4690      	mov	r8, r2
 800e40c:	d82c      	bhi.n	800e468 <__ssputs_r+0x6e>
 800e40e:	898a      	ldrh	r2, [r1, #12]
 800e410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e414:	d026      	beq.n	800e464 <__ssputs_r+0x6a>
 800e416:	6965      	ldr	r5, [r4, #20]
 800e418:	6909      	ldr	r1, [r1, #16]
 800e41a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e41e:	eba3 0901 	sub.w	r9, r3, r1
 800e422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e426:	1c7b      	adds	r3, r7, #1
 800e428:	444b      	add	r3, r9
 800e42a:	106d      	asrs	r5, r5, #1
 800e42c:	429d      	cmp	r5, r3
 800e42e:	bf38      	it	cc
 800e430:	461d      	movcc	r5, r3
 800e432:	0553      	lsls	r3, r2, #21
 800e434:	d527      	bpl.n	800e486 <__ssputs_r+0x8c>
 800e436:	4629      	mov	r1, r5
 800e438:	f000 faa4 	bl	800e984 <_malloc_r>
 800e43c:	4606      	mov	r6, r0
 800e43e:	b360      	cbz	r0, 800e49a <__ssputs_r+0xa0>
 800e440:	6921      	ldr	r1, [r4, #16]
 800e442:	464a      	mov	r2, r9
 800e444:	f7fe fd9d 	bl	800cf82 <memcpy>
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e452:	81a3      	strh	r3, [r4, #12]
 800e454:	6126      	str	r6, [r4, #16]
 800e456:	6165      	str	r5, [r4, #20]
 800e458:	444e      	add	r6, r9
 800e45a:	eba5 0509 	sub.w	r5, r5, r9
 800e45e:	6026      	str	r6, [r4, #0]
 800e460:	60a5      	str	r5, [r4, #8]
 800e462:	463e      	mov	r6, r7
 800e464:	42be      	cmp	r6, r7
 800e466:	d900      	bls.n	800e46a <__ssputs_r+0x70>
 800e468:	463e      	mov	r6, r7
 800e46a:	6820      	ldr	r0, [r4, #0]
 800e46c:	4632      	mov	r2, r6
 800e46e:	4641      	mov	r1, r8
 800e470:	f001 f9e9 	bl	800f846 <memmove>
 800e474:	68a3      	ldr	r3, [r4, #8]
 800e476:	1b9b      	subs	r3, r3, r6
 800e478:	60a3      	str	r3, [r4, #8]
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	4433      	add	r3, r6
 800e47e:	6023      	str	r3, [r4, #0]
 800e480:	2000      	movs	r0, #0
 800e482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e486:	462a      	mov	r2, r5
 800e488:	f001 f875 	bl	800f576 <_realloc_r>
 800e48c:	4606      	mov	r6, r0
 800e48e:	2800      	cmp	r0, #0
 800e490:	d1e0      	bne.n	800e454 <__ssputs_r+0x5a>
 800e492:	6921      	ldr	r1, [r4, #16]
 800e494:	4650      	mov	r0, sl
 800e496:	f7ff fc0d 	bl	800dcb4 <_free_r>
 800e49a:	230c      	movs	r3, #12
 800e49c:	f8ca 3000 	str.w	r3, [sl]
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4a6:	81a3      	strh	r3, [r4, #12]
 800e4a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4ac:	e7e9      	b.n	800e482 <__ssputs_r+0x88>
	...

0800e4b0 <_svfiprintf_r>:
 800e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	4698      	mov	r8, r3
 800e4b6:	898b      	ldrh	r3, [r1, #12]
 800e4b8:	061b      	lsls	r3, r3, #24
 800e4ba:	b09d      	sub	sp, #116	; 0x74
 800e4bc:	4607      	mov	r7, r0
 800e4be:	460d      	mov	r5, r1
 800e4c0:	4614      	mov	r4, r2
 800e4c2:	d50e      	bpl.n	800e4e2 <_svfiprintf_r+0x32>
 800e4c4:	690b      	ldr	r3, [r1, #16]
 800e4c6:	b963      	cbnz	r3, 800e4e2 <_svfiprintf_r+0x32>
 800e4c8:	2140      	movs	r1, #64	; 0x40
 800e4ca:	f000 fa5b 	bl	800e984 <_malloc_r>
 800e4ce:	6028      	str	r0, [r5, #0]
 800e4d0:	6128      	str	r0, [r5, #16]
 800e4d2:	b920      	cbnz	r0, 800e4de <_svfiprintf_r+0x2e>
 800e4d4:	230c      	movs	r3, #12
 800e4d6:	603b      	str	r3, [r7, #0]
 800e4d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4dc:	e0d0      	b.n	800e680 <_svfiprintf_r+0x1d0>
 800e4de:	2340      	movs	r3, #64	; 0x40
 800e4e0:	616b      	str	r3, [r5, #20]
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4e6:	2320      	movs	r3, #32
 800e4e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4f0:	2330      	movs	r3, #48	; 0x30
 800e4f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e698 <_svfiprintf_r+0x1e8>
 800e4f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4fa:	f04f 0901 	mov.w	r9, #1
 800e4fe:	4623      	mov	r3, r4
 800e500:	469a      	mov	sl, r3
 800e502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e506:	b10a      	cbz	r2, 800e50c <_svfiprintf_r+0x5c>
 800e508:	2a25      	cmp	r2, #37	; 0x25
 800e50a:	d1f9      	bne.n	800e500 <_svfiprintf_r+0x50>
 800e50c:	ebba 0b04 	subs.w	fp, sl, r4
 800e510:	d00b      	beq.n	800e52a <_svfiprintf_r+0x7a>
 800e512:	465b      	mov	r3, fp
 800e514:	4622      	mov	r2, r4
 800e516:	4629      	mov	r1, r5
 800e518:	4638      	mov	r0, r7
 800e51a:	f7ff ff6e 	bl	800e3fa <__ssputs_r>
 800e51e:	3001      	adds	r0, #1
 800e520:	f000 80a9 	beq.w	800e676 <_svfiprintf_r+0x1c6>
 800e524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e526:	445a      	add	r2, fp
 800e528:	9209      	str	r2, [sp, #36]	; 0x24
 800e52a:	f89a 3000 	ldrb.w	r3, [sl]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f000 80a1 	beq.w	800e676 <_svfiprintf_r+0x1c6>
 800e534:	2300      	movs	r3, #0
 800e536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e53e:	f10a 0a01 	add.w	sl, sl, #1
 800e542:	9304      	str	r3, [sp, #16]
 800e544:	9307      	str	r3, [sp, #28]
 800e546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e54a:	931a      	str	r3, [sp, #104]	; 0x68
 800e54c:	4654      	mov	r4, sl
 800e54e:	2205      	movs	r2, #5
 800e550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e554:	4850      	ldr	r0, [pc, #320]	; (800e698 <_svfiprintf_r+0x1e8>)
 800e556:	f7f1 fe3b 	bl	80001d0 <memchr>
 800e55a:	9a04      	ldr	r2, [sp, #16]
 800e55c:	b9d8      	cbnz	r0, 800e596 <_svfiprintf_r+0xe6>
 800e55e:	06d0      	lsls	r0, r2, #27
 800e560:	bf44      	itt	mi
 800e562:	2320      	movmi	r3, #32
 800e564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e568:	0711      	lsls	r1, r2, #28
 800e56a:	bf44      	itt	mi
 800e56c:	232b      	movmi	r3, #43	; 0x2b
 800e56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e572:	f89a 3000 	ldrb.w	r3, [sl]
 800e576:	2b2a      	cmp	r3, #42	; 0x2a
 800e578:	d015      	beq.n	800e5a6 <_svfiprintf_r+0xf6>
 800e57a:	9a07      	ldr	r2, [sp, #28]
 800e57c:	4654      	mov	r4, sl
 800e57e:	2000      	movs	r0, #0
 800e580:	f04f 0c0a 	mov.w	ip, #10
 800e584:	4621      	mov	r1, r4
 800e586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e58a:	3b30      	subs	r3, #48	; 0x30
 800e58c:	2b09      	cmp	r3, #9
 800e58e:	d94d      	bls.n	800e62c <_svfiprintf_r+0x17c>
 800e590:	b1b0      	cbz	r0, 800e5c0 <_svfiprintf_r+0x110>
 800e592:	9207      	str	r2, [sp, #28]
 800e594:	e014      	b.n	800e5c0 <_svfiprintf_r+0x110>
 800e596:	eba0 0308 	sub.w	r3, r0, r8
 800e59a:	fa09 f303 	lsl.w	r3, r9, r3
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	9304      	str	r3, [sp, #16]
 800e5a2:	46a2      	mov	sl, r4
 800e5a4:	e7d2      	b.n	800e54c <_svfiprintf_r+0x9c>
 800e5a6:	9b03      	ldr	r3, [sp, #12]
 800e5a8:	1d19      	adds	r1, r3, #4
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	9103      	str	r1, [sp, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	bfbb      	ittet	lt
 800e5b2:	425b      	neglt	r3, r3
 800e5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800e5b8:	9307      	strge	r3, [sp, #28]
 800e5ba:	9307      	strlt	r3, [sp, #28]
 800e5bc:	bfb8      	it	lt
 800e5be:	9204      	strlt	r2, [sp, #16]
 800e5c0:	7823      	ldrb	r3, [r4, #0]
 800e5c2:	2b2e      	cmp	r3, #46	; 0x2e
 800e5c4:	d10c      	bne.n	800e5e0 <_svfiprintf_r+0x130>
 800e5c6:	7863      	ldrb	r3, [r4, #1]
 800e5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ca:	d134      	bne.n	800e636 <_svfiprintf_r+0x186>
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	1d1a      	adds	r2, r3, #4
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	9203      	str	r2, [sp, #12]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	bfb8      	it	lt
 800e5d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e5dc:	3402      	adds	r4, #2
 800e5de:	9305      	str	r3, [sp, #20]
 800e5e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e6a8 <_svfiprintf_r+0x1f8>
 800e5e4:	7821      	ldrb	r1, [r4, #0]
 800e5e6:	2203      	movs	r2, #3
 800e5e8:	4650      	mov	r0, sl
 800e5ea:	f7f1 fdf1 	bl	80001d0 <memchr>
 800e5ee:	b138      	cbz	r0, 800e600 <_svfiprintf_r+0x150>
 800e5f0:	9b04      	ldr	r3, [sp, #16]
 800e5f2:	eba0 000a 	sub.w	r0, r0, sl
 800e5f6:	2240      	movs	r2, #64	; 0x40
 800e5f8:	4082      	lsls	r2, r0
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	3401      	adds	r4, #1
 800e5fe:	9304      	str	r3, [sp, #16]
 800e600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e604:	4825      	ldr	r0, [pc, #148]	; (800e69c <_svfiprintf_r+0x1ec>)
 800e606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e60a:	2206      	movs	r2, #6
 800e60c:	f7f1 fde0 	bl	80001d0 <memchr>
 800e610:	2800      	cmp	r0, #0
 800e612:	d038      	beq.n	800e686 <_svfiprintf_r+0x1d6>
 800e614:	4b22      	ldr	r3, [pc, #136]	; (800e6a0 <_svfiprintf_r+0x1f0>)
 800e616:	bb1b      	cbnz	r3, 800e660 <_svfiprintf_r+0x1b0>
 800e618:	9b03      	ldr	r3, [sp, #12]
 800e61a:	3307      	adds	r3, #7
 800e61c:	f023 0307 	bic.w	r3, r3, #7
 800e620:	3308      	adds	r3, #8
 800e622:	9303      	str	r3, [sp, #12]
 800e624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e626:	4433      	add	r3, r6
 800e628:	9309      	str	r3, [sp, #36]	; 0x24
 800e62a:	e768      	b.n	800e4fe <_svfiprintf_r+0x4e>
 800e62c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e630:	460c      	mov	r4, r1
 800e632:	2001      	movs	r0, #1
 800e634:	e7a6      	b.n	800e584 <_svfiprintf_r+0xd4>
 800e636:	2300      	movs	r3, #0
 800e638:	3401      	adds	r4, #1
 800e63a:	9305      	str	r3, [sp, #20]
 800e63c:	4619      	mov	r1, r3
 800e63e:	f04f 0c0a 	mov.w	ip, #10
 800e642:	4620      	mov	r0, r4
 800e644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e648:	3a30      	subs	r2, #48	; 0x30
 800e64a:	2a09      	cmp	r2, #9
 800e64c:	d903      	bls.n	800e656 <_svfiprintf_r+0x1a6>
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d0c6      	beq.n	800e5e0 <_svfiprintf_r+0x130>
 800e652:	9105      	str	r1, [sp, #20]
 800e654:	e7c4      	b.n	800e5e0 <_svfiprintf_r+0x130>
 800e656:	fb0c 2101 	mla	r1, ip, r1, r2
 800e65a:	4604      	mov	r4, r0
 800e65c:	2301      	movs	r3, #1
 800e65e:	e7f0      	b.n	800e642 <_svfiprintf_r+0x192>
 800e660:	ab03      	add	r3, sp, #12
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	462a      	mov	r2, r5
 800e666:	4b0f      	ldr	r3, [pc, #60]	; (800e6a4 <_svfiprintf_r+0x1f4>)
 800e668:	a904      	add	r1, sp, #16
 800e66a:	4638      	mov	r0, r7
 800e66c:	f7fc fd88 	bl	800b180 <_printf_float>
 800e670:	1c42      	adds	r2, r0, #1
 800e672:	4606      	mov	r6, r0
 800e674:	d1d6      	bne.n	800e624 <_svfiprintf_r+0x174>
 800e676:	89ab      	ldrh	r3, [r5, #12]
 800e678:	065b      	lsls	r3, r3, #25
 800e67a:	f53f af2d 	bmi.w	800e4d8 <_svfiprintf_r+0x28>
 800e67e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e680:	b01d      	add	sp, #116	; 0x74
 800e682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e686:	ab03      	add	r3, sp, #12
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	462a      	mov	r2, r5
 800e68c:	4b05      	ldr	r3, [pc, #20]	; (800e6a4 <_svfiprintf_r+0x1f4>)
 800e68e:	a904      	add	r1, sp, #16
 800e690:	4638      	mov	r0, r7
 800e692:	f7fd f819 	bl	800b6c8 <_printf_i>
 800e696:	e7eb      	b.n	800e670 <_svfiprintf_r+0x1c0>
 800e698:	080110b6 	.word	0x080110b6
 800e69c:	080110c0 	.word	0x080110c0
 800e6a0:	0800b181 	.word	0x0800b181
 800e6a4:	0800e3fb 	.word	0x0800e3fb
 800e6a8:	080110bc 	.word	0x080110bc

0800e6ac <__sfputc_r>:
 800e6ac:	6893      	ldr	r3, [r2, #8]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	b410      	push	{r4}
 800e6b4:	6093      	str	r3, [r2, #8]
 800e6b6:	da08      	bge.n	800e6ca <__sfputc_r+0x1e>
 800e6b8:	6994      	ldr	r4, [r2, #24]
 800e6ba:	42a3      	cmp	r3, r4
 800e6bc:	db01      	blt.n	800e6c2 <__sfputc_r+0x16>
 800e6be:	290a      	cmp	r1, #10
 800e6c0:	d103      	bne.n	800e6ca <__sfputc_r+0x1e>
 800e6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c6:	f000 bf85 	b.w	800f5d4 <__swbuf_r>
 800e6ca:	6813      	ldr	r3, [r2, #0]
 800e6cc:	1c58      	adds	r0, r3, #1
 800e6ce:	6010      	str	r0, [r2, #0]
 800e6d0:	7019      	strb	r1, [r3, #0]
 800e6d2:	4608      	mov	r0, r1
 800e6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6d8:	4770      	bx	lr

0800e6da <__sfputs_r>:
 800e6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6dc:	4606      	mov	r6, r0
 800e6de:	460f      	mov	r7, r1
 800e6e0:	4614      	mov	r4, r2
 800e6e2:	18d5      	adds	r5, r2, r3
 800e6e4:	42ac      	cmp	r4, r5
 800e6e6:	d101      	bne.n	800e6ec <__sfputs_r+0x12>
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	e007      	b.n	800e6fc <__sfputs_r+0x22>
 800e6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f0:	463a      	mov	r2, r7
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f7ff ffda 	bl	800e6ac <__sfputc_r>
 800e6f8:	1c43      	adds	r3, r0, #1
 800e6fa:	d1f3      	bne.n	800e6e4 <__sfputs_r+0xa>
 800e6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e700 <_vfiprintf_r>:
 800e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e704:	460d      	mov	r5, r1
 800e706:	b09d      	sub	sp, #116	; 0x74
 800e708:	4614      	mov	r4, r2
 800e70a:	4698      	mov	r8, r3
 800e70c:	4606      	mov	r6, r0
 800e70e:	b118      	cbz	r0, 800e718 <_vfiprintf_r+0x18>
 800e710:	6a03      	ldr	r3, [r0, #32]
 800e712:	b90b      	cbnz	r3, 800e718 <_vfiprintf_r+0x18>
 800e714:	f7fd fbfa 	bl	800bf0c <__sinit>
 800e718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e71a:	07d9      	lsls	r1, r3, #31
 800e71c:	d405      	bmi.n	800e72a <_vfiprintf_r+0x2a>
 800e71e:	89ab      	ldrh	r3, [r5, #12]
 800e720:	059a      	lsls	r2, r3, #22
 800e722:	d402      	bmi.n	800e72a <_vfiprintf_r+0x2a>
 800e724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e726:	f7fe fc2a 	bl	800cf7e <__retarget_lock_acquire_recursive>
 800e72a:	89ab      	ldrh	r3, [r5, #12]
 800e72c:	071b      	lsls	r3, r3, #28
 800e72e:	d501      	bpl.n	800e734 <_vfiprintf_r+0x34>
 800e730:	692b      	ldr	r3, [r5, #16]
 800e732:	b99b      	cbnz	r3, 800e75c <_vfiprintf_r+0x5c>
 800e734:	4629      	mov	r1, r5
 800e736:	4630      	mov	r0, r6
 800e738:	f000 ff8a 	bl	800f650 <__swsetup_r>
 800e73c:	b170      	cbz	r0, 800e75c <_vfiprintf_r+0x5c>
 800e73e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e740:	07dc      	lsls	r4, r3, #31
 800e742:	d504      	bpl.n	800e74e <_vfiprintf_r+0x4e>
 800e744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e748:	b01d      	add	sp, #116	; 0x74
 800e74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74e:	89ab      	ldrh	r3, [r5, #12]
 800e750:	0598      	lsls	r0, r3, #22
 800e752:	d4f7      	bmi.n	800e744 <_vfiprintf_r+0x44>
 800e754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e756:	f7fe fc13 	bl	800cf80 <__retarget_lock_release_recursive>
 800e75a:	e7f3      	b.n	800e744 <_vfiprintf_r+0x44>
 800e75c:	2300      	movs	r3, #0
 800e75e:	9309      	str	r3, [sp, #36]	; 0x24
 800e760:	2320      	movs	r3, #32
 800e762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e766:	f8cd 800c 	str.w	r8, [sp, #12]
 800e76a:	2330      	movs	r3, #48	; 0x30
 800e76c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e920 <_vfiprintf_r+0x220>
 800e770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e774:	f04f 0901 	mov.w	r9, #1
 800e778:	4623      	mov	r3, r4
 800e77a:	469a      	mov	sl, r3
 800e77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e780:	b10a      	cbz	r2, 800e786 <_vfiprintf_r+0x86>
 800e782:	2a25      	cmp	r2, #37	; 0x25
 800e784:	d1f9      	bne.n	800e77a <_vfiprintf_r+0x7a>
 800e786:	ebba 0b04 	subs.w	fp, sl, r4
 800e78a:	d00b      	beq.n	800e7a4 <_vfiprintf_r+0xa4>
 800e78c:	465b      	mov	r3, fp
 800e78e:	4622      	mov	r2, r4
 800e790:	4629      	mov	r1, r5
 800e792:	4630      	mov	r0, r6
 800e794:	f7ff ffa1 	bl	800e6da <__sfputs_r>
 800e798:	3001      	adds	r0, #1
 800e79a:	f000 80a9 	beq.w	800e8f0 <_vfiprintf_r+0x1f0>
 800e79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7a0:	445a      	add	r2, fp
 800e7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 80a1 	beq.w	800e8f0 <_vfiprintf_r+0x1f0>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7b8:	f10a 0a01 	add.w	sl, sl, #1
 800e7bc:	9304      	str	r3, [sp, #16]
 800e7be:	9307      	str	r3, [sp, #28]
 800e7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800e7c6:	4654      	mov	r4, sl
 800e7c8:	2205      	movs	r2, #5
 800e7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ce:	4854      	ldr	r0, [pc, #336]	; (800e920 <_vfiprintf_r+0x220>)
 800e7d0:	f7f1 fcfe 	bl	80001d0 <memchr>
 800e7d4:	9a04      	ldr	r2, [sp, #16]
 800e7d6:	b9d8      	cbnz	r0, 800e810 <_vfiprintf_r+0x110>
 800e7d8:	06d1      	lsls	r1, r2, #27
 800e7da:	bf44      	itt	mi
 800e7dc:	2320      	movmi	r3, #32
 800e7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7e2:	0713      	lsls	r3, r2, #28
 800e7e4:	bf44      	itt	mi
 800e7e6:	232b      	movmi	r3, #43	; 0x2b
 800e7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f2:	d015      	beq.n	800e820 <_vfiprintf_r+0x120>
 800e7f4:	9a07      	ldr	r2, [sp, #28]
 800e7f6:	4654      	mov	r4, sl
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	f04f 0c0a 	mov.w	ip, #10
 800e7fe:	4621      	mov	r1, r4
 800e800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e804:	3b30      	subs	r3, #48	; 0x30
 800e806:	2b09      	cmp	r3, #9
 800e808:	d94d      	bls.n	800e8a6 <_vfiprintf_r+0x1a6>
 800e80a:	b1b0      	cbz	r0, 800e83a <_vfiprintf_r+0x13a>
 800e80c:	9207      	str	r2, [sp, #28]
 800e80e:	e014      	b.n	800e83a <_vfiprintf_r+0x13a>
 800e810:	eba0 0308 	sub.w	r3, r0, r8
 800e814:	fa09 f303 	lsl.w	r3, r9, r3
 800e818:	4313      	orrs	r3, r2
 800e81a:	9304      	str	r3, [sp, #16]
 800e81c:	46a2      	mov	sl, r4
 800e81e:	e7d2      	b.n	800e7c6 <_vfiprintf_r+0xc6>
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	1d19      	adds	r1, r3, #4
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	9103      	str	r1, [sp, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	bfbb      	ittet	lt
 800e82c:	425b      	neglt	r3, r3
 800e82e:	f042 0202 	orrlt.w	r2, r2, #2
 800e832:	9307      	strge	r3, [sp, #28]
 800e834:	9307      	strlt	r3, [sp, #28]
 800e836:	bfb8      	it	lt
 800e838:	9204      	strlt	r2, [sp, #16]
 800e83a:	7823      	ldrb	r3, [r4, #0]
 800e83c:	2b2e      	cmp	r3, #46	; 0x2e
 800e83e:	d10c      	bne.n	800e85a <_vfiprintf_r+0x15a>
 800e840:	7863      	ldrb	r3, [r4, #1]
 800e842:	2b2a      	cmp	r3, #42	; 0x2a
 800e844:	d134      	bne.n	800e8b0 <_vfiprintf_r+0x1b0>
 800e846:	9b03      	ldr	r3, [sp, #12]
 800e848:	1d1a      	adds	r2, r3, #4
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	9203      	str	r2, [sp, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	bfb8      	it	lt
 800e852:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e856:	3402      	adds	r4, #2
 800e858:	9305      	str	r3, [sp, #20]
 800e85a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e930 <_vfiprintf_r+0x230>
 800e85e:	7821      	ldrb	r1, [r4, #0]
 800e860:	2203      	movs	r2, #3
 800e862:	4650      	mov	r0, sl
 800e864:	f7f1 fcb4 	bl	80001d0 <memchr>
 800e868:	b138      	cbz	r0, 800e87a <_vfiprintf_r+0x17a>
 800e86a:	9b04      	ldr	r3, [sp, #16]
 800e86c:	eba0 000a 	sub.w	r0, r0, sl
 800e870:	2240      	movs	r2, #64	; 0x40
 800e872:	4082      	lsls	r2, r0
 800e874:	4313      	orrs	r3, r2
 800e876:	3401      	adds	r4, #1
 800e878:	9304      	str	r3, [sp, #16]
 800e87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87e:	4829      	ldr	r0, [pc, #164]	; (800e924 <_vfiprintf_r+0x224>)
 800e880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e884:	2206      	movs	r2, #6
 800e886:	f7f1 fca3 	bl	80001d0 <memchr>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	d03f      	beq.n	800e90e <_vfiprintf_r+0x20e>
 800e88e:	4b26      	ldr	r3, [pc, #152]	; (800e928 <_vfiprintf_r+0x228>)
 800e890:	bb1b      	cbnz	r3, 800e8da <_vfiprintf_r+0x1da>
 800e892:	9b03      	ldr	r3, [sp, #12]
 800e894:	3307      	adds	r3, #7
 800e896:	f023 0307 	bic.w	r3, r3, #7
 800e89a:	3308      	adds	r3, #8
 800e89c:	9303      	str	r3, [sp, #12]
 800e89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a0:	443b      	add	r3, r7
 800e8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e8a4:	e768      	b.n	800e778 <_vfiprintf_r+0x78>
 800e8a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	2001      	movs	r0, #1
 800e8ae:	e7a6      	b.n	800e7fe <_vfiprintf_r+0xfe>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	3401      	adds	r4, #1
 800e8b4:	9305      	str	r3, [sp, #20]
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	f04f 0c0a 	mov.w	ip, #10
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8c2:	3a30      	subs	r2, #48	; 0x30
 800e8c4:	2a09      	cmp	r2, #9
 800e8c6:	d903      	bls.n	800e8d0 <_vfiprintf_r+0x1d0>
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d0c6      	beq.n	800e85a <_vfiprintf_r+0x15a>
 800e8cc:	9105      	str	r1, [sp, #20]
 800e8ce:	e7c4      	b.n	800e85a <_vfiprintf_r+0x15a>
 800e8d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	e7f0      	b.n	800e8bc <_vfiprintf_r+0x1bc>
 800e8da:	ab03      	add	r3, sp, #12
 800e8dc:	9300      	str	r3, [sp, #0]
 800e8de:	462a      	mov	r2, r5
 800e8e0:	4b12      	ldr	r3, [pc, #72]	; (800e92c <_vfiprintf_r+0x22c>)
 800e8e2:	a904      	add	r1, sp, #16
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	f7fc fc4b 	bl	800b180 <_printf_float>
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	1c78      	adds	r0, r7, #1
 800e8ee:	d1d6      	bne.n	800e89e <_vfiprintf_r+0x19e>
 800e8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8f2:	07d9      	lsls	r1, r3, #31
 800e8f4:	d405      	bmi.n	800e902 <_vfiprintf_r+0x202>
 800e8f6:	89ab      	ldrh	r3, [r5, #12]
 800e8f8:	059a      	lsls	r2, r3, #22
 800e8fa:	d402      	bmi.n	800e902 <_vfiprintf_r+0x202>
 800e8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8fe:	f7fe fb3f 	bl	800cf80 <__retarget_lock_release_recursive>
 800e902:	89ab      	ldrh	r3, [r5, #12]
 800e904:	065b      	lsls	r3, r3, #25
 800e906:	f53f af1d 	bmi.w	800e744 <_vfiprintf_r+0x44>
 800e90a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e90c:	e71c      	b.n	800e748 <_vfiprintf_r+0x48>
 800e90e:	ab03      	add	r3, sp, #12
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	462a      	mov	r2, r5
 800e914:	4b05      	ldr	r3, [pc, #20]	; (800e92c <_vfiprintf_r+0x22c>)
 800e916:	a904      	add	r1, sp, #16
 800e918:	4630      	mov	r0, r6
 800e91a:	f7fc fed5 	bl	800b6c8 <_printf_i>
 800e91e:	e7e4      	b.n	800e8ea <_vfiprintf_r+0x1ea>
 800e920:	080110b6 	.word	0x080110b6
 800e924:	080110c0 	.word	0x080110c0
 800e928:	0800b181 	.word	0x0800b181
 800e92c:	0800e6db 	.word	0x0800e6db
 800e930:	080110bc 	.word	0x080110bc

0800e934 <malloc>:
 800e934:	4b02      	ldr	r3, [pc, #8]	; (800e940 <malloc+0xc>)
 800e936:	4601      	mov	r1, r0
 800e938:	6818      	ldr	r0, [r3, #0]
 800e93a:	f000 b823 	b.w	800e984 <_malloc_r>
 800e93e:	bf00      	nop
 800e940:	20000208 	.word	0x20000208

0800e944 <sbrk_aligned>:
 800e944:	b570      	push	{r4, r5, r6, lr}
 800e946:	4e0e      	ldr	r6, [pc, #56]	; (800e980 <sbrk_aligned+0x3c>)
 800e948:	460c      	mov	r4, r1
 800e94a:	6831      	ldr	r1, [r6, #0]
 800e94c:	4605      	mov	r5, r0
 800e94e:	b911      	cbnz	r1, 800e956 <sbrk_aligned+0x12>
 800e950:	f000 ffb6 	bl	800f8c0 <_sbrk_r>
 800e954:	6030      	str	r0, [r6, #0]
 800e956:	4621      	mov	r1, r4
 800e958:	4628      	mov	r0, r5
 800e95a:	f000 ffb1 	bl	800f8c0 <_sbrk_r>
 800e95e:	1c43      	adds	r3, r0, #1
 800e960:	d00a      	beq.n	800e978 <sbrk_aligned+0x34>
 800e962:	1cc4      	adds	r4, r0, #3
 800e964:	f024 0403 	bic.w	r4, r4, #3
 800e968:	42a0      	cmp	r0, r4
 800e96a:	d007      	beq.n	800e97c <sbrk_aligned+0x38>
 800e96c:	1a21      	subs	r1, r4, r0
 800e96e:	4628      	mov	r0, r5
 800e970:	f000 ffa6 	bl	800f8c0 <_sbrk_r>
 800e974:	3001      	adds	r0, #1
 800e976:	d101      	bne.n	800e97c <sbrk_aligned+0x38>
 800e978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e97c:	4620      	mov	r0, r4
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
 800e980:	20000c04 	.word	0x20000c04

0800e984 <_malloc_r>:
 800e984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e988:	1ccd      	adds	r5, r1, #3
 800e98a:	f025 0503 	bic.w	r5, r5, #3
 800e98e:	3508      	adds	r5, #8
 800e990:	2d0c      	cmp	r5, #12
 800e992:	bf38      	it	cc
 800e994:	250c      	movcc	r5, #12
 800e996:	2d00      	cmp	r5, #0
 800e998:	4607      	mov	r7, r0
 800e99a:	db01      	blt.n	800e9a0 <_malloc_r+0x1c>
 800e99c:	42a9      	cmp	r1, r5
 800e99e:	d905      	bls.n	800e9ac <_malloc_r+0x28>
 800e9a0:	230c      	movs	r3, #12
 800e9a2:	603b      	str	r3, [r7, #0]
 800e9a4:	2600      	movs	r6, #0
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ea80 <_malloc_r+0xfc>
 800e9b0:	f000 f928 	bl	800ec04 <__malloc_lock>
 800e9b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e9b8:	461c      	mov	r4, r3
 800e9ba:	bb5c      	cbnz	r4, 800ea14 <_malloc_r+0x90>
 800e9bc:	4629      	mov	r1, r5
 800e9be:	4638      	mov	r0, r7
 800e9c0:	f7ff ffc0 	bl	800e944 <sbrk_aligned>
 800e9c4:	1c43      	adds	r3, r0, #1
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	d155      	bne.n	800ea76 <_malloc_r+0xf2>
 800e9ca:	f8d8 4000 	ldr.w	r4, [r8]
 800e9ce:	4626      	mov	r6, r4
 800e9d0:	2e00      	cmp	r6, #0
 800e9d2:	d145      	bne.n	800ea60 <_malloc_r+0xdc>
 800e9d4:	2c00      	cmp	r4, #0
 800e9d6:	d048      	beq.n	800ea6a <_malloc_r+0xe6>
 800e9d8:	6823      	ldr	r3, [r4, #0]
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4638      	mov	r0, r7
 800e9de:	eb04 0903 	add.w	r9, r4, r3
 800e9e2:	f000 ff6d 	bl	800f8c0 <_sbrk_r>
 800e9e6:	4581      	cmp	r9, r0
 800e9e8:	d13f      	bne.n	800ea6a <_malloc_r+0xe6>
 800e9ea:	6821      	ldr	r1, [r4, #0]
 800e9ec:	1a6d      	subs	r5, r5, r1
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	f7ff ffa7 	bl	800e944 <sbrk_aligned>
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	d037      	beq.n	800ea6a <_malloc_r+0xe6>
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	442b      	add	r3, r5
 800e9fe:	6023      	str	r3, [r4, #0]
 800ea00:	f8d8 3000 	ldr.w	r3, [r8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d038      	beq.n	800ea7a <_malloc_r+0xf6>
 800ea08:	685a      	ldr	r2, [r3, #4]
 800ea0a:	42a2      	cmp	r2, r4
 800ea0c:	d12b      	bne.n	800ea66 <_malloc_r+0xe2>
 800ea0e:	2200      	movs	r2, #0
 800ea10:	605a      	str	r2, [r3, #4]
 800ea12:	e00f      	b.n	800ea34 <_malloc_r+0xb0>
 800ea14:	6822      	ldr	r2, [r4, #0]
 800ea16:	1b52      	subs	r2, r2, r5
 800ea18:	d41f      	bmi.n	800ea5a <_malloc_r+0xd6>
 800ea1a:	2a0b      	cmp	r2, #11
 800ea1c:	d917      	bls.n	800ea4e <_malloc_r+0xca>
 800ea1e:	1961      	adds	r1, r4, r5
 800ea20:	42a3      	cmp	r3, r4
 800ea22:	6025      	str	r5, [r4, #0]
 800ea24:	bf18      	it	ne
 800ea26:	6059      	strne	r1, [r3, #4]
 800ea28:	6863      	ldr	r3, [r4, #4]
 800ea2a:	bf08      	it	eq
 800ea2c:	f8c8 1000 	streq.w	r1, [r8]
 800ea30:	5162      	str	r2, [r4, r5]
 800ea32:	604b      	str	r3, [r1, #4]
 800ea34:	4638      	mov	r0, r7
 800ea36:	f104 060b 	add.w	r6, r4, #11
 800ea3a:	f000 f8e9 	bl	800ec10 <__malloc_unlock>
 800ea3e:	f026 0607 	bic.w	r6, r6, #7
 800ea42:	1d23      	adds	r3, r4, #4
 800ea44:	1af2      	subs	r2, r6, r3
 800ea46:	d0ae      	beq.n	800e9a6 <_malloc_r+0x22>
 800ea48:	1b9b      	subs	r3, r3, r6
 800ea4a:	50a3      	str	r3, [r4, r2]
 800ea4c:	e7ab      	b.n	800e9a6 <_malloc_r+0x22>
 800ea4e:	42a3      	cmp	r3, r4
 800ea50:	6862      	ldr	r2, [r4, #4]
 800ea52:	d1dd      	bne.n	800ea10 <_malloc_r+0x8c>
 800ea54:	f8c8 2000 	str.w	r2, [r8]
 800ea58:	e7ec      	b.n	800ea34 <_malloc_r+0xb0>
 800ea5a:	4623      	mov	r3, r4
 800ea5c:	6864      	ldr	r4, [r4, #4]
 800ea5e:	e7ac      	b.n	800e9ba <_malloc_r+0x36>
 800ea60:	4634      	mov	r4, r6
 800ea62:	6876      	ldr	r6, [r6, #4]
 800ea64:	e7b4      	b.n	800e9d0 <_malloc_r+0x4c>
 800ea66:	4613      	mov	r3, r2
 800ea68:	e7cc      	b.n	800ea04 <_malloc_r+0x80>
 800ea6a:	230c      	movs	r3, #12
 800ea6c:	603b      	str	r3, [r7, #0]
 800ea6e:	4638      	mov	r0, r7
 800ea70:	f000 f8ce 	bl	800ec10 <__malloc_unlock>
 800ea74:	e797      	b.n	800e9a6 <_malloc_r+0x22>
 800ea76:	6025      	str	r5, [r4, #0]
 800ea78:	e7dc      	b.n	800ea34 <_malloc_r+0xb0>
 800ea7a:	605b      	str	r3, [r3, #4]
 800ea7c:	deff      	udf	#255	; 0xff
 800ea7e:	bf00      	nop
 800ea80:	20000c00 	.word	0x20000c00

0800ea84 <__ascii_mbtowc>:
 800ea84:	b082      	sub	sp, #8
 800ea86:	b901      	cbnz	r1, 800ea8a <__ascii_mbtowc+0x6>
 800ea88:	a901      	add	r1, sp, #4
 800ea8a:	b142      	cbz	r2, 800ea9e <__ascii_mbtowc+0x1a>
 800ea8c:	b14b      	cbz	r3, 800eaa2 <__ascii_mbtowc+0x1e>
 800ea8e:	7813      	ldrb	r3, [r2, #0]
 800ea90:	600b      	str	r3, [r1, #0]
 800ea92:	7812      	ldrb	r2, [r2, #0]
 800ea94:	1e10      	subs	r0, r2, #0
 800ea96:	bf18      	it	ne
 800ea98:	2001      	movne	r0, #1
 800ea9a:	b002      	add	sp, #8
 800ea9c:	4770      	bx	lr
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	e7fb      	b.n	800ea9a <__ascii_mbtowc+0x16>
 800eaa2:	f06f 0001 	mvn.w	r0, #1
 800eaa6:	e7f8      	b.n	800ea9a <__ascii_mbtowc+0x16>

0800eaa8 <__sflush_r>:
 800eaa8:	898a      	ldrh	r2, [r1, #12]
 800eaaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaae:	4605      	mov	r5, r0
 800eab0:	0710      	lsls	r0, r2, #28
 800eab2:	460c      	mov	r4, r1
 800eab4:	d458      	bmi.n	800eb68 <__sflush_r+0xc0>
 800eab6:	684b      	ldr	r3, [r1, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dc05      	bgt.n	800eac8 <__sflush_r+0x20>
 800eabc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	dc02      	bgt.n	800eac8 <__sflush_r+0x20>
 800eac2:	2000      	movs	r0, #0
 800eac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaca:	2e00      	cmp	r6, #0
 800eacc:	d0f9      	beq.n	800eac2 <__sflush_r+0x1a>
 800eace:	2300      	movs	r3, #0
 800ead0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ead4:	682f      	ldr	r7, [r5, #0]
 800ead6:	6a21      	ldr	r1, [r4, #32]
 800ead8:	602b      	str	r3, [r5, #0]
 800eada:	d032      	beq.n	800eb42 <__sflush_r+0x9a>
 800eadc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eade:	89a3      	ldrh	r3, [r4, #12]
 800eae0:	075a      	lsls	r2, r3, #29
 800eae2:	d505      	bpl.n	800eaf0 <__sflush_r+0x48>
 800eae4:	6863      	ldr	r3, [r4, #4]
 800eae6:	1ac0      	subs	r0, r0, r3
 800eae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eaea:	b10b      	cbz	r3, 800eaf0 <__sflush_r+0x48>
 800eaec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eaee:	1ac0      	subs	r0, r0, r3
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaf6:	6a21      	ldr	r1, [r4, #32]
 800eaf8:	4628      	mov	r0, r5
 800eafa:	47b0      	blx	r6
 800eafc:	1c43      	adds	r3, r0, #1
 800eafe:	89a3      	ldrh	r3, [r4, #12]
 800eb00:	d106      	bne.n	800eb10 <__sflush_r+0x68>
 800eb02:	6829      	ldr	r1, [r5, #0]
 800eb04:	291d      	cmp	r1, #29
 800eb06:	d82b      	bhi.n	800eb60 <__sflush_r+0xb8>
 800eb08:	4a29      	ldr	r2, [pc, #164]	; (800ebb0 <__sflush_r+0x108>)
 800eb0a:	410a      	asrs	r2, r1
 800eb0c:	07d6      	lsls	r6, r2, #31
 800eb0e:	d427      	bmi.n	800eb60 <__sflush_r+0xb8>
 800eb10:	2200      	movs	r2, #0
 800eb12:	6062      	str	r2, [r4, #4]
 800eb14:	04d9      	lsls	r1, r3, #19
 800eb16:	6922      	ldr	r2, [r4, #16]
 800eb18:	6022      	str	r2, [r4, #0]
 800eb1a:	d504      	bpl.n	800eb26 <__sflush_r+0x7e>
 800eb1c:	1c42      	adds	r2, r0, #1
 800eb1e:	d101      	bne.n	800eb24 <__sflush_r+0x7c>
 800eb20:	682b      	ldr	r3, [r5, #0]
 800eb22:	b903      	cbnz	r3, 800eb26 <__sflush_r+0x7e>
 800eb24:	6560      	str	r0, [r4, #84]	; 0x54
 800eb26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb28:	602f      	str	r7, [r5, #0]
 800eb2a:	2900      	cmp	r1, #0
 800eb2c:	d0c9      	beq.n	800eac2 <__sflush_r+0x1a>
 800eb2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb32:	4299      	cmp	r1, r3
 800eb34:	d002      	beq.n	800eb3c <__sflush_r+0x94>
 800eb36:	4628      	mov	r0, r5
 800eb38:	f7ff f8bc 	bl	800dcb4 <_free_r>
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	6360      	str	r0, [r4, #52]	; 0x34
 800eb40:	e7c0      	b.n	800eac4 <__sflush_r+0x1c>
 800eb42:	2301      	movs	r3, #1
 800eb44:	4628      	mov	r0, r5
 800eb46:	47b0      	blx	r6
 800eb48:	1c41      	adds	r1, r0, #1
 800eb4a:	d1c8      	bne.n	800eade <__sflush_r+0x36>
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d0c5      	beq.n	800eade <__sflush_r+0x36>
 800eb52:	2b1d      	cmp	r3, #29
 800eb54:	d001      	beq.n	800eb5a <__sflush_r+0xb2>
 800eb56:	2b16      	cmp	r3, #22
 800eb58:	d101      	bne.n	800eb5e <__sflush_r+0xb6>
 800eb5a:	602f      	str	r7, [r5, #0]
 800eb5c:	e7b1      	b.n	800eac2 <__sflush_r+0x1a>
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb64:	81a3      	strh	r3, [r4, #12]
 800eb66:	e7ad      	b.n	800eac4 <__sflush_r+0x1c>
 800eb68:	690f      	ldr	r7, [r1, #16]
 800eb6a:	2f00      	cmp	r7, #0
 800eb6c:	d0a9      	beq.n	800eac2 <__sflush_r+0x1a>
 800eb6e:	0793      	lsls	r3, r2, #30
 800eb70:	680e      	ldr	r6, [r1, #0]
 800eb72:	bf08      	it	eq
 800eb74:	694b      	ldreq	r3, [r1, #20]
 800eb76:	600f      	str	r7, [r1, #0]
 800eb78:	bf18      	it	ne
 800eb7a:	2300      	movne	r3, #0
 800eb7c:	eba6 0807 	sub.w	r8, r6, r7
 800eb80:	608b      	str	r3, [r1, #8]
 800eb82:	f1b8 0f00 	cmp.w	r8, #0
 800eb86:	dd9c      	ble.n	800eac2 <__sflush_r+0x1a>
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb8c:	4643      	mov	r3, r8
 800eb8e:	463a      	mov	r2, r7
 800eb90:	4628      	mov	r0, r5
 800eb92:	47b0      	blx	r6
 800eb94:	2800      	cmp	r0, #0
 800eb96:	dc06      	bgt.n	800eba6 <__sflush_r+0xfe>
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eba4:	e78e      	b.n	800eac4 <__sflush_r+0x1c>
 800eba6:	4407      	add	r7, r0
 800eba8:	eba8 0800 	sub.w	r8, r8, r0
 800ebac:	e7e9      	b.n	800eb82 <__sflush_r+0xda>
 800ebae:	bf00      	nop
 800ebb0:	dfbffffe 	.word	0xdfbffffe

0800ebb4 <_fflush_r>:
 800ebb4:	b538      	push	{r3, r4, r5, lr}
 800ebb6:	690b      	ldr	r3, [r1, #16]
 800ebb8:	4605      	mov	r5, r0
 800ebba:	460c      	mov	r4, r1
 800ebbc:	b913      	cbnz	r3, 800ebc4 <_fflush_r+0x10>
 800ebbe:	2500      	movs	r5, #0
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	b118      	cbz	r0, 800ebce <_fflush_r+0x1a>
 800ebc6:	6a03      	ldr	r3, [r0, #32]
 800ebc8:	b90b      	cbnz	r3, 800ebce <_fflush_r+0x1a>
 800ebca:	f7fd f99f 	bl	800bf0c <__sinit>
 800ebce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d0f3      	beq.n	800ebbe <_fflush_r+0xa>
 800ebd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebd8:	07d0      	lsls	r0, r2, #31
 800ebda:	d404      	bmi.n	800ebe6 <_fflush_r+0x32>
 800ebdc:	0599      	lsls	r1, r3, #22
 800ebde:	d402      	bmi.n	800ebe6 <_fflush_r+0x32>
 800ebe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebe2:	f7fe f9cc 	bl	800cf7e <__retarget_lock_acquire_recursive>
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	4621      	mov	r1, r4
 800ebea:	f7ff ff5d 	bl	800eaa8 <__sflush_r>
 800ebee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebf0:	07da      	lsls	r2, r3, #31
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	d4e4      	bmi.n	800ebc0 <_fflush_r+0xc>
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	059b      	lsls	r3, r3, #22
 800ebfa:	d4e1      	bmi.n	800ebc0 <_fflush_r+0xc>
 800ebfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebfe:	f7fe f9bf 	bl	800cf80 <__retarget_lock_release_recursive>
 800ec02:	e7dd      	b.n	800ebc0 <_fflush_r+0xc>

0800ec04 <__malloc_lock>:
 800ec04:	4801      	ldr	r0, [pc, #4]	; (800ec0c <__malloc_lock+0x8>)
 800ec06:	f7fe b9ba 	b.w	800cf7e <__retarget_lock_acquire_recursive>
 800ec0a:	bf00      	nop
 800ec0c:	20000bfc 	.word	0x20000bfc

0800ec10 <__malloc_unlock>:
 800ec10:	4801      	ldr	r0, [pc, #4]	; (800ec18 <__malloc_unlock+0x8>)
 800ec12:	f7fe b9b5 	b.w	800cf80 <__retarget_lock_release_recursive>
 800ec16:	bf00      	nop
 800ec18:	20000bfc 	.word	0x20000bfc

0800ec1c <_Balloc>:
 800ec1c:	b570      	push	{r4, r5, r6, lr}
 800ec1e:	69c6      	ldr	r6, [r0, #28]
 800ec20:	4604      	mov	r4, r0
 800ec22:	460d      	mov	r5, r1
 800ec24:	b976      	cbnz	r6, 800ec44 <_Balloc+0x28>
 800ec26:	2010      	movs	r0, #16
 800ec28:	f7ff fe84 	bl	800e934 <malloc>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	61e0      	str	r0, [r4, #28]
 800ec30:	b920      	cbnz	r0, 800ec3c <_Balloc+0x20>
 800ec32:	4b18      	ldr	r3, [pc, #96]	; (800ec94 <_Balloc+0x78>)
 800ec34:	4818      	ldr	r0, [pc, #96]	; (800ec98 <_Balloc+0x7c>)
 800ec36:	216b      	movs	r1, #107	; 0x6b
 800ec38:	f000 fe52 	bl	800f8e0 <__assert_func>
 800ec3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec40:	6006      	str	r6, [r0, #0]
 800ec42:	60c6      	str	r6, [r0, #12]
 800ec44:	69e6      	ldr	r6, [r4, #28]
 800ec46:	68f3      	ldr	r3, [r6, #12]
 800ec48:	b183      	cbz	r3, 800ec6c <_Balloc+0x50>
 800ec4a:	69e3      	ldr	r3, [r4, #28]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec52:	b9b8      	cbnz	r0, 800ec84 <_Balloc+0x68>
 800ec54:	2101      	movs	r1, #1
 800ec56:	fa01 f605 	lsl.w	r6, r1, r5
 800ec5a:	1d72      	adds	r2, r6, #5
 800ec5c:	0092      	lsls	r2, r2, #2
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 fe5c 	bl	800f91c <_calloc_r>
 800ec64:	b160      	cbz	r0, 800ec80 <_Balloc+0x64>
 800ec66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec6a:	e00e      	b.n	800ec8a <_Balloc+0x6e>
 800ec6c:	2221      	movs	r2, #33	; 0x21
 800ec6e:	2104      	movs	r1, #4
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 fe53 	bl	800f91c <_calloc_r>
 800ec76:	69e3      	ldr	r3, [r4, #28]
 800ec78:	60f0      	str	r0, [r6, #12]
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d1e4      	bne.n	800ec4a <_Balloc+0x2e>
 800ec80:	2000      	movs	r0, #0
 800ec82:	bd70      	pop	{r4, r5, r6, pc}
 800ec84:	6802      	ldr	r2, [r0, #0]
 800ec86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec90:	e7f7      	b.n	800ec82 <_Balloc+0x66>
 800ec92:	bf00      	nop
 800ec94:	08010fd6 	.word	0x08010fd6
 800ec98:	080110c7 	.word	0x080110c7

0800ec9c <_Bfree>:
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	69c6      	ldr	r6, [r0, #28]
 800eca0:	4605      	mov	r5, r0
 800eca2:	460c      	mov	r4, r1
 800eca4:	b976      	cbnz	r6, 800ecc4 <_Bfree+0x28>
 800eca6:	2010      	movs	r0, #16
 800eca8:	f7ff fe44 	bl	800e934 <malloc>
 800ecac:	4602      	mov	r2, r0
 800ecae:	61e8      	str	r0, [r5, #28]
 800ecb0:	b920      	cbnz	r0, 800ecbc <_Bfree+0x20>
 800ecb2:	4b09      	ldr	r3, [pc, #36]	; (800ecd8 <_Bfree+0x3c>)
 800ecb4:	4809      	ldr	r0, [pc, #36]	; (800ecdc <_Bfree+0x40>)
 800ecb6:	218f      	movs	r1, #143	; 0x8f
 800ecb8:	f000 fe12 	bl	800f8e0 <__assert_func>
 800ecbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecc0:	6006      	str	r6, [r0, #0]
 800ecc2:	60c6      	str	r6, [r0, #12]
 800ecc4:	b13c      	cbz	r4, 800ecd6 <_Bfree+0x3a>
 800ecc6:	69eb      	ldr	r3, [r5, #28]
 800ecc8:	6862      	ldr	r2, [r4, #4]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecd0:	6021      	str	r1, [r4, #0]
 800ecd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	08010fd6 	.word	0x08010fd6
 800ecdc:	080110c7 	.word	0x080110c7

0800ece0 <__multadd>:
 800ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece4:	690d      	ldr	r5, [r1, #16]
 800ece6:	4607      	mov	r7, r0
 800ece8:	460c      	mov	r4, r1
 800ecea:	461e      	mov	r6, r3
 800ecec:	f101 0c14 	add.w	ip, r1, #20
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	f8dc 3000 	ldr.w	r3, [ip]
 800ecf6:	b299      	uxth	r1, r3
 800ecf8:	fb02 6101 	mla	r1, r2, r1, r6
 800ecfc:	0c1e      	lsrs	r6, r3, #16
 800ecfe:	0c0b      	lsrs	r3, r1, #16
 800ed00:	fb02 3306 	mla	r3, r2, r6, r3
 800ed04:	b289      	uxth	r1, r1
 800ed06:	3001      	adds	r0, #1
 800ed08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed0c:	4285      	cmp	r5, r0
 800ed0e:	f84c 1b04 	str.w	r1, [ip], #4
 800ed12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed16:	dcec      	bgt.n	800ecf2 <__multadd+0x12>
 800ed18:	b30e      	cbz	r6, 800ed5e <__multadd+0x7e>
 800ed1a:	68a3      	ldr	r3, [r4, #8]
 800ed1c:	42ab      	cmp	r3, r5
 800ed1e:	dc19      	bgt.n	800ed54 <__multadd+0x74>
 800ed20:	6861      	ldr	r1, [r4, #4]
 800ed22:	4638      	mov	r0, r7
 800ed24:	3101      	adds	r1, #1
 800ed26:	f7ff ff79 	bl	800ec1c <_Balloc>
 800ed2a:	4680      	mov	r8, r0
 800ed2c:	b928      	cbnz	r0, 800ed3a <__multadd+0x5a>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	4b0c      	ldr	r3, [pc, #48]	; (800ed64 <__multadd+0x84>)
 800ed32:	480d      	ldr	r0, [pc, #52]	; (800ed68 <__multadd+0x88>)
 800ed34:	21ba      	movs	r1, #186	; 0xba
 800ed36:	f000 fdd3 	bl	800f8e0 <__assert_func>
 800ed3a:	6922      	ldr	r2, [r4, #16]
 800ed3c:	3202      	adds	r2, #2
 800ed3e:	f104 010c 	add.w	r1, r4, #12
 800ed42:	0092      	lsls	r2, r2, #2
 800ed44:	300c      	adds	r0, #12
 800ed46:	f7fe f91c 	bl	800cf82 <memcpy>
 800ed4a:	4621      	mov	r1, r4
 800ed4c:	4638      	mov	r0, r7
 800ed4e:	f7ff ffa5 	bl	800ec9c <_Bfree>
 800ed52:	4644      	mov	r4, r8
 800ed54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed58:	3501      	adds	r5, #1
 800ed5a:	615e      	str	r6, [r3, #20]
 800ed5c:	6125      	str	r5, [r4, #16]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed64:	08011045 	.word	0x08011045
 800ed68:	080110c7 	.word	0x080110c7

0800ed6c <__s2b>:
 800ed6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed70:	460c      	mov	r4, r1
 800ed72:	4615      	mov	r5, r2
 800ed74:	461f      	mov	r7, r3
 800ed76:	2209      	movs	r2, #9
 800ed78:	3308      	adds	r3, #8
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed80:	2100      	movs	r1, #0
 800ed82:	2201      	movs	r2, #1
 800ed84:	429a      	cmp	r2, r3
 800ed86:	db09      	blt.n	800ed9c <__s2b+0x30>
 800ed88:	4630      	mov	r0, r6
 800ed8a:	f7ff ff47 	bl	800ec1c <_Balloc>
 800ed8e:	b940      	cbnz	r0, 800eda2 <__s2b+0x36>
 800ed90:	4602      	mov	r2, r0
 800ed92:	4b19      	ldr	r3, [pc, #100]	; (800edf8 <__s2b+0x8c>)
 800ed94:	4819      	ldr	r0, [pc, #100]	; (800edfc <__s2b+0x90>)
 800ed96:	21d3      	movs	r1, #211	; 0xd3
 800ed98:	f000 fda2 	bl	800f8e0 <__assert_func>
 800ed9c:	0052      	lsls	r2, r2, #1
 800ed9e:	3101      	adds	r1, #1
 800eda0:	e7f0      	b.n	800ed84 <__s2b+0x18>
 800eda2:	9b08      	ldr	r3, [sp, #32]
 800eda4:	6143      	str	r3, [r0, #20]
 800eda6:	2d09      	cmp	r5, #9
 800eda8:	f04f 0301 	mov.w	r3, #1
 800edac:	6103      	str	r3, [r0, #16]
 800edae:	dd16      	ble.n	800edde <__s2b+0x72>
 800edb0:	f104 0909 	add.w	r9, r4, #9
 800edb4:	46c8      	mov	r8, r9
 800edb6:	442c      	add	r4, r5
 800edb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800edbc:	4601      	mov	r1, r0
 800edbe:	3b30      	subs	r3, #48	; 0x30
 800edc0:	220a      	movs	r2, #10
 800edc2:	4630      	mov	r0, r6
 800edc4:	f7ff ff8c 	bl	800ece0 <__multadd>
 800edc8:	45a0      	cmp	r8, r4
 800edca:	d1f5      	bne.n	800edb8 <__s2b+0x4c>
 800edcc:	f1a5 0408 	sub.w	r4, r5, #8
 800edd0:	444c      	add	r4, r9
 800edd2:	1b2d      	subs	r5, r5, r4
 800edd4:	1963      	adds	r3, r4, r5
 800edd6:	42bb      	cmp	r3, r7
 800edd8:	db04      	blt.n	800ede4 <__s2b+0x78>
 800edda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edde:	340a      	adds	r4, #10
 800ede0:	2509      	movs	r5, #9
 800ede2:	e7f6      	b.n	800edd2 <__s2b+0x66>
 800ede4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ede8:	4601      	mov	r1, r0
 800edea:	3b30      	subs	r3, #48	; 0x30
 800edec:	220a      	movs	r2, #10
 800edee:	4630      	mov	r0, r6
 800edf0:	f7ff ff76 	bl	800ece0 <__multadd>
 800edf4:	e7ee      	b.n	800edd4 <__s2b+0x68>
 800edf6:	bf00      	nop
 800edf8:	08011045 	.word	0x08011045
 800edfc:	080110c7 	.word	0x080110c7

0800ee00 <__hi0bits>:
 800ee00:	0c03      	lsrs	r3, r0, #16
 800ee02:	041b      	lsls	r3, r3, #16
 800ee04:	b9d3      	cbnz	r3, 800ee3c <__hi0bits+0x3c>
 800ee06:	0400      	lsls	r0, r0, #16
 800ee08:	2310      	movs	r3, #16
 800ee0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ee0e:	bf04      	itt	eq
 800ee10:	0200      	lsleq	r0, r0, #8
 800ee12:	3308      	addeq	r3, #8
 800ee14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ee18:	bf04      	itt	eq
 800ee1a:	0100      	lsleq	r0, r0, #4
 800ee1c:	3304      	addeq	r3, #4
 800ee1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ee22:	bf04      	itt	eq
 800ee24:	0080      	lsleq	r0, r0, #2
 800ee26:	3302      	addeq	r3, #2
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	db05      	blt.n	800ee38 <__hi0bits+0x38>
 800ee2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ee30:	f103 0301 	add.w	r3, r3, #1
 800ee34:	bf08      	it	eq
 800ee36:	2320      	moveq	r3, #32
 800ee38:	4618      	mov	r0, r3
 800ee3a:	4770      	bx	lr
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	e7e4      	b.n	800ee0a <__hi0bits+0xa>

0800ee40 <__lo0bits>:
 800ee40:	6803      	ldr	r3, [r0, #0]
 800ee42:	f013 0207 	ands.w	r2, r3, #7
 800ee46:	d00c      	beq.n	800ee62 <__lo0bits+0x22>
 800ee48:	07d9      	lsls	r1, r3, #31
 800ee4a:	d422      	bmi.n	800ee92 <__lo0bits+0x52>
 800ee4c:	079a      	lsls	r2, r3, #30
 800ee4e:	bf49      	itett	mi
 800ee50:	085b      	lsrmi	r3, r3, #1
 800ee52:	089b      	lsrpl	r3, r3, #2
 800ee54:	6003      	strmi	r3, [r0, #0]
 800ee56:	2201      	movmi	r2, #1
 800ee58:	bf5c      	itt	pl
 800ee5a:	6003      	strpl	r3, [r0, #0]
 800ee5c:	2202      	movpl	r2, #2
 800ee5e:	4610      	mov	r0, r2
 800ee60:	4770      	bx	lr
 800ee62:	b299      	uxth	r1, r3
 800ee64:	b909      	cbnz	r1, 800ee6a <__lo0bits+0x2a>
 800ee66:	0c1b      	lsrs	r3, r3, #16
 800ee68:	2210      	movs	r2, #16
 800ee6a:	b2d9      	uxtb	r1, r3
 800ee6c:	b909      	cbnz	r1, 800ee72 <__lo0bits+0x32>
 800ee6e:	3208      	adds	r2, #8
 800ee70:	0a1b      	lsrs	r3, r3, #8
 800ee72:	0719      	lsls	r1, r3, #28
 800ee74:	bf04      	itt	eq
 800ee76:	091b      	lsreq	r3, r3, #4
 800ee78:	3204      	addeq	r2, #4
 800ee7a:	0799      	lsls	r1, r3, #30
 800ee7c:	bf04      	itt	eq
 800ee7e:	089b      	lsreq	r3, r3, #2
 800ee80:	3202      	addeq	r2, #2
 800ee82:	07d9      	lsls	r1, r3, #31
 800ee84:	d403      	bmi.n	800ee8e <__lo0bits+0x4e>
 800ee86:	085b      	lsrs	r3, r3, #1
 800ee88:	f102 0201 	add.w	r2, r2, #1
 800ee8c:	d003      	beq.n	800ee96 <__lo0bits+0x56>
 800ee8e:	6003      	str	r3, [r0, #0]
 800ee90:	e7e5      	b.n	800ee5e <__lo0bits+0x1e>
 800ee92:	2200      	movs	r2, #0
 800ee94:	e7e3      	b.n	800ee5e <__lo0bits+0x1e>
 800ee96:	2220      	movs	r2, #32
 800ee98:	e7e1      	b.n	800ee5e <__lo0bits+0x1e>
	...

0800ee9c <__i2b>:
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	460c      	mov	r4, r1
 800eea0:	2101      	movs	r1, #1
 800eea2:	f7ff febb 	bl	800ec1c <_Balloc>
 800eea6:	4602      	mov	r2, r0
 800eea8:	b928      	cbnz	r0, 800eeb6 <__i2b+0x1a>
 800eeaa:	4b05      	ldr	r3, [pc, #20]	; (800eec0 <__i2b+0x24>)
 800eeac:	4805      	ldr	r0, [pc, #20]	; (800eec4 <__i2b+0x28>)
 800eeae:	f240 1145 	movw	r1, #325	; 0x145
 800eeb2:	f000 fd15 	bl	800f8e0 <__assert_func>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	6144      	str	r4, [r0, #20]
 800eeba:	6103      	str	r3, [r0, #16]
 800eebc:	bd10      	pop	{r4, pc}
 800eebe:	bf00      	nop
 800eec0:	08011045 	.word	0x08011045
 800eec4:	080110c7 	.word	0x080110c7

0800eec8 <__multiply>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	4691      	mov	r9, r2
 800eece:	690a      	ldr	r2, [r1, #16]
 800eed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	bfb8      	it	lt
 800eed8:	460b      	movlt	r3, r1
 800eeda:	460c      	mov	r4, r1
 800eedc:	bfbc      	itt	lt
 800eede:	464c      	movlt	r4, r9
 800eee0:	4699      	movlt	r9, r3
 800eee2:	6927      	ldr	r7, [r4, #16]
 800eee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	6861      	ldr	r1, [r4, #4]
 800eeec:	eb07 060a 	add.w	r6, r7, sl
 800eef0:	42b3      	cmp	r3, r6
 800eef2:	b085      	sub	sp, #20
 800eef4:	bfb8      	it	lt
 800eef6:	3101      	addlt	r1, #1
 800eef8:	f7ff fe90 	bl	800ec1c <_Balloc>
 800eefc:	b930      	cbnz	r0, 800ef0c <__multiply+0x44>
 800eefe:	4602      	mov	r2, r0
 800ef00:	4b44      	ldr	r3, [pc, #272]	; (800f014 <__multiply+0x14c>)
 800ef02:	4845      	ldr	r0, [pc, #276]	; (800f018 <__multiply+0x150>)
 800ef04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ef08:	f000 fcea 	bl	800f8e0 <__assert_func>
 800ef0c:	f100 0514 	add.w	r5, r0, #20
 800ef10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef14:	462b      	mov	r3, r5
 800ef16:	2200      	movs	r2, #0
 800ef18:	4543      	cmp	r3, r8
 800ef1a:	d321      	bcc.n	800ef60 <__multiply+0x98>
 800ef1c:	f104 0314 	add.w	r3, r4, #20
 800ef20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef24:	f109 0314 	add.w	r3, r9, #20
 800ef28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ef2c:	9202      	str	r2, [sp, #8]
 800ef2e:	1b3a      	subs	r2, r7, r4
 800ef30:	3a15      	subs	r2, #21
 800ef32:	f022 0203 	bic.w	r2, r2, #3
 800ef36:	3204      	adds	r2, #4
 800ef38:	f104 0115 	add.w	r1, r4, #21
 800ef3c:	428f      	cmp	r7, r1
 800ef3e:	bf38      	it	cc
 800ef40:	2204      	movcc	r2, #4
 800ef42:	9201      	str	r2, [sp, #4]
 800ef44:	9a02      	ldr	r2, [sp, #8]
 800ef46:	9303      	str	r3, [sp, #12]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d80c      	bhi.n	800ef66 <__multiply+0x9e>
 800ef4c:	2e00      	cmp	r6, #0
 800ef4e:	dd03      	ble.n	800ef58 <__multiply+0x90>
 800ef50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d05b      	beq.n	800f010 <__multiply+0x148>
 800ef58:	6106      	str	r6, [r0, #16]
 800ef5a:	b005      	add	sp, #20
 800ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef60:	f843 2b04 	str.w	r2, [r3], #4
 800ef64:	e7d8      	b.n	800ef18 <__multiply+0x50>
 800ef66:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef6a:	f1ba 0f00 	cmp.w	sl, #0
 800ef6e:	d024      	beq.n	800efba <__multiply+0xf2>
 800ef70:	f104 0e14 	add.w	lr, r4, #20
 800ef74:	46a9      	mov	r9, r5
 800ef76:	f04f 0c00 	mov.w	ip, #0
 800ef7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef7e:	f8d9 1000 	ldr.w	r1, [r9]
 800ef82:	fa1f fb82 	uxth.w	fp, r2
 800ef86:	b289      	uxth	r1, r1
 800ef88:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef90:	f8d9 2000 	ldr.w	r2, [r9]
 800ef94:	4461      	add	r1, ip
 800ef96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef9a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800efa2:	b289      	uxth	r1, r1
 800efa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800efa8:	4577      	cmp	r7, lr
 800efaa:	f849 1b04 	str.w	r1, [r9], #4
 800efae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800efb2:	d8e2      	bhi.n	800ef7a <__multiply+0xb2>
 800efb4:	9a01      	ldr	r2, [sp, #4]
 800efb6:	f845 c002 	str.w	ip, [r5, r2]
 800efba:	9a03      	ldr	r2, [sp, #12]
 800efbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800efc0:	3304      	adds	r3, #4
 800efc2:	f1b9 0f00 	cmp.w	r9, #0
 800efc6:	d021      	beq.n	800f00c <__multiply+0x144>
 800efc8:	6829      	ldr	r1, [r5, #0]
 800efca:	f104 0c14 	add.w	ip, r4, #20
 800efce:	46ae      	mov	lr, r5
 800efd0:	f04f 0a00 	mov.w	sl, #0
 800efd4:	f8bc b000 	ldrh.w	fp, [ip]
 800efd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800efdc:	fb09 220b 	mla	r2, r9, fp, r2
 800efe0:	4452      	add	r2, sl
 800efe2:	b289      	uxth	r1, r1
 800efe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800efe8:	f84e 1b04 	str.w	r1, [lr], #4
 800efec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eff0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eff4:	f8be 1000 	ldrh.w	r1, [lr]
 800eff8:	fb09 110a 	mla	r1, r9, sl, r1
 800effc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f000:	4567      	cmp	r7, ip
 800f002:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f006:	d8e5      	bhi.n	800efd4 <__multiply+0x10c>
 800f008:	9a01      	ldr	r2, [sp, #4]
 800f00a:	50a9      	str	r1, [r5, r2]
 800f00c:	3504      	adds	r5, #4
 800f00e:	e799      	b.n	800ef44 <__multiply+0x7c>
 800f010:	3e01      	subs	r6, #1
 800f012:	e79b      	b.n	800ef4c <__multiply+0x84>
 800f014:	08011045 	.word	0x08011045
 800f018:	080110c7 	.word	0x080110c7

0800f01c <__pow5mult>:
 800f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f020:	4615      	mov	r5, r2
 800f022:	f012 0203 	ands.w	r2, r2, #3
 800f026:	4606      	mov	r6, r0
 800f028:	460f      	mov	r7, r1
 800f02a:	d007      	beq.n	800f03c <__pow5mult+0x20>
 800f02c:	4c25      	ldr	r4, [pc, #148]	; (800f0c4 <__pow5mult+0xa8>)
 800f02e:	3a01      	subs	r2, #1
 800f030:	2300      	movs	r3, #0
 800f032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f036:	f7ff fe53 	bl	800ece0 <__multadd>
 800f03a:	4607      	mov	r7, r0
 800f03c:	10ad      	asrs	r5, r5, #2
 800f03e:	d03d      	beq.n	800f0bc <__pow5mult+0xa0>
 800f040:	69f4      	ldr	r4, [r6, #28]
 800f042:	b97c      	cbnz	r4, 800f064 <__pow5mult+0x48>
 800f044:	2010      	movs	r0, #16
 800f046:	f7ff fc75 	bl	800e934 <malloc>
 800f04a:	4602      	mov	r2, r0
 800f04c:	61f0      	str	r0, [r6, #28]
 800f04e:	b928      	cbnz	r0, 800f05c <__pow5mult+0x40>
 800f050:	4b1d      	ldr	r3, [pc, #116]	; (800f0c8 <__pow5mult+0xac>)
 800f052:	481e      	ldr	r0, [pc, #120]	; (800f0cc <__pow5mult+0xb0>)
 800f054:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f058:	f000 fc42 	bl	800f8e0 <__assert_func>
 800f05c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f060:	6004      	str	r4, [r0, #0]
 800f062:	60c4      	str	r4, [r0, #12]
 800f064:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f06c:	b94c      	cbnz	r4, 800f082 <__pow5mult+0x66>
 800f06e:	f240 2171 	movw	r1, #625	; 0x271
 800f072:	4630      	mov	r0, r6
 800f074:	f7ff ff12 	bl	800ee9c <__i2b>
 800f078:	2300      	movs	r3, #0
 800f07a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f07e:	4604      	mov	r4, r0
 800f080:	6003      	str	r3, [r0, #0]
 800f082:	f04f 0900 	mov.w	r9, #0
 800f086:	07eb      	lsls	r3, r5, #31
 800f088:	d50a      	bpl.n	800f0a0 <__pow5mult+0x84>
 800f08a:	4639      	mov	r1, r7
 800f08c:	4622      	mov	r2, r4
 800f08e:	4630      	mov	r0, r6
 800f090:	f7ff ff1a 	bl	800eec8 <__multiply>
 800f094:	4639      	mov	r1, r7
 800f096:	4680      	mov	r8, r0
 800f098:	4630      	mov	r0, r6
 800f09a:	f7ff fdff 	bl	800ec9c <_Bfree>
 800f09e:	4647      	mov	r7, r8
 800f0a0:	106d      	asrs	r5, r5, #1
 800f0a2:	d00b      	beq.n	800f0bc <__pow5mult+0xa0>
 800f0a4:	6820      	ldr	r0, [r4, #0]
 800f0a6:	b938      	cbnz	r0, 800f0b8 <__pow5mult+0x9c>
 800f0a8:	4622      	mov	r2, r4
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f7ff ff0b 	bl	800eec8 <__multiply>
 800f0b2:	6020      	str	r0, [r4, #0]
 800f0b4:	f8c0 9000 	str.w	r9, [r0]
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	e7e4      	b.n	800f086 <__pow5mult+0x6a>
 800f0bc:	4638      	mov	r0, r7
 800f0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0c2:	bf00      	nop
 800f0c4:	08011210 	.word	0x08011210
 800f0c8:	08010fd6 	.word	0x08010fd6
 800f0cc:	080110c7 	.word	0x080110c7

0800f0d0 <__lshift>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	6849      	ldr	r1, [r1, #4]
 800f0d8:	6923      	ldr	r3, [r4, #16]
 800f0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0de:	68a3      	ldr	r3, [r4, #8]
 800f0e0:	4607      	mov	r7, r0
 800f0e2:	4691      	mov	r9, r2
 800f0e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0e8:	f108 0601 	add.w	r6, r8, #1
 800f0ec:	42b3      	cmp	r3, r6
 800f0ee:	db0b      	blt.n	800f108 <__lshift+0x38>
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7ff fd93 	bl	800ec1c <_Balloc>
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	b948      	cbnz	r0, 800f10e <__lshift+0x3e>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	4b28      	ldr	r3, [pc, #160]	; (800f1a0 <__lshift+0xd0>)
 800f0fe:	4829      	ldr	r0, [pc, #164]	; (800f1a4 <__lshift+0xd4>)
 800f100:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f104:	f000 fbec 	bl	800f8e0 <__assert_func>
 800f108:	3101      	adds	r1, #1
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	e7ee      	b.n	800f0ec <__lshift+0x1c>
 800f10e:	2300      	movs	r3, #0
 800f110:	f100 0114 	add.w	r1, r0, #20
 800f114:	f100 0210 	add.w	r2, r0, #16
 800f118:	4618      	mov	r0, r3
 800f11a:	4553      	cmp	r3, sl
 800f11c:	db33      	blt.n	800f186 <__lshift+0xb6>
 800f11e:	6920      	ldr	r0, [r4, #16]
 800f120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f124:	f104 0314 	add.w	r3, r4, #20
 800f128:	f019 091f 	ands.w	r9, r9, #31
 800f12c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f130:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f134:	d02b      	beq.n	800f18e <__lshift+0xbe>
 800f136:	f1c9 0e20 	rsb	lr, r9, #32
 800f13a:	468a      	mov	sl, r1
 800f13c:	2200      	movs	r2, #0
 800f13e:	6818      	ldr	r0, [r3, #0]
 800f140:	fa00 f009 	lsl.w	r0, r0, r9
 800f144:	4310      	orrs	r0, r2
 800f146:	f84a 0b04 	str.w	r0, [sl], #4
 800f14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f14e:	459c      	cmp	ip, r3
 800f150:	fa22 f20e 	lsr.w	r2, r2, lr
 800f154:	d8f3      	bhi.n	800f13e <__lshift+0x6e>
 800f156:	ebac 0304 	sub.w	r3, ip, r4
 800f15a:	3b15      	subs	r3, #21
 800f15c:	f023 0303 	bic.w	r3, r3, #3
 800f160:	3304      	adds	r3, #4
 800f162:	f104 0015 	add.w	r0, r4, #21
 800f166:	4584      	cmp	ip, r0
 800f168:	bf38      	it	cc
 800f16a:	2304      	movcc	r3, #4
 800f16c:	50ca      	str	r2, [r1, r3]
 800f16e:	b10a      	cbz	r2, 800f174 <__lshift+0xa4>
 800f170:	f108 0602 	add.w	r6, r8, #2
 800f174:	3e01      	subs	r6, #1
 800f176:	4638      	mov	r0, r7
 800f178:	612e      	str	r6, [r5, #16]
 800f17a:	4621      	mov	r1, r4
 800f17c:	f7ff fd8e 	bl	800ec9c <_Bfree>
 800f180:	4628      	mov	r0, r5
 800f182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f186:	f842 0f04 	str.w	r0, [r2, #4]!
 800f18a:	3301      	adds	r3, #1
 800f18c:	e7c5      	b.n	800f11a <__lshift+0x4a>
 800f18e:	3904      	subs	r1, #4
 800f190:	f853 2b04 	ldr.w	r2, [r3], #4
 800f194:	f841 2f04 	str.w	r2, [r1, #4]!
 800f198:	459c      	cmp	ip, r3
 800f19a:	d8f9      	bhi.n	800f190 <__lshift+0xc0>
 800f19c:	e7ea      	b.n	800f174 <__lshift+0xa4>
 800f19e:	bf00      	nop
 800f1a0:	08011045 	.word	0x08011045
 800f1a4:	080110c7 	.word	0x080110c7

0800f1a8 <__mcmp>:
 800f1a8:	b530      	push	{r4, r5, lr}
 800f1aa:	6902      	ldr	r2, [r0, #16]
 800f1ac:	690c      	ldr	r4, [r1, #16]
 800f1ae:	1b12      	subs	r2, r2, r4
 800f1b0:	d10e      	bne.n	800f1d0 <__mcmp+0x28>
 800f1b2:	f100 0314 	add.w	r3, r0, #20
 800f1b6:	3114      	adds	r1, #20
 800f1b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f1bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f1c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f1c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f1c8:	42a5      	cmp	r5, r4
 800f1ca:	d003      	beq.n	800f1d4 <__mcmp+0x2c>
 800f1cc:	d305      	bcc.n	800f1da <__mcmp+0x32>
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	bd30      	pop	{r4, r5, pc}
 800f1d4:	4283      	cmp	r3, r0
 800f1d6:	d3f3      	bcc.n	800f1c0 <__mcmp+0x18>
 800f1d8:	e7fa      	b.n	800f1d0 <__mcmp+0x28>
 800f1da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1de:	e7f7      	b.n	800f1d0 <__mcmp+0x28>

0800f1e0 <__mdiff>:
 800f1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	4690      	mov	r8, r2
 800f1ee:	f7ff ffdb 	bl	800f1a8 <__mcmp>
 800f1f2:	1e05      	subs	r5, r0, #0
 800f1f4:	d110      	bne.n	800f218 <__mdiff+0x38>
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	f7ff fd0f 	bl	800ec1c <_Balloc>
 800f1fe:	b930      	cbnz	r0, 800f20e <__mdiff+0x2e>
 800f200:	4b3a      	ldr	r3, [pc, #232]	; (800f2ec <__mdiff+0x10c>)
 800f202:	4602      	mov	r2, r0
 800f204:	f240 2137 	movw	r1, #567	; 0x237
 800f208:	4839      	ldr	r0, [pc, #228]	; (800f2f0 <__mdiff+0x110>)
 800f20a:	f000 fb69 	bl	800f8e0 <__assert_func>
 800f20e:	2301      	movs	r3, #1
 800f210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f218:	bfa4      	itt	ge
 800f21a:	4643      	movge	r3, r8
 800f21c:	46a0      	movge	r8, r4
 800f21e:	4630      	mov	r0, r6
 800f220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f224:	bfa6      	itte	ge
 800f226:	461c      	movge	r4, r3
 800f228:	2500      	movge	r5, #0
 800f22a:	2501      	movlt	r5, #1
 800f22c:	f7ff fcf6 	bl	800ec1c <_Balloc>
 800f230:	b920      	cbnz	r0, 800f23c <__mdiff+0x5c>
 800f232:	4b2e      	ldr	r3, [pc, #184]	; (800f2ec <__mdiff+0x10c>)
 800f234:	4602      	mov	r2, r0
 800f236:	f240 2145 	movw	r1, #581	; 0x245
 800f23a:	e7e5      	b.n	800f208 <__mdiff+0x28>
 800f23c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f240:	6926      	ldr	r6, [r4, #16]
 800f242:	60c5      	str	r5, [r0, #12]
 800f244:	f104 0914 	add.w	r9, r4, #20
 800f248:	f108 0514 	add.w	r5, r8, #20
 800f24c:	f100 0e14 	add.w	lr, r0, #20
 800f250:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f254:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f258:	f108 0210 	add.w	r2, r8, #16
 800f25c:	46f2      	mov	sl, lr
 800f25e:	2100      	movs	r1, #0
 800f260:	f859 3b04 	ldr.w	r3, [r9], #4
 800f264:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f268:	fa11 f88b 	uxtah	r8, r1, fp
 800f26c:	b299      	uxth	r1, r3
 800f26e:	0c1b      	lsrs	r3, r3, #16
 800f270:	eba8 0801 	sub.w	r8, r8, r1
 800f274:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f278:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f27c:	fa1f f888 	uxth.w	r8, r8
 800f280:	1419      	asrs	r1, r3, #16
 800f282:	454e      	cmp	r6, r9
 800f284:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f288:	f84a 3b04 	str.w	r3, [sl], #4
 800f28c:	d8e8      	bhi.n	800f260 <__mdiff+0x80>
 800f28e:	1b33      	subs	r3, r6, r4
 800f290:	3b15      	subs	r3, #21
 800f292:	f023 0303 	bic.w	r3, r3, #3
 800f296:	3304      	adds	r3, #4
 800f298:	3415      	adds	r4, #21
 800f29a:	42a6      	cmp	r6, r4
 800f29c:	bf38      	it	cc
 800f29e:	2304      	movcc	r3, #4
 800f2a0:	441d      	add	r5, r3
 800f2a2:	4473      	add	r3, lr
 800f2a4:	469e      	mov	lr, r3
 800f2a6:	462e      	mov	r6, r5
 800f2a8:	4566      	cmp	r6, ip
 800f2aa:	d30e      	bcc.n	800f2ca <__mdiff+0xea>
 800f2ac:	f10c 0203 	add.w	r2, ip, #3
 800f2b0:	1b52      	subs	r2, r2, r5
 800f2b2:	f022 0203 	bic.w	r2, r2, #3
 800f2b6:	3d03      	subs	r5, #3
 800f2b8:	45ac      	cmp	ip, r5
 800f2ba:	bf38      	it	cc
 800f2bc:	2200      	movcc	r2, #0
 800f2be:	4413      	add	r3, r2
 800f2c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f2c4:	b17a      	cbz	r2, 800f2e6 <__mdiff+0x106>
 800f2c6:	6107      	str	r7, [r0, #16]
 800f2c8:	e7a4      	b.n	800f214 <__mdiff+0x34>
 800f2ca:	f856 8b04 	ldr.w	r8, [r6], #4
 800f2ce:	fa11 f288 	uxtah	r2, r1, r8
 800f2d2:	1414      	asrs	r4, r2, #16
 800f2d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f2d8:	b292      	uxth	r2, r2
 800f2da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f2de:	f84e 2b04 	str.w	r2, [lr], #4
 800f2e2:	1421      	asrs	r1, r4, #16
 800f2e4:	e7e0      	b.n	800f2a8 <__mdiff+0xc8>
 800f2e6:	3f01      	subs	r7, #1
 800f2e8:	e7ea      	b.n	800f2c0 <__mdiff+0xe0>
 800f2ea:	bf00      	nop
 800f2ec:	08011045 	.word	0x08011045
 800f2f0:	080110c7 	.word	0x080110c7

0800f2f4 <__ulp>:
 800f2f4:	b082      	sub	sp, #8
 800f2f6:	ed8d 0b00 	vstr	d0, [sp]
 800f2fa:	9a01      	ldr	r2, [sp, #4]
 800f2fc:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <__ulp+0x48>)
 800f2fe:	4013      	ands	r3, r2
 800f300:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f304:	2b00      	cmp	r3, #0
 800f306:	dc08      	bgt.n	800f31a <__ulp+0x26>
 800f308:	425b      	negs	r3, r3
 800f30a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f30e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f312:	da04      	bge.n	800f31e <__ulp+0x2a>
 800f314:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f318:	4113      	asrs	r3, r2
 800f31a:	2200      	movs	r2, #0
 800f31c:	e008      	b.n	800f330 <__ulp+0x3c>
 800f31e:	f1a2 0314 	sub.w	r3, r2, #20
 800f322:	2b1e      	cmp	r3, #30
 800f324:	bfda      	itte	le
 800f326:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f32a:	40da      	lsrle	r2, r3
 800f32c:	2201      	movgt	r2, #1
 800f32e:	2300      	movs	r3, #0
 800f330:	4619      	mov	r1, r3
 800f332:	4610      	mov	r0, r2
 800f334:	ec41 0b10 	vmov	d0, r0, r1
 800f338:	b002      	add	sp, #8
 800f33a:	4770      	bx	lr
 800f33c:	7ff00000 	.word	0x7ff00000

0800f340 <__b2d>:
 800f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f344:	6906      	ldr	r6, [r0, #16]
 800f346:	f100 0814 	add.w	r8, r0, #20
 800f34a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f34e:	1f37      	subs	r7, r6, #4
 800f350:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f354:	4610      	mov	r0, r2
 800f356:	f7ff fd53 	bl	800ee00 <__hi0bits>
 800f35a:	f1c0 0320 	rsb	r3, r0, #32
 800f35e:	280a      	cmp	r0, #10
 800f360:	600b      	str	r3, [r1, #0]
 800f362:	491b      	ldr	r1, [pc, #108]	; (800f3d0 <__b2d+0x90>)
 800f364:	dc15      	bgt.n	800f392 <__b2d+0x52>
 800f366:	f1c0 0c0b 	rsb	ip, r0, #11
 800f36a:	fa22 f30c 	lsr.w	r3, r2, ip
 800f36e:	45b8      	cmp	r8, r7
 800f370:	ea43 0501 	orr.w	r5, r3, r1
 800f374:	bf34      	ite	cc
 800f376:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f37a:	2300      	movcs	r3, #0
 800f37c:	3015      	adds	r0, #21
 800f37e:	fa02 f000 	lsl.w	r0, r2, r0
 800f382:	fa23 f30c 	lsr.w	r3, r3, ip
 800f386:	4303      	orrs	r3, r0
 800f388:	461c      	mov	r4, r3
 800f38a:	ec45 4b10 	vmov	d0, r4, r5
 800f38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f392:	45b8      	cmp	r8, r7
 800f394:	bf3a      	itte	cc
 800f396:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f39a:	f1a6 0708 	subcc.w	r7, r6, #8
 800f39e:	2300      	movcs	r3, #0
 800f3a0:	380b      	subs	r0, #11
 800f3a2:	d012      	beq.n	800f3ca <__b2d+0x8a>
 800f3a4:	f1c0 0120 	rsb	r1, r0, #32
 800f3a8:	fa23 f401 	lsr.w	r4, r3, r1
 800f3ac:	4082      	lsls	r2, r0
 800f3ae:	4322      	orrs	r2, r4
 800f3b0:	4547      	cmp	r7, r8
 800f3b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f3b6:	bf8c      	ite	hi
 800f3b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f3bc:	2200      	movls	r2, #0
 800f3be:	4083      	lsls	r3, r0
 800f3c0:	40ca      	lsrs	r2, r1
 800f3c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	e7de      	b.n	800f388 <__b2d+0x48>
 800f3ca:	ea42 0501 	orr.w	r5, r2, r1
 800f3ce:	e7db      	b.n	800f388 <__b2d+0x48>
 800f3d0:	3ff00000 	.word	0x3ff00000

0800f3d4 <__d2b>:
 800f3d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3d8:	460f      	mov	r7, r1
 800f3da:	2101      	movs	r1, #1
 800f3dc:	ec59 8b10 	vmov	r8, r9, d0
 800f3e0:	4616      	mov	r6, r2
 800f3e2:	f7ff fc1b 	bl	800ec1c <_Balloc>
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	b930      	cbnz	r0, 800f3f8 <__d2b+0x24>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	4b24      	ldr	r3, [pc, #144]	; (800f480 <__d2b+0xac>)
 800f3ee:	4825      	ldr	r0, [pc, #148]	; (800f484 <__d2b+0xb0>)
 800f3f0:	f240 310f 	movw	r1, #783	; 0x30f
 800f3f4:	f000 fa74 	bl	800f8e0 <__assert_func>
 800f3f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f3fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f400:	bb2d      	cbnz	r5, 800f44e <__d2b+0x7a>
 800f402:	9301      	str	r3, [sp, #4]
 800f404:	f1b8 0300 	subs.w	r3, r8, #0
 800f408:	d026      	beq.n	800f458 <__d2b+0x84>
 800f40a:	4668      	mov	r0, sp
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	f7ff fd17 	bl	800ee40 <__lo0bits>
 800f412:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f416:	b1e8      	cbz	r0, 800f454 <__d2b+0x80>
 800f418:	f1c0 0320 	rsb	r3, r0, #32
 800f41c:	fa02 f303 	lsl.w	r3, r2, r3
 800f420:	430b      	orrs	r3, r1
 800f422:	40c2      	lsrs	r2, r0
 800f424:	6163      	str	r3, [r4, #20]
 800f426:	9201      	str	r2, [sp, #4]
 800f428:	9b01      	ldr	r3, [sp, #4]
 800f42a:	61a3      	str	r3, [r4, #24]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	bf14      	ite	ne
 800f430:	2202      	movne	r2, #2
 800f432:	2201      	moveq	r2, #1
 800f434:	6122      	str	r2, [r4, #16]
 800f436:	b1bd      	cbz	r5, 800f468 <__d2b+0x94>
 800f438:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f43c:	4405      	add	r5, r0
 800f43e:	603d      	str	r5, [r7, #0]
 800f440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f444:	6030      	str	r0, [r6, #0]
 800f446:	4620      	mov	r0, r4
 800f448:	b003      	add	sp, #12
 800f44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f44e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f452:	e7d6      	b.n	800f402 <__d2b+0x2e>
 800f454:	6161      	str	r1, [r4, #20]
 800f456:	e7e7      	b.n	800f428 <__d2b+0x54>
 800f458:	a801      	add	r0, sp, #4
 800f45a:	f7ff fcf1 	bl	800ee40 <__lo0bits>
 800f45e:	9b01      	ldr	r3, [sp, #4]
 800f460:	6163      	str	r3, [r4, #20]
 800f462:	3020      	adds	r0, #32
 800f464:	2201      	movs	r2, #1
 800f466:	e7e5      	b.n	800f434 <__d2b+0x60>
 800f468:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f46c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f470:	6038      	str	r0, [r7, #0]
 800f472:	6918      	ldr	r0, [r3, #16]
 800f474:	f7ff fcc4 	bl	800ee00 <__hi0bits>
 800f478:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f47c:	e7e2      	b.n	800f444 <__d2b+0x70>
 800f47e:	bf00      	nop
 800f480:	08011045 	.word	0x08011045
 800f484:	080110c7 	.word	0x080110c7

0800f488 <__ratio>:
 800f488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	4688      	mov	r8, r1
 800f48e:	4669      	mov	r1, sp
 800f490:	4681      	mov	r9, r0
 800f492:	f7ff ff55 	bl	800f340 <__b2d>
 800f496:	a901      	add	r1, sp, #4
 800f498:	4640      	mov	r0, r8
 800f49a:	ec55 4b10 	vmov	r4, r5, d0
 800f49e:	f7ff ff4f 	bl	800f340 <__b2d>
 800f4a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f4aa:	eba3 0c02 	sub.w	ip, r3, r2
 800f4ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f4b2:	1a9b      	subs	r3, r3, r2
 800f4b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f4b8:	ec51 0b10 	vmov	r0, r1, d0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	bfd6      	itet	le
 800f4c0:	460a      	movle	r2, r1
 800f4c2:	462a      	movgt	r2, r5
 800f4c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f4c8:	468b      	mov	fp, r1
 800f4ca:	462f      	mov	r7, r5
 800f4cc:	bfd4      	ite	le
 800f4ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f4d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	ee10 2a10 	vmov	r2, s0
 800f4dc:	465b      	mov	r3, fp
 800f4de:	4639      	mov	r1, r7
 800f4e0:	f7f1 f9b4 	bl	800084c <__aeabi_ddiv>
 800f4e4:	ec41 0b10 	vmov	d0, r0, r1
 800f4e8:	b003      	add	sp, #12
 800f4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4ee <__copybits>:
 800f4ee:	3901      	subs	r1, #1
 800f4f0:	b570      	push	{r4, r5, r6, lr}
 800f4f2:	1149      	asrs	r1, r1, #5
 800f4f4:	6914      	ldr	r4, [r2, #16]
 800f4f6:	3101      	adds	r1, #1
 800f4f8:	f102 0314 	add.w	r3, r2, #20
 800f4fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f500:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f504:	1f05      	subs	r5, r0, #4
 800f506:	42a3      	cmp	r3, r4
 800f508:	d30c      	bcc.n	800f524 <__copybits+0x36>
 800f50a:	1aa3      	subs	r3, r4, r2
 800f50c:	3b11      	subs	r3, #17
 800f50e:	f023 0303 	bic.w	r3, r3, #3
 800f512:	3211      	adds	r2, #17
 800f514:	42a2      	cmp	r2, r4
 800f516:	bf88      	it	hi
 800f518:	2300      	movhi	r3, #0
 800f51a:	4418      	add	r0, r3
 800f51c:	2300      	movs	r3, #0
 800f51e:	4288      	cmp	r0, r1
 800f520:	d305      	bcc.n	800f52e <__copybits+0x40>
 800f522:	bd70      	pop	{r4, r5, r6, pc}
 800f524:	f853 6b04 	ldr.w	r6, [r3], #4
 800f528:	f845 6f04 	str.w	r6, [r5, #4]!
 800f52c:	e7eb      	b.n	800f506 <__copybits+0x18>
 800f52e:	f840 3b04 	str.w	r3, [r0], #4
 800f532:	e7f4      	b.n	800f51e <__copybits+0x30>

0800f534 <__any_on>:
 800f534:	f100 0214 	add.w	r2, r0, #20
 800f538:	6900      	ldr	r0, [r0, #16]
 800f53a:	114b      	asrs	r3, r1, #5
 800f53c:	4298      	cmp	r0, r3
 800f53e:	b510      	push	{r4, lr}
 800f540:	db11      	blt.n	800f566 <__any_on+0x32>
 800f542:	dd0a      	ble.n	800f55a <__any_on+0x26>
 800f544:	f011 011f 	ands.w	r1, r1, #31
 800f548:	d007      	beq.n	800f55a <__any_on+0x26>
 800f54a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f54e:	fa24 f001 	lsr.w	r0, r4, r1
 800f552:	fa00 f101 	lsl.w	r1, r0, r1
 800f556:	428c      	cmp	r4, r1
 800f558:	d10b      	bne.n	800f572 <__any_on+0x3e>
 800f55a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f55e:	4293      	cmp	r3, r2
 800f560:	d803      	bhi.n	800f56a <__any_on+0x36>
 800f562:	2000      	movs	r0, #0
 800f564:	bd10      	pop	{r4, pc}
 800f566:	4603      	mov	r3, r0
 800f568:	e7f7      	b.n	800f55a <__any_on+0x26>
 800f56a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f56e:	2900      	cmp	r1, #0
 800f570:	d0f5      	beq.n	800f55e <__any_on+0x2a>
 800f572:	2001      	movs	r0, #1
 800f574:	e7f6      	b.n	800f564 <__any_on+0x30>

0800f576 <_realloc_r>:
 800f576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f57a:	4680      	mov	r8, r0
 800f57c:	4614      	mov	r4, r2
 800f57e:	460e      	mov	r6, r1
 800f580:	b921      	cbnz	r1, 800f58c <_realloc_r+0x16>
 800f582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f586:	4611      	mov	r1, r2
 800f588:	f7ff b9fc 	b.w	800e984 <_malloc_r>
 800f58c:	b92a      	cbnz	r2, 800f59a <_realloc_r+0x24>
 800f58e:	f7fe fb91 	bl	800dcb4 <_free_r>
 800f592:	4625      	mov	r5, r4
 800f594:	4628      	mov	r0, r5
 800f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f59a:	f000 f9d5 	bl	800f948 <_malloc_usable_size_r>
 800f59e:	4284      	cmp	r4, r0
 800f5a0:	4607      	mov	r7, r0
 800f5a2:	d802      	bhi.n	800f5aa <_realloc_r+0x34>
 800f5a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5a8:	d812      	bhi.n	800f5d0 <_realloc_r+0x5a>
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	4640      	mov	r0, r8
 800f5ae:	f7ff f9e9 	bl	800e984 <_malloc_r>
 800f5b2:	4605      	mov	r5, r0
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d0ed      	beq.n	800f594 <_realloc_r+0x1e>
 800f5b8:	42bc      	cmp	r4, r7
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	4631      	mov	r1, r6
 800f5be:	bf28      	it	cs
 800f5c0:	463a      	movcs	r2, r7
 800f5c2:	f7fd fcde 	bl	800cf82 <memcpy>
 800f5c6:	4631      	mov	r1, r6
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	f7fe fb73 	bl	800dcb4 <_free_r>
 800f5ce:	e7e1      	b.n	800f594 <_realloc_r+0x1e>
 800f5d0:	4635      	mov	r5, r6
 800f5d2:	e7df      	b.n	800f594 <_realloc_r+0x1e>

0800f5d4 <__swbuf_r>:
 800f5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d6:	460e      	mov	r6, r1
 800f5d8:	4614      	mov	r4, r2
 800f5da:	4605      	mov	r5, r0
 800f5dc:	b118      	cbz	r0, 800f5e6 <__swbuf_r+0x12>
 800f5de:	6a03      	ldr	r3, [r0, #32]
 800f5e0:	b90b      	cbnz	r3, 800f5e6 <__swbuf_r+0x12>
 800f5e2:	f7fc fc93 	bl	800bf0c <__sinit>
 800f5e6:	69a3      	ldr	r3, [r4, #24]
 800f5e8:	60a3      	str	r3, [r4, #8]
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	071a      	lsls	r2, r3, #28
 800f5ee:	d525      	bpl.n	800f63c <__swbuf_r+0x68>
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	b31b      	cbz	r3, 800f63c <__swbuf_r+0x68>
 800f5f4:	6823      	ldr	r3, [r4, #0]
 800f5f6:	6922      	ldr	r2, [r4, #16]
 800f5f8:	1a98      	subs	r0, r3, r2
 800f5fa:	6963      	ldr	r3, [r4, #20]
 800f5fc:	b2f6      	uxtb	r6, r6
 800f5fe:	4283      	cmp	r3, r0
 800f600:	4637      	mov	r7, r6
 800f602:	dc04      	bgt.n	800f60e <__swbuf_r+0x3a>
 800f604:	4621      	mov	r1, r4
 800f606:	4628      	mov	r0, r5
 800f608:	f7ff fad4 	bl	800ebb4 <_fflush_r>
 800f60c:	b9e0      	cbnz	r0, 800f648 <__swbuf_r+0x74>
 800f60e:	68a3      	ldr	r3, [r4, #8]
 800f610:	3b01      	subs	r3, #1
 800f612:	60a3      	str	r3, [r4, #8]
 800f614:	6823      	ldr	r3, [r4, #0]
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	6022      	str	r2, [r4, #0]
 800f61a:	701e      	strb	r6, [r3, #0]
 800f61c:	6962      	ldr	r2, [r4, #20]
 800f61e:	1c43      	adds	r3, r0, #1
 800f620:	429a      	cmp	r2, r3
 800f622:	d004      	beq.n	800f62e <__swbuf_r+0x5a>
 800f624:	89a3      	ldrh	r3, [r4, #12]
 800f626:	07db      	lsls	r3, r3, #31
 800f628:	d506      	bpl.n	800f638 <__swbuf_r+0x64>
 800f62a:	2e0a      	cmp	r6, #10
 800f62c:	d104      	bne.n	800f638 <__swbuf_r+0x64>
 800f62e:	4621      	mov	r1, r4
 800f630:	4628      	mov	r0, r5
 800f632:	f7ff fabf 	bl	800ebb4 <_fflush_r>
 800f636:	b938      	cbnz	r0, 800f648 <__swbuf_r+0x74>
 800f638:	4638      	mov	r0, r7
 800f63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f63c:	4621      	mov	r1, r4
 800f63e:	4628      	mov	r0, r5
 800f640:	f000 f806 	bl	800f650 <__swsetup_r>
 800f644:	2800      	cmp	r0, #0
 800f646:	d0d5      	beq.n	800f5f4 <__swbuf_r+0x20>
 800f648:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f64c:	e7f4      	b.n	800f638 <__swbuf_r+0x64>
	...

0800f650 <__swsetup_r>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4b2a      	ldr	r3, [pc, #168]	; (800f6fc <__swsetup_r+0xac>)
 800f654:	4605      	mov	r5, r0
 800f656:	6818      	ldr	r0, [r3, #0]
 800f658:	460c      	mov	r4, r1
 800f65a:	b118      	cbz	r0, 800f664 <__swsetup_r+0x14>
 800f65c:	6a03      	ldr	r3, [r0, #32]
 800f65e:	b90b      	cbnz	r3, 800f664 <__swsetup_r+0x14>
 800f660:	f7fc fc54 	bl	800bf0c <__sinit>
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f66a:	0718      	lsls	r0, r3, #28
 800f66c:	d422      	bmi.n	800f6b4 <__swsetup_r+0x64>
 800f66e:	06d9      	lsls	r1, r3, #27
 800f670:	d407      	bmi.n	800f682 <__swsetup_r+0x32>
 800f672:	2309      	movs	r3, #9
 800f674:	602b      	str	r3, [r5, #0]
 800f676:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f67a:	81a3      	strh	r3, [r4, #12]
 800f67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f680:	e034      	b.n	800f6ec <__swsetup_r+0x9c>
 800f682:	0758      	lsls	r0, r3, #29
 800f684:	d512      	bpl.n	800f6ac <__swsetup_r+0x5c>
 800f686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f688:	b141      	cbz	r1, 800f69c <__swsetup_r+0x4c>
 800f68a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f68e:	4299      	cmp	r1, r3
 800f690:	d002      	beq.n	800f698 <__swsetup_r+0x48>
 800f692:	4628      	mov	r0, r5
 800f694:	f7fe fb0e 	bl	800dcb4 <_free_r>
 800f698:	2300      	movs	r3, #0
 800f69a:	6363      	str	r3, [r4, #52]	; 0x34
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	6063      	str	r3, [r4, #4]
 800f6a8:	6923      	ldr	r3, [r4, #16]
 800f6aa:	6023      	str	r3, [r4, #0]
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	f043 0308 	orr.w	r3, r3, #8
 800f6b2:	81a3      	strh	r3, [r4, #12]
 800f6b4:	6923      	ldr	r3, [r4, #16]
 800f6b6:	b94b      	cbnz	r3, 800f6cc <__swsetup_r+0x7c>
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6c2:	d003      	beq.n	800f6cc <__swsetup_r+0x7c>
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f000 f84d 	bl	800f766 <__smakebuf_r>
 800f6cc:	89a0      	ldrh	r0, [r4, #12]
 800f6ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6d2:	f010 0301 	ands.w	r3, r0, #1
 800f6d6:	d00a      	beq.n	800f6ee <__swsetup_r+0x9e>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	60a3      	str	r3, [r4, #8]
 800f6dc:	6963      	ldr	r3, [r4, #20]
 800f6de:	425b      	negs	r3, r3
 800f6e0:	61a3      	str	r3, [r4, #24]
 800f6e2:	6923      	ldr	r3, [r4, #16]
 800f6e4:	b943      	cbnz	r3, 800f6f8 <__swsetup_r+0xa8>
 800f6e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6ea:	d1c4      	bne.n	800f676 <__swsetup_r+0x26>
 800f6ec:	bd38      	pop	{r3, r4, r5, pc}
 800f6ee:	0781      	lsls	r1, r0, #30
 800f6f0:	bf58      	it	pl
 800f6f2:	6963      	ldrpl	r3, [r4, #20]
 800f6f4:	60a3      	str	r3, [r4, #8]
 800f6f6:	e7f4      	b.n	800f6e2 <__swsetup_r+0x92>
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	e7f7      	b.n	800f6ec <__swsetup_r+0x9c>
 800f6fc:	20000208 	.word	0x20000208

0800f700 <__ascii_wctomb>:
 800f700:	b149      	cbz	r1, 800f716 <__ascii_wctomb+0x16>
 800f702:	2aff      	cmp	r2, #255	; 0xff
 800f704:	bf85      	ittet	hi
 800f706:	238a      	movhi	r3, #138	; 0x8a
 800f708:	6003      	strhi	r3, [r0, #0]
 800f70a:	700a      	strbls	r2, [r1, #0]
 800f70c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f710:	bf98      	it	ls
 800f712:	2001      	movls	r0, #1
 800f714:	4770      	bx	lr
 800f716:	4608      	mov	r0, r1
 800f718:	4770      	bx	lr

0800f71a <__swhatbuf_r>:
 800f71a:	b570      	push	{r4, r5, r6, lr}
 800f71c:	460c      	mov	r4, r1
 800f71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f722:	2900      	cmp	r1, #0
 800f724:	b096      	sub	sp, #88	; 0x58
 800f726:	4615      	mov	r5, r2
 800f728:	461e      	mov	r6, r3
 800f72a:	da0d      	bge.n	800f748 <__swhatbuf_r+0x2e>
 800f72c:	89a3      	ldrh	r3, [r4, #12]
 800f72e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f732:	f04f 0100 	mov.w	r1, #0
 800f736:	bf0c      	ite	eq
 800f738:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f73c:	2340      	movne	r3, #64	; 0x40
 800f73e:	2000      	movs	r0, #0
 800f740:	6031      	str	r1, [r6, #0]
 800f742:	602b      	str	r3, [r5, #0]
 800f744:	b016      	add	sp, #88	; 0x58
 800f746:	bd70      	pop	{r4, r5, r6, pc}
 800f748:	466a      	mov	r2, sp
 800f74a:	f000 f897 	bl	800f87c <_fstat_r>
 800f74e:	2800      	cmp	r0, #0
 800f750:	dbec      	blt.n	800f72c <__swhatbuf_r+0x12>
 800f752:	9901      	ldr	r1, [sp, #4]
 800f754:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f758:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f75c:	4259      	negs	r1, r3
 800f75e:	4159      	adcs	r1, r3
 800f760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f764:	e7eb      	b.n	800f73e <__swhatbuf_r+0x24>

0800f766 <__smakebuf_r>:
 800f766:	898b      	ldrh	r3, [r1, #12]
 800f768:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f76a:	079d      	lsls	r5, r3, #30
 800f76c:	4606      	mov	r6, r0
 800f76e:	460c      	mov	r4, r1
 800f770:	d507      	bpl.n	800f782 <__smakebuf_r+0x1c>
 800f772:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f776:	6023      	str	r3, [r4, #0]
 800f778:	6123      	str	r3, [r4, #16]
 800f77a:	2301      	movs	r3, #1
 800f77c:	6163      	str	r3, [r4, #20]
 800f77e:	b002      	add	sp, #8
 800f780:	bd70      	pop	{r4, r5, r6, pc}
 800f782:	ab01      	add	r3, sp, #4
 800f784:	466a      	mov	r2, sp
 800f786:	f7ff ffc8 	bl	800f71a <__swhatbuf_r>
 800f78a:	9900      	ldr	r1, [sp, #0]
 800f78c:	4605      	mov	r5, r0
 800f78e:	4630      	mov	r0, r6
 800f790:	f7ff f8f8 	bl	800e984 <_malloc_r>
 800f794:	b948      	cbnz	r0, 800f7aa <__smakebuf_r+0x44>
 800f796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79a:	059a      	lsls	r2, r3, #22
 800f79c:	d4ef      	bmi.n	800f77e <__smakebuf_r+0x18>
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	f043 0302 	orr.w	r3, r3, #2
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	e7e3      	b.n	800f772 <__smakebuf_r+0xc>
 800f7aa:	89a3      	ldrh	r3, [r4, #12]
 800f7ac:	6020      	str	r0, [r4, #0]
 800f7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7b2:	81a3      	strh	r3, [r4, #12]
 800f7b4:	9b00      	ldr	r3, [sp, #0]
 800f7b6:	6163      	str	r3, [r4, #20]
 800f7b8:	9b01      	ldr	r3, [sp, #4]
 800f7ba:	6120      	str	r0, [r4, #16]
 800f7bc:	b15b      	cbz	r3, 800f7d6 <__smakebuf_r+0x70>
 800f7be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f000 f86c 	bl	800f8a0 <_isatty_r>
 800f7c8:	b128      	cbz	r0, 800f7d6 <__smakebuf_r+0x70>
 800f7ca:	89a3      	ldrh	r3, [r4, #12]
 800f7cc:	f023 0303 	bic.w	r3, r3, #3
 800f7d0:	f043 0301 	orr.w	r3, r3, #1
 800f7d4:	81a3      	strh	r3, [r4, #12]
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	431d      	orrs	r5, r3
 800f7da:	81a5      	strh	r5, [r4, #12]
 800f7dc:	e7cf      	b.n	800f77e <__smakebuf_r+0x18>

0800f7de <_putc_r>:
 800f7de:	b570      	push	{r4, r5, r6, lr}
 800f7e0:	460d      	mov	r5, r1
 800f7e2:	4614      	mov	r4, r2
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	b118      	cbz	r0, 800f7f0 <_putc_r+0x12>
 800f7e8:	6a03      	ldr	r3, [r0, #32]
 800f7ea:	b90b      	cbnz	r3, 800f7f0 <_putc_r+0x12>
 800f7ec:	f7fc fb8e 	bl	800bf0c <__sinit>
 800f7f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7f2:	07d8      	lsls	r0, r3, #31
 800f7f4:	d405      	bmi.n	800f802 <_putc_r+0x24>
 800f7f6:	89a3      	ldrh	r3, [r4, #12]
 800f7f8:	0599      	lsls	r1, r3, #22
 800f7fa:	d402      	bmi.n	800f802 <_putc_r+0x24>
 800f7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7fe:	f7fd fbbe 	bl	800cf7e <__retarget_lock_acquire_recursive>
 800f802:	68a3      	ldr	r3, [r4, #8]
 800f804:	3b01      	subs	r3, #1
 800f806:	2b00      	cmp	r3, #0
 800f808:	60a3      	str	r3, [r4, #8]
 800f80a:	da05      	bge.n	800f818 <_putc_r+0x3a>
 800f80c:	69a2      	ldr	r2, [r4, #24]
 800f80e:	4293      	cmp	r3, r2
 800f810:	db12      	blt.n	800f838 <_putc_r+0x5a>
 800f812:	b2eb      	uxtb	r3, r5
 800f814:	2b0a      	cmp	r3, #10
 800f816:	d00f      	beq.n	800f838 <_putc_r+0x5a>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	1c5a      	adds	r2, r3, #1
 800f81c:	6022      	str	r2, [r4, #0]
 800f81e:	701d      	strb	r5, [r3, #0]
 800f820:	b2ed      	uxtb	r5, r5
 800f822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f824:	07da      	lsls	r2, r3, #31
 800f826:	d405      	bmi.n	800f834 <_putc_r+0x56>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	059b      	lsls	r3, r3, #22
 800f82c:	d402      	bmi.n	800f834 <_putc_r+0x56>
 800f82e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f830:	f7fd fba6 	bl	800cf80 <__retarget_lock_release_recursive>
 800f834:	4628      	mov	r0, r5
 800f836:	bd70      	pop	{r4, r5, r6, pc}
 800f838:	4629      	mov	r1, r5
 800f83a:	4622      	mov	r2, r4
 800f83c:	4630      	mov	r0, r6
 800f83e:	f7ff fec9 	bl	800f5d4 <__swbuf_r>
 800f842:	4605      	mov	r5, r0
 800f844:	e7ed      	b.n	800f822 <_putc_r+0x44>

0800f846 <memmove>:
 800f846:	4288      	cmp	r0, r1
 800f848:	b510      	push	{r4, lr}
 800f84a:	eb01 0402 	add.w	r4, r1, r2
 800f84e:	d902      	bls.n	800f856 <memmove+0x10>
 800f850:	4284      	cmp	r4, r0
 800f852:	4623      	mov	r3, r4
 800f854:	d807      	bhi.n	800f866 <memmove+0x20>
 800f856:	1e43      	subs	r3, r0, #1
 800f858:	42a1      	cmp	r1, r4
 800f85a:	d008      	beq.n	800f86e <memmove+0x28>
 800f85c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f860:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f864:	e7f8      	b.n	800f858 <memmove+0x12>
 800f866:	4402      	add	r2, r0
 800f868:	4601      	mov	r1, r0
 800f86a:	428a      	cmp	r2, r1
 800f86c:	d100      	bne.n	800f870 <memmove+0x2a>
 800f86e:	bd10      	pop	{r4, pc}
 800f870:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f874:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f878:	e7f7      	b.n	800f86a <memmove+0x24>
	...

0800f87c <_fstat_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	4d07      	ldr	r5, [pc, #28]	; (800f89c <_fstat_r+0x20>)
 800f880:	2300      	movs	r3, #0
 800f882:	4604      	mov	r4, r0
 800f884:	4608      	mov	r0, r1
 800f886:	4611      	mov	r1, r2
 800f888:	602b      	str	r3, [r5, #0]
 800f88a:	f7f3 fc98 	bl	80031be <_fstat>
 800f88e:	1c43      	adds	r3, r0, #1
 800f890:	d102      	bne.n	800f898 <_fstat_r+0x1c>
 800f892:	682b      	ldr	r3, [r5, #0]
 800f894:	b103      	cbz	r3, 800f898 <_fstat_r+0x1c>
 800f896:	6023      	str	r3, [r4, #0]
 800f898:	bd38      	pop	{r3, r4, r5, pc}
 800f89a:	bf00      	nop
 800f89c:	20000bf8 	.word	0x20000bf8

0800f8a0 <_isatty_r>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4d06      	ldr	r5, [pc, #24]	; (800f8bc <_isatty_r+0x1c>)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	4608      	mov	r0, r1
 800f8aa:	602b      	str	r3, [r5, #0]
 800f8ac:	f7f3 fc97 	bl	80031de <_isatty>
 800f8b0:	1c43      	adds	r3, r0, #1
 800f8b2:	d102      	bne.n	800f8ba <_isatty_r+0x1a>
 800f8b4:	682b      	ldr	r3, [r5, #0]
 800f8b6:	b103      	cbz	r3, 800f8ba <_isatty_r+0x1a>
 800f8b8:	6023      	str	r3, [r4, #0]
 800f8ba:	bd38      	pop	{r3, r4, r5, pc}
 800f8bc:	20000bf8 	.word	0x20000bf8

0800f8c0 <_sbrk_r>:
 800f8c0:	b538      	push	{r3, r4, r5, lr}
 800f8c2:	4d06      	ldr	r5, [pc, #24]	; (800f8dc <_sbrk_r+0x1c>)
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	4608      	mov	r0, r1
 800f8ca:	602b      	str	r3, [r5, #0]
 800f8cc:	f7f3 fca0 	bl	8003210 <_sbrk>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d102      	bne.n	800f8da <_sbrk_r+0x1a>
 800f8d4:	682b      	ldr	r3, [r5, #0]
 800f8d6:	b103      	cbz	r3, 800f8da <_sbrk_r+0x1a>
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	bd38      	pop	{r3, r4, r5, pc}
 800f8dc:	20000bf8 	.word	0x20000bf8

0800f8e0 <__assert_func>:
 800f8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8e2:	4614      	mov	r4, r2
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	4b09      	ldr	r3, [pc, #36]	; (800f90c <__assert_func+0x2c>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	68d8      	ldr	r0, [r3, #12]
 800f8ee:	b14c      	cbz	r4, 800f904 <__assert_func+0x24>
 800f8f0:	4b07      	ldr	r3, [pc, #28]	; (800f910 <__assert_func+0x30>)
 800f8f2:	9100      	str	r1, [sp, #0]
 800f8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8f8:	4906      	ldr	r1, [pc, #24]	; (800f914 <__assert_func+0x34>)
 800f8fa:	462b      	mov	r3, r5
 800f8fc:	f000 f82c 	bl	800f958 <fiprintf>
 800f900:	f000 f83c 	bl	800f97c <abort>
 800f904:	4b04      	ldr	r3, [pc, #16]	; (800f918 <__assert_func+0x38>)
 800f906:	461c      	mov	r4, r3
 800f908:	e7f3      	b.n	800f8f2 <__assert_func+0x12>
 800f90a:	bf00      	nop
 800f90c:	20000208 	.word	0x20000208
 800f910:	0801121c 	.word	0x0801121c
 800f914:	08011229 	.word	0x08011229
 800f918:	08011257 	.word	0x08011257

0800f91c <_calloc_r>:
 800f91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f91e:	fba1 2402 	umull	r2, r4, r1, r2
 800f922:	b94c      	cbnz	r4, 800f938 <_calloc_r+0x1c>
 800f924:	4611      	mov	r1, r2
 800f926:	9201      	str	r2, [sp, #4]
 800f928:	f7ff f82c 	bl	800e984 <_malloc_r>
 800f92c:	9a01      	ldr	r2, [sp, #4]
 800f92e:	4605      	mov	r5, r0
 800f930:	b930      	cbnz	r0, 800f940 <_calloc_r+0x24>
 800f932:	4628      	mov	r0, r5
 800f934:	b003      	add	sp, #12
 800f936:	bd30      	pop	{r4, r5, pc}
 800f938:	220c      	movs	r2, #12
 800f93a:	6002      	str	r2, [r0, #0]
 800f93c:	2500      	movs	r5, #0
 800f93e:	e7f8      	b.n	800f932 <_calloc_r+0x16>
 800f940:	4621      	mov	r1, r4
 800f942:	f7fd fa9f 	bl	800ce84 <memset>
 800f946:	e7f4      	b.n	800f932 <_calloc_r+0x16>

0800f948 <_malloc_usable_size_r>:
 800f948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f94c:	1f18      	subs	r0, r3, #4
 800f94e:	2b00      	cmp	r3, #0
 800f950:	bfbc      	itt	lt
 800f952:	580b      	ldrlt	r3, [r1, r0]
 800f954:	18c0      	addlt	r0, r0, r3
 800f956:	4770      	bx	lr

0800f958 <fiprintf>:
 800f958:	b40e      	push	{r1, r2, r3}
 800f95a:	b503      	push	{r0, r1, lr}
 800f95c:	4601      	mov	r1, r0
 800f95e:	ab03      	add	r3, sp, #12
 800f960:	4805      	ldr	r0, [pc, #20]	; (800f978 <fiprintf+0x20>)
 800f962:	f853 2b04 	ldr.w	r2, [r3], #4
 800f966:	6800      	ldr	r0, [r0, #0]
 800f968:	9301      	str	r3, [sp, #4]
 800f96a:	f7fe fec9 	bl	800e700 <_vfiprintf_r>
 800f96e:	b002      	add	sp, #8
 800f970:	f85d eb04 	ldr.w	lr, [sp], #4
 800f974:	b003      	add	sp, #12
 800f976:	4770      	bx	lr
 800f978:	20000208 	.word	0x20000208

0800f97c <abort>:
 800f97c:	b508      	push	{r3, lr}
 800f97e:	2006      	movs	r0, #6
 800f980:	f000 f82c 	bl	800f9dc <raise>
 800f984:	2001      	movs	r0, #1
 800f986:	f7f3 fbcb 	bl	8003120 <_exit>

0800f98a <_raise_r>:
 800f98a:	291f      	cmp	r1, #31
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4604      	mov	r4, r0
 800f990:	460d      	mov	r5, r1
 800f992:	d904      	bls.n	800f99e <_raise_r+0x14>
 800f994:	2316      	movs	r3, #22
 800f996:	6003      	str	r3, [r0, #0]
 800f998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f99c:	bd38      	pop	{r3, r4, r5, pc}
 800f99e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f9a0:	b112      	cbz	r2, 800f9a8 <_raise_r+0x1e>
 800f9a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9a6:	b94b      	cbnz	r3, 800f9bc <_raise_r+0x32>
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f000 f831 	bl	800fa10 <_getpid_r>
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	4601      	mov	r1, r0
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9b8:	f000 b818 	b.w	800f9ec <_kill_r>
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d00a      	beq.n	800f9d6 <_raise_r+0x4c>
 800f9c0:	1c59      	adds	r1, r3, #1
 800f9c2:	d103      	bne.n	800f9cc <_raise_r+0x42>
 800f9c4:	2316      	movs	r3, #22
 800f9c6:	6003      	str	r3, [r0, #0]
 800f9c8:	2001      	movs	r0, #1
 800f9ca:	e7e7      	b.n	800f99c <_raise_r+0x12>
 800f9cc:	2400      	movs	r4, #0
 800f9ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	4798      	blx	r3
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	e7e0      	b.n	800f99c <_raise_r+0x12>
	...

0800f9dc <raise>:
 800f9dc:	4b02      	ldr	r3, [pc, #8]	; (800f9e8 <raise+0xc>)
 800f9de:	4601      	mov	r1, r0
 800f9e0:	6818      	ldr	r0, [r3, #0]
 800f9e2:	f7ff bfd2 	b.w	800f98a <_raise_r>
 800f9e6:	bf00      	nop
 800f9e8:	20000208 	.word	0x20000208

0800f9ec <_kill_r>:
 800f9ec:	b538      	push	{r3, r4, r5, lr}
 800f9ee:	4d07      	ldr	r5, [pc, #28]	; (800fa0c <_kill_r+0x20>)
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	4608      	mov	r0, r1
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	602b      	str	r3, [r5, #0]
 800f9fa:	f7f3 fb81 	bl	8003100 <_kill>
 800f9fe:	1c43      	adds	r3, r0, #1
 800fa00:	d102      	bne.n	800fa08 <_kill_r+0x1c>
 800fa02:	682b      	ldr	r3, [r5, #0]
 800fa04:	b103      	cbz	r3, 800fa08 <_kill_r+0x1c>
 800fa06:	6023      	str	r3, [r4, #0]
 800fa08:	bd38      	pop	{r3, r4, r5, pc}
 800fa0a:	bf00      	nop
 800fa0c:	20000bf8 	.word	0x20000bf8

0800fa10 <_getpid_r>:
 800fa10:	f7f3 bb6e 	b.w	80030f0 <_getpid>

0800fa14 <sqrt>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	ed2d 8b02 	vpush	{d8}
 800fa1a:	ec55 4b10 	vmov	r4, r5, d0
 800fa1e:	f000 f87b 	bl	800fb18 <__ieee754_sqrt>
 800fa22:	4622      	mov	r2, r4
 800fa24:	462b      	mov	r3, r5
 800fa26:	4620      	mov	r0, r4
 800fa28:	4629      	mov	r1, r5
 800fa2a:	eeb0 8a40 	vmov.f32	s16, s0
 800fa2e:	eef0 8a60 	vmov.f32	s17, s1
 800fa32:	f7f1 f87b 	bl	8000b2c <__aeabi_dcmpun>
 800fa36:	b990      	cbnz	r0, 800fa5e <sqrt+0x4a>
 800fa38:	2200      	movs	r2, #0
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	4629      	mov	r1, r5
 800fa40:	f7f1 f84c 	bl	8000adc <__aeabi_dcmplt>
 800fa44:	b158      	cbz	r0, 800fa5e <sqrt+0x4a>
 800fa46:	f7fd fa6f 	bl	800cf28 <__errno>
 800fa4a:	2321      	movs	r3, #33	; 0x21
 800fa4c:	6003      	str	r3, [r0, #0]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	2300      	movs	r3, #0
 800fa52:	4610      	mov	r0, r2
 800fa54:	4619      	mov	r1, r3
 800fa56:	f7f0 fef9 	bl	800084c <__aeabi_ddiv>
 800fa5a:	ec41 0b18 	vmov	d8, r0, r1
 800fa5e:	eeb0 0a48 	vmov.f32	s0, s16
 800fa62:	eef0 0a68 	vmov.f32	s1, s17
 800fa66:	ecbd 8b02 	vpop	{d8}
 800fa6a:	bd38      	pop	{r3, r4, r5, pc}
 800fa6c:	0000      	movs	r0, r0
	...

0800fa70 <cos>:
 800fa70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa72:	ec53 2b10 	vmov	r2, r3, d0
 800fa76:	4826      	ldr	r0, [pc, #152]	; (800fb10 <cos+0xa0>)
 800fa78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fa7c:	4281      	cmp	r1, r0
 800fa7e:	dc06      	bgt.n	800fa8e <cos+0x1e>
 800fa80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fb08 <cos+0x98>
 800fa84:	b005      	add	sp, #20
 800fa86:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa8a:	f000 be79 	b.w	8010780 <__kernel_cos>
 800fa8e:	4821      	ldr	r0, [pc, #132]	; (800fb14 <cos+0xa4>)
 800fa90:	4281      	cmp	r1, r0
 800fa92:	dd09      	ble.n	800faa8 <cos+0x38>
 800fa94:	ee10 0a10 	vmov	r0, s0
 800fa98:	4619      	mov	r1, r3
 800fa9a:	f7f0 fbf5 	bl	8000288 <__aeabi_dsub>
 800fa9e:	ec41 0b10 	vmov	d0, r0, r1
 800faa2:	b005      	add	sp, #20
 800faa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800faa8:	4668      	mov	r0, sp
 800faaa:	f000 f911 	bl	800fcd0 <__ieee754_rem_pio2>
 800faae:	f000 0003 	and.w	r0, r0, #3
 800fab2:	2801      	cmp	r0, #1
 800fab4:	d00b      	beq.n	800face <cos+0x5e>
 800fab6:	2802      	cmp	r0, #2
 800fab8:	d016      	beq.n	800fae8 <cos+0x78>
 800faba:	b9e0      	cbnz	r0, 800faf6 <cos+0x86>
 800fabc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fac0:	ed9d 0b00 	vldr	d0, [sp]
 800fac4:	f000 fe5c 	bl	8010780 <__kernel_cos>
 800fac8:	ec51 0b10 	vmov	r0, r1, d0
 800facc:	e7e7      	b.n	800fa9e <cos+0x2e>
 800face:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fad2:	ed9d 0b00 	vldr	d0, [sp]
 800fad6:	f000 ff1b 	bl	8010910 <__kernel_sin>
 800fada:	ec53 2b10 	vmov	r2, r3, d0
 800fade:	ee10 0a10 	vmov	r0, s0
 800fae2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fae6:	e7da      	b.n	800fa9e <cos+0x2e>
 800fae8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800faec:	ed9d 0b00 	vldr	d0, [sp]
 800faf0:	f000 fe46 	bl	8010780 <__kernel_cos>
 800faf4:	e7f1      	b.n	800fada <cos+0x6a>
 800faf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fafa:	ed9d 0b00 	vldr	d0, [sp]
 800fafe:	2001      	movs	r0, #1
 800fb00:	f000 ff06 	bl	8010910 <__kernel_sin>
 800fb04:	e7e0      	b.n	800fac8 <cos+0x58>
 800fb06:	bf00      	nop
	...
 800fb10:	3fe921fb 	.word	0x3fe921fb
 800fb14:	7fefffff 	.word	0x7fefffff

0800fb18 <__ieee754_sqrt>:
 800fb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	ec55 4b10 	vmov	r4, r5, d0
 800fb20:	4e67      	ldr	r6, [pc, #412]	; (800fcc0 <__ieee754_sqrt+0x1a8>)
 800fb22:	43ae      	bics	r6, r5
 800fb24:	ee10 0a10 	vmov	r0, s0
 800fb28:	ee10 2a10 	vmov	r2, s0
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	462b      	mov	r3, r5
 800fb30:	d10d      	bne.n	800fb4e <__ieee754_sqrt+0x36>
 800fb32:	f7f0 fd61 	bl	80005f8 <__aeabi_dmul>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	f7f0 fba5 	bl	800028c <__adddf3>
 800fb42:	4604      	mov	r4, r0
 800fb44:	460d      	mov	r5, r1
 800fb46:	ec45 4b10 	vmov	d0, r4, r5
 800fb4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4e:	2d00      	cmp	r5, #0
 800fb50:	dc0b      	bgt.n	800fb6a <__ieee754_sqrt+0x52>
 800fb52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb56:	4326      	orrs	r6, r4
 800fb58:	d0f5      	beq.n	800fb46 <__ieee754_sqrt+0x2e>
 800fb5a:	b135      	cbz	r5, 800fb6a <__ieee754_sqrt+0x52>
 800fb5c:	f7f0 fb94 	bl	8000288 <__aeabi_dsub>
 800fb60:	4602      	mov	r2, r0
 800fb62:	460b      	mov	r3, r1
 800fb64:	f7f0 fe72 	bl	800084c <__aeabi_ddiv>
 800fb68:	e7eb      	b.n	800fb42 <__ieee754_sqrt+0x2a>
 800fb6a:	1509      	asrs	r1, r1, #20
 800fb6c:	f000 808d 	beq.w	800fc8a <__ieee754_sqrt+0x172>
 800fb70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb74:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fb78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb7c:	07c9      	lsls	r1, r1, #31
 800fb7e:	bf5c      	itt	pl
 800fb80:	005b      	lslpl	r3, r3, #1
 800fb82:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fb86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb8a:	bf58      	it	pl
 800fb8c:	0052      	lslpl	r2, r2, #1
 800fb8e:	2500      	movs	r5, #0
 800fb90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fb94:	1076      	asrs	r6, r6, #1
 800fb96:	0052      	lsls	r2, r2, #1
 800fb98:	f04f 0e16 	mov.w	lr, #22
 800fb9c:	46ac      	mov	ip, r5
 800fb9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fba2:	eb0c 0001 	add.w	r0, ip, r1
 800fba6:	4298      	cmp	r0, r3
 800fba8:	bfde      	ittt	le
 800fbaa:	1a1b      	suble	r3, r3, r0
 800fbac:	eb00 0c01 	addle.w	ip, r0, r1
 800fbb0:	186d      	addle	r5, r5, r1
 800fbb2:	005b      	lsls	r3, r3, #1
 800fbb4:	f1be 0e01 	subs.w	lr, lr, #1
 800fbb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fbbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fbc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fbc4:	d1ed      	bne.n	800fba2 <__ieee754_sqrt+0x8a>
 800fbc6:	4674      	mov	r4, lr
 800fbc8:	2720      	movs	r7, #32
 800fbca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fbce:	4563      	cmp	r3, ip
 800fbd0:	eb01 000e 	add.w	r0, r1, lr
 800fbd4:	dc02      	bgt.n	800fbdc <__ieee754_sqrt+0xc4>
 800fbd6:	d113      	bne.n	800fc00 <__ieee754_sqrt+0xe8>
 800fbd8:	4290      	cmp	r0, r2
 800fbda:	d811      	bhi.n	800fc00 <__ieee754_sqrt+0xe8>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	eb00 0e01 	add.w	lr, r0, r1
 800fbe2:	da57      	bge.n	800fc94 <__ieee754_sqrt+0x17c>
 800fbe4:	f1be 0f00 	cmp.w	lr, #0
 800fbe8:	db54      	blt.n	800fc94 <__ieee754_sqrt+0x17c>
 800fbea:	f10c 0801 	add.w	r8, ip, #1
 800fbee:	eba3 030c 	sub.w	r3, r3, ip
 800fbf2:	4290      	cmp	r0, r2
 800fbf4:	bf88      	it	hi
 800fbf6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800fbfa:	1a12      	subs	r2, r2, r0
 800fbfc:	440c      	add	r4, r1
 800fbfe:	46c4      	mov	ip, r8
 800fc00:	005b      	lsls	r3, r3, #1
 800fc02:	3f01      	subs	r7, #1
 800fc04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fc08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fc0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fc10:	d1dd      	bne.n	800fbce <__ieee754_sqrt+0xb6>
 800fc12:	4313      	orrs	r3, r2
 800fc14:	d01b      	beq.n	800fc4e <__ieee754_sqrt+0x136>
 800fc16:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fcc4 <__ieee754_sqrt+0x1ac>
 800fc1a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fcc8 <__ieee754_sqrt+0x1b0>
 800fc1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc22:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc26:	f7f0 fb2f 	bl	8000288 <__aeabi_dsub>
 800fc2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc2e:	4602      	mov	r2, r0
 800fc30:	460b      	mov	r3, r1
 800fc32:	4640      	mov	r0, r8
 800fc34:	4649      	mov	r1, r9
 800fc36:	f7f0 ff5b 	bl	8000af0 <__aeabi_dcmple>
 800fc3a:	b140      	cbz	r0, 800fc4e <__ieee754_sqrt+0x136>
 800fc3c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800fc40:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc44:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc48:	d126      	bne.n	800fc98 <__ieee754_sqrt+0x180>
 800fc4a:	3501      	adds	r5, #1
 800fc4c:	463c      	mov	r4, r7
 800fc4e:	106a      	asrs	r2, r5, #1
 800fc50:	0863      	lsrs	r3, r4, #1
 800fc52:	07e9      	lsls	r1, r5, #31
 800fc54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fc58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fc5c:	bf48      	it	mi
 800fc5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fc62:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fc66:	461c      	mov	r4, r3
 800fc68:	e76d      	b.n	800fb46 <__ieee754_sqrt+0x2e>
 800fc6a:	0ad3      	lsrs	r3, r2, #11
 800fc6c:	3815      	subs	r0, #21
 800fc6e:	0552      	lsls	r2, r2, #21
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d0fa      	beq.n	800fc6a <__ieee754_sqrt+0x152>
 800fc74:	02dc      	lsls	r4, r3, #11
 800fc76:	d50a      	bpl.n	800fc8e <__ieee754_sqrt+0x176>
 800fc78:	f1c1 0420 	rsb	r4, r1, #32
 800fc7c:	fa22 f404 	lsr.w	r4, r2, r4
 800fc80:	1e4d      	subs	r5, r1, #1
 800fc82:	408a      	lsls	r2, r1
 800fc84:	4323      	orrs	r3, r4
 800fc86:	1b41      	subs	r1, r0, r5
 800fc88:	e772      	b.n	800fb70 <__ieee754_sqrt+0x58>
 800fc8a:	4608      	mov	r0, r1
 800fc8c:	e7f0      	b.n	800fc70 <__ieee754_sqrt+0x158>
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	3101      	adds	r1, #1
 800fc92:	e7ef      	b.n	800fc74 <__ieee754_sqrt+0x15c>
 800fc94:	46e0      	mov	r8, ip
 800fc96:	e7aa      	b.n	800fbee <__ieee754_sqrt+0xd6>
 800fc98:	f7f0 faf8 	bl	800028c <__adddf3>
 800fc9c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fca0:	4602      	mov	r2, r0
 800fca2:	460b      	mov	r3, r1
 800fca4:	4640      	mov	r0, r8
 800fca6:	4649      	mov	r1, r9
 800fca8:	f7f0 ff18 	bl	8000adc <__aeabi_dcmplt>
 800fcac:	b120      	cbz	r0, 800fcb8 <__ieee754_sqrt+0x1a0>
 800fcae:	1ca0      	adds	r0, r4, #2
 800fcb0:	bf08      	it	eq
 800fcb2:	3501      	addeq	r5, #1
 800fcb4:	3402      	adds	r4, #2
 800fcb6:	e7ca      	b.n	800fc4e <__ieee754_sqrt+0x136>
 800fcb8:	3401      	adds	r4, #1
 800fcba:	f024 0401 	bic.w	r4, r4, #1
 800fcbe:	e7c6      	b.n	800fc4e <__ieee754_sqrt+0x136>
 800fcc0:	7ff00000 	.word	0x7ff00000
 800fcc4:	20000210 	.word	0x20000210
 800fcc8:	20000218 	.word	0x20000218
 800fccc:	00000000 	.word	0x00000000

0800fcd0 <__ieee754_rem_pio2>:
 800fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	ed2d 8b02 	vpush	{d8}
 800fcd8:	ec55 4b10 	vmov	r4, r5, d0
 800fcdc:	4bca      	ldr	r3, [pc, #808]	; (8010008 <__ieee754_rem_pio2+0x338>)
 800fcde:	b08b      	sub	sp, #44	; 0x2c
 800fce0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fce4:	4598      	cmp	r8, r3
 800fce6:	4682      	mov	sl, r0
 800fce8:	9502      	str	r5, [sp, #8]
 800fcea:	dc08      	bgt.n	800fcfe <__ieee754_rem_pio2+0x2e>
 800fcec:	2200      	movs	r2, #0
 800fcee:	2300      	movs	r3, #0
 800fcf0:	ed80 0b00 	vstr	d0, [r0]
 800fcf4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fcf8:	f04f 0b00 	mov.w	fp, #0
 800fcfc:	e028      	b.n	800fd50 <__ieee754_rem_pio2+0x80>
 800fcfe:	4bc3      	ldr	r3, [pc, #780]	; (801000c <__ieee754_rem_pio2+0x33c>)
 800fd00:	4598      	cmp	r8, r3
 800fd02:	dc78      	bgt.n	800fdf6 <__ieee754_rem_pio2+0x126>
 800fd04:	9b02      	ldr	r3, [sp, #8]
 800fd06:	4ec2      	ldr	r6, [pc, #776]	; (8010010 <__ieee754_rem_pio2+0x340>)
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	ee10 0a10 	vmov	r0, s0
 800fd0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ffd0 <__ieee754_rem_pio2+0x300>)
 800fd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd14:	4629      	mov	r1, r5
 800fd16:	dd39      	ble.n	800fd8c <__ieee754_rem_pio2+0xbc>
 800fd18:	f7f0 fab6 	bl	8000288 <__aeabi_dsub>
 800fd1c:	45b0      	cmp	r8, r6
 800fd1e:	4604      	mov	r4, r0
 800fd20:	460d      	mov	r5, r1
 800fd22:	d01b      	beq.n	800fd5c <__ieee754_rem_pio2+0x8c>
 800fd24:	a3ac      	add	r3, pc, #688	; (adr r3, 800ffd8 <__ieee754_rem_pio2+0x308>)
 800fd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2a:	f7f0 faad 	bl	8000288 <__aeabi_dsub>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	460b      	mov	r3, r1
 800fd32:	e9ca 2300 	strd	r2, r3, [sl]
 800fd36:	4620      	mov	r0, r4
 800fd38:	4629      	mov	r1, r5
 800fd3a:	f7f0 faa5 	bl	8000288 <__aeabi_dsub>
 800fd3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ffd8 <__ieee754_rem_pio2+0x308>)
 800fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd44:	f7f0 faa0 	bl	8000288 <__aeabi_dsub>
 800fd48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd4c:	f04f 0b01 	mov.w	fp, #1
 800fd50:	4658      	mov	r0, fp
 800fd52:	b00b      	add	sp, #44	; 0x2c
 800fd54:	ecbd 8b02 	vpop	{d8}
 800fd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ffe0 <__ieee754_rem_pio2+0x310>)
 800fd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd62:	f7f0 fa91 	bl	8000288 <__aeabi_dsub>
 800fd66:	a3a0      	add	r3, pc, #640	; (adr r3, 800ffe8 <__ieee754_rem_pio2+0x318>)
 800fd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	460d      	mov	r5, r1
 800fd70:	f7f0 fa8a 	bl	8000288 <__aeabi_dsub>
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	e9ca 2300 	strd	r2, r3, [sl]
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	4629      	mov	r1, r5
 800fd80:	f7f0 fa82 	bl	8000288 <__aeabi_dsub>
 800fd84:	a398      	add	r3, pc, #608	; (adr r3, 800ffe8 <__ieee754_rem_pio2+0x318>)
 800fd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8a:	e7db      	b.n	800fd44 <__ieee754_rem_pio2+0x74>
 800fd8c:	f7f0 fa7e 	bl	800028c <__adddf3>
 800fd90:	45b0      	cmp	r8, r6
 800fd92:	4604      	mov	r4, r0
 800fd94:	460d      	mov	r5, r1
 800fd96:	d016      	beq.n	800fdc6 <__ieee754_rem_pio2+0xf6>
 800fd98:	a38f      	add	r3, pc, #572	; (adr r3, 800ffd8 <__ieee754_rem_pio2+0x308>)
 800fd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9e:	f7f0 fa75 	bl	800028c <__adddf3>
 800fda2:	4602      	mov	r2, r0
 800fda4:	460b      	mov	r3, r1
 800fda6:	e9ca 2300 	strd	r2, r3, [sl]
 800fdaa:	4620      	mov	r0, r4
 800fdac:	4629      	mov	r1, r5
 800fdae:	f7f0 fa6b 	bl	8000288 <__aeabi_dsub>
 800fdb2:	a389      	add	r3, pc, #548	; (adr r3, 800ffd8 <__ieee754_rem_pio2+0x308>)
 800fdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb8:	f7f0 fa68 	bl	800028c <__adddf3>
 800fdbc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800fdc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fdc4:	e7c4      	b.n	800fd50 <__ieee754_rem_pio2+0x80>
 800fdc6:	a386      	add	r3, pc, #536	; (adr r3, 800ffe0 <__ieee754_rem_pio2+0x310>)
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f7f0 fa5e 	bl	800028c <__adddf3>
 800fdd0:	a385      	add	r3, pc, #532	; (adr r3, 800ffe8 <__ieee754_rem_pio2+0x318>)
 800fdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	460d      	mov	r5, r1
 800fdda:	f7f0 fa57 	bl	800028c <__adddf3>
 800fdde:	4602      	mov	r2, r0
 800fde0:	460b      	mov	r3, r1
 800fde2:	e9ca 2300 	strd	r2, r3, [sl]
 800fde6:	4620      	mov	r0, r4
 800fde8:	4629      	mov	r1, r5
 800fdea:	f7f0 fa4d 	bl	8000288 <__aeabi_dsub>
 800fdee:	a37e      	add	r3, pc, #504	; (adr r3, 800ffe8 <__ieee754_rem_pio2+0x318>)
 800fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf4:	e7e0      	b.n	800fdb8 <__ieee754_rem_pio2+0xe8>
 800fdf6:	4b87      	ldr	r3, [pc, #540]	; (8010014 <__ieee754_rem_pio2+0x344>)
 800fdf8:	4598      	cmp	r8, r3
 800fdfa:	f300 80d8 	bgt.w	800ffae <__ieee754_rem_pio2+0x2de>
 800fdfe:	f000 fe45 	bl	8010a8c <fabs>
 800fe02:	ec55 4b10 	vmov	r4, r5, d0
 800fe06:	ee10 0a10 	vmov	r0, s0
 800fe0a:	a379      	add	r3, pc, #484	; (adr r3, 800fff0 <__ieee754_rem_pio2+0x320>)
 800fe0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe10:	4629      	mov	r1, r5
 800fe12:	f7f0 fbf1 	bl	80005f8 <__aeabi_dmul>
 800fe16:	4b80      	ldr	r3, [pc, #512]	; (8010018 <__ieee754_rem_pio2+0x348>)
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f7f0 fa37 	bl	800028c <__adddf3>
 800fe1e:	f7f0 fe9b 	bl	8000b58 <__aeabi_d2iz>
 800fe22:	4683      	mov	fp, r0
 800fe24:	f7f0 fb7e 	bl	8000524 <__aeabi_i2d>
 800fe28:	4602      	mov	r2, r0
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	ec43 2b18 	vmov	d8, r2, r3
 800fe30:	a367      	add	r3, pc, #412	; (adr r3, 800ffd0 <__ieee754_rem_pio2+0x300>)
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	f7f0 fbdf 	bl	80005f8 <__aeabi_dmul>
 800fe3a:	4602      	mov	r2, r0
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	4620      	mov	r0, r4
 800fe40:	4629      	mov	r1, r5
 800fe42:	f7f0 fa21 	bl	8000288 <__aeabi_dsub>
 800fe46:	a364      	add	r3, pc, #400	; (adr r3, 800ffd8 <__ieee754_rem_pio2+0x308>)
 800fe48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	460f      	mov	r7, r1
 800fe50:	ec51 0b18 	vmov	r0, r1, d8
 800fe54:	f7f0 fbd0 	bl	80005f8 <__aeabi_dmul>
 800fe58:	f1bb 0f1f 	cmp.w	fp, #31
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	460d      	mov	r5, r1
 800fe60:	dc0d      	bgt.n	800fe7e <__ieee754_rem_pio2+0x1ae>
 800fe62:	4b6e      	ldr	r3, [pc, #440]	; (801001c <__ieee754_rem_pio2+0x34c>)
 800fe64:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800fe68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6c:	4543      	cmp	r3, r8
 800fe6e:	d006      	beq.n	800fe7e <__ieee754_rem_pio2+0x1ae>
 800fe70:	4622      	mov	r2, r4
 800fe72:	462b      	mov	r3, r5
 800fe74:	4630      	mov	r0, r6
 800fe76:	4639      	mov	r1, r7
 800fe78:	f7f0 fa06 	bl	8000288 <__aeabi_dsub>
 800fe7c:	e00e      	b.n	800fe9c <__ieee754_rem_pio2+0x1cc>
 800fe7e:	462b      	mov	r3, r5
 800fe80:	4622      	mov	r2, r4
 800fe82:	4630      	mov	r0, r6
 800fe84:	4639      	mov	r1, r7
 800fe86:	f7f0 f9ff 	bl	8000288 <__aeabi_dsub>
 800fe8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fe8e:	9303      	str	r3, [sp, #12]
 800fe90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe94:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fe98:	2b10      	cmp	r3, #16
 800fe9a:	dc02      	bgt.n	800fea2 <__ieee754_rem_pio2+0x1d2>
 800fe9c:	e9ca 0100 	strd	r0, r1, [sl]
 800fea0:	e039      	b.n	800ff16 <__ieee754_rem_pio2+0x246>
 800fea2:	a34f      	add	r3, pc, #316	; (adr r3, 800ffe0 <__ieee754_rem_pio2+0x310>)
 800fea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea8:	ec51 0b18 	vmov	r0, r1, d8
 800feac:	f7f0 fba4 	bl	80005f8 <__aeabi_dmul>
 800feb0:	4604      	mov	r4, r0
 800feb2:	460d      	mov	r5, r1
 800feb4:	4602      	mov	r2, r0
 800feb6:	460b      	mov	r3, r1
 800feb8:	4630      	mov	r0, r6
 800feba:	4639      	mov	r1, r7
 800febc:	f7f0 f9e4 	bl	8000288 <__aeabi_dsub>
 800fec0:	4602      	mov	r2, r0
 800fec2:	460b      	mov	r3, r1
 800fec4:	4680      	mov	r8, r0
 800fec6:	4689      	mov	r9, r1
 800fec8:	4630      	mov	r0, r6
 800feca:	4639      	mov	r1, r7
 800fecc:	f7f0 f9dc 	bl	8000288 <__aeabi_dsub>
 800fed0:	4622      	mov	r2, r4
 800fed2:	462b      	mov	r3, r5
 800fed4:	f7f0 f9d8 	bl	8000288 <__aeabi_dsub>
 800fed8:	a343      	add	r3, pc, #268	; (adr r3, 800ffe8 <__ieee754_rem_pio2+0x318>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	4604      	mov	r4, r0
 800fee0:	460d      	mov	r5, r1
 800fee2:	ec51 0b18 	vmov	r0, r1, d8
 800fee6:	f7f0 fb87 	bl	80005f8 <__aeabi_dmul>
 800feea:	4622      	mov	r2, r4
 800feec:	462b      	mov	r3, r5
 800feee:	f7f0 f9cb 	bl	8000288 <__aeabi_dsub>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	4604      	mov	r4, r0
 800fef8:	460d      	mov	r5, r1
 800fefa:	4640      	mov	r0, r8
 800fefc:	4649      	mov	r1, r9
 800fefe:	f7f0 f9c3 	bl	8000288 <__aeabi_dsub>
 800ff02:	9a03      	ldr	r2, [sp, #12]
 800ff04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	2b31      	cmp	r3, #49	; 0x31
 800ff0c:	dc24      	bgt.n	800ff58 <__ieee754_rem_pio2+0x288>
 800ff0e:	e9ca 0100 	strd	r0, r1, [sl]
 800ff12:	4646      	mov	r6, r8
 800ff14:	464f      	mov	r7, r9
 800ff16:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	4642      	mov	r2, r8
 800ff1e:	464b      	mov	r3, r9
 800ff20:	4639      	mov	r1, r7
 800ff22:	f7f0 f9b1 	bl	8000288 <__aeabi_dsub>
 800ff26:	462b      	mov	r3, r5
 800ff28:	4622      	mov	r2, r4
 800ff2a:	f7f0 f9ad 	bl	8000288 <__aeabi_dsub>
 800ff2e:	9b02      	ldr	r3, [sp, #8]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff36:	f6bf af0b 	bge.w	800fd50 <__ieee754_rem_pio2+0x80>
 800ff3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ff3e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ff42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff46:	f8ca 8000 	str.w	r8, [sl]
 800ff4a:	f8ca 0008 	str.w	r0, [sl, #8]
 800ff4e:	f8ca 300c 	str.w	r3, [sl, #12]
 800ff52:	f1cb 0b00 	rsb	fp, fp, #0
 800ff56:	e6fb      	b.n	800fd50 <__ieee754_rem_pio2+0x80>
 800ff58:	a327      	add	r3, pc, #156	; (adr r3, 800fff8 <__ieee754_rem_pio2+0x328>)
 800ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5e:	ec51 0b18 	vmov	r0, r1, d8
 800ff62:	f7f0 fb49 	bl	80005f8 <__aeabi_dmul>
 800ff66:	4604      	mov	r4, r0
 800ff68:	460d      	mov	r5, r1
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	4640      	mov	r0, r8
 800ff70:	4649      	mov	r1, r9
 800ff72:	f7f0 f989 	bl	8000288 <__aeabi_dsub>
 800ff76:	4602      	mov	r2, r0
 800ff78:	460b      	mov	r3, r1
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	460f      	mov	r7, r1
 800ff7e:	4640      	mov	r0, r8
 800ff80:	4649      	mov	r1, r9
 800ff82:	f7f0 f981 	bl	8000288 <__aeabi_dsub>
 800ff86:	4622      	mov	r2, r4
 800ff88:	462b      	mov	r3, r5
 800ff8a:	f7f0 f97d 	bl	8000288 <__aeabi_dsub>
 800ff8e:	a31c      	add	r3, pc, #112	; (adr r3, 8010000 <__ieee754_rem_pio2+0x330>)
 800ff90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff94:	4604      	mov	r4, r0
 800ff96:	460d      	mov	r5, r1
 800ff98:	ec51 0b18 	vmov	r0, r1, d8
 800ff9c:	f7f0 fb2c 	bl	80005f8 <__aeabi_dmul>
 800ffa0:	4622      	mov	r2, r4
 800ffa2:	462b      	mov	r3, r5
 800ffa4:	f7f0 f970 	bl	8000288 <__aeabi_dsub>
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	460d      	mov	r5, r1
 800ffac:	e760      	b.n	800fe70 <__ieee754_rem_pio2+0x1a0>
 800ffae:	4b1c      	ldr	r3, [pc, #112]	; (8010020 <__ieee754_rem_pio2+0x350>)
 800ffb0:	4598      	cmp	r8, r3
 800ffb2:	dd37      	ble.n	8010024 <__ieee754_rem_pio2+0x354>
 800ffb4:	ee10 2a10 	vmov	r2, s0
 800ffb8:	462b      	mov	r3, r5
 800ffba:	4620      	mov	r0, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	f7f0 f963 	bl	8000288 <__aeabi_dsub>
 800ffc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ffc6:	e9ca 0100 	strd	r0, r1, [sl]
 800ffca:	e695      	b.n	800fcf8 <__ieee754_rem_pio2+0x28>
 800ffcc:	f3af 8000 	nop.w
 800ffd0:	54400000 	.word	0x54400000
 800ffd4:	3ff921fb 	.word	0x3ff921fb
 800ffd8:	1a626331 	.word	0x1a626331
 800ffdc:	3dd0b461 	.word	0x3dd0b461
 800ffe0:	1a600000 	.word	0x1a600000
 800ffe4:	3dd0b461 	.word	0x3dd0b461
 800ffe8:	2e037073 	.word	0x2e037073
 800ffec:	3ba3198a 	.word	0x3ba3198a
 800fff0:	6dc9c883 	.word	0x6dc9c883
 800fff4:	3fe45f30 	.word	0x3fe45f30
 800fff8:	2e000000 	.word	0x2e000000
 800fffc:	3ba3198a 	.word	0x3ba3198a
 8010000:	252049c1 	.word	0x252049c1
 8010004:	397b839a 	.word	0x397b839a
 8010008:	3fe921fb 	.word	0x3fe921fb
 801000c:	4002d97b 	.word	0x4002d97b
 8010010:	3ff921fb 	.word	0x3ff921fb
 8010014:	413921fb 	.word	0x413921fb
 8010018:	3fe00000 	.word	0x3fe00000
 801001c:	08011258 	.word	0x08011258
 8010020:	7fefffff 	.word	0x7fefffff
 8010024:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010028:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801002c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010030:	4620      	mov	r0, r4
 8010032:	460d      	mov	r5, r1
 8010034:	f7f0 fd90 	bl	8000b58 <__aeabi_d2iz>
 8010038:	f7f0 fa74 	bl	8000524 <__aeabi_i2d>
 801003c:	4602      	mov	r2, r0
 801003e:	460b      	mov	r3, r1
 8010040:	4620      	mov	r0, r4
 8010042:	4629      	mov	r1, r5
 8010044:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010048:	f7f0 f91e 	bl	8000288 <__aeabi_dsub>
 801004c:	4b21      	ldr	r3, [pc, #132]	; (80100d4 <__ieee754_rem_pio2+0x404>)
 801004e:	2200      	movs	r2, #0
 8010050:	f7f0 fad2 	bl	80005f8 <__aeabi_dmul>
 8010054:	460d      	mov	r5, r1
 8010056:	4604      	mov	r4, r0
 8010058:	f7f0 fd7e 	bl	8000b58 <__aeabi_d2iz>
 801005c:	f7f0 fa62 	bl	8000524 <__aeabi_i2d>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	4620      	mov	r0, r4
 8010066:	4629      	mov	r1, r5
 8010068:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801006c:	f7f0 f90c 	bl	8000288 <__aeabi_dsub>
 8010070:	4b18      	ldr	r3, [pc, #96]	; (80100d4 <__ieee754_rem_pio2+0x404>)
 8010072:	2200      	movs	r2, #0
 8010074:	f7f0 fac0 	bl	80005f8 <__aeabi_dmul>
 8010078:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801007c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010080:	2703      	movs	r7, #3
 8010082:	2400      	movs	r4, #0
 8010084:	2500      	movs	r5, #0
 8010086:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801008a:	4622      	mov	r2, r4
 801008c:	462b      	mov	r3, r5
 801008e:	46b9      	mov	r9, r7
 8010090:	3f01      	subs	r7, #1
 8010092:	f7f0 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8010096:	2800      	cmp	r0, #0
 8010098:	d1f5      	bne.n	8010086 <__ieee754_rem_pio2+0x3b6>
 801009a:	4b0f      	ldr	r3, [pc, #60]	; (80100d8 <__ieee754_rem_pio2+0x408>)
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	2302      	movs	r3, #2
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	4632      	mov	r2, r6
 80100a4:	464b      	mov	r3, r9
 80100a6:	4651      	mov	r1, sl
 80100a8:	a804      	add	r0, sp, #16
 80100aa:	f000 f819 	bl	80100e0 <__kernel_rem_pio2>
 80100ae:	9b02      	ldr	r3, [sp, #8]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	4683      	mov	fp, r0
 80100b4:	f6bf ae4c 	bge.w	800fd50 <__ieee754_rem_pio2+0x80>
 80100b8:	e9da 2100 	ldrd	r2, r1, [sl]
 80100bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100c0:	e9ca 2300 	strd	r2, r3, [sl]
 80100c4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80100c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100cc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80100d0:	e73f      	b.n	800ff52 <__ieee754_rem_pio2+0x282>
 80100d2:	bf00      	nop
 80100d4:	41700000 	.word	0x41700000
 80100d8:	080112d8 	.word	0x080112d8
 80100dc:	00000000 	.word	0x00000000

080100e0 <__kernel_rem_pio2>:
 80100e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e4:	ed2d 8b02 	vpush	{d8}
 80100e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80100ec:	f112 0f14 	cmn.w	r2, #20
 80100f0:	9306      	str	r3, [sp, #24]
 80100f2:	9104      	str	r1, [sp, #16]
 80100f4:	4bc2      	ldr	r3, [pc, #776]	; (8010400 <__kernel_rem_pio2+0x320>)
 80100f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80100f8:	9009      	str	r0, [sp, #36]	; 0x24
 80100fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100fe:	9300      	str	r3, [sp, #0]
 8010100:	9b06      	ldr	r3, [sp, #24]
 8010102:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010106:	bfa8      	it	ge
 8010108:	1ed4      	subge	r4, r2, #3
 801010a:	9305      	str	r3, [sp, #20]
 801010c:	bfb2      	itee	lt
 801010e:	2400      	movlt	r4, #0
 8010110:	2318      	movge	r3, #24
 8010112:	fb94 f4f3 	sdivge	r4, r4, r3
 8010116:	f06f 0317 	mvn.w	r3, #23
 801011a:	fb04 3303 	mla	r3, r4, r3, r3
 801011e:	eb03 0a02 	add.w	sl, r3, r2
 8010122:	9b00      	ldr	r3, [sp, #0]
 8010124:	9a05      	ldr	r2, [sp, #20]
 8010126:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80103f0 <__kernel_rem_pio2+0x310>
 801012a:	eb03 0802 	add.w	r8, r3, r2
 801012e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010130:	1aa7      	subs	r7, r4, r2
 8010132:	ae20      	add	r6, sp, #128	; 0x80
 8010134:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010138:	2500      	movs	r5, #0
 801013a:	4545      	cmp	r5, r8
 801013c:	dd13      	ble.n	8010166 <__kernel_rem_pio2+0x86>
 801013e:	9b06      	ldr	r3, [sp, #24]
 8010140:	aa20      	add	r2, sp, #128	; 0x80
 8010142:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010146:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801014a:	f04f 0800 	mov.w	r8, #0
 801014e:	9b00      	ldr	r3, [sp, #0]
 8010150:	4598      	cmp	r8, r3
 8010152:	dc31      	bgt.n	80101b8 <__kernel_rem_pio2+0xd8>
 8010154:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80103f0 <__kernel_rem_pio2+0x310>
 8010158:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801015c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010160:	462f      	mov	r7, r5
 8010162:	2600      	movs	r6, #0
 8010164:	e01b      	b.n	801019e <__kernel_rem_pio2+0xbe>
 8010166:	42ef      	cmn	r7, r5
 8010168:	d407      	bmi.n	801017a <__kernel_rem_pio2+0x9a>
 801016a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801016e:	f7f0 f9d9 	bl	8000524 <__aeabi_i2d>
 8010172:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010176:	3501      	adds	r5, #1
 8010178:	e7df      	b.n	801013a <__kernel_rem_pio2+0x5a>
 801017a:	ec51 0b18 	vmov	r0, r1, d8
 801017e:	e7f8      	b.n	8010172 <__kernel_rem_pio2+0x92>
 8010180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010184:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010188:	f7f0 fa36 	bl	80005f8 <__aeabi_dmul>
 801018c:	4602      	mov	r2, r0
 801018e:	460b      	mov	r3, r1
 8010190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010194:	f7f0 f87a 	bl	800028c <__adddf3>
 8010198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801019c:	3601      	adds	r6, #1
 801019e:	9b05      	ldr	r3, [sp, #20]
 80101a0:	429e      	cmp	r6, r3
 80101a2:	f1a7 0708 	sub.w	r7, r7, #8
 80101a6:	ddeb      	ble.n	8010180 <__kernel_rem_pio2+0xa0>
 80101a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101ac:	f108 0801 	add.w	r8, r8, #1
 80101b0:	ecab 7b02 	vstmia	fp!, {d7}
 80101b4:	3508      	adds	r5, #8
 80101b6:	e7ca      	b.n	801014e <__kernel_rem_pio2+0x6e>
 80101b8:	9b00      	ldr	r3, [sp, #0]
 80101ba:	aa0c      	add	r2, sp, #48	; 0x30
 80101bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80101c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80101c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80101c8:	9c00      	ldr	r4, [sp, #0]
 80101ca:	930a      	str	r3, [sp, #40]	; 0x28
 80101cc:	00e3      	lsls	r3, r4, #3
 80101ce:	9308      	str	r3, [sp, #32]
 80101d0:	ab98      	add	r3, sp, #608	; 0x260
 80101d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80101da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80101de:	ab70      	add	r3, sp, #448	; 0x1c0
 80101e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80101e4:	46c3      	mov	fp, r8
 80101e6:	46a1      	mov	r9, r4
 80101e8:	f1b9 0f00 	cmp.w	r9, #0
 80101ec:	f1a5 0508 	sub.w	r5, r5, #8
 80101f0:	dc77      	bgt.n	80102e2 <__kernel_rem_pio2+0x202>
 80101f2:	ec47 6b10 	vmov	d0, r6, r7
 80101f6:	4650      	mov	r0, sl
 80101f8:	f000 fc52 	bl	8010aa0 <scalbn>
 80101fc:	ec57 6b10 	vmov	r6, r7, d0
 8010200:	2200      	movs	r2, #0
 8010202:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010206:	ee10 0a10 	vmov	r0, s0
 801020a:	4639      	mov	r1, r7
 801020c:	f7f0 f9f4 	bl	80005f8 <__aeabi_dmul>
 8010210:	ec41 0b10 	vmov	d0, r0, r1
 8010214:	f000 fcc4 	bl	8010ba0 <floor>
 8010218:	4b7a      	ldr	r3, [pc, #488]	; (8010404 <__kernel_rem_pio2+0x324>)
 801021a:	ec51 0b10 	vmov	r0, r1, d0
 801021e:	2200      	movs	r2, #0
 8010220:	f7f0 f9ea 	bl	80005f8 <__aeabi_dmul>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	4630      	mov	r0, r6
 801022a:	4639      	mov	r1, r7
 801022c:	f7f0 f82c 	bl	8000288 <__aeabi_dsub>
 8010230:	460f      	mov	r7, r1
 8010232:	4606      	mov	r6, r0
 8010234:	f7f0 fc90 	bl	8000b58 <__aeabi_d2iz>
 8010238:	9002      	str	r0, [sp, #8]
 801023a:	f7f0 f973 	bl	8000524 <__aeabi_i2d>
 801023e:	4602      	mov	r2, r0
 8010240:	460b      	mov	r3, r1
 8010242:	4630      	mov	r0, r6
 8010244:	4639      	mov	r1, r7
 8010246:	f7f0 f81f 	bl	8000288 <__aeabi_dsub>
 801024a:	f1ba 0f00 	cmp.w	sl, #0
 801024e:	4606      	mov	r6, r0
 8010250:	460f      	mov	r7, r1
 8010252:	dd6d      	ble.n	8010330 <__kernel_rem_pio2+0x250>
 8010254:	1e61      	subs	r1, r4, #1
 8010256:	ab0c      	add	r3, sp, #48	; 0x30
 8010258:	9d02      	ldr	r5, [sp, #8]
 801025a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801025e:	f1ca 0018 	rsb	r0, sl, #24
 8010262:	fa43 f200 	asr.w	r2, r3, r0
 8010266:	4415      	add	r5, r2
 8010268:	4082      	lsls	r2, r0
 801026a:	1a9b      	subs	r3, r3, r2
 801026c:	aa0c      	add	r2, sp, #48	; 0x30
 801026e:	9502      	str	r5, [sp, #8]
 8010270:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010274:	f1ca 0217 	rsb	r2, sl, #23
 8010278:	fa43 fb02 	asr.w	fp, r3, r2
 801027c:	f1bb 0f00 	cmp.w	fp, #0
 8010280:	dd65      	ble.n	801034e <__kernel_rem_pio2+0x26e>
 8010282:	9b02      	ldr	r3, [sp, #8]
 8010284:	2200      	movs	r2, #0
 8010286:	3301      	adds	r3, #1
 8010288:	9302      	str	r3, [sp, #8]
 801028a:	4615      	mov	r5, r2
 801028c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010290:	4294      	cmp	r4, r2
 8010292:	f300 809f 	bgt.w	80103d4 <__kernel_rem_pio2+0x2f4>
 8010296:	f1ba 0f00 	cmp.w	sl, #0
 801029a:	dd07      	ble.n	80102ac <__kernel_rem_pio2+0x1cc>
 801029c:	f1ba 0f01 	cmp.w	sl, #1
 80102a0:	f000 80c1 	beq.w	8010426 <__kernel_rem_pio2+0x346>
 80102a4:	f1ba 0f02 	cmp.w	sl, #2
 80102a8:	f000 80c7 	beq.w	801043a <__kernel_rem_pio2+0x35a>
 80102ac:	f1bb 0f02 	cmp.w	fp, #2
 80102b0:	d14d      	bne.n	801034e <__kernel_rem_pio2+0x26e>
 80102b2:	4632      	mov	r2, r6
 80102b4:	463b      	mov	r3, r7
 80102b6:	4954      	ldr	r1, [pc, #336]	; (8010408 <__kernel_rem_pio2+0x328>)
 80102b8:	2000      	movs	r0, #0
 80102ba:	f7ef ffe5 	bl	8000288 <__aeabi_dsub>
 80102be:	4606      	mov	r6, r0
 80102c0:	460f      	mov	r7, r1
 80102c2:	2d00      	cmp	r5, #0
 80102c4:	d043      	beq.n	801034e <__kernel_rem_pio2+0x26e>
 80102c6:	4650      	mov	r0, sl
 80102c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80103f8 <__kernel_rem_pio2+0x318>
 80102cc:	f000 fbe8 	bl	8010aa0 <scalbn>
 80102d0:	4630      	mov	r0, r6
 80102d2:	4639      	mov	r1, r7
 80102d4:	ec53 2b10 	vmov	r2, r3, d0
 80102d8:	f7ef ffd6 	bl	8000288 <__aeabi_dsub>
 80102dc:	4606      	mov	r6, r0
 80102de:	460f      	mov	r7, r1
 80102e0:	e035      	b.n	801034e <__kernel_rem_pio2+0x26e>
 80102e2:	4b4a      	ldr	r3, [pc, #296]	; (801040c <__kernel_rem_pio2+0x32c>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	4630      	mov	r0, r6
 80102e8:	4639      	mov	r1, r7
 80102ea:	f7f0 f985 	bl	80005f8 <__aeabi_dmul>
 80102ee:	f7f0 fc33 	bl	8000b58 <__aeabi_d2iz>
 80102f2:	f7f0 f917 	bl	8000524 <__aeabi_i2d>
 80102f6:	4602      	mov	r2, r0
 80102f8:	460b      	mov	r3, r1
 80102fa:	ec43 2b18 	vmov	d8, r2, r3
 80102fe:	4b44      	ldr	r3, [pc, #272]	; (8010410 <__kernel_rem_pio2+0x330>)
 8010300:	2200      	movs	r2, #0
 8010302:	f7f0 f979 	bl	80005f8 <__aeabi_dmul>
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	4630      	mov	r0, r6
 801030c:	4639      	mov	r1, r7
 801030e:	f7ef ffbb 	bl	8000288 <__aeabi_dsub>
 8010312:	f7f0 fc21 	bl	8000b58 <__aeabi_d2iz>
 8010316:	e9d5 2300 	ldrd	r2, r3, [r5]
 801031a:	f84b 0b04 	str.w	r0, [fp], #4
 801031e:	ec51 0b18 	vmov	r0, r1, d8
 8010322:	f7ef ffb3 	bl	800028c <__adddf3>
 8010326:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801032a:	4606      	mov	r6, r0
 801032c:	460f      	mov	r7, r1
 801032e:	e75b      	b.n	80101e8 <__kernel_rem_pio2+0x108>
 8010330:	d106      	bne.n	8010340 <__kernel_rem_pio2+0x260>
 8010332:	1e63      	subs	r3, r4, #1
 8010334:	aa0c      	add	r2, sp, #48	; 0x30
 8010336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801033a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801033e:	e79d      	b.n	801027c <__kernel_rem_pio2+0x19c>
 8010340:	4b34      	ldr	r3, [pc, #208]	; (8010414 <__kernel_rem_pio2+0x334>)
 8010342:	2200      	movs	r2, #0
 8010344:	f7f0 fbde 	bl	8000b04 <__aeabi_dcmpge>
 8010348:	2800      	cmp	r0, #0
 801034a:	d140      	bne.n	80103ce <__kernel_rem_pio2+0x2ee>
 801034c:	4683      	mov	fp, r0
 801034e:	2200      	movs	r2, #0
 8010350:	2300      	movs	r3, #0
 8010352:	4630      	mov	r0, r6
 8010354:	4639      	mov	r1, r7
 8010356:	f7f0 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 801035a:	2800      	cmp	r0, #0
 801035c:	f000 80c1 	beq.w	80104e2 <__kernel_rem_pio2+0x402>
 8010360:	1e65      	subs	r5, r4, #1
 8010362:	462b      	mov	r3, r5
 8010364:	2200      	movs	r2, #0
 8010366:	9900      	ldr	r1, [sp, #0]
 8010368:	428b      	cmp	r3, r1
 801036a:	da6d      	bge.n	8010448 <__kernel_rem_pio2+0x368>
 801036c:	2a00      	cmp	r2, #0
 801036e:	f000 808a 	beq.w	8010486 <__kernel_rem_pio2+0x3a6>
 8010372:	ab0c      	add	r3, sp, #48	; 0x30
 8010374:	f1aa 0a18 	sub.w	sl, sl, #24
 8010378:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801037c:	2b00      	cmp	r3, #0
 801037e:	f000 80ae 	beq.w	80104de <__kernel_rem_pio2+0x3fe>
 8010382:	4650      	mov	r0, sl
 8010384:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80103f8 <__kernel_rem_pio2+0x318>
 8010388:	f000 fb8a 	bl	8010aa0 <scalbn>
 801038c:	1c6b      	adds	r3, r5, #1
 801038e:	00da      	lsls	r2, r3, #3
 8010390:	9205      	str	r2, [sp, #20]
 8010392:	ec57 6b10 	vmov	r6, r7, d0
 8010396:	aa70      	add	r2, sp, #448	; 0x1c0
 8010398:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801040c <__kernel_rem_pio2+0x32c>
 801039c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80103a0:	462c      	mov	r4, r5
 80103a2:	f04f 0800 	mov.w	r8, #0
 80103a6:	2c00      	cmp	r4, #0
 80103a8:	f280 80d4 	bge.w	8010554 <__kernel_rem_pio2+0x474>
 80103ac:	462c      	mov	r4, r5
 80103ae:	2c00      	cmp	r4, #0
 80103b0:	f2c0 8102 	blt.w	80105b8 <__kernel_rem_pio2+0x4d8>
 80103b4:	4b18      	ldr	r3, [pc, #96]	; (8010418 <__kernel_rem_pio2+0x338>)
 80103b6:	461e      	mov	r6, r3
 80103b8:	ab70      	add	r3, sp, #448	; 0x1c0
 80103ba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80103be:	1b2b      	subs	r3, r5, r4
 80103c0:	f04f 0900 	mov.w	r9, #0
 80103c4:	f04f 0a00 	mov.w	sl, #0
 80103c8:	2700      	movs	r7, #0
 80103ca:	9306      	str	r3, [sp, #24]
 80103cc:	e0e6      	b.n	801059c <__kernel_rem_pio2+0x4bc>
 80103ce:	f04f 0b02 	mov.w	fp, #2
 80103d2:	e756      	b.n	8010282 <__kernel_rem_pio2+0x1a2>
 80103d4:	f8d8 3000 	ldr.w	r3, [r8]
 80103d8:	bb05      	cbnz	r5, 801041c <__kernel_rem_pio2+0x33c>
 80103da:	b123      	cbz	r3, 80103e6 <__kernel_rem_pio2+0x306>
 80103dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80103e0:	f8c8 3000 	str.w	r3, [r8]
 80103e4:	2301      	movs	r3, #1
 80103e6:	3201      	adds	r2, #1
 80103e8:	f108 0804 	add.w	r8, r8, #4
 80103ec:	461d      	mov	r5, r3
 80103ee:	e74f      	b.n	8010290 <__kernel_rem_pio2+0x1b0>
	...
 80103fc:	3ff00000 	.word	0x3ff00000
 8010400:	08011420 	.word	0x08011420
 8010404:	40200000 	.word	0x40200000
 8010408:	3ff00000 	.word	0x3ff00000
 801040c:	3e700000 	.word	0x3e700000
 8010410:	41700000 	.word	0x41700000
 8010414:	3fe00000 	.word	0x3fe00000
 8010418:	080113e0 	.word	0x080113e0
 801041c:	1acb      	subs	r3, r1, r3
 801041e:	f8c8 3000 	str.w	r3, [r8]
 8010422:	462b      	mov	r3, r5
 8010424:	e7df      	b.n	80103e6 <__kernel_rem_pio2+0x306>
 8010426:	1e62      	subs	r2, r4, #1
 8010428:	ab0c      	add	r3, sp, #48	; 0x30
 801042a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801042e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010432:	a90c      	add	r1, sp, #48	; 0x30
 8010434:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010438:	e738      	b.n	80102ac <__kernel_rem_pio2+0x1cc>
 801043a:	1e62      	subs	r2, r4, #1
 801043c:	ab0c      	add	r3, sp, #48	; 0x30
 801043e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010442:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010446:	e7f4      	b.n	8010432 <__kernel_rem_pio2+0x352>
 8010448:	a90c      	add	r1, sp, #48	; 0x30
 801044a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801044e:	3b01      	subs	r3, #1
 8010450:	430a      	orrs	r2, r1
 8010452:	e788      	b.n	8010366 <__kernel_rem_pio2+0x286>
 8010454:	3301      	adds	r3, #1
 8010456:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801045a:	2900      	cmp	r1, #0
 801045c:	d0fa      	beq.n	8010454 <__kernel_rem_pio2+0x374>
 801045e:	9a08      	ldr	r2, [sp, #32]
 8010460:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010464:	446a      	add	r2, sp
 8010466:	3a98      	subs	r2, #152	; 0x98
 8010468:	9208      	str	r2, [sp, #32]
 801046a:	9a06      	ldr	r2, [sp, #24]
 801046c:	a920      	add	r1, sp, #128	; 0x80
 801046e:	18a2      	adds	r2, r4, r2
 8010470:	18e3      	adds	r3, r4, r3
 8010472:	f104 0801 	add.w	r8, r4, #1
 8010476:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801047a:	9302      	str	r3, [sp, #8]
 801047c:	9b02      	ldr	r3, [sp, #8]
 801047e:	4543      	cmp	r3, r8
 8010480:	da04      	bge.n	801048c <__kernel_rem_pio2+0x3ac>
 8010482:	461c      	mov	r4, r3
 8010484:	e6a2      	b.n	80101cc <__kernel_rem_pio2+0xec>
 8010486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010488:	2301      	movs	r3, #1
 801048a:	e7e4      	b.n	8010456 <__kernel_rem_pio2+0x376>
 801048c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801048e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010492:	f7f0 f847 	bl	8000524 <__aeabi_i2d>
 8010496:	e8e5 0102 	strd	r0, r1, [r5], #8
 801049a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801049c:	46ab      	mov	fp, r5
 801049e:	461c      	mov	r4, r3
 80104a0:	f04f 0900 	mov.w	r9, #0
 80104a4:	2600      	movs	r6, #0
 80104a6:	2700      	movs	r7, #0
 80104a8:	9b05      	ldr	r3, [sp, #20]
 80104aa:	4599      	cmp	r9, r3
 80104ac:	dd06      	ble.n	80104bc <__kernel_rem_pio2+0x3dc>
 80104ae:	9b08      	ldr	r3, [sp, #32]
 80104b0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80104b4:	f108 0801 	add.w	r8, r8, #1
 80104b8:	9308      	str	r3, [sp, #32]
 80104ba:	e7df      	b.n	801047c <__kernel_rem_pio2+0x39c>
 80104bc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80104c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80104c4:	f7f0 f898 	bl	80005f8 <__aeabi_dmul>
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	4630      	mov	r0, r6
 80104ce:	4639      	mov	r1, r7
 80104d0:	f7ef fedc 	bl	800028c <__adddf3>
 80104d4:	f109 0901 	add.w	r9, r9, #1
 80104d8:	4606      	mov	r6, r0
 80104da:	460f      	mov	r7, r1
 80104dc:	e7e4      	b.n	80104a8 <__kernel_rem_pio2+0x3c8>
 80104de:	3d01      	subs	r5, #1
 80104e0:	e747      	b.n	8010372 <__kernel_rem_pio2+0x292>
 80104e2:	ec47 6b10 	vmov	d0, r6, r7
 80104e6:	f1ca 0000 	rsb	r0, sl, #0
 80104ea:	f000 fad9 	bl	8010aa0 <scalbn>
 80104ee:	ec57 6b10 	vmov	r6, r7, d0
 80104f2:	4ba0      	ldr	r3, [pc, #640]	; (8010774 <__kernel_rem_pio2+0x694>)
 80104f4:	ee10 0a10 	vmov	r0, s0
 80104f8:	2200      	movs	r2, #0
 80104fa:	4639      	mov	r1, r7
 80104fc:	f7f0 fb02 	bl	8000b04 <__aeabi_dcmpge>
 8010500:	b1f8      	cbz	r0, 8010542 <__kernel_rem_pio2+0x462>
 8010502:	4b9d      	ldr	r3, [pc, #628]	; (8010778 <__kernel_rem_pio2+0x698>)
 8010504:	2200      	movs	r2, #0
 8010506:	4630      	mov	r0, r6
 8010508:	4639      	mov	r1, r7
 801050a:	f7f0 f875 	bl	80005f8 <__aeabi_dmul>
 801050e:	f7f0 fb23 	bl	8000b58 <__aeabi_d2iz>
 8010512:	4680      	mov	r8, r0
 8010514:	f7f0 f806 	bl	8000524 <__aeabi_i2d>
 8010518:	4b96      	ldr	r3, [pc, #600]	; (8010774 <__kernel_rem_pio2+0x694>)
 801051a:	2200      	movs	r2, #0
 801051c:	f7f0 f86c 	bl	80005f8 <__aeabi_dmul>
 8010520:	460b      	mov	r3, r1
 8010522:	4602      	mov	r2, r0
 8010524:	4639      	mov	r1, r7
 8010526:	4630      	mov	r0, r6
 8010528:	f7ef feae 	bl	8000288 <__aeabi_dsub>
 801052c:	f7f0 fb14 	bl	8000b58 <__aeabi_d2iz>
 8010530:	1c65      	adds	r5, r4, #1
 8010532:	ab0c      	add	r3, sp, #48	; 0x30
 8010534:	f10a 0a18 	add.w	sl, sl, #24
 8010538:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801053c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010540:	e71f      	b.n	8010382 <__kernel_rem_pio2+0x2a2>
 8010542:	4630      	mov	r0, r6
 8010544:	4639      	mov	r1, r7
 8010546:	f7f0 fb07 	bl	8000b58 <__aeabi_d2iz>
 801054a:	ab0c      	add	r3, sp, #48	; 0x30
 801054c:	4625      	mov	r5, r4
 801054e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010552:	e716      	b.n	8010382 <__kernel_rem_pio2+0x2a2>
 8010554:	ab0c      	add	r3, sp, #48	; 0x30
 8010556:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801055a:	f7ef ffe3 	bl	8000524 <__aeabi_i2d>
 801055e:	4632      	mov	r2, r6
 8010560:	463b      	mov	r3, r7
 8010562:	f7f0 f849 	bl	80005f8 <__aeabi_dmul>
 8010566:	4642      	mov	r2, r8
 8010568:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801056c:	464b      	mov	r3, r9
 801056e:	4630      	mov	r0, r6
 8010570:	4639      	mov	r1, r7
 8010572:	f7f0 f841 	bl	80005f8 <__aeabi_dmul>
 8010576:	3c01      	subs	r4, #1
 8010578:	4606      	mov	r6, r0
 801057a:	460f      	mov	r7, r1
 801057c:	e713      	b.n	80103a6 <__kernel_rem_pio2+0x2c6>
 801057e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010582:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010586:	f7f0 f837 	bl	80005f8 <__aeabi_dmul>
 801058a:	4602      	mov	r2, r0
 801058c:	460b      	mov	r3, r1
 801058e:	4648      	mov	r0, r9
 8010590:	4651      	mov	r1, sl
 8010592:	f7ef fe7b 	bl	800028c <__adddf3>
 8010596:	3701      	adds	r7, #1
 8010598:	4681      	mov	r9, r0
 801059a:	468a      	mov	sl, r1
 801059c:	9b00      	ldr	r3, [sp, #0]
 801059e:	429f      	cmp	r7, r3
 80105a0:	dc02      	bgt.n	80105a8 <__kernel_rem_pio2+0x4c8>
 80105a2:	9b06      	ldr	r3, [sp, #24]
 80105a4:	429f      	cmp	r7, r3
 80105a6:	ddea      	ble.n	801057e <__kernel_rem_pio2+0x49e>
 80105a8:	9a06      	ldr	r2, [sp, #24]
 80105aa:	ab48      	add	r3, sp, #288	; 0x120
 80105ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80105b0:	e9c6 9a00 	strd	r9, sl, [r6]
 80105b4:	3c01      	subs	r4, #1
 80105b6:	e6fa      	b.n	80103ae <__kernel_rem_pio2+0x2ce>
 80105b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80105ba:	2b02      	cmp	r3, #2
 80105bc:	dc0b      	bgt.n	80105d6 <__kernel_rem_pio2+0x4f6>
 80105be:	2b00      	cmp	r3, #0
 80105c0:	dc39      	bgt.n	8010636 <__kernel_rem_pio2+0x556>
 80105c2:	d05d      	beq.n	8010680 <__kernel_rem_pio2+0x5a0>
 80105c4:	9b02      	ldr	r3, [sp, #8]
 80105c6:	f003 0007 	and.w	r0, r3, #7
 80105ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80105ce:	ecbd 8b02 	vpop	{d8}
 80105d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80105d8:	2b03      	cmp	r3, #3
 80105da:	d1f3      	bne.n	80105c4 <__kernel_rem_pio2+0x4e4>
 80105dc:	9b05      	ldr	r3, [sp, #20]
 80105de:	9500      	str	r5, [sp, #0]
 80105e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80105e4:	eb0d 0403 	add.w	r4, sp, r3
 80105e8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80105ec:	46a2      	mov	sl, r4
 80105ee:	9b00      	ldr	r3, [sp, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	f1aa 0a08 	sub.w	sl, sl, #8
 80105f6:	dc69      	bgt.n	80106cc <__kernel_rem_pio2+0x5ec>
 80105f8:	46aa      	mov	sl, r5
 80105fa:	f1ba 0f01 	cmp.w	sl, #1
 80105fe:	f1a4 0408 	sub.w	r4, r4, #8
 8010602:	f300 8083 	bgt.w	801070c <__kernel_rem_pio2+0x62c>
 8010606:	9c05      	ldr	r4, [sp, #20]
 8010608:	ab48      	add	r3, sp, #288	; 0x120
 801060a:	441c      	add	r4, r3
 801060c:	2000      	movs	r0, #0
 801060e:	2100      	movs	r1, #0
 8010610:	2d01      	cmp	r5, #1
 8010612:	f300 809a 	bgt.w	801074a <__kernel_rem_pio2+0x66a>
 8010616:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801061a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801061e:	f1bb 0f00 	cmp.w	fp, #0
 8010622:	f040 8098 	bne.w	8010756 <__kernel_rem_pio2+0x676>
 8010626:	9b04      	ldr	r3, [sp, #16]
 8010628:	e9c3 7800 	strd	r7, r8, [r3]
 801062c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010630:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010634:	e7c6      	b.n	80105c4 <__kernel_rem_pio2+0x4e4>
 8010636:	9e05      	ldr	r6, [sp, #20]
 8010638:	ab48      	add	r3, sp, #288	; 0x120
 801063a:	441e      	add	r6, r3
 801063c:	462c      	mov	r4, r5
 801063e:	2000      	movs	r0, #0
 8010640:	2100      	movs	r1, #0
 8010642:	2c00      	cmp	r4, #0
 8010644:	da33      	bge.n	80106ae <__kernel_rem_pio2+0x5ce>
 8010646:	f1bb 0f00 	cmp.w	fp, #0
 801064a:	d036      	beq.n	80106ba <__kernel_rem_pio2+0x5da>
 801064c:	4602      	mov	r2, r0
 801064e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010652:	9c04      	ldr	r4, [sp, #16]
 8010654:	e9c4 2300 	strd	r2, r3, [r4]
 8010658:	4602      	mov	r2, r0
 801065a:	460b      	mov	r3, r1
 801065c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010660:	f7ef fe12 	bl	8000288 <__aeabi_dsub>
 8010664:	ae4a      	add	r6, sp, #296	; 0x128
 8010666:	2401      	movs	r4, #1
 8010668:	42a5      	cmp	r5, r4
 801066a:	da29      	bge.n	80106c0 <__kernel_rem_pio2+0x5e0>
 801066c:	f1bb 0f00 	cmp.w	fp, #0
 8010670:	d002      	beq.n	8010678 <__kernel_rem_pio2+0x598>
 8010672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010676:	4619      	mov	r1, r3
 8010678:	9b04      	ldr	r3, [sp, #16]
 801067a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801067e:	e7a1      	b.n	80105c4 <__kernel_rem_pio2+0x4e4>
 8010680:	9c05      	ldr	r4, [sp, #20]
 8010682:	ab48      	add	r3, sp, #288	; 0x120
 8010684:	441c      	add	r4, r3
 8010686:	2000      	movs	r0, #0
 8010688:	2100      	movs	r1, #0
 801068a:	2d00      	cmp	r5, #0
 801068c:	da09      	bge.n	80106a2 <__kernel_rem_pio2+0x5c2>
 801068e:	f1bb 0f00 	cmp.w	fp, #0
 8010692:	d002      	beq.n	801069a <__kernel_rem_pio2+0x5ba>
 8010694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010698:	4619      	mov	r1, r3
 801069a:	9b04      	ldr	r3, [sp, #16]
 801069c:	e9c3 0100 	strd	r0, r1, [r3]
 80106a0:	e790      	b.n	80105c4 <__kernel_rem_pio2+0x4e4>
 80106a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80106a6:	f7ef fdf1 	bl	800028c <__adddf3>
 80106aa:	3d01      	subs	r5, #1
 80106ac:	e7ed      	b.n	801068a <__kernel_rem_pio2+0x5aa>
 80106ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80106b2:	f7ef fdeb 	bl	800028c <__adddf3>
 80106b6:	3c01      	subs	r4, #1
 80106b8:	e7c3      	b.n	8010642 <__kernel_rem_pio2+0x562>
 80106ba:	4602      	mov	r2, r0
 80106bc:	460b      	mov	r3, r1
 80106be:	e7c8      	b.n	8010652 <__kernel_rem_pio2+0x572>
 80106c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80106c4:	f7ef fde2 	bl	800028c <__adddf3>
 80106c8:	3401      	adds	r4, #1
 80106ca:	e7cd      	b.n	8010668 <__kernel_rem_pio2+0x588>
 80106cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80106d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80106d4:	9b00      	ldr	r3, [sp, #0]
 80106d6:	3b01      	subs	r3, #1
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	4632      	mov	r2, r6
 80106dc:	463b      	mov	r3, r7
 80106de:	4640      	mov	r0, r8
 80106e0:	4649      	mov	r1, r9
 80106e2:	f7ef fdd3 	bl	800028c <__adddf3>
 80106e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80106ea:	4602      	mov	r2, r0
 80106ec:	460b      	mov	r3, r1
 80106ee:	4640      	mov	r0, r8
 80106f0:	4649      	mov	r1, r9
 80106f2:	f7ef fdc9 	bl	8000288 <__aeabi_dsub>
 80106f6:	4632      	mov	r2, r6
 80106f8:	463b      	mov	r3, r7
 80106fa:	f7ef fdc7 	bl	800028c <__adddf3>
 80106fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010702:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010706:	ed8a 7b00 	vstr	d7, [sl]
 801070a:	e770      	b.n	80105ee <__kernel_rem_pio2+0x50e>
 801070c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010710:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010714:	4640      	mov	r0, r8
 8010716:	4632      	mov	r2, r6
 8010718:	463b      	mov	r3, r7
 801071a:	4649      	mov	r1, r9
 801071c:	f7ef fdb6 	bl	800028c <__adddf3>
 8010720:	e9cd 0100 	strd	r0, r1, [sp]
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	4640      	mov	r0, r8
 801072a:	4649      	mov	r1, r9
 801072c:	f7ef fdac 	bl	8000288 <__aeabi_dsub>
 8010730:	4632      	mov	r2, r6
 8010732:	463b      	mov	r3, r7
 8010734:	f7ef fdaa 	bl	800028c <__adddf3>
 8010738:	ed9d 7b00 	vldr	d7, [sp]
 801073c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010740:	ed84 7b00 	vstr	d7, [r4]
 8010744:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010748:	e757      	b.n	80105fa <__kernel_rem_pio2+0x51a>
 801074a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801074e:	f7ef fd9d 	bl	800028c <__adddf3>
 8010752:	3d01      	subs	r5, #1
 8010754:	e75c      	b.n	8010610 <__kernel_rem_pio2+0x530>
 8010756:	9b04      	ldr	r3, [sp, #16]
 8010758:	9a04      	ldr	r2, [sp, #16]
 801075a:	601f      	str	r7, [r3, #0]
 801075c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010760:	605c      	str	r4, [r3, #4]
 8010762:	609d      	str	r5, [r3, #8]
 8010764:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010768:	60d3      	str	r3, [r2, #12]
 801076a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801076e:	6110      	str	r0, [r2, #16]
 8010770:	6153      	str	r3, [r2, #20]
 8010772:	e727      	b.n	80105c4 <__kernel_rem_pio2+0x4e4>
 8010774:	41700000 	.word	0x41700000
 8010778:	3e700000 	.word	0x3e700000
 801077c:	00000000 	.word	0x00000000

08010780 <__kernel_cos>:
 8010780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	ec57 6b10 	vmov	r6, r7, d0
 8010788:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801078c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010790:	ed8d 1b00 	vstr	d1, [sp]
 8010794:	da07      	bge.n	80107a6 <__kernel_cos+0x26>
 8010796:	ee10 0a10 	vmov	r0, s0
 801079a:	4639      	mov	r1, r7
 801079c:	f7f0 f9dc 	bl	8000b58 <__aeabi_d2iz>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	f000 8088 	beq.w	80108b6 <__kernel_cos+0x136>
 80107a6:	4632      	mov	r2, r6
 80107a8:	463b      	mov	r3, r7
 80107aa:	4630      	mov	r0, r6
 80107ac:	4639      	mov	r1, r7
 80107ae:	f7ef ff23 	bl	80005f8 <__aeabi_dmul>
 80107b2:	4b51      	ldr	r3, [pc, #324]	; (80108f8 <__kernel_cos+0x178>)
 80107b4:	2200      	movs	r2, #0
 80107b6:	4604      	mov	r4, r0
 80107b8:	460d      	mov	r5, r1
 80107ba:	f7ef ff1d 	bl	80005f8 <__aeabi_dmul>
 80107be:	a340      	add	r3, pc, #256	; (adr r3, 80108c0 <__kernel_cos+0x140>)
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	4682      	mov	sl, r0
 80107c6:	468b      	mov	fp, r1
 80107c8:	4620      	mov	r0, r4
 80107ca:	4629      	mov	r1, r5
 80107cc:	f7ef ff14 	bl	80005f8 <__aeabi_dmul>
 80107d0:	a33d      	add	r3, pc, #244	; (adr r3, 80108c8 <__kernel_cos+0x148>)
 80107d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d6:	f7ef fd59 	bl	800028c <__adddf3>
 80107da:	4622      	mov	r2, r4
 80107dc:	462b      	mov	r3, r5
 80107de:	f7ef ff0b 	bl	80005f8 <__aeabi_dmul>
 80107e2:	a33b      	add	r3, pc, #236	; (adr r3, 80108d0 <__kernel_cos+0x150>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	f7ef fd4e 	bl	8000288 <__aeabi_dsub>
 80107ec:	4622      	mov	r2, r4
 80107ee:	462b      	mov	r3, r5
 80107f0:	f7ef ff02 	bl	80005f8 <__aeabi_dmul>
 80107f4:	a338      	add	r3, pc, #224	; (adr r3, 80108d8 <__kernel_cos+0x158>)
 80107f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fa:	f7ef fd47 	bl	800028c <__adddf3>
 80107fe:	4622      	mov	r2, r4
 8010800:	462b      	mov	r3, r5
 8010802:	f7ef fef9 	bl	80005f8 <__aeabi_dmul>
 8010806:	a336      	add	r3, pc, #216	; (adr r3, 80108e0 <__kernel_cos+0x160>)
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	f7ef fd3c 	bl	8000288 <__aeabi_dsub>
 8010810:	4622      	mov	r2, r4
 8010812:	462b      	mov	r3, r5
 8010814:	f7ef fef0 	bl	80005f8 <__aeabi_dmul>
 8010818:	a333      	add	r3, pc, #204	; (adr r3, 80108e8 <__kernel_cos+0x168>)
 801081a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801081e:	f7ef fd35 	bl	800028c <__adddf3>
 8010822:	4622      	mov	r2, r4
 8010824:	462b      	mov	r3, r5
 8010826:	f7ef fee7 	bl	80005f8 <__aeabi_dmul>
 801082a:	4622      	mov	r2, r4
 801082c:	462b      	mov	r3, r5
 801082e:	f7ef fee3 	bl	80005f8 <__aeabi_dmul>
 8010832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010836:	4604      	mov	r4, r0
 8010838:	460d      	mov	r5, r1
 801083a:	4630      	mov	r0, r6
 801083c:	4639      	mov	r1, r7
 801083e:	f7ef fedb 	bl	80005f8 <__aeabi_dmul>
 8010842:	460b      	mov	r3, r1
 8010844:	4602      	mov	r2, r0
 8010846:	4629      	mov	r1, r5
 8010848:	4620      	mov	r0, r4
 801084a:	f7ef fd1d 	bl	8000288 <__aeabi_dsub>
 801084e:	4b2b      	ldr	r3, [pc, #172]	; (80108fc <__kernel_cos+0x17c>)
 8010850:	4598      	cmp	r8, r3
 8010852:	4606      	mov	r6, r0
 8010854:	460f      	mov	r7, r1
 8010856:	dc10      	bgt.n	801087a <__kernel_cos+0xfa>
 8010858:	4602      	mov	r2, r0
 801085a:	460b      	mov	r3, r1
 801085c:	4650      	mov	r0, sl
 801085e:	4659      	mov	r1, fp
 8010860:	f7ef fd12 	bl	8000288 <__aeabi_dsub>
 8010864:	460b      	mov	r3, r1
 8010866:	4926      	ldr	r1, [pc, #152]	; (8010900 <__kernel_cos+0x180>)
 8010868:	4602      	mov	r2, r0
 801086a:	2000      	movs	r0, #0
 801086c:	f7ef fd0c 	bl	8000288 <__aeabi_dsub>
 8010870:	ec41 0b10 	vmov	d0, r0, r1
 8010874:	b003      	add	sp, #12
 8010876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087a:	4b22      	ldr	r3, [pc, #136]	; (8010904 <__kernel_cos+0x184>)
 801087c:	4920      	ldr	r1, [pc, #128]	; (8010900 <__kernel_cos+0x180>)
 801087e:	4598      	cmp	r8, r3
 8010880:	bfcc      	ite	gt
 8010882:	4d21      	ldrgt	r5, [pc, #132]	; (8010908 <__kernel_cos+0x188>)
 8010884:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010888:	2400      	movs	r4, #0
 801088a:	4622      	mov	r2, r4
 801088c:	462b      	mov	r3, r5
 801088e:	2000      	movs	r0, #0
 8010890:	f7ef fcfa 	bl	8000288 <__aeabi_dsub>
 8010894:	4622      	mov	r2, r4
 8010896:	4680      	mov	r8, r0
 8010898:	4689      	mov	r9, r1
 801089a:	462b      	mov	r3, r5
 801089c:	4650      	mov	r0, sl
 801089e:	4659      	mov	r1, fp
 80108a0:	f7ef fcf2 	bl	8000288 <__aeabi_dsub>
 80108a4:	4632      	mov	r2, r6
 80108a6:	463b      	mov	r3, r7
 80108a8:	f7ef fcee 	bl	8000288 <__aeabi_dsub>
 80108ac:	4602      	mov	r2, r0
 80108ae:	460b      	mov	r3, r1
 80108b0:	4640      	mov	r0, r8
 80108b2:	4649      	mov	r1, r9
 80108b4:	e7da      	b.n	801086c <__kernel_cos+0xec>
 80108b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80108f0 <__kernel_cos+0x170>
 80108ba:	e7db      	b.n	8010874 <__kernel_cos+0xf4>
 80108bc:	f3af 8000 	nop.w
 80108c0:	be8838d4 	.word	0xbe8838d4
 80108c4:	bda8fae9 	.word	0xbda8fae9
 80108c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80108cc:	3e21ee9e 	.word	0x3e21ee9e
 80108d0:	809c52ad 	.word	0x809c52ad
 80108d4:	3e927e4f 	.word	0x3e927e4f
 80108d8:	19cb1590 	.word	0x19cb1590
 80108dc:	3efa01a0 	.word	0x3efa01a0
 80108e0:	16c15177 	.word	0x16c15177
 80108e4:	3f56c16c 	.word	0x3f56c16c
 80108e8:	5555554c 	.word	0x5555554c
 80108ec:	3fa55555 	.word	0x3fa55555
 80108f0:	00000000 	.word	0x00000000
 80108f4:	3ff00000 	.word	0x3ff00000
 80108f8:	3fe00000 	.word	0x3fe00000
 80108fc:	3fd33332 	.word	0x3fd33332
 8010900:	3ff00000 	.word	0x3ff00000
 8010904:	3fe90000 	.word	0x3fe90000
 8010908:	3fd20000 	.word	0x3fd20000
 801090c:	00000000 	.word	0x00000000

08010910 <__kernel_sin>:
 8010910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010914:	ed2d 8b04 	vpush	{d8-d9}
 8010918:	eeb0 8a41 	vmov.f32	s16, s2
 801091c:	eef0 8a61 	vmov.f32	s17, s3
 8010920:	ec55 4b10 	vmov	r4, r5, d0
 8010924:	b083      	sub	sp, #12
 8010926:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801092a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801092e:	9001      	str	r0, [sp, #4]
 8010930:	da06      	bge.n	8010940 <__kernel_sin+0x30>
 8010932:	ee10 0a10 	vmov	r0, s0
 8010936:	4629      	mov	r1, r5
 8010938:	f7f0 f90e 	bl	8000b58 <__aeabi_d2iz>
 801093c:	2800      	cmp	r0, #0
 801093e:	d051      	beq.n	80109e4 <__kernel_sin+0xd4>
 8010940:	4622      	mov	r2, r4
 8010942:	462b      	mov	r3, r5
 8010944:	4620      	mov	r0, r4
 8010946:	4629      	mov	r1, r5
 8010948:	f7ef fe56 	bl	80005f8 <__aeabi_dmul>
 801094c:	4682      	mov	sl, r0
 801094e:	468b      	mov	fp, r1
 8010950:	4602      	mov	r2, r0
 8010952:	460b      	mov	r3, r1
 8010954:	4620      	mov	r0, r4
 8010956:	4629      	mov	r1, r5
 8010958:	f7ef fe4e 	bl	80005f8 <__aeabi_dmul>
 801095c:	a341      	add	r3, pc, #260	; (adr r3, 8010a64 <__kernel_sin+0x154>)
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	4680      	mov	r8, r0
 8010964:	4689      	mov	r9, r1
 8010966:	4650      	mov	r0, sl
 8010968:	4659      	mov	r1, fp
 801096a:	f7ef fe45 	bl	80005f8 <__aeabi_dmul>
 801096e:	a33f      	add	r3, pc, #252	; (adr r3, 8010a6c <__kernel_sin+0x15c>)
 8010970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010974:	f7ef fc88 	bl	8000288 <__aeabi_dsub>
 8010978:	4652      	mov	r2, sl
 801097a:	465b      	mov	r3, fp
 801097c:	f7ef fe3c 	bl	80005f8 <__aeabi_dmul>
 8010980:	a33c      	add	r3, pc, #240	; (adr r3, 8010a74 <__kernel_sin+0x164>)
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	f7ef fc81 	bl	800028c <__adddf3>
 801098a:	4652      	mov	r2, sl
 801098c:	465b      	mov	r3, fp
 801098e:	f7ef fe33 	bl	80005f8 <__aeabi_dmul>
 8010992:	a33a      	add	r3, pc, #232	; (adr r3, 8010a7c <__kernel_sin+0x16c>)
 8010994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010998:	f7ef fc76 	bl	8000288 <__aeabi_dsub>
 801099c:	4652      	mov	r2, sl
 801099e:	465b      	mov	r3, fp
 80109a0:	f7ef fe2a 	bl	80005f8 <__aeabi_dmul>
 80109a4:	a337      	add	r3, pc, #220	; (adr r3, 8010a84 <__kernel_sin+0x174>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	f7ef fc6f 	bl	800028c <__adddf3>
 80109ae:	9b01      	ldr	r3, [sp, #4]
 80109b0:	4606      	mov	r6, r0
 80109b2:	460f      	mov	r7, r1
 80109b4:	b9eb      	cbnz	r3, 80109f2 <__kernel_sin+0xe2>
 80109b6:	4602      	mov	r2, r0
 80109b8:	460b      	mov	r3, r1
 80109ba:	4650      	mov	r0, sl
 80109bc:	4659      	mov	r1, fp
 80109be:	f7ef fe1b 	bl	80005f8 <__aeabi_dmul>
 80109c2:	a325      	add	r3, pc, #148	; (adr r3, 8010a58 <__kernel_sin+0x148>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	f7ef fc5e 	bl	8000288 <__aeabi_dsub>
 80109cc:	4642      	mov	r2, r8
 80109ce:	464b      	mov	r3, r9
 80109d0:	f7ef fe12 	bl	80005f8 <__aeabi_dmul>
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	4620      	mov	r0, r4
 80109da:	4629      	mov	r1, r5
 80109dc:	f7ef fc56 	bl	800028c <__adddf3>
 80109e0:	4604      	mov	r4, r0
 80109e2:	460d      	mov	r5, r1
 80109e4:	ec45 4b10 	vmov	d0, r4, r5
 80109e8:	b003      	add	sp, #12
 80109ea:	ecbd 8b04 	vpop	{d8-d9}
 80109ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f2:	4b1b      	ldr	r3, [pc, #108]	; (8010a60 <__kernel_sin+0x150>)
 80109f4:	ec51 0b18 	vmov	r0, r1, d8
 80109f8:	2200      	movs	r2, #0
 80109fa:	f7ef fdfd 	bl	80005f8 <__aeabi_dmul>
 80109fe:	4632      	mov	r2, r6
 8010a00:	ec41 0b19 	vmov	d9, r0, r1
 8010a04:	463b      	mov	r3, r7
 8010a06:	4640      	mov	r0, r8
 8010a08:	4649      	mov	r1, r9
 8010a0a:	f7ef fdf5 	bl	80005f8 <__aeabi_dmul>
 8010a0e:	4602      	mov	r2, r0
 8010a10:	460b      	mov	r3, r1
 8010a12:	ec51 0b19 	vmov	r0, r1, d9
 8010a16:	f7ef fc37 	bl	8000288 <__aeabi_dsub>
 8010a1a:	4652      	mov	r2, sl
 8010a1c:	465b      	mov	r3, fp
 8010a1e:	f7ef fdeb 	bl	80005f8 <__aeabi_dmul>
 8010a22:	ec53 2b18 	vmov	r2, r3, d8
 8010a26:	f7ef fc2f 	bl	8000288 <__aeabi_dsub>
 8010a2a:	a30b      	add	r3, pc, #44	; (adr r3, 8010a58 <__kernel_sin+0x148>)
 8010a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a30:	4606      	mov	r6, r0
 8010a32:	460f      	mov	r7, r1
 8010a34:	4640      	mov	r0, r8
 8010a36:	4649      	mov	r1, r9
 8010a38:	f7ef fdde 	bl	80005f8 <__aeabi_dmul>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	460b      	mov	r3, r1
 8010a40:	4630      	mov	r0, r6
 8010a42:	4639      	mov	r1, r7
 8010a44:	f7ef fc22 	bl	800028c <__adddf3>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	4629      	mov	r1, r5
 8010a50:	f7ef fc1a 	bl	8000288 <__aeabi_dsub>
 8010a54:	e7c4      	b.n	80109e0 <__kernel_sin+0xd0>
 8010a56:	bf00      	nop
 8010a58:	55555549 	.word	0x55555549
 8010a5c:	3fc55555 	.word	0x3fc55555
 8010a60:	3fe00000 	.word	0x3fe00000
 8010a64:	5acfd57c 	.word	0x5acfd57c
 8010a68:	3de5d93a 	.word	0x3de5d93a
 8010a6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010a70:	3e5ae5e6 	.word	0x3e5ae5e6
 8010a74:	57b1fe7d 	.word	0x57b1fe7d
 8010a78:	3ec71de3 	.word	0x3ec71de3
 8010a7c:	19c161d5 	.word	0x19c161d5
 8010a80:	3f2a01a0 	.word	0x3f2a01a0
 8010a84:	1110f8a6 	.word	0x1110f8a6
 8010a88:	3f811111 	.word	0x3f811111

08010a8c <fabs>:
 8010a8c:	ec51 0b10 	vmov	r0, r1, d0
 8010a90:	ee10 2a10 	vmov	r2, s0
 8010a94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a98:	ec43 2b10 	vmov	d0, r2, r3
 8010a9c:	4770      	bx	lr
	...

08010aa0 <scalbn>:
 8010aa0:	b570      	push	{r4, r5, r6, lr}
 8010aa2:	ec55 4b10 	vmov	r4, r5, d0
 8010aa6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010aaa:	4606      	mov	r6, r0
 8010aac:	462b      	mov	r3, r5
 8010aae:	b999      	cbnz	r1, 8010ad8 <scalbn+0x38>
 8010ab0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010ab4:	4323      	orrs	r3, r4
 8010ab6:	d03f      	beq.n	8010b38 <scalbn+0x98>
 8010ab8:	4b35      	ldr	r3, [pc, #212]	; (8010b90 <scalbn+0xf0>)
 8010aba:	4629      	mov	r1, r5
 8010abc:	ee10 0a10 	vmov	r0, s0
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f7ef fd99 	bl	80005f8 <__aeabi_dmul>
 8010ac6:	4b33      	ldr	r3, [pc, #204]	; (8010b94 <scalbn+0xf4>)
 8010ac8:	429e      	cmp	r6, r3
 8010aca:	4604      	mov	r4, r0
 8010acc:	460d      	mov	r5, r1
 8010ace:	da10      	bge.n	8010af2 <scalbn+0x52>
 8010ad0:	a327      	add	r3, pc, #156	; (adr r3, 8010b70 <scalbn+0xd0>)
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	e01f      	b.n	8010b18 <scalbn+0x78>
 8010ad8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010adc:	4291      	cmp	r1, r2
 8010ade:	d10c      	bne.n	8010afa <scalbn+0x5a>
 8010ae0:	ee10 2a10 	vmov	r2, s0
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	4629      	mov	r1, r5
 8010ae8:	f7ef fbd0 	bl	800028c <__adddf3>
 8010aec:	4604      	mov	r4, r0
 8010aee:	460d      	mov	r5, r1
 8010af0:	e022      	b.n	8010b38 <scalbn+0x98>
 8010af2:	460b      	mov	r3, r1
 8010af4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010af8:	3936      	subs	r1, #54	; 0x36
 8010afa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010afe:	4296      	cmp	r6, r2
 8010b00:	dd0d      	ble.n	8010b1e <scalbn+0x7e>
 8010b02:	2d00      	cmp	r5, #0
 8010b04:	a11c      	add	r1, pc, #112	; (adr r1, 8010b78 <scalbn+0xd8>)
 8010b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b0a:	da02      	bge.n	8010b12 <scalbn+0x72>
 8010b0c:	a11c      	add	r1, pc, #112	; (adr r1, 8010b80 <scalbn+0xe0>)
 8010b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b12:	a319      	add	r3, pc, #100	; (adr r3, 8010b78 <scalbn+0xd8>)
 8010b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b18:	f7ef fd6e 	bl	80005f8 <__aeabi_dmul>
 8010b1c:	e7e6      	b.n	8010aec <scalbn+0x4c>
 8010b1e:	1872      	adds	r2, r6, r1
 8010b20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010b24:	428a      	cmp	r2, r1
 8010b26:	dcec      	bgt.n	8010b02 <scalbn+0x62>
 8010b28:	2a00      	cmp	r2, #0
 8010b2a:	dd08      	ble.n	8010b3e <scalbn+0x9e>
 8010b2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010b30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010b34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010b38:	ec45 4b10 	vmov	d0, r4, r5
 8010b3c:	bd70      	pop	{r4, r5, r6, pc}
 8010b3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010b42:	da08      	bge.n	8010b56 <scalbn+0xb6>
 8010b44:	2d00      	cmp	r5, #0
 8010b46:	a10a      	add	r1, pc, #40	; (adr r1, 8010b70 <scalbn+0xd0>)
 8010b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b4c:	dac0      	bge.n	8010ad0 <scalbn+0x30>
 8010b4e:	a10e      	add	r1, pc, #56	; (adr r1, 8010b88 <scalbn+0xe8>)
 8010b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b54:	e7bc      	b.n	8010ad0 <scalbn+0x30>
 8010b56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010b5a:	3236      	adds	r2, #54	; 0x36
 8010b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010b60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010b64:	4620      	mov	r0, r4
 8010b66:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <scalbn+0xf8>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	e7d5      	b.n	8010b18 <scalbn+0x78>
 8010b6c:	f3af 8000 	nop.w
 8010b70:	c2f8f359 	.word	0xc2f8f359
 8010b74:	01a56e1f 	.word	0x01a56e1f
 8010b78:	8800759c 	.word	0x8800759c
 8010b7c:	7e37e43c 	.word	0x7e37e43c
 8010b80:	8800759c 	.word	0x8800759c
 8010b84:	fe37e43c 	.word	0xfe37e43c
 8010b88:	c2f8f359 	.word	0xc2f8f359
 8010b8c:	81a56e1f 	.word	0x81a56e1f
 8010b90:	43500000 	.word	0x43500000
 8010b94:	ffff3cb0 	.word	0xffff3cb0
 8010b98:	3c900000 	.word	0x3c900000
 8010b9c:	00000000 	.word	0x00000000

08010ba0 <floor>:
 8010ba0:	ec51 0b10 	vmov	r0, r1, d0
 8010ba4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010bb0:	2e13      	cmp	r6, #19
 8010bb2:	ee10 5a10 	vmov	r5, s0
 8010bb6:	ee10 8a10 	vmov	r8, s0
 8010bba:	460c      	mov	r4, r1
 8010bbc:	dc31      	bgt.n	8010c22 <floor+0x82>
 8010bbe:	2e00      	cmp	r6, #0
 8010bc0:	da14      	bge.n	8010bec <floor+0x4c>
 8010bc2:	a333      	add	r3, pc, #204	; (adr r3, 8010c90 <floor+0xf0>)
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	f7ef fb60 	bl	800028c <__adddf3>
 8010bcc:	2200      	movs	r2, #0
 8010bce:	2300      	movs	r3, #0
 8010bd0:	f7ef ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 8010bd4:	b138      	cbz	r0, 8010be6 <floor+0x46>
 8010bd6:	2c00      	cmp	r4, #0
 8010bd8:	da53      	bge.n	8010c82 <floor+0xe2>
 8010bda:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010bde:	4325      	orrs	r5, r4
 8010be0:	d052      	beq.n	8010c88 <floor+0xe8>
 8010be2:	4c2d      	ldr	r4, [pc, #180]	; (8010c98 <floor+0xf8>)
 8010be4:	2500      	movs	r5, #0
 8010be6:	4621      	mov	r1, r4
 8010be8:	4628      	mov	r0, r5
 8010bea:	e024      	b.n	8010c36 <floor+0x96>
 8010bec:	4f2b      	ldr	r7, [pc, #172]	; (8010c9c <floor+0xfc>)
 8010bee:	4137      	asrs	r7, r6
 8010bf0:	ea01 0307 	and.w	r3, r1, r7
 8010bf4:	4303      	orrs	r3, r0
 8010bf6:	d01e      	beq.n	8010c36 <floor+0x96>
 8010bf8:	a325      	add	r3, pc, #148	; (adr r3, 8010c90 <floor+0xf0>)
 8010bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfe:	f7ef fb45 	bl	800028c <__adddf3>
 8010c02:	2200      	movs	r2, #0
 8010c04:	2300      	movs	r3, #0
 8010c06:	f7ef ff87 	bl	8000b18 <__aeabi_dcmpgt>
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d0eb      	beq.n	8010be6 <floor+0x46>
 8010c0e:	2c00      	cmp	r4, #0
 8010c10:	bfbe      	ittt	lt
 8010c12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010c16:	4133      	asrlt	r3, r6
 8010c18:	18e4      	addlt	r4, r4, r3
 8010c1a:	ea24 0407 	bic.w	r4, r4, r7
 8010c1e:	2500      	movs	r5, #0
 8010c20:	e7e1      	b.n	8010be6 <floor+0x46>
 8010c22:	2e33      	cmp	r6, #51	; 0x33
 8010c24:	dd0b      	ble.n	8010c3e <floor+0x9e>
 8010c26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010c2a:	d104      	bne.n	8010c36 <floor+0x96>
 8010c2c:	ee10 2a10 	vmov	r2, s0
 8010c30:	460b      	mov	r3, r1
 8010c32:	f7ef fb2b 	bl	800028c <__adddf3>
 8010c36:	ec41 0b10 	vmov	d0, r0, r1
 8010c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c3e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8010c42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010c46:	40df      	lsrs	r7, r3
 8010c48:	4238      	tst	r0, r7
 8010c4a:	d0f4      	beq.n	8010c36 <floor+0x96>
 8010c4c:	a310      	add	r3, pc, #64	; (adr r3, 8010c90 <floor+0xf0>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	f7ef fb1b 	bl	800028c <__adddf3>
 8010c56:	2200      	movs	r2, #0
 8010c58:	2300      	movs	r3, #0
 8010c5a:	f7ef ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	d0c1      	beq.n	8010be6 <floor+0x46>
 8010c62:	2c00      	cmp	r4, #0
 8010c64:	da0a      	bge.n	8010c7c <floor+0xdc>
 8010c66:	2e14      	cmp	r6, #20
 8010c68:	d101      	bne.n	8010c6e <floor+0xce>
 8010c6a:	3401      	adds	r4, #1
 8010c6c:	e006      	b.n	8010c7c <floor+0xdc>
 8010c6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010c72:	2301      	movs	r3, #1
 8010c74:	40b3      	lsls	r3, r6
 8010c76:	441d      	add	r5, r3
 8010c78:	45a8      	cmp	r8, r5
 8010c7a:	d8f6      	bhi.n	8010c6a <floor+0xca>
 8010c7c:	ea25 0507 	bic.w	r5, r5, r7
 8010c80:	e7b1      	b.n	8010be6 <floor+0x46>
 8010c82:	2500      	movs	r5, #0
 8010c84:	462c      	mov	r4, r5
 8010c86:	e7ae      	b.n	8010be6 <floor+0x46>
 8010c88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010c8c:	e7ab      	b.n	8010be6 <floor+0x46>
 8010c8e:	bf00      	nop
 8010c90:	8800759c 	.word	0x8800759c
 8010c94:	7e37e43c 	.word	0x7e37e43c
 8010c98:	bff00000 	.word	0xbff00000
 8010c9c:	000fffff 	.word	0x000fffff

08010ca0 <_init>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	bf00      	nop
 8010ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ca6:	bc08      	pop	{r3}
 8010ca8:	469e      	mov	lr, r3
 8010caa:	4770      	bx	lr

08010cac <_fini>:
 8010cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cae:	bf00      	nop
 8010cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cb2:	bc08      	pop	{r3}
 8010cb4:	469e      	mov	lr, r3
 8010cb6:	4770      	bx	lr

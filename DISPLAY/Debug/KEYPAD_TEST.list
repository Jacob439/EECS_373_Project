
KEYPAD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c830  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800c9f0  0800c9f0  0001c9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce2c  0800ce2c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce34  0800ce34  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ce3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  200001d4  0800d010  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800d010  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c870  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f4  00000000  00000000  0003cab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  0003feb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014a4  00000000  00000000  00041910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f07e  00000000  00000000  00042db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed7b  00000000  00000000  00071e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00127491  00000000  00000000  00090bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008200  00000000  00000000  001b8040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001c0240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c9d8 	.word	0x0800c9d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800c9d8 	.word	0x0800c9d8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LCD_WriteCommand>:
#define SPI3_ADDR 0x40003C00
#define SPI_CR1_OFFSET 0x00
#define SPI_CR2_OFFSET 0x04

static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
  {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
//    setSPI_Size(mode_8bit);
//    LCD_PIN(LCD_DC,RESET);
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0); //DC
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee6:	4816      	ldr	r0, [pc, #88]	; (8000f40 <LCD_WriteCommand+0x6c>)
 8000ee8:	f003 fde2 	bl	8004ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0); //CS
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef2:	4813      	ldr	r0, [pc, #76]	; (8000f40 <LCD_WriteCommand+0x6c>)
 8000ef4:	f003 fddc 	bl	8004ab0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	2201      	movs	r2, #1
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <LCD_WriteCommand+0x70>)
 8000f02:	f007 f831 	bl	8007f68 <HAL_SPI_Transmit>
    if(argc){
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00e      	beq.n	8000f2a <LCD_WriteCommand+0x56>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <LCD_WriteCommand+0x6c>)
 8000f14:	f003 fdcc 	bl	8004ab0 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi3, (cmd+1), argc, HAL_MAX_DELAY);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1c59      	adds	r1, r3, #1
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <LCD_WriteCommand+0x70>)
 8000f26:	f007 f81f 	bl	8007f68 <HAL_SPI_Transmit>
    }
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1); //CS
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <LCD_WriteCommand+0x6c>)
 8000f32:	f003 fdbd 	bl	8004ab0 <HAL_GPIO_WritePin>
  }
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	48001000 	.word	0x48001000
 8000f44:	200006f0 	.word	0x200006f0

08000f48 <LCD_setPower>:

void LCD_setPower(uint8_t power)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <LCD_setPower+0x14>
 8000f58:	2329      	movs	r3, #41	; 0x29
 8000f5a:	e000      	b.n	8000f5e <LCD_setPower+0x16>
 8000f5c:	2328      	movs	r3, #40	; 0x28
 8000f5e:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffb4 	bl	8000ed4 <LCD_WriteCommand>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LCD_init>:

void LCD_init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1); //CS
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <LCD_init+0x74>)
 8000f82:	f003 fd95 	bl	8004ab0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0); //RST
 8000f86:	2200      	movs	r2, #0
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <LCD_init+0x74>)
 8000f8c:	f003 fd90 	bl	8004ab0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f002 f979 	bl	8003288 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1); //RST
 8000f96:	2201      	movs	r2, #1
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <LCD_init+0x74>)
 8000f9c:	f003 fd88 	bl	8004ab0 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000fa0:	20c8      	movs	r0, #200	; 0xc8
 8000fa2:	f002 f971 	bl	8003288 <HAL_Delay>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	e013      	b.n	8000fd4 <LCD_init+0x60>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LCD_init+0x78>)
 8000fb2:	441a      	add	r2, r3
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LCD_init+0x78>)
 8000fb8:	5ccb      	ldrb	r3, [r1, r3]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	f7ff ff89 	bl	8000ed4 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <LCD_init+0x78>)
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	2b4b      	cmp	r3, #75	; 0x4b
 8000fd8:	d9e8      	bls.n	8000fac <LCD_init+0x38>
  }

  LCD_setPower(ENABLE);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff ffb4 	bl	8000f48 <LCD_setPower>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	48001000 	.word	0x48001000
 8000fec:	0800ca00 	.word	0x0800ca00

08000ff0 <LCD_SetAddressWindow>:



  static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
  {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08b      	sub	sp, #44	; 0x2c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	4603      	mov	r3, r0
 8001004:	80bb      	strh	r3, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	803b      	strh	r3, [r7, #0]
    int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	847b      	strh	r3, [r7, #34]	; 0x22
 800101a:	883b      	ldrh	r3, [r7, #0]
 800101c:	843b      	strh	r3, [r7, #32]

    /* Column Address set */
    {
      uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800101e:	232a      	movs	r3, #42	; 0x2a
 8001020:	763b      	strb	r3, [r7, #24]
 8001022:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001026:	121b      	asrs	r3, r3, #8
 8001028:	b21b      	sxth	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	767b      	strb	r3, [r7, #25]
 800102e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001030:	b2db      	uxtb	r3, r3
 8001032:	76bb      	strb	r3, [r7, #26]
 8001034:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001038:	121b      	asrs	r3, r3, #8
 800103a:	b21b      	sxth	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	76fb      	strb	r3, [r7, #27]
 8001040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001042:	b2db      	uxtb	r3, r3
 8001044:	773b      	strb	r3, [r7, #28]
      LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2104      	movs	r1, #4
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff41 	bl	8000ed4 <LCD_WriteCommand>
    }
    /* Row Address set */
    {
      uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001052:	232b      	movs	r3, #43	; 0x2b
 8001054:	743b      	strb	r3, [r7, #16]
 8001056:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800105a:	121b      	asrs	r3, r3, #8
 800105c:	b21b      	sxth	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	747b      	strb	r3, [r7, #17]
 8001062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001064:	b2db      	uxtb	r3, r3
 8001066:	74bb      	strb	r3, [r7, #18]
 8001068:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800106c:	121b      	asrs	r3, r3, #8
 800106e:	b21b      	sxth	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	74fb      	strb	r3, [r7, #19]
 8001074:	8c3b      	ldrh	r3, [r7, #32]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	753b      	strb	r3, [r7, #20]
      LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2104      	movs	r1, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff27 	bl	8000ed4 <LCD_WriteCommand>
    }
    {
    /* Write to RAM */
      uint8_t cmd[] = { CMD_RAMWR };
 8001086:	232c      	movs	r3, #44	; 0x2c
 8001088:	733b      	strb	r3, [r7, #12]
      LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff1f 	bl	8000ed4 <LCD_WriteCommand>
    }
  }
 8001096:	bf00      	nop
 8001098:	372c      	adds	r7, #44	; 0x2c
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
	...

080010a0 <LCD_DrawPixel>:

  void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
  {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
 80010aa:	460b      	mov	r3, r1
 80010ac:	80bb      	strh	r3, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x > LCD_WIDTH-1) ||
 80010b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db39      	blt.n	800112e <LCD_DrawPixel+0x8e>
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	2bef      	cmp	r3, #239	; 0xef
 80010c0:	dc35      	bgt.n	800112e <LCD_DrawPixel+0x8e>
 80010c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db31      	blt.n	800112e <LCD_DrawPixel+0x8e>
       (y < 0) || (y > LCD_HEIGHT-1))
 80010ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010d2:	da2c      	bge.n	800112e <LCD_DrawPixel+0x8e>
      return;

    uint8_t data[2] = {color >> 8, color & 0xFF};
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	733b      	strb	r3, [r7, #12]
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	737b      	strb	r3, [r7, #13]

    LCD_SetAddressWindow(x, y, x, y);
 80010e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010f4:	f7ff ff7c 	bl	8000ff0 <LCD_SetAddressWindow>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1); //DC
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <LCD_DrawPixel+0x98>)
 8001100:	f003 fcd6 	bl	8004ab0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0); //CS
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <LCD_DrawPixel+0x98>)
 800110c:	f003 fcd0 	bl	8004ab0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, data, sizeof(data), HAL_MAX_DELAY);
 8001110:	f107 010c 	add.w	r1, r7, #12
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	2202      	movs	r2, #2
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <LCD_DrawPixel+0x9c>)
 800111c:	f006 ff24 	bl	8007f68 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1); //CS
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <LCD_DrawPixel+0x98>)
 8001128:	f003 fcc2 	bl	8004ab0 <HAL_GPIO_WritePin>
 800112c:	e000      	b.n	8001130 <LCD_DrawPixel+0x90>
      return;
 800112e:	bf00      	nop
  }
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	48001000 	.word	0x48001000
 800113c:	200006f0 	.word	0x200006f0

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001144:	b091      	sub	sp, #68	; 0x44
 8001146:	af00      	add	r7, sp, #0
int main(void)
 8001148:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800114c:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f002 f826 	bl	800319e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f9bf 	bl	80014d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001156:	f000 fa1f 	bl	8001598 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115a:	f001 f84b 	bl	80021f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800115e:	f000 fa4f 	bl	8001600 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001162:	f000 fab1 	bl	80016c8 <MX_CAN1_Init>
  MX_COMP1_Init();
 8001166:	f000 fae3 	bl	8001730 <MX_COMP1_Init>
  MX_COMP2_Init();
 800116a:	f000 fb0f 	bl	800178c <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 800116e:	f000 fb39 	bl	80017e4 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8001172:	f000 fb71 	bl	8001858 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8001176:	f000 fbb1 	bl	80018dc <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800117a:	f000 fbfb 	bl	8001974 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800117e:	f000 fc47 	bl	8001a10 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8001182:	f000 fc91 	bl	8001aa8 <MX_SAI1_Init>
  MX_SAI2_Init();
 8001186:	f000 fd27 	bl	8001bd8 <MX_SAI2_Init>
  MX_SPI3_Init();
 800118a:	f000 fd8d 	bl	8001ca8 <MX_SPI3_Init>
  MX_TIM1_Init();
 800118e:	f000 fdc9 	bl	8001d24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001192:	f000 fe7f 	bl	8001e94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001196:	f000 fee1 	bl	8001f5c <MX_TIM3_Init>
  MX_TIM4_Init();
 800119a:	f000 ff45 	bl	8002028 <MX_TIM4_Init>
  MX_TIM15_Init();
 800119e:	f000 ff9d 	bl	80020dc <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 80011a2:	f001 f81f 	bl	80021e4 <MX_USB_OTG_FS_USB_Init>
  //	  int row1;
  //	  int row2;
  //	  int row3;
  //	  int row4;
  //  };
	LCD_init();
 80011a6:	f7ff fee5 	bl	8000f74 <LCD_init>

  //  struct ROW_RETURN Col1_Return;
  //  struct ROW_RETURN Col2_Return;
  //  struct ROW_RETURN Col3_Return;
  //  struct ROW_RETURN Col4_Return;
  int val = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b4:	48a6      	ldr	r0, [pc, #664]	; (8001450 <main+0x310>)
 80011b6:	f003 fc7b 	bl	8004ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	48a4      	ldr	r0, [pc, #656]	; (8001454 <main+0x314>)
 80011c2:	f003 fc75 	bl	8004ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	48a0      	ldr	r0, [pc, #640]	; (8001450 <main+0x310>)
 80011ce:	f003 fc6f 	bl	8004ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d8:	489e      	ldr	r0, [pc, #632]	; (8001454 <main+0x314>)
 80011da:	f003 fc69 	bl	8004ab0 <HAL_GPIO_WritePin>
  uint8_t ASCII_Keypad_Lookup[4][4] = {{0x31, 0x32, 0x33, 0x41},
 80011de:	4b9e      	ldr	r3, [pc, #632]	; (8001458 <main+0x318>)
 80011e0:	1dbe      	adds	r6, r7, #6
 80011e2:	469c      	mov	ip, r3
 80011e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011e8:	6030      	str	r0, [r6, #0]
 80011ea:	6071      	str	r1, [r6, #4]
 80011ec:	60b2      	str	r2, [r6, #8]
 80011ee:	60f3      	str	r3, [r6, #12]
                                       {0x34, 0x35, 0x36, 0x42},
                                       {0x37, 0x38, 0x39, 0x43},
                                       {0x2A, 0x30, 0x23, 0x44}};
  const uint8_t max_digits = 5;
 80011f0:	2305      	movs	r3, #5
 80011f2:	713b      	strb	r3, [r7, #4]
  uint8_t ASCII_Weight[max_digits];
 80011f4:	793b      	ldrb	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	793b      	ldrb	r3, [r7, #4]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	4698      	mov	r8, r3
 8001202:	4691      	mov	r9, r2
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001210:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001214:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2200      	movs	r2, #0
 800121e:	461c      	mov	r4, r3
 8001220:	4615      	mov	r5, r2
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	00eb      	lsls	r3, r5, #3
 800122c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001230:	00e2      	lsls	r2, r4, #3
 8001232:	793b      	ldrb	r3, [r7, #4]
 8001234:	3307      	adds	r3, #7
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	ebad 0d03 	sub.w	sp, sp, r3
 800123e:	466b      	mov	r3, sp
 8001240:	3300      	adds	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
  uint8_t weightCounter = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	717b      	strb	r3, [r7, #5]
//  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
//  HAL_SPI_Transmit(&hspi3, data, sizeof(data), HAL_MAX_DELAY);



  for(int i =0; i < 240; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800124c:	e015      	b.n	800127a <main+0x13a>
  		  for(int j = 0; j <320; j++){
 800124e:	2300      	movs	r3, #0
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
 8001252:	e00b      	b.n	800126c <main+0x12c>
  	  LCD_DrawPixel(i, j, 0x0149);
 8001254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001256:	b21b      	sxth	r3, r3
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	b211      	sxth	r1, r2
 800125c:	f240 1249 	movw	r2, #329	; 0x149
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff1d 	bl	80010a0 <LCD_DrawPixel>
  		  for(int j = 0; j <320; j++){
 8001266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001268:	3301      	adds	r3, #1
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
 800126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001272:	dbef      	blt.n	8001254 <main+0x114>
  for(int i =0; i < 240; i++){
 8001274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001276:	3301      	adds	r3, #1
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800127a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800127c:	2bef      	cmp	r3, #239	; 0xef
 800127e:	dde6      	ble.n	800124e <main+0x10e>
  		  }
  	  }

  	  for(int j = 120; j < 240; j++){
 8001280:	2378      	movs	r3, #120	; 0x78
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
 8001284:	e032      	b.n	80012ec <main+0x1ac>
  		LCD_DrawPixel(200, j, 0xffC0);
 8001286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001288:	b21b      	sxth	r3, r3
 800128a:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 800128e:	4619      	mov	r1, r3
 8001290:	20c8      	movs	r0, #200	; 0xc8
 8001292:	f7ff ff05 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(201, j, 0xffC0);
 8001296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001298:	b21b      	sxth	r3, r3
 800129a:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 800129e:	4619      	mov	r1, r3
 80012a0:	20c9      	movs	r0, #201	; 0xc9
 80012a2:	f7ff fefd 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(202, j, 0xffC0);
 80012a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80012ae:	4619      	mov	r1, r3
 80012b0:	20ca      	movs	r0, #202	; 0xca
 80012b2:	f7ff fef5 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(203, j, 0xffC0);
 80012b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80012be:	4619      	mov	r1, r3
 80012c0:	20cb      	movs	r0, #203	; 0xcb
 80012c2:	f7ff feed 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(204, j, 0xffC0);
 80012c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80012ce:	4619      	mov	r1, r3
 80012d0:	20cc      	movs	r0, #204	; 0xcc
 80012d2:	f7ff fee5 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(205, j, 0xffC0);
 80012d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d8:	b21b      	sxth	r3, r3
 80012da:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80012de:	4619      	mov	r1, r3
 80012e0:	20cd      	movs	r0, #205	; 0xcd
 80012e2:	f7ff fedd 	bl	80010a0 <LCD_DrawPixel>
  	  for(int j = 120; j < 240; j++){
 80012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e8:	3301      	adds	r3, #1
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
 80012ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ee:	2bef      	cmp	r3, #239	; 0xef
 80012f0:	ddc9      	ble.n	8001286 <main+0x146>
  	  }

  	for(int j = 120; j < 240; j++){
 80012f2:	2378      	movs	r3, #120	; 0x78
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
 80012f6:	e032      	b.n	800135e <main+0x21e>
  	  		LCD_DrawPixel(140, j, 0xffC0);
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001300:	4619      	mov	r1, r3
 8001302:	208c      	movs	r0, #140	; 0x8c
 8001304:	f7ff fecc 	bl	80010a0 <LCD_DrawPixel>
  	  		LCD_DrawPixel(141, j, 0xffC0);
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	b21b      	sxth	r3, r3
 800130c:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001310:	4619      	mov	r1, r3
 8001312:	208d      	movs	r0, #141	; 0x8d
 8001314:	f7ff fec4 	bl	80010a0 <LCD_DrawPixel>
  	  		LCD_DrawPixel(142, j, 0xffC0);
 8001318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131a:	b21b      	sxth	r3, r3
 800131c:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001320:	4619      	mov	r1, r3
 8001322:	208e      	movs	r0, #142	; 0x8e
 8001324:	f7ff febc 	bl	80010a0 <LCD_DrawPixel>
  	  		LCD_DrawPixel(143, j, 0xffC0);
 8001328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132a:	b21b      	sxth	r3, r3
 800132c:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001330:	4619      	mov	r1, r3
 8001332:	208f      	movs	r0, #143	; 0x8f
 8001334:	f7ff feb4 	bl	80010a0 <LCD_DrawPixel>
  	  		LCD_DrawPixel(144, j, 0xffC0);
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	b21b      	sxth	r3, r3
 800133c:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001340:	4619      	mov	r1, r3
 8001342:	2090      	movs	r0, #144	; 0x90
 8001344:	f7ff feac 	bl	80010a0 <LCD_DrawPixel>
  	  		LCD_DrawPixel(145, j, 0xffC0);
 8001348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134a:	b21b      	sxth	r3, r3
 800134c:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001350:	4619      	mov	r1, r3
 8001352:	2091      	movs	r0, #145	; 0x91
 8001354:	f7ff fea4 	bl	80010a0 <LCD_DrawPixel>
  	for(int j = 120; j < 240; j++){
 8001358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135a:	3301      	adds	r3, #1
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
 800135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001360:	2bef      	cmp	r3, #239	; 0xef
 8001362:	ddc9      	ble.n	80012f8 <main+0x1b8>
  	  	  }
  	for(int i =205; i>144; i--){
 8001364:	23cd      	movs	r3, #205	; 0xcd
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001368:	e032      	b.n	80013d0 <main+0x290>
  		LCD_DrawPixel(i, 180, 0xffC0);
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	b21b      	sxth	r3, r3
 800136e:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001372:	21b4      	movs	r1, #180	; 0xb4
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe93 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(i, 181, 0xffC0);
 800137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137c:	b21b      	sxth	r3, r3
 800137e:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001382:	21b5      	movs	r1, #181	; 0xb5
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe8b 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(i, 182, 0xffC0);
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	b21b      	sxth	r3, r3
 800138e:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001392:	21b6      	movs	r1, #182	; 0xb6
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe83 	bl	80010a0 <LCD_DrawPixel>
  		LCD_DrawPixel(i, 183, 0xffC0);
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	b21b      	sxth	r3, r3
 800139e:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80013a2:	21b7      	movs	r1, #183	; 0xb7
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe7b 	bl	80010a0 <LCD_DrawPixel>
  		  		LCD_DrawPixel(i, 184, 0xffC0);
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80013b2:	21b8      	movs	r1, #184	; 0xb8
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe73 	bl	80010a0 <LCD_DrawPixel>
  		  		LCD_DrawPixel(i, 185, 0xffC0);
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	b21b      	sxth	r3, r3
 80013be:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80013c2:	21b9      	movs	r1, #185	; 0xb9
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe6b 	bl	80010a0 <LCD_DrawPixel>
  	for(int i =205; i>144; i--){
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	3b01      	subs	r3, #1
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	2b90      	cmp	r3, #144	; 0x90
 80013d4:	dcc9      	bgt.n	800136a <main+0x22a>
  	}
  	for(int j = 120; j < 200; j++){
 80013d6:	2378      	movs	r3, #120	; 0x78
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013da:	e032      	b.n	8001442 <main+0x302>
  	  	  		LCD_DrawPixel(120, j, 0xffC0);
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	b21b      	sxth	r3, r3
 80013e0:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80013e4:	4619      	mov	r1, r3
 80013e6:	2078      	movs	r0, #120	; 0x78
 80013e8:	f7ff fe5a 	bl	80010a0 <LCD_DrawPixel>
  	  	  		LCD_DrawPixel(121, j, 0xffC0);
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80013f4:	4619      	mov	r1, r3
 80013f6:	2079      	movs	r0, #121	; 0x79
 80013f8:	f7ff fe52 	bl	80010a0 <LCD_DrawPixel>
  	  	  		LCD_DrawPixel(122, j, 0xffC0);
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	b21b      	sxth	r3, r3
 8001400:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001404:	4619      	mov	r1, r3
 8001406:	207a      	movs	r0, #122	; 0x7a
 8001408:	f7ff fe4a 	bl	80010a0 <LCD_DrawPixel>
  	  	  		LCD_DrawPixel(123, j, 0xffC0);
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	b21b      	sxth	r3, r3
 8001410:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001414:	4619      	mov	r1, r3
 8001416:	207b      	movs	r0, #123	; 0x7b
 8001418:	f7ff fe42 	bl	80010a0 <LCD_DrawPixel>
  	  	  		LCD_DrawPixel(124, j, 0xffC0);
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	b21b      	sxth	r3, r3
 8001420:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001424:	4619      	mov	r1, r3
 8001426:	207c      	movs	r0, #124	; 0x7c
 8001428:	f7ff fe3a 	bl	80010a0 <LCD_DrawPixel>
  	  	  		LCD_DrawPixel(125, j, 0xffC0);
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	b21b      	sxth	r3, r3
 8001430:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001434:	4619      	mov	r1, r3
 8001436:	207d      	movs	r0, #125	; 0x7d
 8001438:	f7ff fe32 	bl	80010a0 <LCD_DrawPixel>
  	for(int j = 120; j < 200; j++){
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	3301      	adds	r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	2bc7      	cmp	r3, #199	; 0xc7
 8001446:	ddc9      	ble.n	80013dc <main+0x29c>
  	  	  	  }
  	for(int j = 220; j < 226; j++){
 8001448:	23dc      	movs	r3, #220	; 0xdc
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
 800144c:	e039      	b.n	80014c2 <main+0x382>
 800144e:	bf00      	nop
 8001450:	48001000 	.word	0x48001000
 8001454:	48001400 	.word	0x48001400
 8001458:	0800c9f0 	.word	0x0800c9f0
  	  	  	  		LCD_DrawPixel(120, j, 0xffC0);
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	b21b      	sxth	r3, r3
 8001460:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001464:	4619      	mov	r1, r3
 8001466:	2078      	movs	r0, #120	; 0x78
 8001468:	f7ff fe1a 	bl	80010a0 <LCD_DrawPixel>
  	  	  	  		LCD_DrawPixel(121, j, 0xffC0);
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	b21b      	sxth	r3, r3
 8001470:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001474:	4619      	mov	r1, r3
 8001476:	2079      	movs	r0, #121	; 0x79
 8001478:	f7ff fe12 	bl	80010a0 <LCD_DrawPixel>
  	  	  	  		LCD_DrawPixel(122, j, 0xffC0);
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	b21b      	sxth	r3, r3
 8001480:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001484:	4619      	mov	r1, r3
 8001486:	207a      	movs	r0, #122	; 0x7a
 8001488:	f7ff fe0a 	bl	80010a0 <LCD_DrawPixel>
  	  	  	  		LCD_DrawPixel(123, j, 0xffC0);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	b21b      	sxth	r3, r3
 8001490:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001494:	4619      	mov	r1, r3
 8001496:	207b      	movs	r0, #123	; 0x7b
 8001498:	f7ff fe02 	bl	80010a0 <LCD_DrawPixel>
  	  	  	  		LCD_DrawPixel(124, j, 0xffC0);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	b21b      	sxth	r3, r3
 80014a0:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80014a4:	4619      	mov	r1, r3
 80014a6:	207c      	movs	r0, #124	; 0x7c
 80014a8:	f7ff fdfa 	bl	80010a0 <LCD_DrawPixel>
  	  	  	  		LCD_DrawPixel(125, j, 0xffC0);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80014b4:	4619      	mov	r1, r3
 80014b6:	207d      	movs	r0, #125	; 0x7d
 80014b8:	f7ff fdf2 	bl	80010a0 <LCD_DrawPixel>
  	for(int j = 220; j < 226; j++){
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	3301      	adds	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	2be1      	cmp	r3, #225	; 0xe1
 80014c6:	ddc9      	ble.n	800145c <main+0x31c>
//	  LCD_DrawPixel(50, 50, 0x001f);
//	  LCD_DrawPixel(100, 100, 0xffC0);
//	  LCD_DrawPixel(100, 100, 0x001f);
//	  LCD_DrawPixel(1, 1, 0xffC0);
//	  LCD_DrawPixel(1, 1, 0x001f);
	  HAL_Delay(500);
 80014c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014cc:	f001 fedc 	bl	8003288 <HAL_Delay>
 80014d0:	e7fa      	b.n	80014c8 <main+0x388>
 80014d2:	bf00      	nop

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b096      	sub	sp, #88	; 0x58
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2244      	movs	r2, #68	; 0x44
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f009 fb25 	bl	800ab32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014fa:	f003 fb21 	bl	8004b40 <HAL_PWREx_ControlVoltageScaling>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001504:	f000 ffa8 	bl	8002458 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001508:	f003 faea 	bl	8004ae0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <SystemClock_Config+0xc0>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	4a20      	ldr	r2, [pc, #128]	; (8001594 <SystemClock_Config+0xc0>)
 8001514:	f023 0318 	bic.w	r3, r3, #24
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800151c:	2314      	movs	r3, #20
 800151e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800152c:	2360      	movs	r3, #96	; 0x60
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001534:	2301      	movs	r3, #1
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800153c:	2310      	movs	r3, #16
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001548:	2302      	movs	r3, #2
 800154a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fba9 	bl	8004ca8 <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800155c:	f000 ff7c 	bl	8002458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2303      	movs	r3, #3
 8001566:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	2101      	movs	r1, #1
 8001578:	4618      	mov	r0, r3
 800157a:	f003 ffaf 	bl	80054dc <HAL_RCC_ClockConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001584:	f000 ff68 	bl	8002458 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001588:	f005 fcb8 	bl	8006efc <HAL_RCCEx_EnableMSIPLLMode>
}
 800158c:	bf00      	nop
 800158e:	3758      	adds	r7, #88	; 0x58
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0a6      	sub	sp, #152	; 0x98
 800159c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2294      	movs	r2, #148	; 0x94
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f009 fac4 	bl	800ab32 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80015aa:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80015ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80015c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015c4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015c6:	2301      	movs	r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80015ce:	2318      	movs	r3, #24
 80015d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015da:	2302      	movs	r3, #2
 80015dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <PeriphCommonClock_Config+0x64>)
 80015e0:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 fa37 	bl	8005a58 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80015f0:	f000 ff32 	bl	8002458 <Error_Handler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3798      	adds	r7, #152	; 0x98
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	01110000 	.word	0x01110000

08001600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001618:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <MX_ADC1_Init+0xc0>)
 800161a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <MX_ADC1_Init+0xbc>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <MX_ADC1_Init+0xbc>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001636:	2204      	movs	r2, #4
 8001638:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <MX_ADC1_Init+0xbc>)
 800163c:	2200      	movs	r2, #0
 800163e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001642:	2200      	movs	r2, #0
 8001644:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001648:	2201      	movs	r2, #1
 800164a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_ADC1_Init+0xbc>)
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001656:	2200      	movs	r2, #0
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_ADC1_Init+0xbc>)
 800165c:	2200      	movs	r2, #0
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_ADC1_Init+0xbc>)
 800166a:	2200      	movs	r2, #0
 800166c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001676:	4811      	ldr	r0, [pc, #68]	; (80016bc <MX_ADC1_Init+0xbc>)
 8001678:	f001 ffca 	bl	8003610 <HAL_ADC_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001682:	f000 fee9 	bl	8002458 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_ADC1_Init+0xc4>)
 8001688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800168a:	2306      	movs	r3, #6
 800168c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001692:	237f      	movs	r3, #127	; 0x7f
 8001694:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001696:	2304      	movs	r3, #4
 8001698:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_ADC1_Init+0xbc>)
 80016a4:	f002 f8fa 	bl	800389c <HAL_ADC_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80016ae:	f000 fed3 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001f0 	.word	0x200001f0
 80016c0:	50040000 	.word	0x50040000
 80016c4:	04300002 	.word	0x04300002

080016c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <MX_CAN1_Init+0x60>)
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <MX_CAN1_Init+0x64>)
 80016d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_CAN1_Init+0x60>)
 80016d4:	2210      	movs	r2, #16
 80016d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <MX_CAN1_Init+0x60>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_CAN1_Init+0x60>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_CAN1_Init+0x60>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_CAN1_Init+0x60>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_CAN1_Init+0x60>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_CAN1_Init+0x60>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_CAN1_Init+0x60>)
 80016fe:	2200      	movs	r2, #0
 8001700:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_CAN1_Init+0x60>)
 8001704:	2200      	movs	r2, #0
 8001706:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_CAN1_Init+0x60>)
 800170a:	2200      	movs	r2, #0
 800170c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_CAN1_Init+0x60>)
 8001710:	2200      	movs	r2, #0
 8001712:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_CAN1_Init+0x60>)
 8001716:	f002 fcbd 	bl	8004094 <HAL_CAN_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001720:	f000 fe9a 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000258 	.word	0x20000258
 800172c:	40006400 	.word	0x40006400

08001730 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_COMP1_Init+0x50>)
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <MX_COMP1_Init+0x54>)
 8001738:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_COMP1_Init+0x50>)
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_COMP1_Init+0x58>)
 800173e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_COMP1_Init+0x50>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_COMP1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_COMP1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_COMP1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_COMP1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_COMP1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_COMP1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_COMP1_Init+0x50>)
 800176c:	f002 fe36 	bl	80043dc <HAL_COMP_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8001776:	f000 fe6f 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000280 	.word	0x20000280
 8001784:	40010200 	.word	0x40010200
 8001788:	00800030 	.word	0x00800030

0800178c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_COMP2_Init+0x50>)
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <MX_COMP2_Init+0x54>)
 8001794:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_COMP2_Init+0x50>)
 8001798:	2270      	movs	r2, #112	; 0x70
 800179a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_COMP2_Init+0x50>)
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_COMP2_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_COMP2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_COMP2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_COMP2_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_COMP2_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_COMP2_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_COMP2_Init+0x50>)
 80017c8:	f002 fe08 	bl	80043dc <HAL_COMP_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80017d2:	f000 fe41 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002ac 	.word	0x200002ac
 80017e0:	40010204 	.word	0x40010204

080017e4 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 80017ea:	4a19      	ldr	r2, [pc, #100]	; (8001850 <MX_I2C1_SMBUS_Init+0x6c>)
 80017ec:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 80017f0:	4a18      	ldr	r2, [pc, #96]	; (8001854 <MX_I2C1_SMBUS_Init+0x70>)
 80017f2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 80017fc:	2202      	movs	r2, #2
 80017fe:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 8001802:	2201      	movs	r2, #1
 8001804:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 800182c:	2200      	movs	r2, #0
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 8001832:	f248 1286 	movw	r2, #33158	; 0x8186
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_I2C1_SMBUS_Init+0x68>)
 800183a:	f006 f9e7 	bl	8007c0c <HAL_SMBUS_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001844:	f000 fe08 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002d8 	.word	0x200002d8
 8001850:	40005400 	.word	0x40005400
 8001854:	00707cbb 	.word	0x00707cbb

08001858 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 800185e:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <MX_I2C2_SMBUS_Init+0x7c>)
 8001860:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 8001864:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <MX_I2C2_SMBUS_Init+0x80>)
 8001866:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 8001870:	2202      	movs	r2, #2
 8001872:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 8001876:	2201      	movs	r2, #1
 8001878:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 800189a:	2200      	movs	r2, #0
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 80018a6:	f248 1286 	movw	r2, #33158	; 0x8186
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 80018ac:	4808      	ldr	r0, [pc, #32]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 80018ae:	f006 f9ad 	bl	8007c0c <HAL_SMBUS_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 80018b8:	f000 fdce 	bl	8002458 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_I2C2_SMBUS_Init+0x78>)
 80018be:	f006 fa5d 	bl	8007d7c <HAL_SMBUS_EnableAlert_IT>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 80018c8:	f000 fdc6 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000328 	.word	0x20000328
 80018d4:	40005800 	.word	0x40005800
 80018d8:	00707cbb 	.word	0x00707cbb

080018dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <MX_LPUART1_UART_Init+0x94>)
 80018e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001924:	4811      	ldr	r0, [pc, #68]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 8001926:	f007 fca1 	bl	800926c <HAL_UART_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001930:	f000 fd92 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 8001938:	f008 fac6 	bl	8009ec8 <HAL_UARTEx_SetTxFifoThreshold>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001942:	f000 fd89 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001946:	2100      	movs	r1, #0
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 800194a:	f008 fafb 	bl	8009f44 <HAL_UARTEx_SetRxFifoThreshold>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001954:	f000 fd80 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_LPUART1_UART_Init+0x90>)
 800195a:	f008 fa7c 	bl	8009e56 <HAL_UARTEx_DisableFifoMode>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001964:	f000 fd78 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000378 	.word	0x20000378
 8001970:	40008000 	.word	0x40008000

08001974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 800197a:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <MX_USART2_UART_Init+0x98>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019c0:	f007 fc54 	bl	800926c <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80019ca:	f000 fd45 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019d2:	f008 fa79 	bl	8009ec8 <HAL_UARTEx_SetTxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80019dc:	f000 fd3c 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	4809      	ldr	r0, [pc, #36]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019e4:	f008 faae 	bl	8009f44 <HAL_UARTEx_SetRxFifoThreshold>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80019ee:	f000 fd33 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_USART2_UART_Init+0x94>)
 80019f4:	f008 fa2f 	bl	8009e56 <HAL_UARTEx_DisableFifoMode>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80019fe:	f000 fd2b 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000040c 	.word	0x2000040c
 8001a0c:	40004400 	.word	0x40004400

08001a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a16:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <MX_USART3_UART_Init+0x94>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a58:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a5a:	f007 fc07 	bl	800926c <HAL_UART_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a64:	f000 fcf8 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a6c:	f008 fa2c 	bl	8009ec8 <HAL_UARTEx_SetTxFifoThreshold>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a76:	f000 fcef 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4808      	ldr	r0, [pc, #32]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a7e:	f008 fa61 	bl	8009f44 <HAL_UARTEx_SetRxFifoThreshold>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a88:	f000 fce6 	bl	8002458 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_USART3_UART_Init+0x90>)
 8001a8e:	f008 f9e2 	bl	8009e56 <HAL_UARTEx_DisableFifoMode>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a98:	f000 fcde 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200004a0 	.word	0x200004a0
 8001aa4:	40004800 	.word	0x40004800

08001aa8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001aac:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001aae:	4a46      	ldr	r2, [pc, #280]	; (8001bc8 <MX_SAI1_Init+0x120>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ab2:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001aca:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001af0:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <MX_SAI1_Init+0x124>)
 8001af2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b20:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b24:	2208      	movs	r2, #8
 8001b26:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001b58:	481a      	ldr	r0, [pc, #104]	; (8001bc4 <MX_SAI1_Init+0x11c>)
 8001b5a:	f005 fd0b 	bl	8007574 <HAL_SAI_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001b64:	f000 fc78 	bl	8002458 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <MX_SAI1_Init+0x12c>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <MX_SAI1_Init+0x124>)
 8001b90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001baa:	2302      	movs	r3, #2
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <MX_SAI1_Init+0x128>)
 8001bb2:	f005 fcad 	bl	8007510 <HAL_SAI_InitProtocol>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8001bbc:	f000 fc4c 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000534 	.word	0x20000534
 8001bc8:	40015424 	.word	0x40015424
 8001bcc:	0002ee00 	.word	0x0002ee00
 8001bd0:	200005c8 	.word	0x200005c8
 8001bd4:	40015404 	.word	0x40015404

08001bd8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001bde:	4a30      	ldr	r2, [pc, #192]	; (8001ca0 <MX_SAI2_Init+0xc8>)
 8001be0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bf4:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c18:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c20:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <MX_SAI2_Init+0xcc>)
 8001c22:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c50:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c54:	2208      	movs	r2, #8
 8001c56:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_SAI2_Init+0xc4>)
 8001c8a:	f005 fc73 	bl	8007574 <HAL_SAI_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8001c94:	f000 fbe0 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000065c 	.word	0x2000065c
 8001ca0:	40015804 	.word	0x40015804
 8001ca4:	0002ee00 	.word	0x0002ee00

08001ca8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <MX_SPI3_Init+0x78>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001d02:	2208      	movs	r2, #8
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001d08:	f006 f88b 	bl	8007e22 <HAL_SPI_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f000 fba1 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200006f0 	.word	0x200006f0
 8001d20:	40003c00 	.word	0x40003c00

08001d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b098      	sub	sp, #96	; 0x60
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d56:	463b      	mov	r3, r7
 8001d58:	222c      	movs	r2, #44	; 0x2c
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f008 fee8 	bl	800ab32 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d64:	4a4a      	ldr	r2, [pc, #296]	; (8001e90 <MX_TIM1_Init+0x16c>)
 8001d66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d68:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d74:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d8e:	483f      	ldr	r0, [pc, #252]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001d90:	f006 fbc4 	bl	800851c <HAL_TIM_PWM_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d9a:	f000 fb5d 	bl	8002458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dae:	4619      	mov	r1, r3
 8001db0:	4836      	ldr	r0, [pc, #216]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001db2:	f007 f88f 	bl	8008ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001dbc:	f000 fb4c 	bl	8002458 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	482d      	ldr	r0, [pc, #180]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001dd6:	f007 f983 	bl	80090e0 <HAL_TIMEx_ConfigBreakInput>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001de0:	f000 fb3a 	bl	8002458 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001de4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001de8:	461a      	mov	r2, r3
 8001dea:	2102      	movs	r1, #2
 8001dec:	4827      	ldr	r0, [pc, #156]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001dee:	f007 f977 	bl	80090e0 <HAL_TIMEx_ConfigBreakInput>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001df8:	f000 fb2e 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfc:	2360      	movs	r3, #96	; 0x60
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4619      	mov	r1, r3
 8001e20:	481a      	ldr	r0, [pc, #104]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001e22:	f006 fbd3 	bl	80085cc <HAL_TIM_PWM_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001e2c:	f000 fb14 	bl	8002458 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4807      	ldr	r0, [pc, #28]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001e6e:	f007 f8b9 	bl	8008fe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001e78:	f000 faee 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <MX_TIM1_Init+0x168>)
 8001e7e:	f000 fe9f 	bl	8002bc0 <HAL_TIM_MspPostInit>

}
 8001e82:	bf00      	nop
 8001e84:	3760      	adds	r7, #96	; 0x60
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000754 	.word	0x20000754
 8001e90:	40012c00 	.word	0x40012c00

08001e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001ece:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ee0:	481d      	ldr	r0, [pc, #116]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001ee2:	f006 fb1b 	bl	800851c <HAL_TIM_PWM_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001eec:	f000 fab4 	bl	8002458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4816      	ldr	r0, [pc, #88]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001f00:	f006 ffe8 	bl	8008ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001f0a:	f000 faa5 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0e:	2360      	movs	r3, #96	; 0x60
 8001f10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	4619      	mov	r1, r3
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001f26:	f006 fb51 	bl	80085cc <HAL_TIM_PWM_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001f30:	f000 fa92 	bl	8002458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f34:	463b      	mov	r3, r7
 8001f36:	2208      	movs	r2, #8
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4807      	ldr	r0, [pc, #28]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001f3c:	f006 fb46 	bl	80085cc <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001f46:	f000 fa87 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <MX_TIM2_Init+0xc4>)
 8001f4c:	f000 fe38 	bl	8002bc0 <HAL_TIM_MspPostInit>

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200007a0 	.word	0x200007a0

08001f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001f82:	4a28      	ldr	r2, [pc, #160]	; (8002024 <MX_TIM3_Init+0xc8>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa6:	481e      	ldr	r0, [pc, #120]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001fa8:	f006 fab8 	bl	800851c <HAL_TIM_PWM_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001fb2:	f000 fa51 	bl	8002458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4816      	ldr	r0, [pc, #88]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001fc6:	f006 ff85 	bl	8008ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001fd0:	f000 fa42 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd4:	2360      	movs	r3, #96	; 0x60
 8001fd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_TIM3_Init+0xc4>)
 8001fec:	f006 faee 	bl	80085cc <HAL_TIM_PWM_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001ff6:	f000 fa2f 	bl	8002458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	4619      	mov	r1, r3
 8002000:	4807      	ldr	r0, [pc, #28]	; (8002020 <MX_TIM3_Init+0xc4>)
 8002002:	f006 fae3 	bl	80085cc <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800200c:	f000 fa24 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <MX_TIM3_Init+0xc4>)
 8002012:	f000 fdd5 	bl	8002bc0 <HAL_TIM_MspPostInit>

}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200007ec 	.word	0x200007ec
 8002024:	40000400 	.word	0x40000400

08002028 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203a:	463b      	mov	r3, r7
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <MX_TIM4_Init+0xac>)
 800204e:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <MX_TIM4_Init+0xb0>)
 8002050:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <MX_TIM4_Init+0xac>)
 8002054:	2200      	movs	r2, #0
 8002056:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <MX_TIM4_Init+0xac>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <MX_TIM4_Init+0xac>)
 8002060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002064:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <MX_TIM4_Init+0xac>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <MX_TIM4_Init+0xac>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002072:	4818      	ldr	r0, [pc, #96]	; (80020d4 <MX_TIM4_Init+0xac>)
 8002074:	f006 fa52 	bl	800851c <HAL_TIM_PWM_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800207e:	f000 f9eb 	bl	8002458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4810      	ldr	r0, [pc, #64]	; (80020d4 <MX_TIM4_Init+0xac>)
 8002092:	f006 ff1f 	bl	8008ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800209c:	f000 f9dc 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a0:	2360      	movs	r3, #96	; 0x60
 80020a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020b0:	463b      	mov	r3, r7
 80020b2:	220c      	movs	r2, #12
 80020b4:	4619      	mov	r1, r3
 80020b6:	4807      	ldr	r0, [pc, #28]	; (80020d4 <MX_TIM4_Init+0xac>)
 80020b8:	f006 fa88 	bl	80085cc <HAL_TIM_PWM_ConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80020c2:	f000 f9c9 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <MX_TIM4_Init+0xac>)
 80020c8:	f000 fd7a 	bl	8002bc0 <HAL_TIM_MspPostInit>

}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000838 	.word	0x20000838
 80020d8:	40000800 	.word	0x40000800

080020dc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b096      	sub	sp, #88	; 0x58
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	222c      	movs	r2, #44	; 0x2c
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f008 fd12 	bl	800ab32 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <MX_TIM15_Init+0x100>)
 8002110:	4a33      	ldr	r2, [pc, #204]	; (80021e0 <MX_TIM15_Init+0x104>)
 8002112:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <MX_TIM15_Init+0x100>)
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <MX_TIM15_Init+0x100>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <MX_TIM15_Init+0x100>)
 8002122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002126:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <MX_TIM15_Init+0x100>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <MX_TIM15_Init+0x100>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <MX_TIM15_Init+0x100>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800213a:	4828      	ldr	r0, [pc, #160]	; (80021dc <MX_TIM15_Init+0x100>)
 800213c:	f006 f9ee 	bl	800851c <HAL_TIM_PWM_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002146:	f000 f987 	bl	8002458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002152:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002156:	4619      	mov	r1, r3
 8002158:	4820      	ldr	r0, [pc, #128]	; (80021dc <MX_TIM15_Init+0x100>)
 800215a:	f006 febb 	bl	8008ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002164:	f000 f978 	bl	8002458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002168:	2360      	movs	r3, #96	; 0x60
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002170:	2300      	movs	r3, #0
 8002172:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002184:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002188:	2200      	movs	r2, #0
 800218a:	4619      	mov	r1, r3
 800218c:	4813      	ldr	r0, [pc, #76]	; (80021dc <MX_TIM15_Init+0x100>)
 800218e:	f006 fa1d 	bl	80085cc <HAL_TIM_PWM_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002198:	f000 f95e 	bl	8002458 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM15_Init+0x100>)
 80021c0:	f006 ff10 	bl	8008fe4 <HAL_TIMEx_ConfigBreakDeadTime>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80021ca:	f000 f945 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM15_Init+0x100>)
 80021d0:	f000 fcf6 	bl	8002bc0 <HAL_TIM_MspPostInit>

}
 80021d4:	bf00      	nop
 80021d6:	3758      	adds	r7, #88	; 0x58
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000884 	.word	0x20000884
 80021e0:	40014000 	.word	0x40014000

080021e4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800220a:	4b85      	ldr	r3, [pc, #532]	; (8002420 <MX_GPIO_Init+0x22c>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	4a84      	ldr	r2, [pc, #528]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002216:	4b82      	ldr	r3, [pc, #520]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	623b      	str	r3, [r7, #32]
 8002220:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	4a7e      	ldr	r2, [pc, #504]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800223a:	4b79      	ldr	r3, [pc, #484]	; (8002420 <MX_GPIO_Init+0x22c>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	4a78      	ldr	r2, [pc, #480]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	4a72      	ldr	r2, [pc, #456]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800225e:	4b70      	ldr	r3, [pc, #448]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <MX_GPIO_Init+0x22c>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	4a6c      	ldr	r2, [pc, #432]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002276:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	4b67      	ldr	r3, [pc, #412]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	4a66      	ldr	r2, [pc, #408]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228e:	4b64      	ldr	r3, [pc, #400]	; (8002420 <MX_GPIO_Init+0x22c>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800229a:	4b61      	ldr	r3, [pc, #388]	; (8002420 <MX_GPIO_Init+0x22c>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	4a60      	ldr	r2, [pc, #384]	; (8002420 <MX_GPIO_Init+0x22c>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <MX_GPIO_Init+0x22c>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <MX_GPIO_Init+0x22c>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <MX_GPIO_Init+0x22c>)
 80022b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022be:	4b58      	ldr	r3, [pc, #352]	; (8002420 <MX_GPIO_Init+0x22c>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80022ca:	f002 fcdd 	bl	8004c88 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80022d4:	4853      	ldr	r0, [pc, #332]	; (8002424 <MX_GPIO_Init+0x230>)
 80022d6:	f002 fbeb 	bl	8004ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80022e0:	4851      	ldr	r0, [pc, #324]	; (8002428 <MX_GPIO_Init+0x234>)
 80022e2:	f002 fbe5 	bl	8004ab0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022e6:	2310      	movs	r3, #16
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022f6:	2305      	movs	r3, #5
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	f002 fa42 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002308:	23e0      	movs	r3, #224	; 0xe0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002310:	2301      	movs	r3, #1
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231e:	f002 fa35 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002322:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002328:	2311      	movs	r3, #17
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	483a      	ldr	r0, [pc, #232]	; (8002424 <MX_GPIO_Init+0x230>)
 800233c:	f002 fa26 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8002340:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800234a:	2301      	movs	r3, #1
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	4619      	mov	r1, r3
 8002358:	4833      	ldr	r0, [pc, #204]	; (8002428 <MX_GPIO_Init+0x234>)
 800235a:	f002 fa17 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800235e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002364:	2311      	movs	r3, #17
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	482c      	ldr	r0, [pc, #176]	; (8002428 <MX_GPIO_Init+0x234>)
 8002378:	f002 fa08 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800237c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002386:	2301      	movs	r3, #1
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	4619      	mov	r1, r3
 8002390:	4826      	ldr	r0, [pc, #152]	; (800242c <MX_GPIO_Init+0x238>)
 8002392:	f002 f9fb 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002396:	f44f 7340 	mov.w	r3, #768	; 0x300
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023a8:	230c      	movs	r3, #12
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b0:	4619      	mov	r1, r3
 80023b2:	481f      	ldr	r0, [pc, #124]	; (8002430 <MX_GPIO_Init+0x23c>)
 80023b4:	f002 f9ea 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80023b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ca:	230a      	movs	r3, #10
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d8:	f002 f9d8 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	4619      	mov	r1, r3
 80023f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f4:	f002 f9ca 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023f8:	2304      	movs	r3, #4
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002408:	230c      	movs	r3, #12
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	4619      	mov	r1, r3
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <MX_GPIO_Init+0x238>)
 8002414:	f002 f9ba 	bl	800478c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002418:	bf00      	nop
 800241a:	3738      	adds	r7, #56	; 0x38
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	48001400 	.word	0x48001400
 8002428:	48001000 	.word	0x48001000
 800242c:	48000c00 	.word	0x48000c00
 8002430:	48000800 	.word	0x48000800

08002434 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800243c:	1d39      	adds	r1, r7, #4
 800243e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002442:	2201      	movs	r2, #1
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <__io_putchar+0x20>)
 8002446:	f006 ff61 	bl	800930c <HAL_UART_Transmit>
  return ch;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000378 	.word	0x20000378

08002458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002460:	e7fe      	b.n	8002460 <Error_Handler+0x8>
	...

08002464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_MspInit+0x44>)
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <HAL_MspInit+0x44>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6613      	str	r3, [r2, #96]	; 0x60
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_MspInit+0x44>)
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_MspInit+0x44>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_MspInit+0x44>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_MspInit+0x44>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <HAL_ADC_MspInit+0xd4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d154      	bne.n	8002578 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 80024d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4a20      	ldr	r2, [pc, #128]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_ADC_MspInit+0xd8>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800252e:	233f      	movs	r3, #63	; 0x3f
 8002530:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002532:	230b      	movs	r3, #11
 8002534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	4811      	ldr	r0, [pc, #68]	; (8002588 <HAL_ADC_MspInit+0xdc>)
 8002542:	f002 f923 	bl	800478c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002546:	230a      	movs	r3, #10
 8002548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800254a:	230b      	movs	r3, #11
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255c:	f002 f916 	bl	800478c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002560:	2302      	movs	r3, #2
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002564:	230b      	movs	r3, #11
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <HAL_ADC_MspInit+0xe0>)
 8002574:	f002 f90a 	bl	800478c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002578:	bf00      	nop
 800257a:	3730      	adds	r7, #48	; 0x30
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	50040000 	.word	0x50040000
 8002584:	40021000 	.word	0x40021000
 8002588:	48000800 	.word	0x48000800
 800258c:	48000400 	.word	0x48000400

08002590 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a17      	ldr	r2, [pc, #92]	; (800260c <HAL_CAN_MspInit+0x7c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d127      	bne.n	8002602 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_CAN_MspInit+0x80>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <HAL_CAN_MspInit+0x80>)
 80025b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_CAN_MspInit+0x80>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_CAN_MspInit+0x80>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_CAN_MspInit+0x80>)
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_CAN_MspInit+0x80>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025e2:	2303      	movs	r3, #3
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80025f2:	2309      	movs	r3, #9
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	; (8002614 <HAL_CAN_MspInit+0x84>)
 80025fe:	f002 f8c5 	bl	800478c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40006400 	.word	0x40006400
 8002610:	40021000 	.word	0x40021000
 8002614:	48000c00 	.word	0x48000c00

08002618 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_COMP_MspInit+0x98>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d118      	bne.n	800266c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_COMP_MspInit+0x9c>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_COMP_MspInit+0x9c>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_COMP_MspInit+0x9c>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002652:	2304      	movs	r3, #4
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002656:	2303      	movs	r3, #3
 8002658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4814      	ldr	r0, [pc, #80]	; (80026b8 <HAL_COMP_MspInit+0xa0>)
 8002666:	f002 f891 	bl	800478c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800266a:	e01c      	b.n	80026a6 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_COMP_MspInit+0xa4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d117      	bne.n	80026a6 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_COMP_MspInit+0x9c>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_COMP_MspInit+0x9c>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_COMP_MspInit+0x9c>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800268e:	23c0      	movs	r3, #192	; 0xc0
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002692:	2303      	movs	r3, #3
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_COMP_MspInit+0xa0>)
 80026a2:	f002 f873 	bl	800478c <HAL_GPIO_Init>
}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40010200 	.word	0x40010200
 80026b4:	40021000 	.word	0x40021000
 80026b8:	48000400 	.word	0x48000400
 80026bc:	40010204 	.word	0x40010204

080026c0 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0b0      	sub	sp, #192	; 0xc0
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026d8:	f107 0318 	add.w	r3, r7, #24
 80026dc:	2294      	movs	r2, #148	; 0x94
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f008 fa26 	bl	800ab32 <memset>
  if(hsmbus->Instance==I2C1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_SMBUS_MspInit+0x134>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d13c      	bne.n	800276a <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026f0:	2340      	movs	r3, #64	; 0x40
 80026f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f8:	f107 0318 	add.w	r3, r7, #24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 f9ab 	bl	8005a58 <HAL_RCCEx_PeriphCLKConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8002708:	f7ff fea6 	bl	8002458 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a39      	ldr	r2, [pc, #228]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272c:	2312      	movs	r3, #18
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002732:	2301      	movs	r3, #1
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800273e:	2304      	movs	r3, #4
 8002740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002748:	4619      	mov	r1, r3
 800274a:	482c      	ldr	r0, [pc, #176]	; (80027fc <HAL_SMBUS_MspInit+0x13c>)
 800274c:	f002 f81e 	bl	800478c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 8002756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800275a:	6593      	str	r3, [r2, #88]	; 0x58
 800275c:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002768:	e03f      	b.n	80027ea <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a24      	ldr	r2, [pc, #144]	; (8002800 <HAL_SMBUS_MspInit+0x140>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d13a      	bne.n	80027ea <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002778:	2300      	movs	r3, #0
 800277a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277c:	f107 0318 	add.w	r3, r7, #24
 8002780:	4618      	mov	r0, r3
 8002782:	f003 f969 	bl	8005a58 <HAL_RCCEx_PeriphCLKConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 800278c:	f7ff fe64 	bl	8002458 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 8002796:	f043 0320 	orr.w	r3, r3, #32
 800279a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 800279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80027a8:	2307      	movs	r3, #7
 80027aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ae:	2312      	movs	r3, #18
 80027b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027c0:	2304      	movs	r3, #4
 80027c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027ca:	4619      	mov	r1, r3
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <HAL_SMBUS_MspInit+0x144>)
 80027ce:	f001 ffdd 	bl	800478c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 80027d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_SMBUS_MspInit+0x138>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
}
 80027ea:	bf00      	nop
 80027ec:	37c0      	adds	r7, #192	; 0xc0
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40005400 	.word	0x40005400
 80027f8:	40021000 	.word	0x40021000
 80027fc:	48000400 	.word	0x48000400
 8002800:	40005800 	.word	0x40005800
 8002804:	48001400 	.word	0x48001400

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0b2      	sub	sp, #200	; 0xc8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002820:	f107 0320 	add.w	r3, r7, #32
 8002824:	2294      	movs	r2, #148	; 0x94
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f008 f982 	bl	800ab32 <memset>
  if(huart->Instance==LPUART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a64      	ldr	r2, [pc, #400]	; (80029c4 <HAL_UART_MspInit+0x1bc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d13e      	bne.n	80028b6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002838:	2320      	movs	r3, #32
 800283a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800283c:	2300      	movs	r3, #0
 800283e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002840:	f107 0320 	add.w	r3, r7, #32
 8002844:	4618      	mov	r0, r3
 8002846:	f003 f907 	bl	8005a58 <HAL_RCCEx_PeriphCLKConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002850:	f7ff fe02 	bl	8002458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002854:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800286c:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	4a55      	ldr	r2, [pc, #340]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 800287a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002884:	f002 fa00 	bl	8004c88 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002888:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800288c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80028a2:	2308      	movs	r3, #8
 80028a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4847      	ldr	r0, [pc, #284]	; (80029cc <HAL_UART_MspInit+0x1c4>)
 80028b0:	f001 ff6c 	bl	800478c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028b4:	e081      	b.n	80029ba <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a45      	ldr	r2, [pc, #276]	; (80029d0 <HAL_UART_MspInit+0x1c8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d13b      	bne.n	8002938 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c8:	f107 0320 	add.w	r3, r7, #32
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 f8c3 	bl	8005a58 <HAL_RCCEx_PeriphCLKConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80028d8:	f7ff fdbe 	bl	8002458 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a39      	ldr	r2, [pc, #228]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f4:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	4a33      	ldr	r2, [pc, #204]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800290c:	2378      	movs	r3, #120	; 0x78
 800290e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002924:	2307      	movs	r3, #7
 8002926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800292a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800292e:	4619      	mov	r1, r3
 8002930:	4828      	ldr	r0, [pc, #160]	; (80029d4 <HAL_UART_MspInit+0x1cc>)
 8002932:	f001 ff2b 	bl	800478c <HAL_GPIO_Init>
}
 8002936:	e040      	b.n	80029ba <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <HAL_UART_MspInit+0x1d0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d13b      	bne.n	80029ba <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002942:	2304      	movs	r3, #4
 8002944:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002946:	2300      	movs	r3, #0
 8002948:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800294a:	f107 0320 	add.w	r3, r7, #32
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f882 	bl	8005a58 <HAL_RCCEx_PeriphCLKConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_MspInit+0x156>
      Error_Handler();
 800295a:	f7ff fd7d 	bl	8002458 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	6593      	str	r3, [r2, #88]	; 0x58
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_UART_MspInit+0x1c0>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800298e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029a8:	2307      	movs	r3, #7
 80029aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029b2:	4619      	mov	r1, r3
 80029b4:	4807      	ldr	r0, [pc, #28]	; (80029d4 <HAL_UART_MspInit+0x1cc>)
 80029b6:	f001 fee9 	bl	800478c <HAL_GPIO_Init>
}
 80029ba:	bf00      	nop
 80029bc:	37c8      	adds	r7, #200	; 0xc8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40008000 	.word	0x40008000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	48001800 	.word	0x48001800
 80029d0:	40004400 	.word	0x40004400
 80029d4:	48000c00 	.word	0x48000c00
 80029d8:	40004800 	.word	0x40004800

080029dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_SPI_MspInit+0x7c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d128      	bne.n	8002a50 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_SPI_MspInit+0x80>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_SPI_MspInit+0x80>)
 8002a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a08:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_SPI_MspInit+0x80>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_SPI_MspInit+0x80>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_SPI_MspInit+0x80>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_SPI_MspInit+0x80>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a40:	2306      	movs	r3, #6
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <HAL_SPI_MspInit+0x84>)
 8002a4c:	f001 fe9e 	bl	800478c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40003c00 	.word	0x40003c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	48000800 	.word	0x48000800

08002a64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a49      	ldr	r2, [pc, #292]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x144>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d129      	bne.n	8002ada <HAL_TIM_PWM_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	4a48      	ldr	r2, [pc, #288]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002a8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a90:	6613      	str	r3, [r2, #96]	; 0x60
 8002a92:	4b46      	ldr	r3, [pc, #280]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9a:	623b      	str	r3, [r7, #32]
 8002a9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a9e:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a42      	ldr	r2, [pc, #264]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b40      	ldr	r3, [pc, #256]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002ab6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4837      	ldr	r0, [pc, #220]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x14c>)
 8002ad4:	f001 fe5a 	bl	800478c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002ad8:	e062      	b.n	8002ba0 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d10c      	bne.n	8002afe <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	4a30      	ldr	r2, [pc, #192]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6593      	str	r3, [r2, #88]	; 0x58
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]
}
 8002afc:	e050      	b.n	8002ba0 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x150>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d10c      	bne.n	8002b22 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	6593      	str	r3, [r2, #88]	; 0x58
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
}
 8002b20:	e03e      	b.n	8002ba0 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM4)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a24      	ldr	r2, [pc, #144]	; (8002bb8 <HAL_TIM_PWM_MspInit+0x154>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d128      	bne.n	8002b7e <HAL_TIM_PWM_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6593      	str	r3, [r2, #88]	; 0x58
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b4a:	f043 0310 	orr.w	r3, r3, #16
 8002b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	480e      	ldr	r0, [pc, #56]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x14c>)
 8002b78:	f001 fe08 	bl	800478c <HAL_GPIO_Init>
}
 8002b7c:	e010      	b.n	8002ba0 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM15)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <HAL_TIM_PWM_MspInit+0x158>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10b      	bne.n	8002ba0 <HAL_TIM_PWM_MspInit+0x13c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6613      	str	r3, [r2, #96]	; 0x60
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_TIM_PWM_MspInit+0x148>)
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	3738      	adds	r7, #56	; 0x38
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	48001000 	.word	0x48001000
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	40014000 	.word	0x40014000

08002bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a73      	ldr	r2, [pc, #460]	; (8002dac <HAL_TIM_MspPostInit+0x1ec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d11d      	bne.n	8002c1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	4a72      	ldr	r2, [pc, #456]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002be8:	f043 0310 	orr.w	r3, r3, #16
 8002bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bee:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002bfa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c14:	4619      	mov	r1, r3
 8002c16:	4867      	ldr	r0, [pc, #412]	; (8002db4 <HAL_TIM_MspPostInit+0x1f4>)
 8002c18:	f001 fdb8 	bl	800478c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002c1c:	e0c2      	b.n	8002da4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d13a      	bne.n	8002c9e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	4a60      	ldr	r2, [pc, #384]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c34:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c40:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	4a5a      	ldr	r2, [pc, #360]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4c:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c76:	f001 fd89 	bl	800478c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c94:	4619      	mov	r1, r3
 8002c96:	4848      	ldr	r0, [pc, #288]	; (8002db8 <HAL_TIM_MspPostInit+0x1f8>)
 8002c98:	f001 fd78 	bl	800478c <HAL_GPIO_Init>
}
 8002c9c:	e082      	b.n	8002da4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <HAL_TIM_MspPostInit+0x1fc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d138      	bne.n	8002d1a <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ccc:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4831      	ldr	r0, [pc, #196]	; (8002db8 <HAL_TIM_MspPostInit+0x1f8>)
 8002cf4:	f001 fd4a 	bl	800478c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	4619      	mov	r1, r3
 8002d12:	482b      	ldr	r0, [pc, #172]	; (8002dc0 <HAL_TIM_MspPostInit+0x200>)
 8002d14:	f001 fd3a 	bl	800478c <HAL_GPIO_Init>
}
 8002d18:	e044      	b.n	8002da4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_TIM_MspPostInit+0x204>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d11d      	bne.n	8002d60 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d24:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d28:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d56:	4619      	mov	r1, r3
 8002d58:	481b      	ldr	r0, [pc, #108]	; (8002dc8 <HAL_TIM_MspPostInit+0x208>)
 8002d5a:	f001 fd17 	bl	800478c <HAL_GPIO_Init>
}
 8002d5e:	e021      	b.n	8002da4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_TIM_MspPostInit+0x20c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d11c      	bne.n	8002da4 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_TIM_MspPostInit+0x1f0>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002d94:	230e      	movs	r3, #14
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4806      	ldr	r0, [pc, #24]	; (8002db8 <HAL_TIM_MspPostInit+0x1f8>)
 8002da0:	f001 fcf4 	bl	800478c <HAL_GPIO_Init>
}
 8002da4:	bf00      	nop
 8002da6:	3738      	adds	r7, #56	; 0x38
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40021000 	.word	0x40021000
 8002db4:	48001000 	.word	0x48001000
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	48000800 	.word	0x48000800
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	48000c00 	.word	0x48000c00
 8002dcc:	40014000 	.word	0x40014000

08002dd0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a50      	ldr	r2, [pc, #320]	; (8002f20 <HAL_SAI_MspInit+0x150>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d124      	bne.n	8002e2c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002de2:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_SAI_MspInit+0x154>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002dea:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dee:	4a4e      	ldr	r2, [pc, #312]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002df4:	6613      	str	r3, [r2, #96]	; 0x60
 8002df6:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002e02:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_SAI_MspInit+0x154>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a46      	ldr	r2, [pc, #280]	; (8002f24 <HAL_SAI_MspInit+0x154>)
 8002e0a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e0c:	2374      	movs	r3, #116	; 0x74
 8002e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002e1c:	230d      	movs	r3, #13
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	4841      	ldr	r0, [pc, #260]	; (8002f2c <HAL_SAI_MspInit+0x15c>)
 8002e28:	f001 fcb0 	bl	800478c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3f      	ldr	r2, [pc, #252]	; (8002f30 <HAL_SAI_MspInit+0x160>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d135      	bne.n	8002ea2 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_SAI_MspInit+0x154>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e3e:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	4a39      	ldr	r2, [pc, #228]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e48:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <HAL_SAI_MspInit+0x154>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <HAL_SAI_MspInit+0x154>)
 8002e5e:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e60:	2308      	movs	r3, #8
 8002e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002e70:	230d      	movs	r3, #13
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4619      	mov	r1, r3
 8002e7a:	482c      	ldr	r0, [pc, #176]	; (8002f2c <HAL_SAI_MspInit+0x15c>)
 8002e7c:	f001 fc86 	bl	800478c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e80:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002e92:	230d      	movs	r3, #13
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4825      	ldr	r0, [pc, #148]	; (8002f34 <HAL_SAI_MspInit+0x164>)
 8002e9e:	f001 fc75 	bl	800478c <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_SAI_MspInit+0x168>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d135      	bne.n	8002f18 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_SAI_MspInit+0x16c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ebe:	6613      	str	r3, [r2, #96]	; 0x60
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_SAI_MspInit+0x158>)
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_SAI_MspInit+0x16c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_SAI_MspInit+0x16c>)
 8002ed4:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002ed6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002ee8:	230d      	movs	r3, #13
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4813      	ldr	r0, [pc, #76]	; (8002f40 <HAL_SAI_MspInit+0x170>)
 8002ef4:	f001 fc4a 	bl	800478c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ef8:	2340      	movs	r3, #64	; 0x40
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002f08:	230d      	movs	r3, #13
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	480c      	ldr	r0, [pc, #48]	; (8002f44 <HAL_SAI_MspInit+0x174>)
 8002f14:	f001 fc3a 	bl	800478c <HAL_GPIO_Init>

    }
}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40015404 	.word	0x40015404
 8002f24:	200008d0 	.word	0x200008d0
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	48001000 	.word	0x48001000
 8002f30:	40015424 	.word	0x40015424
 8002f34:	48001400 	.word	0x48001400
 8002f38:	40015804 	.word	0x40015804
 8002f3c:	200008d4 	.word	0x200008d4
 8002f40:	48000400 	.word	0x48000400
 8002f44:	48000800 	.word	0x48000800

08002f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f4c:	e7fe      	b.n	8002f4c <NMI_Handler+0x4>

08002f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f52:	e7fe      	b.n	8002f52 <HardFault_Handler+0x4>

08002f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <MemManage_Handler+0x4>

08002f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <BusFault_Handler+0x4>

08002f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <UsageFault_Handler+0x4>

08002f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f94:	f000 f958 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return 1;
 8002fa0:	2301      	movs	r3, #1
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <_kill>:

int _kill(int pid, int sig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fb6:	f007 fe0f 	bl	800abd8 <__errno>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2216      	movs	r2, #22
 8002fbe:	601a      	str	r2, [r3, #0]
  return -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_exit>:

void _exit (int status)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ffe7 	bl	8002fac <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fde:	e7fe      	b.n	8002fde <_exit+0x12>

08002fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e00a      	b.n	8003008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ff2:	f3af 8000 	nop.w
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	60ba      	str	r2, [r7, #8]
 8002ffe:	b2ca      	uxtb	r2, r1
 8003000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3301      	adds	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	dbf0      	blt.n	8002ff2 <_read+0x12>
  }

  return len;
 8003010:	687b      	ldr	r3, [r7, #4]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e009      	b.n	8003040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	60ba      	str	r2, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f9fd 	bl	8002434 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3301      	adds	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	dbf1      	blt.n	800302c <_write+0x12>
  }
  return len;
 8003048:	687b      	ldr	r3, [r7, #4]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <_close>:

int _close(int file)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800307a:	605a      	str	r2, [r3, #4]
  return 0;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <_isatty>:

int _isatty(int file)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003092:	2301      	movs	r3, #1
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <_sbrk+0x5c>)
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <_sbrk+0x60>)
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <_sbrk+0x64>)
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <_sbrk+0x68>)
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d207      	bcs.n	80030fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030ec:	f007 fd74 	bl	800abd8 <__errno>
 80030f0:	4603      	mov	r3, r0
 80030f2:	220c      	movs	r2, #12
 80030f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e009      	b.n	8003110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <_sbrk+0x64>)
 800310c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	200a0000 	.word	0x200a0000
 800311c:	00000400 	.word	0x00000400
 8003120:	200008d8 	.word	0x200008d8
 8003124:	20000a30 	.word	0x20000a30

08003128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <SystemInit+0x20>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	4a05      	ldr	r2, [pc, #20]	; (8003148 <SystemInit+0x20>)
 8003134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800314c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003184 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003150:	f7ff ffea 	bl	8003128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003154:	480c      	ldr	r0, [pc, #48]	; (8003188 <LoopForever+0x6>)
  ldr r1, =_edata
 8003156:	490d      	ldr	r1, [pc, #52]	; (800318c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <LoopForever+0xe>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800316c:	4c0a      	ldr	r4, [pc, #40]	; (8003198 <LoopForever+0x16>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800317a:	f007 fd33 	bl	800abe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800317e:	f7fd ffdf 	bl	8001140 <main>

08003182 <LoopForever>:

LoopForever:
    b LoopForever
 8003182:	e7fe      	b.n	8003182 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003184:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003190:	0800ce3c 	.word	0x0800ce3c
  ldr r2, =_sbss
 8003194:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003198:	20000a2c 	.word	0x20000a2c

0800319c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC1_IRQHandler>

0800319e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a8:	2003      	movs	r0, #3
 80031aa:	f001 fabb 	bl	8004724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ae:	2000      	movs	r0, #0
 80031b0:	f000 f80e 	bl	80031d0 <HAL_InitTick>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	71fb      	strb	r3, [r7, #7]
 80031be:	e001      	b.n	80031c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031c0:	f7ff f950 	bl	8002464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031c4:	79fb      	ldrb	r3, [r7, #7]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <HAL_InitTick+0x6c>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d023      	beq.n	800322c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031e4:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_InitTick+0x70>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_InitTick+0x6c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 fab9 	bl	8004772 <HAL_SYSTICK_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d809      	bhi.n	8003220 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800320c:	2200      	movs	r2, #0
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	f001 fa91 	bl	800473a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_InitTick+0x74>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e007      	b.n	8003230 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	e004      	b.n	8003230 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e001      	b.n	8003230 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000008 	.word	0x20000008
 8003240:	20000000 	.word	0x20000000
 8003244:	20000004 	.word	0x20000004

08003248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x20>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x24>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_IncTick+0x24>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000008 	.word	0x20000008
 800326c:	200008dc 	.word	0x200008dc

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	200008dc 	.word	0x200008dc

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff ffee 	bl	8003270 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d005      	beq.n	80032ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_Delay+0x44>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ae:	bf00      	nop
 80032b0:	f7ff ffde 	bl	8003270 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d8f7      	bhi.n	80032b0 <HAL_Delay+0x28>
  {
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000008 	.word	0x20000008

080032d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	609a      	str	r2, [r3, #8]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	609a      	str	r2, [r3, #8]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3360      	adds	r3, #96	; 0x60
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <LL_ADC_SetOffset+0x44>)
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	03fff000 	.word	0x03fff000

08003380 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3360      	adds	r3, #96	; 0x60
 800338e:	461a      	mov	r2, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3360      	adds	r3, #96	; 0x60
 80033bc:	461a      	mov	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	615a      	str	r2, [r3, #20]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3330      	adds	r3, #48	; 0x30
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	4413      	add	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	211f      	movs	r1, #31
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	f003 011f 	and.w	r1, r3, #31
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	431a      	orrs	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3314      	adds	r3, #20
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	0e5b      	lsrs	r3, r3, #25
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	4413      	add	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0d1b      	lsrs	r3, r3, #20
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2107      	movs	r1, #7
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	401a      	ands	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0d1b      	lsrs	r3, r3, #20
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	431a      	orrs	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0318 	and.w	r3, r3, #24
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80034dc:	40d9      	lsrs	r1, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	400b      	ands	r3, r1
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	0007ffff 	.word	0x0007ffff

08003500 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6093      	str	r3, [r2, #8]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003538:	d101      	bne.n	800353e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800355c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003560:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003588:	d101      	bne.n	800358e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <LL_ADC_IsEnabled+0x18>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <LL_ADC_IsEnabled+0x1a>
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d101      	bne.n	80035da <LL_ADC_REG_IsConversionOngoing+0x18>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d101      	bne.n	8003600 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e129      	b.n	800387e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fe ff37 	bl	80024ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff67 	bl	8003524 <LL_ADC_IsDeepPowerDownEnabled>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff4d 	bl	8003500 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff82 	bl	8003574 <LL_ADC_IsInternalRegulatorEnabled>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d115      	bne.n	80036a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff66 	bl	800354c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003680:	4b81      	ldr	r3, [pc, #516]	; (8003888 <HAL_ADC_Init+0x278>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	4a81      	ldr	r2, [pc, #516]	; (800388c <HAL_ADC_Init+0x27c>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	3301      	adds	r3, #1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003694:	e002      	b.n	800369c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3b01      	subs	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f9      	bne.n	8003696 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ff64 	bl	8003574 <LL_ADC_IsInternalRegulatorEnabled>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10d      	bne.n	80036ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	f043 0210 	orr.w	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ff75 	bl	80035c2 <LL_ADC_REG_IsConversionOngoing>
 80036d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 80c2 	bne.w	800386c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 80be 	bne.w	800386c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036f8:	f043 0202 	orr.w	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff49 	bl	800359c <LL_ADC_IsEnabled>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003710:	485f      	ldr	r0, [pc, #380]	; (8003890 <HAL_ADC_Init+0x280>)
 8003712:	f7ff ff43 	bl	800359c <LL_ADC_IsEnabled>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4619      	mov	r1, r3
 8003722:	485c      	ldr	r0, [pc, #368]	; (8003894 <HAL_ADC_Init+0x284>)
 8003724:	f7ff fdd4 	bl	80032d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7e5b      	ldrb	r3, [r3, #25]
 800372c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003732:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003738:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800373e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003746:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d106      	bne.n	8003764 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	3b01      	subs	r3, #1
 800375c:	045b      	lsls	r3, r3, #17
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	4b44      	ldr	r3, [pc, #272]	; (8003898 <HAL_ADC_Init+0x288>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	430b      	orrs	r3, r1
 8003792:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff25 	bl	80035e8 <LL_ADC_INJ_IsConversionOngoing>
 800379e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d140      	bne.n	8003828 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d13d      	bne.n	8003828 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7e1b      	ldrb	r3, [r3, #24]
 80037b4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037b6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ce:	f023 0306 	bic.w	r3, r3, #6
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	69b9      	ldr	r1, [r7, #24]
 80037d8:	430b      	orrs	r3, r1
 80037da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d118      	bne.n	8003818 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003802:	4311      	orrs	r1, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003808:	430a      	orrs	r2, r1
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	e007      	b.n	8003828 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d10c      	bne.n	800384a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f023 010f 	bic.w	r1, r3, #15
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	1e5a      	subs	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
 8003848:	e007      	b.n	800385a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 020f 	bic.w	r2, r2, #15
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	659a      	str	r2, [r3, #88]	; 0x58
 800386a:	e007      	b.n	800387c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	f043 0210 	orr.w	r2, r3, #16
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800387c:	7ffb      	ldrb	r3, [r7, #31]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000
 800388c:	053e2d63 	.word	0x053e2d63
 8003890:	50040000 	.word	0x50040000
 8003894:	50040300 	.word	0x50040300
 8003898:	fff0c007 	.word	0xfff0c007

0800389c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b0b6      	sub	sp, #216	; 0xd8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x22>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e3d5      	b.n	800406a <HAL_ADC_ConfigChannel+0x7ce>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fe79 	bl	80035c2 <LL_ADC_REG_IsConversionOngoing>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 83ba 	bne.w	800404c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d824      	bhi.n	8003932 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	3b02      	subs	r3, #2
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d81b      	bhi.n	800392a <HAL_ADC_ConfigChannel+0x8e>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <HAL_ADC_ConfigChannel+0x5c>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	08003909 	.word	0x08003909
 80038fc:	08003911 	.word	0x08003911
 8003900:	08003919 	.word	0x08003919
 8003904:	08003921 	.word	0x08003921
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003908:	230c      	movs	r3, #12
 800390a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800390e:	e010      	b.n	8003932 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003910:	2312      	movs	r3, #18
 8003912:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003916:	e00c      	b.n	8003932 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003918:	2318      	movs	r3, #24
 800391a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800391e:	e008      	b.n	8003932 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003928:	e003      	b.n	8003932 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800392a:	2306      	movs	r3, #6
 800392c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003930:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003940:	f7ff fd62 	bl	8003408 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fe3a 	bl	80035c2 <LL_ADC_REG_IsConversionOngoing>
 800394e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fe46 	bl	80035e8 <LL_ADC_INJ_IsConversionOngoing>
 800395c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 81bf 	bne.w	8003ce8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800396a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 81ba 	bne.w	8003ce8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800397c:	d10f      	bne.n	800399e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	4619      	mov	r1, r3
 800398a:	f7ff fd69 	bl	8003460 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fd23 	bl	80033e2 <LL_ADC_SetSamplingTimeCommonConfig>
 800399c:	e00e      	b.n	80039bc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7ff fd58 	bl	8003460 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fd13 	bl	80033e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	08db      	lsrs	r3, r3, #3
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d00a      	beq.n	80039f4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6919      	ldr	r1, [r3, #16]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ee:	f7ff fca3 	bl	8003338 <LL_ADC_SetOffset>
 80039f2:	e179      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fcc0 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x184>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fcb5 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003a16:	4603      	mov	r3, r0
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	f003 021f 	and.w	r2, r3, #31
 8003a1e:	e01e      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x1c2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fcaa 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003a4e:	2320      	movs	r3, #32
 8003a50:	e004      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003a52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x1da>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0e9b      	lsrs	r3, r3, #26
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	e018      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x20c>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	e004      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d106      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fc79 	bl	80033ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2101      	movs	r1, #1
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fc5d 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x24a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fc52 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	0e9b      	lsrs	r3, r3, #26
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	e01e      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x288>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fc47 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003b14:	2320      	movs	r3, #32
 8003b16:	e004      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x2a0>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	e018      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x2d2>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e004      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d106      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fc16 	bl	80033ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fbfa 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x310>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fbef 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	f003 021f 	and.w	r2, r3, #31
 8003baa:	e01e      	b.n	8003bea <HAL_ADC_ConfigChannel+0x34e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fbe4 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003bda:	2320      	movs	r3, #32
 8003bdc:	e004      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x366>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0e9b      	lsrs	r3, r3, #26
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	e014      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x390>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e004      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d106      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2200      	movs	r2, #0
 8003c36:	2102      	movs	r1, #2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fbb7 	bl	80033ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2103      	movs	r1, #3
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fb9b 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x3ce>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2103      	movs	r1, #3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fb90 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003c60:	4603      	mov	r3, r0
 8003c62:	0e9b      	lsrs	r3, r3, #26
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	e017      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x3fe>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2103      	movs	r1, #3
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fb85 	bl	8003380 <LL_ADC_GetOffsetChannel>
 8003c76:	4603      	mov	r3, r0
 8003c78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x416>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	e011      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x43a>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e003      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d106      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2103      	movs	r1, #3
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fb62 	bl	80033ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fc55 	bl	800359c <LL_ADC_IsEnabled>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f040 813f 	bne.w	8003f78 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f7ff fbd6 	bl	80034b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a8e      	ldr	r2, [pc, #568]	; (8003f4c <HAL_ADC_ConfigChannel+0x6b0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	f040 8130 	bne.w	8003f78 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x4a4>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0e9b      	lsrs	r3, r3, #26
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2b09      	cmp	r3, #9
 8003d36:	bf94      	ite	ls
 8003d38:	2301      	movls	r3, #1
 8003d3a:	2300      	movhi	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e019      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x4d8>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	e003      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2b09      	cmp	r3, #9
 8003d6c:	bf94      	ite	ls
 8003d6e:	2301      	movls	r3, #1
 8003d70:	2300      	movhi	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d079      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x4f8>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0e9b      	lsrs	r3, r3, #26
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d92:	e015      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x524>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e003      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	069b      	lsls	r3, r3, #26
 8003dbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x544>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	0e9b      	lsrs	r3, r3, #26
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	e017      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x574>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e003      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x59a>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	3301      	adds	r3, #1
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	051b      	lsls	r3, r3, #20
 8003e34:	e018      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x5cc>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003e4e:	2320      	movs	r3, #32
 8003e50:	e003      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	e080      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x5ec>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0e9b      	lsrs	r3, r3, #26
 8003e7e:	3301      	adds	r3, #1
 8003e80:	069b      	lsls	r3, r3, #26
 8003e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e86:	e015      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x618>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e003      	b.n	8003eac <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	069b      	lsls	r3, r3, #26
 8003eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x638>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	e017      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x668>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	61bb      	str	r3, [r7, #24]
  return result;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003eec:	2320      	movs	r3, #32
 8003eee:	e003      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x694>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	3b1e      	subs	r3, #30
 8003f28:	051b      	lsls	r3, r3, #20
 8003f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	e01d      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x6d0>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
  return result;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003f48:	2320      	movs	r3, #32
 8003f4a:	e005      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x6bc>
 8003f4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f003 021f 	and.w	r2, r3, #31
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	3b1e      	subs	r3, #30
 8003f66:	051b      	lsls	r3, r3, #20
 8003f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f72:	4619      	mov	r1, r3
 8003f74:	f7ff fa74 	bl	8003460 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b3d      	ldr	r3, [pc, #244]	; (8004074 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d06c      	beq.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f84:	483c      	ldr	r0, [pc, #240]	; (8004078 <HAL_ADC_ConfigChannel+0x7dc>)
 8003f86:	f7ff f9c9 	bl	800331c <LL_ADC_GetCommonPathInternalCh>
 8003f8a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3a      	ldr	r2, [pc, #232]	; (800407c <HAL_ADC_ConfigChannel+0x7e0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d127      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a35      	ldr	r2, [pc, #212]	; (8004080 <HAL_ADC_ConfigChannel+0x7e4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d157      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	482f      	ldr	r0, [pc, #188]	; (8004078 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fba:	f7ff f99c 	bl	80032f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fbe:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_ADC_ConfigChannel+0x7e8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	4a30      	ldr	r2, [pc, #192]	; (8004088 <HAL_ADC_ConfigChannel+0x7ec>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003fd8:	e002      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f9      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fe6:	e03a      	b.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a27      	ldr	r2, [pc, #156]	; (800408c <HAL_ADC_ConfigChannel+0x7f0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d113      	bne.n	800401a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_ADC_ConfigChannel+0x7e4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d12a      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800400c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004010:	4619      	mov	r1, r3
 8004012:	4819      	ldr	r0, [pc, #100]	; (8004078 <HAL_ADC_ConfigChannel+0x7dc>)
 8004014:	f7ff f96f 	bl	80032f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004018:	e021      	b.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_ADC_ConfigChannel+0x7f4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d11c      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d116      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a12      	ldr	r2, [pc, #72]	; (8004080 <HAL_ADC_ConfigChannel+0x7e4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800403a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800403e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004042:	4619      	mov	r1, r3
 8004044:	480c      	ldr	r0, [pc, #48]	; (8004078 <HAL_ADC_ConfigChannel+0x7dc>)
 8004046:	f7ff f956 	bl	80032f6 <LL_ADC_SetCommonPathInternalCh>
 800404a:	e008      	b.n	800405e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004066:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800406a:	4618      	mov	r0, r3
 800406c:	37d8      	adds	r7, #216	; 0xd8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	80080000 	.word	0x80080000
 8004078:	50040300 	.word	0x50040300
 800407c:	c7520000 	.word	0xc7520000
 8004080:	50040000 	.word	0x50040000
 8004084:	20000000 	.word	0x20000000
 8004088:	053e2d63 	.word	0x053e2d63
 800408c:	cb840000 	.word	0xcb840000
 8004090:	80000001 	.word	0x80000001

08004094 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0ed      	b.n	8004282 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fe fa6c 	bl	8002590 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c8:	f7ff f8d2 	bl	8003270 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040ce:	e012      	b.n	80040f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040d0:	f7ff f8ce 	bl	8003270 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b0a      	cmp	r3, #10
 80040dc:	d90b      	bls.n	80040f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2205      	movs	r2, #5
 80040ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0c5      	b.n	8004282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0e5      	beq.n	80040d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0202 	bic.w	r2, r2, #2
 8004112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004114:	f7ff f8ac 	bl	8003270 <HAL_GetTick>
 8004118:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800411a:	e012      	b.n	8004142 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800411c:	f7ff f8a8 	bl	8003270 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b0a      	cmp	r3, #10
 8004128:	d90b      	bls.n	8004142 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2205      	movs	r2, #5
 800413a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e09f      	b.n	8004282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e5      	bne.n	800411c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7e1b      	ldrb	r3, [r3, #24]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d108      	bne.n	800416a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e007      	b.n	800417a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7e5b      	ldrb	r3, [r3, #25]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e007      	b.n	80041a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	7e9b      	ldrb	r3, [r3, #26]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d108      	bne.n	80041be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0220 	orr.w	r2, r2, #32
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e007      	b.n	80041ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0220 	bic.w	r2, r2, #32
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7edb      	ldrb	r3, [r3, #27]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d108      	bne.n	80041e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0210 	bic.w	r2, r2, #16
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e007      	b.n	80041f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0210 	orr.w	r2, r2, #16
 80041f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	7f1b      	ldrb	r3, [r3, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d108      	bne.n	8004212 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	e007      	b.n	8004222 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0208 	bic.w	r2, r2, #8
 8004220:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7f5b      	ldrb	r3, [r3, #29]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d108      	bne.n	800423c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0204 	orr.w	r2, r2, #4
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e007      	b.n	800424c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0204 	bic.w	r2, r2, #4
 800424a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	ea42 0103 	orr.w	r1, r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <LL_EXTI_EnableIT_0_31+0x20>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <LL_EXTI_EnableIT_0_31+0x20>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40010400 	.word	0x40010400

080042b0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	43db      	mvns	r3, r3
 80042c0:	4904      	ldr	r1, [pc, #16]	; (80042d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010400 	.word	0x40010400

080042d8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	4904      	ldr	r1, [pc, #16]	; (80042f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]

}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40010400 	.word	0x40010400

080042fc <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	43db      	mvns	r3, r3
 800430c:	4904      	ldr	r1, [pc, #16]	; (8004320 <LL_EXTI_DisableEvent_0_31+0x24>)
 800430e:	4013      	ands	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010400 	.word	0x40010400

08004324 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	4904      	ldr	r1, [pc, #16]	; (8004344 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]

}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40010400 	.word	0x40010400

08004348 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	43db      	mvns	r3, r3
 8004358:	4904      	ldr	r1, [pc, #16]	; (800436c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800435a:	4013      	ands	r3, r2
 800435c:	608b      	str	r3, [r1, #8]

}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40010400 	.word	0x40010400

08004370 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4313      	orrs	r3, r2
 8004382:	60cb      	str	r3, [r1, #12]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010400 	.word	0x40010400

08004394 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	4904      	ldr	r1, [pc, #16]	; (80043b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	60cb      	str	r3, [r1, #12]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010400 	.word	0x40010400

080043bc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6153      	str	r3, [r2, #20]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010400 	.word	0x40010400

080043dc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e0d1      	b.n	800459c <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004406:	d102      	bne.n	800440e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e0c6      	b.n	800459c <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d115      	bne.n	8004446 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004428:	4b5f      	ldr	r3, [pc, #380]	; (80045a8 <HAL_COMP_Init+0x1cc>)
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	4a5e      	ldr	r2, [pc, #376]	; (80045a8 <HAL_COMP_Init+0x1cc>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6613      	str	r3, [r2, #96]	; 0x60
 8004434:	4b5c      	ldr	r3, [pc, #368]	; (80045a8 <HAL_COMP_Init+0x1cc>)
 8004436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fe f8e9 	bl	8002618 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004450:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b4b      	ldr	r3, [pc, #300]	; (80045ac <HAL_COMP_Init+0x1d0>)
 800447e:	4013      	ands	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	6979      	ldr	r1, [r7, #20]
 8004486:	430b      	orrs	r3, r1
 8004488:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004492:	d106      	bne.n	80044a2 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004494:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <HAL_COMP_Init+0x1d4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a45      	ldr	r2, [pc, #276]	; (80045b0 <HAL_COMP_Init+0x1d4>)
 800449a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e005      	b.n	80044ae <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80044a2:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_COMP_Init+0x1d4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <HAL_COMP_Init+0x1d4>)
 80044a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044ac:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d016      	beq.n	80044ea <HAL_COMP_Init+0x10e>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d113      	bne.n	80044ea <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c2:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_COMP_Init+0x1d8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <HAL_COMP_Init+0x1dc>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80044dc:	e002      	b.n	80044e4 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f9      	bne.n	80044de <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a33      	ldr	r2, [pc, #204]	; (80045bc <HAL_COMP_Init+0x1e0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d102      	bne.n	80044fa <HAL_COMP_Init+0x11e>
 80044f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044f8:	e001      	b.n	80044fe <HAL_COMP_Init+0x122>
 80044fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044fe:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d037      	beq.n	800457c <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004518:	6938      	ldr	r0, [r7, #16]
 800451a:	f7ff ff03 	bl	8004324 <LL_EXTI_EnableRisingTrig_0_31>
 800451e:	e002      	b.n	8004526 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004520:	6938      	ldr	r0, [r7, #16]
 8004522:	f7ff ff11 	bl	8004348 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004532:	6938      	ldr	r0, [r7, #16]
 8004534:	f7ff ff1c 	bl	8004370 <LL_EXTI_EnableFallingTrig_0_31>
 8004538:	e002      	b.n	8004540 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800453a:	6938      	ldr	r0, [r7, #16]
 800453c:	f7ff ff2a 	bl	8004394 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004540:	6938      	ldr	r0, [r7, #16]
 8004542:	f7ff ff3b 	bl	80043bc <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004552:	6938      	ldr	r0, [r7, #16]
 8004554:	f7ff fec0 	bl	80042d8 <LL_EXTI_EnableEvent_0_31>
 8004558:	e002      	b.n	8004560 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800455a:	6938      	ldr	r0, [r7, #16]
 800455c:	f7ff fece 	bl	80042fc <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800456c:	6938      	ldr	r0, [r7, #16]
 800456e:	f7ff fe8d 	bl	800428c <LL_EXTI_EnableIT_0_31>
 8004572:	e009      	b.n	8004588 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004574:	6938      	ldr	r0, [r7, #16]
 8004576:	f7ff fe9b 	bl	80042b0 <LL_EXTI_DisableIT_0_31>
 800457a:	e005      	b.n	8004588 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800457c:	6938      	ldr	r0, [r7, #16]
 800457e:	f7ff febd 	bl	80042fc <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8004582:	6938      	ldr	r0, [r7, #16]
 8004584:	f7ff fe94 	bl	80042b0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800459c:	7ffb      	ldrb	r3, [r7, #31]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	ff207d03 	.word	0xff207d03
 80045b0:	40010204 	.word	0x40010204
 80045b4:	20000000 	.word	0x20000000
 80045b8:	053e2d63 	.word	0x053e2d63
 80045bc:	40010200 	.word	0x40010200

080045c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f2:	4a04      	ldr	r2, [pc, #16]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	60d3      	str	r3, [r2, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <__NVIC_GetPriorityGrouping+0x18>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f003 0307 	and.w	r3, r3, #7
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004634:	2b00      	cmp	r3, #0
 8004636:	db0a      	blt.n	800464e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	490c      	ldr	r1, [pc, #48]	; (8004670 <__NVIC_SetPriority+0x4c>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	0112      	lsls	r2, r2, #4
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	440b      	add	r3, r1
 8004648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800464c:	e00a      	b.n	8004664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4908      	ldr	r1, [pc, #32]	; (8004674 <__NVIC_SetPriority+0x50>)
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	3b04      	subs	r3, #4
 800465c:	0112      	lsls	r2, r2, #4
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	440b      	add	r3, r1
 8004662:	761a      	strb	r2, [r3, #24]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000e100 	.word	0xe000e100
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004678:	b480      	push	{r7}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f1c3 0307 	rsb	r3, r3, #7
 8004692:	2b04      	cmp	r3, #4
 8004694:	bf28      	it	cs
 8004696:	2304      	movcs	r3, #4
 8004698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3304      	adds	r3, #4
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d902      	bls.n	80046a8 <NVIC_EncodePriority+0x30>
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3b03      	subs	r3, #3
 80046a6:	e000      	b.n	80046aa <NVIC_EncodePriority+0x32>
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43da      	mvns	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	401a      	ands	r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c0:	f04f 31ff 	mov.w	r1, #4294967295
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ca:	43d9      	mvns	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	4313      	orrs	r3, r2
         );
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3724      	adds	r7, #36	; 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f0:	d301      	bcc.n	80046f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046f2:	2301      	movs	r3, #1
 80046f4:	e00f      	b.n	8004716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <SysTick_Config+0x40>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046fe:	210f      	movs	r1, #15
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	f7ff ff8e 	bl	8004624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <SysTick_Config+0x40>)
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800470e:	4b04      	ldr	r3, [pc, #16]	; (8004720 <SysTick_Config+0x40>)
 8004710:	2207      	movs	r2, #7
 8004712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	e000e010 	.word	0xe000e010

08004724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff47 	bl	80045c0 <__NVIC_SetPriorityGrouping>
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b086      	sub	sp, #24
 800473e:	af00      	add	r7, sp, #0
 8004740:	4603      	mov	r3, r0
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800474c:	f7ff ff5c 	bl	8004608 <__NVIC_GetPriorityGrouping>
 8004750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	6978      	ldr	r0, [r7, #20]
 8004758:	f7ff ff8e 	bl	8004678 <NVIC_EncodePriority>
 800475c:	4602      	mov	r2, r0
 800475e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004762:	4611      	mov	r1, r2
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff5d 	bl	8004624 <__NVIC_SetPriority>
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ffb0 	bl	80046e0 <SysTick_Config>
 8004780:	4603      	mov	r3, r0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479a:	e166      	b.n	8004a6a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2101      	movs	r1, #1
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	4013      	ands	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8158 	beq.w	8004a64 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d005      	beq.n	80047cc <HAL_GPIO_Init+0x40>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d130      	bne.n	800482e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004802:	2201      	movs	r2, #1
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 0201 	and.w	r2, r3, #1
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b03      	cmp	r3, #3
 8004838:	d017      	beq.n	800486a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	2203      	movs	r2, #3
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d123      	bne.n	80048be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	08da      	lsrs	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3208      	adds	r2, #8
 800487e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	6939      	ldr	r1, [r7, #16]
 80048ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 0203 	and.w	r2, r3, #3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80b2 	beq.w	8004a64 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <HAL_GPIO_Init+0x2fc>)
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	4a60      	ldr	r2, [pc, #384]	; (8004a88 <HAL_GPIO_Init+0x2fc>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6613      	str	r3, [r2, #96]	; 0x60
 800490c:	4b5e      	ldr	r3, [pc, #376]	; (8004a88 <HAL_GPIO_Init+0x2fc>)
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004918:	4a5c      	ldr	r2, [pc, #368]	; (8004a8c <HAL_GPIO_Init+0x300>)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	3302      	adds	r3, #2
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	220f      	movs	r2, #15
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004942:	d02b      	beq.n	800499c <HAL_GPIO_Init+0x210>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a52      	ldr	r2, [pc, #328]	; (8004a90 <HAL_GPIO_Init+0x304>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d025      	beq.n	8004998 <HAL_GPIO_Init+0x20c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a51      	ldr	r2, [pc, #324]	; (8004a94 <HAL_GPIO_Init+0x308>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d01f      	beq.n	8004994 <HAL_GPIO_Init+0x208>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a50      	ldr	r2, [pc, #320]	; (8004a98 <HAL_GPIO_Init+0x30c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d019      	beq.n	8004990 <HAL_GPIO_Init+0x204>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a4f      	ldr	r2, [pc, #316]	; (8004a9c <HAL_GPIO_Init+0x310>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d013      	beq.n	800498c <HAL_GPIO_Init+0x200>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a4e      	ldr	r2, [pc, #312]	; (8004aa0 <HAL_GPIO_Init+0x314>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00d      	beq.n	8004988 <HAL_GPIO_Init+0x1fc>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a4d      	ldr	r2, [pc, #308]	; (8004aa4 <HAL_GPIO_Init+0x318>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d007      	beq.n	8004984 <HAL_GPIO_Init+0x1f8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a4c      	ldr	r2, [pc, #304]	; (8004aa8 <HAL_GPIO_Init+0x31c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_GPIO_Init+0x1f4>
 800497c:	2307      	movs	r3, #7
 800497e:	e00e      	b.n	800499e <HAL_GPIO_Init+0x212>
 8004980:	2308      	movs	r3, #8
 8004982:	e00c      	b.n	800499e <HAL_GPIO_Init+0x212>
 8004984:	2306      	movs	r3, #6
 8004986:	e00a      	b.n	800499e <HAL_GPIO_Init+0x212>
 8004988:	2305      	movs	r3, #5
 800498a:	e008      	b.n	800499e <HAL_GPIO_Init+0x212>
 800498c:	2304      	movs	r3, #4
 800498e:	e006      	b.n	800499e <HAL_GPIO_Init+0x212>
 8004990:	2303      	movs	r3, #3
 8004992:	e004      	b.n	800499e <HAL_GPIO_Init+0x212>
 8004994:	2302      	movs	r3, #2
 8004996:	e002      	b.n	800499e <HAL_GPIO_Init+0x212>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <HAL_GPIO_Init+0x212>
 800499c:	2300      	movs	r3, #0
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	f002 0203 	and.w	r2, r2, #3
 80049a4:	0092      	lsls	r2, r2, #2
 80049a6:	4093      	lsls	r3, r2
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049ae:	4937      	ldr	r1, [pc, #220]	; (8004a8c <HAL_GPIO_Init+0x300>)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_GPIO_Init+0x320>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049e0:	4a32      	ldr	r2, [pc, #200]	; (8004aac <HAL_GPIO_Init+0x320>)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049e6:	4b31      	ldr	r3, [pc, #196]	; (8004aac <HAL_GPIO_Init+0x320>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	43db      	mvns	r3, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a0a:	4a28      	ldr	r2, [pc, #160]	; (8004aac <HAL_GPIO_Init+0x320>)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a10:	4b26      	ldr	r3, [pc, #152]	; (8004aac <HAL_GPIO_Init+0x320>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a34:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <HAL_GPIO_Init+0x320>)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_GPIO_Init+0x320>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4013      	ands	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <HAL_GPIO_Init+0x320>)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3301      	adds	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f47f ae91 	bne.w	800479c <HAL_GPIO_Init+0x10>
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	48000400 	.word	0x48000400
 8004a94:	48000800 	.word	0x48000800
 8004a98:	48000c00 	.word	0x48000c00
 8004a9c:	48001000 	.word	0x48001000
 8004aa0:	48001400 	.word	0x48001400
 8004aa4:	48001800 	.word	0x48001800
 8004aa8:	48001c00 	.word	0x48001c00
 8004aac:	40010400 	.word	0x40010400

08004ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
 8004abc:	4613      	mov	r3, r2
 8004abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ac0:	787b      	ldrb	r3, [r7, #1]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004acc:	e002      	b.n	8004ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ace:	887a      	ldrh	r2, [r7, #2]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a04      	ldr	r2, [pc, #16]	; (8004afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aee:	6013      	str	r3, [r2, #0]
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40007000 	.word	0x40007000

08004b00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b04:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b10:	d102      	bne.n	8004b18 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b16:	e00b      	b.n	8004b30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b18:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b26:	d102      	bne.n	8004b2e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b2c:	e000      	b.n	8004b30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004b2e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40007000 	.word	0x40007000

08004b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d141      	bne.n	8004bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5a:	d131      	bne.n	8004bc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b5c:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b62:	4a46      	ldr	r2, [pc, #280]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b6c:	4b43      	ldr	r3, [pc, #268]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b74:	4a41      	ldr	r2, [pc, #260]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004b7c:	4b40      	ldr	r3, [pc, #256]	; (8004c80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2232      	movs	r2, #50	; 0x32
 8004b82:	fb02 f303 	mul.w	r3, r2, r3
 8004b86:	4a3f      	ldr	r2, [pc, #252]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	0c9b      	lsrs	r3, r3, #18
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b92:	e002      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9a:	4b38      	ldr	r3, [pc, #224]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d102      	bne.n	8004bae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f2      	bne.n	8004b94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bae:	4b33      	ldr	r3, [pc, #204]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	d158      	bne.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e057      	b.n	8004c70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc0:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc6:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bd0:	e04d      	b.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd8:	d141      	bne.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bda:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be6:	d131      	bne.n	8004c4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be8:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bee:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c00:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2232      	movs	r2, #50	; 0x32
 8004c0e:	fb02 f303 	mul.w	r3, r2, r3
 8004c12:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	0c9b      	lsrs	r3, r3, #18
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1e:	e002      	b.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c32:	d102      	bne.n	8004c3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f2      	bne.n	8004c20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d112      	bne.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e011      	b.n	8004c70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c52:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c5c:	e007      	b.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c6c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	20000000 	.word	0x20000000
 8004c84:	431bde83 	.word	0x431bde83

08004c88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c96:	6053      	str	r3, [r2, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40007000 	.word	0x40007000

08004ca8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f000 bc08 	b.w	80054cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cbc:	4b96      	ldr	r3, [pc, #600]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 030c 	and.w	r3, r3, #12
 8004cc4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc6:	4b94      	ldr	r3, [pc, #592]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80e4 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x4c>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b0c      	cmp	r3, #12
 8004ce8:	f040 808b 	bne.w	8004e02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	f040 8087 	bne.w	8004e02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cf4:	4b88      	ldr	r3, [pc, #544]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_OscConfig+0x64>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e3df      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	4b81      	ldr	r3, [pc, #516]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <HAL_RCC_OscConfig+0x7e>
 8004d1c:	4b7e      	ldr	r3, [pc, #504]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d24:	e005      	b.n	8004d32 <HAL_RCC_OscConfig+0x8a>
 8004d26:	4b7c      	ldr	r3, [pc, #496]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d223      	bcs.n	8004d7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fdcc 	bl	80058d8 <RCC_SetFlashLatencyFromMSIRange>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e3c0      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4a:	4b73      	ldr	r3, [pc, #460]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a72      	ldr	r2, [pc, #456]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d50:	f043 0308 	orr.w	r3, r3, #8
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	4b70      	ldr	r3, [pc, #448]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	496d      	ldr	r1, [pc, #436]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d68:	4b6b      	ldr	r3, [pc, #428]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	4968      	ldr	r1, [pc, #416]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
 8004d7c:	e025      	b.n	8004dca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d7e:	4b66      	ldr	r3, [pc, #408]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a65      	ldr	r2, [pc, #404]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d84:	f043 0308 	orr.w	r3, r3, #8
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	4960      	ldr	r1, [pc, #384]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d9c:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	495b      	ldr	r1, [pc, #364]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fd8c 	bl	80058d8 <RCC_SetFlashLatencyFromMSIRange>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e380      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dca:	f000 fcc1 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	4b51      	ldr	r3, [pc, #324]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	4950      	ldr	r1, [pc, #320]	; (8004f1c <HAL_RCC_OscConfig+0x274>)
 8004ddc:	5ccb      	ldrb	r3, [r1, r3]
 8004dde:	f003 031f 	and.w	r3, r3, #31
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a4e      	ldr	r2, [pc, #312]	; (8004f20 <HAL_RCC_OscConfig+0x278>)
 8004de8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dea:	4b4e      	ldr	r3, [pc, #312]	; (8004f24 <HAL_RCC_OscConfig+0x27c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe f9ee 	bl	80031d0 <HAL_InitTick>
 8004df4:	4603      	mov	r3, r0
 8004df6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d052      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	e364      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d032      	beq.n	8004e70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e0a:	4b43      	ldr	r3, [pc, #268]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a42      	ldr	r2, [pc, #264]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e16:	f7fe fa2b 	bl	8003270 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e1e:	f7fe fa27 	bl	8003270 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e34d      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e30:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a35      	ldr	r2, [pc, #212]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e42:	f043 0308 	orr.w	r3, r3, #8
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4b33      	ldr	r3, [pc, #204]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4930      	ldr	r1, [pc, #192]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e5a:	4b2f      	ldr	r3, [pc, #188]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	492b      	ldr	r1, [pc, #172]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]
 8004e6e:	e01a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e7c:	f7fe f9f8 	bl	8003270 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e84:	f7fe f9f4 	bl	8003270 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e31a      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x1dc>
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ea4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d073      	beq.n	8004f9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x21c>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d10e      	bne.n	8004edc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d10b      	bne.n	8004edc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d063      	beq.n	8004f98 <HAL_RCC_OscConfig+0x2f0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d15f      	bne.n	8004f98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e2f7      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e025      	b.n	8004f40 <HAL_RCC_OscConfig+0x298>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efc:	d114      	bne.n	8004f28 <HAL_RCC_OscConfig+0x280>
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a02      	ldr	r2, [pc, #8]	; (8004f18 <HAL_RCC_OscConfig+0x270>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e013      	b.n	8004f40 <HAL_RCC_OscConfig+0x298>
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	0800ca4c 	.word	0x0800ca4c
 8004f20:	20000000 	.word	0x20000000
 8004f24:	20000004 	.word	0x20000004
 8004f28:	4ba0      	ldr	r3, [pc, #640]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a9f      	ldr	r2, [pc, #636]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b9d      	ldr	r3, [pc, #628]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a9c      	ldr	r2, [pc, #624]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fe f992 	bl	8003270 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fe f98e 	bl	8003270 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e2b4      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f62:	4b92      	ldr	r3, [pc, #584]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x2a8>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fe f97e 	bl	8003270 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fe f97a 	bl	8003270 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e2a0      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f8a:	4b88      	ldr	r3, [pc, #544]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2d0>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d060      	beq.n	8005068 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x310>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d119      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d116      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fb8:	4b7c      	ldr	r3, [pc, #496]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x328>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e27d      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd0:	4b76      	ldr	r3, [pc, #472]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	061b      	lsls	r3, r3, #24
 8004fde:	4973      	ldr	r1, [pc, #460]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fe4:	e040      	b.n	8005068 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d023      	beq.n	8005036 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fee:	4b6f      	ldr	r3, [pc, #444]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6e      	ldr	r2, [pc, #440]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fe f939 	bl	8003270 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005002:	f7fe f935 	bl	8003270 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e25b      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005014:	4b65      	ldr	r3, [pc, #404]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005020:	4b62      	ldr	r3, [pc, #392]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	495f      	ldr	r1, [pc, #380]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
 8005034:	e018      	b.n	8005068 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005036:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5c      	ldr	r2, [pc, #368]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 800503c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fe f915 	bl	8003270 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504a:	f7fe f911 	bl	8003270 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e237      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800505c:	4b53      	ldr	r3, [pc, #332]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f0      	bne.n	800504a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d03c      	beq.n	80050ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01c      	beq.n	80050b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507c:	4b4b      	ldr	r3, [pc, #300]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 800507e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005082:	4a4a      	ldr	r2, [pc, #296]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fe f8f0 	bl	8003270 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005094:	f7fe f8ec 	bl	8003270 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e212      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050a6:	4b41      	ldr	r3, [pc, #260]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 80050a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ef      	beq.n	8005094 <HAL_RCC_OscConfig+0x3ec>
 80050b4:	e01b      	b.n	80050ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b6:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 80050b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050bc:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c6:	f7fe f8d3 	bl	8003270 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ce:	f7fe f8cf 	bl	8003270 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e1f5      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050e0:	4b32      	ldr	r3, [pc, #200]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 80050e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ef      	bne.n	80050ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80a6 	beq.w	8005248 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005100:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10d      	bne.n	8005128 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	4a26      	ldr	r2, [pc, #152]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005116:	6593      	str	r3, [r2, #88]	; 0x58
 8005118:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005124:	2301      	movs	r3, #1
 8005126:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005128:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <HAL_RCC_OscConfig+0x508>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d118      	bne.n	8005166 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005134:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <HAL_RCC_OscConfig+0x508>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <HAL_RCC_OscConfig+0x508>)
 800513a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005140:	f7fe f896 	bl	8003270 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005148:	f7fe f892 	bl	8003270 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e1b8      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <HAL_RCC_OscConfig+0x508>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d108      	bne.n	8005180 <HAL_RCC_OscConfig+0x4d8>
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800517e:	e029      	b.n	80051d4 <HAL_RCC_OscConfig+0x52c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b05      	cmp	r3, #5
 8005186:	d115      	bne.n	80051b4 <HAL_RCC_OscConfig+0x50c>
 8005188:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	4a07      	ldr	r2, [pc, #28]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519e:	4a03      	ldr	r2, [pc, #12]	; (80051ac <HAL_RCC_OscConfig+0x504>)
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051a8:	e014      	b.n	80051d4 <HAL_RCC_OscConfig+0x52c>
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40007000 	.word	0x40007000
 80051b4:	4b9d      	ldr	r3, [pc, #628]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	4a9c      	ldr	r2, [pc, #624]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051c4:	4b99      	ldr	r3, [pc, #612]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	4a98      	ldr	r2, [pc, #608]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d016      	beq.n	800520a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051dc:	f7fe f848 	bl	8003270 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f7fe f844 	bl	8003270 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e168      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051fa:	4b8c      	ldr	r3, [pc, #560]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0ed      	beq.n	80051e4 <HAL_RCC_OscConfig+0x53c>
 8005208:	e015      	b.n	8005236 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520a:	f7fe f831 	bl	8003270 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005210:	e00a      	b.n	8005228 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fe f82d 	bl	8003270 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e151      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005228:	4b80      	ldr	r3, [pc, #512]	; (800542c <HAL_RCC_OscConfig+0x784>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1ed      	bne.n	8005212 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005236:	7ffb      	ldrb	r3, [r7, #31]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800523c:	4b7b      	ldr	r3, [pc, #492]	; (800542c <HAL_RCC_OscConfig+0x784>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	4a7a      	ldr	r2, [pc, #488]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005246:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d03c      	beq.n	80052ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01c      	beq.n	8005296 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800525c:	4b73      	ldr	r3, [pc, #460]	; (800542c <HAL_RCC_OscConfig+0x784>)
 800525e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005262:	4a72      	ldr	r2, [pc, #456]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fe f800 	bl	8003270 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005274:	f7fd fffc 	bl	8003270 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e122      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005286:	4b69      	ldr	r3, [pc, #420]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ef      	beq.n	8005274 <HAL_RCC_OscConfig+0x5cc>
 8005294:	e01b      	b.n	80052ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005296:	4b65      	ldr	r3, [pc, #404]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800529c:	4a63      	ldr	r2, [pc, #396]	; (800542c <HAL_RCC_OscConfig+0x784>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a6:	f7fd ffe3 	bl	8003270 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052ae:	f7fd ffdf 	bl	8003270 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e105      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052c0:	4b5a      	ldr	r3, [pc, #360]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80052c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ef      	bne.n	80052ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80f9 	beq.w	80054ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f040 80cf 	bne.w	8005480 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052e2:	4b52      	ldr	r3, [pc, #328]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f003 0203 	and.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d12c      	bne.n	8005350 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	3b01      	subs	r3, #1
 8005302:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d123      	bne.n	8005350 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d11b      	bne.n	8005350 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d113      	bne.n	8005350 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	3b01      	subs	r3, #1
 8005336:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d109      	bne.n	8005350 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	3b01      	subs	r3, #1
 800534a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d071      	beq.n	8005434 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b0c      	cmp	r3, #12
 8005354:	d068      	beq.n	8005428 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005356:	4b35      	ldr	r3, [pc, #212]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005362:	4b32      	ldr	r3, [pc, #200]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0ac      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005372:	4b2e      	ldr	r3, [pc, #184]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2d      	ldr	r2, [pc, #180]	; (800542c <HAL_RCC_OscConfig+0x784>)
 8005378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800537c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800537e:	f7fd ff77 	bl	8003270 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005386:	f7fd ff73 	bl	8003270 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e099      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005398:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCC_OscConfig+0x784>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f0      	bne.n	8005386 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a4:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	4b21      	ldr	r3, [pc, #132]	; (8005430 <HAL_RCC_OscConfig+0x788>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053b4:	3a01      	subs	r2, #1
 80053b6:	0112      	lsls	r2, r2, #4
 80053b8:	4311      	orrs	r1, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053be:	0212      	lsls	r2, r2, #8
 80053c0:	4311      	orrs	r1, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053c6:	0852      	lsrs	r2, r2, #1
 80053c8:	3a01      	subs	r2, #1
 80053ca:	0552      	lsls	r2, r2, #21
 80053cc:	4311      	orrs	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053d2:	0852      	lsrs	r2, r2, #1
 80053d4:	3a01      	subs	r2, #1
 80053d6:	0652      	lsls	r2, r2, #25
 80053d8:	4311      	orrs	r1, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053de:	06d2      	lsls	r2, r2, #27
 80053e0:	430a      	orrs	r2, r1
 80053e2:	4912      	ldr	r1, [pc, #72]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a0f      	ldr	r2, [pc, #60]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80053ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a0c      	ldr	r2, [pc, #48]	; (800542c <HAL_RCC_OscConfig+0x784>)
 80053fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005400:	f7fd ff36 	bl	8003270 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005408:	f7fd ff32 	bl	8003270 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e058      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <HAL_RCC_OscConfig+0x784>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005426:	e050      	b.n	80054ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e04f      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
 800542c:	40021000 	.word	0x40021000
 8005430:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d144      	bne.n	80054ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005440:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 8005446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800544a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800544c:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4a20      	ldr	r2, [pc, #128]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005456:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005458:	f7fd ff0a 	bl	8003270 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fd ff06 	bl	8003270 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e02c      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0x7b8>
 800547e:	e024      	b.n	80054ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d01f      	beq.n	80054c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 800548c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fd feed 	bl	8003270 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549a:	f7fd fee9 	bl	8003270 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e00f      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	4905      	ldr	r1, [pc, #20]	; (80054d4 <HAL_RCC_OscConfig+0x82c>)
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_RCC_OscConfig+0x830>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60cb      	str	r3, [r1, #12]
 80054c4:	e001      	b.n	80054ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021000 	.word	0x40021000
 80054d8:	feeefffc 	.word	0xfeeefffc

080054dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054e6:	2300      	movs	r3, #0
 80054e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e11d      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054f4:	4b90      	ldr	r3, [pc, #576]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d910      	bls.n	8005524 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b8d      	ldr	r3, [pc, #564]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 020f 	bic.w	r2, r3, #15
 800550a:	498b      	ldr	r1, [pc, #556]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005512:	4b89      	ldr	r3, [pc, #548]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d001      	beq.n	8005524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e105      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d010      	beq.n	8005552 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	4b81      	ldr	r3, [pc, #516]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553c:	429a      	cmp	r2, r3
 800553e:	d908      	bls.n	8005552 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005540:	4b7e      	ldr	r3, [pc, #504]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	497b      	ldr	r1, [pc, #492]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d079      	beq.n	8005652 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b03      	cmp	r3, #3
 8005564:	d11e      	bne.n	80055a4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005566:	4b75      	ldr	r3, [pc, #468]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0dc      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005576:	f000 fa09 	bl	800598c <RCC_GetSysClockFreqFromPLLSource>
 800557a:	4603      	mov	r3, r0
 800557c:	4a70      	ldr	r2, [pc, #448]	; (8005740 <HAL_RCC_ClockConfig+0x264>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d946      	bls.n	8005610 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005582:	4b6e      	ldr	r3, [pc, #440]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d140      	bne.n	8005610 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800558e:	4b6b      	ldr	r3, [pc, #428]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005596:	4a69      	ldr	r2, [pc, #420]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e035      	b.n	8005610 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ac:	4b63      	ldr	r3, [pc, #396]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d115      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0b9      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055c4:	4b5d      	ldr	r3, [pc, #372]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0ad      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d4:	4b59      	ldr	r3, [pc, #356]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0a5      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80055e4:	f000 f8b4 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80055e8:	4603      	mov	r3, r0
 80055ea:	4a55      	ldr	r2, [pc, #340]	; (8005740 <HAL_RCC_ClockConfig+0x264>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d90f      	bls.n	8005610 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80055f0:	4b52      	ldr	r3, [pc, #328]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055fc:	4b4f      	ldr	r3, [pc, #316]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005604:	4a4d      	ldr	r2, [pc, #308]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005610:	4b4a      	ldr	r3, [pc, #296]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f023 0203 	bic.w	r2, r3, #3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4947      	ldr	r1, [pc, #284]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005622:	f7fd fe25 	bl	8003270 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005628:	e00a      	b.n	8005640 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562a:	f7fd fe21 	bl	8003270 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e077      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005640:	4b3e      	ldr	r3, [pc, #248]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 020c 	and.w	r2, r3, #12
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	429a      	cmp	r2, r3
 8005650:	d1eb      	bne.n	800562a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b80      	cmp	r3, #128	; 0x80
 8005656:	d105      	bne.n	8005664 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005658:	4b38      	ldr	r3, [pc, #224]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a37      	ldr	r2, [pc, #220]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 800565e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005662:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567c:	429a      	cmp	r2, r3
 800567e:	d208      	bcs.n	8005692 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005680:	4b2e      	ldr	r3, [pc, #184]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	492b      	ldr	r1, [pc, #172]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005692:	4b29      	ldr	r3, [pc, #164]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d210      	bcs.n	80056c2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a0:	4b25      	ldr	r3, [pc, #148]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 020f 	bic.w	r2, r3, #15
 80056a8:	4923      	ldr	r1, [pc, #140]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b0:	4b21      	ldr	r3, [pc, #132]	; (8005738 <HAL_RCC_ClockConfig+0x25c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d001      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e036      	b.n	8005730 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ce:	4b1b      	ldr	r3, [pc, #108]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	4918      	ldr	r1, [pc, #96]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d009      	beq.n	8005700 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ec:	4b13      	ldr	r3, [pc, #76]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4910      	ldr	r1, [pc, #64]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005700:	f000 f826 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_RCC_ClockConfig+0x260>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	490c      	ldr	r1, [pc, #48]	; (8005744 <HAL_RCC_ClockConfig+0x268>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <HAL_RCC_ClockConfig+0x26c>)
 800571e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_RCC_ClockConfig+0x270>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f7fd fd53 	bl	80031d0 <HAL_InitTick>
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]

  return status;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40022000 	.word	0x40022000
 800573c:	40021000 	.word	0x40021000
 8005740:	04c4b400 	.word	0x04c4b400
 8005744:	0800ca4c 	.word	0x0800ca4c
 8005748:	20000000 	.word	0x20000000
 800574c:	20000004 	.word	0x20000004

08005750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800575e:	4b3e      	ldr	r3, [pc, #248]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005768:	4b3b      	ldr	r3, [pc, #236]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x34>
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b0c      	cmp	r3, #12
 800577c:	d121      	bne.n	80057c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d11e      	bne.n	80057c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005784:	4b34      	ldr	r3, [pc, #208]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005790:	4b31      	ldr	r3, [pc, #196]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 8005792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005796:	0a1b      	lsrs	r3, r3, #8
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	e005      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057a0:	4b2d      	ldr	r3, [pc, #180]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057ac:	4a2b      	ldr	r2, [pc, #172]	; (800585c <HAL_RCC_GetSysClockFreq+0x10c>)
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d102      	bne.n	80057ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <HAL_RCC_GetSysClockFreq+0x110>)
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	e004      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057d4:	4b23      	ldr	r3, [pc, #140]	; (8005864 <HAL_RCC_GetSysClockFreq+0x114>)
 80057d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d134      	bne.n	8005848 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057de:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d003      	beq.n	80057f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d003      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0xac>
 80057f4:	e005      	b.n	8005802 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <HAL_RCC_GetSysClockFreq+0x110>)
 80057f8:	617b      	str	r3, [r7, #20]
      break;
 80057fa:	e005      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057fc:	4b19      	ldr	r3, [pc, #100]	; (8005864 <HAL_RCC_GetSysClockFreq+0x114>)
 80057fe:	617b      	str	r3, [r7, #20]
      break;
 8005800:	e002      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	617b      	str	r3, [r7, #20]
      break;
 8005806:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005808:	4b13      	ldr	r3, [pc, #76]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	3301      	adds	r3, #1
 8005814:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	fb03 f202 	mul.w	r2, r3, r2
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_RCC_GetSysClockFreq+0x108>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	0e5b      	lsrs	r3, r3, #25
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	3301      	adds	r3, #1
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005848:	69bb      	ldr	r3, [r7, #24]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3724      	adds	r7, #36	; 0x24
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
 800585c:	0800ca64 	.word	0x0800ca64
 8005860:	00f42400 	.word	0x00f42400
 8005864:	007a1200 	.word	0x007a1200

08005868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <HAL_RCC_GetHCLKFreq+0x14>)
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000000 	.word	0x20000000

08005880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005884:	f7ff fff0 	bl	8005868 <HAL_RCC_GetHCLKFreq>
 8005888:	4602      	mov	r2, r0
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	4904      	ldr	r1, [pc, #16]	; (80058a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005896:	5ccb      	ldrb	r3, [r1, r3]
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	0800ca5c 	.word	0x0800ca5c

080058ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058b0:	f7ff ffda 	bl	8005868 <HAL_RCC_GetHCLKFreq>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	0adb      	lsrs	r3, r3, #11
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	4904      	ldr	r1, [pc, #16]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058c2:	5ccb      	ldrb	r3, [r1, r3]
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40021000 	.word	0x40021000
 80058d4:	0800ca5c 	.word	0x0800ca5c

080058d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058e4:	4b27      	ldr	r3, [pc, #156]	; (8005984 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80058e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058f0:	f7ff f906 	bl	8004b00 <HAL_PWREx_GetVoltageRange>
 80058f4:	6178      	str	r0, [r7, #20]
 80058f6:	e014      	b.n	8005922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058f8:	4b22      	ldr	r3, [pc, #136]	; (8005984 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	4a21      	ldr	r2, [pc, #132]	; (8005984 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80058fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005902:	6593      	str	r3, [r2, #88]	; 0x58
 8005904:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005910:	f7ff f8f6 	bl	8004b00 <HAL_PWREx_GetVoltageRange>
 8005914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005916:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591a:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800591c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005920:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005928:	d10b      	bne.n	8005942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d913      	bls.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2ba0      	cmp	r3, #160	; 0xa0
 8005934:	d902      	bls.n	800593c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005936:	2302      	movs	r3, #2
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	e00d      	b.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800593c:	2301      	movs	r3, #1
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e00a      	b.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b7f      	cmp	r3, #127	; 0x7f
 8005946:	d902      	bls.n	800594e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005948:	2302      	movs	r3, #2
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	e004      	b.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d101      	bne.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005954:	2301      	movs	r3, #1
 8005956:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f023 020f 	bic.w	r2, r3, #15
 8005960:	4909      	ldr	r1, [pc, #36]	; (8005988 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	429a      	cmp	r2, r3
 8005974:	d001      	beq.n	800597a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40021000 	.word	0x40021000
 8005988:	40022000 	.word	0x40022000

0800598c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005992:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d00b      	beq.n	80059ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d825      	bhi.n	80059f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d008      	beq.n	80059c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d11f      	bne.n	80059f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80059b6:	613b      	str	r3, [r7, #16]
    break;
 80059b8:	e01f      	b.n	80059fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80059ba:	4b25      	ldr	r3, [pc, #148]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80059bc:	613b      	str	r3, [r7, #16]
    break;
 80059be:	e01c      	b.n	80059fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059c0:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e005      	b.n	80059e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059dc:	4b1a      	ldr	r3, [pc, #104]	; (8005a48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80059e8:	4a1a      	ldr	r2, [pc, #104]	; (8005a54 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	613b      	str	r3, [r7, #16]
    break;
 80059f2:	e002      	b.n	80059fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
    break;
 80059f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	3301      	adds	r3, #1
 8005a06:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	fb03 f202 	mul.w	r2, r3, r2
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	0e5b      	lsrs	r3, r3, #25
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005a3a:	683b      	ldr	r3, [r7, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	00f42400 	.word	0x00f42400
 8005a50:	007a1200 	.word	0x007a1200
 8005a54:	0800ca64 	.word	0x0800ca64

08005a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a60:	2300      	movs	r3, #0
 8005a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a64:	2300      	movs	r3, #0
 8005a66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d040      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a78:	2b80      	cmp	r3, #128	; 0x80
 8005a7a:	d02a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a7c:	2b80      	cmp	r3, #128	; 0x80
 8005a7e:	d825      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a80:	2b60      	cmp	r3, #96	; 0x60
 8005a82:	d026      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d821      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d006      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	d81d      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d009      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d010      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005a98:	e018      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a9a:	4b89      	ldr	r3, [pc, #548]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	4a88      	ldr	r2, [pc, #544]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aa6:	e015      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 fa34 	bl	8006f1c <RCCEx_PLLSAI1_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ab8:	e00c      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3320      	adds	r3, #32
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fb1f 	bl	8007104 <RCCEx_PLLSAI2_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aca:	e003      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	74fb      	strb	r3, [r7, #19]
      break;
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ada:	4b79      	ldr	r3, [pc, #484]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ae0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae8:	4975      	ldr	r1, [pc, #468]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005af0:	e001      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d047      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0a:	d030      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b10:	d82a      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b16:	d02a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1c:	d824      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b22:	d008      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b28:	d81e      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b32:	d010      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b34:	e018      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b36:	4b62      	ldr	r3, [pc, #392]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	4a61      	ldr	r2, [pc, #388]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b40:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b42:	e015      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 f9e6 	bl	8006f1c <RCCEx_PLLSAI1_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b54:	e00c      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3320      	adds	r3, #32
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 fad1 	bl	8007104 <RCCEx_PLLSAI2_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b66:	e003      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	74fb      	strb	r3, [r7, #19]
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b76:	4b52      	ldr	r3, [pc, #328]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	494e      	ldr	r1, [pc, #312]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005b8c:	e001      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 809f 	beq.w	8005cde <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ba4:	4b46      	ldr	r3, [pc, #280]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bba:	4b41      	ldr	r3, [pc, #260]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	4a40      	ldr	r2, [pc, #256]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a3a      	ldr	r2, [pc, #232]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be2:	f7fd fb45 	bl	8003270 <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005be8:	e009      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bea:	f7fd fb41 	bl	8003270 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d902      	bls.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	74fb      	strb	r3, [r7, #19]
        break;
 8005bfc:	e005      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ef      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005c0a:	7cfb      	ldrb	r3, [r7, #19]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d15b      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c10:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01f      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d019      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c2e:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c3a:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c40:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c4a:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c50:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c5a:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d016      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fd fb00 	bl	8003270 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c72:	e00b      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fd fafc 	bl	8003270 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d902      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	74fb      	strb	r3, [r7, #19]
            break;
 8005c8a:	e006      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ec      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005c9a:	7cfb      	ldrb	r3, [r7, #19]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10c      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cb8:	e008      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	74bb      	strb	r3, [r7, #18]
 8005cbe:	e005      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ccc:	7c7b      	ldrb	r3, [r7, #17]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d105      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd2:	4ba0      	ldr	r3, [pc, #640]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	4a9f      	ldr	r2, [pc, #636]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cea:	4b9a      	ldr	r3, [pc, #616]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f023 0203 	bic.w	r2, r3, #3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	4996      	ldr	r1, [pc, #600]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d0c:	4b91      	ldr	r3, [pc, #580]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f023 020c 	bic.w	r2, r3, #12
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	498e      	ldr	r1, [pc, #568]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d2e:	4b89      	ldr	r3, [pc, #548]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	4985      	ldr	r1, [pc, #532]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d50:	4b80      	ldr	r3, [pc, #512]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	497d      	ldr	r1, [pc, #500]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d72:	4b78      	ldr	r3, [pc, #480]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d80:	4974      	ldr	r1, [pc, #464]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d94:	4b6f      	ldr	r3, [pc, #444]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da2:	496c      	ldr	r1, [pc, #432]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005db6:	4b67      	ldr	r3, [pc, #412]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc4:	4963      	ldr	r1, [pc, #396]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dd8:	4b5e      	ldr	r3, [pc, #376]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de6:	495b      	ldr	r1, [pc, #364]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dfa:	4b56      	ldr	r3, [pc, #344]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e08:	4952      	ldr	r1, [pc, #328]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e1c:	4b4d      	ldr	r3, [pc, #308]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	494a      	ldr	r1, [pc, #296]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e3e:	4b45      	ldr	r3, [pc, #276]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4c:	4941      	ldr	r1, [pc, #260]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e60:	4b3c      	ldr	r3, [pc, #240]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e66:	f023 0203 	bic.w	r2, r3, #3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6e:	4939      	ldr	r1, [pc, #228]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d028      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e82:	4b34      	ldr	r3, [pc, #208]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e90:	4930      	ldr	r1, [pc, #192]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea0:	d106      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eac:	60d3      	str	r3, [r2, #12]
 8005eae:	e011      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 f82b 	bl	8006f1c <RCCEx_PLLSAI1_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005eca:	7cfb      	ldrb	r3, [r7, #19]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d04d      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee8:	d108      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ef0:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ef6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005efa:	e012      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005efc:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f02:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f0c:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f1a:	490e      	ldr	r1, [pc, #56]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f36:	60d3      	str	r3, [r2, #12]
 8005f38:	e020      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f42:	d109      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a02      	ldr	r2, [pc, #8]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f4e:	60d3      	str	r3, [r2, #12]
 8005f50:	e014      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2101      	movs	r1, #1
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 ffd7 	bl	8006f1c <RCCEx_PLLSAI1_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f72:	7cfb      	ldrb	r3, [r7, #19]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d028      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f88:	4b4a      	ldr	r3, [pc, #296]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f96:	4947      	ldr	r1, [pc, #284]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa6:	d106      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa8:	4b42      	ldr	r3, [pc, #264]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a41      	ldr	r2, [pc, #260]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fb2:	60d3      	str	r3, [r2, #12]
 8005fb4:	e011      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fbe:	d10c      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 ffa8 	bl	8006f1c <RCCEx_PLLSAI1_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd0:	7cfb      	ldrb	r3, [r7, #19]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005fd6:	7cfb      	ldrb	r3, [r7, #19]
 8005fd8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01e      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fe6:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff6:	492f      	ldr	r1, [pc, #188]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006008:	d10c      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
 800600e:	2102      	movs	r1, #2
 8006010:	4618      	mov	r0, r3
 8006012:	f000 ff83 	bl	8006f1c <RCCEx_PLLSAI1_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800601a:	7cfb      	ldrb	r3, [r7, #19]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006020:	7cfb      	ldrb	r3, [r7, #19]
 8006022:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00b      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006030:	4b20      	ldr	r3, [pc, #128]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006036:	f023 0204 	bic.w	r2, r3, #4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006040:	491c      	ldr	r1, [pc, #112]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006054:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800605a:	f023 0218 	bic.w	r2, r3, #24
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	4913      	ldr	r1, [pc, #76]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d017      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800607a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800607e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006088:	490a      	ldr	r1, [pc, #40]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800609a:	d105      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40021000 	.word	0x40021000

080060b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ca:	d13e      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80060cc:	4bb6      	ldr	r3, [pc, #728]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060de:	d028      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e6:	f200 86f4 	bhi.w	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f0:	d005      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d00e      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80060fa:	f000 beea 	b.w	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060fe:	4baa      	ldr	r3, [pc, #680]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b02      	cmp	r3, #2
 800610a:	f040 86e4 	bne.w	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800610e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006112:	61fb      	str	r3, [r7, #28]
      break;
 8006114:	f000 bedf 	b.w	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006118:	4ba3      	ldr	r3, [pc, #652]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800611a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b02      	cmp	r3, #2
 8006124:	f040 86d9 	bne.w	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8006128:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800612c:	61fb      	str	r3, [r7, #28]
      break;
 800612e:	f000 bed4 	b.w	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006132:	4b9d      	ldr	r3, [pc, #628]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613e:	f040 86ce 	bne.w	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8006142:	4b9a      	ldr	r3, [pc, #616]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006144:	61fb      	str	r3, [r7, #28]
      break;
 8006146:	f000 beca 	b.w	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800614a:	4b97      	ldr	r3, [pc, #604]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d036      	beq.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d840      	bhi.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d003      	beq.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d020      	beq.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800616c:	e039      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800616e:	4b8e      	ldr	r3, [pc, #568]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d116      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800617a:	4b8b      	ldr	r3, [pc, #556]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006186:	4b88      	ldr	r3, [pc, #544]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	091b      	lsrs	r3, r3, #4
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	e005      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006192:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	4a84      	ldr	r2, [pc, #528]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80061a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061a6:	e01f      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
      break;
 80061ac:	e01c      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ae:	4b7e      	ldr	r3, [pc, #504]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ba:	d102      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80061bc:	4b7d      	ldr	r3, [pc, #500]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80061be:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061c0:	e012      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
      break;
 80061c6:	e00f      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061c8:	4b77      	ldr	r3, [pc, #476]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061d4:	d102      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80061d6:	4b78      	ldr	r3, [pc, #480]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80061d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061da:	e005      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
      break;
 80061e0:	e002      	b.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
      break;
 80061e6:	bf00      	nop
    }

    switch(PeriphClk)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ee:	f000 8606 	beq.w	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f8:	f200 8673 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006202:	f000 8469 	beq.w	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800620c:	f200 8669 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006216:	f000 8531 	beq.w	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006220:	f200 865f 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800622a:	f000 8187 	beq.w	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006234:	f200 8655 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800623e:	f000 80cd 	beq.w	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006248:	f200 864b 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006252:	f000 8430 	beq.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625c:	f200 8641 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006266:	f000 83e4 	beq.w	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006270:	f200 8637 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627a:	f000 80af 	beq.w	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006284:	f200 862d 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628e:	f000 809d 	beq.w	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006298:	f200 8623 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a2:	f000 808b 	beq.w	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ac:	f200 8619 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b6:	f000 8554 	beq.w	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c0:	f200 860f 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ca:	f000 8500 	beq.w	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	f200 8605 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062de:	f000 84a1 	beq.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e8:	f200 85fb 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b80      	cmp	r3, #128	; 0x80
 80062f0:	f000 846c 	beq.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b80      	cmp	r3, #128	; 0x80
 80062f8:	f200 85f3 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d84c      	bhi.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 85ec 	beq.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3b01      	subs	r3, #1
 800630e:	2b1f      	cmp	r3, #31
 8006310:	f200 85e7 	bhi.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006314:	a201      	add	r2, pc, #4	; (adr r2, 800631c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	08006731 	.word	0x08006731
 8006320:	0800679f 	.word	0x0800679f
 8006324:	08006ee3 	.word	0x08006ee3
 8006328:	08006833 	.word	0x08006833
 800632c:	08006ee3 	.word	0x08006ee3
 8006330:	08006ee3 	.word	0x08006ee3
 8006334:	08006ee3 	.word	0x08006ee3
 8006338:	080068ab 	.word	0x080068ab
 800633c:	08006ee3 	.word	0x08006ee3
 8006340:	08006ee3 	.word	0x08006ee3
 8006344:	08006ee3 	.word	0x08006ee3
 8006348:	08006ee3 	.word	0x08006ee3
 800634c:	08006ee3 	.word	0x08006ee3
 8006350:	08006ee3 	.word	0x08006ee3
 8006354:	08006ee3 	.word	0x08006ee3
 8006358:	0800692f 	.word	0x0800692f
 800635c:	08006ee3 	.word	0x08006ee3
 8006360:	08006ee3 	.word	0x08006ee3
 8006364:	08006ee3 	.word	0x08006ee3
 8006368:	08006ee3 	.word	0x08006ee3
 800636c:	08006ee3 	.word	0x08006ee3
 8006370:	08006ee3 	.word	0x08006ee3
 8006374:	08006ee3 	.word	0x08006ee3
 8006378:	08006ee3 	.word	0x08006ee3
 800637c:	08006ee3 	.word	0x08006ee3
 8006380:	08006ee3 	.word	0x08006ee3
 8006384:	08006ee3 	.word	0x08006ee3
 8006388:	08006ee3 	.word	0x08006ee3
 800638c:	08006ee3 	.word	0x08006ee3
 8006390:	08006ee3 	.word	0x08006ee3
 8006394:	08006ee3 	.word	0x08006ee3
 8006398:	080069b1 	.word	0x080069b1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	f000 83e8 	beq.w	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80063a4:	f000 bd9d 	b.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80063a8:	40021000 	.word	0x40021000
 80063ac:	0003d090 	.word	0x0003d090
 80063b0:	0800ca64 	.word	0x0800ca64
 80063b4:	00f42400 	.word	0x00f42400
 80063b8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80063bc:	69b9      	ldr	r1, [r7, #24]
 80063be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80063c2:	f000 ff93 	bl	80072ec <RCCEx_GetSAIxPeriphCLKFreq>
 80063c6:	61f8      	str	r0, [r7, #28]
      break;
 80063c8:	f000 bd8e 	b.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80063d2:	f000 ff8b 	bl	80072ec <RCCEx_GetSAIxPeriphCLKFreq>
 80063d6:	61f8      	str	r0, [r7, #28]
      break;
 80063d8:	f000 bd86 	b.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80063dc:	4b9a      	ldr	r3, [pc, #616]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063ee:	d015      	beq.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063f6:	f200 8092 	bhi.w	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006400:	d029      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006408:	f200 8089 	bhi.w	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d07b      	beq.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006418:	d04a      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800641a:	e080      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800641c:	4b8a      	ldr	r3, [pc, #552]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b02      	cmp	r3, #2
 8006426:	d17d      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006428:	4b87      	ldr	r3, [pc, #540]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006434:	4b84      	ldr	r3, [pc, #528]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	091b      	lsrs	r3, r3, #4
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	e005      	b.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006440:	4b81      	ldr	r3, [pc, #516]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006446:	0a1b      	lsrs	r3, r3, #8
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	4a7f      	ldr	r2, [pc, #508]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	61fb      	str	r3, [r7, #28]
          break;
 8006454:	e066      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006456:	4b7c      	ldr	r3, [pc, #496]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006462:	d162      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006464:	4b78      	ldr	r3, [pc, #480]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800646c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006470:	d15b      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006472:	4b75      	ldr	r3, [pc, #468]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	fb03 f202 	mul.w	r2, r3, r2
 8006486:	4b70      	ldr	r3, [pc, #448]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	3301      	adds	r3, #1
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006498:	4b6b      	ldr	r3, [pc, #428]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	0d5b      	lsrs	r3, r3, #21
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	3301      	adds	r3, #1
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	61fb      	str	r3, [r7, #28]
          break;
 80064ae:	e03c      	b.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80064b0:	4b65      	ldr	r3, [pc, #404]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064bc:	d138      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80064be:	4b62      	ldr	r3, [pc, #392]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ca:	d131      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064cc:	4b5e      	ldr	r3, [pc, #376]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	0a1b      	lsrs	r3, r3, #8
 80064d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	fb03 f202 	mul.w	r2, r3, r2
 80064e0:	4b59      	ldr	r3, [pc, #356]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	3301      	adds	r3, #1
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80064f2:	4b55      	ldr	r3, [pc, #340]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	0d5b      	lsrs	r3, r3, #21
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	3301      	adds	r3, #1
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	fbb2 f3f3 	udiv	r3, r2, r3
 8006506:	61fb      	str	r3, [r7, #28]
          break;
 8006508:	e012      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800650a:	4b4f      	ldr	r3, [pc, #316]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800650c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b02      	cmp	r3, #2
 8006516:	d10e      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006518:	4b4d      	ldr	r3, [pc, #308]	; (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800651a:	61fb      	str	r3, [r7, #28]
          break;
 800651c:	e00b      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800651e:	bf00      	nop
 8006520:	f000 bce2 	b.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006524:	bf00      	nop
 8006526:	f000 bcdf 	b.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800652a:	bf00      	nop
 800652c:	f000 bcdc 	b.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006530:	bf00      	nop
 8006532:	f000 bcd9 	b.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006536:	bf00      	nop
        break;
 8006538:	f000 bcd6 	b.w	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800653c:	4b42      	ldr	r3, [pc, #264]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800653e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800654a:	d13d      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800654c:	4b3e      	ldr	r3, [pc, #248]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006558:	f040 84c5 	bne.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800655c:	4b3a      	ldr	r3, [pc, #232]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006568:	f040 84bd 	bne.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800656c:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	0a1b      	lsrs	r3, r3, #8
 8006572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006576:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	fb03 f202 	mul.w	r2, r3, r2
 8006580:	4b31      	ldr	r3, [pc, #196]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	3301      	adds	r3, #1
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006592:	4b2d      	ldr	r3, [pc, #180]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	0edb      	lsrs	r3, r3, #27
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80065a4:	4b28      	ldr	r3, [pc, #160]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80065b0:	2311      	movs	r3, #17
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80065b6:	2307      	movs	r3, #7
 80065b8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	61fb      	str	r3, [r7, #28]
      break;
 80065c4:	f000 bc8f 	b.w	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80065c8:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80065da:	d016      	beq.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80065e2:	f200 809b 	bhi.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ec:	d032      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f4:	f200 8092 	bhi.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8084 	beq.w	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006606:	d052      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006608:	e088      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	f040 8084 	bne.w	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006618:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006624:	4b08      	ldr	r3, [pc, #32]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	e005      	b.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	4a03      	ldr	r2, [pc, #12]	; (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800663e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006642:	61fb      	str	r3, [r7, #28]
          break;
 8006644:	e06c      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006646:	bf00      	nop
 8006648:	40021000 	.word	0x40021000
 800664c:	0800ca64 	.word	0x0800ca64
 8006650:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006654:	4ba5      	ldr	r3, [pc, #660]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006660:	d160      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006662:	4ba2      	ldr	r3, [pc, #648]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800666a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800666e:	d159      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006670:	4b9e      	ldr	r3, [pc, #632]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	0a1b      	lsrs	r3, r3, #8
 8006676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	fb03 f202 	mul.w	r2, r3, r2
 8006684:	4b99      	ldr	r3, [pc, #612]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	091b      	lsrs	r3, r3, #4
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	3301      	adds	r3, #1
 8006690:	fbb2 f3f3 	udiv	r3, r2, r3
 8006694:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006696:	4b95      	ldr	r3, [pc, #596]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	0d5b      	lsrs	r3, r3, #21
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	3301      	adds	r3, #1
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	61fb      	str	r3, [r7, #28]
          break;
 80066ac:	e03a      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80066ae:	4b8f      	ldr	r3, [pc, #572]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ba:	d135      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80066bc:	4b8b      	ldr	r3, [pc, #556]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066c8:	d12e      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80066ca:	4b88      	ldr	r3, [pc, #544]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	fb03 f202 	mul.w	r2, r3, r2
 80066de:	4b83      	ldr	r3, [pc, #524]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	3301      	adds	r3, #1
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80066f0:	4b7e      	ldr	r3, [pc, #504]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	0d5b      	lsrs	r3, r3, #21
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	3301      	adds	r3, #1
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	61fb      	str	r3, [r7, #28]
          break;
 8006706:	e00f      	b.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006708:	4b78      	ldr	r3, [pc, #480]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800670a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b02      	cmp	r3, #2
 8006714:	d10a      	bne.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006716:	4b76      	ldr	r3, [pc, #472]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006718:	61fb      	str	r3, [r7, #28]
          break;
 800671a:	e007      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800671c:	bf00      	nop
 800671e:	e3e2      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006720:	bf00      	nop
 8006722:	e3e0      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006724:	bf00      	nop
 8006726:	e3de      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006728:	bf00      	nop
 800672a:	e3dc      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800672c:	bf00      	nop
      break;
 800672e:	e3da      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006730:	4b6e      	ldr	r3, [pc, #440]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b03      	cmp	r3, #3
 8006740:	d827      	bhi.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	08006759 	.word	0x08006759
 800674c:	08006761 	.word	0x08006761
 8006750:	08006769 	.word	0x08006769
 8006754:	0800677d 	.word	0x0800677d
          frequency = HAL_RCC_GetPCLK2Freq();
 8006758:	f7ff f8a8 	bl	80058ac <HAL_RCC_GetPCLK2Freq>
 800675c:	61f8      	str	r0, [r7, #28]
          break;
 800675e:	e01d      	b.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006760:	f7fe fff6 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006764:	61f8      	str	r0, [r7, #28]
          break;
 8006766:	e019      	b.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006768:	4b60      	ldr	r3, [pc, #384]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006774:	d10f      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8006776:	4b5f      	ldr	r3, [pc, #380]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006778:	61fb      	str	r3, [r7, #28]
          break;
 800677a:	e00c      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800677c:	4b5b      	ldr	r3, [pc, #364]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b02      	cmp	r3, #2
 8006788:	d107      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800678a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678e:	61fb      	str	r3, [r7, #28]
          break;
 8006790:	e003      	b.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8006792:	bf00      	nop
 8006794:	e3a8      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006796:	bf00      	nop
 8006798:	e3a6      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800679a:	bf00      	nop
        break;
 800679c:	e3a4      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800679e:	4b53      	ldr	r3, [pc, #332]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b0c      	cmp	r3, #12
 80067ae:	d83a      	bhi.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067ed 	.word	0x080067ed
 80067bc:	08006827 	.word	0x08006827
 80067c0:	08006827 	.word	0x08006827
 80067c4:	08006827 	.word	0x08006827
 80067c8:	080067f5 	.word	0x080067f5
 80067cc:	08006827 	.word	0x08006827
 80067d0:	08006827 	.word	0x08006827
 80067d4:	08006827 	.word	0x08006827
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	08006827 	.word	0x08006827
 80067e0:	08006827 	.word	0x08006827
 80067e4:	08006827 	.word	0x08006827
 80067e8:	08006811 	.word	0x08006811
          frequency = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7ff f848 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 80067f0:	61f8      	str	r0, [r7, #28]
          break;
 80067f2:	e01d      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80067f4:	f7fe ffac 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80067f8:	61f8      	str	r0, [r7, #28]
          break;
 80067fa:	e019      	b.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067fc:	4b3b      	ldr	r3, [pc, #236]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006808:	d10f      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800680a:	4b3a      	ldr	r3, [pc, #232]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800680c:	61fb      	str	r3, [r7, #28]
          break;
 800680e:	e00c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006810:	4b36      	ldr	r3, [pc, #216]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b02      	cmp	r3, #2
 800681c:	d107      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800681e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006822:	61fb      	str	r3, [r7, #28]
          break;
 8006824:	e003      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006826:	bf00      	nop
 8006828:	e35e      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800682a:	bf00      	nop
 800682c:	e35c      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800682e:	bf00      	nop
        break;
 8006830:	e35a      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006832:	4b2e      	ldr	r3, [pc, #184]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b30      	cmp	r3, #48	; 0x30
 8006842:	d021      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b30      	cmp	r3, #48	; 0x30
 8006848:	d829      	bhi.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b20      	cmp	r3, #32
 800684e:	d011      	beq.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b20      	cmp	r3, #32
 8006854:	d823      	bhi.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b10      	cmp	r3, #16
 8006860:	d004      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006862:	e01c      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006864:	f7ff f80c 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8006868:	61f8      	str	r0, [r7, #28]
          break;
 800686a:	e01d      	b.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800686c:	f7fe ff70 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006870:	61f8      	str	r0, [r7, #28]
          break;
 8006872:	e019      	b.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d10f      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006884:	61fb      	str	r3, [r7, #28]
          break;
 8006886:	e00c      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006888:	4b18      	ldr	r3, [pc, #96]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b02      	cmp	r3, #2
 8006894:	d107      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8006896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689a:	61fb      	str	r3, [r7, #28]
          break;
 800689c:	e003      	b.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800689e:	bf00      	nop
 80068a0:	e322      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068a2:	bf00      	nop
 80068a4:	e320      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068a6:	bf00      	nop
        break;
 80068a8:	e31e      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2bc0      	cmp	r3, #192	; 0xc0
 80068ba:	d027      	beq.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2bc0      	cmp	r3, #192	; 0xc0
 80068c0:	d82f      	bhi.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b80      	cmp	r3, #128	; 0x80
 80068c6:	d017      	beq.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b80      	cmp	r3, #128	; 0x80
 80068cc:	d829      	bhi.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b40      	cmp	r3, #64	; 0x40
 80068d8:	d004      	beq.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80068da:	e022      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068dc:	f7fe ffd0 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 80068e0:	61f8      	str	r0, [r7, #28]
          break;
 80068e2:	e023      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80068e4:	f7fe ff34 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80068e8:	61f8      	str	r0, [r7, #28]
          break;
 80068ea:	e01f      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80068ec:	40021000 	.word	0x40021000
 80068f0:	02dc6c00 	.word	0x02dc6c00
 80068f4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068f8:	4b9b      	ldr	r3, [pc, #620]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006904:	d10f      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006906:	4b99      	ldr	r3, [pc, #612]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006908:	61fb      	str	r3, [r7, #28]
          break;
 800690a:	e00c      	b.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800690c:	4b96      	ldr	r3, [pc, #600]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d107      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800691a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691e:	61fb      	str	r3, [r7, #28]
          break;
 8006920:	e003      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006922:	bf00      	nop
 8006924:	e2e0      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006926:	bf00      	nop
 8006928:	e2de      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800692a:	bf00      	nop
        break;
 800692c:	e2dc      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800692e:	4b8e      	ldr	r3, [pc, #568]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006940:	d025      	beq.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006948:	d82c      	bhi.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d013      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006958:	d824      	bhi.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006966:	d004      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8006968:	e01c      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800696a:	f7fe ff89 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 800696e:	61f8      	str	r0, [r7, #28]
          break;
 8006970:	e01d      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006972:	f7fe feed 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006976:	61f8      	str	r0, [r7, #28]
          break;
 8006978:	e019      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800697a:	4b7b      	ldr	r3, [pc, #492]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006986:	d10f      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8006988:	4b78      	ldr	r3, [pc, #480]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800698a:	61fb      	str	r3, [r7, #28]
          break;
 800698c:	e00c      	b.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800698e:	4b76      	ldr	r3, [pc, #472]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b02      	cmp	r3, #2
 800699a:	d107      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800699c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a0:	61fb      	str	r3, [r7, #28]
          break;
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80069a4:	bf00      	nop
 80069a6:	e29f      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069a8:	bf00      	nop
 80069aa:	e29d      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069ac:	bf00      	nop
        break;
 80069ae:	e29b      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80069b0:	4b6d      	ldr	r3, [pc, #436]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c2:	d025      	beq.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069ca:	d82c      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d2:	d013      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069da:	d824      	bhi.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e8:	d004      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80069ea:	e01c      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fe ff48 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 80069f0:	61f8      	str	r0, [r7, #28]
          break;
 80069f2:	e01d      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80069f4:	f7fe feac 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80069f8:	61f8      	str	r0, [r7, #28]
          break;
 80069fa:	e019      	b.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069fc:	4b5a      	ldr	r3, [pc, #360]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a08:	d10f      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8006a0a:	4b58      	ldr	r3, [pc, #352]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006a0c:	61fb      	str	r3, [r7, #28]
          break;
 8006a0e:	e00c      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a10:	4b55      	ldr	r3, [pc, #340]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a22:	61fb      	str	r3, [r7, #28]
          break;
 8006a24:	e003      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006a26:	bf00      	nop
 8006a28:	e25e      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a2a:	bf00      	nop
 8006a2c:	e25c      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a2e:	bf00      	nop
        break;
 8006a30:	e25a      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006a32:	4b4d      	ldr	r3, [pc, #308]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a44:	d007      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a4c:	d12f      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a4e:	f7fe fe7f 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006a52:	61f8      	str	r0, [r7, #28]
          break;
 8006a54:	e02e      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006a56:	4b44      	ldr	r3, [pc, #272]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a62:	d126      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006a64:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d020      	beq.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a70:	4b3d      	ldr	r3, [pc, #244]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	fb03 f202 	mul.w	r2, r3, r2
 8006a84:	4b38      	ldr	r3, [pc, #224]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	3301      	adds	r3, #1
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006a96:	4b34      	ldr	r3, [pc, #208]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	0e5b      	lsrs	r3, r3, #25
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aaa:	61fb      	str	r3, [r7, #28]
          break;
 8006aac:	e001      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8006aae:	bf00      	nop
 8006ab0:	e21a      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ab2:	bf00      	nop
        break;
 8006ab4:	e218      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006ac8:	f7fe fef0 	bl	80058ac <HAL_RCC_GetPCLK2Freq>
 8006acc:	61f8      	str	r0, [r7, #28]
        break;
 8006ace:	e20b      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ad0:	f7fe fe3e 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006ad4:	61f8      	str	r0, [r7, #28]
        break;
 8006ad6:	e207      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006ad8:	4b23      	ldr	r3, [pc, #140]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ade:	f003 0318 	and.w	r3, r3, #24
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d010      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d834      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d024      	beq.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006afc:	e02d      	b.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006afe:	69b9      	ldr	r1, [r7, #24]
 8006b00:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b04:	f000 fbf2 	bl	80072ec <RCCEx_GetSAIxPeriphCLKFreq>
 8006b08:	61f8      	str	r0, [r7, #28]
          break;
 8006b0a:	e02b      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b0c:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d122      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b18:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006b24:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	e005      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006b30:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b42:	61fb      	str	r3, [r7, #28]
          break;
 8006b44:	e00b      	b.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d106      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006b56:	61fb      	str	r3, [r7, #28]
          break;
 8006b58:	e003      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8006b5a:	bf00      	nop
 8006b5c:	e1c4      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b5e:	bf00      	nop
 8006b60:	e1c2      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b62:	bf00      	nop
        break;
 8006b64:	e1c0      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	00f42400 	.word	0x00f42400
 8006b70:	0800ca64 	.word	0x0800ca64
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006b74:	4b96      	ldr	r3, [pc, #600]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b86:	d013      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8e:	d819      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9c:	d004      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8006b9e:	e011      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fe fe6e 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8006ba4:	61f8      	str	r0, [r7, #28]
          break;
 8006ba6:	e010      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ba8:	f7fe fdd2 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006bac:	61f8      	str	r0, [r7, #28]
          break;
 8006bae:	e00c      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bb0:	4b87      	ldr	r3, [pc, #540]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbc:	d104      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8006bbe:	4b85      	ldr	r3, [pc, #532]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006bc0:	61fb      	str	r3, [r7, #28]
          break;
 8006bc2:	e001      	b.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006bc4:	bf00      	nop
 8006bc6:	e18f      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006bc8:	bf00      	nop
        break;
 8006bca:	e18d      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006bcc:	4b80      	ldr	r3, [pc, #512]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bde:	d013      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be6:	d819      	bhi.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf4:	d004      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006bf6:	e011      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bf8:	f7fe fe42 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8006bfc:	61f8      	str	r0, [r7, #28]
          break;
 8006bfe:	e010      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c00:	f7fe fda6 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006c04:	61f8      	str	r0, [r7, #28]
          break;
 8006c06:	e00c      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c08:	4b71      	ldr	r3, [pc, #452]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c14:	d104      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006c16:	4b6f      	ldr	r3, [pc, #444]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006c18:	61fb      	str	r3, [r7, #28]
          break;
 8006c1a:	e001      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006c1c:	bf00      	nop
 8006c1e:	e163      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c20:	bf00      	nop
        break;
 8006c22:	e161      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006c24:	4b6a      	ldr	r3, [pc, #424]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c36:	d013      	beq.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c3e:	d819      	bhi.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c4c:	d004      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006c4e:	e011      	b.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fe fe16 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8006c54:	61f8      	str	r0, [r7, #28]
          break;
 8006c56:	e010      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c58:	f7fe fd7a 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006c5c:	61f8      	str	r0, [r7, #28]
          break;
 8006c5e:	e00c      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c60:	4b5b      	ldr	r3, [pc, #364]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d104      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006c6e:	4b59      	ldr	r3, [pc, #356]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006c70:	61fb      	str	r3, [r7, #28]
          break;
 8006c72:	e001      	b.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006c74:	bf00      	nop
 8006c76:	e137      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c78:	bf00      	nop
        break;
 8006c7a:	e135      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006c7c:	4b54      	ldr	r3, [pc, #336]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d011      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d818      	bhi.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d004      	beq.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8006ca0:	e011      	b.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ca2:	f7fe fded 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8006ca6:	61f8      	str	r0, [r7, #28]
          break;
 8006ca8:	e010      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8006caa:	f7fe fd51 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006cae:	61f8      	str	r0, [r7, #28]
          break;
 8006cb0:	e00c      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cb2:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbe:	d104      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006cc0:	4b44      	ldr	r3, [pc, #272]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006cc2:	61fb      	str	r3, [r7, #28]
          break;
 8006cc4:	e001      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006cc6:	bf00      	nop
 8006cc8:	e10e      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006cca:	bf00      	nop
        break;
 8006ccc:	e10c      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006cce:	4b40      	ldr	r3, [pc, #256]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce0:	d02c      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce8:	d833      	bhi.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf0:	d01a      	beq.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf8:	d82b      	bhi.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d06:	d004      	beq.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006d08:	e023      	b.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d0a:	f7fe fdb9 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8006d0e:	61f8      	str	r0, [r7, #28]
          break;
 8006d10:	e026      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006d12:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d11a      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006d20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d24:	61fb      	str	r3, [r7, #28]
          break;
 8006d26:	e016      	b.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d28:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d34:	d111      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006d36:	4b27      	ldr	r3, [pc, #156]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006d38:	61fb      	str	r3, [r7, #28]
          break;
 8006d3a:	e00e      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d3c:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d109      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4e:	61fb      	str	r3, [r7, #28]
          break;
 8006d50:	e005      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006d52:	bf00      	nop
 8006d54:	e0c8      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d56:	bf00      	nop
 8006d58:	e0c6      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d5a:	bf00      	nop
 8006d5c:	e0c4      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006d5e:	bf00      	nop
        break;
 8006d60:	e0c2      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006d62:	4b1b      	ldr	r3, [pc, #108]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d74:	d030      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d7c:	d837      	bhi.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d84:	d01a      	beq.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d8c:	d82f      	bhi.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d004      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9a:	d004      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006d9c:	e027      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d9e:	f7fe fd6f 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8006da2:	61f8      	str	r0, [r7, #28]
          break;
 8006da4:	e02a      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d11e      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006db4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006db8:	61fb      	str	r3, [r7, #28]
          break;
 8006dba:	e01a      	b.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc8:	d115      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006dca:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006dcc:	61fb      	str	r3, [r7, #28]
          break;
 8006dce:	e012      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006dd8:	4b46      	ldr	r3, [pc, #280]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d109      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dea:	61fb      	str	r3, [r7, #28]
          break;
 8006dec:	e005      	b.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006dee:	bf00      	nop
 8006df0:	e07a      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006df2:	bf00      	nop
 8006df4:	e078      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006df6:	bf00      	nop
 8006df8:	e076      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006dfa:	bf00      	nop
        break;
 8006dfc:	e074      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006dfe:	4b3d      	ldr	r3, [pc, #244]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e10:	d02c      	beq.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e18:	d855      	bhi.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e26:	d004      	beq.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006e28:	e04d      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fe fc91 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8006e2e:	61f8      	str	r0, [r7, #28]
          break;
 8006e30:	e04e      	b.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006e32:	4b30      	ldr	r3, [pc, #192]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d145      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006e3e:	4b2d      	ldr	r3, [pc, #180]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006e4a:	4b2a      	ldr	r3, [pc, #168]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	091b      	lsrs	r3, r3, #4
 8006e50:	f003 030f 	and.w	r3, r3, #15
 8006e54:	e005      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006e56:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	4a25      	ldr	r2, [pc, #148]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e68:	61fb      	str	r3, [r7, #28]
          break;
 8006e6a:	e02e      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006e6c:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e78:	d129      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006e7a:	4b1e      	ldr	r3, [pc, #120]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e86:	d122      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006e88:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	0a1b      	lsrs	r3, r3, #8
 8006e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e92:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	fb03 f202 	mul.w	r2, r3, r2
 8006e9c:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006eae:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	0d5b      	lsrs	r3, r3, #21
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	3301      	adds	r3, #1
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec2:	61fb      	str	r3, [r7, #28]
          break;
 8006ec4:	e003      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006ec6:	bf00      	nop
 8006ec8:	e00e      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006eca:	bf00      	nop
 8006ecc:	e00c      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006ece:	bf00      	nop
        break;
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006eda:	bf00      	nop
 8006edc:	e004      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006ede:	bf00      	nop
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006ee6:	bf00      	nop
    }
  }

  return(frequency);
 8006ee8:	69fb      	ldr	r3, [r7, #28]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	0800ca64 	.word	0x0800ca64

08006efc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f06:	f043 0304 	orr.w	r3, r3, #4
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000

08006f1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f2a:	4b72      	ldr	r3, [pc, #456]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00e      	beq.n	8006f54 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f36:	4b6f      	ldr	r3, [pc, #444]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0203 	and.w	r2, r3, #3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d103      	bne.n	8006f4e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
       ||
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d142      	bne.n	8006fd4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	73fb      	strb	r3, [r7, #15]
 8006f52:	e03f      	b.n	8006fd4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d018      	beq.n	8006f8e <RCCEx_PLLSAI1_Config+0x72>
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d825      	bhi.n	8006fac <RCCEx_PLLSAI1_Config+0x90>
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d002      	beq.n	8006f6a <RCCEx_PLLSAI1_Config+0x4e>
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d009      	beq.n	8006f7c <RCCEx_PLLSAI1_Config+0x60>
 8006f68:	e020      	b.n	8006fac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f6a:	4b62      	ldr	r3, [pc, #392]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d11d      	bne.n	8006fb2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f7a:	e01a      	b.n	8006fb2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f7c:	4b5d      	ldr	r3, [pc, #372]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d116      	bne.n	8006fb6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f8c:	e013      	b.n	8006fb6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f8e:	4b59      	ldr	r3, [pc, #356]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10f      	bne.n	8006fba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f9a:	4b56      	ldr	r3, [pc, #344]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006faa:	e006      	b.n	8006fba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb0:	e004      	b.n	8006fbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006fba:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d108      	bne.n	8006fd4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006fc2:	4b4c      	ldr	r3, [pc, #304]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f023 0203 	bic.w	r2, r3, #3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4949      	ldr	r1, [pc, #292]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f040 8086 	bne.w	80070e8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006fdc:	4b45      	ldr	r3, [pc, #276]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a44      	ldr	r2, [pc, #272]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe8:	f7fc f942 	bl	8003270 <HAL_GetTick>
 8006fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fee:	e009      	b.n	8007004 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ff0:	f7fc f93e 	bl	8003270 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d902      	bls.n	8007004 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	73fb      	strb	r3, [r7, #15]
        break;
 8007002:	e005      	b.n	8007010 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007004:	4b3b      	ldr	r3, [pc, #236]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1ef      	bne.n	8006ff0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d168      	bne.n	80070e8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d113      	bne.n	8007044 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800701c:	4b35      	ldr	r3, [pc, #212]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	4b35      	ldr	r3, [pc, #212]	; (80070f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007022:	4013      	ands	r3, r2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	0211      	lsls	r1, r2, #8
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68d2      	ldr	r2, [r2, #12]
 800702e:	06d2      	lsls	r2, r2, #27
 8007030:	4311      	orrs	r1, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6852      	ldr	r2, [r2, #4]
 8007036:	3a01      	subs	r2, #1
 8007038:	0112      	lsls	r2, r2, #4
 800703a:	430a      	orrs	r2, r1
 800703c:	492d      	ldr	r1, [pc, #180]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800703e:	4313      	orrs	r3, r2
 8007040:	610b      	str	r3, [r1, #16]
 8007042:	e02d      	b.n	80070a0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d115      	bne.n	8007076 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800704a:	4b2a      	ldr	r3, [pc, #168]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	4b2b      	ldr	r3, [pc, #172]	; (80070fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007050:	4013      	ands	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6892      	ldr	r2, [r2, #8]
 8007056:	0211      	lsls	r1, r2, #8
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6912      	ldr	r2, [r2, #16]
 800705c:	0852      	lsrs	r2, r2, #1
 800705e:	3a01      	subs	r2, #1
 8007060:	0552      	lsls	r2, r2, #21
 8007062:	4311      	orrs	r1, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6852      	ldr	r2, [r2, #4]
 8007068:	3a01      	subs	r2, #1
 800706a:	0112      	lsls	r2, r2, #4
 800706c:	430a      	orrs	r2, r1
 800706e:	4921      	ldr	r1, [pc, #132]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007070:	4313      	orrs	r3, r2
 8007072:	610b      	str	r3, [r1, #16]
 8007074:	e014      	b.n	80070a0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007076:	4b1f      	ldr	r3, [pc, #124]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	4b21      	ldr	r3, [pc, #132]	; (8007100 <RCCEx_PLLSAI1_Config+0x1e4>)
 800707c:	4013      	ands	r3, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6892      	ldr	r2, [r2, #8]
 8007082:	0211      	lsls	r1, r2, #8
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6952      	ldr	r2, [r2, #20]
 8007088:	0852      	lsrs	r2, r2, #1
 800708a:	3a01      	subs	r2, #1
 800708c:	0652      	lsls	r2, r2, #25
 800708e:	4311      	orrs	r1, r2
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6852      	ldr	r2, [r2, #4]
 8007094:	3a01      	subs	r2, #1
 8007096:	0112      	lsls	r2, r2, #4
 8007098:	430a      	orrs	r2, r1
 800709a:	4916      	ldr	r1, [pc, #88]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800709c:	4313      	orrs	r3, r2
 800709e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80070a0:	4b14      	ldr	r3, [pc, #80]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a13      	ldr	r2, [pc, #76]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ac:	f7fc f8e0 	bl	8003270 <HAL_GetTick>
 80070b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070b2:	e009      	b.n	80070c8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070b4:	f7fc f8dc 	bl	8003270 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d902      	bls.n	80070c8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	73fb      	strb	r3, [r7, #15]
          break;
 80070c6:	e005      	b.n	80070d4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0ef      	beq.n	80070b4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	4904      	ldr	r1, [pc, #16]	; (80070f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40021000 	.word	0x40021000
 80070f8:	07ff800f 	.word	0x07ff800f
 80070fc:	ff9f800f 	.word	0xff9f800f
 8007100:	f9ff800f 	.word	0xf9ff800f

08007104 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007112:	4b72      	ldr	r3, [pc, #456]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00e      	beq.n	800713c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800711e:	4b6f      	ldr	r3, [pc, #444]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f003 0203 	and.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d103      	bne.n	8007136 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
       ||
 8007132:	2b00      	cmp	r3, #0
 8007134:	d142      	bne.n	80071bc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	73fb      	strb	r3, [r7, #15]
 800713a:	e03f      	b.n	80071bc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b03      	cmp	r3, #3
 8007142:	d018      	beq.n	8007176 <RCCEx_PLLSAI2_Config+0x72>
 8007144:	2b03      	cmp	r3, #3
 8007146:	d825      	bhi.n	8007194 <RCCEx_PLLSAI2_Config+0x90>
 8007148:	2b01      	cmp	r3, #1
 800714a:	d002      	beq.n	8007152 <RCCEx_PLLSAI2_Config+0x4e>
 800714c:	2b02      	cmp	r3, #2
 800714e:	d009      	beq.n	8007164 <RCCEx_PLLSAI2_Config+0x60>
 8007150:	e020      	b.n	8007194 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007152:	4b62      	ldr	r3, [pc, #392]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11d      	bne.n	800719a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007162:	e01a      	b.n	800719a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007164:	4b5d      	ldr	r3, [pc, #372]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716c:	2b00      	cmp	r3, #0
 800716e:	d116      	bne.n	800719e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007174:	e013      	b.n	800719e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007176:	4b59      	ldr	r3, [pc, #356]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10f      	bne.n	80071a2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007182:	4b56      	ldr	r3, [pc, #344]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007192:	e006      	b.n	80071a2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
      break;
 8007198:	e004      	b.n	80071a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800719a:	bf00      	nop
 800719c:	e002      	b.n	80071a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800719e:	bf00      	nop
 80071a0:	e000      	b.n	80071a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80071a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d108      	bne.n	80071bc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80071aa:	4b4c      	ldr	r3, [pc, #304]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4949      	ldr	r1, [pc, #292]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f040 8086 	bne.w	80072d0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80071c4:	4b45      	ldr	r3, [pc, #276]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a44      	ldr	r2, [pc, #272]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80071ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d0:	f7fc f84e 	bl	8003270 <HAL_GetTick>
 80071d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071d6:	e009      	b.n	80071ec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80071d8:	f7fc f84a 	bl	8003270 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d902      	bls.n	80071ec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	73fb      	strb	r3, [r7, #15]
        break;
 80071ea:	e005      	b.n	80071f8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071ec:	4b3b      	ldr	r3, [pc, #236]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1ef      	bne.n	80071d8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d168      	bne.n	80072d0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d113      	bne.n	800722c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007204:	4b35      	ldr	r3, [pc, #212]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007206:	695a      	ldr	r2, [r3, #20]
 8007208:	4b35      	ldr	r3, [pc, #212]	; (80072e0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800720a:	4013      	ands	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6892      	ldr	r2, [r2, #8]
 8007210:	0211      	lsls	r1, r2, #8
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68d2      	ldr	r2, [r2, #12]
 8007216:	06d2      	lsls	r2, r2, #27
 8007218:	4311      	orrs	r1, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6852      	ldr	r2, [r2, #4]
 800721e:	3a01      	subs	r2, #1
 8007220:	0112      	lsls	r2, r2, #4
 8007222:	430a      	orrs	r2, r1
 8007224:	492d      	ldr	r1, [pc, #180]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007226:	4313      	orrs	r3, r2
 8007228:	614b      	str	r3, [r1, #20]
 800722a:	e02d      	b.n	8007288 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d115      	bne.n	800725e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007232:	4b2a      	ldr	r3, [pc, #168]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007234:	695a      	ldr	r2, [r3, #20]
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007238:	4013      	ands	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6892      	ldr	r2, [r2, #8]
 800723e:	0211      	lsls	r1, r2, #8
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6912      	ldr	r2, [r2, #16]
 8007244:	0852      	lsrs	r2, r2, #1
 8007246:	3a01      	subs	r2, #1
 8007248:	0552      	lsls	r2, r2, #21
 800724a:	4311      	orrs	r1, r2
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	3a01      	subs	r2, #1
 8007252:	0112      	lsls	r2, r2, #4
 8007254:	430a      	orrs	r2, r1
 8007256:	4921      	ldr	r1, [pc, #132]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007258:	4313      	orrs	r3, r2
 800725a:	614b      	str	r3, [r1, #20]
 800725c:	e014      	b.n	8007288 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800725e:	4b1f      	ldr	r3, [pc, #124]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007260:	695a      	ldr	r2, [r3, #20]
 8007262:	4b21      	ldr	r3, [pc, #132]	; (80072e8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6892      	ldr	r2, [r2, #8]
 800726a:	0211      	lsls	r1, r2, #8
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6952      	ldr	r2, [r2, #20]
 8007270:	0852      	lsrs	r2, r2, #1
 8007272:	3a01      	subs	r2, #1
 8007274:	0652      	lsls	r2, r2, #25
 8007276:	4311      	orrs	r1, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6852      	ldr	r2, [r2, #4]
 800727c:	3a01      	subs	r2, #1
 800727e:	0112      	lsls	r2, r2, #4
 8007280:	430a      	orrs	r2, r1
 8007282:	4916      	ldr	r1, [pc, #88]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007284:	4313      	orrs	r3, r2
 8007286:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007288:	4b14      	ldr	r3, [pc, #80]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800728e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007292:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007294:	f7fb ffec 	bl	8003270 <HAL_GetTick>
 8007298:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800729a:	e009      	b.n	80072b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800729c:	f7fb ffe8 	bl	8003270 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d902      	bls.n	80072b0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	73fb      	strb	r3, [r7, #15]
          break;
 80072ae:	e005      	b.n	80072bc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0ef      	beq.n	800729c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80072c4:	695a      	ldr	r2, [r3, #20]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	4904      	ldr	r1, [pc, #16]	; (80072dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40021000 	.word	0x40021000
 80072e0:	07ff800f 	.word	0x07ff800f
 80072e4:	ff9f800f 	.word	0xff9f800f
 80072e8:	f9ff800f 	.word	0xf9ff800f

080072ec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	; 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d10b      	bne.n	8007322 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800730a:	4b7e      	ldr	r3, [pc, #504]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800730c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007310:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007314:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b60      	cmp	r3, #96	; 0x60
 800731a:	d112      	bne.n	8007342 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800731c:	4b7a      	ldr	r3, [pc, #488]	; (8007508 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	e00f      	b.n	8007342 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007328:	d10b      	bne.n	8007342 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800732a:	4b76      	ldr	r3, [pc, #472]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800732c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007334:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800733c:	d101      	bne.n	8007342 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800733e:	4b72      	ldr	r3, [pc, #456]	; (8007508 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007340:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	2b00      	cmp	r3, #0
 8007346:	f040 80d6 	bne.w	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	d003      	beq.n	800735c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800735a:	d13b      	bne.n	80073d4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800735c:	4b69      	ldr	r3, [pc, #420]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007368:	f040 80c4 	bne.w	80074f4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800736c:	4b65      	ldr	r3, [pc, #404]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80bd 	beq.w	80074f4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800737a:	4b62      	ldr	r3, [pc, #392]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	091b      	lsrs	r3, r3, #4
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	3301      	adds	r3, #1
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800738e:	4b5d      	ldr	r3, [pc, #372]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007398:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800739a:	4b5a      	ldr	r3, [pc, #360]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	0edb      	lsrs	r3, r3, #27
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80073ac:	4b55      	ldr	r3, [pc, #340]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80073b8:	2311      	movs	r3, #17
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e001      	b.n	80073c2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80073be:	2307      	movs	r3, #7
 80073c0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	fb03 f202 	mul.w	r2, r3, r2
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80073d2:	e08f      	b.n	80074f4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d13a      	bne.n	8007450 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80073da:	4b4a      	ldr	r3, [pc, #296]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073e6:	f040 8086 	bne.w	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80073ea:	4b46      	ldr	r3, [pc, #280]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d07f      	beq.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80073f6:	4b43      	ldr	r3, [pc, #268]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	091b      	lsrs	r3, r3, #4
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	3301      	adds	r3, #1
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800740a:	4b3e      	ldr	r3, [pc, #248]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007414:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007416:	4b3b      	ldr	r3, [pc, #236]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	0edb      	lsrs	r3, r3, #27
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007428:	4b36      	ldr	r3, [pc, #216]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007434:	2311      	movs	r3, #17
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e001      	b.n	800743e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800743a:	2307      	movs	r3, #7
 800743c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	fb03 f202 	mul.w	r2, r3, r2
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	e052      	b.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	d003      	beq.n	800745e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745c:	d109      	bne.n	8007472 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800745e:	4b29      	ldr	r3, [pc, #164]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746a:	d144      	bne.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800746c:	4b27      	ldr	r3, [pc, #156]	; (800750c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800746e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007470:	e041      	b.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b20      	cmp	r3, #32
 8007476:	d003      	beq.n	8007480 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747e:	d13a      	bne.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007480:	4b20      	ldr	r3, [pc, #128]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748c:	d133      	bne.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800748e:	4b1d      	ldr	r3, [pc, #116]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d02d      	beq.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800749a:	4b1a      	ldr	r3, [pc, #104]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	091b      	lsrs	r3, r3, #4
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	3301      	adds	r3, #1
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80074ae:	4b15      	ldr	r3, [pc, #84]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	0edb      	lsrs	r3, r3, #27
 80074c0:	f003 031f 	and.w	r3, r3, #31
 80074c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80074cc:	4b0d      	ldr	r3, [pc, #52]	; (8007504 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80074d8:	2311      	movs	r3, #17
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	e001      	b.n	80074e2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80074de:	2307      	movs	r3, #7
 80074e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	fb03 f202 	mul.w	r2, r3, r2
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	e000      	b.n	80074f6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80074f4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80074f6:	69fb      	ldr	r3, [r7, #28]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3724      	adds	r7, #36	; 0x24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40021000 	.word	0x40021000
 8007508:	001fff68 	.word	0x001fff68
 800750c:	00f42400 	.word	0x00f42400

08007510 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d904      	bls.n	800752e <HAL_SAI_InitProtocol+0x1e>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	3b03      	subs	r3, #3
 8007528:	2b01      	cmp	r3, #1
 800752a:	d812      	bhi.n	8007552 <HAL_SAI_InitProtocol+0x42>
 800752c:	e008      	b.n	8007540 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f9fb 	bl	8007930 <SAI_InitI2S>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	e00b      	b.n	8007558 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 faa4 	bl	8007a94 <SAI_InitPCM>
 800754c:	4603      	mov	r3, r0
 800754e:	75fb      	strb	r3, [r7, #23]
      break;
 8007550:	e002      	b.n	8007558 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]
      break;
 8007556:	bf00      	nop
  }

  if (status == HAL_OK)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d104      	bne.n	8007568 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 f808 	bl	8007574 <HAL_SAI_Init>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08a      	sub	sp, #40	; 0x28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e1c7      	b.n	8007916 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800758c:	2b01      	cmp	r3, #1
 800758e:	d10e      	bne.n	80075ae <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a81      	ldr	r2, [pc, #516]	; (800779c <HAL_SAI_Init+0x228>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d107      	bne.n	80075aa <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d103      	bne.n	80075aa <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e1b3      	b.n	8007916 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fb fc04 	bl	8002dd0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fae5 	bl	8007b98 <SAI_Disable>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e19e      	b.n	8007916 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d00c      	beq.n	8007602 <HAL_SAI_Init+0x8e>
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d80d      	bhi.n	8007608 <HAL_SAI_Init+0x94>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_SAI_Init+0x82>
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d003      	beq.n	80075fc <HAL_SAI_Init+0x88>
 80075f4:	e008      	b.n	8007608 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80075fa:	e008      	b.n	800760e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80075fc:	2310      	movs	r3, #16
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007600:	e005      	b.n	800760e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007602:	2320      	movs	r3, #32
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007606:	e002      	b.n	800760e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800760c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d81d      	bhi.n	8007652 <HAL_SAI_Init+0xde>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <HAL_SAI_Init+0xa8>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	0800762d 	.word	0x0800762d
 8007620:	08007633 	.word	0x08007633
 8007624:	0800763b 	.word	0x0800763b
 8007628:	08007643 	.word	0x08007643
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
      break;
 8007630:	e012      	b.n	8007658 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007636:	61fb      	str	r3, [r7, #28]
      break;
 8007638:	e00e      	b.n	8007658 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800763a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800763e:	61fb      	str	r3, [r7, #28]
      break;
 8007640:	e00a      	b.n	8007658 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007646:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007650:	e002      	b.n	8007658 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	61fb      	str	r3, [r7, #28]
      break;
 8007656:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a4f      	ldr	r2, [pc, #316]	; (800779c <HAL_SAI_Init+0x228>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_SAI_Init+0xf8>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a4e      	ldr	r2, [pc, #312]	; (80077a0 <HAL_SAI_Init+0x22c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d103      	bne.n	8007674 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800766c:	4a4d      	ldr	r2, [pc, #308]	; (80077a4 <HAL_SAI_Init+0x230>)
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e002      	b.n	800767a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007674:	4a4c      	ldr	r2, [pc, #304]	; (80077a8 <HAL_SAI_Init+0x234>)
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d073      	beq.n	800776a <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a45      	ldr	r2, [pc, #276]	; (800779c <HAL_SAI_Init+0x228>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d004      	beq.n	8007696 <HAL_SAI_Init+0x122>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a43      	ldr	r2, [pc, #268]	; (80077a0 <HAL_SAI_Init+0x22c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d105      	bne.n	80076a2 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007696:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800769a:	f7fe fd0d 	bl	80060b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800769e:	61b8      	str	r0, [r7, #24]
 80076a0:	e004      	b.n	80076ac <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80076a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80076a6:	f7fe fd07 	bl	80060b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80076aa:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076b4:	d120      	bne.n	80076f8 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d102      	bne.n	80076c4 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80076be:	2340      	movs	r3, #64	; 0x40
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	e00a      	b.n	80076da <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d103      	bne.n	80076d4 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80076cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e002      	b.n	80076da <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	4619      	mov	r1, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	fb02 f303 	mul.w	r3, r2, r3
 80076f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e017      	b.n	8007728 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007700:	d101      	bne.n	8007706 <HAL_SAI_Init+0x192>
 8007702:	2302      	movs	r3, #2
 8007704:	e000      	b.n	8007708 <HAL_SAI_Init+0x194>
 8007706:	2301      	movs	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	4619      	mov	r1, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	021b      	lsls	r3, r3, #8
 8007722:	fbb1 f3f3 	udiv	r3, r1, r3
 8007726:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	4a20      	ldr	r2, [pc, #128]	; (80077ac <HAL_SAI_Init+0x238>)
 800772c:	fba2 2303 	umull	r2, r3, r2, r3
 8007730:	08da      	lsrs	r2, r3, #3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <HAL_SAI_Init+0x238>)
 800773a:	fba3 2301 	umull	r2, r3, r3, r1
 800773e:	08da      	lsrs	r2, r3, #3
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	1aca      	subs	r2, r1, r3
 800774a:	2a08      	cmp	r2, #8
 800774c:	d904      	bls.n	8007758 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	2b04      	cmp	r3, #4
 800775e:	d104      	bne.n	800776a <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	085a      	lsrs	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_SAI_Init+0x206>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d109      	bne.n	800778e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_SAI_Init+0x212>
 8007782:	2300      	movs	r3, #0
 8007784:	e001      	b.n	800778a <HAL_SAI_Init+0x216>
 8007786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800778a:	623b      	str	r3, [r7, #32]
 800778c:	e012      	b.n	80077b4 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10c      	bne.n	80077b0 <HAL_SAI_Init+0x23c>
 8007796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800779a:	e00a      	b.n	80077b2 <HAL_SAI_Init+0x23e>
 800779c:	40015404 	.word	0x40015404
 80077a0:	40015424 	.word	0x40015424
 80077a4:	40015400 	.word	0x40015400
 80077a8:	40015800 	.word	0x40015800
 80077ac:	cccccccd 	.word	0xcccccccd
 80077b0:	2300      	movs	r3, #0
 80077b2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b58      	ldr	r3, [pc, #352]	; (8007920 <HAL_SAI_Init+0x3ac>)
 80077c0:	400b      	ands	r3, r1
 80077c2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6819      	ldr	r1, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077d8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077de:	431a      	orrs	r2, r3
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80077ec:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077f8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	051b      	lsls	r3, r3, #20
 8007800:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007806:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800781e:	f023 030f 	bic.w	r3, r3, #15
 8007822:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6859      	ldr	r1, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6899      	ldr	r1, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b35      	ldr	r3, [pc, #212]	; (8007924 <HAL_SAI_Init+0x3b0>)
 800784e:	400b      	ands	r3, r1
 8007850:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6899      	ldr	r1, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007862:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8007868:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800786e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	3b01      	subs	r3, #1
 8007876:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007878:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68d9      	ldr	r1, [r3, #12]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007890:	400b      	ands	r3, r1
 8007892:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68d9      	ldr	r1, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80078aa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	3b01      	subs	r3, #1
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a19      	ldr	r2, [pc, #100]	; (8007928 <HAL_SAI_Init+0x3b4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d119      	bne.n	80078fc <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80078c8:	4b18      	ldr	r3, [pc, #96]	; (800792c <HAL_SAI_Init+0x3b8>)
 80078ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078cc:	4a17      	ldr	r2, [pc, #92]	; (800792c <HAL_SAI_Init+0x3b8>)
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d10e      	bne.n	80078fc <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	3b01      	subs	r3, #1
 80078e8:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80078ea:	4910      	ldr	r1, [pc, #64]	; (800792c <HAL_SAI_Init+0x3b8>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80078f0:	4b0e      	ldr	r3, [pc, #56]	; (800792c <HAL_SAI_Init+0x3b8>)
 80078f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f4:	4a0d      	ldr	r2, [pc, #52]	; (800792c <HAL_SAI_Init+0x3b8>)
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3728      	adds	r7, #40	; 0x28
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	f805c010 	.word	0xf805c010
 8007924:	fff88000 	.word	0xfff88000
 8007928:	40015404 	.word	0x40015404
 800792c:	40015400 	.word	0x40015400

08007930 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <SAI_InitI2S+0x2e>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d103      	bne.n	8007966 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	64da      	str	r2, [r3, #76]	; 0x4c
 8007964:	e002      	b.n	800796c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007972:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800797a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e077      	b.n	8007a86 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d107      	bne.n	80079ac <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80079a8:	661a      	str	r2, [r3, #96]	; 0x60
 80079aa:	e006      	b.n	80079ba <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80079b2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d84f      	bhi.n	8007a60 <SAI_InitI2S+0x130>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <SAI_InitI2S+0x98>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	080079fb 	.word	0x080079fb
 80079d0:	08007a1d 	.word	0x08007a1d
 80079d4:	08007a3f 	.word	0x08007a3f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2280      	movs	r2, #128	; 0x80
 80079dc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	011a      	lsls	r2, r3, #4
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2240      	movs	r2, #64	; 0x40
 80079f6:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80079f8:	e035      	b.n	8007a66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2280      	movs	r2, #128	; 0x80
 80079fe:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	019a      	lsls	r2, r3, #6
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2280      	movs	r2, #128	; 0x80
 8007a18:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007a1a:	e024      	b.n	8007a66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	22c0      	movs	r2, #192	; 0xc0
 8007a20:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	019a      	lsls	r2, r3, #6
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2280      	movs	r2, #128	; 0x80
 8007a3a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007a3c:	e013      	b.n	8007a66 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22e0      	movs	r2, #224	; 0xe0
 8007a42:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	019a      	lsls	r2, r3, #6
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2280      	movs	r2, #128	; 0x80
 8007a5c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007a5e:	e002      	b.n	8007a66 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	75fb      	strb	r3, [r7, #23]
      break;
 8007a64:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d10b      	bne.n	8007a84 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d102      	bne.n	8007a78 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2210      	movs	r2, #16
 8007a76:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d102      	bne.n	8007a84 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2208      	movs	r2, #8
 8007a82:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <SAI_InitPCM+0x2e>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d103      	bne.n	8007aca <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	64da      	str	r2, [r3, #76]	; 0x4c
 8007ac8:	e002      	b.n	8007ad0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007adc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007ae4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007af8:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d103      	bne.n	8007b08 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	655a      	str	r2, [r3, #84]	; 0x54
 8007b06:	e002      	b.n	8007b0e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	220d      	movs	r2, #13
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d837      	bhi.n	8007b84 <SAI_InitPCM+0xf0>
 8007b14:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <SAI_InitPCM+0x88>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b43 	.word	0x08007b43
 8007b24:	08007b59 	.word	0x08007b59
 8007b28:	08007b6f 	.word	0x08007b6f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2280      	movs	r2, #128	; 0x80
 8007b30:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	011a      	lsls	r2, r3, #4
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2240      	movs	r2, #64	; 0x40
 8007b3e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007b40:	e023      	b.n	8007b8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2280      	movs	r2, #128	; 0x80
 8007b46:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007b56:	e018      	b.n	8007b8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	22c0      	movs	r2, #192	; 0xc0
 8007b5c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2280      	movs	r2, #128	; 0x80
 8007b6a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007b6c:	e00d      	b.n	8007b8a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	22e0      	movs	r2, #224	; 0xe0
 8007b72:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2280      	movs	r2, #128	; 0x80
 8007b80:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007b82:	e002      	b.n	8007b8a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	75fb      	strb	r3, [r7, #23]
      break;
 8007b88:	bf00      	nop
  }

  return status;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007ba0:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <SAI_Disable+0x6c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <SAI_Disable+0x70>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	0b1b      	lsrs	r3, r3, #12
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007bc2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	72fb      	strb	r3, [r7, #11]
      break;
 8007bde:	e009      	b.n	8007bf4 <SAI_Disable+0x5c>
    }
    count--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e7      	bne.n	8007bc4 <SAI_Disable+0x2c>

  return status;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20000000 	.word	0x20000000
 8007c08:	95cbec1b 	.word	0x95cbec1b

08007c0c <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e0aa      	b.n	8007d74 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fa fd46 	bl	80026c0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c56:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c66:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695a      	ldr	r2, [r3, #20]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007c76:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c80:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c90:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d012      	beq.n	8007cc0 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d107      	bne.n	8007cb2 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cae:	609a      	str	r2, [r3, #8]
 8007cb0:	e006      	b.n	8007cc0 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007cbe:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d104      	bne.n	8007cd2 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce4:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695a      	ldr	r2, [r3, #20]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1a      	ldr	r2, [r3, #32]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d0e:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007d20:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007d22:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d2c:	d110      	bne.n	8007d50 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d3e:	d107      	bne.n	8007d50 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d4e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007d92:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d9c:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007d9e:	2180      	movs	r1, #128	; 0x80
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f805 	bl	8007db0 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dce:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dd6:	2b38      	cmp	r3, #56	; 0x38
 8007dd8:	d103      	bne.n	8007de2 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007de0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007de8:	2bf2      	cmp	r3, #242	; 0xf2
 8007dea:	d103      	bne.n	8007df4 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007df2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8007dfa:	2bd4      	cmp	r3, #212	; 0xd4
 8007dfc:	d103      	bne.n	8007e06 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007e04:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6819      	ldr	r1, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	601a      	str	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e095      	b.n	8007f60 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d108      	bne.n	8007e4e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e44:	d009      	beq.n	8007e5a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	61da      	str	r2, [r3, #28]
 8007e4c:	e005      	b.n	8007e5a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d106      	bne.n	8007e7a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7fa fdb1 	bl	80029dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e90:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e9a:	d902      	bls.n	8007ea2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e002      	b.n	8007ea8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ea6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007eb0:	d007      	beq.n	8007ec2 <HAL_SPI_Init+0xa0>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007eba:	d002      	beq.n	8007ec2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	ea42 0103 	orr.w	r1, r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	f003 0204 	and.w	r2, r3, #4
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	431a      	orrs	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f3e:	ea42 0103 	orr.w	r1, r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_SPI_Transmit+0x22>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e15f      	b.n	800824a <HAL_SPI_Transmit+0x2e2>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f92:	f7fb f96d 	bl	8003270 <HAL_GetTick>
 8007f96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d002      	beq.n	8007fae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fac:	e148      	b.n	8008240 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_SPI_Transmit+0x52>
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fbe:	e13f      	b.n	8008240 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	88fa      	ldrh	r2, [r7, #6]
 8007fde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800800a:	d10f      	bne.n	800802c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800801a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800802a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008036:	2b40      	cmp	r3, #64	; 0x40
 8008038:	d007      	beq.n	800804a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008052:	d94f      	bls.n	80080f4 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <HAL_SPI_Transmit+0xfa>
 800805c:	8afb      	ldrh	r3, [r7, #22]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d142      	bne.n	80080e8 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	881a      	ldrh	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	1c9a      	adds	r2, r3, #2
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008086:	e02f      	b.n	80080e8 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d112      	bne.n	80080bc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	881a      	ldrh	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	1c9a      	adds	r2, r3, #2
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080ba:	e015      	b.n	80080e8 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080bc:	f7fb f8d8 	bl	8003270 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d803      	bhi.n	80080d4 <HAL_SPI_Transmit+0x16c>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d2:	d102      	bne.n	80080da <HAL_SPI_Transmit+0x172>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80080e6:	e0ab      	b.n	8008240 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1ca      	bne.n	8008088 <HAL_SPI_Transmit+0x120>
 80080f2:	e080      	b.n	80081f6 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <HAL_SPI_Transmit+0x19a>
 80080fc:	8afb      	ldrh	r3, [r7, #22]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d174      	bne.n	80081ec <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	2b01      	cmp	r3, #1
 800810a:	d912      	bls.n	8008132 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	881a      	ldrh	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	1c9a      	adds	r2, r3, #2
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b02      	subs	r3, #2
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008130:	e05c      	b.n	80081ec <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	330c      	adds	r3, #12
 800813c:	7812      	ldrb	r2, [r2, #0]
 800813e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008158:	e048      	b.n	80081ec <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b02      	cmp	r3, #2
 8008166:	d12b      	bne.n	80081c0 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b01      	cmp	r3, #1
 8008170:	d912      	bls.n	8008198 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	881a      	ldrh	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	1c9a      	adds	r2, r3, #2
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b02      	subs	r3, #2
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008196:	e029      	b.n	80081ec <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081be:	e015      	b.n	80081ec <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c0:	f7fb f856 	bl	8003270 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d803      	bhi.n	80081d8 <HAL_SPI_Transmit+0x270>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d102      	bne.n	80081de <HAL_SPI_Transmit+0x276>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80081ea:	e029      	b.n	8008240 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1b1      	bne.n	800815a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f948 	bl	8008490 <SPI_EndRxTxTransaction>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2220      	movs	r2, #32
 800820a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10a      	bne.n	800822a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008214:	2300      	movs	r3, #0
 8008216:	613b      	str	r3, [r7, #16]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	613b      	str	r3, [r7, #16]
 8008228:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	77fb      	strb	r3, [r7, #31]
 8008236:	e003      	b.n	8008240 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008248:	7ffb      	ldrb	r3, [r7, #31]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	4613      	mov	r3, r2
 8008262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008264:	f7fb f804 	bl	8003270 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4413      	add	r3, r2
 8008272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008274:	f7fa fffc 	bl	8003270 <HAL_GetTick>
 8008278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800827a:	4b39      	ldr	r3, [pc, #228]	; (8008360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	015b      	lsls	r3, r3, #5
 8008280:	0d1b      	lsrs	r3, r3, #20
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	fb02 f303 	mul.w	r3, r2, r3
 8008288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800828a:	e054      	b.n	8008336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d050      	beq.n	8008336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008294:	f7fa ffec 	bl	8003270 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d902      	bls.n	80082aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d13d      	bne.n	8008326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082c2:	d111      	bne.n	80082e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082cc:	d004      	beq.n	80082d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d6:	d107      	bne.n	80082e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f0:	d10f      	bne.n	8008312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e017      	b.n	8008356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	3b01      	subs	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4013      	ands	r3, r2
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	429a      	cmp	r2, r3
 8008344:	bf0c      	ite	eq
 8008346:	2301      	moveq	r3, #1
 8008348:	2300      	movne	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	461a      	mov	r2, r3
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	429a      	cmp	r2, r3
 8008352:	d19b      	bne.n	800828c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20000000 	.word	0x20000000

08008364 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	; 0x28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008376:	f7fa ff7b 	bl	8003270 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	4413      	add	r3, r2
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008386:	f7fa ff73 	bl	8003270 <HAL_GetTick>
 800838a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	330c      	adds	r3, #12
 8008392:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008394:	4b3d      	ldr	r3, [pc, #244]	; (800848c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	00da      	lsls	r2, r3, #3
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	0d1b      	lsrs	r3, r3, #20
 80083a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a6:	fb02 f303 	mul.w	r3, r2, r3
 80083aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80083ac:	e060      	b.n	8008470 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083b4:	d107      	bne.n	80083c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083cc:	d050      	beq.n	8008470 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083ce:	f7fa ff4f 	bl	8003270 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083da:	429a      	cmp	r2, r3
 80083dc:	d902      	bls.n	80083e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d13d      	bne.n	8008460 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083fc:	d111      	bne.n	8008422 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008406:	d004      	beq.n	8008412 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008410:	d107      	bne.n	8008422 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008420:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842a:	d10f      	bne.n	800844c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800844a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e010      	b.n	8008482 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	3b01      	subs	r3, #1
 800846e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4013      	ands	r3, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d196      	bne.n	80083ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3728      	adds	r7, #40	; 0x28
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000000 	.word	0x20000000

08008490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af02      	add	r7, sp, #8
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff ff5b 	bl	8008364 <SPI_WaitFifoStateUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b8:	f043 0220 	orr.w	r2, r3, #32
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e027      	b.n	8008514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	2180      	movs	r1, #128	; 0x80
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7ff fec0 	bl	8008254 <SPI_WaitFlagStateUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084de:	f043 0220 	orr.w	r2, r3, #32
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e014      	b.n	8008514 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff ff34 	bl	8008364 <SPI_WaitFifoStateUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008506:	f043 0220 	orr.w	r2, r3, #32
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e000      	b.n	8008514 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e049      	b.n	80085c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d106      	bne.n	8008548 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fa fa8e 	bl	8002a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3304      	adds	r3, #4
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f000 f94a 	bl	80087f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d101      	bne.n	80085ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085e6:	2302      	movs	r3, #2
 80085e8:	e0ff      	b.n	80087ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b14      	cmp	r3, #20
 80085f6:	f200 80f0 	bhi.w	80087da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80085fa:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008655 	.word	0x08008655
 8008604:	080087db 	.word	0x080087db
 8008608:	080087db 	.word	0x080087db
 800860c:	080087db 	.word	0x080087db
 8008610:	08008695 	.word	0x08008695
 8008614:	080087db 	.word	0x080087db
 8008618:	080087db 	.word	0x080087db
 800861c:	080087db 	.word	0x080087db
 8008620:	080086d7 	.word	0x080086d7
 8008624:	080087db 	.word	0x080087db
 8008628:	080087db 	.word	0x080087db
 800862c:	080087db 	.word	0x080087db
 8008630:	08008717 	.word	0x08008717
 8008634:	080087db 	.word	0x080087db
 8008638:	080087db 	.word	0x080087db
 800863c:	080087db 	.word	0x080087db
 8008640:	08008759 	.word	0x08008759
 8008644:	080087db 	.word	0x080087db
 8008648:	080087db 	.word	0x080087db
 800864c:	080087db 	.word	0x080087db
 8008650:	08008799 	.word	0x08008799
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68b9      	ldr	r1, [r7, #8]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f964 	bl	8008928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0208 	orr.w	r2, r2, #8
 800866e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699a      	ldr	r2, [r3, #24]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0204 	bic.w	r2, r2, #4
 800867e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6999      	ldr	r1, [r3, #24]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	619a      	str	r2, [r3, #24]
      break;
 8008692:	e0a5      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f9d4 	bl	8008a48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6999      	ldr	r1, [r3, #24]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	021a      	lsls	r2, r3, #8
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	619a      	str	r2, [r3, #24]
      break;
 80086d4:	e084      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68b9      	ldr	r1, [r7, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fa3d 	bl	8008b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69da      	ldr	r2, [r3, #28]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0208 	orr.w	r2, r2, #8
 80086f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69da      	ldr	r2, [r3, #28]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0204 	bic.w	r2, r2, #4
 8008700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69d9      	ldr	r1, [r3, #28]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	61da      	str	r2, [r3, #28]
      break;
 8008714:	e064      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	4618      	mov	r0, r3
 800871e:	f000 faa5 	bl	8008c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69da      	ldr	r2, [r3, #28]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69d9      	ldr	r1, [r3, #28]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	021a      	lsls	r2, r3, #8
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	61da      	str	r2, [r3, #28]
      break;
 8008756:	e043      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	f000 faee 	bl	8008d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0208 	orr.w	r2, r2, #8
 8008772:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0204 	bic.w	r2, r2, #4
 8008782:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	691a      	ldr	r2, [r3, #16]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008796:	e023      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fb32 	bl	8008e08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	021a      	lsls	r2, r3, #8
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087d8:	e002      	b.n	80087e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
      break;
 80087de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop

080087f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a40      	ldr	r2, [pc, #256]	; (8008908 <TIM_Base_SetConfig+0x114>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d013      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008812:	d00f      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a3d      	ldr	r2, [pc, #244]	; (800890c <TIM_Base_SetConfig+0x118>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00b      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a3c      	ldr	r2, [pc, #240]	; (8008910 <TIM_Base_SetConfig+0x11c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d007      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a3b      	ldr	r2, [pc, #236]	; (8008914 <TIM_Base_SetConfig+0x120>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a3a      	ldr	r2, [pc, #232]	; (8008918 <TIM_Base_SetConfig+0x124>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d108      	bne.n	8008846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a2f      	ldr	r2, [pc, #188]	; (8008908 <TIM_Base_SetConfig+0x114>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d01f      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008854:	d01b      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a2c      	ldr	r2, [pc, #176]	; (800890c <TIM_Base_SetConfig+0x118>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d017      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a2b      	ldr	r2, [pc, #172]	; (8008910 <TIM_Base_SetConfig+0x11c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d013      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a2a      	ldr	r2, [pc, #168]	; (8008914 <TIM_Base_SetConfig+0x120>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d00f      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a29      	ldr	r2, [pc, #164]	; (8008918 <TIM_Base_SetConfig+0x124>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00b      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a28      	ldr	r2, [pc, #160]	; (800891c <TIM_Base_SetConfig+0x128>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d007      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a27      	ldr	r2, [pc, #156]	; (8008920 <TIM_Base_SetConfig+0x12c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d003      	beq.n	800888e <TIM_Base_SetConfig+0x9a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a26      	ldr	r2, [pc, #152]	; (8008924 <TIM_Base_SetConfig+0x130>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d108      	bne.n	80088a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	4313      	orrs	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a10      	ldr	r2, [pc, #64]	; (8008908 <TIM_Base_SetConfig+0x114>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d00f      	beq.n	80088ec <TIM_Base_SetConfig+0xf8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a12      	ldr	r2, [pc, #72]	; (8008918 <TIM_Base_SetConfig+0x124>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00b      	beq.n	80088ec <TIM_Base_SetConfig+0xf8>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a11      	ldr	r2, [pc, #68]	; (800891c <TIM_Base_SetConfig+0x128>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d007      	beq.n	80088ec <TIM_Base_SetConfig+0xf8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a10      	ldr	r2, [pc, #64]	; (8008920 <TIM_Base_SetConfig+0x12c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_Base_SetConfig+0xf8>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a0f      	ldr	r2, [pc, #60]	; (8008924 <TIM_Base_SetConfig+0x130>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d103      	bne.n	80088f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	615a      	str	r2, [r3, #20]
}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	40012c00 	.word	0x40012c00
 800890c:	40000400 	.word	0x40000400
 8008910:	40000800 	.word	0x40000800
 8008914:	40000c00 	.word	0x40000c00
 8008918:	40013400 	.word	0x40013400
 800891c:	40014000 	.word	0x40014000
 8008920:	40014400 	.word	0x40014400
 8008924:	40014800 	.word	0x40014800

08008928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f023 0201 	bic.w	r2, r3, #1
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f023 0302 	bic.w	r3, r3, #2
 8008974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a2c      	ldr	r2, [pc, #176]	; (8008a34 <TIM_OC1_SetConfig+0x10c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00f      	beq.n	80089a8 <TIM_OC1_SetConfig+0x80>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a2b      	ldr	r2, [pc, #172]	; (8008a38 <TIM_OC1_SetConfig+0x110>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00b      	beq.n	80089a8 <TIM_OC1_SetConfig+0x80>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a2a      	ldr	r2, [pc, #168]	; (8008a3c <TIM_OC1_SetConfig+0x114>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d007      	beq.n	80089a8 <TIM_OC1_SetConfig+0x80>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a29      	ldr	r2, [pc, #164]	; (8008a40 <TIM_OC1_SetConfig+0x118>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <TIM_OC1_SetConfig+0x80>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a28      	ldr	r2, [pc, #160]	; (8008a44 <TIM_OC1_SetConfig+0x11c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d10c      	bne.n	80089c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f023 0308 	bic.w	r3, r3, #8
 80089ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f023 0304 	bic.w	r3, r3, #4
 80089c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a1b      	ldr	r2, [pc, #108]	; (8008a34 <TIM_OC1_SetConfig+0x10c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00f      	beq.n	80089ea <TIM_OC1_SetConfig+0xc2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a1a      	ldr	r2, [pc, #104]	; (8008a38 <TIM_OC1_SetConfig+0x110>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00b      	beq.n	80089ea <TIM_OC1_SetConfig+0xc2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <TIM_OC1_SetConfig+0x114>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d007      	beq.n	80089ea <TIM_OC1_SetConfig+0xc2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a18      	ldr	r2, [pc, #96]	; (8008a40 <TIM_OC1_SetConfig+0x118>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d003      	beq.n	80089ea <TIM_OC1_SetConfig+0xc2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a17      	ldr	r2, [pc, #92]	; (8008a44 <TIM_OC1_SetConfig+0x11c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d111      	bne.n	8008a0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	621a      	str	r2, [r3, #32]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	40012c00 	.word	0x40012c00
 8008a38:	40013400 	.word	0x40013400
 8008a3c:	40014000 	.word	0x40014000
 8008a40:	40014400 	.word	0x40014400
 8008a44:	40014800 	.word	0x40014800

08008a48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f023 0210 	bic.w	r2, r3, #16
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f023 0320 	bic.w	r3, r3, #32
 8008a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a28      	ldr	r2, [pc, #160]	; (8008b48 <TIM_OC2_SetConfig+0x100>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d003      	beq.n	8008ab4 <TIM_OC2_SetConfig+0x6c>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a27      	ldr	r2, [pc, #156]	; (8008b4c <TIM_OC2_SetConfig+0x104>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d10d      	bne.n	8008ad0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a1d      	ldr	r2, [pc, #116]	; (8008b48 <TIM_OC2_SetConfig+0x100>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00f      	beq.n	8008af8 <TIM_OC2_SetConfig+0xb0>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a1c      	ldr	r2, [pc, #112]	; (8008b4c <TIM_OC2_SetConfig+0x104>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00b      	beq.n	8008af8 <TIM_OC2_SetConfig+0xb0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <TIM_OC2_SetConfig+0x108>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d007      	beq.n	8008af8 <TIM_OC2_SetConfig+0xb0>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a1a      	ldr	r2, [pc, #104]	; (8008b54 <TIM_OC2_SetConfig+0x10c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d003      	beq.n	8008af8 <TIM_OC2_SetConfig+0xb0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a19      	ldr	r2, [pc, #100]	; (8008b58 <TIM_OC2_SetConfig+0x110>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d113      	bne.n	8008b20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40012c00 	.word	0x40012c00
 8008b4c:	40013400 	.word	0x40013400
 8008b50:	40014000 	.word	0x40014000
 8008b54:	40014400 	.word	0x40014400
 8008b58:	40014800 	.word	0x40014800

08008b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	021b      	lsls	r3, r3, #8
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a27      	ldr	r2, [pc, #156]	; (8008c58 <TIM_OC3_SetConfig+0xfc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_OC3_SetConfig+0x6a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a26      	ldr	r2, [pc, #152]	; (8008c5c <TIM_OC3_SetConfig+0x100>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d10d      	bne.n	8008be2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a1c      	ldr	r2, [pc, #112]	; (8008c58 <TIM_OC3_SetConfig+0xfc>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00f      	beq.n	8008c0a <TIM_OC3_SetConfig+0xae>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a1b      	ldr	r2, [pc, #108]	; (8008c5c <TIM_OC3_SetConfig+0x100>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00b      	beq.n	8008c0a <TIM_OC3_SetConfig+0xae>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a1a      	ldr	r2, [pc, #104]	; (8008c60 <TIM_OC3_SetConfig+0x104>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d007      	beq.n	8008c0a <TIM_OC3_SetConfig+0xae>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a19      	ldr	r2, [pc, #100]	; (8008c64 <TIM_OC3_SetConfig+0x108>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d003      	beq.n	8008c0a <TIM_OC3_SetConfig+0xae>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <TIM_OC3_SetConfig+0x10c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d113      	bne.n	8008c32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	621a      	str	r2, [r3, #32]
}
 8008c4c:	bf00      	nop
 8008c4e:	371c      	adds	r7, #28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	40012c00 	.word	0x40012c00
 8008c5c:	40013400 	.word	0x40013400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40014400 	.word	0x40014400
 8008c68:	40014800 	.word	0x40014800

08008c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	031b      	lsls	r3, r3, #12
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a18      	ldr	r2, [pc, #96]	; (8008d2c <TIM_OC4_SetConfig+0xc0>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00f      	beq.n	8008cf0 <TIM_OC4_SetConfig+0x84>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a17      	ldr	r2, [pc, #92]	; (8008d30 <TIM_OC4_SetConfig+0xc4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_OC4_SetConfig+0x84>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a16      	ldr	r2, [pc, #88]	; (8008d34 <TIM_OC4_SetConfig+0xc8>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_OC4_SetConfig+0x84>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <TIM_OC4_SetConfig+0xcc>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_OC4_SetConfig+0x84>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a14      	ldr	r2, [pc, #80]	; (8008d3c <TIM_OC4_SetConfig+0xd0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d109      	bne.n	8008d04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	019b      	lsls	r3, r3, #6
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40012c00 	.word	0x40012c00
 8008d30:	40013400 	.word	0x40013400
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40014400 	.word	0x40014400
 8008d3c:	40014800 	.word	0x40014800

08008d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	041b      	lsls	r3, r3, #16
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a17      	ldr	r2, [pc, #92]	; (8008df4 <TIM_OC5_SetConfig+0xb4>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00f      	beq.n	8008dba <TIM_OC5_SetConfig+0x7a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <TIM_OC5_SetConfig+0xb8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00b      	beq.n	8008dba <TIM_OC5_SetConfig+0x7a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a15      	ldr	r2, [pc, #84]	; (8008dfc <TIM_OC5_SetConfig+0xbc>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d007      	beq.n	8008dba <TIM_OC5_SetConfig+0x7a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a14      	ldr	r2, [pc, #80]	; (8008e00 <TIM_OC5_SetConfig+0xc0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d003      	beq.n	8008dba <TIM_OC5_SetConfig+0x7a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a13      	ldr	r2, [pc, #76]	; (8008e04 <TIM_OC5_SetConfig+0xc4>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d109      	bne.n	8008dce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	021b      	lsls	r3, r3, #8
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	621a      	str	r2, [r3, #32]
}
 8008de8:	bf00      	nop
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	40012c00 	.word	0x40012c00
 8008df8:	40013400 	.word	0x40013400
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	40014400 	.word	0x40014400
 8008e04:	40014800 	.word	0x40014800

08008e08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	051b      	lsls	r3, r3, #20
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a18      	ldr	r2, [pc, #96]	; (8008ec0 <TIM_OC6_SetConfig+0xb8>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00f      	beq.n	8008e84 <TIM_OC6_SetConfig+0x7c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a17      	ldr	r2, [pc, #92]	; (8008ec4 <TIM_OC6_SetConfig+0xbc>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00b      	beq.n	8008e84 <TIM_OC6_SetConfig+0x7c>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <TIM_OC6_SetConfig+0xc0>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d007      	beq.n	8008e84 <TIM_OC6_SetConfig+0x7c>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <TIM_OC6_SetConfig+0xc4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d003      	beq.n	8008e84 <TIM_OC6_SetConfig+0x7c>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a14      	ldr	r2, [pc, #80]	; (8008ed0 <TIM_OC6_SetConfig+0xc8>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d109      	bne.n	8008e98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	029b      	lsls	r3, r3, #10
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	621a      	str	r2, [r3, #32]
}
 8008eb2:	bf00      	nop
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40012c00 	.word	0x40012c00
 8008ec4:	40013400 	.word	0x40013400
 8008ec8:	40014000 	.word	0x40014000
 8008ecc:	40014400 	.word	0x40014400
 8008ed0:	40014800 	.word	0x40014800

08008ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d101      	bne.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	e068      	b.n	8008fbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a2e      	ldr	r2, [pc, #184]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d004      	beq.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a2d      	ldr	r2, [pc, #180]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d108      	bne.n	8008f32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a1e      	ldr	r2, [pc, #120]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d01d      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5e:	d018      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a1b      	ldr	r2, [pc, #108]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1a      	ldr	r2, [pc, #104]	; (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00e      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a13      	ldr	r2, [pc, #76]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a14      	ldr	r2, [pc, #80]	; (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d10c      	bne.n	8008fac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40012c00 	.word	0x40012c00
 8008fd0:	40013400 	.word	0x40013400
 8008fd4:	40000400 	.word	0x40000400
 8008fd8:	40000800 	.word	0x40000800
 8008fdc:	40000c00 	.word	0x40000c00
 8008fe0:	40014000 	.word	0x40014000

08008fe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e065      	b.n	80090cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	4313      	orrs	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	041b      	lsls	r3, r3, #16
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a16      	ldr	r2, [pc, #88]	; (80090d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a14      	ldr	r2, [pc, #80]	; (80090dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d115      	bne.n	80090ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	051b      	lsls	r3, r3, #20
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	40012c00 	.word	0x40012c00
 80090dc:	40013400 	.word	0x40013400

080090e0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80090e0:	b480      	push	{r7}
 80090e2:	b08b      	sub	sp, #44	; 0x2c
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_TIMEx_ConfigBreakInput+0x20>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e0af      	b.n	8009260 <HAL_TIMEx_ConfigBreakInput+0x180>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3b01      	subs	r3, #1
 800910e:	2b07      	cmp	r3, #7
 8009110:	d83a      	bhi.n	8009188 <HAL_TIMEx_ConfigBreakInput+0xa8>
 8009112:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	08009139 	.word	0x08009139
 800911c:	0800914d 	.word	0x0800914d
 8009120:	08009189 	.word	0x08009189
 8009124:	08009161 	.word	0x08009161
 8009128:	08009189 	.word	0x08009189
 800912c:	08009189 	.word	0x08009189
 8009130:	08009189 	.word	0x08009189
 8009134:	08009175 	.word	0x08009175
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 8009138:	2301      	movs	r3, #1
 800913a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 8009140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009144:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 8009146:	2309      	movs	r3, #9
 8009148:	613b      	str	r3, [r7, #16]
      break;
 800914a:	e026      	b.n	800919a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800914c:	2302      	movs	r3, #2
 800914e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 8009150:	2301      	movs	r3, #1
 8009152:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 8009154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009158:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800915a:	230a      	movs	r3, #10
 800915c:	613b      	str	r3, [r7, #16]
      break;
 800915e:	e01c      	b.n	800919a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 8009160:	2304      	movs	r3, #4
 8009162:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8009164:	2302      	movs	r3, #2
 8009166:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8009168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800916c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800916e:	230b      	movs	r3, #11
 8009170:	613b      	str	r3, [r7, #16]
      break;
 8009172:	e012      	b.n	800919a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8009174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009178:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800917a:	2308      	movs	r3, #8
 800917c:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	613b      	str	r3, [r7, #16]
      break;
 8009186:	e008      	b.n	800919a <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800918c:	2300      	movs	r3, #0
 800918e:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	613b      	str	r3, [r7, #16]
      break;
 8009198:	bf00      	nop
    }
  }

  switch (BreakInput)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d003      	beq.n	80091a8 <HAL_TIMEx_ConfigBreakInput+0xc8>
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d029      	beq.n	80091fa <HAL_TIMEx_ConfigBreakInput+0x11a>
 80091a6:	e051      	b.n	800924c <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ae:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	43db      	mvns	r3, r3
 80091b4:	6a3a      	ldr	r2, [r7, #32]
 80091b6:	4013      	ands	r3, r2
 80091b8:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	409a      	lsls	r2, r3
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	4013      	ands	r3, r2
 80091c6:	6a3a      	ldr	r2, [r7, #32]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d00d      	beq.n	80091f0 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	43db      	mvns	r3, r3
 80091d8:	6a3a      	ldr	r2, [r7, #32]
 80091da:	4013      	ands	r3, r2
 80091dc:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	409a      	lsls	r2, r3
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	4013      	ands	r3, r2
 80091ea:	6a3a      	ldr	r2, [r7, #32]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6a3a      	ldr	r2, [r7, #32]
 80091f6:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80091f8:	e02c      	b.n	8009254 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009200:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	43db      	mvns	r3, r3
 8009206:	6a3a      	ldr	r2, [r7, #32]
 8009208:	4013      	ands	r3, r2
 800920a:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	409a      	lsls	r2, r3
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4013      	ands	r3, r2
 8009218:	6a3a      	ldr	r2, [r7, #32]
 800921a:	4313      	orrs	r3, r2
 800921c:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b08      	cmp	r3, #8
 8009224:	d00d      	beq.n	8009242 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	43db      	mvns	r3, r3
 800922a:	6a3a      	ldr	r2, [r7, #32]
 800922c:	4013      	ands	r3, r2
 800922e:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	409a      	lsls	r2, r3
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	4013      	ands	r3, r2
 800923c:	6a3a      	ldr	r2, [r7, #32]
 800923e:	4313      	orrs	r3, r2
 8009240:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6a3a      	ldr	r2, [r7, #32]
 8009248:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800924a:	e003      	b.n	8009254 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009252:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800925c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009260:	4618      	mov	r0, r3
 8009262:	372c      	adds	r7, #44	; 0x2c
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e042      	b.n	8009304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7f9 fab9 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2224      	movs	r2, #36	; 0x24
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f022 0201 	bic.w	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fbb4 	bl	8009a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f8b5 	bl	800942c <UART_SetConfig>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e01b      	b.n	8009304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0201 	orr.w	r2, r2, #1
 80092fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fc33 	bl	8009b68 <UART_CheckIdleState>
 8009302:	4603      	mov	r3, r0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08a      	sub	sp, #40	; 0x28
 8009310:	af02      	add	r7, sp, #8
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4613      	mov	r3, r2
 800931a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009322:	2b20      	cmp	r3, #32
 8009324:	d17c      	bne.n	8009420 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <HAL_UART_Transmit+0x26>
 800932c:	88fb      	ldrh	r3, [r7, #6]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e075      	b.n	8009422 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2221      	movs	r2, #33	; 0x21
 8009342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009346:	f7f9 ff93 	bl	8003270 <HAL_GetTick>
 800934a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	88fa      	ldrh	r2, [r7, #6]
 8009350:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	88fa      	ldrh	r2, [r7, #6]
 8009358:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009364:	d108      	bne.n	8009378 <HAL_UART_Transmit+0x6c>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d104      	bne.n	8009378 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	61bb      	str	r3, [r7, #24]
 8009376:	e003      	b.n	8009380 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009380:	e031      	b.n	80093e6 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2200      	movs	r2, #0
 800938a:	2180      	movs	r1, #128	; 0x80
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 fc95 	bl	8009cbc <UART_WaitOnFlagUntilTimeout>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e03e      	b.n	8009422 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10b      	bne.n	80093c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	881a      	ldrh	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093b6:	b292      	uxth	r2, r2
 80093b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	3302      	adds	r3, #2
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	e008      	b.n	80093d4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	781a      	ldrb	r2, [r3, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	b292      	uxth	r2, r2
 80093cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	3301      	adds	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093da:	b29b      	uxth	r3, r3
 80093dc:	3b01      	subs	r3, #1
 80093de:	b29a      	uxth	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1c7      	bne.n	8009382 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2200      	movs	r2, #0
 80093fa:	2140      	movs	r1, #64	; 0x40
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 fc5d 	bl	8009cbc <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2220      	movs	r2, #32
 800940c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e006      	b.n	8009422 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	e000      	b.n	8009422 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8009420:	2302      	movs	r3, #2
  }
}
 8009422:	4618      	mov	r0, r3
 8009424:	3720      	adds	r7, #32
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800942c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009430:	b08c      	sub	sp, #48	; 0x30
 8009432:	af00      	add	r7, sp, #0
 8009434:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	431a      	orrs	r2, r3
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	431a      	orrs	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	4313      	orrs	r3, r2
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4baa      	ldr	r3, [pc, #680]	; (8009704 <UART_SetConfig+0x2d8>)
 800945c:	4013      	ands	r3, r2
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	6812      	ldr	r2, [r2, #0]
 8009462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009464:	430b      	orrs	r3, r1
 8009466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a9f      	ldr	r2, [pc, #636]	; (8009708 <UART_SetConfig+0x2dc>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d004      	beq.n	8009498 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009494:	4313      	orrs	r3, r2
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80094a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	6812      	ldr	r2, [r2, #0]
 80094aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ac:	430b      	orrs	r3, r1
 80094ae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	f023 010f 	bic.w	r1, r3, #15
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a90      	ldr	r2, [pc, #576]	; (800970c <UART_SetConfig+0x2e0>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d125      	bne.n	800951c <UART_SetConfig+0xf0>
 80094d0:	4b8f      	ldr	r3, [pc, #572]	; (8009710 <UART_SetConfig+0x2e4>)
 80094d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d81a      	bhi.n	8009514 <UART_SetConfig+0xe8>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <UART_SetConfig+0xb8>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	080094f5 	.word	0x080094f5
 80094e8:	08009505 	.word	0x08009505
 80094ec:	080094fd 	.word	0x080094fd
 80094f0:	0800950d 	.word	0x0800950d
 80094f4:	2301      	movs	r3, #1
 80094f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094fa:	e116      	b.n	800972a <UART_SetConfig+0x2fe>
 80094fc:	2302      	movs	r3, #2
 80094fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009502:	e112      	b.n	800972a <UART_SetConfig+0x2fe>
 8009504:	2304      	movs	r3, #4
 8009506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800950a:	e10e      	b.n	800972a <UART_SetConfig+0x2fe>
 800950c:	2308      	movs	r3, #8
 800950e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009512:	e10a      	b.n	800972a <UART_SetConfig+0x2fe>
 8009514:	2310      	movs	r3, #16
 8009516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800951a:	e106      	b.n	800972a <UART_SetConfig+0x2fe>
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a7c      	ldr	r2, [pc, #496]	; (8009714 <UART_SetConfig+0x2e8>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d138      	bne.n	8009598 <UART_SetConfig+0x16c>
 8009526:	4b7a      	ldr	r3, [pc, #488]	; (8009710 <UART_SetConfig+0x2e4>)
 8009528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952c:	f003 030c 	and.w	r3, r3, #12
 8009530:	2b0c      	cmp	r3, #12
 8009532:	d82d      	bhi.n	8009590 <UART_SetConfig+0x164>
 8009534:	a201      	add	r2, pc, #4	; (adr r2, 800953c <UART_SetConfig+0x110>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	08009571 	.word	0x08009571
 8009540:	08009591 	.word	0x08009591
 8009544:	08009591 	.word	0x08009591
 8009548:	08009591 	.word	0x08009591
 800954c:	08009581 	.word	0x08009581
 8009550:	08009591 	.word	0x08009591
 8009554:	08009591 	.word	0x08009591
 8009558:	08009591 	.word	0x08009591
 800955c:	08009579 	.word	0x08009579
 8009560:	08009591 	.word	0x08009591
 8009564:	08009591 	.word	0x08009591
 8009568:	08009591 	.word	0x08009591
 800956c:	08009589 	.word	0x08009589
 8009570:	2300      	movs	r3, #0
 8009572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009576:	e0d8      	b.n	800972a <UART_SetConfig+0x2fe>
 8009578:	2302      	movs	r3, #2
 800957a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800957e:	e0d4      	b.n	800972a <UART_SetConfig+0x2fe>
 8009580:	2304      	movs	r3, #4
 8009582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009586:	e0d0      	b.n	800972a <UART_SetConfig+0x2fe>
 8009588:	2308      	movs	r3, #8
 800958a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800958e:	e0cc      	b.n	800972a <UART_SetConfig+0x2fe>
 8009590:	2310      	movs	r3, #16
 8009592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009596:	e0c8      	b.n	800972a <UART_SetConfig+0x2fe>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a5e      	ldr	r2, [pc, #376]	; (8009718 <UART_SetConfig+0x2ec>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d125      	bne.n	80095ee <UART_SetConfig+0x1c2>
 80095a2:	4b5b      	ldr	r3, [pc, #364]	; (8009710 <UART_SetConfig+0x2e4>)
 80095a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095ac:	2b30      	cmp	r3, #48	; 0x30
 80095ae:	d016      	beq.n	80095de <UART_SetConfig+0x1b2>
 80095b0:	2b30      	cmp	r3, #48	; 0x30
 80095b2:	d818      	bhi.n	80095e6 <UART_SetConfig+0x1ba>
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	d00a      	beq.n	80095ce <UART_SetConfig+0x1a2>
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d814      	bhi.n	80095e6 <UART_SetConfig+0x1ba>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <UART_SetConfig+0x19a>
 80095c0:	2b10      	cmp	r3, #16
 80095c2:	d008      	beq.n	80095d6 <UART_SetConfig+0x1aa>
 80095c4:	e00f      	b.n	80095e6 <UART_SetConfig+0x1ba>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095cc:	e0ad      	b.n	800972a <UART_SetConfig+0x2fe>
 80095ce:	2302      	movs	r3, #2
 80095d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d4:	e0a9      	b.n	800972a <UART_SetConfig+0x2fe>
 80095d6:	2304      	movs	r3, #4
 80095d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095dc:	e0a5      	b.n	800972a <UART_SetConfig+0x2fe>
 80095de:	2308      	movs	r3, #8
 80095e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095e4:	e0a1      	b.n	800972a <UART_SetConfig+0x2fe>
 80095e6:	2310      	movs	r3, #16
 80095e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ec:	e09d      	b.n	800972a <UART_SetConfig+0x2fe>
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a4a      	ldr	r2, [pc, #296]	; (800971c <UART_SetConfig+0x2f0>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d125      	bne.n	8009644 <UART_SetConfig+0x218>
 80095f8:	4b45      	ldr	r3, [pc, #276]	; (8009710 <UART_SetConfig+0x2e4>)
 80095fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009602:	2bc0      	cmp	r3, #192	; 0xc0
 8009604:	d016      	beq.n	8009634 <UART_SetConfig+0x208>
 8009606:	2bc0      	cmp	r3, #192	; 0xc0
 8009608:	d818      	bhi.n	800963c <UART_SetConfig+0x210>
 800960a:	2b80      	cmp	r3, #128	; 0x80
 800960c:	d00a      	beq.n	8009624 <UART_SetConfig+0x1f8>
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	d814      	bhi.n	800963c <UART_SetConfig+0x210>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <UART_SetConfig+0x1f0>
 8009616:	2b40      	cmp	r3, #64	; 0x40
 8009618:	d008      	beq.n	800962c <UART_SetConfig+0x200>
 800961a:	e00f      	b.n	800963c <UART_SetConfig+0x210>
 800961c:	2300      	movs	r3, #0
 800961e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009622:	e082      	b.n	800972a <UART_SetConfig+0x2fe>
 8009624:	2302      	movs	r3, #2
 8009626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800962a:	e07e      	b.n	800972a <UART_SetConfig+0x2fe>
 800962c:	2304      	movs	r3, #4
 800962e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009632:	e07a      	b.n	800972a <UART_SetConfig+0x2fe>
 8009634:	2308      	movs	r3, #8
 8009636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800963a:	e076      	b.n	800972a <UART_SetConfig+0x2fe>
 800963c:	2310      	movs	r3, #16
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009642:	e072      	b.n	800972a <UART_SetConfig+0x2fe>
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a35      	ldr	r2, [pc, #212]	; (8009720 <UART_SetConfig+0x2f4>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d12a      	bne.n	80096a4 <UART_SetConfig+0x278>
 800964e:	4b30      	ldr	r3, [pc, #192]	; (8009710 <UART_SetConfig+0x2e4>)
 8009650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800965c:	d01a      	beq.n	8009694 <UART_SetConfig+0x268>
 800965e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009662:	d81b      	bhi.n	800969c <UART_SetConfig+0x270>
 8009664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009668:	d00c      	beq.n	8009684 <UART_SetConfig+0x258>
 800966a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800966e:	d815      	bhi.n	800969c <UART_SetConfig+0x270>
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <UART_SetConfig+0x250>
 8009674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009678:	d008      	beq.n	800968c <UART_SetConfig+0x260>
 800967a:	e00f      	b.n	800969c <UART_SetConfig+0x270>
 800967c:	2300      	movs	r3, #0
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009682:	e052      	b.n	800972a <UART_SetConfig+0x2fe>
 8009684:	2302      	movs	r3, #2
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800968a:	e04e      	b.n	800972a <UART_SetConfig+0x2fe>
 800968c:	2304      	movs	r3, #4
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009692:	e04a      	b.n	800972a <UART_SetConfig+0x2fe>
 8009694:	2308      	movs	r3, #8
 8009696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800969a:	e046      	b.n	800972a <UART_SetConfig+0x2fe>
 800969c:	2310      	movs	r3, #16
 800969e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096a2:	e042      	b.n	800972a <UART_SetConfig+0x2fe>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a17      	ldr	r2, [pc, #92]	; (8009708 <UART_SetConfig+0x2dc>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d13a      	bne.n	8009724 <UART_SetConfig+0x2f8>
 80096ae:	4b18      	ldr	r3, [pc, #96]	; (8009710 <UART_SetConfig+0x2e4>)
 80096b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096bc:	d01a      	beq.n	80096f4 <UART_SetConfig+0x2c8>
 80096be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096c2:	d81b      	bhi.n	80096fc <UART_SetConfig+0x2d0>
 80096c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096c8:	d00c      	beq.n	80096e4 <UART_SetConfig+0x2b8>
 80096ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ce:	d815      	bhi.n	80096fc <UART_SetConfig+0x2d0>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <UART_SetConfig+0x2b0>
 80096d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096d8:	d008      	beq.n	80096ec <UART_SetConfig+0x2c0>
 80096da:	e00f      	b.n	80096fc <UART_SetConfig+0x2d0>
 80096dc:	2300      	movs	r3, #0
 80096de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e2:	e022      	b.n	800972a <UART_SetConfig+0x2fe>
 80096e4:	2302      	movs	r3, #2
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ea:	e01e      	b.n	800972a <UART_SetConfig+0x2fe>
 80096ec:	2304      	movs	r3, #4
 80096ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f2:	e01a      	b.n	800972a <UART_SetConfig+0x2fe>
 80096f4:	2308      	movs	r3, #8
 80096f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fa:	e016      	b.n	800972a <UART_SetConfig+0x2fe>
 80096fc:	2310      	movs	r3, #16
 80096fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009702:	e012      	b.n	800972a <UART_SetConfig+0x2fe>
 8009704:	cfff69f3 	.word	0xcfff69f3
 8009708:	40008000 	.word	0x40008000
 800970c:	40013800 	.word	0x40013800
 8009710:	40021000 	.word	0x40021000
 8009714:	40004400 	.word	0x40004400
 8009718:	40004800 	.word	0x40004800
 800971c:	40004c00 	.word	0x40004c00
 8009720:	40005000 	.word	0x40005000
 8009724:	2310      	movs	r3, #16
 8009726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4aae      	ldr	r2, [pc, #696]	; (80099e8 <UART_SetConfig+0x5bc>)
 8009730:	4293      	cmp	r3, r2
 8009732:	f040 8097 	bne.w	8009864 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009736:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800973a:	2b08      	cmp	r3, #8
 800973c:	d823      	bhi.n	8009786 <UART_SetConfig+0x35a>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <UART_SetConfig+0x318>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009769 	.word	0x08009769
 8009748:	08009787 	.word	0x08009787
 800974c:	08009771 	.word	0x08009771
 8009750:	08009787 	.word	0x08009787
 8009754:	08009777 	.word	0x08009777
 8009758:	08009787 	.word	0x08009787
 800975c:	08009787 	.word	0x08009787
 8009760:	08009787 	.word	0x08009787
 8009764:	0800977f 	.word	0x0800977f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009768:	f7fc f88a 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 800976c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800976e:	e010      	b.n	8009792 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009770:	4b9e      	ldr	r3, [pc, #632]	; (80099ec <UART_SetConfig+0x5c0>)
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009774:	e00d      	b.n	8009792 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009776:	f7fb ffeb 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 800977a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800977c:	e009      	b.n	8009792 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800977e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009784:	e005      	b.n	8009792 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009790:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 8130 	beq.w	80099fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	4a94      	ldr	r2, [pc, #592]	; (80099f0 <UART_SetConfig+0x5c4>)
 80097a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097a4:	461a      	mov	r2, r3
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	4413      	add	r3, r2
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d305      	bcc.n	80097ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d903      	bls.n	80097d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80097d0:	e113      	b.n	80099fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	2200      	movs	r2, #0
 80097d6:	60bb      	str	r3, [r7, #8]
 80097d8:	60fa      	str	r2, [r7, #12]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	4a84      	ldr	r2, [pc, #528]	; (80099f0 <UART_SetConfig+0x5c4>)
 80097e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2200      	movs	r2, #0
 80097e8:	603b      	str	r3, [r7, #0]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097f4:	f7f7 f9f0 	bl	8000bd8 <__aeabi_uldivmod>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4610      	mov	r0, r2
 80097fe:	4619      	mov	r1, r3
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	020b      	lsls	r3, r1, #8
 800980a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800980e:	0202      	lsls	r2, r0, #8
 8009810:	6979      	ldr	r1, [r7, #20]
 8009812:	6849      	ldr	r1, [r1, #4]
 8009814:	0849      	lsrs	r1, r1, #1
 8009816:	2000      	movs	r0, #0
 8009818:	460c      	mov	r4, r1
 800981a:	4605      	mov	r5, r0
 800981c:	eb12 0804 	adds.w	r8, r2, r4
 8009820:	eb43 0905 	adc.w	r9, r3, r5
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	469a      	mov	sl, r3
 800982c:	4693      	mov	fp, r2
 800982e:	4652      	mov	r2, sl
 8009830:	465b      	mov	r3, fp
 8009832:	4640      	mov	r0, r8
 8009834:	4649      	mov	r1, r9
 8009836:	f7f7 f9cf 	bl	8000bd8 <__aeabi_uldivmod>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4613      	mov	r3, r2
 8009840:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009848:	d308      	bcc.n	800985c <UART_SetConfig+0x430>
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009850:	d204      	bcs.n	800985c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6a3a      	ldr	r2, [r7, #32]
 8009858:	60da      	str	r2, [r3, #12]
 800985a:	e0ce      	b.n	80099fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009862:	e0ca      	b.n	80099fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800986c:	d166      	bne.n	800993c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800986e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009872:	2b08      	cmp	r3, #8
 8009874:	d827      	bhi.n	80098c6 <UART_SetConfig+0x49a>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <UART_SetConfig+0x450>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098a1 	.word	0x080098a1
 8009880:	080098a9 	.word	0x080098a9
 8009884:	080098b1 	.word	0x080098b1
 8009888:	080098c7 	.word	0x080098c7
 800988c:	080098b7 	.word	0x080098b7
 8009890:	080098c7 	.word	0x080098c7
 8009894:	080098c7 	.word	0x080098c7
 8009898:	080098c7 	.word	0x080098c7
 800989c:	080098bf 	.word	0x080098bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098a0:	f7fb ffee 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 80098a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098a6:	e014      	b.n	80098d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098a8:	f7fc f800 	bl	80058ac <HAL_RCC_GetPCLK2Freq>
 80098ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098ae:	e010      	b.n	80098d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098b0:	4b4e      	ldr	r3, [pc, #312]	; (80099ec <UART_SetConfig+0x5c0>)
 80098b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098b4:	e00d      	b.n	80098d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098b6:	f7fb ff4b 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80098ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098bc:	e009      	b.n	80098d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098c4:	e005      	b.n	80098d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80098d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 8090 	beq.w	80099fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	4a44      	ldr	r2, [pc, #272]	; (80099f0 <UART_SetConfig+0x5c4>)
 80098e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80098ec:	005a      	lsls	r2, r3, #1
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	085b      	lsrs	r3, r3, #1
 80098f4:	441a      	add	r2, r3
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	2b0f      	cmp	r3, #15
 8009904:	d916      	bls.n	8009934 <UART_SetConfig+0x508>
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800990c:	d212      	bcs.n	8009934 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	b29b      	uxth	r3, r3
 8009912:	f023 030f 	bic.w	r3, r3, #15
 8009916:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	085b      	lsrs	r3, r3, #1
 800991c:	b29b      	uxth	r3, r3
 800991e:	f003 0307 	and.w	r3, r3, #7
 8009922:	b29a      	uxth	r2, r3
 8009924:	8bfb      	ldrh	r3, [r7, #30]
 8009926:	4313      	orrs	r3, r2
 8009928:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	8bfa      	ldrh	r2, [r7, #30]
 8009930:	60da      	str	r2, [r3, #12]
 8009932:	e062      	b.n	80099fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800993a:	e05e      	b.n	80099fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800993c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009940:	2b08      	cmp	r3, #8
 8009942:	d828      	bhi.n	8009996 <UART_SetConfig+0x56a>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <UART_SetConfig+0x520>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	08009971 	.word	0x08009971
 8009950:	08009979 	.word	0x08009979
 8009954:	08009981 	.word	0x08009981
 8009958:	08009997 	.word	0x08009997
 800995c:	08009987 	.word	0x08009987
 8009960:	08009997 	.word	0x08009997
 8009964:	08009997 	.word	0x08009997
 8009968:	08009997 	.word	0x08009997
 800996c:	0800998f 	.word	0x0800998f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009970:	f7fb ff86 	bl	8005880 <HAL_RCC_GetPCLK1Freq>
 8009974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009976:	e014      	b.n	80099a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009978:	f7fb ff98 	bl	80058ac <HAL_RCC_GetPCLK2Freq>
 800997c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800997e:	e010      	b.n	80099a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009980:	4b1a      	ldr	r3, [pc, #104]	; (80099ec <UART_SetConfig+0x5c0>)
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009984:	e00d      	b.n	80099a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009986:	f7fb fee3 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 800998a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800998c:	e009      	b.n	80099a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800998e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009994:	e005      	b.n	80099a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80099a0:	bf00      	nop
    }

    if (pclk != 0U)
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d028      	beq.n	80099fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	4a10      	ldr	r2, [pc, #64]	; (80099f0 <UART_SetConfig+0x5c4>)
 80099ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b2:	461a      	mov	r2, r3
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	085b      	lsrs	r3, r3, #1
 80099c0:	441a      	add	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2b0f      	cmp	r3, #15
 80099d0:	d910      	bls.n	80099f4 <UART_SetConfig+0x5c8>
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d8:	d20c      	bcs.n	80099f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	b29a      	uxth	r2, r3
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	60da      	str	r2, [r3, #12]
 80099e4:	e009      	b.n	80099fa <UART_SetConfig+0x5ce>
 80099e6:	bf00      	nop
 80099e8:	40008000 	.word	0x40008000
 80099ec:	00f42400 	.word	0x00f42400
 80099f0:	0800ca94 	.word	0x0800ca94
      }
      else
      {
        ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2200      	movs	r2, #0
 8009a14:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009a16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3730      	adds	r7, #48	; 0x30
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	f003 0308 	and.w	r3, r3, #8
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00a      	beq.n	8009a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00a      	beq.n	8009a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00a      	beq.n	8009ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab8:	f003 0310 	and.w	r3, r3, #16
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00a      	beq.n	8009af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d01a      	beq.n	8009b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b22:	d10a      	bne.n	8009b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00a      	beq.n	8009b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	605a      	str	r2, [r3, #4]
  }
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b098      	sub	sp, #96	; 0x60
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b78:	f7f9 fb7a 	bl	8003270 <HAL_GetTick>
 8009b7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0308 	and.w	r3, r3, #8
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d12f      	bne.n	8009bec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b94:	2200      	movs	r2, #0
 8009b96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f88e 	bl	8009cbc <UART_WaitOnFlagUntilTimeout>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d022      	beq.n	8009bec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bba:	653b      	str	r3, [r7, #80]	; 0x50
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8009bc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bcc:	e841 2300 	strex	r3, r2, [r1]
 8009bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e6      	bne.n	8009ba6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e063      	b.n	8009cb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d149      	bne.n	8009c8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c02:	2200      	movs	r2, #0
 8009c04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f857 	bl	8009cbc <UART_WaitOnFlagUntilTimeout>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d03c      	beq.n	8009c8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	623b      	str	r3, [r7, #32]
   return(result);
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c32:	633b      	str	r3, [r7, #48]	; 0x30
 8009c34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e6      	bne.n	8009c14 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f023 0301 	bic.w	r3, r3, #1
 8009c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3308      	adds	r3, #8
 8009c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c66:	61fa      	str	r2, [r7, #28]
 8009c68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	69b9      	ldr	r1, [r7, #24]
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	617b      	str	r3, [r7, #20]
   return(result);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e5      	bne.n	8009c46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e012      	b.n	8009cb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2220      	movs	r2, #32
 8009c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3758      	adds	r7, #88	; 0x58
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ccc:	e049      	b.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	d045      	beq.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd6:	f7f9 facb 	bl	8003270 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d302      	bcc.n	8009cec <UART_WaitOnFlagUntilTimeout+0x30>
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e048      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0304 	and.w	r3, r3, #4
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d031      	beq.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	f003 0308 	and.w	r3, r3, #8
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d110      	bne.n	8009d2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2208      	movs	r2, #8
 8009d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f838 	bl	8009d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e029      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d3c:	d111      	bne.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 f81e 	bl	8009d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e00f      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69da      	ldr	r2, [r3, #28]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	bf0c      	ite	eq
 8009d72:	2301      	moveq	r3, #1
 8009d74:	2300      	movne	r3, #0
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	461a      	mov	r2, r3
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d0a6      	beq.n	8009cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b095      	sub	sp, #84	; 0x54
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db0:	643b      	str	r3, [r7, #64]	; 0x40
 8009db2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009db8:	e841 2300 	strex	r3, r2, [r1]
 8009dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e6      	bne.n	8009d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3308      	adds	r3, #8
 8009dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dda:	f023 0301 	bic.w	r3, r3, #1
 8009dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3308      	adds	r3, #8
 8009de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009df0:	e841 2300 	strex	r3, r2, [r1]
 8009df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e3      	bne.n	8009dc4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d118      	bne.n	8009e36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f023 0310 	bic.w	r3, r3, #16
 8009e18:	647b      	str	r3, [r7, #68]	; 0x44
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e22:	61bb      	str	r3, [r7, #24]
 8009e24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6979      	ldr	r1, [r7, #20]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e6      	bne.n	8009e04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009e4a:	bf00      	nop
 8009e4c:	3754      	adds	r7, #84	; 0x54
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_UARTEx_DisableFifoMode+0x16>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e027      	b.n	8009ebc <HAL_UARTEx_DisableFifoMode+0x66>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2224      	movs	r2, #36	; 0x24
 8009e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f022 0201 	bic.w	r2, r2, #1
 8009e92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d101      	bne.n	8009ee0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009edc:	2302      	movs	r3, #2
 8009ede:	e02d      	b.n	8009f3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2224      	movs	r2, #36	; 0x24
 8009eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 0201 	bic.w	r2, r2, #1
 8009f06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f84f 	bl	8009fc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d101      	bne.n	8009f5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	e02d      	b.n	8009fb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2224      	movs	r2, #36	; 0x24
 8009f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 0201 	bic.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f811 	bl	8009fc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2220      	movs	r2, #32
 8009faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d108      	bne.n	8009fe2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fe0:	e031      	b.n	800a046 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fe2:	2308      	movs	r3, #8
 8009fe4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	0e5b      	lsrs	r3, r3, #25
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	f003 0307 	and.w	r3, r3, #7
 8009ff8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	0f5b      	lsrs	r3, r3, #29
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0307 	and.w	r3, r3, #7
 800a008:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a00a:	7bbb      	ldrb	r3, [r7, #14]
 800a00c:	7b3a      	ldrb	r2, [r7, #12]
 800a00e:	4911      	ldr	r1, [pc, #68]	; (800a054 <UARTEx_SetNbDataToProcess+0x94>)
 800a010:	5c8a      	ldrb	r2, [r1, r2]
 800a012:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a016:	7b3a      	ldrb	r2, [r7, #12]
 800a018:	490f      	ldr	r1, [pc, #60]	; (800a058 <UARTEx_SetNbDataToProcess+0x98>)
 800a01a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a01c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a020:	b29a      	uxth	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	7b7a      	ldrb	r2, [r7, #13]
 800a02c:	4909      	ldr	r1, [pc, #36]	; (800a054 <UARTEx_SetNbDataToProcess+0x94>)
 800a02e:	5c8a      	ldrb	r2, [r1, r2]
 800a030:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a034:	7b7a      	ldrb	r2, [r7, #13]
 800a036:	4908      	ldr	r1, [pc, #32]	; (800a058 <UARTEx_SetNbDataToProcess+0x98>)
 800a038:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a03a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	0800caac 	.word	0x0800caac
 800a058:	0800cab4 	.word	0x0800cab4

0800a05c <__cvt>:
 800a05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	ec55 4b10 	vmov	r4, r5, d0
 800a064:	2d00      	cmp	r5, #0
 800a066:	460e      	mov	r6, r1
 800a068:	4619      	mov	r1, r3
 800a06a:	462b      	mov	r3, r5
 800a06c:	bfbb      	ittet	lt
 800a06e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a072:	461d      	movlt	r5, r3
 800a074:	2300      	movge	r3, #0
 800a076:	232d      	movlt	r3, #45	; 0x2d
 800a078:	700b      	strb	r3, [r1, #0]
 800a07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a07c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a080:	4691      	mov	r9, r2
 800a082:	f023 0820 	bic.w	r8, r3, #32
 800a086:	bfbc      	itt	lt
 800a088:	4622      	movlt	r2, r4
 800a08a:	4614      	movlt	r4, r2
 800a08c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a090:	d005      	beq.n	800a09e <__cvt+0x42>
 800a092:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a096:	d100      	bne.n	800a09a <__cvt+0x3e>
 800a098:	3601      	adds	r6, #1
 800a09a:	2102      	movs	r1, #2
 800a09c:	e000      	b.n	800a0a0 <__cvt+0x44>
 800a09e:	2103      	movs	r1, #3
 800a0a0:	ab03      	add	r3, sp, #12
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	ab02      	add	r3, sp, #8
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	ec45 4b10 	vmov	d0, r4, r5
 800a0ac:	4653      	mov	r3, sl
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	f000 fe4a 	bl	800ad48 <_dtoa_r>
 800a0b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	d102      	bne.n	800a0c2 <__cvt+0x66>
 800a0bc:	f019 0f01 	tst.w	r9, #1
 800a0c0:	d022      	beq.n	800a108 <__cvt+0xac>
 800a0c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0c6:	eb07 0906 	add.w	r9, r7, r6
 800a0ca:	d110      	bne.n	800a0ee <__cvt+0x92>
 800a0cc:	783b      	ldrb	r3, [r7, #0]
 800a0ce:	2b30      	cmp	r3, #48	; 0x30
 800a0d0:	d10a      	bne.n	800a0e8 <__cvt+0x8c>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 fd0d 	bl	8000af8 <__aeabi_dcmpeq>
 800a0de:	b918      	cbnz	r0, 800a0e8 <__cvt+0x8c>
 800a0e0:	f1c6 0601 	rsb	r6, r6, #1
 800a0e4:	f8ca 6000 	str.w	r6, [sl]
 800a0e8:	f8da 3000 	ldr.w	r3, [sl]
 800a0ec:	4499      	add	r9, r3
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	f7f6 fcff 	bl	8000af8 <__aeabi_dcmpeq>
 800a0fa:	b108      	cbz	r0, 800a100 <__cvt+0xa4>
 800a0fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a100:	2230      	movs	r2, #48	; 0x30
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	454b      	cmp	r3, r9
 800a106:	d307      	bcc.n	800a118 <__cvt+0xbc>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a10c:	1bdb      	subs	r3, r3, r7
 800a10e:	4638      	mov	r0, r7
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	b004      	add	sp, #16
 800a114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a118:	1c59      	adds	r1, r3, #1
 800a11a:	9103      	str	r1, [sp, #12]
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	e7f0      	b.n	800a102 <__cvt+0xa6>

0800a120 <__exponent>:
 800a120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a122:	4603      	mov	r3, r0
 800a124:	2900      	cmp	r1, #0
 800a126:	bfb8      	it	lt
 800a128:	4249      	neglt	r1, r1
 800a12a:	f803 2b02 	strb.w	r2, [r3], #2
 800a12e:	bfb4      	ite	lt
 800a130:	222d      	movlt	r2, #45	; 0x2d
 800a132:	222b      	movge	r2, #43	; 0x2b
 800a134:	2909      	cmp	r1, #9
 800a136:	7042      	strb	r2, [r0, #1]
 800a138:	dd2a      	ble.n	800a190 <__exponent+0x70>
 800a13a:	f10d 0207 	add.w	r2, sp, #7
 800a13e:	4617      	mov	r7, r2
 800a140:	260a      	movs	r6, #10
 800a142:	4694      	mov	ip, r2
 800a144:	fb91 f5f6 	sdiv	r5, r1, r6
 800a148:	fb06 1415 	mls	r4, r6, r5, r1
 800a14c:	3430      	adds	r4, #48	; 0x30
 800a14e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a152:	460c      	mov	r4, r1
 800a154:	2c63      	cmp	r4, #99	; 0x63
 800a156:	f102 32ff 	add.w	r2, r2, #4294967295
 800a15a:	4629      	mov	r1, r5
 800a15c:	dcf1      	bgt.n	800a142 <__exponent+0x22>
 800a15e:	3130      	adds	r1, #48	; 0x30
 800a160:	f1ac 0402 	sub.w	r4, ip, #2
 800a164:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a168:	1c41      	adds	r1, r0, #1
 800a16a:	4622      	mov	r2, r4
 800a16c:	42ba      	cmp	r2, r7
 800a16e:	d30a      	bcc.n	800a186 <__exponent+0x66>
 800a170:	f10d 0209 	add.w	r2, sp, #9
 800a174:	eba2 020c 	sub.w	r2, r2, ip
 800a178:	42bc      	cmp	r4, r7
 800a17a:	bf88      	it	hi
 800a17c:	2200      	movhi	r2, #0
 800a17e:	4413      	add	r3, r2
 800a180:	1a18      	subs	r0, r3, r0
 800a182:	b003      	add	sp, #12
 800a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a186:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a18a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a18e:	e7ed      	b.n	800a16c <__exponent+0x4c>
 800a190:	2330      	movs	r3, #48	; 0x30
 800a192:	3130      	adds	r1, #48	; 0x30
 800a194:	7083      	strb	r3, [r0, #2]
 800a196:	70c1      	strb	r1, [r0, #3]
 800a198:	1d03      	adds	r3, r0, #4
 800a19a:	e7f1      	b.n	800a180 <__exponent+0x60>

0800a19c <_printf_float>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	ed2d 8b02 	vpush	{d8}
 800a1a4:	b08d      	sub	sp, #52	; 0x34
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	461f      	mov	r7, r3
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	f000 fcc7 	bl	800ab44 <_localeconv_r>
 800a1b6:	f8d0 a000 	ldr.w	sl, [r0]
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	f7f6 f870 	bl	80002a0 <strlen>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	9305      	str	r3, [sp, #20]
 800a1c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a1cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1d0:	3307      	adds	r3, #7
 800a1d2:	f023 0307 	bic.w	r3, r3, #7
 800a1d6:	f103 0208 	add.w	r2, r3, #8
 800a1da:	f8c8 2000 	str.w	r2, [r8]
 800a1de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1e6:	9307      	str	r3, [sp, #28]
 800a1e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1ec:	ee08 0a10 	vmov	s16, r0
 800a1f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a1f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1f8:	4b9e      	ldr	r3, [pc, #632]	; (800a474 <_printf_float+0x2d8>)
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fe:	f7f6 fcad 	bl	8000b5c <__aeabi_dcmpun>
 800a202:	bb88      	cbnz	r0, 800a268 <_printf_float+0xcc>
 800a204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a208:	4b9a      	ldr	r3, [pc, #616]	; (800a474 <_printf_float+0x2d8>)
 800a20a:	f04f 32ff 	mov.w	r2, #4294967295
 800a20e:	f7f6 fc87 	bl	8000b20 <__aeabi_dcmple>
 800a212:	bb48      	cbnz	r0, 800a268 <_printf_float+0xcc>
 800a214:	2200      	movs	r2, #0
 800a216:	2300      	movs	r3, #0
 800a218:	4640      	mov	r0, r8
 800a21a:	4649      	mov	r1, r9
 800a21c:	f7f6 fc76 	bl	8000b0c <__aeabi_dcmplt>
 800a220:	b110      	cbz	r0, 800a228 <_printf_float+0x8c>
 800a222:	232d      	movs	r3, #45	; 0x2d
 800a224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a228:	4a93      	ldr	r2, [pc, #588]	; (800a478 <_printf_float+0x2dc>)
 800a22a:	4b94      	ldr	r3, [pc, #592]	; (800a47c <_printf_float+0x2e0>)
 800a22c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a230:	bf94      	ite	ls
 800a232:	4690      	movls	r8, r2
 800a234:	4698      	movhi	r8, r3
 800a236:	2303      	movs	r3, #3
 800a238:	6123      	str	r3, [r4, #16]
 800a23a:	9b05      	ldr	r3, [sp, #20]
 800a23c:	f023 0304 	bic.w	r3, r3, #4
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	f04f 0900 	mov.w	r9, #0
 800a246:	9700      	str	r7, [sp, #0]
 800a248:	4633      	mov	r3, r6
 800a24a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a24c:	4621      	mov	r1, r4
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f9da 	bl	800a608 <_printf_common>
 800a254:	3001      	adds	r0, #1
 800a256:	f040 8090 	bne.w	800a37a <_printf_float+0x1de>
 800a25a:	f04f 30ff 	mov.w	r0, #4294967295
 800a25e:	b00d      	add	sp, #52	; 0x34
 800a260:	ecbd 8b02 	vpop	{d8}
 800a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f6 fc74 	bl	8000b5c <__aeabi_dcmpun>
 800a274:	b140      	cbz	r0, 800a288 <_printf_float+0xec>
 800a276:	464b      	mov	r3, r9
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bfbc      	itt	lt
 800a27c:	232d      	movlt	r3, #45	; 0x2d
 800a27e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a282:	4a7f      	ldr	r2, [pc, #508]	; (800a480 <_printf_float+0x2e4>)
 800a284:	4b7f      	ldr	r3, [pc, #508]	; (800a484 <_printf_float+0x2e8>)
 800a286:	e7d1      	b.n	800a22c <_printf_float+0x90>
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a28e:	9206      	str	r2, [sp, #24]
 800a290:	1c5a      	adds	r2, r3, #1
 800a292:	d13f      	bne.n	800a314 <_printf_float+0x178>
 800a294:	2306      	movs	r3, #6
 800a296:	6063      	str	r3, [r4, #4]
 800a298:	9b05      	ldr	r3, [sp, #20]
 800a29a:	6861      	ldr	r1, [r4, #4]
 800a29c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9303      	str	r3, [sp, #12]
 800a2a4:	ab0a      	add	r3, sp, #40	; 0x28
 800a2a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2aa:	ab09      	add	r3, sp, #36	; 0x24
 800a2ac:	ec49 8b10 	vmov	d0, r8, r9
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	6022      	str	r2, [r4, #0]
 800a2b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f7ff fecf 	bl	800a05c <__cvt>
 800a2be:	9b06      	ldr	r3, [sp, #24]
 800a2c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2c2:	2b47      	cmp	r3, #71	; 0x47
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	d108      	bne.n	800a2da <_printf_float+0x13e>
 800a2c8:	1cc8      	adds	r0, r1, #3
 800a2ca:	db02      	blt.n	800a2d2 <_printf_float+0x136>
 800a2cc:	6863      	ldr	r3, [r4, #4]
 800a2ce:	4299      	cmp	r1, r3
 800a2d0:	dd41      	ble.n	800a356 <_printf_float+0x1ba>
 800a2d2:	f1ab 0302 	sub.w	r3, fp, #2
 800a2d6:	fa5f fb83 	uxtb.w	fp, r3
 800a2da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2de:	d820      	bhi.n	800a322 <_printf_float+0x186>
 800a2e0:	3901      	subs	r1, #1
 800a2e2:	465a      	mov	r2, fp
 800a2e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2e8:	9109      	str	r1, [sp, #36]	; 0x24
 800a2ea:	f7ff ff19 	bl	800a120 <__exponent>
 800a2ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2f0:	1813      	adds	r3, r2, r0
 800a2f2:	2a01      	cmp	r2, #1
 800a2f4:	4681      	mov	r9, r0
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	dc02      	bgt.n	800a300 <_printf_float+0x164>
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	07d2      	lsls	r2, r2, #31
 800a2fe:	d501      	bpl.n	800a304 <_printf_float+0x168>
 800a300:	3301      	adds	r3, #1
 800a302:	6123      	str	r3, [r4, #16]
 800a304:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d09c      	beq.n	800a246 <_printf_float+0xaa>
 800a30c:	232d      	movs	r3, #45	; 0x2d
 800a30e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a312:	e798      	b.n	800a246 <_printf_float+0xaa>
 800a314:	9a06      	ldr	r2, [sp, #24]
 800a316:	2a47      	cmp	r2, #71	; 0x47
 800a318:	d1be      	bne.n	800a298 <_printf_float+0xfc>
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1bc      	bne.n	800a298 <_printf_float+0xfc>
 800a31e:	2301      	movs	r3, #1
 800a320:	e7b9      	b.n	800a296 <_printf_float+0xfa>
 800a322:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a326:	d118      	bne.n	800a35a <_printf_float+0x1be>
 800a328:	2900      	cmp	r1, #0
 800a32a:	6863      	ldr	r3, [r4, #4]
 800a32c:	dd0b      	ble.n	800a346 <_printf_float+0x1aa>
 800a32e:	6121      	str	r1, [r4, #16]
 800a330:	b913      	cbnz	r3, 800a338 <_printf_float+0x19c>
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	07d0      	lsls	r0, r2, #31
 800a336:	d502      	bpl.n	800a33e <_printf_float+0x1a2>
 800a338:	3301      	adds	r3, #1
 800a33a:	440b      	add	r3, r1
 800a33c:	6123      	str	r3, [r4, #16]
 800a33e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a340:	f04f 0900 	mov.w	r9, #0
 800a344:	e7de      	b.n	800a304 <_printf_float+0x168>
 800a346:	b913      	cbnz	r3, 800a34e <_printf_float+0x1b2>
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	07d2      	lsls	r2, r2, #31
 800a34c:	d501      	bpl.n	800a352 <_printf_float+0x1b6>
 800a34e:	3302      	adds	r3, #2
 800a350:	e7f4      	b.n	800a33c <_printf_float+0x1a0>
 800a352:	2301      	movs	r3, #1
 800a354:	e7f2      	b.n	800a33c <_printf_float+0x1a0>
 800a356:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a35a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35c:	4299      	cmp	r1, r3
 800a35e:	db05      	blt.n	800a36c <_printf_float+0x1d0>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	6121      	str	r1, [r4, #16]
 800a364:	07d8      	lsls	r0, r3, #31
 800a366:	d5ea      	bpl.n	800a33e <_printf_float+0x1a2>
 800a368:	1c4b      	adds	r3, r1, #1
 800a36a:	e7e7      	b.n	800a33c <_printf_float+0x1a0>
 800a36c:	2900      	cmp	r1, #0
 800a36e:	bfd4      	ite	le
 800a370:	f1c1 0202 	rsble	r2, r1, #2
 800a374:	2201      	movgt	r2, #1
 800a376:	4413      	add	r3, r2
 800a378:	e7e0      	b.n	800a33c <_printf_float+0x1a0>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	055a      	lsls	r2, r3, #21
 800a37e:	d407      	bmi.n	800a390 <_printf_float+0x1f4>
 800a380:	6923      	ldr	r3, [r4, #16]
 800a382:	4642      	mov	r2, r8
 800a384:	4631      	mov	r1, r6
 800a386:	4628      	mov	r0, r5
 800a388:	47b8      	blx	r7
 800a38a:	3001      	adds	r0, #1
 800a38c:	d12c      	bne.n	800a3e8 <_printf_float+0x24c>
 800a38e:	e764      	b.n	800a25a <_printf_float+0xbe>
 800a390:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a394:	f240 80e0 	bls.w	800a558 <_printf_float+0x3bc>
 800a398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a39c:	2200      	movs	r2, #0
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f7f6 fbaa 	bl	8000af8 <__aeabi_dcmpeq>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d034      	beq.n	800a412 <_printf_float+0x276>
 800a3a8:	4a37      	ldr	r2, [pc, #220]	; (800a488 <_printf_float+0x2ec>)
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f af51 	beq.w	800a25a <_printf_float+0xbe>
 800a3b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	db02      	blt.n	800a3c6 <_printf_float+0x22a>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	07d8      	lsls	r0, r3, #31
 800a3c4:	d510      	bpl.n	800a3e8 <_printf_float+0x24c>
 800a3c6:	ee18 3a10 	vmov	r3, s16
 800a3ca:	4652      	mov	r2, sl
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	47b8      	blx	r7
 800a3d2:	3001      	adds	r0, #1
 800a3d4:	f43f af41 	beq.w	800a25a <_printf_float+0xbe>
 800a3d8:	f04f 0800 	mov.w	r8, #0
 800a3dc:	f104 091a 	add.w	r9, r4, #26
 800a3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	4543      	cmp	r3, r8
 800a3e6:	dc09      	bgt.n	800a3fc <_printf_float+0x260>
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	079b      	lsls	r3, r3, #30
 800a3ec:	f100 8107 	bmi.w	800a5fe <_printf_float+0x462>
 800a3f0:	68e0      	ldr	r0, [r4, #12]
 800a3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f4:	4298      	cmp	r0, r3
 800a3f6:	bfb8      	it	lt
 800a3f8:	4618      	movlt	r0, r3
 800a3fa:	e730      	b.n	800a25e <_printf_float+0xc2>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	464a      	mov	r2, r9
 800a400:	4631      	mov	r1, r6
 800a402:	4628      	mov	r0, r5
 800a404:	47b8      	blx	r7
 800a406:	3001      	adds	r0, #1
 800a408:	f43f af27 	beq.w	800a25a <_printf_float+0xbe>
 800a40c:	f108 0801 	add.w	r8, r8, #1
 800a410:	e7e6      	b.n	800a3e0 <_printf_float+0x244>
 800a412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	dc39      	bgt.n	800a48c <_printf_float+0x2f0>
 800a418:	4a1b      	ldr	r2, [pc, #108]	; (800a488 <_printf_float+0x2ec>)
 800a41a:	2301      	movs	r3, #1
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f af19 	beq.w	800a25a <_printf_float+0xbe>
 800a428:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a42c:	4313      	orrs	r3, r2
 800a42e:	d102      	bne.n	800a436 <_printf_float+0x29a>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	07d9      	lsls	r1, r3, #31
 800a434:	d5d8      	bpl.n	800a3e8 <_printf_float+0x24c>
 800a436:	ee18 3a10 	vmov	r3, s16
 800a43a:	4652      	mov	r2, sl
 800a43c:	4631      	mov	r1, r6
 800a43e:	4628      	mov	r0, r5
 800a440:	47b8      	blx	r7
 800a442:	3001      	adds	r0, #1
 800a444:	f43f af09 	beq.w	800a25a <_printf_float+0xbe>
 800a448:	f04f 0900 	mov.w	r9, #0
 800a44c:	f104 0a1a 	add.w	sl, r4, #26
 800a450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a452:	425b      	negs	r3, r3
 800a454:	454b      	cmp	r3, r9
 800a456:	dc01      	bgt.n	800a45c <_printf_float+0x2c0>
 800a458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a45a:	e792      	b.n	800a382 <_printf_float+0x1e6>
 800a45c:	2301      	movs	r3, #1
 800a45e:	4652      	mov	r2, sl
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f aef7 	beq.w	800a25a <_printf_float+0xbe>
 800a46c:	f109 0901 	add.w	r9, r9, #1
 800a470:	e7ee      	b.n	800a450 <_printf_float+0x2b4>
 800a472:	bf00      	nop
 800a474:	7fefffff 	.word	0x7fefffff
 800a478:	0800cabc 	.word	0x0800cabc
 800a47c:	0800cac0 	.word	0x0800cac0
 800a480:	0800cac4 	.word	0x0800cac4
 800a484:	0800cac8 	.word	0x0800cac8
 800a488:	0800cacc 	.word	0x0800cacc
 800a48c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a48e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a490:	429a      	cmp	r2, r3
 800a492:	bfa8      	it	ge
 800a494:	461a      	movge	r2, r3
 800a496:	2a00      	cmp	r2, #0
 800a498:	4691      	mov	r9, r2
 800a49a:	dc37      	bgt.n	800a50c <_printf_float+0x370>
 800a49c:	f04f 0b00 	mov.w	fp, #0
 800a4a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4a4:	f104 021a 	add.w	r2, r4, #26
 800a4a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	eba3 0309 	sub.w	r3, r3, r9
 800a4b0:	455b      	cmp	r3, fp
 800a4b2:	dc33      	bgt.n	800a51c <_printf_float+0x380>
 800a4b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	db3b      	blt.n	800a534 <_printf_float+0x398>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	07da      	lsls	r2, r3, #31
 800a4c0:	d438      	bmi.n	800a534 <_printf_float+0x398>
 800a4c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4c6:	eba2 0903 	sub.w	r9, r2, r3
 800a4ca:	9b05      	ldr	r3, [sp, #20]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	4591      	cmp	r9, r2
 800a4d0:	bfa8      	it	ge
 800a4d2:	4691      	movge	r9, r2
 800a4d4:	f1b9 0f00 	cmp.w	r9, #0
 800a4d8:	dc35      	bgt.n	800a546 <_printf_float+0x3aa>
 800a4da:	f04f 0800 	mov.w	r8, #0
 800a4de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4e2:	f104 0a1a 	add.w	sl, r4, #26
 800a4e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	eba3 0309 	sub.w	r3, r3, r9
 800a4f0:	4543      	cmp	r3, r8
 800a4f2:	f77f af79 	ble.w	800a3e8 <_printf_float+0x24c>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4652      	mov	r2, sl
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	f43f aeaa 	beq.w	800a25a <_printf_float+0xbe>
 800a506:	f108 0801 	add.w	r8, r8, #1
 800a50a:	e7ec      	b.n	800a4e6 <_printf_float+0x34a>
 800a50c:	4613      	mov	r3, r2
 800a50e:	4631      	mov	r1, r6
 800a510:	4642      	mov	r2, r8
 800a512:	4628      	mov	r0, r5
 800a514:	47b8      	blx	r7
 800a516:	3001      	adds	r0, #1
 800a518:	d1c0      	bne.n	800a49c <_printf_float+0x300>
 800a51a:	e69e      	b.n	800a25a <_printf_float+0xbe>
 800a51c:	2301      	movs	r3, #1
 800a51e:	4631      	mov	r1, r6
 800a520:	4628      	mov	r0, r5
 800a522:	9205      	str	r2, [sp, #20]
 800a524:	47b8      	blx	r7
 800a526:	3001      	adds	r0, #1
 800a528:	f43f ae97 	beq.w	800a25a <_printf_float+0xbe>
 800a52c:	9a05      	ldr	r2, [sp, #20]
 800a52e:	f10b 0b01 	add.w	fp, fp, #1
 800a532:	e7b9      	b.n	800a4a8 <_printf_float+0x30c>
 800a534:	ee18 3a10 	vmov	r3, s16
 800a538:	4652      	mov	r2, sl
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b8      	blx	r7
 800a540:	3001      	adds	r0, #1
 800a542:	d1be      	bne.n	800a4c2 <_printf_float+0x326>
 800a544:	e689      	b.n	800a25a <_printf_float+0xbe>
 800a546:	9a05      	ldr	r2, [sp, #20]
 800a548:	464b      	mov	r3, r9
 800a54a:	4442      	add	r2, r8
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	d1c1      	bne.n	800a4da <_printf_float+0x33e>
 800a556:	e680      	b.n	800a25a <_printf_float+0xbe>
 800a558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a55a:	2a01      	cmp	r2, #1
 800a55c:	dc01      	bgt.n	800a562 <_printf_float+0x3c6>
 800a55e:	07db      	lsls	r3, r3, #31
 800a560:	d53a      	bpl.n	800a5d8 <_printf_float+0x43c>
 800a562:	2301      	movs	r3, #1
 800a564:	4642      	mov	r2, r8
 800a566:	4631      	mov	r1, r6
 800a568:	4628      	mov	r0, r5
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	f43f ae74 	beq.w	800a25a <_printf_float+0xbe>
 800a572:	ee18 3a10 	vmov	r3, s16
 800a576:	4652      	mov	r2, sl
 800a578:	4631      	mov	r1, r6
 800a57a:	4628      	mov	r0, r5
 800a57c:	47b8      	blx	r7
 800a57e:	3001      	adds	r0, #1
 800a580:	f43f ae6b 	beq.w	800a25a <_printf_float+0xbe>
 800a584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a588:	2200      	movs	r2, #0
 800a58a:	2300      	movs	r3, #0
 800a58c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a590:	f7f6 fab2 	bl	8000af8 <__aeabi_dcmpeq>
 800a594:	b9d8      	cbnz	r0, 800a5ce <_printf_float+0x432>
 800a596:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a59a:	f108 0201 	add.w	r2, r8, #1
 800a59e:	4631      	mov	r1, r6
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	47b8      	blx	r7
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d10e      	bne.n	800a5c6 <_printf_float+0x42a>
 800a5a8:	e657      	b.n	800a25a <_printf_float+0xbe>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4652      	mov	r2, sl
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f ae50 	beq.w	800a25a <_printf_float+0xbe>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	4543      	cmp	r3, r8
 800a5c4:	dcf1      	bgt.n	800a5aa <_printf_float+0x40e>
 800a5c6:	464b      	mov	r3, r9
 800a5c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5cc:	e6da      	b.n	800a384 <_printf_float+0x1e8>
 800a5ce:	f04f 0800 	mov.w	r8, #0
 800a5d2:	f104 0a1a 	add.w	sl, r4, #26
 800a5d6:	e7f2      	b.n	800a5be <_printf_float+0x422>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4642      	mov	r2, r8
 800a5dc:	e7df      	b.n	800a59e <_printf_float+0x402>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	464a      	mov	r2, r9
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b8      	blx	r7
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	f43f ae36 	beq.w	800a25a <_printf_float+0xbe>
 800a5ee:	f108 0801 	add.w	r8, r8, #1
 800a5f2:	68e3      	ldr	r3, [r4, #12]
 800a5f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5f6:	1a5b      	subs	r3, r3, r1
 800a5f8:	4543      	cmp	r3, r8
 800a5fa:	dcf0      	bgt.n	800a5de <_printf_float+0x442>
 800a5fc:	e6f8      	b.n	800a3f0 <_printf_float+0x254>
 800a5fe:	f04f 0800 	mov.w	r8, #0
 800a602:	f104 0919 	add.w	r9, r4, #25
 800a606:	e7f4      	b.n	800a5f2 <_printf_float+0x456>

0800a608 <_printf_common>:
 800a608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	4616      	mov	r6, r2
 800a60e:	4699      	mov	r9, r3
 800a610:	688a      	ldr	r2, [r1, #8]
 800a612:	690b      	ldr	r3, [r1, #16]
 800a614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a618:	4293      	cmp	r3, r2
 800a61a:	bfb8      	it	lt
 800a61c:	4613      	movlt	r3, r2
 800a61e:	6033      	str	r3, [r6, #0]
 800a620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a624:	4607      	mov	r7, r0
 800a626:	460c      	mov	r4, r1
 800a628:	b10a      	cbz	r2, 800a62e <_printf_common+0x26>
 800a62a:	3301      	adds	r3, #1
 800a62c:	6033      	str	r3, [r6, #0]
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	0699      	lsls	r1, r3, #26
 800a632:	bf42      	ittt	mi
 800a634:	6833      	ldrmi	r3, [r6, #0]
 800a636:	3302      	addmi	r3, #2
 800a638:	6033      	strmi	r3, [r6, #0]
 800a63a:	6825      	ldr	r5, [r4, #0]
 800a63c:	f015 0506 	ands.w	r5, r5, #6
 800a640:	d106      	bne.n	800a650 <_printf_common+0x48>
 800a642:	f104 0a19 	add.w	sl, r4, #25
 800a646:	68e3      	ldr	r3, [r4, #12]
 800a648:	6832      	ldr	r2, [r6, #0]
 800a64a:	1a9b      	subs	r3, r3, r2
 800a64c:	42ab      	cmp	r3, r5
 800a64e:	dc26      	bgt.n	800a69e <_printf_common+0x96>
 800a650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a654:	1e13      	subs	r3, r2, #0
 800a656:	6822      	ldr	r2, [r4, #0]
 800a658:	bf18      	it	ne
 800a65a:	2301      	movne	r3, #1
 800a65c:	0692      	lsls	r2, r2, #26
 800a65e:	d42b      	bmi.n	800a6b8 <_printf_common+0xb0>
 800a660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a664:	4649      	mov	r1, r9
 800a666:	4638      	mov	r0, r7
 800a668:	47c0      	blx	r8
 800a66a:	3001      	adds	r0, #1
 800a66c:	d01e      	beq.n	800a6ac <_printf_common+0xa4>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	6922      	ldr	r2, [r4, #16]
 800a672:	f003 0306 	and.w	r3, r3, #6
 800a676:	2b04      	cmp	r3, #4
 800a678:	bf02      	ittt	eq
 800a67a:	68e5      	ldreq	r5, [r4, #12]
 800a67c:	6833      	ldreq	r3, [r6, #0]
 800a67e:	1aed      	subeq	r5, r5, r3
 800a680:	68a3      	ldr	r3, [r4, #8]
 800a682:	bf0c      	ite	eq
 800a684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a688:	2500      	movne	r5, #0
 800a68a:	4293      	cmp	r3, r2
 800a68c:	bfc4      	itt	gt
 800a68e:	1a9b      	subgt	r3, r3, r2
 800a690:	18ed      	addgt	r5, r5, r3
 800a692:	2600      	movs	r6, #0
 800a694:	341a      	adds	r4, #26
 800a696:	42b5      	cmp	r5, r6
 800a698:	d11a      	bne.n	800a6d0 <_printf_common+0xc8>
 800a69a:	2000      	movs	r0, #0
 800a69c:	e008      	b.n	800a6b0 <_printf_common+0xa8>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	4652      	mov	r2, sl
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	47c0      	blx	r8
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	d103      	bne.n	800a6b4 <_printf_common+0xac>
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b4:	3501      	adds	r5, #1
 800a6b6:	e7c6      	b.n	800a646 <_printf_common+0x3e>
 800a6b8:	18e1      	adds	r1, r4, r3
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	2030      	movs	r0, #48	; 0x30
 800a6be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6c2:	4422      	add	r2, r4
 800a6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6cc:	3302      	adds	r3, #2
 800a6ce:	e7c7      	b.n	800a660 <_printf_common+0x58>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	4622      	mov	r2, r4
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	47c0      	blx	r8
 800a6da:	3001      	adds	r0, #1
 800a6dc:	d0e6      	beq.n	800a6ac <_printf_common+0xa4>
 800a6de:	3601      	adds	r6, #1
 800a6e0:	e7d9      	b.n	800a696 <_printf_common+0x8e>
	...

0800a6e4 <_printf_i>:
 800a6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e8:	7e0f      	ldrb	r7, [r1, #24]
 800a6ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6ec:	2f78      	cmp	r7, #120	; 0x78
 800a6ee:	4691      	mov	r9, r2
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	469a      	mov	sl, r3
 800a6f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6fa:	d807      	bhi.n	800a70c <_printf_i+0x28>
 800a6fc:	2f62      	cmp	r7, #98	; 0x62
 800a6fe:	d80a      	bhi.n	800a716 <_printf_i+0x32>
 800a700:	2f00      	cmp	r7, #0
 800a702:	f000 80d4 	beq.w	800a8ae <_printf_i+0x1ca>
 800a706:	2f58      	cmp	r7, #88	; 0x58
 800a708:	f000 80c0 	beq.w	800a88c <_printf_i+0x1a8>
 800a70c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a714:	e03a      	b.n	800a78c <_printf_i+0xa8>
 800a716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a71a:	2b15      	cmp	r3, #21
 800a71c:	d8f6      	bhi.n	800a70c <_printf_i+0x28>
 800a71e:	a101      	add	r1, pc, #4	; (adr r1, 800a724 <_printf_i+0x40>)
 800a720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a724:	0800a77d 	.word	0x0800a77d
 800a728:	0800a791 	.word	0x0800a791
 800a72c:	0800a70d 	.word	0x0800a70d
 800a730:	0800a70d 	.word	0x0800a70d
 800a734:	0800a70d 	.word	0x0800a70d
 800a738:	0800a70d 	.word	0x0800a70d
 800a73c:	0800a791 	.word	0x0800a791
 800a740:	0800a70d 	.word	0x0800a70d
 800a744:	0800a70d 	.word	0x0800a70d
 800a748:	0800a70d 	.word	0x0800a70d
 800a74c:	0800a70d 	.word	0x0800a70d
 800a750:	0800a895 	.word	0x0800a895
 800a754:	0800a7bd 	.word	0x0800a7bd
 800a758:	0800a84f 	.word	0x0800a84f
 800a75c:	0800a70d 	.word	0x0800a70d
 800a760:	0800a70d 	.word	0x0800a70d
 800a764:	0800a8b7 	.word	0x0800a8b7
 800a768:	0800a70d 	.word	0x0800a70d
 800a76c:	0800a7bd 	.word	0x0800a7bd
 800a770:	0800a70d 	.word	0x0800a70d
 800a774:	0800a70d 	.word	0x0800a70d
 800a778:	0800a857 	.word	0x0800a857
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	1d1a      	adds	r2, r3, #4
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	602a      	str	r2, [r5, #0]
 800a784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a78c:	2301      	movs	r3, #1
 800a78e:	e09f      	b.n	800a8d0 <_printf_i+0x1ec>
 800a790:	6820      	ldr	r0, [r4, #0]
 800a792:	682b      	ldr	r3, [r5, #0]
 800a794:	0607      	lsls	r7, r0, #24
 800a796:	f103 0104 	add.w	r1, r3, #4
 800a79a:	6029      	str	r1, [r5, #0]
 800a79c:	d501      	bpl.n	800a7a2 <_printf_i+0xbe>
 800a79e:	681e      	ldr	r6, [r3, #0]
 800a7a0:	e003      	b.n	800a7aa <_printf_i+0xc6>
 800a7a2:	0646      	lsls	r6, r0, #25
 800a7a4:	d5fb      	bpl.n	800a79e <_printf_i+0xba>
 800a7a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	da03      	bge.n	800a7b6 <_printf_i+0xd2>
 800a7ae:	232d      	movs	r3, #45	; 0x2d
 800a7b0:	4276      	negs	r6, r6
 800a7b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b6:	485a      	ldr	r0, [pc, #360]	; (800a920 <_printf_i+0x23c>)
 800a7b8:	230a      	movs	r3, #10
 800a7ba:	e012      	b.n	800a7e2 <_printf_i+0xfe>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	6820      	ldr	r0, [r4, #0]
 800a7c0:	1d19      	adds	r1, r3, #4
 800a7c2:	6029      	str	r1, [r5, #0]
 800a7c4:	0605      	lsls	r5, r0, #24
 800a7c6:	d501      	bpl.n	800a7cc <_printf_i+0xe8>
 800a7c8:	681e      	ldr	r6, [r3, #0]
 800a7ca:	e002      	b.n	800a7d2 <_printf_i+0xee>
 800a7cc:	0641      	lsls	r1, r0, #25
 800a7ce:	d5fb      	bpl.n	800a7c8 <_printf_i+0xe4>
 800a7d0:	881e      	ldrh	r6, [r3, #0]
 800a7d2:	4853      	ldr	r0, [pc, #332]	; (800a920 <_printf_i+0x23c>)
 800a7d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7d6:	bf0c      	ite	eq
 800a7d8:	2308      	moveq	r3, #8
 800a7da:	230a      	movne	r3, #10
 800a7dc:	2100      	movs	r1, #0
 800a7de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7e2:	6865      	ldr	r5, [r4, #4]
 800a7e4:	60a5      	str	r5, [r4, #8]
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	bfa2      	ittt	ge
 800a7ea:	6821      	ldrge	r1, [r4, #0]
 800a7ec:	f021 0104 	bicge.w	r1, r1, #4
 800a7f0:	6021      	strge	r1, [r4, #0]
 800a7f2:	b90e      	cbnz	r6, 800a7f8 <_printf_i+0x114>
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	d04b      	beq.n	800a890 <_printf_i+0x1ac>
 800a7f8:	4615      	mov	r5, r2
 800a7fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7fe:	fb03 6711 	mls	r7, r3, r1, r6
 800a802:	5dc7      	ldrb	r7, [r0, r7]
 800a804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a808:	4637      	mov	r7, r6
 800a80a:	42bb      	cmp	r3, r7
 800a80c:	460e      	mov	r6, r1
 800a80e:	d9f4      	bls.n	800a7fa <_printf_i+0x116>
 800a810:	2b08      	cmp	r3, #8
 800a812:	d10b      	bne.n	800a82c <_printf_i+0x148>
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	07de      	lsls	r6, r3, #31
 800a818:	d508      	bpl.n	800a82c <_printf_i+0x148>
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	6861      	ldr	r1, [r4, #4]
 800a81e:	4299      	cmp	r1, r3
 800a820:	bfde      	ittt	le
 800a822:	2330      	movle	r3, #48	; 0x30
 800a824:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a828:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a82c:	1b52      	subs	r2, r2, r5
 800a82e:	6122      	str	r2, [r4, #16]
 800a830:	f8cd a000 	str.w	sl, [sp]
 800a834:	464b      	mov	r3, r9
 800a836:	aa03      	add	r2, sp, #12
 800a838:	4621      	mov	r1, r4
 800a83a:	4640      	mov	r0, r8
 800a83c:	f7ff fee4 	bl	800a608 <_printf_common>
 800a840:	3001      	adds	r0, #1
 800a842:	d14a      	bne.n	800a8da <_printf_i+0x1f6>
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	b004      	add	sp, #16
 800a84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	f043 0320 	orr.w	r3, r3, #32
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	4833      	ldr	r0, [pc, #204]	; (800a924 <_printf_i+0x240>)
 800a858:	2778      	movs	r7, #120	; 0x78
 800a85a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	6829      	ldr	r1, [r5, #0]
 800a862:	061f      	lsls	r7, r3, #24
 800a864:	f851 6b04 	ldr.w	r6, [r1], #4
 800a868:	d402      	bmi.n	800a870 <_printf_i+0x18c>
 800a86a:	065f      	lsls	r7, r3, #25
 800a86c:	bf48      	it	mi
 800a86e:	b2b6      	uxthmi	r6, r6
 800a870:	07df      	lsls	r7, r3, #31
 800a872:	bf48      	it	mi
 800a874:	f043 0320 	orrmi.w	r3, r3, #32
 800a878:	6029      	str	r1, [r5, #0]
 800a87a:	bf48      	it	mi
 800a87c:	6023      	strmi	r3, [r4, #0]
 800a87e:	b91e      	cbnz	r6, 800a888 <_printf_i+0x1a4>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	f023 0320 	bic.w	r3, r3, #32
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	2310      	movs	r3, #16
 800a88a:	e7a7      	b.n	800a7dc <_printf_i+0xf8>
 800a88c:	4824      	ldr	r0, [pc, #144]	; (800a920 <_printf_i+0x23c>)
 800a88e:	e7e4      	b.n	800a85a <_printf_i+0x176>
 800a890:	4615      	mov	r5, r2
 800a892:	e7bd      	b.n	800a810 <_printf_i+0x12c>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	6826      	ldr	r6, [r4, #0]
 800a898:	6961      	ldr	r1, [r4, #20]
 800a89a:	1d18      	adds	r0, r3, #4
 800a89c:	6028      	str	r0, [r5, #0]
 800a89e:	0635      	lsls	r5, r6, #24
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	d501      	bpl.n	800a8a8 <_printf_i+0x1c4>
 800a8a4:	6019      	str	r1, [r3, #0]
 800a8a6:	e002      	b.n	800a8ae <_printf_i+0x1ca>
 800a8a8:	0670      	lsls	r0, r6, #25
 800a8aa:	d5fb      	bpl.n	800a8a4 <_printf_i+0x1c0>
 800a8ac:	8019      	strh	r1, [r3, #0]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	6123      	str	r3, [r4, #16]
 800a8b2:	4615      	mov	r5, r2
 800a8b4:	e7bc      	b.n	800a830 <_printf_i+0x14c>
 800a8b6:	682b      	ldr	r3, [r5, #0]
 800a8b8:	1d1a      	adds	r2, r3, #4
 800a8ba:	602a      	str	r2, [r5, #0]
 800a8bc:	681d      	ldr	r5, [r3, #0]
 800a8be:	6862      	ldr	r2, [r4, #4]
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f7f5 fc9c 	bl	8000200 <memchr>
 800a8c8:	b108      	cbz	r0, 800a8ce <_printf_i+0x1ea>
 800a8ca:	1b40      	subs	r0, r0, r5
 800a8cc:	6060      	str	r0, [r4, #4]
 800a8ce:	6863      	ldr	r3, [r4, #4]
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d8:	e7aa      	b.n	800a830 <_printf_i+0x14c>
 800a8da:	6923      	ldr	r3, [r4, #16]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	4649      	mov	r1, r9
 800a8e0:	4640      	mov	r0, r8
 800a8e2:	47d0      	blx	sl
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d0ad      	beq.n	800a844 <_printf_i+0x160>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	079b      	lsls	r3, r3, #30
 800a8ec:	d413      	bmi.n	800a916 <_printf_i+0x232>
 800a8ee:	68e0      	ldr	r0, [r4, #12]
 800a8f0:	9b03      	ldr	r3, [sp, #12]
 800a8f2:	4298      	cmp	r0, r3
 800a8f4:	bfb8      	it	lt
 800a8f6:	4618      	movlt	r0, r3
 800a8f8:	e7a6      	b.n	800a848 <_printf_i+0x164>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4632      	mov	r2, r6
 800a8fe:	4649      	mov	r1, r9
 800a900:	4640      	mov	r0, r8
 800a902:	47d0      	blx	sl
 800a904:	3001      	adds	r0, #1
 800a906:	d09d      	beq.n	800a844 <_printf_i+0x160>
 800a908:	3501      	adds	r5, #1
 800a90a:	68e3      	ldr	r3, [r4, #12]
 800a90c:	9903      	ldr	r1, [sp, #12]
 800a90e:	1a5b      	subs	r3, r3, r1
 800a910:	42ab      	cmp	r3, r5
 800a912:	dcf2      	bgt.n	800a8fa <_printf_i+0x216>
 800a914:	e7eb      	b.n	800a8ee <_printf_i+0x20a>
 800a916:	2500      	movs	r5, #0
 800a918:	f104 0619 	add.w	r6, r4, #25
 800a91c:	e7f5      	b.n	800a90a <_printf_i+0x226>
 800a91e:	bf00      	nop
 800a920:	0800cace 	.word	0x0800cace
 800a924:	0800cadf 	.word	0x0800cadf

0800a928 <std>:
 800a928:	2300      	movs	r3, #0
 800a92a:	b510      	push	{r4, lr}
 800a92c:	4604      	mov	r4, r0
 800a92e:	e9c0 3300 	strd	r3, r3, [r0]
 800a932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a936:	6083      	str	r3, [r0, #8]
 800a938:	8181      	strh	r1, [r0, #12]
 800a93a:	6643      	str	r3, [r0, #100]	; 0x64
 800a93c:	81c2      	strh	r2, [r0, #14]
 800a93e:	6183      	str	r3, [r0, #24]
 800a940:	4619      	mov	r1, r3
 800a942:	2208      	movs	r2, #8
 800a944:	305c      	adds	r0, #92	; 0x5c
 800a946:	f000 f8f4 	bl	800ab32 <memset>
 800a94a:	4b0d      	ldr	r3, [pc, #52]	; (800a980 <std+0x58>)
 800a94c:	6263      	str	r3, [r4, #36]	; 0x24
 800a94e:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <std+0x5c>)
 800a950:	62a3      	str	r3, [r4, #40]	; 0x28
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <std+0x60>)
 800a954:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a956:	4b0d      	ldr	r3, [pc, #52]	; (800a98c <std+0x64>)
 800a958:	6323      	str	r3, [r4, #48]	; 0x30
 800a95a:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <std+0x68>)
 800a95c:	6224      	str	r4, [r4, #32]
 800a95e:	429c      	cmp	r4, r3
 800a960:	d006      	beq.n	800a970 <std+0x48>
 800a962:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a966:	4294      	cmp	r4, r2
 800a968:	d002      	beq.n	800a970 <std+0x48>
 800a96a:	33d0      	adds	r3, #208	; 0xd0
 800a96c:	429c      	cmp	r4, r3
 800a96e:	d105      	bne.n	800a97c <std+0x54>
 800a970:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a978:	f000 b958 	b.w	800ac2c <__retarget_lock_init_recursive>
 800a97c:	bd10      	pop	{r4, pc}
 800a97e:	bf00      	nop
 800a980:	0800aaad 	.word	0x0800aaad
 800a984:	0800aacf 	.word	0x0800aacf
 800a988:	0800ab07 	.word	0x0800ab07
 800a98c:	0800ab2b 	.word	0x0800ab2b
 800a990:	200008e0 	.word	0x200008e0

0800a994 <stdio_exit_handler>:
 800a994:	4a02      	ldr	r2, [pc, #8]	; (800a9a0 <stdio_exit_handler+0xc>)
 800a996:	4903      	ldr	r1, [pc, #12]	; (800a9a4 <stdio_exit_handler+0x10>)
 800a998:	4803      	ldr	r0, [pc, #12]	; (800a9a8 <stdio_exit_handler+0x14>)
 800a99a:	f000 b869 	b.w	800aa70 <_fwalk_sglue>
 800a99e:	bf00      	nop
 800a9a0:	2000000c 	.word	0x2000000c
 800a9a4:	0800c331 	.word	0x0800c331
 800a9a8:	20000018 	.word	0x20000018

0800a9ac <cleanup_stdio>:
 800a9ac:	6841      	ldr	r1, [r0, #4]
 800a9ae:	4b0c      	ldr	r3, [pc, #48]	; (800a9e0 <cleanup_stdio+0x34>)
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	b510      	push	{r4, lr}
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	d001      	beq.n	800a9bc <cleanup_stdio+0x10>
 800a9b8:	f001 fcba 	bl	800c330 <_fflush_r>
 800a9bc:	68a1      	ldr	r1, [r4, #8]
 800a9be:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <cleanup_stdio+0x38>)
 800a9c0:	4299      	cmp	r1, r3
 800a9c2:	d002      	beq.n	800a9ca <cleanup_stdio+0x1e>
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f001 fcb3 	bl	800c330 <_fflush_r>
 800a9ca:	68e1      	ldr	r1, [r4, #12]
 800a9cc:	4b06      	ldr	r3, [pc, #24]	; (800a9e8 <cleanup_stdio+0x3c>)
 800a9ce:	4299      	cmp	r1, r3
 800a9d0:	d004      	beq.n	800a9dc <cleanup_stdio+0x30>
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d8:	f001 bcaa 	b.w	800c330 <_fflush_r>
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	bf00      	nop
 800a9e0:	200008e0 	.word	0x200008e0
 800a9e4:	20000948 	.word	0x20000948
 800a9e8:	200009b0 	.word	0x200009b0

0800a9ec <global_stdio_init.part.0>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <global_stdio_init.part.0+0x30>)
 800a9f0:	4c0b      	ldr	r4, [pc, #44]	; (800aa20 <global_stdio_init.part.0+0x34>)
 800a9f2:	4a0c      	ldr	r2, [pc, #48]	; (800aa24 <global_stdio_init.part.0+0x38>)
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	f7ff ff94 	bl	800a928 <std>
 800aa00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa04:	2201      	movs	r2, #1
 800aa06:	2109      	movs	r1, #9
 800aa08:	f7ff ff8e 	bl	800a928 <std>
 800aa0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa10:	2202      	movs	r2, #2
 800aa12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa16:	2112      	movs	r1, #18
 800aa18:	f7ff bf86 	b.w	800a928 <std>
 800aa1c:	20000a18 	.word	0x20000a18
 800aa20:	200008e0 	.word	0x200008e0
 800aa24:	0800a995 	.word	0x0800a995

0800aa28 <__sfp_lock_acquire>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__sfp_lock_acquire+0x8>)
 800aa2a:	f000 b900 	b.w	800ac2e <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20000a21 	.word	0x20000a21

0800aa34 <__sfp_lock_release>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__sfp_lock_release+0x8>)
 800aa36:	f000 b8fb 	b.w	800ac30 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	20000a21 	.word	0x20000a21

0800aa40 <__sinit>:
 800aa40:	b510      	push	{r4, lr}
 800aa42:	4604      	mov	r4, r0
 800aa44:	f7ff fff0 	bl	800aa28 <__sfp_lock_acquire>
 800aa48:	6a23      	ldr	r3, [r4, #32]
 800aa4a:	b11b      	cbz	r3, 800aa54 <__sinit+0x14>
 800aa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa50:	f7ff bff0 	b.w	800aa34 <__sfp_lock_release>
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <__sinit+0x28>)
 800aa56:	6223      	str	r3, [r4, #32]
 800aa58:	4b04      	ldr	r3, [pc, #16]	; (800aa6c <__sinit+0x2c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f5      	bne.n	800aa4c <__sinit+0xc>
 800aa60:	f7ff ffc4 	bl	800a9ec <global_stdio_init.part.0>
 800aa64:	e7f2      	b.n	800aa4c <__sinit+0xc>
 800aa66:	bf00      	nop
 800aa68:	0800a9ad 	.word	0x0800a9ad
 800aa6c:	20000a18 	.word	0x20000a18

0800aa70 <_fwalk_sglue>:
 800aa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa74:	4607      	mov	r7, r0
 800aa76:	4688      	mov	r8, r1
 800aa78:	4614      	mov	r4, r2
 800aa7a:	2600      	movs	r6, #0
 800aa7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa80:	f1b9 0901 	subs.w	r9, r9, #1
 800aa84:	d505      	bpl.n	800aa92 <_fwalk_sglue+0x22>
 800aa86:	6824      	ldr	r4, [r4, #0]
 800aa88:	2c00      	cmp	r4, #0
 800aa8a:	d1f7      	bne.n	800aa7c <_fwalk_sglue+0xc>
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa92:	89ab      	ldrh	r3, [r5, #12]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d907      	bls.n	800aaa8 <_fwalk_sglue+0x38>
 800aa98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	d003      	beq.n	800aaa8 <_fwalk_sglue+0x38>
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	47c0      	blx	r8
 800aaa6:	4306      	orrs	r6, r0
 800aaa8:	3568      	adds	r5, #104	; 0x68
 800aaaa:	e7e9      	b.n	800aa80 <_fwalk_sglue+0x10>

0800aaac <__sread>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	460c      	mov	r4, r1
 800aab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab4:	f000 f86c 	bl	800ab90 <_read_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	bfab      	itete	ge
 800aabc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aabe:	89a3      	ldrhlt	r3, [r4, #12]
 800aac0:	181b      	addge	r3, r3, r0
 800aac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aac6:	bfac      	ite	ge
 800aac8:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaca:	81a3      	strhlt	r3, [r4, #12]
 800aacc:	bd10      	pop	{r4, pc}

0800aace <__swrite>:
 800aace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad2:	461f      	mov	r7, r3
 800aad4:	898b      	ldrh	r3, [r1, #12]
 800aad6:	05db      	lsls	r3, r3, #23
 800aad8:	4605      	mov	r5, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	4616      	mov	r6, r2
 800aade:	d505      	bpl.n	800aaec <__swrite+0x1e>
 800aae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae4:	2302      	movs	r3, #2
 800aae6:	2200      	movs	r2, #0
 800aae8:	f000 f840 	bl	800ab6c <_lseek_r>
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaf6:	81a3      	strh	r3, [r4, #12]
 800aaf8:	4632      	mov	r2, r6
 800aafa:	463b      	mov	r3, r7
 800aafc:	4628      	mov	r0, r5
 800aafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab02:	f000 b857 	b.w	800abb4 <_write_r>

0800ab06 <__sseek>:
 800ab06:	b510      	push	{r4, lr}
 800ab08:	460c      	mov	r4, r1
 800ab0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab0e:	f000 f82d 	bl	800ab6c <_lseek_r>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	bf15      	itete	ne
 800ab18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab22:	81a3      	strheq	r3, [r4, #12]
 800ab24:	bf18      	it	ne
 800ab26:	81a3      	strhne	r3, [r4, #12]
 800ab28:	bd10      	pop	{r4, pc}

0800ab2a <__sclose>:
 800ab2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2e:	f000 b80d 	b.w	800ab4c <_close_r>

0800ab32 <memset>:
 800ab32:	4402      	add	r2, r0
 800ab34:	4603      	mov	r3, r0
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d100      	bne.n	800ab3c <memset+0xa>
 800ab3a:	4770      	bx	lr
 800ab3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ab40:	e7f9      	b.n	800ab36 <memset+0x4>
	...

0800ab44 <_localeconv_r>:
 800ab44:	4800      	ldr	r0, [pc, #0]	; (800ab48 <_localeconv_r+0x4>)
 800ab46:	4770      	bx	lr
 800ab48:	20000158 	.word	0x20000158

0800ab4c <_close_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4d06      	ldr	r5, [pc, #24]	; (800ab68 <_close_r+0x1c>)
 800ab50:	2300      	movs	r3, #0
 800ab52:	4604      	mov	r4, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	f7f8 fa7b 	bl	8003052 <_close>
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	d102      	bne.n	800ab66 <_close_r+0x1a>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	b103      	cbz	r3, 800ab66 <_close_r+0x1a>
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	20000a1c 	.word	0x20000a1c

0800ab6c <_lseek_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d07      	ldr	r5, [pc, #28]	; (800ab8c <_lseek_r+0x20>)
 800ab70:	4604      	mov	r4, r0
 800ab72:	4608      	mov	r0, r1
 800ab74:	4611      	mov	r1, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	602a      	str	r2, [r5, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f7f8 fa90 	bl	80030a0 <_lseek>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_lseek_r+0x1e>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_lseek_r+0x1e>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	20000a1c 	.word	0x20000a1c

0800ab90 <_read_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4d07      	ldr	r5, [pc, #28]	; (800abb0 <_read_r+0x20>)
 800ab94:	4604      	mov	r4, r0
 800ab96:	4608      	mov	r0, r1
 800ab98:	4611      	mov	r1, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	602a      	str	r2, [r5, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f7f8 fa1e 	bl	8002fe0 <_read>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_read_r+0x1e>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_read_r+0x1e>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20000a1c 	.word	0x20000a1c

0800abb4 <_write_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	; (800abd4 <_write_r+0x20>)
 800abb8:	4604      	mov	r4, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	2200      	movs	r2, #0
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f8 fa29 	bl	800301a <_write>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_write_r+0x1e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_write_r+0x1e>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20000a1c 	.word	0x20000a1c

0800abd8 <__errno>:
 800abd8:	4b01      	ldr	r3, [pc, #4]	; (800abe0 <__errno+0x8>)
 800abda:	6818      	ldr	r0, [r3, #0]
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	20000064 	.word	0x20000064

0800abe4 <__libc_init_array>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	4d0d      	ldr	r5, [pc, #52]	; (800ac1c <__libc_init_array+0x38>)
 800abe8:	4c0d      	ldr	r4, [pc, #52]	; (800ac20 <__libc_init_array+0x3c>)
 800abea:	1b64      	subs	r4, r4, r5
 800abec:	10a4      	asrs	r4, r4, #2
 800abee:	2600      	movs	r6, #0
 800abf0:	42a6      	cmp	r6, r4
 800abf2:	d109      	bne.n	800ac08 <__libc_init_array+0x24>
 800abf4:	4d0b      	ldr	r5, [pc, #44]	; (800ac24 <__libc_init_array+0x40>)
 800abf6:	4c0c      	ldr	r4, [pc, #48]	; (800ac28 <__libc_init_array+0x44>)
 800abf8:	f001 feee 	bl	800c9d8 <_init>
 800abfc:	1b64      	subs	r4, r4, r5
 800abfe:	10a4      	asrs	r4, r4, #2
 800ac00:	2600      	movs	r6, #0
 800ac02:	42a6      	cmp	r6, r4
 800ac04:	d105      	bne.n	800ac12 <__libc_init_array+0x2e>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0c:	4798      	blx	r3
 800ac0e:	3601      	adds	r6, #1
 800ac10:	e7ee      	b.n	800abf0 <__libc_init_array+0xc>
 800ac12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac16:	4798      	blx	r3
 800ac18:	3601      	adds	r6, #1
 800ac1a:	e7f2      	b.n	800ac02 <__libc_init_array+0x1e>
 800ac1c:	0800ce34 	.word	0x0800ce34
 800ac20:	0800ce34 	.word	0x0800ce34
 800ac24:	0800ce34 	.word	0x0800ce34
 800ac28:	0800ce38 	.word	0x0800ce38

0800ac2c <__retarget_lock_init_recursive>:
 800ac2c:	4770      	bx	lr

0800ac2e <__retarget_lock_acquire_recursive>:
 800ac2e:	4770      	bx	lr

0800ac30 <__retarget_lock_release_recursive>:
 800ac30:	4770      	bx	lr

0800ac32 <quorem>:
 800ac32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac36:	6903      	ldr	r3, [r0, #16]
 800ac38:	690c      	ldr	r4, [r1, #16]
 800ac3a:	42a3      	cmp	r3, r4
 800ac3c:	4607      	mov	r7, r0
 800ac3e:	db7e      	blt.n	800ad3e <quorem+0x10c>
 800ac40:	3c01      	subs	r4, #1
 800ac42:	f101 0814 	add.w	r8, r1, #20
 800ac46:	f100 0514 	add.w	r5, r0, #20
 800ac4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac64:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac68:	d331      	bcc.n	800acce <quorem+0x9c>
 800ac6a:	f04f 0e00 	mov.w	lr, #0
 800ac6e:	4640      	mov	r0, r8
 800ac70:	46ac      	mov	ip, r5
 800ac72:	46f2      	mov	sl, lr
 800ac74:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac78:	b293      	uxth	r3, r2
 800ac7a:	fb06 e303 	mla	r3, r6, r3, lr
 800ac7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac82:	0c1a      	lsrs	r2, r3, #16
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	ebaa 0303 	sub.w	r3, sl, r3
 800ac8a:	f8dc a000 	ldr.w	sl, [ip]
 800ac8e:	fa13 f38a 	uxtah	r3, r3, sl
 800ac92:	fb06 220e 	mla	r2, r6, lr, r2
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	9b00      	ldr	r3, [sp, #0]
 800ac9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac9e:	b292      	uxth	r2, r2
 800aca0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aca8:	f8bd 3000 	ldrh.w	r3, [sp]
 800acac:	4581      	cmp	r9, r0
 800acae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acb2:	f84c 3b04 	str.w	r3, [ip], #4
 800acb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800acba:	d2db      	bcs.n	800ac74 <quorem+0x42>
 800acbc:	f855 300b 	ldr.w	r3, [r5, fp]
 800acc0:	b92b      	cbnz	r3, 800acce <quorem+0x9c>
 800acc2:	9b01      	ldr	r3, [sp, #4]
 800acc4:	3b04      	subs	r3, #4
 800acc6:	429d      	cmp	r5, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	d32c      	bcc.n	800ad26 <quorem+0xf4>
 800accc:	613c      	str	r4, [r7, #16]
 800acce:	4638      	mov	r0, r7
 800acd0:	f001 f9a8 	bl	800c024 <__mcmp>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	db22      	blt.n	800ad1e <quorem+0xec>
 800acd8:	3601      	adds	r6, #1
 800acda:	4629      	mov	r1, r5
 800acdc:	2000      	movs	r0, #0
 800acde:	f858 2b04 	ldr.w	r2, [r8], #4
 800ace2:	f8d1 c000 	ldr.w	ip, [r1]
 800ace6:	b293      	uxth	r3, r2
 800ace8:	1ac3      	subs	r3, r0, r3
 800acea:	0c12      	lsrs	r2, r2, #16
 800acec:	fa13 f38c 	uxtah	r3, r3, ip
 800acf0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800acf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acfe:	45c1      	cmp	r9, r8
 800ad00:	f841 3b04 	str.w	r3, [r1], #4
 800ad04:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad08:	d2e9      	bcs.n	800acde <quorem+0xac>
 800ad0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad12:	b922      	cbnz	r2, 800ad1e <quorem+0xec>
 800ad14:	3b04      	subs	r3, #4
 800ad16:	429d      	cmp	r5, r3
 800ad18:	461a      	mov	r2, r3
 800ad1a:	d30a      	bcc.n	800ad32 <quorem+0x100>
 800ad1c:	613c      	str	r4, [r7, #16]
 800ad1e:	4630      	mov	r0, r6
 800ad20:	b003      	add	sp, #12
 800ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad26:	6812      	ldr	r2, [r2, #0]
 800ad28:	3b04      	subs	r3, #4
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	d1ce      	bne.n	800accc <quorem+0x9a>
 800ad2e:	3c01      	subs	r4, #1
 800ad30:	e7c9      	b.n	800acc6 <quorem+0x94>
 800ad32:	6812      	ldr	r2, [r2, #0]
 800ad34:	3b04      	subs	r3, #4
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	d1f0      	bne.n	800ad1c <quorem+0xea>
 800ad3a:	3c01      	subs	r4, #1
 800ad3c:	e7eb      	b.n	800ad16 <quorem+0xe4>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	e7ee      	b.n	800ad20 <quorem+0xee>
 800ad42:	0000      	movs	r0, r0
 800ad44:	0000      	movs	r0, r0
	...

0800ad48 <_dtoa_r>:
 800ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	ed2d 8b04 	vpush	{d8-d9}
 800ad50:	69c5      	ldr	r5, [r0, #28]
 800ad52:	b093      	sub	sp, #76	; 0x4c
 800ad54:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad58:	ec57 6b10 	vmov	r6, r7, d0
 800ad5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad60:	9107      	str	r1, [sp, #28]
 800ad62:	4604      	mov	r4, r0
 800ad64:	920a      	str	r2, [sp, #40]	; 0x28
 800ad66:	930d      	str	r3, [sp, #52]	; 0x34
 800ad68:	b975      	cbnz	r5, 800ad88 <_dtoa_r+0x40>
 800ad6a:	2010      	movs	r0, #16
 800ad6c:	f000 fe2a 	bl	800b9c4 <malloc>
 800ad70:	4602      	mov	r2, r0
 800ad72:	61e0      	str	r0, [r4, #28]
 800ad74:	b920      	cbnz	r0, 800ad80 <_dtoa_r+0x38>
 800ad76:	4bae      	ldr	r3, [pc, #696]	; (800b030 <_dtoa_r+0x2e8>)
 800ad78:	21ef      	movs	r1, #239	; 0xef
 800ad7a:	48ae      	ldr	r0, [pc, #696]	; (800b034 <_dtoa_r+0x2ec>)
 800ad7c:	f001 fb1e 	bl	800c3bc <__assert_func>
 800ad80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad84:	6005      	str	r5, [r0, #0]
 800ad86:	60c5      	str	r5, [r0, #12]
 800ad88:	69e3      	ldr	r3, [r4, #28]
 800ad8a:	6819      	ldr	r1, [r3, #0]
 800ad8c:	b151      	cbz	r1, 800ada4 <_dtoa_r+0x5c>
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	604a      	str	r2, [r1, #4]
 800ad92:	2301      	movs	r3, #1
 800ad94:	4093      	lsls	r3, r2
 800ad96:	608b      	str	r3, [r1, #8]
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 ff07 	bl	800bbac <_Bfree>
 800ad9e:	69e3      	ldr	r3, [r4, #28]
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	1e3b      	subs	r3, r7, #0
 800ada6:	bfbb      	ittet	lt
 800ada8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800adac:	9303      	strlt	r3, [sp, #12]
 800adae:	2300      	movge	r3, #0
 800adb0:	2201      	movlt	r2, #1
 800adb2:	bfac      	ite	ge
 800adb4:	f8c8 3000 	strge.w	r3, [r8]
 800adb8:	f8c8 2000 	strlt.w	r2, [r8]
 800adbc:	4b9e      	ldr	r3, [pc, #632]	; (800b038 <_dtoa_r+0x2f0>)
 800adbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800adc2:	ea33 0308 	bics.w	r3, r3, r8
 800adc6:	d11b      	bne.n	800ae00 <_dtoa_r+0xb8>
 800adc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adca:	f242 730f 	movw	r3, #9999	; 0x270f
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800add4:	4333      	orrs	r3, r6
 800add6:	f000 8593 	beq.w	800b900 <_dtoa_r+0xbb8>
 800adda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800addc:	b963      	cbnz	r3, 800adf8 <_dtoa_r+0xb0>
 800adde:	4b97      	ldr	r3, [pc, #604]	; (800b03c <_dtoa_r+0x2f4>)
 800ade0:	e027      	b.n	800ae32 <_dtoa_r+0xea>
 800ade2:	4b97      	ldr	r3, [pc, #604]	; (800b040 <_dtoa_r+0x2f8>)
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	3308      	adds	r3, #8
 800ade8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	9800      	ldr	r0, [sp, #0]
 800adee:	b013      	add	sp, #76	; 0x4c
 800adf0:	ecbd 8b04 	vpop	{d8-d9}
 800adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf8:	4b90      	ldr	r3, [pc, #576]	; (800b03c <_dtoa_r+0x2f4>)
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	3303      	adds	r3, #3
 800adfe:	e7f3      	b.n	800ade8 <_dtoa_r+0xa0>
 800ae00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae04:	2200      	movs	r2, #0
 800ae06:	ec51 0b17 	vmov	r0, r1, d7
 800ae0a:	eeb0 8a47 	vmov.f32	s16, s14
 800ae0e:	eef0 8a67 	vmov.f32	s17, s15
 800ae12:	2300      	movs	r3, #0
 800ae14:	f7f5 fe70 	bl	8000af8 <__aeabi_dcmpeq>
 800ae18:	4681      	mov	r9, r0
 800ae1a:	b160      	cbz	r0, 800ae36 <_dtoa_r+0xee>
 800ae1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae1e:	2301      	movs	r3, #1
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 8568 	beq.w	800b8fa <_dtoa_r+0xbb2>
 800ae2a:	4b86      	ldr	r3, [pc, #536]	; (800b044 <_dtoa_r+0x2fc>)
 800ae2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	e7da      	b.n	800adec <_dtoa_r+0xa4>
 800ae36:	aa10      	add	r2, sp, #64	; 0x40
 800ae38:	a911      	add	r1, sp, #68	; 0x44
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae40:	eef0 0a68 	vmov.f32	s1, s17
 800ae44:	f001 f994 	bl	800c170 <__d2b>
 800ae48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae4c:	4682      	mov	sl, r0
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	d07f      	beq.n	800af52 <_dtoa_r+0x20a>
 800ae52:	ee18 3a90 	vmov	r3, s17
 800ae56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ae5e:	ec51 0b18 	vmov	r0, r1, d8
 800ae62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ae6e:	4619      	mov	r1, r3
 800ae70:	2200      	movs	r2, #0
 800ae72:	4b75      	ldr	r3, [pc, #468]	; (800b048 <_dtoa_r+0x300>)
 800ae74:	f7f5 fa20 	bl	80002b8 <__aeabi_dsub>
 800ae78:	a367      	add	r3, pc, #412	; (adr r3, 800b018 <_dtoa_r+0x2d0>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f7f5 fbd3 	bl	8000628 <__aeabi_dmul>
 800ae82:	a367      	add	r3, pc, #412	; (adr r3, 800b020 <_dtoa_r+0x2d8>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 fa18 	bl	80002bc <__adddf3>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	4628      	mov	r0, r5
 800ae90:	460f      	mov	r7, r1
 800ae92:	f7f5 fb5f 	bl	8000554 <__aeabi_i2d>
 800ae96:	a364      	add	r3, pc, #400	; (adr r3, 800b028 <_dtoa_r+0x2e0>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	f7f5 fbc4 	bl	8000628 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4630      	mov	r0, r6
 800aea6:	4639      	mov	r1, r7
 800aea8:	f7f5 fa08 	bl	80002bc <__adddf3>
 800aeac:	4606      	mov	r6, r0
 800aeae:	460f      	mov	r7, r1
 800aeb0:	f7f5 fe6a 	bl	8000b88 <__aeabi_d2iz>
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4683      	mov	fp, r0
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4630      	mov	r0, r6
 800aebc:	4639      	mov	r1, r7
 800aebe:	f7f5 fe25 	bl	8000b0c <__aeabi_dcmplt>
 800aec2:	b148      	cbz	r0, 800aed8 <_dtoa_r+0x190>
 800aec4:	4658      	mov	r0, fp
 800aec6:	f7f5 fb45 	bl	8000554 <__aeabi_i2d>
 800aeca:	4632      	mov	r2, r6
 800aecc:	463b      	mov	r3, r7
 800aece:	f7f5 fe13 	bl	8000af8 <__aeabi_dcmpeq>
 800aed2:	b908      	cbnz	r0, 800aed8 <_dtoa_r+0x190>
 800aed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aed8:	f1bb 0f16 	cmp.w	fp, #22
 800aedc:	d857      	bhi.n	800af8e <_dtoa_r+0x246>
 800aede:	4b5b      	ldr	r3, [pc, #364]	; (800b04c <_dtoa_r+0x304>)
 800aee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	ec51 0b18 	vmov	r0, r1, d8
 800aeec:	f7f5 fe0e 	bl	8000b0c <__aeabi_dcmplt>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d04e      	beq.n	800af92 <_dtoa_r+0x24a>
 800aef4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aef8:	2300      	movs	r3, #0
 800aefa:	930c      	str	r3, [sp, #48]	; 0x30
 800aefc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aefe:	1b5b      	subs	r3, r3, r5
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	bf45      	ittet	mi
 800af04:	f1c3 0301 	rsbmi	r3, r3, #1
 800af08:	9305      	strmi	r3, [sp, #20]
 800af0a:	2300      	movpl	r3, #0
 800af0c:	2300      	movmi	r3, #0
 800af0e:	9206      	str	r2, [sp, #24]
 800af10:	bf54      	ite	pl
 800af12:	9305      	strpl	r3, [sp, #20]
 800af14:	9306      	strmi	r3, [sp, #24]
 800af16:	f1bb 0f00 	cmp.w	fp, #0
 800af1a:	db3c      	blt.n	800af96 <_dtoa_r+0x24e>
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800af22:	445b      	add	r3, fp
 800af24:	9306      	str	r3, [sp, #24]
 800af26:	2300      	movs	r3, #0
 800af28:	9308      	str	r3, [sp, #32]
 800af2a:	9b07      	ldr	r3, [sp, #28]
 800af2c:	2b09      	cmp	r3, #9
 800af2e:	d868      	bhi.n	800b002 <_dtoa_r+0x2ba>
 800af30:	2b05      	cmp	r3, #5
 800af32:	bfc4      	itt	gt
 800af34:	3b04      	subgt	r3, #4
 800af36:	9307      	strgt	r3, [sp, #28]
 800af38:	9b07      	ldr	r3, [sp, #28]
 800af3a:	f1a3 0302 	sub.w	r3, r3, #2
 800af3e:	bfcc      	ite	gt
 800af40:	2500      	movgt	r5, #0
 800af42:	2501      	movle	r5, #1
 800af44:	2b03      	cmp	r3, #3
 800af46:	f200 8085 	bhi.w	800b054 <_dtoa_r+0x30c>
 800af4a:	e8df f003 	tbb	[pc, r3]
 800af4e:	3b2e      	.short	0x3b2e
 800af50:	5839      	.short	0x5839
 800af52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af56:	441d      	add	r5, r3
 800af58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	bfc1      	itttt	gt
 800af60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af64:	fa08 f803 	lslgt.w	r8, r8, r3
 800af68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800af6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800af70:	bfd6      	itet	le
 800af72:	f1c3 0320 	rsble	r3, r3, #32
 800af76:	ea48 0003 	orrgt.w	r0, r8, r3
 800af7a:	fa06 f003 	lslle.w	r0, r6, r3
 800af7e:	f7f5 fad9 	bl	8000534 <__aeabi_ui2d>
 800af82:	2201      	movs	r2, #1
 800af84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800af88:	3d01      	subs	r5, #1
 800af8a:	920e      	str	r2, [sp, #56]	; 0x38
 800af8c:	e76f      	b.n	800ae6e <_dtoa_r+0x126>
 800af8e:	2301      	movs	r3, #1
 800af90:	e7b3      	b.n	800aefa <_dtoa_r+0x1b2>
 800af92:	900c      	str	r0, [sp, #48]	; 0x30
 800af94:	e7b2      	b.n	800aefc <_dtoa_r+0x1b4>
 800af96:	9b05      	ldr	r3, [sp, #20]
 800af98:	eba3 030b 	sub.w	r3, r3, fp
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	f1cb 0300 	rsb	r3, fp, #0
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	2300      	movs	r3, #0
 800afa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa8:	e7bf      	b.n	800af2a <_dtoa_r+0x1e2>
 800afaa:	2300      	movs	r3, #0
 800afac:	9309      	str	r3, [sp, #36]	; 0x24
 800afae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dc52      	bgt.n	800b05a <_dtoa_r+0x312>
 800afb4:	2301      	movs	r3, #1
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	461a      	mov	r2, r3
 800afbc:	920a      	str	r2, [sp, #40]	; 0x28
 800afbe:	e00b      	b.n	800afd8 <_dtoa_r+0x290>
 800afc0:	2301      	movs	r3, #1
 800afc2:	e7f3      	b.n	800afac <_dtoa_r+0x264>
 800afc4:	2300      	movs	r3, #0
 800afc6:	9309      	str	r3, [sp, #36]	; 0x24
 800afc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afca:	445b      	add	r3, fp
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	3301      	adds	r3, #1
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	bfb8      	it	lt
 800afd6:	2301      	movlt	r3, #1
 800afd8:	69e0      	ldr	r0, [r4, #28]
 800afda:	2100      	movs	r1, #0
 800afdc:	2204      	movs	r2, #4
 800afde:	f102 0614 	add.w	r6, r2, #20
 800afe2:	429e      	cmp	r6, r3
 800afe4:	d93d      	bls.n	800b062 <_dtoa_r+0x31a>
 800afe6:	6041      	str	r1, [r0, #4]
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 fd9f 	bl	800bb2c <_Balloc>
 800afee:	9000      	str	r0, [sp, #0]
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d139      	bne.n	800b068 <_dtoa_r+0x320>
 800aff4:	4b16      	ldr	r3, [pc, #88]	; (800b050 <_dtoa_r+0x308>)
 800aff6:	4602      	mov	r2, r0
 800aff8:	f240 11af 	movw	r1, #431	; 0x1af
 800affc:	e6bd      	b.n	800ad7a <_dtoa_r+0x32>
 800affe:	2301      	movs	r3, #1
 800b000:	e7e1      	b.n	800afc6 <_dtoa_r+0x27e>
 800b002:	2501      	movs	r5, #1
 800b004:	2300      	movs	r3, #0
 800b006:	9307      	str	r3, [sp, #28]
 800b008:	9509      	str	r5, [sp, #36]	; 0x24
 800b00a:	f04f 33ff 	mov.w	r3, #4294967295
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	2200      	movs	r2, #0
 800b014:	2312      	movs	r3, #18
 800b016:	e7d1      	b.n	800afbc <_dtoa_r+0x274>
 800b018:	636f4361 	.word	0x636f4361
 800b01c:	3fd287a7 	.word	0x3fd287a7
 800b020:	8b60c8b3 	.word	0x8b60c8b3
 800b024:	3fc68a28 	.word	0x3fc68a28
 800b028:	509f79fb 	.word	0x509f79fb
 800b02c:	3fd34413 	.word	0x3fd34413
 800b030:	0800cafd 	.word	0x0800cafd
 800b034:	0800cb14 	.word	0x0800cb14
 800b038:	7ff00000 	.word	0x7ff00000
 800b03c:	0800caf9 	.word	0x0800caf9
 800b040:	0800caf0 	.word	0x0800caf0
 800b044:	0800cacd 	.word	0x0800cacd
 800b048:	3ff80000 	.word	0x3ff80000
 800b04c:	0800cc00 	.word	0x0800cc00
 800b050:	0800cb6c 	.word	0x0800cb6c
 800b054:	2301      	movs	r3, #1
 800b056:	9309      	str	r3, [sp, #36]	; 0x24
 800b058:	e7d7      	b.n	800b00a <_dtoa_r+0x2c2>
 800b05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	9304      	str	r3, [sp, #16]
 800b060:	e7ba      	b.n	800afd8 <_dtoa_r+0x290>
 800b062:	3101      	adds	r1, #1
 800b064:	0052      	lsls	r2, r2, #1
 800b066:	e7ba      	b.n	800afde <_dtoa_r+0x296>
 800b068:	69e3      	ldr	r3, [r4, #28]
 800b06a:	9a00      	ldr	r2, [sp, #0]
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	2b0e      	cmp	r3, #14
 800b072:	f200 80a8 	bhi.w	800b1c6 <_dtoa_r+0x47e>
 800b076:	2d00      	cmp	r5, #0
 800b078:	f000 80a5 	beq.w	800b1c6 <_dtoa_r+0x47e>
 800b07c:	f1bb 0f00 	cmp.w	fp, #0
 800b080:	dd38      	ble.n	800b0f4 <_dtoa_r+0x3ac>
 800b082:	4bc0      	ldr	r3, [pc, #768]	; (800b384 <_dtoa_r+0x63c>)
 800b084:	f00b 020f 	and.w	r2, fp, #15
 800b088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b08c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b090:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b094:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b098:	d019      	beq.n	800b0ce <_dtoa_r+0x386>
 800b09a:	4bbb      	ldr	r3, [pc, #748]	; (800b388 <_dtoa_r+0x640>)
 800b09c:	ec51 0b18 	vmov	r0, r1, d8
 800b0a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0a4:	f7f5 fbea 	bl	800087c <__aeabi_ddiv>
 800b0a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ac:	f008 080f 	and.w	r8, r8, #15
 800b0b0:	2503      	movs	r5, #3
 800b0b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b388 <_dtoa_r+0x640>
 800b0b6:	f1b8 0f00 	cmp.w	r8, #0
 800b0ba:	d10a      	bne.n	800b0d2 <_dtoa_r+0x38a>
 800b0bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	463b      	mov	r3, r7
 800b0c4:	f7f5 fbda 	bl	800087c <__aeabi_ddiv>
 800b0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0cc:	e02b      	b.n	800b126 <_dtoa_r+0x3de>
 800b0ce:	2502      	movs	r5, #2
 800b0d0:	e7ef      	b.n	800b0b2 <_dtoa_r+0x36a>
 800b0d2:	f018 0f01 	tst.w	r8, #1
 800b0d6:	d008      	beq.n	800b0ea <_dtoa_r+0x3a2>
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b0e0:	f7f5 faa2 	bl	8000628 <__aeabi_dmul>
 800b0e4:	3501      	adds	r5, #1
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	460f      	mov	r7, r1
 800b0ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b0ee:	f109 0908 	add.w	r9, r9, #8
 800b0f2:	e7e0      	b.n	800b0b6 <_dtoa_r+0x36e>
 800b0f4:	f000 809f 	beq.w	800b236 <_dtoa_r+0x4ee>
 800b0f8:	f1cb 0600 	rsb	r6, fp, #0
 800b0fc:	4ba1      	ldr	r3, [pc, #644]	; (800b384 <_dtoa_r+0x63c>)
 800b0fe:	4fa2      	ldr	r7, [pc, #648]	; (800b388 <_dtoa_r+0x640>)
 800b100:	f006 020f 	and.w	r2, r6, #15
 800b104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	ec51 0b18 	vmov	r0, r1, d8
 800b110:	f7f5 fa8a 	bl	8000628 <__aeabi_dmul>
 800b114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b118:	1136      	asrs	r6, r6, #4
 800b11a:	2300      	movs	r3, #0
 800b11c:	2502      	movs	r5, #2
 800b11e:	2e00      	cmp	r6, #0
 800b120:	d17e      	bne.n	800b220 <_dtoa_r+0x4d8>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1d0      	bne.n	800b0c8 <_dtoa_r+0x380>
 800b126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b128:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 8084 	beq.w	800b23a <_dtoa_r+0x4f2>
 800b132:	4b96      	ldr	r3, [pc, #600]	; (800b38c <_dtoa_r+0x644>)
 800b134:	2200      	movs	r2, #0
 800b136:	4640      	mov	r0, r8
 800b138:	4649      	mov	r1, r9
 800b13a:	f7f5 fce7 	bl	8000b0c <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d07b      	beq.n	800b23a <_dtoa_r+0x4f2>
 800b142:	9b04      	ldr	r3, [sp, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d078      	beq.n	800b23a <_dtoa_r+0x4f2>
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dd39      	ble.n	800b1c2 <_dtoa_r+0x47a>
 800b14e:	4b90      	ldr	r3, [pc, #576]	; (800b390 <_dtoa_r+0x648>)
 800b150:	2200      	movs	r2, #0
 800b152:	4640      	mov	r0, r8
 800b154:	4649      	mov	r1, r9
 800b156:	f7f5 fa67 	bl	8000628 <__aeabi_dmul>
 800b15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b15e:	9e01      	ldr	r6, [sp, #4]
 800b160:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b164:	3501      	adds	r5, #1
 800b166:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b16a:	4628      	mov	r0, r5
 800b16c:	f7f5 f9f2 	bl	8000554 <__aeabi_i2d>
 800b170:	4642      	mov	r2, r8
 800b172:	464b      	mov	r3, r9
 800b174:	f7f5 fa58 	bl	8000628 <__aeabi_dmul>
 800b178:	4b86      	ldr	r3, [pc, #536]	; (800b394 <_dtoa_r+0x64c>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	f7f5 f89e 	bl	80002bc <__adddf3>
 800b180:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b188:	9303      	str	r3, [sp, #12]
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	d158      	bne.n	800b240 <_dtoa_r+0x4f8>
 800b18e:	4b82      	ldr	r3, [pc, #520]	; (800b398 <_dtoa_r+0x650>)
 800b190:	2200      	movs	r2, #0
 800b192:	4640      	mov	r0, r8
 800b194:	4649      	mov	r1, r9
 800b196:	f7f5 f88f 	bl	80002b8 <__aeabi_dsub>
 800b19a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b19e:	4680      	mov	r8, r0
 800b1a0:	4689      	mov	r9, r1
 800b1a2:	f7f5 fcd1 	bl	8000b48 <__aeabi_dcmpgt>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f040 8296 	bne.w	800b6d8 <_dtoa_r+0x990>
 800b1ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	f7f5 fca8 	bl	8000b0c <__aeabi_dcmplt>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	f040 8289 	bne.w	800b6d4 <_dtoa_r+0x98c>
 800b1c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f2c0 814e 	blt.w	800b46a <_dtoa_r+0x722>
 800b1ce:	f1bb 0f0e 	cmp.w	fp, #14
 800b1d2:	f300 814a 	bgt.w	800b46a <_dtoa_r+0x722>
 800b1d6:	4b6b      	ldr	r3, [pc, #428]	; (800b384 <_dtoa_r+0x63c>)
 800b1d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b1dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f280 80dc 	bge.w	800b3a0 <_dtoa_r+0x658>
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f300 80d8 	bgt.w	800b3a0 <_dtoa_r+0x658>
 800b1f0:	f040 826f 	bne.w	800b6d2 <_dtoa_r+0x98a>
 800b1f4:	4b68      	ldr	r3, [pc, #416]	; (800b398 <_dtoa_r+0x650>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	f7f5 fa14 	bl	8000628 <__aeabi_dmul>
 800b200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b204:	f7f5 fc96 	bl	8000b34 <__aeabi_dcmpge>
 800b208:	9e04      	ldr	r6, [sp, #16]
 800b20a:	4637      	mov	r7, r6
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f040 8245 	bne.w	800b69c <_dtoa_r+0x954>
 800b212:	9d00      	ldr	r5, [sp, #0]
 800b214:	2331      	movs	r3, #49	; 0x31
 800b216:	f805 3b01 	strb.w	r3, [r5], #1
 800b21a:	f10b 0b01 	add.w	fp, fp, #1
 800b21e:	e241      	b.n	800b6a4 <_dtoa_r+0x95c>
 800b220:	07f2      	lsls	r2, r6, #31
 800b222:	d505      	bpl.n	800b230 <_dtoa_r+0x4e8>
 800b224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b228:	f7f5 f9fe 	bl	8000628 <__aeabi_dmul>
 800b22c:	3501      	adds	r5, #1
 800b22e:	2301      	movs	r3, #1
 800b230:	1076      	asrs	r6, r6, #1
 800b232:	3708      	adds	r7, #8
 800b234:	e773      	b.n	800b11e <_dtoa_r+0x3d6>
 800b236:	2502      	movs	r5, #2
 800b238:	e775      	b.n	800b126 <_dtoa_r+0x3de>
 800b23a:	9e04      	ldr	r6, [sp, #16]
 800b23c:	465f      	mov	r7, fp
 800b23e:	e792      	b.n	800b166 <_dtoa_r+0x41e>
 800b240:	9900      	ldr	r1, [sp, #0]
 800b242:	4b50      	ldr	r3, [pc, #320]	; (800b384 <_dtoa_r+0x63c>)
 800b244:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b248:	4431      	add	r1, r6
 800b24a:	9102      	str	r1, [sp, #8]
 800b24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b24e:	eeb0 9a47 	vmov.f32	s18, s14
 800b252:	eef0 9a67 	vmov.f32	s19, s15
 800b256:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b25a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b25e:	2900      	cmp	r1, #0
 800b260:	d044      	beq.n	800b2ec <_dtoa_r+0x5a4>
 800b262:	494e      	ldr	r1, [pc, #312]	; (800b39c <_dtoa_r+0x654>)
 800b264:	2000      	movs	r0, #0
 800b266:	f7f5 fb09 	bl	800087c <__aeabi_ddiv>
 800b26a:	ec53 2b19 	vmov	r2, r3, d9
 800b26e:	f7f5 f823 	bl	80002b8 <__aeabi_dsub>
 800b272:	9d00      	ldr	r5, [sp, #0]
 800b274:	ec41 0b19 	vmov	d9, r0, r1
 800b278:	4649      	mov	r1, r9
 800b27a:	4640      	mov	r0, r8
 800b27c:	f7f5 fc84 	bl	8000b88 <__aeabi_d2iz>
 800b280:	4606      	mov	r6, r0
 800b282:	f7f5 f967 	bl	8000554 <__aeabi_i2d>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f5 f813 	bl	80002b8 <__aeabi_dsub>
 800b292:	3630      	adds	r6, #48	; 0x30
 800b294:	f805 6b01 	strb.w	r6, [r5], #1
 800b298:	ec53 2b19 	vmov	r2, r3, d9
 800b29c:	4680      	mov	r8, r0
 800b29e:	4689      	mov	r9, r1
 800b2a0:	f7f5 fc34 	bl	8000b0c <__aeabi_dcmplt>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d164      	bne.n	800b372 <_dtoa_r+0x62a>
 800b2a8:	4642      	mov	r2, r8
 800b2aa:	464b      	mov	r3, r9
 800b2ac:	4937      	ldr	r1, [pc, #220]	; (800b38c <_dtoa_r+0x644>)
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	f7f5 f802 	bl	80002b8 <__aeabi_dsub>
 800b2b4:	ec53 2b19 	vmov	r2, r3, d9
 800b2b8:	f7f5 fc28 	bl	8000b0c <__aeabi_dcmplt>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f040 80b6 	bne.w	800b42e <_dtoa_r+0x6e6>
 800b2c2:	9b02      	ldr	r3, [sp, #8]
 800b2c4:	429d      	cmp	r5, r3
 800b2c6:	f43f af7c 	beq.w	800b1c2 <_dtoa_r+0x47a>
 800b2ca:	4b31      	ldr	r3, [pc, #196]	; (800b390 <_dtoa_r+0x648>)
 800b2cc:	ec51 0b19 	vmov	r0, r1, d9
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f7f5 f9a9 	bl	8000628 <__aeabi_dmul>
 800b2d6:	4b2e      	ldr	r3, [pc, #184]	; (800b390 <_dtoa_r+0x648>)
 800b2d8:	ec41 0b19 	vmov	d9, r0, r1
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4640      	mov	r0, r8
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	f7f5 f9a1 	bl	8000628 <__aeabi_dmul>
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	4689      	mov	r9, r1
 800b2ea:	e7c5      	b.n	800b278 <_dtoa_r+0x530>
 800b2ec:	ec51 0b17 	vmov	r0, r1, d7
 800b2f0:	f7f5 f99a 	bl	8000628 <__aeabi_dmul>
 800b2f4:	9b02      	ldr	r3, [sp, #8]
 800b2f6:	9d00      	ldr	r5, [sp, #0]
 800b2f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2fa:	ec41 0b19 	vmov	d9, r0, r1
 800b2fe:	4649      	mov	r1, r9
 800b300:	4640      	mov	r0, r8
 800b302:	f7f5 fc41 	bl	8000b88 <__aeabi_d2iz>
 800b306:	4606      	mov	r6, r0
 800b308:	f7f5 f924 	bl	8000554 <__aeabi_i2d>
 800b30c:	3630      	adds	r6, #48	; 0x30
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4640      	mov	r0, r8
 800b314:	4649      	mov	r1, r9
 800b316:	f7f4 ffcf 	bl	80002b8 <__aeabi_dsub>
 800b31a:	f805 6b01 	strb.w	r6, [r5], #1
 800b31e:	9b02      	ldr	r3, [sp, #8]
 800b320:	429d      	cmp	r5, r3
 800b322:	4680      	mov	r8, r0
 800b324:	4689      	mov	r9, r1
 800b326:	f04f 0200 	mov.w	r2, #0
 800b32a:	d124      	bne.n	800b376 <_dtoa_r+0x62e>
 800b32c:	4b1b      	ldr	r3, [pc, #108]	; (800b39c <_dtoa_r+0x654>)
 800b32e:	ec51 0b19 	vmov	r0, r1, d9
 800b332:	f7f4 ffc3 	bl	80002bc <__adddf3>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f5 fc03 	bl	8000b48 <__aeabi_dcmpgt>
 800b342:	2800      	cmp	r0, #0
 800b344:	d173      	bne.n	800b42e <_dtoa_r+0x6e6>
 800b346:	ec53 2b19 	vmov	r2, r3, d9
 800b34a:	4914      	ldr	r1, [pc, #80]	; (800b39c <_dtoa_r+0x654>)
 800b34c:	2000      	movs	r0, #0
 800b34e:	f7f4 ffb3 	bl	80002b8 <__aeabi_dsub>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	4640      	mov	r0, r8
 800b358:	4649      	mov	r1, r9
 800b35a:	f7f5 fbd7 	bl	8000b0c <__aeabi_dcmplt>
 800b35e:	2800      	cmp	r0, #0
 800b360:	f43f af2f 	beq.w	800b1c2 <_dtoa_r+0x47a>
 800b364:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b366:	1e6b      	subs	r3, r5, #1
 800b368:	930f      	str	r3, [sp, #60]	; 0x3c
 800b36a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b36e:	2b30      	cmp	r3, #48	; 0x30
 800b370:	d0f8      	beq.n	800b364 <_dtoa_r+0x61c>
 800b372:	46bb      	mov	fp, r7
 800b374:	e04a      	b.n	800b40c <_dtoa_r+0x6c4>
 800b376:	4b06      	ldr	r3, [pc, #24]	; (800b390 <_dtoa_r+0x648>)
 800b378:	f7f5 f956 	bl	8000628 <__aeabi_dmul>
 800b37c:	4680      	mov	r8, r0
 800b37e:	4689      	mov	r9, r1
 800b380:	e7bd      	b.n	800b2fe <_dtoa_r+0x5b6>
 800b382:	bf00      	nop
 800b384:	0800cc00 	.word	0x0800cc00
 800b388:	0800cbd8 	.word	0x0800cbd8
 800b38c:	3ff00000 	.word	0x3ff00000
 800b390:	40240000 	.word	0x40240000
 800b394:	401c0000 	.word	0x401c0000
 800b398:	40140000 	.word	0x40140000
 800b39c:	3fe00000 	.word	0x3fe00000
 800b3a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3a4:	9d00      	ldr	r5, [sp, #0]
 800b3a6:	4642      	mov	r2, r8
 800b3a8:	464b      	mov	r3, r9
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	f7f5 fa65 	bl	800087c <__aeabi_ddiv>
 800b3b2:	f7f5 fbe9 	bl	8000b88 <__aeabi_d2iz>
 800b3b6:	9001      	str	r0, [sp, #4]
 800b3b8:	f7f5 f8cc 	bl	8000554 <__aeabi_i2d>
 800b3bc:	4642      	mov	r2, r8
 800b3be:	464b      	mov	r3, r9
 800b3c0:	f7f5 f932 	bl	8000628 <__aeabi_dmul>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f4 ff74 	bl	80002b8 <__aeabi_dsub>
 800b3d0:	9e01      	ldr	r6, [sp, #4]
 800b3d2:	9f04      	ldr	r7, [sp, #16]
 800b3d4:	3630      	adds	r6, #48	; 0x30
 800b3d6:	f805 6b01 	strb.w	r6, [r5], #1
 800b3da:	9e00      	ldr	r6, [sp, #0]
 800b3dc:	1bae      	subs	r6, r5, r6
 800b3de:	42b7      	cmp	r7, r6
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	d134      	bne.n	800b450 <_dtoa_r+0x708>
 800b3e6:	f7f4 ff69 	bl	80002bc <__adddf3>
 800b3ea:	4642      	mov	r2, r8
 800b3ec:	464b      	mov	r3, r9
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460f      	mov	r7, r1
 800b3f2:	f7f5 fba9 	bl	8000b48 <__aeabi_dcmpgt>
 800b3f6:	b9c8      	cbnz	r0, 800b42c <_dtoa_r+0x6e4>
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f5 fb7a 	bl	8000af8 <__aeabi_dcmpeq>
 800b404:	b110      	cbz	r0, 800b40c <_dtoa_r+0x6c4>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	07db      	lsls	r3, r3, #31
 800b40a:	d40f      	bmi.n	800b42c <_dtoa_r+0x6e4>
 800b40c:	4651      	mov	r1, sl
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 fbcc 	bl	800bbac <_Bfree>
 800b414:	2300      	movs	r3, #0
 800b416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b418:	702b      	strb	r3, [r5, #0]
 800b41a:	f10b 0301 	add.w	r3, fp, #1
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b422:	2b00      	cmp	r3, #0
 800b424:	f43f ace2 	beq.w	800adec <_dtoa_r+0xa4>
 800b428:	601d      	str	r5, [r3, #0]
 800b42a:	e4df      	b.n	800adec <_dtoa_r+0xa4>
 800b42c:	465f      	mov	r7, fp
 800b42e:	462b      	mov	r3, r5
 800b430:	461d      	mov	r5, r3
 800b432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b436:	2a39      	cmp	r2, #57	; 0x39
 800b438:	d106      	bne.n	800b448 <_dtoa_r+0x700>
 800b43a:	9a00      	ldr	r2, [sp, #0]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d1f7      	bne.n	800b430 <_dtoa_r+0x6e8>
 800b440:	9900      	ldr	r1, [sp, #0]
 800b442:	2230      	movs	r2, #48	; 0x30
 800b444:	3701      	adds	r7, #1
 800b446:	700a      	strb	r2, [r1, #0]
 800b448:	781a      	ldrb	r2, [r3, #0]
 800b44a:	3201      	adds	r2, #1
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	e790      	b.n	800b372 <_dtoa_r+0x62a>
 800b450:	4ba3      	ldr	r3, [pc, #652]	; (800b6e0 <_dtoa_r+0x998>)
 800b452:	2200      	movs	r2, #0
 800b454:	f7f5 f8e8 	bl	8000628 <__aeabi_dmul>
 800b458:	2200      	movs	r2, #0
 800b45a:	2300      	movs	r3, #0
 800b45c:	4606      	mov	r6, r0
 800b45e:	460f      	mov	r7, r1
 800b460:	f7f5 fb4a 	bl	8000af8 <__aeabi_dcmpeq>
 800b464:	2800      	cmp	r0, #0
 800b466:	d09e      	beq.n	800b3a6 <_dtoa_r+0x65e>
 800b468:	e7d0      	b.n	800b40c <_dtoa_r+0x6c4>
 800b46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b46c:	2a00      	cmp	r2, #0
 800b46e:	f000 80ca 	beq.w	800b606 <_dtoa_r+0x8be>
 800b472:	9a07      	ldr	r2, [sp, #28]
 800b474:	2a01      	cmp	r2, #1
 800b476:	f300 80ad 	bgt.w	800b5d4 <_dtoa_r+0x88c>
 800b47a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	f000 80a5 	beq.w	800b5cc <_dtoa_r+0x884>
 800b482:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b486:	9e08      	ldr	r6, [sp, #32]
 800b488:	9d05      	ldr	r5, [sp, #20]
 800b48a:	9a05      	ldr	r2, [sp, #20]
 800b48c:	441a      	add	r2, r3
 800b48e:	9205      	str	r2, [sp, #20]
 800b490:	9a06      	ldr	r2, [sp, #24]
 800b492:	2101      	movs	r1, #1
 800b494:	441a      	add	r2, r3
 800b496:	4620      	mov	r0, r4
 800b498:	9206      	str	r2, [sp, #24]
 800b49a:	f000 fc3d 	bl	800bd18 <__i2b>
 800b49e:	4607      	mov	r7, r0
 800b4a0:	b165      	cbz	r5, 800b4bc <_dtoa_r+0x774>
 800b4a2:	9b06      	ldr	r3, [sp, #24]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	dd09      	ble.n	800b4bc <_dtoa_r+0x774>
 800b4a8:	42ab      	cmp	r3, r5
 800b4aa:	9a05      	ldr	r2, [sp, #20]
 800b4ac:	bfa8      	it	ge
 800b4ae:	462b      	movge	r3, r5
 800b4b0:	1ad2      	subs	r2, r2, r3
 800b4b2:	9205      	str	r2, [sp, #20]
 800b4b4:	9a06      	ldr	r2, [sp, #24]
 800b4b6:	1aed      	subs	r5, r5, r3
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	9306      	str	r3, [sp, #24]
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	b1f3      	cbz	r3, 800b4fe <_dtoa_r+0x7b6>
 800b4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 80a3 	beq.w	800b60e <_dtoa_r+0x8c6>
 800b4c8:	2e00      	cmp	r6, #0
 800b4ca:	dd10      	ble.n	800b4ee <_dtoa_r+0x7a6>
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	4632      	mov	r2, r6
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fce1 	bl	800be98 <__pow5mult>
 800b4d6:	4652      	mov	r2, sl
 800b4d8:	4601      	mov	r1, r0
 800b4da:	4607      	mov	r7, r0
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 fc31 	bl	800bd44 <__multiply>
 800b4e2:	4651      	mov	r1, sl
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f000 fb60 	bl	800bbac <_Bfree>
 800b4ec:	46c2      	mov	sl, r8
 800b4ee:	9b08      	ldr	r3, [sp, #32]
 800b4f0:	1b9a      	subs	r2, r3, r6
 800b4f2:	d004      	beq.n	800b4fe <_dtoa_r+0x7b6>
 800b4f4:	4651      	mov	r1, sl
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 fcce 	bl	800be98 <__pow5mult>
 800b4fc:	4682      	mov	sl, r0
 800b4fe:	2101      	movs	r1, #1
 800b500:	4620      	mov	r0, r4
 800b502:	f000 fc09 	bl	800bd18 <__i2b>
 800b506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	4606      	mov	r6, r0
 800b50c:	f340 8081 	ble.w	800b612 <_dtoa_r+0x8ca>
 800b510:	461a      	mov	r2, r3
 800b512:	4601      	mov	r1, r0
 800b514:	4620      	mov	r0, r4
 800b516:	f000 fcbf 	bl	800be98 <__pow5mult>
 800b51a:	9b07      	ldr	r3, [sp, #28]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	4606      	mov	r6, r0
 800b520:	dd7a      	ble.n	800b618 <_dtoa_r+0x8d0>
 800b522:	f04f 0800 	mov.w	r8, #0
 800b526:	6933      	ldr	r3, [r6, #16]
 800b528:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b52c:	6918      	ldr	r0, [r3, #16]
 800b52e:	f000 fba5 	bl	800bc7c <__hi0bits>
 800b532:	f1c0 0020 	rsb	r0, r0, #32
 800b536:	9b06      	ldr	r3, [sp, #24]
 800b538:	4418      	add	r0, r3
 800b53a:	f010 001f 	ands.w	r0, r0, #31
 800b53e:	f000 8094 	beq.w	800b66a <_dtoa_r+0x922>
 800b542:	f1c0 0320 	rsb	r3, r0, #32
 800b546:	2b04      	cmp	r3, #4
 800b548:	f340 8085 	ble.w	800b656 <_dtoa_r+0x90e>
 800b54c:	9b05      	ldr	r3, [sp, #20]
 800b54e:	f1c0 001c 	rsb	r0, r0, #28
 800b552:	4403      	add	r3, r0
 800b554:	9305      	str	r3, [sp, #20]
 800b556:	9b06      	ldr	r3, [sp, #24]
 800b558:	4403      	add	r3, r0
 800b55a:	4405      	add	r5, r0
 800b55c:	9306      	str	r3, [sp, #24]
 800b55e:	9b05      	ldr	r3, [sp, #20]
 800b560:	2b00      	cmp	r3, #0
 800b562:	dd05      	ble.n	800b570 <_dtoa_r+0x828>
 800b564:	4651      	mov	r1, sl
 800b566:	461a      	mov	r2, r3
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fcef 	bl	800bf4c <__lshift>
 800b56e:	4682      	mov	sl, r0
 800b570:	9b06      	ldr	r3, [sp, #24]
 800b572:	2b00      	cmp	r3, #0
 800b574:	dd05      	ble.n	800b582 <_dtoa_r+0x83a>
 800b576:	4631      	mov	r1, r6
 800b578:	461a      	mov	r2, r3
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fce6 	bl	800bf4c <__lshift>
 800b580:	4606      	mov	r6, r0
 800b582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b584:	2b00      	cmp	r3, #0
 800b586:	d072      	beq.n	800b66e <_dtoa_r+0x926>
 800b588:	4631      	mov	r1, r6
 800b58a:	4650      	mov	r0, sl
 800b58c:	f000 fd4a 	bl	800c024 <__mcmp>
 800b590:	2800      	cmp	r0, #0
 800b592:	da6c      	bge.n	800b66e <_dtoa_r+0x926>
 800b594:	2300      	movs	r3, #0
 800b596:	4651      	mov	r1, sl
 800b598:	220a      	movs	r2, #10
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fb28 	bl	800bbf0 <__multadd>
 800b5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5a6:	4682      	mov	sl, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 81b0 	beq.w	800b90e <_dtoa_r+0xbc6>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	220a      	movs	r2, #10
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f000 fb1b 	bl	800bbf0 <__multadd>
 800b5ba:	9b01      	ldr	r3, [sp, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	4607      	mov	r7, r0
 800b5c0:	f300 8096 	bgt.w	800b6f0 <_dtoa_r+0x9a8>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	dc59      	bgt.n	800b67e <_dtoa_r+0x936>
 800b5ca:	e091      	b.n	800b6f0 <_dtoa_r+0x9a8>
 800b5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5d2:	e758      	b.n	800b486 <_dtoa_r+0x73e>
 800b5d4:	9b04      	ldr	r3, [sp, #16]
 800b5d6:	1e5e      	subs	r6, r3, #1
 800b5d8:	9b08      	ldr	r3, [sp, #32]
 800b5da:	42b3      	cmp	r3, r6
 800b5dc:	bfbf      	itttt	lt
 800b5de:	9b08      	ldrlt	r3, [sp, #32]
 800b5e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b5e2:	9608      	strlt	r6, [sp, #32]
 800b5e4:	1af3      	sublt	r3, r6, r3
 800b5e6:	bfb4      	ite	lt
 800b5e8:	18d2      	addlt	r2, r2, r3
 800b5ea:	1b9e      	subge	r6, r3, r6
 800b5ec:	9b04      	ldr	r3, [sp, #16]
 800b5ee:	bfbc      	itt	lt
 800b5f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b5f2:	2600      	movlt	r6, #0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bfb7      	itett	lt
 800b5f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b5fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b600:	1a9d      	sublt	r5, r3, r2
 800b602:	2300      	movlt	r3, #0
 800b604:	e741      	b.n	800b48a <_dtoa_r+0x742>
 800b606:	9e08      	ldr	r6, [sp, #32]
 800b608:	9d05      	ldr	r5, [sp, #20]
 800b60a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b60c:	e748      	b.n	800b4a0 <_dtoa_r+0x758>
 800b60e:	9a08      	ldr	r2, [sp, #32]
 800b610:	e770      	b.n	800b4f4 <_dtoa_r+0x7ac>
 800b612:	9b07      	ldr	r3, [sp, #28]
 800b614:	2b01      	cmp	r3, #1
 800b616:	dc19      	bgt.n	800b64c <_dtoa_r+0x904>
 800b618:	9b02      	ldr	r3, [sp, #8]
 800b61a:	b9bb      	cbnz	r3, 800b64c <_dtoa_r+0x904>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b622:	b99b      	cbnz	r3, 800b64c <_dtoa_r+0x904>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b62a:	0d1b      	lsrs	r3, r3, #20
 800b62c:	051b      	lsls	r3, r3, #20
 800b62e:	b183      	cbz	r3, 800b652 <_dtoa_r+0x90a>
 800b630:	9b05      	ldr	r3, [sp, #20]
 800b632:	3301      	adds	r3, #1
 800b634:	9305      	str	r3, [sp, #20]
 800b636:	9b06      	ldr	r3, [sp, #24]
 800b638:	3301      	adds	r3, #1
 800b63a:	9306      	str	r3, [sp, #24]
 800b63c:	f04f 0801 	mov.w	r8, #1
 800b640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b642:	2b00      	cmp	r3, #0
 800b644:	f47f af6f 	bne.w	800b526 <_dtoa_r+0x7de>
 800b648:	2001      	movs	r0, #1
 800b64a:	e774      	b.n	800b536 <_dtoa_r+0x7ee>
 800b64c:	f04f 0800 	mov.w	r8, #0
 800b650:	e7f6      	b.n	800b640 <_dtoa_r+0x8f8>
 800b652:	4698      	mov	r8, r3
 800b654:	e7f4      	b.n	800b640 <_dtoa_r+0x8f8>
 800b656:	d082      	beq.n	800b55e <_dtoa_r+0x816>
 800b658:	9a05      	ldr	r2, [sp, #20]
 800b65a:	331c      	adds	r3, #28
 800b65c:	441a      	add	r2, r3
 800b65e:	9205      	str	r2, [sp, #20]
 800b660:	9a06      	ldr	r2, [sp, #24]
 800b662:	441a      	add	r2, r3
 800b664:	441d      	add	r5, r3
 800b666:	9206      	str	r2, [sp, #24]
 800b668:	e779      	b.n	800b55e <_dtoa_r+0x816>
 800b66a:	4603      	mov	r3, r0
 800b66c:	e7f4      	b.n	800b658 <_dtoa_r+0x910>
 800b66e:	9b04      	ldr	r3, [sp, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	dc37      	bgt.n	800b6e4 <_dtoa_r+0x99c>
 800b674:	9b07      	ldr	r3, [sp, #28]
 800b676:	2b02      	cmp	r3, #2
 800b678:	dd34      	ble.n	800b6e4 <_dtoa_r+0x99c>
 800b67a:	9b04      	ldr	r3, [sp, #16]
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	b963      	cbnz	r3, 800b69c <_dtoa_r+0x954>
 800b682:	4631      	mov	r1, r6
 800b684:	2205      	movs	r2, #5
 800b686:	4620      	mov	r0, r4
 800b688:	f000 fab2 	bl	800bbf0 <__multadd>
 800b68c:	4601      	mov	r1, r0
 800b68e:	4606      	mov	r6, r0
 800b690:	4650      	mov	r0, sl
 800b692:	f000 fcc7 	bl	800c024 <__mcmp>
 800b696:	2800      	cmp	r0, #0
 800b698:	f73f adbb 	bgt.w	800b212 <_dtoa_r+0x4ca>
 800b69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b69e:	9d00      	ldr	r5, [sp, #0]
 800b6a0:	ea6f 0b03 	mvn.w	fp, r3
 800b6a4:	f04f 0800 	mov.w	r8, #0
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fa7e 	bl	800bbac <_Bfree>
 800b6b0:	2f00      	cmp	r7, #0
 800b6b2:	f43f aeab 	beq.w	800b40c <_dtoa_r+0x6c4>
 800b6b6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ba:	d005      	beq.n	800b6c8 <_dtoa_r+0x980>
 800b6bc:	45b8      	cmp	r8, r7
 800b6be:	d003      	beq.n	800b6c8 <_dtoa_r+0x980>
 800b6c0:	4641      	mov	r1, r8
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 fa72 	bl	800bbac <_Bfree>
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fa6e 	bl	800bbac <_Bfree>
 800b6d0:	e69c      	b.n	800b40c <_dtoa_r+0x6c4>
 800b6d2:	2600      	movs	r6, #0
 800b6d4:	4637      	mov	r7, r6
 800b6d6:	e7e1      	b.n	800b69c <_dtoa_r+0x954>
 800b6d8:	46bb      	mov	fp, r7
 800b6da:	4637      	mov	r7, r6
 800b6dc:	e599      	b.n	800b212 <_dtoa_r+0x4ca>
 800b6de:	bf00      	nop
 800b6e0:	40240000 	.word	0x40240000
 800b6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 80c8 	beq.w	800b87c <_dtoa_r+0xb34>
 800b6ec:	9b04      	ldr	r3, [sp, #16]
 800b6ee:	9301      	str	r3, [sp, #4]
 800b6f0:	2d00      	cmp	r5, #0
 800b6f2:	dd05      	ble.n	800b700 <_dtoa_r+0x9b8>
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	462a      	mov	r2, r5
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f000 fc27 	bl	800bf4c <__lshift>
 800b6fe:	4607      	mov	r7, r0
 800b700:	f1b8 0f00 	cmp.w	r8, #0
 800b704:	d05b      	beq.n	800b7be <_dtoa_r+0xa76>
 800b706:	6879      	ldr	r1, [r7, #4]
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 fa0f 	bl	800bb2c <_Balloc>
 800b70e:	4605      	mov	r5, r0
 800b710:	b928      	cbnz	r0, 800b71e <_dtoa_r+0x9d6>
 800b712:	4b83      	ldr	r3, [pc, #524]	; (800b920 <_dtoa_r+0xbd8>)
 800b714:	4602      	mov	r2, r0
 800b716:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b71a:	f7ff bb2e 	b.w	800ad7a <_dtoa_r+0x32>
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	3202      	adds	r2, #2
 800b722:	0092      	lsls	r2, r2, #2
 800b724:	f107 010c 	add.w	r1, r7, #12
 800b728:	300c      	adds	r0, #12
 800b72a:	f000 fe39 	bl	800c3a0 <memcpy>
 800b72e:	2201      	movs	r2, #1
 800b730:	4629      	mov	r1, r5
 800b732:	4620      	mov	r0, r4
 800b734:	f000 fc0a 	bl	800bf4c <__lshift>
 800b738:	9b00      	ldr	r3, [sp, #0]
 800b73a:	3301      	adds	r3, #1
 800b73c:	9304      	str	r3, [sp, #16]
 800b73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b742:	4413      	add	r3, r2
 800b744:	9308      	str	r3, [sp, #32]
 800b746:	9b02      	ldr	r3, [sp, #8]
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	46b8      	mov	r8, r7
 800b74e:	9306      	str	r3, [sp, #24]
 800b750:	4607      	mov	r7, r0
 800b752:	9b04      	ldr	r3, [sp, #16]
 800b754:	4631      	mov	r1, r6
 800b756:	3b01      	subs	r3, #1
 800b758:	4650      	mov	r0, sl
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	f7ff fa69 	bl	800ac32 <quorem>
 800b760:	4641      	mov	r1, r8
 800b762:	9002      	str	r0, [sp, #8]
 800b764:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b768:	4650      	mov	r0, sl
 800b76a:	f000 fc5b 	bl	800c024 <__mcmp>
 800b76e:	463a      	mov	r2, r7
 800b770:	9005      	str	r0, [sp, #20]
 800b772:	4631      	mov	r1, r6
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fc71 	bl	800c05c <__mdiff>
 800b77a:	68c2      	ldr	r2, [r0, #12]
 800b77c:	4605      	mov	r5, r0
 800b77e:	bb02      	cbnz	r2, 800b7c2 <_dtoa_r+0xa7a>
 800b780:	4601      	mov	r1, r0
 800b782:	4650      	mov	r0, sl
 800b784:	f000 fc4e 	bl	800c024 <__mcmp>
 800b788:	4602      	mov	r2, r0
 800b78a:	4629      	mov	r1, r5
 800b78c:	4620      	mov	r0, r4
 800b78e:	9209      	str	r2, [sp, #36]	; 0x24
 800b790:	f000 fa0c 	bl	800bbac <_Bfree>
 800b794:	9b07      	ldr	r3, [sp, #28]
 800b796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b798:	9d04      	ldr	r5, [sp, #16]
 800b79a:	ea43 0102 	orr.w	r1, r3, r2
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	4319      	orrs	r1, r3
 800b7a2:	d110      	bne.n	800b7c6 <_dtoa_r+0xa7e>
 800b7a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7a8:	d029      	beq.n	800b7fe <_dtoa_r+0xab6>
 800b7aa:	9b05      	ldr	r3, [sp, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dd02      	ble.n	800b7b6 <_dtoa_r+0xa6e>
 800b7b0:	9b02      	ldr	r3, [sp, #8]
 800b7b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b7b6:	9b01      	ldr	r3, [sp, #4]
 800b7b8:	f883 9000 	strb.w	r9, [r3]
 800b7bc:	e774      	b.n	800b6a8 <_dtoa_r+0x960>
 800b7be:	4638      	mov	r0, r7
 800b7c0:	e7ba      	b.n	800b738 <_dtoa_r+0x9f0>
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	e7e1      	b.n	800b78a <_dtoa_r+0xa42>
 800b7c6:	9b05      	ldr	r3, [sp, #20]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	db04      	blt.n	800b7d6 <_dtoa_r+0xa8e>
 800b7cc:	9907      	ldr	r1, [sp, #28]
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	9906      	ldr	r1, [sp, #24]
 800b7d2:	430b      	orrs	r3, r1
 800b7d4:	d120      	bne.n	800b818 <_dtoa_r+0xad0>
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	dded      	ble.n	800b7b6 <_dtoa_r+0xa6e>
 800b7da:	4651      	mov	r1, sl
 800b7dc:	2201      	movs	r2, #1
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 fbb4 	bl	800bf4c <__lshift>
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4682      	mov	sl, r0
 800b7e8:	f000 fc1c 	bl	800c024 <__mcmp>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	dc03      	bgt.n	800b7f8 <_dtoa_r+0xab0>
 800b7f0:	d1e1      	bne.n	800b7b6 <_dtoa_r+0xa6e>
 800b7f2:	f019 0f01 	tst.w	r9, #1
 800b7f6:	d0de      	beq.n	800b7b6 <_dtoa_r+0xa6e>
 800b7f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7fc:	d1d8      	bne.n	800b7b0 <_dtoa_r+0xa68>
 800b7fe:	9a01      	ldr	r2, [sp, #4]
 800b800:	2339      	movs	r3, #57	; 0x39
 800b802:	7013      	strb	r3, [r2, #0]
 800b804:	462b      	mov	r3, r5
 800b806:	461d      	mov	r5, r3
 800b808:	3b01      	subs	r3, #1
 800b80a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b80e:	2a39      	cmp	r2, #57	; 0x39
 800b810:	d06c      	beq.n	800b8ec <_dtoa_r+0xba4>
 800b812:	3201      	adds	r2, #1
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	e747      	b.n	800b6a8 <_dtoa_r+0x960>
 800b818:	2a00      	cmp	r2, #0
 800b81a:	dd07      	ble.n	800b82c <_dtoa_r+0xae4>
 800b81c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b820:	d0ed      	beq.n	800b7fe <_dtoa_r+0xab6>
 800b822:	9a01      	ldr	r2, [sp, #4]
 800b824:	f109 0301 	add.w	r3, r9, #1
 800b828:	7013      	strb	r3, [r2, #0]
 800b82a:	e73d      	b.n	800b6a8 <_dtoa_r+0x960>
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	9a08      	ldr	r2, [sp, #32]
 800b830:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b834:	4293      	cmp	r3, r2
 800b836:	d043      	beq.n	800b8c0 <_dtoa_r+0xb78>
 800b838:	4651      	mov	r1, sl
 800b83a:	2300      	movs	r3, #0
 800b83c:	220a      	movs	r2, #10
 800b83e:	4620      	mov	r0, r4
 800b840:	f000 f9d6 	bl	800bbf0 <__multadd>
 800b844:	45b8      	cmp	r8, r7
 800b846:	4682      	mov	sl, r0
 800b848:	f04f 0300 	mov.w	r3, #0
 800b84c:	f04f 020a 	mov.w	r2, #10
 800b850:	4641      	mov	r1, r8
 800b852:	4620      	mov	r0, r4
 800b854:	d107      	bne.n	800b866 <_dtoa_r+0xb1e>
 800b856:	f000 f9cb 	bl	800bbf0 <__multadd>
 800b85a:	4680      	mov	r8, r0
 800b85c:	4607      	mov	r7, r0
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	3301      	adds	r3, #1
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	e775      	b.n	800b752 <_dtoa_r+0xa0a>
 800b866:	f000 f9c3 	bl	800bbf0 <__multadd>
 800b86a:	4639      	mov	r1, r7
 800b86c:	4680      	mov	r8, r0
 800b86e:	2300      	movs	r3, #0
 800b870:	220a      	movs	r2, #10
 800b872:	4620      	mov	r0, r4
 800b874:	f000 f9bc 	bl	800bbf0 <__multadd>
 800b878:	4607      	mov	r7, r0
 800b87a:	e7f0      	b.n	800b85e <_dtoa_r+0xb16>
 800b87c:	9b04      	ldr	r3, [sp, #16]
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	9d00      	ldr	r5, [sp, #0]
 800b882:	4631      	mov	r1, r6
 800b884:	4650      	mov	r0, sl
 800b886:	f7ff f9d4 	bl	800ac32 <quorem>
 800b88a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	f805 9b01 	strb.w	r9, [r5], #1
 800b894:	1aea      	subs	r2, r5, r3
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	4293      	cmp	r3, r2
 800b89a:	dd07      	ble.n	800b8ac <_dtoa_r+0xb64>
 800b89c:	4651      	mov	r1, sl
 800b89e:	2300      	movs	r3, #0
 800b8a0:	220a      	movs	r2, #10
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 f9a4 	bl	800bbf0 <__multadd>
 800b8a8:	4682      	mov	sl, r0
 800b8aa:	e7ea      	b.n	800b882 <_dtoa_r+0xb3a>
 800b8ac:	9b01      	ldr	r3, [sp, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bfc8      	it	gt
 800b8b2:	461d      	movgt	r5, r3
 800b8b4:	9b00      	ldr	r3, [sp, #0]
 800b8b6:	bfd8      	it	le
 800b8b8:	2501      	movle	r5, #1
 800b8ba:	441d      	add	r5, r3
 800b8bc:	f04f 0800 	mov.w	r8, #0
 800b8c0:	4651      	mov	r1, sl
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 fb41 	bl	800bf4c <__lshift>
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	f000 fba9 	bl	800c024 <__mcmp>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	dc96      	bgt.n	800b804 <_dtoa_r+0xabc>
 800b8d6:	d102      	bne.n	800b8de <_dtoa_r+0xb96>
 800b8d8:	f019 0f01 	tst.w	r9, #1
 800b8dc:	d192      	bne.n	800b804 <_dtoa_r+0xabc>
 800b8de:	462b      	mov	r3, r5
 800b8e0:	461d      	mov	r5, r3
 800b8e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8e6:	2a30      	cmp	r2, #48	; 0x30
 800b8e8:	d0fa      	beq.n	800b8e0 <_dtoa_r+0xb98>
 800b8ea:	e6dd      	b.n	800b6a8 <_dtoa_r+0x960>
 800b8ec:	9a00      	ldr	r2, [sp, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d189      	bne.n	800b806 <_dtoa_r+0xabe>
 800b8f2:	f10b 0b01 	add.w	fp, fp, #1
 800b8f6:	2331      	movs	r3, #49	; 0x31
 800b8f8:	e796      	b.n	800b828 <_dtoa_r+0xae0>
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <_dtoa_r+0xbdc>)
 800b8fc:	f7ff ba99 	b.w	800ae32 <_dtoa_r+0xea>
 800b900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b902:	2b00      	cmp	r3, #0
 800b904:	f47f aa6d 	bne.w	800ade2 <_dtoa_r+0x9a>
 800b908:	4b07      	ldr	r3, [pc, #28]	; (800b928 <_dtoa_r+0xbe0>)
 800b90a:	f7ff ba92 	b.w	800ae32 <_dtoa_r+0xea>
 800b90e:	9b01      	ldr	r3, [sp, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	dcb5      	bgt.n	800b880 <_dtoa_r+0xb38>
 800b914:	9b07      	ldr	r3, [sp, #28]
 800b916:	2b02      	cmp	r3, #2
 800b918:	f73f aeb1 	bgt.w	800b67e <_dtoa_r+0x936>
 800b91c:	e7b0      	b.n	800b880 <_dtoa_r+0xb38>
 800b91e:	bf00      	nop
 800b920:	0800cb6c 	.word	0x0800cb6c
 800b924:	0800cacc 	.word	0x0800cacc
 800b928:	0800caf0 	.word	0x0800caf0

0800b92c <_free_r>:
 800b92c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b92e:	2900      	cmp	r1, #0
 800b930:	d044      	beq.n	800b9bc <_free_r+0x90>
 800b932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b936:	9001      	str	r0, [sp, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f1a1 0404 	sub.w	r4, r1, #4
 800b93e:	bfb8      	it	lt
 800b940:	18e4      	addlt	r4, r4, r3
 800b942:	f000 f8e7 	bl	800bb14 <__malloc_lock>
 800b946:	4a1e      	ldr	r2, [pc, #120]	; (800b9c0 <_free_r+0x94>)
 800b948:	9801      	ldr	r0, [sp, #4]
 800b94a:	6813      	ldr	r3, [r2, #0]
 800b94c:	b933      	cbnz	r3, 800b95c <_free_r+0x30>
 800b94e:	6063      	str	r3, [r4, #4]
 800b950:	6014      	str	r4, [r2, #0]
 800b952:	b003      	add	sp, #12
 800b954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b958:	f000 b8e2 	b.w	800bb20 <__malloc_unlock>
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	d908      	bls.n	800b972 <_free_r+0x46>
 800b960:	6825      	ldr	r5, [r4, #0]
 800b962:	1961      	adds	r1, r4, r5
 800b964:	428b      	cmp	r3, r1
 800b966:	bf01      	itttt	eq
 800b968:	6819      	ldreq	r1, [r3, #0]
 800b96a:	685b      	ldreq	r3, [r3, #4]
 800b96c:	1949      	addeq	r1, r1, r5
 800b96e:	6021      	streq	r1, [r4, #0]
 800b970:	e7ed      	b.n	800b94e <_free_r+0x22>
 800b972:	461a      	mov	r2, r3
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	b10b      	cbz	r3, 800b97c <_free_r+0x50>
 800b978:	42a3      	cmp	r3, r4
 800b97a:	d9fa      	bls.n	800b972 <_free_r+0x46>
 800b97c:	6811      	ldr	r1, [r2, #0]
 800b97e:	1855      	adds	r5, r2, r1
 800b980:	42a5      	cmp	r5, r4
 800b982:	d10b      	bne.n	800b99c <_free_r+0x70>
 800b984:	6824      	ldr	r4, [r4, #0]
 800b986:	4421      	add	r1, r4
 800b988:	1854      	adds	r4, r2, r1
 800b98a:	42a3      	cmp	r3, r4
 800b98c:	6011      	str	r1, [r2, #0]
 800b98e:	d1e0      	bne.n	800b952 <_free_r+0x26>
 800b990:	681c      	ldr	r4, [r3, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	6053      	str	r3, [r2, #4]
 800b996:	440c      	add	r4, r1
 800b998:	6014      	str	r4, [r2, #0]
 800b99a:	e7da      	b.n	800b952 <_free_r+0x26>
 800b99c:	d902      	bls.n	800b9a4 <_free_r+0x78>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	6003      	str	r3, [r0, #0]
 800b9a2:	e7d6      	b.n	800b952 <_free_r+0x26>
 800b9a4:	6825      	ldr	r5, [r4, #0]
 800b9a6:	1961      	adds	r1, r4, r5
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	bf04      	itt	eq
 800b9ac:	6819      	ldreq	r1, [r3, #0]
 800b9ae:	685b      	ldreq	r3, [r3, #4]
 800b9b0:	6063      	str	r3, [r4, #4]
 800b9b2:	bf04      	itt	eq
 800b9b4:	1949      	addeq	r1, r1, r5
 800b9b6:	6021      	streq	r1, [r4, #0]
 800b9b8:	6054      	str	r4, [r2, #4]
 800b9ba:	e7ca      	b.n	800b952 <_free_r+0x26>
 800b9bc:	b003      	add	sp, #12
 800b9be:	bd30      	pop	{r4, r5, pc}
 800b9c0:	20000a24 	.word	0x20000a24

0800b9c4 <malloc>:
 800b9c4:	4b02      	ldr	r3, [pc, #8]	; (800b9d0 <malloc+0xc>)
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	f000 b823 	b.w	800ba14 <_malloc_r>
 800b9ce:	bf00      	nop
 800b9d0:	20000064 	.word	0x20000064

0800b9d4 <sbrk_aligned>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	4e0e      	ldr	r6, [pc, #56]	; (800ba10 <sbrk_aligned+0x3c>)
 800b9d8:	460c      	mov	r4, r1
 800b9da:	6831      	ldr	r1, [r6, #0]
 800b9dc:	4605      	mov	r5, r0
 800b9de:	b911      	cbnz	r1, 800b9e6 <sbrk_aligned+0x12>
 800b9e0:	f000 fcce 	bl	800c380 <_sbrk_r>
 800b9e4:	6030      	str	r0, [r6, #0]
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f000 fcc9 	bl	800c380 <_sbrk_r>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	d00a      	beq.n	800ba08 <sbrk_aligned+0x34>
 800b9f2:	1cc4      	adds	r4, r0, #3
 800b9f4:	f024 0403 	bic.w	r4, r4, #3
 800b9f8:	42a0      	cmp	r0, r4
 800b9fa:	d007      	beq.n	800ba0c <sbrk_aligned+0x38>
 800b9fc:	1a21      	subs	r1, r4, r0
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f000 fcbe 	bl	800c380 <_sbrk_r>
 800ba04:	3001      	adds	r0, #1
 800ba06:	d101      	bne.n	800ba0c <sbrk_aligned+0x38>
 800ba08:	f04f 34ff 	mov.w	r4, #4294967295
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
 800ba10:	20000a28 	.word	0x20000a28

0800ba14 <_malloc_r>:
 800ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba18:	1ccd      	adds	r5, r1, #3
 800ba1a:	f025 0503 	bic.w	r5, r5, #3
 800ba1e:	3508      	adds	r5, #8
 800ba20:	2d0c      	cmp	r5, #12
 800ba22:	bf38      	it	cc
 800ba24:	250c      	movcc	r5, #12
 800ba26:	2d00      	cmp	r5, #0
 800ba28:	4607      	mov	r7, r0
 800ba2a:	db01      	blt.n	800ba30 <_malloc_r+0x1c>
 800ba2c:	42a9      	cmp	r1, r5
 800ba2e:	d905      	bls.n	800ba3c <_malloc_r+0x28>
 800ba30:	230c      	movs	r3, #12
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	2600      	movs	r6, #0
 800ba36:	4630      	mov	r0, r6
 800ba38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bb10 <_malloc_r+0xfc>
 800ba40:	f000 f868 	bl	800bb14 <__malloc_lock>
 800ba44:	f8d8 3000 	ldr.w	r3, [r8]
 800ba48:	461c      	mov	r4, r3
 800ba4a:	bb5c      	cbnz	r4, 800baa4 <_malloc_r+0x90>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4638      	mov	r0, r7
 800ba50:	f7ff ffc0 	bl	800b9d4 <sbrk_aligned>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	4604      	mov	r4, r0
 800ba58:	d155      	bne.n	800bb06 <_malloc_r+0xf2>
 800ba5a:	f8d8 4000 	ldr.w	r4, [r8]
 800ba5e:	4626      	mov	r6, r4
 800ba60:	2e00      	cmp	r6, #0
 800ba62:	d145      	bne.n	800baf0 <_malloc_r+0xdc>
 800ba64:	2c00      	cmp	r4, #0
 800ba66:	d048      	beq.n	800bafa <_malloc_r+0xe6>
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	eb04 0903 	add.w	r9, r4, r3
 800ba72:	f000 fc85 	bl	800c380 <_sbrk_r>
 800ba76:	4581      	cmp	r9, r0
 800ba78:	d13f      	bne.n	800bafa <_malloc_r+0xe6>
 800ba7a:	6821      	ldr	r1, [r4, #0]
 800ba7c:	1a6d      	subs	r5, r5, r1
 800ba7e:	4629      	mov	r1, r5
 800ba80:	4638      	mov	r0, r7
 800ba82:	f7ff ffa7 	bl	800b9d4 <sbrk_aligned>
 800ba86:	3001      	adds	r0, #1
 800ba88:	d037      	beq.n	800bafa <_malloc_r+0xe6>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	442b      	add	r3, r5
 800ba8e:	6023      	str	r3, [r4, #0]
 800ba90:	f8d8 3000 	ldr.w	r3, [r8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d038      	beq.n	800bb0a <_malloc_r+0xf6>
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	42a2      	cmp	r2, r4
 800ba9c:	d12b      	bne.n	800baf6 <_malloc_r+0xe2>
 800ba9e:	2200      	movs	r2, #0
 800baa0:	605a      	str	r2, [r3, #4]
 800baa2:	e00f      	b.n	800bac4 <_malloc_r+0xb0>
 800baa4:	6822      	ldr	r2, [r4, #0]
 800baa6:	1b52      	subs	r2, r2, r5
 800baa8:	d41f      	bmi.n	800baea <_malloc_r+0xd6>
 800baaa:	2a0b      	cmp	r2, #11
 800baac:	d917      	bls.n	800bade <_malloc_r+0xca>
 800baae:	1961      	adds	r1, r4, r5
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	6025      	str	r5, [r4, #0]
 800bab4:	bf18      	it	ne
 800bab6:	6059      	strne	r1, [r3, #4]
 800bab8:	6863      	ldr	r3, [r4, #4]
 800baba:	bf08      	it	eq
 800babc:	f8c8 1000 	streq.w	r1, [r8]
 800bac0:	5162      	str	r2, [r4, r5]
 800bac2:	604b      	str	r3, [r1, #4]
 800bac4:	4638      	mov	r0, r7
 800bac6:	f104 060b 	add.w	r6, r4, #11
 800baca:	f000 f829 	bl	800bb20 <__malloc_unlock>
 800bace:	f026 0607 	bic.w	r6, r6, #7
 800bad2:	1d23      	adds	r3, r4, #4
 800bad4:	1af2      	subs	r2, r6, r3
 800bad6:	d0ae      	beq.n	800ba36 <_malloc_r+0x22>
 800bad8:	1b9b      	subs	r3, r3, r6
 800bada:	50a3      	str	r3, [r4, r2]
 800badc:	e7ab      	b.n	800ba36 <_malloc_r+0x22>
 800bade:	42a3      	cmp	r3, r4
 800bae0:	6862      	ldr	r2, [r4, #4]
 800bae2:	d1dd      	bne.n	800baa0 <_malloc_r+0x8c>
 800bae4:	f8c8 2000 	str.w	r2, [r8]
 800bae8:	e7ec      	b.n	800bac4 <_malloc_r+0xb0>
 800baea:	4623      	mov	r3, r4
 800baec:	6864      	ldr	r4, [r4, #4]
 800baee:	e7ac      	b.n	800ba4a <_malloc_r+0x36>
 800baf0:	4634      	mov	r4, r6
 800baf2:	6876      	ldr	r6, [r6, #4]
 800baf4:	e7b4      	b.n	800ba60 <_malloc_r+0x4c>
 800baf6:	4613      	mov	r3, r2
 800baf8:	e7cc      	b.n	800ba94 <_malloc_r+0x80>
 800bafa:	230c      	movs	r3, #12
 800bafc:	603b      	str	r3, [r7, #0]
 800bafe:	4638      	mov	r0, r7
 800bb00:	f000 f80e 	bl	800bb20 <__malloc_unlock>
 800bb04:	e797      	b.n	800ba36 <_malloc_r+0x22>
 800bb06:	6025      	str	r5, [r4, #0]
 800bb08:	e7dc      	b.n	800bac4 <_malloc_r+0xb0>
 800bb0a:	605b      	str	r3, [r3, #4]
 800bb0c:	deff      	udf	#255	; 0xff
 800bb0e:	bf00      	nop
 800bb10:	20000a24 	.word	0x20000a24

0800bb14 <__malloc_lock>:
 800bb14:	4801      	ldr	r0, [pc, #4]	; (800bb1c <__malloc_lock+0x8>)
 800bb16:	f7ff b88a 	b.w	800ac2e <__retarget_lock_acquire_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	20000a20 	.word	0x20000a20

0800bb20 <__malloc_unlock>:
 800bb20:	4801      	ldr	r0, [pc, #4]	; (800bb28 <__malloc_unlock+0x8>)
 800bb22:	f7ff b885 	b.w	800ac30 <__retarget_lock_release_recursive>
 800bb26:	bf00      	nop
 800bb28:	20000a20 	.word	0x20000a20

0800bb2c <_Balloc>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	69c6      	ldr	r6, [r0, #28]
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	b976      	cbnz	r6, 800bb54 <_Balloc+0x28>
 800bb36:	2010      	movs	r0, #16
 800bb38:	f7ff ff44 	bl	800b9c4 <malloc>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	61e0      	str	r0, [r4, #28]
 800bb40:	b920      	cbnz	r0, 800bb4c <_Balloc+0x20>
 800bb42:	4b18      	ldr	r3, [pc, #96]	; (800bba4 <_Balloc+0x78>)
 800bb44:	4818      	ldr	r0, [pc, #96]	; (800bba8 <_Balloc+0x7c>)
 800bb46:	216b      	movs	r1, #107	; 0x6b
 800bb48:	f000 fc38 	bl	800c3bc <__assert_func>
 800bb4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb50:	6006      	str	r6, [r0, #0]
 800bb52:	60c6      	str	r6, [r0, #12]
 800bb54:	69e6      	ldr	r6, [r4, #28]
 800bb56:	68f3      	ldr	r3, [r6, #12]
 800bb58:	b183      	cbz	r3, 800bb7c <_Balloc+0x50>
 800bb5a:	69e3      	ldr	r3, [r4, #28]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb62:	b9b8      	cbnz	r0, 800bb94 <_Balloc+0x68>
 800bb64:	2101      	movs	r1, #1
 800bb66:	fa01 f605 	lsl.w	r6, r1, r5
 800bb6a:	1d72      	adds	r2, r6, #5
 800bb6c:	0092      	lsls	r2, r2, #2
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fc42 	bl	800c3f8 <_calloc_r>
 800bb74:	b160      	cbz	r0, 800bb90 <_Balloc+0x64>
 800bb76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb7a:	e00e      	b.n	800bb9a <_Balloc+0x6e>
 800bb7c:	2221      	movs	r2, #33	; 0x21
 800bb7e:	2104      	movs	r1, #4
 800bb80:	4620      	mov	r0, r4
 800bb82:	f000 fc39 	bl	800c3f8 <_calloc_r>
 800bb86:	69e3      	ldr	r3, [r4, #28]
 800bb88:	60f0      	str	r0, [r6, #12]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e4      	bne.n	800bb5a <_Balloc+0x2e>
 800bb90:	2000      	movs	r0, #0
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	6802      	ldr	r2, [r0, #0]
 800bb96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bba0:	e7f7      	b.n	800bb92 <_Balloc+0x66>
 800bba2:	bf00      	nop
 800bba4:	0800cafd 	.word	0x0800cafd
 800bba8:	0800cb7d 	.word	0x0800cb7d

0800bbac <_Bfree>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	69c6      	ldr	r6, [r0, #28]
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	b976      	cbnz	r6, 800bbd4 <_Bfree+0x28>
 800bbb6:	2010      	movs	r0, #16
 800bbb8:	f7ff ff04 	bl	800b9c4 <malloc>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	61e8      	str	r0, [r5, #28]
 800bbc0:	b920      	cbnz	r0, 800bbcc <_Bfree+0x20>
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <_Bfree+0x3c>)
 800bbc4:	4809      	ldr	r0, [pc, #36]	; (800bbec <_Bfree+0x40>)
 800bbc6:	218f      	movs	r1, #143	; 0x8f
 800bbc8:	f000 fbf8 	bl	800c3bc <__assert_func>
 800bbcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbd0:	6006      	str	r6, [r0, #0]
 800bbd2:	60c6      	str	r6, [r0, #12]
 800bbd4:	b13c      	cbz	r4, 800bbe6 <_Bfree+0x3a>
 800bbd6:	69eb      	ldr	r3, [r5, #28]
 800bbd8:	6862      	ldr	r2, [r4, #4]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbe0:	6021      	str	r1, [r4, #0]
 800bbe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	0800cafd 	.word	0x0800cafd
 800bbec:	0800cb7d 	.word	0x0800cb7d

0800bbf0 <__multadd>:
 800bbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf4:	690d      	ldr	r5, [r1, #16]
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	461e      	mov	r6, r3
 800bbfc:	f101 0c14 	add.w	ip, r1, #20
 800bc00:	2000      	movs	r0, #0
 800bc02:	f8dc 3000 	ldr.w	r3, [ip]
 800bc06:	b299      	uxth	r1, r3
 800bc08:	fb02 6101 	mla	r1, r2, r1, r6
 800bc0c:	0c1e      	lsrs	r6, r3, #16
 800bc0e:	0c0b      	lsrs	r3, r1, #16
 800bc10:	fb02 3306 	mla	r3, r2, r6, r3
 800bc14:	b289      	uxth	r1, r1
 800bc16:	3001      	adds	r0, #1
 800bc18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc1c:	4285      	cmp	r5, r0
 800bc1e:	f84c 1b04 	str.w	r1, [ip], #4
 800bc22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc26:	dcec      	bgt.n	800bc02 <__multadd+0x12>
 800bc28:	b30e      	cbz	r6, 800bc6e <__multadd+0x7e>
 800bc2a:	68a3      	ldr	r3, [r4, #8]
 800bc2c:	42ab      	cmp	r3, r5
 800bc2e:	dc19      	bgt.n	800bc64 <__multadd+0x74>
 800bc30:	6861      	ldr	r1, [r4, #4]
 800bc32:	4638      	mov	r0, r7
 800bc34:	3101      	adds	r1, #1
 800bc36:	f7ff ff79 	bl	800bb2c <_Balloc>
 800bc3a:	4680      	mov	r8, r0
 800bc3c:	b928      	cbnz	r0, 800bc4a <__multadd+0x5a>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	4b0c      	ldr	r3, [pc, #48]	; (800bc74 <__multadd+0x84>)
 800bc42:	480d      	ldr	r0, [pc, #52]	; (800bc78 <__multadd+0x88>)
 800bc44:	21ba      	movs	r1, #186	; 0xba
 800bc46:	f000 fbb9 	bl	800c3bc <__assert_func>
 800bc4a:	6922      	ldr	r2, [r4, #16]
 800bc4c:	3202      	adds	r2, #2
 800bc4e:	f104 010c 	add.w	r1, r4, #12
 800bc52:	0092      	lsls	r2, r2, #2
 800bc54:	300c      	adds	r0, #12
 800bc56:	f000 fba3 	bl	800c3a0 <memcpy>
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff ffa5 	bl	800bbac <_Bfree>
 800bc62:	4644      	mov	r4, r8
 800bc64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc68:	3501      	adds	r5, #1
 800bc6a:	615e      	str	r6, [r3, #20]
 800bc6c:	6125      	str	r5, [r4, #16]
 800bc6e:	4620      	mov	r0, r4
 800bc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc74:	0800cb6c 	.word	0x0800cb6c
 800bc78:	0800cb7d 	.word	0x0800cb7d

0800bc7c <__hi0bits>:
 800bc7c:	0c03      	lsrs	r3, r0, #16
 800bc7e:	041b      	lsls	r3, r3, #16
 800bc80:	b9d3      	cbnz	r3, 800bcb8 <__hi0bits+0x3c>
 800bc82:	0400      	lsls	r0, r0, #16
 800bc84:	2310      	movs	r3, #16
 800bc86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc8a:	bf04      	itt	eq
 800bc8c:	0200      	lsleq	r0, r0, #8
 800bc8e:	3308      	addeq	r3, #8
 800bc90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc94:	bf04      	itt	eq
 800bc96:	0100      	lsleq	r0, r0, #4
 800bc98:	3304      	addeq	r3, #4
 800bc9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc9e:	bf04      	itt	eq
 800bca0:	0080      	lsleq	r0, r0, #2
 800bca2:	3302      	addeq	r3, #2
 800bca4:	2800      	cmp	r0, #0
 800bca6:	db05      	blt.n	800bcb4 <__hi0bits+0x38>
 800bca8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcac:	f103 0301 	add.w	r3, r3, #1
 800bcb0:	bf08      	it	eq
 800bcb2:	2320      	moveq	r3, #32
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	4770      	bx	lr
 800bcb8:	2300      	movs	r3, #0
 800bcba:	e7e4      	b.n	800bc86 <__hi0bits+0xa>

0800bcbc <__lo0bits>:
 800bcbc:	6803      	ldr	r3, [r0, #0]
 800bcbe:	f013 0207 	ands.w	r2, r3, #7
 800bcc2:	d00c      	beq.n	800bcde <__lo0bits+0x22>
 800bcc4:	07d9      	lsls	r1, r3, #31
 800bcc6:	d422      	bmi.n	800bd0e <__lo0bits+0x52>
 800bcc8:	079a      	lsls	r2, r3, #30
 800bcca:	bf49      	itett	mi
 800bccc:	085b      	lsrmi	r3, r3, #1
 800bcce:	089b      	lsrpl	r3, r3, #2
 800bcd0:	6003      	strmi	r3, [r0, #0]
 800bcd2:	2201      	movmi	r2, #1
 800bcd4:	bf5c      	itt	pl
 800bcd6:	6003      	strpl	r3, [r0, #0]
 800bcd8:	2202      	movpl	r2, #2
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4770      	bx	lr
 800bcde:	b299      	uxth	r1, r3
 800bce0:	b909      	cbnz	r1, 800bce6 <__lo0bits+0x2a>
 800bce2:	0c1b      	lsrs	r3, r3, #16
 800bce4:	2210      	movs	r2, #16
 800bce6:	b2d9      	uxtb	r1, r3
 800bce8:	b909      	cbnz	r1, 800bcee <__lo0bits+0x32>
 800bcea:	3208      	adds	r2, #8
 800bcec:	0a1b      	lsrs	r3, r3, #8
 800bcee:	0719      	lsls	r1, r3, #28
 800bcf0:	bf04      	itt	eq
 800bcf2:	091b      	lsreq	r3, r3, #4
 800bcf4:	3204      	addeq	r2, #4
 800bcf6:	0799      	lsls	r1, r3, #30
 800bcf8:	bf04      	itt	eq
 800bcfa:	089b      	lsreq	r3, r3, #2
 800bcfc:	3202      	addeq	r2, #2
 800bcfe:	07d9      	lsls	r1, r3, #31
 800bd00:	d403      	bmi.n	800bd0a <__lo0bits+0x4e>
 800bd02:	085b      	lsrs	r3, r3, #1
 800bd04:	f102 0201 	add.w	r2, r2, #1
 800bd08:	d003      	beq.n	800bd12 <__lo0bits+0x56>
 800bd0a:	6003      	str	r3, [r0, #0]
 800bd0c:	e7e5      	b.n	800bcda <__lo0bits+0x1e>
 800bd0e:	2200      	movs	r2, #0
 800bd10:	e7e3      	b.n	800bcda <__lo0bits+0x1e>
 800bd12:	2220      	movs	r2, #32
 800bd14:	e7e1      	b.n	800bcda <__lo0bits+0x1e>
	...

0800bd18 <__i2b>:
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	2101      	movs	r1, #1
 800bd1e:	f7ff ff05 	bl	800bb2c <_Balloc>
 800bd22:	4602      	mov	r2, r0
 800bd24:	b928      	cbnz	r0, 800bd32 <__i2b+0x1a>
 800bd26:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <__i2b+0x24>)
 800bd28:	4805      	ldr	r0, [pc, #20]	; (800bd40 <__i2b+0x28>)
 800bd2a:	f240 1145 	movw	r1, #325	; 0x145
 800bd2e:	f000 fb45 	bl	800c3bc <__assert_func>
 800bd32:	2301      	movs	r3, #1
 800bd34:	6144      	str	r4, [r0, #20]
 800bd36:	6103      	str	r3, [r0, #16]
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	bf00      	nop
 800bd3c:	0800cb6c 	.word	0x0800cb6c
 800bd40:	0800cb7d 	.word	0x0800cb7d

0800bd44 <__multiply>:
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd48:	4691      	mov	r9, r2
 800bd4a:	690a      	ldr	r2, [r1, #16]
 800bd4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	bfb8      	it	lt
 800bd54:	460b      	movlt	r3, r1
 800bd56:	460c      	mov	r4, r1
 800bd58:	bfbc      	itt	lt
 800bd5a:	464c      	movlt	r4, r9
 800bd5c:	4699      	movlt	r9, r3
 800bd5e:	6927      	ldr	r7, [r4, #16]
 800bd60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd64:	68a3      	ldr	r3, [r4, #8]
 800bd66:	6861      	ldr	r1, [r4, #4]
 800bd68:	eb07 060a 	add.w	r6, r7, sl
 800bd6c:	42b3      	cmp	r3, r6
 800bd6e:	b085      	sub	sp, #20
 800bd70:	bfb8      	it	lt
 800bd72:	3101      	addlt	r1, #1
 800bd74:	f7ff feda 	bl	800bb2c <_Balloc>
 800bd78:	b930      	cbnz	r0, 800bd88 <__multiply+0x44>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	4b44      	ldr	r3, [pc, #272]	; (800be90 <__multiply+0x14c>)
 800bd7e:	4845      	ldr	r0, [pc, #276]	; (800be94 <__multiply+0x150>)
 800bd80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bd84:	f000 fb1a 	bl	800c3bc <__assert_func>
 800bd88:	f100 0514 	add.w	r5, r0, #20
 800bd8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd90:	462b      	mov	r3, r5
 800bd92:	2200      	movs	r2, #0
 800bd94:	4543      	cmp	r3, r8
 800bd96:	d321      	bcc.n	800bddc <__multiply+0x98>
 800bd98:	f104 0314 	add.w	r3, r4, #20
 800bd9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bda0:	f109 0314 	add.w	r3, r9, #20
 800bda4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bda8:	9202      	str	r2, [sp, #8]
 800bdaa:	1b3a      	subs	r2, r7, r4
 800bdac:	3a15      	subs	r2, #21
 800bdae:	f022 0203 	bic.w	r2, r2, #3
 800bdb2:	3204      	adds	r2, #4
 800bdb4:	f104 0115 	add.w	r1, r4, #21
 800bdb8:	428f      	cmp	r7, r1
 800bdba:	bf38      	it	cc
 800bdbc:	2204      	movcc	r2, #4
 800bdbe:	9201      	str	r2, [sp, #4]
 800bdc0:	9a02      	ldr	r2, [sp, #8]
 800bdc2:	9303      	str	r3, [sp, #12]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d80c      	bhi.n	800bde2 <__multiply+0x9e>
 800bdc8:	2e00      	cmp	r6, #0
 800bdca:	dd03      	ble.n	800bdd4 <__multiply+0x90>
 800bdcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d05b      	beq.n	800be8c <__multiply+0x148>
 800bdd4:	6106      	str	r6, [r0, #16]
 800bdd6:	b005      	add	sp, #20
 800bdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bddc:	f843 2b04 	str.w	r2, [r3], #4
 800bde0:	e7d8      	b.n	800bd94 <__multiply+0x50>
 800bde2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bde6:	f1ba 0f00 	cmp.w	sl, #0
 800bdea:	d024      	beq.n	800be36 <__multiply+0xf2>
 800bdec:	f104 0e14 	add.w	lr, r4, #20
 800bdf0:	46a9      	mov	r9, r5
 800bdf2:	f04f 0c00 	mov.w	ip, #0
 800bdf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdfa:	f8d9 1000 	ldr.w	r1, [r9]
 800bdfe:	fa1f fb82 	uxth.w	fp, r2
 800be02:	b289      	uxth	r1, r1
 800be04:	fb0a 110b 	mla	r1, sl, fp, r1
 800be08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be0c:	f8d9 2000 	ldr.w	r2, [r9]
 800be10:	4461      	add	r1, ip
 800be12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be16:	fb0a c20b 	mla	r2, sl, fp, ip
 800be1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be1e:	b289      	uxth	r1, r1
 800be20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be24:	4577      	cmp	r7, lr
 800be26:	f849 1b04 	str.w	r1, [r9], #4
 800be2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be2e:	d8e2      	bhi.n	800bdf6 <__multiply+0xb2>
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	f845 c002 	str.w	ip, [r5, r2]
 800be36:	9a03      	ldr	r2, [sp, #12]
 800be38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be3c:	3304      	adds	r3, #4
 800be3e:	f1b9 0f00 	cmp.w	r9, #0
 800be42:	d021      	beq.n	800be88 <__multiply+0x144>
 800be44:	6829      	ldr	r1, [r5, #0]
 800be46:	f104 0c14 	add.w	ip, r4, #20
 800be4a:	46ae      	mov	lr, r5
 800be4c:	f04f 0a00 	mov.w	sl, #0
 800be50:	f8bc b000 	ldrh.w	fp, [ip]
 800be54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be58:	fb09 220b 	mla	r2, r9, fp, r2
 800be5c:	4452      	add	r2, sl
 800be5e:	b289      	uxth	r1, r1
 800be60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be64:	f84e 1b04 	str.w	r1, [lr], #4
 800be68:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be70:	f8be 1000 	ldrh.w	r1, [lr]
 800be74:	fb09 110a 	mla	r1, r9, sl, r1
 800be78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800be7c:	4567      	cmp	r7, ip
 800be7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be82:	d8e5      	bhi.n	800be50 <__multiply+0x10c>
 800be84:	9a01      	ldr	r2, [sp, #4]
 800be86:	50a9      	str	r1, [r5, r2]
 800be88:	3504      	adds	r5, #4
 800be8a:	e799      	b.n	800bdc0 <__multiply+0x7c>
 800be8c:	3e01      	subs	r6, #1
 800be8e:	e79b      	b.n	800bdc8 <__multiply+0x84>
 800be90:	0800cb6c 	.word	0x0800cb6c
 800be94:	0800cb7d 	.word	0x0800cb7d

0800be98 <__pow5mult>:
 800be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be9c:	4615      	mov	r5, r2
 800be9e:	f012 0203 	ands.w	r2, r2, #3
 800bea2:	4606      	mov	r6, r0
 800bea4:	460f      	mov	r7, r1
 800bea6:	d007      	beq.n	800beb8 <__pow5mult+0x20>
 800bea8:	4c25      	ldr	r4, [pc, #148]	; (800bf40 <__pow5mult+0xa8>)
 800beaa:	3a01      	subs	r2, #1
 800beac:	2300      	movs	r3, #0
 800beae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800beb2:	f7ff fe9d 	bl	800bbf0 <__multadd>
 800beb6:	4607      	mov	r7, r0
 800beb8:	10ad      	asrs	r5, r5, #2
 800beba:	d03d      	beq.n	800bf38 <__pow5mult+0xa0>
 800bebc:	69f4      	ldr	r4, [r6, #28]
 800bebe:	b97c      	cbnz	r4, 800bee0 <__pow5mult+0x48>
 800bec0:	2010      	movs	r0, #16
 800bec2:	f7ff fd7f 	bl	800b9c4 <malloc>
 800bec6:	4602      	mov	r2, r0
 800bec8:	61f0      	str	r0, [r6, #28]
 800beca:	b928      	cbnz	r0, 800bed8 <__pow5mult+0x40>
 800becc:	4b1d      	ldr	r3, [pc, #116]	; (800bf44 <__pow5mult+0xac>)
 800bece:	481e      	ldr	r0, [pc, #120]	; (800bf48 <__pow5mult+0xb0>)
 800bed0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bed4:	f000 fa72 	bl	800c3bc <__assert_func>
 800bed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bedc:	6004      	str	r4, [r0, #0]
 800bede:	60c4      	str	r4, [r0, #12]
 800bee0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bee8:	b94c      	cbnz	r4, 800befe <__pow5mult+0x66>
 800beea:	f240 2171 	movw	r1, #625	; 0x271
 800beee:	4630      	mov	r0, r6
 800bef0:	f7ff ff12 	bl	800bd18 <__i2b>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f8c8 0008 	str.w	r0, [r8, #8]
 800befa:	4604      	mov	r4, r0
 800befc:	6003      	str	r3, [r0, #0]
 800befe:	f04f 0900 	mov.w	r9, #0
 800bf02:	07eb      	lsls	r3, r5, #31
 800bf04:	d50a      	bpl.n	800bf1c <__pow5mult+0x84>
 800bf06:	4639      	mov	r1, r7
 800bf08:	4622      	mov	r2, r4
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f7ff ff1a 	bl	800bd44 <__multiply>
 800bf10:	4639      	mov	r1, r7
 800bf12:	4680      	mov	r8, r0
 800bf14:	4630      	mov	r0, r6
 800bf16:	f7ff fe49 	bl	800bbac <_Bfree>
 800bf1a:	4647      	mov	r7, r8
 800bf1c:	106d      	asrs	r5, r5, #1
 800bf1e:	d00b      	beq.n	800bf38 <__pow5mult+0xa0>
 800bf20:	6820      	ldr	r0, [r4, #0]
 800bf22:	b938      	cbnz	r0, 800bf34 <__pow5mult+0x9c>
 800bf24:	4622      	mov	r2, r4
 800bf26:	4621      	mov	r1, r4
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f7ff ff0b 	bl	800bd44 <__multiply>
 800bf2e:	6020      	str	r0, [r4, #0]
 800bf30:	f8c0 9000 	str.w	r9, [r0]
 800bf34:	4604      	mov	r4, r0
 800bf36:	e7e4      	b.n	800bf02 <__pow5mult+0x6a>
 800bf38:	4638      	mov	r0, r7
 800bf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3e:	bf00      	nop
 800bf40:	0800ccc8 	.word	0x0800ccc8
 800bf44:	0800cafd 	.word	0x0800cafd
 800bf48:	0800cb7d 	.word	0x0800cb7d

0800bf4c <__lshift>:
 800bf4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf50:	460c      	mov	r4, r1
 800bf52:	6849      	ldr	r1, [r1, #4]
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	4691      	mov	r9, r2
 800bf60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf64:	f108 0601 	add.w	r6, r8, #1
 800bf68:	42b3      	cmp	r3, r6
 800bf6a:	db0b      	blt.n	800bf84 <__lshift+0x38>
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	f7ff fddd 	bl	800bb2c <_Balloc>
 800bf72:	4605      	mov	r5, r0
 800bf74:	b948      	cbnz	r0, 800bf8a <__lshift+0x3e>
 800bf76:	4602      	mov	r2, r0
 800bf78:	4b28      	ldr	r3, [pc, #160]	; (800c01c <__lshift+0xd0>)
 800bf7a:	4829      	ldr	r0, [pc, #164]	; (800c020 <__lshift+0xd4>)
 800bf7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bf80:	f000 fa1c 	bl	800c3bc <__assert_func>
 800bf84:	3101      	adds	r1, #1
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	e7ee      	b.n	800bf68 <__lshift+0x1c>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f100 0114 	add.w	r1, r0, #20
 800bf90:	f100 0210 	add.w	r2, r0, #16
 800bf94:	4618      	mov	r0, r3
 800bf96:	4553      	cmp	r3, sl
 800bf98:	db33      	blt.n	800c002 <__lshift+0xb6>
 800bf9a:	6920      	ldr	r0, [r4, #16]
 800bf9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfa0:	f104 0314 	add.w	r3, r4, #20
 800bfa4:	f019 091f 	ands.w	r9, r9, #31
 800bfa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfb0:	d02b      	beq.n	800c00a <__lshift+0xbe>
 800bfb2:	f1c9 0e20 	rsb	lr, r9, #32
 800bfb6:	468a      	mov	sl, r1
 800bfb8:	2200      	movs	r2, #0
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	fa00 f009 	lsl.w	r0, r0, r9
 800bfc0:	4310      	orrs	r0, r2
 800bfc2:	f84a 0b04 	str.w	r0, [sl], #4
 800bfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfca:	459c      	cmp	ip, r3
 800bfcc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfd0:	d8f3      	bhi.n	800bfba <__lshift+0x6e>
 800bfd2:	ebac 0304 	sub.w	r3, ip, r4
 800bfd6:	3b15      	subs	r3, #21
 800bfd8:	f023 0303 	bic.w	r3, r3, #3
 800bfdc:	3304      	adds	r3, #4
 800bfde:	f104 0015 	add.w	r0, r4, #21
 800bfe2:	4584      	cmp	ip, r0
 800bfe4:	bf38      	it	cc
 800bfe6:	2304      	movcc	r3, #4
 800bfe8:	50ca      	str	r2, [r1, r3]
 800bfea:	b10a      	cbz	r2, 800bff0 <__lshift+0xa4>
 800bfec:	f108 0602 	add.w	r6, r8, #2
 800bff0:	3e01      	subs	r6, #1
 800bff2:	4638      	mov	r0, r7
 800bff4:	612e      	str	r6, [r5, #16]
 800bff6:	4621      	mov	r1, r4
 800bff8:	f7ff fdd8 	bl	800bbac <_Bfree>
 800bffc:	4628      	mov	r0, r5
 800bffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c002:	f842 0f04 	str.w	r0, [r2, #4]!
 800c006:	3301      	adds	r3, #1
 800c008:	e7c5      	b.n	800bf96 <__lshift+0x4a>
 800c00a:	3904      	subs	r1, #4
 800c00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c010:	f841 2f04 	str.w	r2, [r1, #4]!
 800c014:	459c      	cmp	ip, r3
 800c016:	d8f9      	bhi.n	800c00c <__lshift+0xc0>
 800c018:	e7ea      	b.n	800bff0 <__lshift+0xa4>
 800c01a:	bf00      	nop
 800c01c:	0800cb6c 	.word	0x0800cb6c
 800c020:	0800cb7d 	.word	0x0800cb7d

0800c024 <__mcmp>:
 800c024:	b530      	push	{r4, r5, lr}
 800c026:	6902      	ldr	r2, [r0, #16]
 800c028:	690c      	ldr	r4, [r1, #16]
 800c02a:	1b12      	subs	r2, r2, r4
 800c02c:	d10e      	bne.n	800c04c <__mcmp+0x28>
 800c02e:	f100 0314 	add.w	r3, r0, #20
 800c032:	3114      	adds	r1, #20
 800c034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c03c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c044:	42a5      	cmp	r5, r4
 800c046:	d003      	beq.n	800c050 <__mcmp+0x2c>
 800c048:	d305      	bcc.n	800c056 <__mcmp+0x32>
 800c04a:	2201      	movs	r2, #1
 800c04c:	4610      	mov	r0, r2
 800c04e:	bd30      	pop	{r4, r5, pc}
 800c050:	4283      	cmp	r3, r0
 800c052:	d3f3      	bcc.n	800c03c <__mcmp+0x18>
 800c054:	e7fa      	b.n	800c04c <__mcmp+0x28>
 800c056:	f04f 32ff 	mov.w	r2, #4294967295
 800c05a:	e7f7      	b.n	800c04c <__mcmp+0x28>

0800c05c <__mdiff>:
 800c05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	460c      	mov	r4, r1
 800c062:	4606      	mov	r6, r0
 800c064:	4611      	mov	r1, r2
 800c066:	4620      	mov	r0, r4
 800c068:	4690      	mov	r8, r2
 800c06a:	f7ff ffdb 	bl	800c024 <__mcmp>
 800c06e:	1e05      	subs	r5, r0, #0
 800c070:	d110      	bne.n	800c094 <__mdiff+0x38>
 800c072:	4629      	mov	r1, r5
 800c074:	4630      	mov	r0, r6
 800c076:	f7ff fd59 	bl	800bb2c <_Balloc>
 800c07a:	b930      	cbnz	r0, 800c08a <__mdiff+0x2e>
 800c07c:	4b3a      	ldr	r3, [pc, #232]	; (800c168 <__mdiff+0x10c>)
 800c07e:	4602      	mov	r2, r0
 800c080:	f240 2137 	movw	r1, #567	; 0x237
 800c084:	4839      	ldr	r0, [pc, #228]	; (800c16c <__mdiff+0x110>)
 800c086:	f000 f999 	bl	800c3bc <__assert_func>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c094:	bfa4      	itt	ge
 800c096:	4643      	movge	r3, r8
 800c098:	46a0      	movge	r8, r4
 800c09a:	4630      	mov	r0, r6
 800c09c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c0a0:	bfa6      	itte	ge
 800c0a2:	461c      	movge	r4, r3
 800c0a4:	2500      	movge	r5, #0
 800c0a6:	2501      	movlt	r5, #1
 800c0a8:	f7ff fd40 	bl	800bb2c <_Balloc>
 800c0ac:	b920      	cbnz	r0, 800c0b8 <__mdiff+0x5c>
 800c0ae:	4b2e      	ldr	r3, [pc, #184]	; (800c168 <__mdiff+0x10c>)
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	f240 2145 	movw	r1, #581	; 0x245
 800c0b6:	e7e5      	b.n	800c084 <__mdiff+0x28>
 800c0b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c0bc:	6926      	ldr	r6, [r4, #16]
 800c0be:	60c5      	str	r5, [r0, #12]
 800c0c0:	f104 0914 	add.w	r9, r4, #20
 800c0c4:	f108 0514 	add.w	r5, r8, #20
 800c0c8:	f100 0e14 	add.w	lr, r0, #20
 800c0cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0d4:	f108 0210 	add.w	r2, r8, #16
 800c0d8:	46f2      	mov	sl, lr
 800c0da:	2100      	movs	r1, #0
 800c0dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0e4:	fa11 f88b 	uxtah	r8, r1, fp
 800c0e8:	b299      	uxth	r1, r3
 800c0ea:	0c1b      	lsrs	r3, r3, #16
 800c0ec:	eba8 0801 	sub.w	r8, r8, r1
 800c0f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0f8:	fa1f f888 	uxth.w	r8, r8
 800c0fc:	1419      	asrs	r1, r3, #16
 800c0fe:	454e      	cmp	r6, r9
 800c100:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c104:	f84a 3b04 	str.w	r3, [sl], #4
 800c108:	d8e8      	bhi.n	800c0dc <__mdiff+0x80>
 800c10a:	1b33      	subs	r3, r6, r4
 800c10c:	3b15      	subs	r3, #21
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	3304      	adds	r3, #4
 800c114:	3415      	adds	r4, #21
 800c116:	42a6      	cmp	r6, r4
 800c118:	bf38      	it	cc
 800c11a:	2304      	movcc	r3, #4
 800c11c:	441d      	add	r5, r3
 800c11e:	4473      	add	r3, lr
 800c120:	469e      	mov	lr, r3
 800c122:	462e      	mov	r6, r5
 800c124:	4566      	cmp	r6, ip
 800c126:	d30e      	bcc.n	800c146 <__mdiff+0xea>
 800c128:	f10c 0203 	add.w	r2, ip, #3
 800c12c:	1b52      	subs	r2, r2, r5
 800c12e:	f022 0203 	bic.w	r2, r2, #3
 800c132:	3d03      	subs	r5, #3
 800c134:	45ac      	cmp	ip, r5
 800c136:	bf38      	it	cc
 800c138:	2200      	movcc	r2, #0
 800c13a:	4413      	add	r3, r2
 800c13c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c140:	b17a      	cbz	r2, 800c162 <__mdiff+0x106>
 800c142:	6107      	str	r7, [r0, #16]
 800c144:	e7a4      	b.n	800c090 <__mdiff+0x34>
 800c146:	f856 8b04 	ldr.w	r8, [r6], #4
 800c14a:	fa11 f288 	uxtah	r2, r1, r8
 800c14e:	1414      	asrs	r4, r2, #16
 800c150:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c154:	b292      	uxth	r2, r2
 800c156:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c15a:	f84e 2b04 	str.w	r2, [lr], #4
 800c15e:	1421      	asrs	r1, r4, #16
 800c160:	e7e0      	b.n	800c124 <__mdiff+0xc8>
 800c162:	3f01      	subs	r7, #1
 800c164:	e7ea      	b.n	800c13c <__mdiff+0xe0>
 800c166:	bf00      	nop
 800c168:	0800cb6c 	.word	0x0800cb6c
 800c16c:	0800cb7d 	.word	0x0800cb7d

0800c170 <__d2b>:
 800c170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c174:	460f      	mov	r7, r1
 800c176:	2101      	movs	r1, #1
 800c178:	ec59 8b10 	vmov	r8, r9, d0
 800c17c:	4616      	mov	r6, r2
 800c17e:	f7ff fcd5 	bl	800bb2c <_Balloc>
 800c182:	4604      	mov	r4, r0
 800c184:	b930      	cbnz	r0, 800c194 <__d2b+0x24>
 800c186:	4602      	mov	r2, r0
 800c188:	4b24      	ldr	r3, [pc, #144]	; (800c21c <__d2b+0xac>)
 800c18a:	4825      	ldr	r0, [pc, #148]	; (800c220 <__d2b+0xb0>)
 800c18c:	f240 310f 	movw	r1, #783	; 0x30f
 800c190:	f000 f914 	bl	800c3bc <__assert_func>
 800c194:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c19c:	bb2d      	cbnz	r5, 800c1ea <__d2b+0x7a>
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	f1b8 0300 	subs.w	r3, r8, #0
 800c1a4:	d026      	beq.n	800c1f4 <__d2b+0x84>
 800c1a6:	4668      	mov	r0, sp
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	f7ff fd87 	bl	800bcbc <__lo0bits>
 800c1ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c1b2:	b1e8      	cbz	r0, 800c1f0 <__d2b+0x80>
 800c1b4:	f1c0 0320 	rsb	r3, r0, #32
 800c1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1bc:	430b      	orrs	r3, r1
 800c1be:	40c2      	lsrs	r2, r0
 800c1c0:	6163      	str	r3, [r4, #20]
 800c1c2:	9201      	str	r2, [sp, #4]
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	61a3      	str	r3, [r4, #24]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bf14      	ite	ne
 800c1cc:	2202      	movne	r2, #2
 800c1ce:	2201      	moveq	r2, #1
 800c1d0:	6122      	str	r2, [r4, #16]
 800c1d2:	b1bd      	cbz	r5, 800c204 <__d2b+0x94>
 800c1d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1d8:	4405      	add	r5, r0
 800c1da:	603d      	str	r5, [r7, #0]
 800c1dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1e0:	6030      	str	r0, [r6, #0]
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	b003      	add	sp, #12
 800c1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1ee:	e7d6      	b.n	800c19e <__d2b+0x2e>
 800c1f0:	6161      	str	r1, [r4, #20]
 800c1f2:	e7e7      	b.n	800c1c4 <__d2b+0x54>
 800c1f4:	a801      	add	r0, sp, #4
 800c1f6:	f7ff fd61 	bl	800bcbc <__lo0bits>
 800c1fa:	9b01      	ldr	r3, [sp, #4]
 800c1fc:	6163      	str	r3, [r4, #20]
 800c1fe:	3020      	adds	r0, #32
 800c200:	2201      	movs	r2, #1
 800c202:	e7e5      	b.n	800c1d0 <__d2b+0x60>
 800c204:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c20c:	6038      	str	r0, [r7, #0]
 800c20e:	6918      	ldr	r0, [r3, #16]
 800c210:	f7ff fd34 	bl	800bc7c <__hi0bits>
 800c214:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c218:	e7e2      	b.n	800c1e0 <__d2b+0x70>
 800c21a:	bf00      	nop
 800c21c:	0800cb6c 	.word	0x0800cb6c
 800c220:	0800cb7d 	.word	0x0800cb7d

0800c224 <__sflush_r>:
 800c224:	898a      	ldrh	r2, [r1, #12]
 800c226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22a:	4605      	mov	r5, r0
 800c22c:	0710      	lsls	r0, r2, #28
 800c22e:	460c      	mov	r4, r1
 800c230:	d458      	bmi.n	800c2e4 <__sflush_r+0xc0>
 800c232:	684b      	ldr	r3, [r1, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	dc05      	bgt.n	800c244 <__sflush_r+0x20>
 800c238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	dc02      	bgt.n	800c244 <__sflush_r+0x20>
 800c23e:	2000      	movs	r0, #0
 800c240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c246:	2e00      	cmp	r6, #0
 800c248:	d0f9      	beq.n	800c23e <__sflush_r+0x1a>
 800c24a:	2300      	movs	r3, #0
 800c24c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c250:	682f      	ldr	r7, [r5, #0]
 800c252:	6a21      	ldr	r1, [r4, #32]
 800c254:	602b      	str	r3, [r5, #0]
 800c256:	d032      	beq.n	800c2be <__sflush_r+0x9a>
 800c258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	075a      	lsls	r2, r3, #29
 800c25e:	d505      	bpl.n	800c26c <__sflush_r+0x48>
 800c260:	6863      	ldr	r3, [r4, #4]
 800c262:	1ac0      	subs	r0, r0, r3
 800c264:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c266:	b10b      	cbz	r3, 800c26c <__sflush_r+0x48>
 800c268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c26a:	1ac0      	subs	r0, r0, r3
 800c26c:	2300      	movs	r3, #0
 800c26e:	4602      	mov	r2, r0
 800c270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c272:	6a21      	ldr	r1, [r4, #32]
 800c274:	4628      	mov	r0, r5
 800c276:	47b0      	blx	r6
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	d106      	bne.n	800c28c <__sflush_r+0x68>
 800c27e:	6829      	ldr	r1, [r5, #0]
 800c280:	291d      	cmp	r1, #29
 800c282:	d82b      	bhi.n	800c2dc <__sflush_r+0xb8>
 800c284:	4a29      	ldr	r2, [pc, #164]	; (800c32c <__sflush_r+0x108>)
 800c286:	410a      	asrs	r2, r1
 800c288:	07d6      	lsls	r6, r2, #31
 800c28a:	d427      	bmi.n	800c2dc <__sflush_r+0xb8>
 800c28c:	2200      	movs	r2, #0
 800c28e:	6062      	str	r2, [r4, #4]
 800c290:	04d9      	lsls	r1, r3, #19
 800c292:	6922      	ldr	r2, [r4, #16]
 800c294:	6022      	str	r2, [r4, #0]
 800c296:	d504      	bpl.n	800c2a2 <__sflush_r+0x7e>
 800c298:	1c42      	adds	r2, r0, #1
 800c29a:	d101      	bne.n	800c2a0 <__sflush_r+0x7c>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b903      	cbnz	r3, 800c2a2 <__sflush_r+0x7e>
 800c2a0:	6560      	str	r0, [r4, #84]	; 0x54
 800c2a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2a4:	602f      	str	r7, [r5, #0]
 800c2a6:	2900      	cmp	r1, #0
 800c2a8:	d0c9      	beq.n	800c23e <__sflush_r+0x1a>
 800c2aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2ae:	4299      	cmp	r1, r3
 800c2b0:	d002      	beq.n	800c2b8 <__sflush_r+0x94>
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f7ff fb3a 	bl	800b92c <_free_r>
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	6360      	str	r0, [r4, #52]	; 0x34
 800c2bc:	e7c0      	b.n	800c240 <__sflush_r+0x1c>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	47b0      	blx	r6
 800c2c4:	1c41      	adds	r1, r0, #1
 800c2c6:	d1c8      	bne.n	800c25a <__sflush_r+0x36>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d0c5      	beq.n	800c25a <__sflush_r+0x36>
 800c2ce:	2b1d      	cmp	r3, #29
 800c2d0:	d001      	beq.n	800c2d6 <__sflush_r+0xb2>
 800c2d2:	2b16      	cmp	r3, #22
 800c2d4:	d101      	bne.n	800c2da <__sflush_r+0xb6>
 800c2d6:	602f      	str	r7, [r5, #0]
 800c2d8:	e7b1      	b.n	800c23e <__sflush_r+0x1a>
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e0:	81a3      	strh	r3, [r4, #12]
 800c2e2:	e7ad      	b.n	800c240 <__sflush_r+0x1c>
 800c2e4:	690f      	ldr	r7, [r1, #16]
 800c2e6:	2f00      	cmp	r7, #0
 800c2e8:	d0a9      	beq.n	800c23e <__sflush_r+0x1a>
 800c2ea:	0793      	lsls	r3, r2, #30
 800c2ec:	680e      	ldr	r6, [r1, #0]
 800c2ee:	bf08      	it	eq
 800c2f0:	694b      	ldreq	r3, [r1, #20]
 800c2f2:	600f      	str	r7, [r1, #0]
 800c2f4:	bf18      	it	ne
 800c2f6:	2300      	movne	r3, #0
 800c2f8:	eba6 0807 	sub.w	r8, r6, r7
 800c2fc:	608b      	str	r3, [r1, #8]
 800c2fe:	f1b8 0f00 	cmp.w	r8, #0
 800c302:	dd9c      	ble.n	800c23e <__sflush_r+0x1a>
 800c304:	6a21      	ldr	r1, [r4, #32]
 800c306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c308:	4643      	mov	r3, r8
 800c30a:	463a      	mov	r2, r7
 800c30c:	4628      	mov	r0, r5
 800c30e:	47b0      	blx	r6
 800c310:	2800      	cmp	r0, #0
 800c312:	dc06      	bgt.n	800c322 <__sflush_r+0xfe>
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	e78e      	b.n	800c240 <__sflush_r+0x1c>
 800c322:	4407      	add	r7, r0
 800c324:	eba8 0800 	sub.w	r8, r8, r0
 800c328:	e7e9      	b.n	800c2fe <__sflush_r+0xda>
 800c32a:	bf00      	nop
 800c32c:	dfbffffe 	.word	0xdfbffffe

0800c330 <_fflush_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	690b      	ldr	r3, [r1, #16]
 800c334:	4605      	mov	r5, r0
 800c336:	460c      	mov	r4, r1
 800c338:	b913      	cbnz	r3, 800c340 <_fflush_r+0x10>
 800c33a:	2500      	movs	r5, #0
 800c33c:	4628      	mov	r0, r5
 800c33e:	bd38      	pop	{r3, r4, r5, pc}
 800c340:	b118      	cbz	r0, 800c34a <_fflush_r+0x1a>
 800c342:	6a03      	ldr	r3, [r0, #32]
 800c344:	b90b      	cbnz	r3, 800c34a <_fflush_r+0x1a>
 800c346:	f7fe fb7b 	bl	800aa40 <__sinit>
 800c34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d0f3      	beq.n	800c33a <_fflush_r+0xa>
 800c352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c354:	07d0      	lsls	r0, r2, #31
 800c356:	d404      	bmi.n	800c362 <_fflush_r+0x32>
 800c358:	0599      	lsls	r1, r3, #22
 800c35a:	d402      	bmi.n	800c362 <_fflush_r+0x32>
 800c35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c35e:	f7fe fc66 	bl	800ac2e <__retarget_lock_acquire_recursive>
 800c362:	4628      	mov	r0, r5
 800c364:	4621      	mov	r1, r4
 800c366:	f7ff ff5d 	bl	800c224 <__sflush_r>
 800c36a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c36c:	07da      	lsls	r2, r3, #31
 800c36e:	4605      	mov	r5, r0
 800c370:	d4e4      	bmi.n	800c33c <_fflush_r+0xc>
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	059b      	lsls	r3, r3, #22
 800c376:	d4e1      	bmi.n	800c33c <_fflush_r+0xc>
 800c378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37a:	f7fe fc59 	bl	800ac30 <__retarget_lock_release_recursive>
 800c37e:	e7dd      	b.n	800c33c <_fflush_r+0xc>

0800c380 <_sbrk_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d06      	ldr	r5, [pc, #24]	; (800c39c <_sbrk_r+0x1c>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	f7f6 fe96 	bl	80030bc <_sbrk>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_sbrk_r+0x1a>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_sbrk_r+0x1a>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	20000a1c 	.word	0x20000a1c

0800c3a0 <memcpy>:
 800c3a0:	440a      	add	r2, r1
 800c3a2:	4291      	cmp	r1, r2
 800c3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3a8:	d100      	bne.n	800c3ac <memcpy+0xc>
 800c3aa:	4770      	bx	lr
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3b6:	4291      	cmp	r1, r2
 800c3b8:	d1f9      	bne.n	800c3ae <memcpy+0xe>
 800c3ba:	bd10      	pop	{r4, pc}

0800c3bc <__assert_func>:
 800c3bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3be:	4614      	mov	r4, r2
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4b09      	ldr	r3, [pc, #36]	; (800c3e8 <__assert_func+0x2c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	68d8      	ldr	r0, [r3, #12]
 800c3ca:	b14c      	cbz	r4, 800c3e0 <__assert_func+0x24>
 800c3cc:	4b07      	ldr	r3, [pc, #28]	; (800c3ec <__assert_func+0x30>)
 800c3ce:	9100      	str	r1, [sp, #0]
 800c3d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3d4:	4906      	ldr	r1, [pc, #24]	; (800c3f0 <__assert_func+0x34>)
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	f000 f844 	bl	800c464 <fiprintf>
 800c3dc:	f000 f854 	bl	800c488 <abort>
 800c3e0:	4b04      	ldr	r3, [pc, #16]	; (800c3f4 <__assert_func+0x38>)
 800c3e2:	461c      	mov	r4, r3
 800c3e4:	e7f3      	b.n	800c3ce <__assert_func+0x12>
 800c3e6:	bf00      	nop
 800c3e8:	20000064 	.word	0x20000064
 800c3ec:	0800ccde 	.word	0x0800ccde
 800c3f0:	0800cceb 	.word	0x0800cceb
 800c3f4:	0800cd19 	.word	0x0800cd19

0800c3f8 <_calloc_r>:
 800c3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3fa:	fba1 2402 	umull	r2, r4, r1, r2
 800c3fe:	b94c      	cbnz	r4, 800c414 <_calloc_r+0x1c>
 800c400:	4611      	mov	r1, r2
 800c402:	9201      	str	r2, [sp, #4]
 800c404:	f7ff fb06 	bl	800ba14 <_malloc_r>
 800c408:	9a01      	ldr	r2, [sp, #4]
 800c40a:	4605      	mov	r5, r0
 800c40c:	b930      	cbnz	r0, 800c41c <_calloc_r+0x24>
 800c40e:	4628      	mov	r0, r5
 800c410:	b003      	add	sp, #12
 800c412:	bd30      	pop	{r4, r5, pc}
 800c414:	220c      	movs	r2, #12
 800c416:	6002      	str	r2, [r0, #0]
 800c418:	2500      	movs	r5, #0
 800c41a:	e7f8      	b.n	800c40e <_calloc_r+0x16>
 800c41c:	4621      	mov	r1, r4
 800c41e:	f7fe fb88 	bl	800ab32 <memset>
 800c422:	e7f4      	b.n	800c40e <_calloc_r+0x16>

0800c424 <__ascii_mbtowc>:
 800c424:	b082      	sub	sp, #8
 800c426:	b901      	cbnz	r1, 800c42a <__ascii_mbtowc+0x6>
 800c428:	a901      	add	r1, sp, #4
 800c42a:	b142      	cbz	r2, 800c43e <__ascii_mbtowc+0x1a>
 800c42c:	b14b      	cbz	r3, 800c442 <__ascii_mbtowc+0x1e>
 800c42e:	7813      	ldrb	r3, [r2, #0]
 800c430:	600b      	str	r3, [r1, #0]
 800c432:	7812      	ldrb	r2, [r2, #0]
 800c434:	1e10      	subs	r0, r2, #0
 800c436:	bf18      	it	ne
 800c438:	2001      	movne	r0, #1
 800c43a:	b002      	add	sp, #8
 800c43c:	4770      	bx	lr
 800c43e:	4610      	mov	r0, r2
 800c440:	e7fb      	b.n	800c43a <__ascii_mbtowc+0x16>
 800c442:	f06f 0001 	mvn.w	r0, #1
 800c446:	e7f8      	b.n	800c43a <__ascii_mbtowc+0x16>

0800c448 <__ascii_wctomb>:
 800c448:	b149      	cbz	r1, 800c45e <__ascii_wctomb+0x16>
 800c44a:	2aff      	cmp	r2, #255	; 0xff
 800c44c:	bf85      	ittet	hi
 800c44e:	238a      	movhi	r3, #138	; 0x8a
 800c450:	6003      	strhi	r3, [r0, #0]
 800c452:	700a      	strbls	r2, [r1, #0]
 800c454:	f04f 30ff 	movhi.w	r0, #4294967295
 800c458:	bf98      	it	ls
 800c45a:	2001      	movls	r0, #1
 800c45c:	4770      	bx	lr
 800c45e:	4608      	mov	r0, r1
 800c460:	4770      	bx	lr
	...

0800c464 <fiprintf>:
 800c464:	b40e      	push	{r1, r2, r3}
 800c466:	b503      	push	{r0, r1, lr}
 800c468:	4601      	mov	r1, r0
 800c46a:	ab03      	add	r3, sp, #12
 800c46c:	4805      	ldr	r0, [pc, #20]	; (800c484 <fiprintf+0x20>)
 800c46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c472:	6800      	ldr	r0, [r0, #0]
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	f000 f837 	bl	800c4e8 <_vfiprintf_r>
 800c47a:	b002      	add	sp, #8
 800c47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c480:	b003      	add	sp, #12
 800c482:	4770      	bx	lr
 800c484:	20000064 	.word	0x20000064

0800c488 <abort>:
 800c488:	b508      	push	{r3, lr}
 800c48a:	2006      	movs	r0, #6
 800c48c:	f000 fa04 	bl	800c898 <raise>
 800c490:	2001      	movs	r0, #1
 800c492:	f7f6 fd9b 	bl	8002fcc <_exit>

0800c496 <__sfputc_r>:
 800c496:	6893      	ldr	r3, [r2, #8]
 800c498:	3b01      	subs	r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	b410      	push	{r4}
 800c49e:	6093      	str	r3, [r2, #8]
 800c4a0:	da08      	bge.n	800c4b4 <__sfputc_r+0x1e>
 800c4a2:	6994      	ldr	r4, [r2, #24]
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	db01      	blt.n	800c4ac <__sfputc_r+0x16>
 800c4a8:	290a      	cmp	r1, #10
 800c4aa:	d103      	bne.n	800c4b4 <__sfputc_r+0x1e>
 800c4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b0:	f000 b934 	b.w	800c71c <__swbuf_r>
 800c4b4:	6813      	ldr	r3, [r2, #0]
 800c4b6:	1c58      	adds	r0, r3, #1
 800c4b8:	6010      	str	r0, [r2, #0]
 800c4ba:	7019      	strb	r1, [r3, #0]
 800c4bc:	4608      	mov	r0, r1
 800c4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <__sfputs_r>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	460f      	mov	r7, r1
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	18d5      	adds	r5, r2, r3
 800c4ce:	42ac      	cmp	r4, r5
 800c4d0:	d101      	bne.n	800c4d6 <__sfputs_r+0x12>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e007      	b.n	800c4e6 <__sfputs_r+0x22>
 800c4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4da:	463a      	mov	r2, r7
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff ffda 	bl	800c496 <__sfputc_r>
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	d1f3      	bne.n	800c4ce <__sfputs_r+0xa>
 800c4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4e8 <_vfiprintf_r>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	b09d      	sub	sp, #116	; 0x74
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	4698      	mov	r8, r3
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	b118      	cbz	r0, 800c500 <_vfiprintf_r+0x18>
 800c4f8:	6a03      	ldr	r3, [r0, #32]
 800c4fa:	b90b      	cbnz	r3, 800c500 <_vfiprintf_r+0x18>
 800c4fc:	f7fe faa0 	bl	800aa40 <__sinit>
 800c500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c502:	07d9      	lsls	r1, r3, #31
 800c504:	d405      	bmi.n	800c512 <_vfiprintf_r+0x2a>
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	059a      	lsls	r2, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_vfiprintf_r+0x2a>
 800c50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c50e:	f7fe fb8e 	bl	800ac2e <__retarget_lock_acquire_recursive>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	071b      	lsls	r3, r3, #28
 800c516:	d501      	bpl.n	800c51c <_vfiprintf_r+0x34>
 800c518:	692b      	ldr	r3, [r5, #16]
 800c51a:	b99b      	cbnz	r3, 800c544 <_vfiprintf_r+0x5c>
 800c51c:	4629      	mov	r1, r5
 800c51e:	4630      	mov	r0, r6
 800c520:	f000 f93a 	bl	800c798 <__swsetup_r>
 800c524:	b170      	cbz	r0, 800c544 <_vfiprintf_r+0x5c>
 800c526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c528:	07dc      	lsls	r4, r3, #31
 800c52a:	d504      	bpl.n	800c536 <_vfiprintf_r+0x4e>
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	b01d      	add	sp, #116	; 0x74
 800c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c536:	89ab      	ldrh	r3, [r5, #12]
 800c538:	0598      	lsls	r0, r3, #22
 800c53a:	d4f7      	bmi.n	800c52c <_vfiprintf_r+0x44>
 800c53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c53e:	f7fe fb77 	bl	800ac30 <__retarget_lock_release_recursive>
 800c542:	e7f3      	b.n	800c52c <_vfiprintf_r+0x44>
 800c544:	2300      	movs	r3, #0
 800c546:	9309      	str	r3, [sp, #36]	; 0x24
 800c548:	2320      	movs	r3, #32
 800c54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c552:	2330      	movs	r3, #48	; 0x30
 800c554:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c708 <_vfiprintf_r+0x220>
 800c558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c55c:	f04f 0901 	mov.w	r9, #1
 800c560:	4623      	mov	r3, r4
 800c562:	469a      	mov	sl, r3
 800c564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c568:	b10a      	cbz	r2, 800c56e <_vfiprintf_r+0x86>
 800c56a:	2a25      	cmp	r2, #37	; 0x25
 800c56c:	d1f9      	bne.n	800c562 <_vfiprintf_r+0x7a>
 800c56e:	ebba 0b04 	subs.w	fp, sl, r4
 800c572:	d00b      	beq.n	800c58c <_vfiprintf_r+0xa4>
 800c574:	465b      	mov	r3, fp
 800c576:	4622      	mov	r2, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7ff ffa2 	bl	800c4c4 <__sfputs_r>
 800c580:	3001      	adds	r0, #1
 800c582:	f000 80a9 	beq.w	800c6d8 <_vfiprintf_r+0x1f0>
 800c586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c588:	445a      	add	r2, fp
 800c58a:	9209      	str	r2, [sp, #36]	; 0x24
 800c58c:	f89a 3000 	ldrb.w	r3, [sl]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 80a1 	beq.w	800c6d8 <_vfiprintf_r+0x1f0>
 800c596:	2300      	movs	r3, #0
 800c598:	f04f 32ff 	mov.w	r2, #4294967295
 800c59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a0:	f10a 0a01 	add.w	sl, sl, #1
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	9307      	str	r3, [sp, #28]
 800c5a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ae:	4654      	mov	r4, sl
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b6:	4854      	ldr	r0, [pc, #336]	; (800c708 <_vfiprintf_r+0x220>)
 800c5b8:	f7f3 fe22 	bl	8000200 <memchr>
 800c5bc:	9a04      	ldr	r2, [sp, #16]
 800c5be:	b9d8      	cbnz	r0, 800c5f8 <_vfiprintf_r+0x110>
 800c5c0:	06d1      	lsls	r1, r2, #27
 800c5c2:	bf44      	itt	mi
 800c5c4:	2320      	movmi	r3, #32
 800c5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ca:	0713      	lsls	r3, r2, #28
 800c5cc:	bf44      	itt	mi
 800c5ce:	232b      	movmi	r3, #43	; 0x2b
 800c5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5da:	d015      	beq.n	800c608 <_vfiprintf_r+0x120>
 800c5dc:	9a07      	ldr	r2, [sp, #28]
 800c5de:	4654      	mov	r4, sl
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	f04f 0c0a 	mov.w	ip, #10
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ec:	3b30      	subs	r3, #48	; 0x30
 800c5ee:	2b09      	cmp	r3, #9
 800c5f0:	d94d      	bls.n	800c68e <_vfiprintf_r+0x1a6>
 800c5f2:	b1b0      	cbz	r0, 800c622 <_vfiprintf_r+0x13a>
 800c5f4:	9207      	str	r2, [sp, #28]
 800c5f6:	e014      	b.n	800c622 <_vfiprintf_r+0x13a>
 800c5f8:	eba0 0308 	sub.w	r3, r0, r8
 800c5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c600:	4313      	orrs	r3, r2
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	46a2      	mov	sl, r4
 800c606:	e7d2      	b.n	800c5ae <_vfiprintf_r+0xc6>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	1d19      	adds	r1, r3, #4
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	9103      	str	r1, [sp, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	bfbb      	ittet	lt
 800c614:	425b      	neglt	r3, r3
 800c616:	f042 0202 	orrlt.w	r2, r2, #2
 800c61a:	9307      	strge	r3, [sp, #28]
 800c61c:	9307      	strlt	r3, [sp, #28]
 800c61e:	bfb8      	it	lt
 800c620:	9204      	strlt	r2, [sp, #16]
 800c622:	7823      	ldrb	r3, [r4, #0]
 800c624:	2b2e      	cmp	r3, #46	; 0x2e
 800c626:	d10c      	bne.n	800c642 <_vfiprintf_r+0x15a>
 800c628:	7863      	ldrb	r3, [r4, #1]
 800c62a:	2b2a      	cmp	r3, #42	; 0x2a
 800c62c:	d134      	bne.n	800c698 <_vfiprintf_r+0x1b0>
 800c62e:	9b03      	ldr	r3, [sp, #12]
 800c630:	1d1a      	adds	r2, r3, #4
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	9203      	str	r2, [sp, #12]
 800c636:	2b00      	cmp	r3, #0
 800c638:	bfb8      	it	lt
 800c63a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c63e:	3402      	adds	r4, #2
 800c640:	9305      	str	r3, [sp, #20]
 800c642:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c718 <_vfiprintf_r+0x230>
 800c646:	7821      	ldrb	r1, [r4, #0]
 800c648:	2203      	movs	r2, #3
 800c64a:	4650      	mov	r0, sl
 800c64c:	f7f3 fdd8 	bl	8000200 <memchr>
 800c650:	b138      	cbz	r0, 800c662 <_vfiprintf_r+0x17a>
 800c652:	9b04      	ldr	r3, [sp, #16]
 800c654:	eba0 000a 	sub.w	r0, r0, sl
 800c658:	2240      	movs	r2, #64	; 0x40
 800c65a:	4082      	lsls	r2, r0
 800c65c:	4313      	orrs	r3, r2
 800c65e:	3401      	adds	r4, #1
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c666:	4829      	ldr	r0, [pc, #164]	; (800c70c <_vfiprintf_r+0x224>)
 800c668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c66c:	2206      	movs	r2, #6
 800c66e:	f7f3 fdc7 	bl	8000200 <memchr>
 800c672:	2800      	cmp	r0, #0
 800c674:	d03f      	beq.n	800c6f6 <_vfiprintf_r+0x20e>
 800c676:	4b26      	ldr	r3, [pc, #152]	; (800c710 <_vfiprintf_r+0x228>)
 800c678:	bb1b      	cbnz	r3, 800c6c2 <_vfiprintf_r+0x1da>
 800c67a:	9b03      	ldr	r3, [sp, #12]
 800c67c:	3307      	adds	r3, #7
 800c67e:	f023 0307 	bic.w	r3, r3, #7
 800c682:	3308      	adds	r3, #8
 800c684:	9303      	str	r3, [sp, #12]
 800c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c688:	443b      	add	r3, r7
 800c68a:	9309      	str	r3, [sp, #36]	; 0x24
 800c68c:	e768      	b.n	800c560 <_vfiprintf_r+0x78>
 800c68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c692:	460c      	mov	r4, r1
 800c694:	2001      	movs	r0, #1
 800c696:	e7a6      	b.n	800c5e6 <_vfiprintf_r+0xfe>
 800c698:	2300      	movs	r3, #0
 800c69a:	3401      	adds	r4, #1
 800c69c:	9305      	str	r3, [sp, #20]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	f04f 0c0a 	mov.w	ip, #10
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6aa:	3a30      	subs	r2, #48	; 0x30
 800c6ac:	2a09      	cmp	r2, #9
 800c6ae:	d903      	bls.n	800c6b8 <_vfiprintf_r+0x1d0>
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d0c6      	beq.n	800c642 <_vfiprintf_r+0x15a>
 800c6b4:	9105      	str	r1, [sp, #20]
 800c6b6:	e7c4      	b.n	800c642 <_vfiprintf_r+0x15a>
 800c6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6bc:	4604      	mov	r4, r0
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e7f0      	b.n	800c6a4 <_vfiprintf_r+0x1bc>
 800c6c2:	ab03      	add	r3, sp, #12
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	462a      	mov	r2, r5
 800c6c8:	4b12      	ldr	r3, [pc, #72]	; (800c714 <_vfiprintf_r+0x22c>)
 800c6ca:	a904      	add	r1, sp, #16
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7fd fd65 	bl	800a19c <_printf_float>
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	1c78      	adds	r0, r7, #1
 800c6d6:	d1d6      	bne.n	800c686 <_vfiprintf_r+0x19e>
 800c6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6da:	07d9      	lsls	r1, r3, #31
 800c6dc:	d405      	bmi.n	800c6ea <_vfiprintf_r+0x202>
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	059a      	lsls	r2, r3, #22
 800c6e2:	d402      	bmi.n	800c6ea <_vfiprintf_r+0x202>
 800c6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6e6:	f7fe faa3 	bl	800ac30 <__retarget_lock_release_recursive>
 800c6ea:	89ab      	ldrh	r3, [r5, #12]
 800c6ec:	065b      	lsls	r3, r3, #25
 800c6ee:	f53f af1d 	bmi.w	800c52c <_vfiprintf_r+0x44>
 800c6f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6f4:	e71c      	b.n	800c530 <_vfiprintf_r+0x48>
 800c6f6:	ab03      	add	r3, sp, #12
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4b05      	ldr	r3, [pc, #20]	; (800c714 <_vfiprintf_r+0x22c>)
 800c6fe:	a904      	add	r1, sp, #16
 800c700:	4630      	mov	r0, r6
 800c702:	f7fd ffef 	bl	800a6e4 <_printf_i>
 800c706:	e7e4      	b.n	800c6d2 <_vfiprintf_r+0x1ea>
 800c708:	0800ce1b 	.word	0x0800ce1b
 800c70c:	0800ce25 	.word	0x0800ce25
 800c710:	0800a19d 	.word	0x0800a19d
 800c714:	0800c4c5 	.word	0x0800c4c5
 800c718:	0800ce21 	.word	0x0800ce21

0800c71c <__swbuf_r>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	460e      	mov	r6, r1
 800c720:	4614      	mov	r4, r2
 800c722:	4605      	mov	r5, r0
 800c724:	b118      	cbz	r0, 800c72e <__swbuf_r+0x12>
 800c726:	6a03      	ldr	r3, [r0, #32]
 800c728:	b90b      	cbnz	r3, 800c72e <__swbuf_r+0x12>
 800c72a:	f7fe f989 	bl	800aa40 <__sinit>
 800c72e:	69a3      	ldr	r3, [r4, #24]
 800c730:	60a3      	str	r3, [r4, #8]
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	071a      	lsls	r2, r3, #28
 800c736:	d525      	bpl.n	800c784 <__swbuf_r+0x68>
 800c738:	6923      	ldr	r3, [r4, #16]
 800c73a:	b31b      	cbz	r3, 800c784 <__swbuf_r+0x68>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	6922      	ldr	r2, [r4, #16]
 800c740:	1a98      	subs	r0, r3, r2
 800c742:	6963      	ldr	r3, [r4, #20]
 800c744:	b2f6      	uxtb	r6, r6
 800c746:	4283      	cmp	r3, r0
 800c748:	4637      	mov	r7, r6
 800c74a:	dc04      	bgt.n	800c756 <__swbuf_r+0x3a>
 800c74c:	4621      	mov	r1, r4
 800c74e:	4628      	mov	r0, r5
 800c750:	f7ff fdee 	bl	800c330 <_fflush_r>
 800c754:	b9e0      	cbnz	r0, 800c790 <__swbuf_r+0x74>
 800c756:	68a3      	ldr	r3, [r4, #8]
 800c758:	3b01      	subs	r3, #1
 800c75a:	60a3      	str	r3, [r4, #8]
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	6022      	str	r2, [r4, #0]
 800c762:	701e      	strb	r6, [r3, #0]
 800c764:	6962      	ldr	r2, [r4, #20]
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	429a      	cmp	r2, r3
 800c76a:	d004      	beq.n	800c776 <__swbuf_r+0x5a>
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	07db      	lsls	r3, r3, #31
 800c770:	d506      	bpl.n	800c780 <__swbuf_r+0x64>
 800c772:	2e0a      	cmp	r6, #10
 800c774:	d104      	bne.n	800c780 <__swbuf_r+0x64>
 800c776:	4621      	mov	r1, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	f7ff fdd9 	bl	800c330 <_fflush_r>
 800c77e:	b938      	cbnz	r0, 800c790 <__swbuf_r+0x74>
 800c780:	4638      	mov	r0, r7
 800c782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c784:	4621      	mov	r1, r4
 800c786:	4628      	mov	r0, r5
 800c788:	f000 f806 	bl	800c798 <__swsetup_r>
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d0d5      	beq.n	800c73c <__swbuf_r+0x20>
 800c790:	f04f 37ff 	mov.w	r7, #4294967295
 800c794:	e7f4      	b.n	800c780 <__swbuf_r+0x64>
	...

0800c798 <__swsetup_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4b2a      	ldr	r3, [pc, #168]	; (800c844 <__swsetup_r+0xac>)
 800c79c:	4605      	mov	r5, r0
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	b118      	cbz	r0, 800c7ac <__swsetup_r+0x14>
 800c7a4:	6a03      	ldr	r3, [r0, #32]
 800c7a6:	b90b      	cbnz	r3, 800c7ac <__swsetup_r+0x14>
 800c7a8:	f7fe f94a 	bl	800aa40 <__sinit>
 800c7ac:	89a3      	ldrh	r3, [r4, #12]
 800c7ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7b2:	0718      	lsls	r0, r3, #28
 800c7b4:	d422      	bmi.n	800c7fc <__swsetup_r+0x64>
 800c7b6:	06d9      	lsls	r1, r3, #27
 800c7b8:	d407      	bmi.n	800c7ca <__swsetup_r+0x32>
 800c7ba:	2309      	movs	r3, #9
 800c7bc:	602b      	str	r3, [r5, #0]
 800c7be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7c2:	81a3      	strh	r3, [r4, #12]
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c8:	e034      	b.n	800c834 <__swsetup_r+0x9c>
 800c7ca:	0758      	lsls	r0, r3, #29
 800c7cc:	d512      	bpl.n	800c7f4 <__swsetup_r+0x5c>
 800c7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7d0:	b141      	cbz	r1, 800c7e4 <__swsetup_r+0x4c>
 800c7d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7d6:	4299      	cmp	r1, r3
 800c7d8:	d002      	beq.n	800c7e0 <__swsetup_r+0x48>
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f7ff f8a6 	bl	800b92c <_free_r>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	6363      	str	r3, [r4, #52]	; 0x34
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7ea:	81a3      	strh	r3, [r4, #12]
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	6063      	str	r3, [r4, #4]
 800c7f0:	6923      	ldr	r3, [r4, #16]
 800c7f2:	6023      	str	r3, [r4, #0]
 800c7f4:	89a3      	ldrh	r3, [r4, #12]
 800c7f6:	f043 0308 	orr.w	r3, r3, #8
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	6923      	ldr	r3, [r4, #16]
 800c7fe:	b94b      	cbnz	r3, 800c814 <__swsetup_r+0x7c>
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c80a:	d003      	beq.n	800c814 <__swsetup_r+0x7c>
 800c80c:	4621      	mov	r1, r4
 800c80e:	4628      	mov	r0, r5
 800c810:	f000 f884 	bl	800c91c <__smakebuf_r>
 800c814:	89a0      	ldrh	r0, [r4, #12]
 800c816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c81a:	f010 0301 	ands.w	r3, r0, #1
 800c81e:	d00a      	beq.n	800c836 <__swsetup_r+0x9e>
 800c820:	2300      	movs	r3, #0
 800c822:	60a3      	str	r3, [r4, #8]
 800c824:	6963      	ldr	r3, [r4, #20]
 800c826:	425b      	negs	r3, r3
 800c828:	61a3      	str	r3, [r4, #24]
 800c82a:	6923      	ldr	r3, [r4, #16]
 800c82c:	b943      	cbnz	r3, 800c840 <__swsetup_r+0xa8>
 800c82e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c832:	d1c4      	bne.n	800c7be <__swsetup_r+0x26>
 800c834:	bd38      	pop	{r3, r4, r5, pc}
 800c836:	0781      	lsls	r1, r0, #30
 800c838:	bf58      	it	pl
 800c83a:	6963      	ldrpl	r3, [r4, #20]
 800c83c:	60a3      	str	r3, [r4, #8]
 800c83e:	e7f4      	b.n	800c82a <__swsetup_r+0x92>
 800c840:	2000      	movs	r0, #0
 800c842:	e7f7      	b.n	800c834 <__swsetup_r+0x9c>
 800c844:	20000064 	.word	0x20000064

0800c848 <_raise_r>:
 800c848:	291f      	cmp	r1, #31
 800c84a:	b538      	push	{r3, r4, r5, lr}
 800c84c:	4604      	mov	r4, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	d904      	bls.n	800c85c <_raise_r+0x14>
 800c852:	2316      	movs	r3, #22
 800c854:	6003      	str	r3, [r0, #0]
 800c856:	f04f 30ff 	mov.w	r0, #4294967295
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c85e:	b112      	cbz	r2, 800c866 <_raise_r+0x1e>
 800c860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c864:	b94b      	cbnz	r3, 800c87a <_raise_r+0x32>
 800c866:	4620      	mov	r0, r4
 800c868:	f000 f830 	bl	800c8cc <_getpid_r>
 800c86c:	462a      	mov	r2, r5
 800c86e:	4601      	mov	r1, r0
 800c870:	4620      	mov	r0, r4
 800c872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c876:	f000 b817 	b.w	800c8a8 <_kill_r>
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d00a      	beq.n	800c894 <_raise_r+0x4c>
 800c87e:	1c59      	adds	r1, r3, #1
 800c880:	d103      	bne.n	800c88a <_raise_r+0x42>
 800c882:	2316      	movs	r3, #22
 800c884:	6003      	str	r3, [r0, #0]
 800c886:	2001      	movs	r0, #1
 800c888:	e7e7      	b.n	800c85a <_raise_r+0x12>
 800c88a:	2400      	movs	r4, #0
 800c88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c890:	4628      	mov	r0, r5
 800c892:	4798      	blx	r3
 800c894:	2000      	movs	r0, #0
 800c896:	e7e0      	b.n	800c85a <_raise_r+0x12>

0800c898 <raise>:
 800c898:	4b02      	ldr	r3, [pc, #8]	; (800c8a4 <raise+0xc>)
 800c89a:	4601      	mov	r1, r0
 800c89c:	6818      	ldr	r0, [r3, #0]
 800c89e:	f7ff bfd3 	b.w	800c848 <_raise_r>
 800c8a2:	bf00      	nop
 800c8a4:	20000064 	.word	0x20000064

0800c8a8 <_kill_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d07      	ldr	r5, [pc, #28]	; (800c8c8 <_kill_r+0x20>)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	602b      	str	r3, [r5, #0]
 800c8b6:	f7f6 fb79 	bl	8002fac <_kill>
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	d102      	bne.n	800c8c4 <_kill_r+0x1c>
 800c8be:	682b      	ldr	r3, [r5, #0]
 800c8c0:	b103      	cbz	r3, 800c8c4 <_kill_r+0x1c>
 800c8c2:	6023      	str	r3, [r4, #0]
 800c8c4:	bd38      	pop	{r3, r4, r5, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20000a1c 	.word	0x20000a1c

0800c8cc <_getpid_r>:
 800c8cc:	f7f6 bb66 	b.w	8002f9c <_getpid>

0800c8d0 <__swhatbuf_r>:
 800c8d0:	b570      	push	{r4, r5, r6, lr}
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8d8:	2900      	cmp	r1, #0
 800c8da:	b096      	sub	sp, #88	; 0x58
 800c8dc:	4615      	mov	r5, r2
 800c8de:	461e      	mov	r6, r3
 800c8e0:	da0d      	bge.n	800c8fe <__swhatbuf_r+0x2e>
 800c8e2:	89a3      	ldrh	r3, [r4, #12]
 800c8e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8e8:	f04f 0100 	mov.w	r1, #0
 800c8ec:	bf0c      	ite	eq
 800c8ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c8f2:	2340      	movne	r3, #64	; 0x40
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	6031      	str	r1, [r6, #0]
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	b016      	add	sp, #88	; 0x58
 800c8fc:	bd70      	pop	{r4, r5, r6, pc}
 800c8fe:	466a      	mov	r2, sp
 800c900:	f000 f848 	bl	800c994 <_fstat_r>
 800c904:	2800      	cmp	r0, #0
 800c906:	dbec      	blt.n	800c8e2 <__swhatbuf_r+0x12>
 800c908:	9901      	ldr	r1, [sp, #4]
 800c90a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c90e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c912:	4259      	negs	r1, r3
 800c914:	4159      	adcs	r1, r3
 800c916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c91a:	e7eb      	b.n	800c8f4 <__swhatbuf_r+0x24>

0800c91c <__smakebuf_r>:
 800c91c:	898b      	ldrh	r3, [r1, #12]
 800c91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c920:	079d      	lsls	r5, r3, #30
 800c922:	4606      	mov	r6, r0
 800c924:	460c      	mov	r4, r1
 800c926:	d507      	bpl.n	800c938 <__smakebuf_r+0x1c>
 800c928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	2301      	movs	r3, #1
 800c932:	6163      	str	r3, [r4, #20]
 800c934:	b002      	add	sp, #8
 800c936:	bd70      	pop	{r4, r5, r6, pc}
 800c938:	ab01      	add	r3, sp, #4
 800c93a:	466a      	mov	r2, sp
 800c93c:	f7ff ffc8 	bl	800c8d0 <__swhatbuf_r>
 800c940:	9900      	ldr	r1, [sp, #0]
 800c942:	4605      	mov	r5, r0
 800c944:	4630      	mov	r0, r6
 800c946:	f7ff f865 	bl	800ba14 <_malloc_r>
 800c94a:	b948      	cbnz	r0, 800c960 <__smakebuf_r+0x44>
 800c94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c950:	059a      	lsls	r2, r3, #22
 800c952:	d4ef      	bmi.n	800c934 <__smakebuf_r+0x18>
 800c954:	f023 0303 	bic.w	r3, r3, #3
 800c958:	f043 0302 	orr.w	r3, r3, #2
 800c95c:	81a3      	strh	r3, [r4, #12]
 800c95e:	e7e3      	b.n	800c928 <__smakebuf_r+0xc>
 800c960:	89a3      	ldrh	r3, [r4, #12]
 800c962:	6020      	str	r0, [r4, #0]
 800c964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c968:	81a3      	strh	r3, [r4, #12]
 800c96a:	9b00      	ldr	r3, [sp, #0]
 800c96c:	6163      	str	r3, [r4, #20]
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	6120      	str	r0, [r4, #16]
 800c972:	b15b      	cbz	r3, 800c98c <__smakebuf_r+0x70>
 800c974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c978:	4630      	mov	r0, r6
 800c97a:	f000 f81d 	bl	800c9b8 <_isatty_r>
 800c97e:	b128      	cbz	r0, 800c98c <__smakebuf_r+0x70>
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	f023 0303 	bic.w	r3, r3, #3
 800c986:	f043 0301 	orr.w	r3, r3, #1
 800c98a:	81a3      	strh	r3, [r4, #12]
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	431d      	orrs	r5, r3
 800c990:	81a5      	strh	r5, [r4, #12]
 800c992:	e7cf      	b.n	800c934 <__smakebuf_r+0x18>

0800c994 <_fstat_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d07      	ldr	r5, [pc, #28]	; (800c9b4 <_fstat_r+0x20>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	4611      	mov	r1, r2
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	f7f6 fb62 	bl	800306a <_fstat>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	d102      	bne.n	800c9b0 <_fstat_r+0x1c>
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	b103      	cbz	r3, 800c9b0 <_fstat_r+0x1c>
 800c9ae:	6023      	str	r3, [r4, #0]
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20000a1c 	.word	0x20000a1c

0800c9b8 <_isatty_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4d06      	ldr	r5, [pc, #24]	; (800c9d4 <_isatty_r+0x1c>)
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4604      	mov	r4, r0
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	f7f6 fb61 	bl	800308a <_isatty>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_isatty_r+0x1a>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_isatty_r+0x1a>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	20000a1c 	.word	0x20000a1c

0800c9d8 <_init>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	bf00      	nop
 800c9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9de:	bc08      	pop	{r3}
 800c9e0:	469e      	mov	lr, r3
 800c9e2:	4770      	bx	lr

0800c9e4 <_fini>:
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e6:	bf00      	nop
 800c9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ea:	bc08      	pop	{r3}
 800c9ec:	469e      	mov	lr, r3
 800c9ee:	4770      	bx	lr

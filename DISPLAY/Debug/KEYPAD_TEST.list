
KEYPAD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c06c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800c230  0800c230  0001c230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c64c  0800c64c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c64c  0800c64c  0001c64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c654  0800c654  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c654  0800c654  0001c654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c658  0800c658  0001c658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  200001d4  0800c830  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800c830  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c496  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033d1  00000000  00000000  0003c6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a48  00000000  00000000  0003fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000149d  00000000  00000000  000414f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f056  00000000  00000000  00042995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ece3  00000000  00000000  000719eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012709e  00000000  00000000  000906ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000826c  00000000  00000000  001b776c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001bf9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c214 	.word	0x0800c214

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800c214 	.word	0x0800c214

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <RowChecker.0>:
  //	  int row2;
  //	  int row3;
  //	  int row4;
  //  };

  int RowChecker() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	f8c7 c004 	str.w	ip, [r7, #4]
    //	  	row_return.row1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) ==
    // GPIO_PIN_RESET; 	  	row_return.row2 =  HAL_GPIO_ReadPin(GPIOA,
    // GPIO_PIN_6) == GPIO_PIN_RESET; 	  	row_return.row3 =
    // HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET;
    // row_return.row4 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET;
    int val = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f003 fc72 	bl	80047d0 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <RowChecker.0+0x22>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	e000      	b.n	8000ef8 <RowChecker.0+0x24>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f003 fc66 	bl	80047d0 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <RowChecker.0+0x3a>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	e000      	b.n	8000f10 <RowChecker.0+0x3c>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f003 fc5a 	bl	80047d0 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <RowChecker.0+0x52>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	e000      	b.n	8000f28 <RowChecker.0+0x54>
 8000f26:	2303      	movs	r3, #3
 8000f28:	60fb      	str	r3, [r7, #12]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 8000f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2e:	4807      	ldr	r0, [pc, #28]	; (8000f4c <RowChecker.0+0x78>)
 8000f30:	f003 fc4e 	bl	80047d0 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <RowChecker.0+0x6a>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	e000      	b.n	8000f40 <RowChecker.0+0x6c>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	60fb      	str	r3, [r7, #12]
    //	  	return row_return;
    return val;
 8000f42:	68fb      	ldr	r3, [r7, #12]
  }
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48000c00 	.word	0x48000c00

08000f50 <main>:
{
 8000f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f54:	b08b      	sub	sp, #44	; 0x2c
 8000f56:	af00      	add	r7, sp, #0
int main(void)
 8000f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_Init();
 8000f5e:	f001 ffae 	bl	8002ebe <HAL_Init>
  SystemClock_Config();
 8000f62:	f000 f945 	bl	80011f0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000f66:	f000 f9a5 	bl	80012b4 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000f6a:	f000 ffd1 	bl	8001f10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f6e:	f000 f9d5 	bl	800131c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f72:	f000 fa37 	bl	80013e4 <MX_CAN1_Init>
  MX_COMP1_Init();
 8000f76:	f000 fa69 	bl	800144c <MX_COMP1_Init>
  MX_COMP2_Init();
 8000f7a:	f000 fa95 	bl	80014a8 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000f7e:	f000 fabf 	bl	8001500 <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8000f82:	f000 faf7 	bl	8001574 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8000f86:	f000 fb37 	bl	80015f8 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000f8a:	f000 fb81 	bl	8001690 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f8e:	f000 fbcd 	bl	800172c <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000f92:	f000 fc17 	bl	80017c4 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000f96:	f000 fcad 	bl	80018f4 <MX_SAI2_Init>
  MX_SPI3_Init();
 8000f9a:	f000 fd13 	bl	80019c4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000f9e:	f000 fd4f 	bl	8001a40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fa2:	f000 fe05 	bl	8001bb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa6:	f000 fe67 	bl	8001c78 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000faa:	f000 fecb 	bl	8001d44 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000fae:	f000 ff23 	bl	8001df8 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fb2:	f000 ffa5 	bl	8001f00 <MX_USB_OTG_FS_USB_Init>

  //  struct ROW_RETURN Col1_Return;
  //  struct ROW_RETURN Col2_Return;
  //  struct ROW_RETURN Col3_Return;
  //  struct ROW_RETURN Col4_Return;
  int val = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc0:	4853      	ldr	r0, [pc, #332]	; (8001110 <main+0x1c0>)
 8000fc2:	f003 fc1d 	bl	8004800 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	4851      	ldr	r0, [pc, #324]	; (8001114 <main+0x1c4>)
 8000fce:	f003 fc17 	bl	8004800 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd8:	484d      	ldr	r0, [pc, #308]	; (8001110 <main+0x1c0>)
 8000fda:	f003 fc11 	bl	8004800 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe4:	484b      	ldr	r0, [pc, #300]	; (8001114 <main+0x1c4>)
 8000fe6:	f003 fc0b 	bl	8004800 <HAL_GPIO_WritePin>
  uint8_t ASCII_Keypad_Lookup[4][4] = {{0x31, 0x32, 0x33, 0x41},
 8000fea:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <main+0x1c8>)
 8000fec:	f107 060a 	add.w	r6, r7, #10
 8000ff0:	469c      	mov	ip, r3
 8000ff2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ff6:	6030      	str	r0, [r6, #0]
 8000ff8:	6071      	str	r1, [r6, #4]
 8000ffa:	60b2      	str	r2, [r6, #8]
 8000ffc:	60f3      	str	r3, [r6, #12]
                                       {0x34, 0x35, 0x36, 0x42},
                                       {0x37, 0x38, 0x39, 0x43},
                                       {0x2A, 0x30, 0x23, 0x44}};
  const uint8_t max_digits = 5;
 8000ffe:	2305      	movs	r3, #5
 8001000:	723b      	strb	r3, [r7, #8]
  uint8_t ASCII_Weight[max_digits];
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	3b01      	subs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	7a3b      	ldrb	r3, [r7, #8]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	4698      	mov	r8, r3
 8001010:	4691      	mov	r9, r2
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800101e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001026:	7a3b      	ldrb	r3, [r7, #8]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2200      	movs	r2, #0
 800102c:	461c      	mov	r4, r3
 800102e:	4615      	mov	r5, r2
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	00eb      	lsls	r3, r5, #3
 800103a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800103e:	00e2      	lsls	r2, r4, #3
 8001040:	7a3b      	ldrb	r3, [r7, #8]
 8001042:	3307      	adds	r3, #7
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	ebad 0d03 	sub.w	sp, sp, r3
 800104c:	466b      	mov	r3, sp
 800104e:	3300      	adds	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  uint8_t weightCounter = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	727b      	strb	r3, [r7, #9]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105c:	482d      	ldr	r0, [pc, #180]	; (8001114 <main+0x1c4>)
 800105e:	f003 fbcf 	bl	8004800 <HAL_GPIO_WritePin>
    val = RowChecker();
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	469c      	mov	ip, r3
 8001066:	f7ff ff35 	bl	8000ed4 <RowChecker.0>
 800106a:	6278      	str	r0, [r7, #36]	; 0x24
    KeyPadReturn(val, 4);
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	469c      	mov	ip, r3
 8001070:	2104      	movs	r1, #4
 8001072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001074:	f000 f852 	bl	800111c <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4825      	ldr	r0, [pc, #148]	; (8001114 <main+0x1c4>)
 8001080:	f003 fbbe 	bl	8004800 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108a:	4821      	ldr	r0, [pc, #132]	; (8001110 <main+0x1c0>)
 800108c:	f003 fbb8 	bl	8004800 <HAL_GPIO_WritePin>
    val = RowChecker();
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	469c      	mov	ip, r3
 8001094:	f7ff ff1e 	bl	8000ed4 <RowChecker.0>
 8001098:	6278      	str	r0, [r7, #36]	; 0x24
    KeyPadReturn(val, 3);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	469c      	mov	ip, r3
 800109e:	2103      	movs	r1, #3
 80010a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010a2:	f000 f83b 	bl	800111c <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ac:	4818      	ldr	r0, [pc, #96]	; (8001110 <main+0x1c0>)
 80010ae:	f003 fba7 	bl	8004800 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4815      	ldr	r0, [pc, #84]	; (8001110 <main+0x1c0>)
 80010ba:	f003 fba1 	bl	8004800 <HAL_GPIO_WritePin>
    val = RowChecker();
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	469c      	mov	ip, r3
 80010c2:	f7ff ff07 	bl	8000ed4 <RowChecker.0>
 80010c6:	6278      	str	r0, [r7, #36]	; 0x24
    KeyPadReturn(val, 2);
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	469c      	mov	ip, r3
 80010cc:	2102      	movs	r1, #2
 80010ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d0:	f000 f824 	bl	800111c <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <main+0x1c0>)
 80010dc:	f003 fb90 	bl	8004800 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <main+0x1c4>)
 80010e8:	f003 fb8a 	bl	8004800 <HAL_GPIO_WritePin>
    val = RowChecker();
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	469c      	mov	ip, r3
 80010f0:	f7ff fef0 	bl	8000ed4 <RowChecker.0>
 80010f4:	6278      	str	r0, [r7, #36]	; 0x24
    KeyPadReturn(val, 1);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	469c      	mov	ip, r3
 80010fa:	2101      	movs	r1, #1
 80010fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010fe:	f000 f80d 	bl	800111c <KeyPadReturn.1>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <main+0x1c4>)
 800110a:	f003 fb79 	bl	8004800 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 800110e:	e7a2      	b.n	8001056 <main+0x106>
 8001110:	48001000 	.word	0x48001000
 8001114:	48001400 	.word	0x48001400
 8001118:	0800c230 	.word	0x0800c230

0800111c <KeyPadReturn.1>:
  void KeyPadReturn(int row, int col) {
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4664      	mov	r4, ip
 8001128:	f8c7 c004 	str.w	ip, [r7, #4]
    if (row == 0) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d052      	beq.n	80011d8 <KeyPadReturn.1+0xbc>
    HAL_Delay(10);
 8001132:	200a      	movs	r0, #10
 8001134:	f001 ff38 	bl	8002fa8 <HAL_Delay>
    while (row == RowChecker()) {
 8001138:	bf00      	nop
 800113a:	46a4      	mov	ip, r4
 800113c:	f7ff feca 	bl	8000ed4 <RowChecker.0>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4293      	cmp	r3, r2
 8001146:	d0f8      	beq.n	800113a <KeyPadReturn.1+0x1e>
    HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f001 ff2d 	bl	8002fa8 <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3b01      	subs	r3, #1
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4422      	add	r2, r4
 800115a:	4413      	add	r3, r2
 800115c:	3306      	adds	r3, #6
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	75bb      	strb	r3, [r7, #22]
    if (ASCII_Value == 0x23) {
 8001162:	7dbb      	ldrb	r3, [r7, #22]
 8001164:	2b23      	cmp	r3, #35	; 0x23
 8001166:	d11c      	bne.n	80011a2 <KeyPadReturn.1+0x86>
      if (weightCounter == 0) {
 8001168:	7963      	ldrb	r3, [r4, #5]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d036      	beq.n	80011dc <KeyPadReturn.1+0xc0>
      printf("End ASCII value: ");
 800116e:	481d      	ldr	r0, [pc, #116]	; (80011e4 <KeyPadReturn.1+0xc8>)
 8001170:	f009 f86a 	bl	800a248 <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
 8001178:	e009      	b.n	800118e <KeyPadReturn.1+0x72>
        printf("%x ", ASCII_Weight[i]);
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	4619      	mov	r1, r3
 8001182:	4819      	ldr	r0, [pc, #100]	; (80011e8 <KeyPadReturn.1+0xcc>)
 8001184:	f009 f860 	bl	800a248 <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	3301      	adds	r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
 800118e:	7963      	ldrb	r3, [r4, #5]
 8001190:	7dfa      	ldrb	r2, [r7, #23]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3f1      	bcc.n	800117a <KeyPadReturn.1+0x5e>
      printf("\n");
 8001196:	200a      	movs	r0, #10
 8001198:	f009 f868 	bl	800a26c <putchar>
      weightCounter = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	7163      	strb	r3, [r4, #5]
      return;
 80011a0:	e01d      	b.n	80011de <KeyPadReturn.1+0xc2>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 80011a2:	7dbb      	ldrb	r3, [r7, #22]
 80011a4:	2b2a      	cmp	r3, #42	; 0x2a
 80011a6:	d005      	beq.n	80011b4 <KeyPadReturn.1+0x98>
 80011a8:	7963      	ldrb	r3, [r4, #5]
 80011aa:	461a      	mov	r2, r3
 80011ac:	7923      	ldrb	r3, [r4, #4]
 80011ae:	3b02      	subs	r3, #2
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d102      	bne.n	80011ba <KeyPadReturn.1+0x9e>
      weightCounter = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	7163      	strb	r3, [r4, #5]
      return;
 80011b8:	e011      	b.n	80011de <KeyPadReturn.1+0xc2>
    printf("ASCII value: %x\n", ASCII_Value);
 80011ba:	7dbb      	ldrb	r3, [r7, #22]
 80011bc:	4619      	mov	r1, r3
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <KeyPadReturn.1+0xd0>)
 80011c0:	f009 f842 	bl	800a248 <iprintf>
    ASCII_Weight[weightCounter] = ASCII_Value;
 80011c4:	7963      	ldrb	r3, [r4, #5]
 80011c6:	4619      	mov	r1, r3
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	7dba      	ldrb	r2, [r7, #22]
 80011cc:	545a      	strb	r2, [r3, r1]
    weightCounter++;
 80011ce:	7963      	ldrb	r3, [r4, #5]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	7163      	strb	r3, [r4, #5]
 80011d6:	e002      	b.n	80011de <KeyPadReturn.1+0xc2>
      return;
 80011d8:	bf00      	nop
 80011da:	e000      	b.n	80011de <KeyPadReturn.1+0xc2>
        return;
 80011dc:	bf00      	nop
  }
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	0800c240 	.word	0x0800c240
 80011e8:	0800c254 	.word	0x0800c254
 80011ec:	0800c258 	.word	0x0800c258

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	; 0x58
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2244      	movs	r2, #68	; 0x44
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f009 f87f 	bl	800a302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f003 fb3b 	bl	8004890 <HAL_PWREx_ControlVoltageScaling>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001220:	f000 ff9a 	bl	8002158 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001224:	f003 fb04 	bl	8004830 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <SystemClock_Config+0xc0>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <SystemClock_Config+0xc0>)
 8001230:	f023 0318 	bic.w	r3, r3, #24
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001238:	2314      	movs	r3, #20
 800123a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001248:	2360      	movs	r3, #96	; 0x60
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001250:	2301      	movs	r3, #1
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001258:	2310      	movs	r3, #16
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001260:	2302      	movs	r3, #2
 8001262:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fbc3 	bl	80049f8 <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001278:	f000 ff6e 	bl	8002158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2303      	movs	r3, #3
 8001282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f003 ffc9 	bl	800522c <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012a0:	f000 ff5a 	bl	8002158 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012a4:	f005 fcd2 	bl	8006c4c <HAL_RCCEx_EnableMSIPLLMode>
}
 80012a8:	bf00      	nop
 80012aa:	3758      	adds	r7, #88	; 0x58
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0a6      	sub	sp, #152	; 0x98
 80012b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2294      	movs	r2, #148	; 0x94
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f009 f81e 	bl	800a302 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80012c6:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80012ca:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012e0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012ea:	2318      	movs	r3, #24
 80012ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <PeriphCommonClock_Config+0x64>)
 80012fc:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f004 fa51 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800130c:	f000 ff24 	bl	8002158 <Error_Handler>
  }
}
 8001310:	bf00      	nop
 8001312:	3798      	adds	r7, #152	; 0x98
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	01110000 	.word	0x01110000

0800131c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001334:	4a29      	ldr	r2, [pc, #164]	; (80013dc <MX_ADC1_Init+0xc0>)
 8001336:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <MX_ADC1_Init+0xbc>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <MX_ADC1_Init+0xbc>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001352:	2204      	movs	r2, #4
 8001354:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001358:	2200      	movs	r2, #0
 800135a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_ADC1_Init+0xbc>)
 800135e:	2200      	movs	r2, #0
 8001360:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001364:	2201      	movs	r2, #1
 8001366:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_ADC1_Init+0xbc>)
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_ADC1_Init+0xbc>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001386:	2200      	movs	r2, #0
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_ADC1_Init+0xbc>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <MX_ADC1_Init+0xbc>)
 8001394:	f001 ffcc 	bl	8003330 <HAL_ADC_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800139e:	f000 fedb 	bl	8002158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_ADC1_Init+0xc4>)
 80013a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a6:	2306      	movs	r3, #6
 80013a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ae:	237f      	movs	r3, #127	; 0x7f
 80013b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013b2:	2304      	movs	r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_ADC1_Init+0xbc>)
 80013c0:	f002 f8fc 	bl	80035bc <HAL_ADC_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013ca:	f000 fec5 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001f0 	.word	0x200001f0
 80013dc:	50040000 	.word	0x50040000
 80013e0:	04300002 	.word	0x04300002

080013e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_CAN1_Init+0x60>)
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_CAN1_Init+0x64>)
 80013ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_CAN1_Init+0x60>)
 80013f0:	2210      	movs	r2, #16
 80013f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_CAN1_Init+0x60>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_CAN1_Init+0x60>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_CAN1_Init+0x60>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_CAN1_Init+0x60>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_CAN1_Init+0x60>)
 800140e:	2200      	movs	r2, #0
 8001410:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_CAN1_Init+0x60>)
 8001414:	2200      	movs	r2, #0
 8001416:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_CAN1_Init+0x60>)
 800141a:	2200      	movs	r2, #0
 800141c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_CAN1_Init+0x60>)
 8001420:	2200      	movs	r2, #0
 8001422:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_CAN1_Init+0x60>)
 8001426:	2200      	movs	r2, #0
 8001428:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_CAN1_Init+0x60>)
 800142c:	2200      	movs	r2, #0
 800142e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_CAN1_Init+0x60>)
 8001432:	f002 fcbf 	bl	8003db4 <HAL_CAN_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800143c:	f000 fe8c 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000258 	.word	0x20000258
 8001448:	40006400 	.word	0x40006400

0800144c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_COMP1_Init+0x50>)
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <MX_COMP1_Init+0x54>)
 8001454:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_COMP1_Init+0x50>)
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <MX_COMP1_Init+0x58>)
 800145a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_COMP1_Init+0x50>)
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_COMP1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_COMP1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_COMP1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_COMP1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_COMP1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_COMP1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_COMP1_Init+0x50>)
 8001488:	f002 fe38 	bl	80040fc <HAL_COMP_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8001492:	f000 fe61 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000280 	.word	0x20000280
 80014a0:	40010200 	.word	0x40010200
 80014a4:	00800030 	.word	0x00800030

080014a8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <MX_COMP2_Init+0x54>)
 80014b0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014b4:	2270      	movs	r2, #112	; 0x70
 80014b6:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_COMP2_Init+0x50>)
 80014e4:	f002 fe0a 	bl	80040fc <HAL_COMP_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 80014ee:	f000 fe33 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002ac 	.word	0x200002ac
 80014fc:	40010204 	.word	0x40010204

08001500 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001506:	4a19      	ldr	r2, [pc, #100]	; (800156c <MX_I2C1_SMBUS_Init+0x6c>)
 8001508:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 800150c:	4a18      	ldr	r2, [pc, #96]	; (8001570 <MX_I2C1_SMBUS_Init+0x70>)
 800150e:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001518:	2202      	movs	r2, #2
 800151a:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 800151e:	2201      	movs	r2, #1
 8001520:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 800154e:	f248 1286 	movw	r2, #33158	; 0x8186
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_I2C1_SMBUS_Init+0x68>)
 8001556:	f006 fa01 	bl	800795c <HAL_SMBUS_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001560:	f000 fdfa 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200002d8 	.word	0x200002d8
 800156c:	40005400 	.word	0x40005400
 8001570:	00707cbb 	.word	0x00707cbb

08001574 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <MX_I2C2_SMBUS_Init+0x7c>)
 800157c:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 8001580:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <MX_I2C2_SMBUS_Init+0x80>)
 8001582:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 800158c:	2202      	movs	r2, #2
 800158e:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 8001592:	2201      	movs	r2, #1
 8001594:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015bc:	2200      	movs	r2, #0
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015c2:	f248 1286 	movw	r2, #33158	; 0x8186
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015ca:	f006 f9c7 	bl	800795c <HAL_SMBUS_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 80015d4:	f000 fdc0 	bl	8002158 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_I2C2_SMBUS_Init+0x78>)
 80015da:	f006 fa77 	bl	8007acc <HAL_SMBUS_EnableAlert_IT>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 80015e4:	f000 fdb8 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000328 	.word	0x20000328
 80015f0:	40005800 	.word	0x40005800
 80015f4:	00707cbb 	.word	0x00707cbb

080015f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <MX_LPUART1_UART_Init+0x94>)
 8001600:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001642:	f007 f9e1 	bl	8008a08 <HAL_UART_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800164c:	f000 fd84 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001654:	f008 f806 	bl	8009664 <HAL_UARTEx_SetTxFifoThreshold>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800165e:	f000 fd7b 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001662:	2100      	movs	r1, #0
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001666:	f008 f83b 	bl	80096e0 <HAL_UARTEx_SetRxFifoThreshold>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001670:	f000 fd72 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001676:	f007 ffbc 	bl	80095f2 <HAL_UARTEx_DisableFifoMode>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001680:	f000 fd6a 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000378 	.word	0x20000378
 800168c:	40008000 	.word	0x40008000

08001690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <MX_USART2_UART_Init+0x94>)
 8001696:	4a24      	ldr	r2, [pc, #144]	; (8001728 <MX_USART2_UART_Init+0x98>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_USART2_UART_Init+0x94>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016c0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016dc:	f007 f994 	bl	8008a08 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80016e6:	f000 fd37 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_USART2_UART_Init+0x94>)
 80016ee:	f007 ffb9 	bl	8009664 <HAL_UARTEx_SetTxFifoThreshold>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80016f8:	f000 fd2e 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4809      	ldr	r0, [pc, #36]	; (8001724 <MX_USART2_UART_Init+0x94>)
 8001700:	f007 ffee 	bl	80096e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800170a:	f000 fd25 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USART2_UART_Init+0x94>)
 8001710:	f007 ff6f 	bl	80095f2 <HAL_UARTEx_DisableFifoMode>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800171a:	f000 fd1d 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000040c 	.word	0x2000040c
 8001728:	40004400 	.word	0x40004400

0800172c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <MX_USART3_UART_Init+0x94>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001776:	f007 f947 	bl	8008a08 <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001780:	f000 fcea 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001788:	f007 ff6c 	bl	8009664 <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001792:	f000 fce1 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800179a:	f007 ffa1 	bl	80096e0 <HAL_UARTEx_SetRxFifoThreshold>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f000 fcd8 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_USART3_UART_Init+0x90>)
 80017aa:	f007 ff22 	bl	80095f2 <HAL_UARTEx_DisableFifoMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f000 fcd0 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200004a0 	.word	0x200004a0
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017ca:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <MX_SAI1_Init+0x120>)
 80017cc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80017d4:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80017ec:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <MX_SAI1_Init+0x11c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <MX_SAI1_Init+0x11c>)
 800180c:	4a36      	ldr	r2, [pc, #216]	; (80018e8 <MX_SAI1_Init+0x124>)
 800180e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <MX_SAI1_Init+0x11c>)
 800181e:	2200      	movs	r2, #0
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001824:	2200      	movs	r2, #0
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <MX_SAI1_Init+0x11c>)
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001832:	2200      	movs	r2, #0
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001840:	2208      	movs	r2, #8
 8001842:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001846:	2201      	movs	r2, #1
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_SAI1_Init+0x11c>)
 800184c:	2200      	movs	r2, #0
 800184e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001852:	2200      	movs	r2, #0
 8001854:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001858:	2200      	movs	r2, #0
 800185a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_SAI1_Init+0x11c>)
 800185e:	2200      	movs	r2, #0
 8001860:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001864:	2200      	movs	r2, #0
 8001866:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_SAI1_Init+0x11c>)
 800186a:	2201      	movs	r2, #1
 800186c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001870:	2200      	movs	r2, #0
 8001872:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001874:	481a      	ldr	r0, [pc, #104]	; (80018e0 <MX_SAI1_Init+0x11c>)
 8001876:	f005 fd25 	bl	80072c4 <HAL_SAI_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001880:	f000 fc6a 	bl	8002158 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <MX_SAI1_Init+0x128>)
 8001886:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <MX_SAI1_Init+0x12c>)
 8001888:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_SAI1_Init+0x128>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_SAI1_Init+0x128>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_SAI1_Init+0x128>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_SAI1_Init+0x128>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_SAI1_Init+0x128>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_SAI1_Init+0x128>)
 80018aa:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <MX_SAI1_Init+0x124>)
 80018ac:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_SAI1_Init+0x128>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <MX_SAI1_Init+0x128>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_SAI1_Init+0x128>)
 80018bc:	2200      	movs	r2, #0
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_SAI1_Init+0x128>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80018c6:	2302      	movs	r3, #2
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <MX_SAI1_Init+0x128>)
 80018ce:	f005 fcc7 	bl	8007260 <HAL_SAI_InitProtocol>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 80018d8:	f000 fc3e 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000534 	.word	0x20000534
 80018e4:	40015424 	.word	0x40015424
 80018e8:	0002ee00 	.word	0x0002ee00
 80018ec:	200005c8 	.word	0x200005c8
 80018f0:	40015404 	.word	0x40015404

080018f4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <MX_SAI2_Init+0xc4>)
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <MX_SAI2_Init+0xc8>)
 80018fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001900:	2200      	movs	r2, #0
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001912:	2200      	movs	r2, #0
 8001914:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001918:	2200      	movs	r2, #0
 800191a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <MX_SAI2_Init+0xcc>)
 800193e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800194e:	2200      	movs	r2, #0
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001962:	2200      	movs	r2, #0
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001970:	2208      	movs	r2, #8
 8001972:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001976:	2201      	movs	r2, #1
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800197c:	2200      	movs	r2, #0
 800197e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001982:	2200      	movs	r2, #0
 8001984:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001988:	2200      	movs	r2, #0
 800198a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800198e:	2200      	movs	r2, #0
 8001990:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SAI2_Init+0xc4>)
 8001994:	2200      	movs	r2, #0
 8001996:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_SAI2_Init+0xc4>)
 800199a:	2201      	movs	r2, #1
 800199c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SAI2_Init+0xc4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_SAI2_Init+0xc4>)
 80019a6:	f005 fc8d 	bl	80072c4 <HAL_SAI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 80019b0:	f000 fbd2 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000065c 	.word	0x2000065c
 80019bc:	40015804 	.word	0x40015804
 80019c0:	0002ee00 	.word	0x0002ee00

080019c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019ca:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <MX_SPI3_Init+0x78>)
 80019cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_SPI3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_SPI3_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_SPI3_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_SPI3_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_SPI3_Init+0x74>)
 8001a12:	2207      	movs	r2, #7
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_SPI3_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_SPI3_Init+0x74>)
 8001a1e:	2208      	movs	r2, #8
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_SPI3_Init+0x74>)
 8001a24:	f006 f8a5 	bl	8007b72 <HAL_SPI_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a2e:	f000 fb93 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200006f0 	.word	0x200006f0
 8001a3c:	40003c00 	.word	0x40003c00

08001a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b098      	sub	sp, #96	; 0x60
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001a52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a72:	463b      	mov	r3, r7
 8001a74:	222c      	movs	r2, #44	; 0x2c
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f008 fc42 	bl	800a302 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <MX_TIM1_Init+0x16c>)
 8001a82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a84:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a9e:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aaa:	483f      	ldr	r0, [pc, #252]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001aac:	f006 f904 	bl	8007cb8 <HAL_TIM_PWM_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ab6:	f000 fb4f 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aca:	4619      	mov	r1, r3
 8001acc:	4836      	ldr	r0, [pc, #216]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001ace:	f006 fdcf 	bl	8008670 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001ad8:	f000 fb3e 	bl	8002158 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001adc:	2301      	movs	r3, #1
 8001ade:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001ae8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aec:	461a      	mov	r2, r3
 8001aee:	2101      	movs	r1, #1
 8001af0:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001af2:	f006 fec3 	bl	800887c <HAL_TIMEx_ConfigBreakInput>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001afc:	f000 fb2c 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001b00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b04:	461a      	mov	r2, r3
 8001b06:	2102      	movs	r1, #2
 8001b08:	4827      	ldr	r0, [pc, #156]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001b0a:	f006 feb7 	bl	800887c <HAL_TIMEx_ConfigBreakInput>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001b14:	f000 fb20 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b18:	2360      	movs	r3, #96	; 0x60
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b38:	2208      	movs	r2, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001b3e:	f006 f913 	bl	8007d68 <HAL_TIM_PWM_ConfigChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001b48:	f000 fb06 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b50:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8001b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	4619      	mov	r1, r3
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001b8a:	f006 fdf9 	bl	8008780 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001b94:	f000 fae0 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <MX_TIM1_Init+0x168>)
 8001b9a:	f000 fea1 	bl	80028e0 <HAL_TIM_MspPostInit>

}
 8001b9e:	bf00      	nop
 8001ba0:	3760      	adds	r7, #96	; 0x60
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000754 	.word	0x20000754
 8001bac:	40012c00 	.word	0x40012c00

08001bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bfc:	481d      	ldr	r0, [pc, #116]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001bfe:	f006 f85b 	bl	8007cb8 <HAL_TIM_PWM_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001c08:	f000 faa6 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4816      	ldr	r0, [pc, #88]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001c1c:	f006 fd28 	bl	8008670 <HAL_TIMEx_MasterConfigSynchronization>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c26:	f000 fa97 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2a:	2360      	movs	r3, #96	; 0x60
 8001c2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001c42:	f006 f891 	bl	8007d68 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c4c:	f000 fa84 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c50:	463b      	mov	r3, r7
 8001c52:	2208      	movs	r2, #8
 8001c54:	4619      	mov	r1, r3
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001c58:	f006 f886 	bl	8007d68 <HAL_TIM_PWM_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001c62:	f000 fa79 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <MX_TIM2_Init+0xc4>)
 8001c68:	f000 fe3a 	bl	80028e0 <HAL_TIM_MspPostInit>

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200007a0 	.word	0x200007a0

08001c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001c9e:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <MX_TIM3_Init+0xc8>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cc2:	481e      	ldr	r0, [pc, #120]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001cc4:	f005 fff8 	bl	8007cb8 <HAL_TIM_PWM_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001cce:	f000 fa43 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4816      	ldr	r0, [pc, #88]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001ce2:	f006 fcc5 	bl	8008670 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001cec:	f000 fa34 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	2360      	movs	r3, #96	; 0x60
 8001cf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	2204      	movs	r2, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001d08:	f006 f82e 	bl	8007d68 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d12:	f000 fa21 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	2208      	movs	r2, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001d1e:	f006 f823 	bl	8007d68 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001d28:	f000 fa16 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM3_Init+0xc4>)
 8001d2e:	f000 fdd7 	bl	80028e0 <HAL_TIM_MspPostInit>

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	; 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200007ec 	.word	0x200007ec
 8001d40:	40000400 	.word	0x40000400

08001d44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d56:	463b      	mov	r3, r7
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	615a      	str	r2, [r3, #20]
 8001d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001d6a:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <MX_TIM4_Init+0xb0>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d8e:	4818      	ldr	r0, [pc, #96]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001d90:	f005 ff92 	bl	8007cb8 <HAL_TIM_PWM_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d9a:	f000 f9dd 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	4810      	ldr	r0, [pc, #64]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001dae:	f006 fc5f 	bl	8008670 <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001db8:	f000 f9ce 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dbc:	2360      	movs	r3, #96	; 0x60
 8001dbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	220c      	movs	r2, #12
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001dd4:	f005 ffc8 	bl	8007d68 <HAL_TIM_PWM_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001dde:	f000 f9bb 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001de2:	4803      	ldr	r0, [pc, #12]	; (8001df0 <MX_TIM4_Init+0xac>)
 8001de4:	f000 fd7c 	bl	80028e0 <HAL_TIM_MspPostInit>

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000838 	.word	0x20000838
 8001df4:	40000800 	.word	0x40000800

08001df8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b096      	sub	sp, #88	; 0x58
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	222c      	movs	r2, #44	; 0x2c
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f008 fa6c 	bl	800a302 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e2c:	4a33      	ldr	r2, [pc, #204]	; (8001efc <MX_TIM15_Init+0x104>)
 8001e2e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e42:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001e56:	4828      	ldr	r0, [pc, #160]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e58:	f005 ff2e 	bl	8007cb8 <HAL_TIM_PWM_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001e62:	f000 f979 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e72:	4619      	mov	r1, r3
 8001e74:	4820      	ldr	r0, [pc, #128]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001e76:	f006 fbfb 	bl	8008670 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001e80:	f000 f96a 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e84:	2360      	movs	r3, #96	; 0x60
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e90:	2300      	movs	r3, #0
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001eaa:	f005 ff5d 	bl	8007d68 <HAL_TIM_PWM_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001eb4:	f000 f950 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001edc:	f006 fc50 	bl	8008780 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001ee6:	f000 f937 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001eea:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <MX_TIM15_Init+0x100>)
 8001eec:	f000 fcf8 	bl	80028e0 <HAL_TIM_MspPostInit>

}
 8001ef0:	bf00      	nop
 8001ef2:	3758      	adds	r7, #88	; 0x58
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000884 	.word	0x20000884
 8001efc:	40014000 	.word	0x40014000

08001f00 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f26:	4b7e      	ldr	r3, [pc, #504]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	4a7d      	ldr	r2, [pc, #500]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f32:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	623b      	str	r3, [r7, #32]
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	4b78      	ldr	r3, [pc, #480]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	4a77      	ldr	r2, [pc, #476]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4a:	4b75      	ldr	r3, [pc, #468]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f56:	4b72      	ldr	r3, [pc, #456]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a71      	ldr	r2, [pc, #452]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a6b      	ldr	r2, [pc, #428]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b69      	ldr	r3, [pc, #420]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b66      	ldr	r3, [pc, #408]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <MX_GPIO_Init+0x210>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b60      	ldr	r3, [pc, #384]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a59      	ldr	r2, [pc, #356]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b57      	ldr	r3, [pc, #348]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fce:	4b54      	ldr	r3, [pc, #336]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	4a53      	ldr	r2, [pc, #332]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fda:	4b51      	ldr	r3, [pc, #324]	; (8002120 <MX_GPIO_Init+0x210>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001fe6:	f002 fcf7 	bl	80049d8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ff0:	484c      	ldr	r0, [pc, #304]	; (8002124 <MX_GPIO_Init+0x214>)
 8001ff2:	f002 fc05 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001ffc:	484a      	ldr	r0, [pc, #296]	; (8002128 <MX_GPIO_Init+0x218>)
 8001ffe:	f002 fbff 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002002:	2310      	movs	r3, #16
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002012:	2305      	movs	r3, #5
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002020:	f002 fa44 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002024:	23e0      	movs	r3, #224	; 0xe0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002028:	2300      	movs	r3, #0
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202c:	2301      	movs	r3, #1
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203a:	f002 fa37 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800203e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002044:	2311      	movs	r3, #17
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4833      	ldr	r0, [pc, #204]	; (8002124 <MX_GPIO_Init+0x214>)
 8002058:	f002 fa28 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800205c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002062:	2311      	movs	r3, #17
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	4619      	mov	r1, r3
 8002074:	482c      	ldr	r0, [pc, #176]	; (8002128 <MX_GPIO_Init+0x218>)
 8002076:	f002 fa19 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800207a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	4827      	ldr	r0, [pc, #156]	; (800212c <MX_GPIO_Init+0x21c>)
 8002090:	f002 fa0c 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002094:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020a6:	230c      	movs	r3, #12
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	481f      	ldr	r0, [pc, #124]	; (8002130 <MX_GPIO_Init+0x220>)
 80020b2:	f002 f9fb 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80020b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020c8:	230a      	movs	r3, #10
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f002 f9e9 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f002 f9db 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f6:	2304      	movs	r3, #4
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002106:	230c      	movs	r3, #12
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210e:	4619      	mov	r1, r3
 8002110:	4806      	ldr	r0, [pc, #24]	; (800212c <MX_GPIO_Init+0x21c>)
 8002112:	f002 f9cb 	bl	80044ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002116:	bf00      	nop
 8002118:	3738      	adds	r7, #56	; 0x38
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	48001400 	.word	0x48001400
 8002128:	48001000 	.word	0x48001000
 800212c:	48000c00 	.word	0x48000c00
 8002130:	48000800 	.word	0x48000800

08002134 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800213c:	1d39      	adds	r1, r7, #4
 800213e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002142:	2201      	movs	r2, #1
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <__io_putchar+0x20>)
 8002146:	f006 fcaf 	bl	8008aa8 <HAL_UART_Transmit>
  return ch;
 800214a:	687b      	ldr	r3, [r7, #4]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000378 	.word	0x20000378

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002160:	e7fe      	b.n	8002160 <Error_Handler+0x8>
	...

08002164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_MspInit+0x44>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_MspInit+0x44>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6613      	str	r3, [r2, #96]	; 0x60
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_MspInit+0x44>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_MspInit+0x44>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_MspInit+0x44>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6593      	str	r3, [r2, #88]	; 0x58
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_MspInit+0x44>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000

080021ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2d      	ldr	r2, [pc, #180]	; (8002280 <HAL_ADC_MspInit+0xd4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d154      	bne.n	8002278 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	4a2c      	ldr	r2, [pc, #176]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 80021d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_ADC_MspInit+0xd8>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800222e:	233f      	movs	r3, #63	; 0x3f
 8002230:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002232:	230b      	movs	r3, #11
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <HAL_ADC_MspInit+0xdc>)
 8002242:	f002 f933 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002246:	230a      	movs	r3, #10
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800224a:	230b      	movs	r3, #11
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225c:	f002 f926 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002260:	2302      	movs	r3, #2
 8002262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002264:	230b      	movs	r3, #11
 8002266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <HAL_ADC_MspInit+0xe0>)
 8002274:	f002 f91a 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3730      	adds	r7, #48	; 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	50040000 	.word	0x50040000
 8002284:	40021000 	.word	0x40021000
 8002288:	48000800 	.word	0x48000800
 800228c:	48000400 	.word	0x48000400

08002290 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_CAN_MspInit+0x7c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d127      	bne.n	8002302 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_CAN_MspInit+0x80>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_CAN_MspInit+0x80>)
 80022b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_CAN_MspInit+0x80>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_CAN_MspInit+0x80>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_CAN_MspInit+0x80>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_CAN_MspInit+0x80>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022e2:	2303      	movs	r3, #3
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80022f2:	2309      	movs	r3, #9
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <HAL_CAN_MspInit+0x84>)
 80022fe:	f002 f8d5 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40006400 	.word	0x40006400
 8002310:	40021000 	.word	0x40021000
 8002314:	48000c00 	.word	0x48000c00

08002318 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_COMP_MspInit+0x98>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d118      	bne.n	800236c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <HAL_COMP_MspInit+0x9c>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_COMP_MspInit+0x9c>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_COMP_MspInit+0x9c>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002352:	2304      	movs	r3, #4
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002356:	2303      	movs	r3, #3
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4814      	ldr	r0, [pc, #80]	; (80023b8 <HAL_COMP_MspInit+0xa0>)
 8002366:	f002 f8a1 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800236a:	e01c      	b.n	80023a6 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_COMP_MspInit+0xa4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d117      	bne.n	80023a6 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_COMP_MspInit+0x9c>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_COMP_MspInit+0x9c>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_COMP_MspInit+0x9c>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002392:	2303      	movs	r3, #3
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_COMP_MspInit+0xa0>)
 80023a2:	f002 f883 	bl	80044ac <HAL_GPIO_Init>
}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40010200 	.word	0x40010200
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	40010204 	.word	0x40010204

080023c0 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0b0      	sub	sp, #192	; 0xc0
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	2294      	movs	r2, #148	; 0x94
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f007 ff8e 	bl	800a302 <memset>
  if(hsmbus->Instance==I2C1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a42      	ldr	r2, [pc, #264]	; (80024f4 <HAL_SMBUS_MspInit+0x134>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d13c      	bne.n	800246a <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023f0:	2340      	movs	r3, #64	; 0x40
 80023f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 f9d3 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8002408:	f7ff fea6 	bl	8002158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240c:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002418:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002424:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242c:	2312      	movs	r3, #18
 800242e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002432:	2301      	movs	r3, #1
 8002434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800243e:	2304      	movs	r3, #4
 8002440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002448:	4619      	mov	r1, r3
 800244a:	482c      	ldr	r0, [pc, #176]	; (80024fc <HAL_SMBUS_MspInit+0x13c>)
 800244c:	f002 f82e 	bl	80044ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 8002456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800245a:	6593      	str	r3, [r2, #88]	; 0x58
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002468:	e03f      	b.n	80024ea <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a24      	ldr	r2, [pc, #144]	; (8002500 <HAL_SMBUS_MspInit+0x140>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d13a      	bne.n	80024ea <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002478:	2300      	movs	r3, #0
 800247a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	4618      	mov	r0, r3
 8002482:	f003 f991 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 800248c:	f7ff fe64 	bl	8002158 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80024a8:	2307      	movs	r3, #7
 80024aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ae:	2312      	movs	r3, #18
 80024b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024c0:	2304      	movs	r3, #4
 80024c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024ca:	4619      	mov	r1, r3
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <HAL_SMBUS_MspInit+0x144>)
 80024ce:	f001 ffed 	bl	80044ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 80024d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024dc:	6593      	str	r3, [r2, #88]	; 0x58
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_SMBUS_MspInit+0x138>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
}
 80024ea:	bf00      	nop
 80024ec:	37c0      	adds	r7, #192	; 0xc0
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40005400 	.word	0x40005400
 80024f8:	40021000 	.word	0x40021000
 80024fc:	48000400 	.word	0x48000400
 8002500:	40005800 	.word	0x40005800
 8002504:	48001400 	.word	0x48001400

08002508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0b2      	sub	sp, #200	; 0xc8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	f107 0320 	add.w	r3, r7, #32
 8002524:	2294      	movs	r2, #148	; 0x94
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f007 feea 	bl	800a302 <memset>
  if(huart->Instance==LPUART1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a64      	ldr	r2, [pc, #400]	; (80026c4 <HAL_UART_MspInit+0x1bc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d13e      	bne.n	80025b6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002538:	2320      	movs	r3, #32
 800253a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800253c:	2300      	movs	r3, #0
 800253e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002540:	f107 0320 	add.w	r3, r7, #32
 8002544:	4618      	mov	r0, r3
 8002546:	f003 f92f 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002550:	f7ff fe02 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002554:	4b5c      	ldr	r3, [pc, #368]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002584:	f002 fa28 	bl	80049d8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002588:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800258c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80025a2:	2308      	movs	r3, #8
 80025a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4847      	ldr	r0, [pc, #284]	; (80026cc <HAL_UART_MspInit+0x1c4>)
 80025b0:	f001 ff7c 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025b4:	e081      	b.n	80026ba <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a45      	ldr	r2, [pc, #276]	; (80026d0 <HAL_UART_MspInit+0x1c8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d13b      	bne.n	8002638 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f8eb 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80025d8:	f7ff fdbe 	bl	8002158 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025dc:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	4a39      	ldr	r2, [pc, #228]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 80025e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e6:	6593      	str	r3, [r2, #88]	; 0x58
 80025e8:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f4:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002600:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800260c:	2378      	movs	r3, #120	; 0x78
 800260e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002624:	2307      	movs	r3, #7
 8002626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800262e:	4619      	mov	r1, r3
 8002630:	4828      	ldr	r0, [pc, #160]	; (80026d4 <HAL_UART_MspInit+0x1cc>)
 8002632:	f001 ff3b 	bl	80044ac <HAL_GPIO_Init>
}
 8002636:	e040      	b.n	80026ba <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <HAL_UART_MspInit+0x1d0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d13b      	bne.n	80026ba <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002642:	2304      	movs	r3, #4
 8002644:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002646:	2300      	movs	r3, #0
 8002648:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264a:	f107 0320 	add.w	r3, r7, #32
 800264e:	4618      	mov	r0, r3
 8002650:	f003 f8aa 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_UART_MspInit+0x156>
      Error_Handler();
 800265a:	f7ff fd7d 	bl	8002158 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_UART_MspInit+0x1c0>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800268e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002692:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026a8:	2307      	movs	r3, #7
 80026aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4807      	ldr	r0, [pc, #28]	; (80026d4 <HAL_UART_MspInit+0x1cc>)
 80026b6:	f001 fef9 	bl	80044ac <HAL_GPIO_Init>
}
 80026ba:	bf00      	nop
 80026bc:	37c8      	adds	r7, #200	; 0xc8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40008000 	.word	0x40008000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	48001800 	.word	0x48001800
 80026d0:	40004400 	.word	0x40004400
 80026d4:	48000c00 	.word	0x48000c00
 80026d8:	40004800 	.word	0x40004800

080026dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_SPI_MspInit+0x7c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d128      	bne.n	8002750 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_SPI_MspInit+0x80>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <HAL_SPI_MspInit+0x80>)
 8002704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_SPI_MspInit+0x80>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_SPI_MspInit+0x80>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_SPI_MspInit+0x80>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_SPI_MspInit+0x80>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800272e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002740:	2306      	movs	r3, #6
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	4619      	mov	r1, r3
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <HAL_SPI_MspInit+0x84>)
 800274c:	f001 feae 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002750:	bf00      	nop
 8002752:	3728      	adds	r7, #40	; 0x28
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40003c00 	.word	0x40003c00
 800275c:	40021000 	.word	0x40021000
 8002760:	48000800 	.word	0x48000800

08002764 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a51      	ldr	r2, [pc, #324]	; (80028c8 <HAL_TIM_PWM_MspInit+0x164>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d139      	bne.n	80027fa <HAL_TIM_PWM_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002786:	4b51      	ldr	r3, [pc, #324]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	4a50      	ldr	r2, [pc, #320]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 800278c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002790:	6613      	str	r3, [r2, #96]	; 0x60
 8002792:	4b4e      	ldr	r3, [pc, #312]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279a:	623b      	str	r3, [r7, #32]
 800279c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800279e:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027aa:	4b48      	ldr	r3, [pc, #288]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ce:	4619      	mov	r1, r3
 80027d0:	483f      	ldr	r0, [pc, #252]	; (80028d0 <HAL_TIM_PWM_MspInit+0x16c>)
 80027d2:	f001 fe6b 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80027e8:	2303      	movs	r3, #3
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f0:	4619      	mov	r1, r3
 80027f2:	4837      	ldr	r0, [pc, #220]	; (80028d0 <HAL_TIM_PWM_MspInit+0x16c>)
 80027f4:	f001 fe5a 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80027f8:	e062      	b.n	80028c0 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d10c      	bne.n	800281e <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6593      	str	r3, [r2, #88]	; 0x58
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	69bb      	ldr	r3, [r7, #24]
}
 800281c:	e050      	b.n	80028c0 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM3)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <HAL_TIM_PWM_MspInit+0x170>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10c      	bne.n	8002842 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	697b      	ldr	r3, [r7, #20]
}
 8002840:	e03e      	b.n	80028c0 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM4)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <HAL_TIM_PWM_MspInit+0x174>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d128      	bne.n	800289e <HAL_TIM_PWM_MspInit+0x13a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6593      	str	r3, [r2, #88]	; 0x58
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 800286a:	f043 0310 	orr.w	r3, r3, #16
 800286e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800287c:	2301      	movs	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800288c:	2302      	movs	r3, #2
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	480e      	ldr	r0, [pc, #56]	; (80028d0 <HAL_TIM_PWM_MspInit+0x16c>)
 8002898:	f001 fe08 	bl	80044ac <HAL_GPIO_Init>
}
 800289c:	e010      	b.n	80028c0 <HAL_TIM_PWM_MspInit+0x15c>
  else if(htim_pwm->Instance==TIM15)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_TIM_PWM_MspInit+0x178>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10b      	bne.n	80028c0 <HAL_TIM_PWM_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	6613      	str	r3, [r2, #96]	; 0x60
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_TIM_PWM_MspInit+0x168>)
 80028b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
}
 80028c0:	bf00      	nop
 80028c2:	3738      	adds	r7, #56	; 0x38
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40021000 	.word	0x40021000
 80028d0:	48001000 	.word	0x48001000
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800
 80028dc:	40014000 	.word	0x40014000

080028e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a73      	ldr	r2, [pc, #460]	; (8002acc <HAL_TIM_MspPostInit+0x1ec>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d11d      	bne.n	800293e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002902:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a72      	ldr	r2, [pc, #456]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290e:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	623b      	str	r3, [r7, #32]
 8002918:	6a3b      	ldr	r3, [r7, #32]
    PE8     ------> TIM1_CH1N
    PE10     ------> TIM1_CH2N
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 800291a:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800292c:	2301      	movs	r3, #1
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	4619      	mov	r1, r3
 8002936:	4867      	ldr	r0, [pc, #412]	; (8002ad4 <HAL_TIM_MspPostInit+0x1f4>)
 8002938:	f001 fdb8 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800293c:	e0c2      	b.n	8002ac4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d13a      	bne.n	80029be <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	4b61      	ldr	r3, [pc, #388]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	4a60      	ldr	r2, [pc, #384]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002954:	4b5e      	ldr	r3, [pc, #376]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800296c:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 800296e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002978:	2301      	movs	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002988:	2301      	movs	r3, #1
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002996:	f001 fd89 	bl	80044ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800299a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ac:	2301      	movs	r3, #1
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	4848      	ldr	r0, [pc, #288]	; (8002ad8 <HAL_TIM_MspPostInit+0x1f8>)
 80029b8:	f001 fd78 	bl	80044ac <HAL_GPIO_Init>
}
 80029bc:	e082      	b.n	8002ac4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a46      	ldr	r2, [pc, #280]	; (8002adc <HAL_TIM_MspPostInit+0x1fc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d138      	bne.n	8002a3a <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d4:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ec:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029f8:	2301      	movs	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	4619      	mov	r1, r3
 8002a12:	4831      	ldr	r0, [pc, #196]	; (8002ad8 <HAL_TIM_MspPostInit+0x1f8>)
 8002a14:	f001 fd4a 	bl	80044ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a30:	4619      	mov	r1, r3
 8002a32:	482b      	ldr	r0, [pc, #172]	; (8002ae0 <HAL_TIM_MspPostInit+0x200>)
 8002a34:	f001 fd3a 	bl	80044ac <HAL_GPIO_Init>
}
 8002a38:	e044      	b.n	8002ac4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_TIM_MspPostInit+0x204>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d11d      	bne.n	8002a80 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a50:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	4619      	mov	r1, r3
 8002a78:	481b      	ldr	r0, [pc, #108]	; (8002ae8 <HAL_TIM_MspPostInit+0x208>)
 8002a7a:	f001 fd17 	bl	80044ac <HAL_GPIO_Init>
}
 8002a7e:	e021      	b.n	8002ac4 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <HAL_TIM_MspPostInit+0x20c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d11c      	bne.n	8002ac4 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_TIM_MspPostInit+0x1f0>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002ab4:	230e      	movs	r3, #14
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	4619      	mov	r1, r3
 8002abe:	4806      	ldr	r0, [pc, #24]	; (8002ad8 <HAL_TIM_MspPostInit+0x1f8>)
 8002ac0:	f001 fcf4 	bl	80044ac <HAL_GPIO_Init>
}
 8002ac4:	bf00      	nop
 8002ac6:	3738      	adds	r7, #56	; 0x38
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48001000 	.word	0x48001000
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	48000800 	.word	0x48000800
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	48000c00 	.word	0x48000c00
 8002aec:	40014000 	.word	0x40014000

08002af0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a50      	ldr	r2, [pc, #320]	; (8002c40 <HAL_SAI_MspInit+0x150>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d124      	bne.n	8002b4c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <HAL_SAI_MspInit+0x154>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002b0a:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	4a4e      	ldr	r2, [pc, #312]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b14:	6613      	str	r3, [r2, #96]	; 0x60
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <HAL_SAI_MspInit+0x154>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	4a46      	ldr	r2, [pc, #280]	; (8002c44 <HAL_SAI_MspInit+0x154>)
 8002b2a:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b2c:	2374      	movs	r3, #116	; 0x74
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002b3c:	230d      	movs	r3, #13
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	4841      	ldr	r0, [pc, #260]	; (8002c4c <HAL_SAI_MspInit+0x15c>)
 8002b48:	f001 fcb0 	bl	80044ac <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3f      	ldr	r2, [pc, #252]	; (8002c50 <HAL_SAI_MspInit+0x160>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d135      	bne.n	8002bc2 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_SAI_MspInit+0x154>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	4a39      	ldr	r2, [pc, #228]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b68:	6613      	str	r3, [r2, #96]	; 0x60
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002b76:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <HAL_SAI_MspInit+0x154>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a31      	ldr	r2, [pc, #196]	; (8002c44 <HAL_SAI_MspInit+0x154>)
 8002b7e:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b80:	2308      	movs	r3, #8
 8002b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002b90:	230d      	movs	r3, #13
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	4619      	mov	r1, r3
 8002b9a:	482c      	ldr	r0, [pc, #176]	; (8002c4c <HAL_SAI_MspInit+0x15c>)
 8002b9c:	f001 fc86 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002ba0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002bb2:	230d      	movs	r3, #13
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4825      	ldr	r0, [pc, #148]	; (8002c54 <HAL_SAI_MspInit+0x164>)
 8002bbe:	f001 fc75 	bl	80044ac <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a24      	ldr	r2, [pc, #144]	; (8002c58 <HAL_SAI_MspInit+0x168>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d135      	bne.n	8002c38 <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_SAI_MspInit+0x16c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002bda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bde:	6613      	str	r3, [r2, #96]	; 0x60
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_SAI_MspInit+0x158>)
 8002be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_SAI_MspInit+0x16c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_SAI_MspInit+0x16c>)
 8002bf4:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002bf6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c08:	230d      	movs	r3, #13
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	4813      	ldr	r0, [pc, #76]	; (8002c60 <HAL_SAI_MspInit+0x170>)
 8002c14:	f001 fc4a 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c18:	2340      	movs	r3, #64	; 0x40
 8002c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002c28:	230d      	movs	r3, #13
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <HAL_SAI_MspInit+0x174>)
 8002c34:	f001 fc3a 	bl	80044ac <HAL_GPIO_Init>

    }
}
 8002c38:	bf00      	nop
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40015404 	.word	0x40015404
 8002c44:	200008d0 	.word	0x200008d0
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	48001000 	.word	0x48001000
 8002c50:	40015424 	.word	0x40015424
 8002c54:	48001400 	.word	0x48001400
 8002c58:	40015804 	.word	0x40015804
 8002c5c:	200008d4 	.word	0x200008d4
 8002c60:	48000400 	.word	0x48000400
 8002c64:	48000800 	.word	0x48000800

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c6c:	e7fe      	b.n	8002c6c <NMI_Handler+0x4>

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb4:	f000 f958 	bl	8002f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return 1;
 8002cc0:	2301      	movs	r3, #1
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_kill>:

int _kill(int pid, int sig)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cd6:	f007 fb67 	bl	800a3a8 <__errno>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2216      	movs	r2, #22
 8002cde:	601a      	str	r2, [r3, #0]
  return -1;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_exit>:

void _exit (int status)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ffe7 	bl	8002ccc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cfe:	e7fe      	b.n	8002cfe <_exit+0x12>

08002d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e00a      	b.n	8002d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d12:	f3af 8000 	nop.w
 8002d16:	4601      	mov	r1, r0
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	b2ca      	uxtb	r2, r1
 8002d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3301      	adds	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	dbf0      	blt.n	8002d12 <_read+0x12>
  }

  return len;
 8002d30:	687b      	ldr	r3, [r7, #4]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e009      	b.n	8002d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	60ba      	str	r2, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f9ed 	bl	8002134 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dbf1      	blt.n	8002d4c <_write+0x12>
  }
  return len;
 8002d68:	687b      	ldr	r3, [r7, #4]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_close>:

int _close(int file)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_isatty>:

int _isatty(int file)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <_sbrk+0x5c>)
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <_sbrk+0x60>)
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <_sbrk+0x64>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <_sbrk+0x68>)
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e0c:	f007 facc 	bl	800a3a8 <__errno>
 8002e10:	4603      	mov	r3, r0
 8002e12:	220c      	movs	r2, #12
 8002e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e009      	b.n	8002e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <_sbrk+0x64>)
 8002e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200a0000 	.word	0x200a0000
 8002e3c:	00000400 	.word	0x00000400
 8002e40:	200008d8 	.word	0x200008d8
 8002e44:	20000a30 	.word	0x20000a30

08002e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <SystemInit+0x20>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <SystemInit+0x20>)
 8002e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e70:	f7ff ffea 	bl	8002e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e74:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e76:	490d      	ldr	r1, [pc, #52]	; (8002eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <LoopForever+0xe>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e7c:	e002      	b.n	8002e84 <LoopCopyDataInit>

08002e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e82:	3304      	adds	r3, #4

08002e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e88:	d3f9      	bcc.n	8002e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e8c:	4c0a      	ldr	r4, [pc, #40]	; (8002eb8 <LoopForever+0x16>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e90:	e001      	b.n	8002e96 <LoopFillZerobss>

08002e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e94:	3204      	adds	r2, #4

08002e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e98:	d3fb      	bcc.n	8002e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f007 fa8b 	bl	800a3b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e9e:	f7fe f857 	bl	8000f50 <main>

08002ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ea2:	e7fe      	b.n	8002ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ea4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002eb0:	0800c65c 	.word	0x0800c65c
  ldr r2, =_sbss
 8002eb4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002eb8:	20000a2c 	.word	0x20000a2c

08002ebc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC1_IRQHandler>

08002ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f001 fabb 	bl	8004444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f000 f80e 	bl	8002ef0 <HAL_InitTick>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	e001      	b.n	8002ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ee0:	f7ff f940 	bl	8002164 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002efc:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <HAL_InitTick+0x6c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_InitTick+0x70>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_InitTick+0x6c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fab9 	bl	8004492 <HAL_SYSTICK_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d809      	bhi.n	8002f40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f001 fa91 	bl	800445a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_InitTick+0x74>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e007      	b.n	8002f50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e004      	b.n	8002f50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e001      	b.n	8002f50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000008 	.word	0x20000008
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20000004 	.word	0x20000004

08002f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x20>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_IncTick+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_IncTick+0x24>)
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	200008dc 	.word	0x200008dc

08002f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return uwTick;
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_GetTick+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	200008dc 	.word	0x200008dc

08002fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff ffee 	bl	8002f90 <HAL_GetTick>
 8002fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d005      	beq.n	8002fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_Delay+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fce:	bf00      	nop
 8002fd0:	f7ff ffde 	bl	8002f90 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8f7      	bhi.n	8002fd0 <HAL_Delay+0x28>
  {
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000008 	.word	0x20000008

08002ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	609a      	str	r2, [r3, #8]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3360      	adds	r3, #96	; 0x60
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <LL_ADC_SetOffset+0x44>)
 800307a:	4013      	ands	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	4313      	orrs	r3, r2
 8003088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	03fff000 	.word	0x03fff000

080030a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3360      	adds	r3, #96	; 0x60
 80030ae:	461a      	mov	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	615a      	str	r2, [r3, #20]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3330      	adds	r3, #48	; 0x30
 8003138:	461a      	mov	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	211f      	movs	r1, #31
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	401a      	ands	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	f003 011f 	and.w	r1, r3, #31
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3314      	adds	r3, #20
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0e5b      	lsrs	r3, r3, #25
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0d1b      	lsrs	r3, r3, #20
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2107      	movs	r1, #7
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	401a      	ands	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	431a      	orrs	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0318 	and.w	r3, r3, #24
 80031fa:	4908      	ldr	r1, [pc, #32]	; (800321c <LL_ADC_SetChannelSingleDiff+0x44>)
 80031fc:	40d9      	lsrs	r1, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	400b      	ands	r3, r1
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	431a      	orrs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	0007ffff 	.word	0x0007ffff

08003220 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6093      	str	r3, [r2, #8]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d101      	bne.n	800325e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800327c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003280:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a8:	d101      	bne.n	80032ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_IsEnabled+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_IsEnabled+0x1a>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d101      	bne.n	80032fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d101      	bne.n	8003320 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e129      	b.n	800359e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fe ff27 	bl	80021ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff67 	bl	8003244 <LL_ADC_IsDeepPowerDownEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff4d 	bl	8003220 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff ff82 	bl	8003294 <LL_ADC_IsInternalRegulatorEnabled>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d115      	bne.n	80033c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff66 	bl	800326c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033a0:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_ADC_Init+0x278>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	4a81      	ldr	r2, [pc, #516]	; (80035ac <HAL_ADC_Init+0x27c>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033b4:	e002      	b.n	80033bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f9      	bne.n	80033b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff64 	bl	8003294 <LL_ADC_IsInternalRegulatorEnabled>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10d      	bne.n	80033ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f043 0210 	orr.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ff75 	bl	80032e2 <LL_ADC_REG_IsConversionOngoing>
 80033f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 80c2 	bne.w	800358c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 80be 	bne.w	800358c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003418:	f043 0202 	orr.w	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff49 	bl	80032bc <LL_ADC_IsEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003430:	485f      	ldr	r0, [pc, #380]	; (80035b0 <HAL_ADC_Init+0x280>)
 8003432:	f7ff ff43 	bl	80032bc <LL_ADC_IsEnabled>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	485c      	ldr	r0, [pc, #368]	; (80035b4 <HAL_ADC_Init+0x284>)
 8003444:	f7ff fdd4 	bl	8002ff0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7e5b      	ldrb	r3, [r3, #25]
 800344c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003452:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003458:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800345e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003466:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d106      	bne.n	8003484 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	3b01      	subs	r3, #1
 800347c:	045b      	lsls	r3, r3, #17
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_ADC_Init+0x288>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	69b9      	ldr	r1, [r7, #24]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff25 	bl	8003308 <LL_ADC_INJ_IsConversionOngoing>
 80034be:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d140      	bne.n	8003548 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d13d      	bne.n	8003548 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7e1b      	ldrb	r3, [r3, #24]
 80034d4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034d6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ee:	f023 0306 	bic.w	r3, r3, #6
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003502:	2b01      	cmp	r3, #1
 8003504:	d118      	bne.n	8003538 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003528:	430a      	orrs	r2, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	611a      	str	r2, [r3, #16]
 8003536:	e007      	b.n	8003548 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10c      	bne.n	800356a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f023 010f 	bic.w	r1, r3, #15
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
 8003568:	e007      	b.n	800357a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 020f 	bic.w	r2, r2, #15
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	659a      	str	r2, [r3, #88]	; 0x58
 800358a:	e007      	b.n	800359c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f043 0210 	orr.w	r2, r3, #16
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800359c:	7ffb      	ldrb	r3, [r7, #31]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000000 	.word	0x20000000
 80035ac:	053e2d63 	.word	0x053e2d63
 80035b0:	50040000 	.word	0x50040000
 80035b4:	50040300 	.word	0x50040300
 80035b8:	fff0c007 	.word	0xfff0c007

080035bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0b6      	sub	sp, #216	; 0xd8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_ADC_ConfigChannel+0x22>
 80035da:	2302      	movs	r3, #2
 80035dc:	e3d5      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x7ce>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fe79 	bl	80032e2 <LL_ADC_REG_IsConversionOngoing>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 83ba 	bne.w	8003d6c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d824      	bhi.n	8003652 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	3b02      	subs	r3, #2
 800360e:	2b03      	cmp	r3, #3
 8003610:	d81b      	bhi.n	800364a <HAL_ADC_ConfigChannel+0x8e>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_ADC_ConfigChannel+0x5c>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	08003629 	.word	0x08003629
 800361c:	08003631 	.word	0x08003631
 8003620:	08003639 	.word	0x08003639
 8003624:	08003641 	.word	0x08003641
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003628:	230c      	movs	r3, #12
 800362a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800362e:	e010      	b.n	8003652 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003630:	2312      	movs	r3, #18
 8003632:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003636:	e00c      	b.n	8003652 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003638:	2318      	movs	r3, #24
 800363a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800363e:	e008      	b.n	8003652 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003648:	e003      	b.n	8003652 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800364a:	2306      	movs	r3, #6
 800364c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003650:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003660:	f7ff fd62 	bl	8003128 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fe3a 	bl	80032e2 <LL_ADC_REG_IsConversionOngoing>
 800366e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fe46 	bl	8003308 <LL_ADC_INJ_IsConversionOngoing>
 800367c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003684:	2b00      	cmp	r3, #0
 8003686:	f040 81bf 	bne.w	8003a08 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800368a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 81ba 	bne.w	8003a08 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800369c:	d10f      	bne.n	80036be <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7ff fd69 	bl	8003180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fd23 	bl	8003102 <LL_ADC_SetSamplingTimeCommonConfig>
 80036bc:	e00e      	b.n	80036dc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f7ff fd58 	bl	8003180 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fd13 	bl	8003102 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	08db      	lsrs	r3, r3, #3
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00a      	beq.n	8003714 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6919      	ldr	r1, [r3, #16]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800370e:	f7ff fca3 	bl	8003058 <LL_ADC_SetOffset>
 8003712:	e179      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fcc0 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 8003720:	4603      	mov	r3, r0
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x184>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fcb5 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 8003736:	4603      	mov	r3, r0
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	f003 021f 	and.w	r2, r3, #31
 800373e:	e01e      	b.n	800377e <HAL_ADC_ConfigChannel+0x1c2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fcaa 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 800374c:	4603      	mov	r3, r0
 800374e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800375e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003766:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e004      	b.n	800377c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x1da>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	e018      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x20c>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80037aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80037b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80037ba:	2320      	movs	r3, #32
 80037bc:	e004      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80037be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d106      	bne.n	80037da <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fc79 	bl	80030cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fc5d 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x24a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fc52 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 80037fc:	4603      	mov	r3, r0
 80037fe:	0e9b      	lsrs	r3, r3, #26
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	e01e      	b.n	8003844 <HAL_ADC_ConfigChannel+0x288>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fc47 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 8003812:	4603      	mov	r3, r0
 8003814:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800382c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003834:	2320      	movs	r3, #32
 8003836:	e004      	b.n	8003842 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003838:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <HAL_ADC_ConfigChannel+0x2a0>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	e018      	b.n	800388e <HAL_ADC_ConfigChannel+0x2d2>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003870:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003880:	2320      	movs	r3, #32
 8003882:	e004      	b.n	800388e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800388e:	429a      	cmp	r2, r3
 8003890:	d106      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	2101      	movs	r1, #1
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fc16 	bl	80030cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2102      	movs	r1, #2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fbfa 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x310>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fbef 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 80038c2:	4603      	mov	r3, r0
 80038c4:	0e9b      	lsrs	r3, r3, #26
 80038c6:	f003 021f 	and.w	r2, r3, #31
 80038ca:	e01e      	b.n	800390a <HAL_ADC_ConfigChannel+0x34e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2102      	movs	r1, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fbe4 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 80038d8:	4603      	mov	r3, r0
 80038da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80038ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80038f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80038fa:	2320      	movs	r3, #32
 80038fc:	e004      	b.n	8003908 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80038fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003912:	2b00      	cmp	r3, #0
 8003914:	d105      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x366>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0e9b      	lsrs	r3, r3, #26
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	e014      	b.n	800394c <HAL_ADC_ConfigChannel+0x390>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800393e:	2320      	movs	r3, #32
 8003940:	e004      	b.n	800394c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003942:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800394c:	429a      	cmp	r2, r3
 800394e:	d106      	bne.n	800395e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	2102      	movs	r1, #2
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fbb7 	bl	80030cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2103      	movs	r1, #3
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fb9b 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <HAL_ADC_ConfigChannel+0x3ce>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2103      	movs	r1, #3
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fb90 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	f003 021f 	and.w	r2, r3, #31
 8003988:	e017      	b.n	80039ba <HAL_ADC_ConfigChannel+0x3fe>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2103      	movs	r1, #3
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fb85 	bl	80030a0 <LL_ADC_GetOffsetChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80039a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80039ac:	2320      	movs	r3, #32
 80039ae:	e003      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80039b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x416>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	0e9b      	lsrs	r3, r3, #26
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	e011      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x43a>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80039e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80039e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80039ea:	2320      	movs	r3, #32
 80039ec:	e003      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80039ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d106      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2103      	movs	r1, #3
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fb62 	bl	80030cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fc55 	bl	80032bc <LL_ADC_IsEnabled>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 813f 	bne.w	8003c98 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f7ff fbd6 	bl	80031d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a8e      	ldr	r2, [pc, #568]	; (8003c6c <HAL_ADC_ConfigChannel+0x6b0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f040 8130 	bne.w	8003c98 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x4a4>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	bf94      	ite	ls
 8003a58:	2301      	movls	r3, #1
 8003a5a:	2300      	movhi	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e019      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x4d8>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003a78:	2320      	movs	r3, #32
 8003a7a:	e003      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	2b09      	cmp	r3, #9
 8003a8c:	bf94      	ite	ls
 8003a8e:	2301      	movls	r3, #1
 8003a90:	2300      	movhi	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d079      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x4f8>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0e9b      	lsrs	r3, r3, #26
 8003aaa:	3301      	adds	r3, #1
 8003aac:	069b      	lsls	r3, r3, #26
 8003aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab2:	e015      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x524>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	069b      	lsls	r3, r3, #26
 8003adc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x544>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	3301      	adds	r3, #1
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	e017      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x574>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003b18:	2320      	movs	r3, #32
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	ea42 0103 	orr.w	r1, r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x59a>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0e9b      	lsrs	r3, r3, #26
 8003b46:	3301      	adds	r3, #1
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4413      	add	r3, r2
 8003b52:	051b      	lsls	r3, r3, #20
 8003b54:	e018      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x5cc>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	e003      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4613      	mov	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	e080      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d107      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x5ec>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	069b      	lsls	r3, r3, #26
 8003ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ba6:	e015      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x618>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e003      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	069b      	lsls	r3, r3, #26
 8003bd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x638>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0e9b      	lsrs	r3, r3, #26
 8003be6:	3301      	adds	r3, #1
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2101      	movs	r1, #1
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	e017      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x668>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	61bb      	str	r3, [r7, #24]
  return result;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	e003      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2101      	movs	r1, #1
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	ea42 0103 	orr.w	r1, r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10d      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x694>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	3b1e      	subs	r3, #30
 8003c48:	051b      	lsls	r3, r3, #20
 8003c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	e01d      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x6d0>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	60fb      	str	r3, [r7, #12]
  return result;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e005      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x6bc>
 8003c6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f003 021f 	and.w	r2, r3, #31
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	3b1e      	subs	r3, #30
 8003c86:	051b      	lsls	r3, r3, #20
 8003c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c92:	4619      	mov	r1, r3
 8003c94:	f7ff fa74 	bl	8003180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d06c      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ca4:	483c      	ldr	r0, [pc, #240]	; (8003d98 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ca6:	f7ff f9c9 	bl	800303c <LL_ADC_GetCommonPathInternalCh>
 8003caa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a3a      	ldr	r2, [pc, #232]	; (8003d9c <HAL_ADC_ConfigChannel+0x7e0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d127      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d121      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a35      	ldr	r2, [pc, #212]	; (8003da0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d157      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	482f      	ldr	r0, [pc, #188]	; (8003d98 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cda:	f7ff f99c 	bl	8003016 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cde:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_ADC_ConfigChannel+0x7e8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <HAL_ADC_ConfigChannel+0x7ec>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cf8:	e002      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d06:	e03a      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a27      	ldr	r2, [pc, #156]	; (8003dac <HAL_ADC_ConfigChannel+0x7f0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d113      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d12a      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d30:	4619      	mov	r1, r3
 8003d32:	4819      	ldr	r0, [pc, #100]	; (8003d98 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d34:	f7ff f96f 	bl	8003016 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d38:	e021      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d11c      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d116      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d111      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d62:	4619      	mov	r1, r3
 8003d64:	480c      	ldr	r0, [pc, #48]	; (8003d98 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d66:	f7ff f956 	bl	8003016 <LL_ADC_SetCommonPathInternalCh>
 8003d6a:	e008      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d86:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	37d8      	adds	r7, #216	; 0xd8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	80080000 	.word	0x80080000
 8003d98:	50040300 	.word	0x50040300
 8003d9c:	c7520000 	.word	0xc7520000
 8003da0:	50040000 	.word	0x50040000
 8003da4:	20000000 	.word	0x20000000
 8003da8:	053e2d63 	.word	0x053e2d63
 8003dac:	cb840000 	.word	0xcb840000
 8003db0:	80000001 	.word	0x80000001

08003db4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0ed      	b.n	8003fa2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fe fa5c 	bl	8002290 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de8:	f7ff f8d2 	bl	8002f90 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dee:	e012      	b.n	8003e16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003df0:	f7ff f8ce 	bl	8002f90 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b0a      	cmp	r3, #10
 8003dfc:	d90b      	bls.n	8003e16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2205      	movs	r2, #5
 8003e0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0c5      	b.n	8003fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0e5      	beq.n	8003df0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0202 	bic.w	r2, r2, #2
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e34:	f7ff f8ac 	bl	8002f90 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e3a:	e012      	b.n	8003e62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e3c:	f7ff f8a8 	bl	8002f90 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b0a      	cmp	r3, #10
 8003e48:	d90b      	bls.n	8003e62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2205      	movs	r2, #5
 8003e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e09f      	b.n	8003fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e5      	bne.n	8003e3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7e1b      	ldrb	r3, [r3, #24]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d108      	bne.n	8003e8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e007      	b.n	8003e9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7e5b      	ldrb	r3, [r3, #25]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d108      	bne.n	8003eb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e007      	b.n	8003ec4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7e9b      	ldrb	r3, [r3, #26]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d108      	bne.n	8003ede <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0220 	orr.w	r2, r2, #32
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e007      	b.n	8003eee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0220 	bic.w	r2, r2, #32
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7edb      	ldrb	r3, [r3, #27]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d108      	bne.n	8003f08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0210 	bic.w	r2, r2, #16
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e007      	b.n	8003f18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0210 	orr.w	r2, r2, #16
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7f1b      	ldrb	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d108      	bne.n	8003f32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0208 	orr.w	r2, r2, #8
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e007      	b.n	8003f42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0208 	bic.w	r2, r2, #8
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7f5b      	ldrb	r3, [r3, #29]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d108      	bne.n	8003f5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0204 	orr.w	r2, r2, #4
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e007      	b.n	8003f6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	ea42 0103 	orr.w	r1, r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <LL_EXTI_EnableIT_0_31+0x20>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4904      	ldr	r1, [pc, #16]	; (8003fcc <LL_EXTI_EnableIT_0_31+0x20>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40010400 	.word	0x40010400

08003fd0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <LL_EXTI_DisableIT_0_31+0x24>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <LL_EXTI_DisableIT_0_31+0x24>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]

}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40010400 	.word	0x40010400

0800401c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	43db      	mvns	r3, r3
 800402c:	4904      	ldr	r1, [pc, #16]	; (8004040 <LL_EXTI_DisableEvent_0_31+0x24>)
 800402e:	4013      	ands	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010400 	.word	0x40010400

08004044 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4904      	ldr	r1, [pc, #16]	; (8004064 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40010400 	.word	0x40010400

08004068 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	43db      	mvns	r3, r3
 8004078:	4904      	ldr	r1, [pc, #16]	; (800408c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800407a:	4013      	ands	r3, r2
 800407c:	608b      	str	r3, [r1, #8]

}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010400 	.word	0x40010400

08004090 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	4904      	ldr	r1, [pc, #16]	; (80040b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60cb      	str	r3, [r1, #12]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40010400 	.word	0x40010400

080040b4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	4904      	ldr	r1, [pc, #16]	; (80040d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	60cb      	str	r3, [r1, #12]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010400 	.word	0x40010400

080040dc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6153      	str	r3, [r2, #20]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010400 	.word	0x40010400

080040fc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e0d1      	b.n	80042bc <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004126:	d102      	bne.n	800412e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e0c6      	b.n	80042bc <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d115      	bne.n	8004166 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004148:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <HAL_COMP_Init+0x1cc>)
 800414a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414c:	4a5e      	ldr	r2, [pc, #376]	; (80042c8 <HAL_COMP_Init+0x1cc>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6613      	str	r3, [r2, #96]	; 0x60
 8004154:	4b5c      	ldr	r3, [pc, #368]	; (80042c8 <HAL_COMP_Init+0x1cc>)
 8004156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fe f8d9 	bl	8002318 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004170:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b4b      	ldr	r3, [pc, #300]	; (80042cc <HAL_COMP_Init+0x1d0>)
 800419e:	4013      	ands	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b2:	d106      	bne.n	80041c2 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80041b4:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <HAL_COMP_Init+0x1d4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a45      	ldr	r2, [pc, #276]	; (80042d0 <HAL_COMP_Init+0x1d4>)
 80041ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e005      	b.n	80041ce <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 80041c2:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_COMP_Init+0x1d4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a42      	ldr	r2, [pc, #264]	; (80042d0 <HAL_COMP_Init+0x1d4>)
 80041c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041cc:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <HAL_COMP_Init+0x10e>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041e2:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <HAL_COMP_Init+0x1d8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <HAL_COMP_Init+0x1dc>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80041fc:	e002      	b.n	8004204 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3b01      	subs	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f9      	bne.n	80041fe <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a33      	ldr	r2, [pc, #204]	; (80042dc <HAL_COMP_Init+0x1e0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d102      	bne.n	800421a <HAL_COMP_Init+0x11e>
 8004214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004218:	e001      	b.n	800421e <HAL_COMP_Init+0x122>
 800421a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800421e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d037      	beq.n	800429c <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004238:	6938      	ldr	r0, [r7, #16]
 800423a:	f7ff ff03 	bl	8004044 <LL_EXTI_EnableRisingTrig_0_31>
 800423e:	e002      	b.n	8004246 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004240:	6938      	ldr	r0, [r7, #16]
 8004242:	f7ff ff11 	bl	8004068 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004252:	6938      	ldr	r0, [r7, #16]
 8004254:	f7ff ff1c 	bl	8004090 <LL_EXTI_EnableFallingTrig_0_31>
 8004258:	e002      	b.n	8004260 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	f7ff ff2a 	bl	80040b4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8004260:	6938      	ldr	r0, [r7, #16]
 8004262:	f7ff ff3b 	bl	80040dc <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004272:	6938      	ldr	r0, [r7, #16]
 8004274:	f7ff fec0 	bl	8003ff8 <LL_EXTI_EnableEvent_0_31>
 8004278:	e002      	b.n	8004280 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800427a:	6938      	ldr	r0, [r7, #16]
 800427c:	f7ff fece 	bl	800401c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800428c:	6938      	ldr	r0, [r7, #16]
 800428e:	f7ff fe8d 	bl	8003fac <LL_EXTI_EnableIT_0_31>
 8004292:	e009      	b.n	80042a8 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004294:	6938      	ldr	r0, [r7, #16]
 8004296:	f7ff fe9b 	bl	8003fd0 <LL_EXTI_DisableIT_0_31>
 800429a:	e005      	b.n	80042a8 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800429c:	6938      	ldr	r0, [r7, #16]
 800429e:	f7ff febd 	bl	800401c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80042a2:	6938      	ldr	r0, [r7, #16]
 80042a4:	f7ff fe94 	bl	8003fd0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80042bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	ff207d03 	.word	0xff207d03
 80042d0:	40010204 	.word	0x40010204
 80042d4:	20000000 	.word	0x20000000
 80042d8:	053e2d63 	.word	0x053e2d63
 80042dc:	40010200 	.word	0x40010200

080042e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042fc:	4013      	ands	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800430c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	60d3      	str	r3, [r2, #12]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <__NVIC_GetPriorityGrouping+0x18>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	f003 0307 	and.w	r3, r3, #7
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db0a      	blt.n	800436e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	490c      	ldr	r1, [pc, #48]	; (8004390 <__NVIC_SetPriority+0x4c>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	440b      	add	r3, r1
 8004368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800436c:	e00a      	b.n	8004384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4908      	ldr	r1, [pc, #32]	; (8004394 <__NVIC_SetPriority+0x50>)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3b04      	subs	r3, #4
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	440b      	add	r3, r1
 8004382:	761a      	strb	r2, [r3, #24]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	; 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf28      	it	cs
 80043b6:	2304      	movcs	r3, #4
 80043b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3304      	adds	r3, #4
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d902      	bls.n	80043c8 <NVIC_EncodePriority+0x30>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3b03      	subs	r3, #3
 80043c6:	e000      	b.n	80043ca <NVIC_EncodePriority+0x32>
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e0:	f04f 31ff 	mov.w	r1, #4294967295
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	4313      	orrs	r3, r2
         );
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	; 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004410:	d301      	bcc.n	8004416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004412:	2301      	movs	r3, #1
 8004414:	e00f      	b.n	8004436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <SysTick_Config+0x40>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441e:	210f      	movs	r1, #15
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	f7ff ff8e 	bl	8004344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SysTick_Config+0x40>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <SysTick_Config+0x40>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff47 	bl	80042e0 <__NVIC_SetPriorityGrouping>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff ff5c 	bl	8004328 <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff8e 	bl	8004398 <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5d 	bl	8004344 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff ffb0 	bl	8004400 <SysTick_Config>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ba:	e166      	b.n	800478a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8158 	beq.w	8004784 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d005      	beq.n	80044ec <HAL_GPIO_Init+0x40>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d130      	bne.n	800454e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	2203      	movs	r2, #3
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004522:	2201      	movs	r2, #1
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0201 	and.w	r2, r3, #1
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d017      	beq.n	800458a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d123      	bne.n	80045de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	08da      	lsrs	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3208      	adds	r2, #8
 800459e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	08da      	lsrs	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3208      	adds	r2, #8
 80045d8:	6939      	ldr	r1, [r7, #16]
 80045da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	2203      	movs	r2, #3
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0203 	and.w	r2, r3, #3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80b2 	beq.w	8004784 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004620:	4b61      	ldr	r3, [pc, #388]	; (80047a8 <HAL_GPIO_Init+0x2fc>)
 8004622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004624:	4a60      	ldr	r2, [pc, #384]	; (80047a8 <HAL_GPIO_Init+0x2fc>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6613      	str	r3, [r2, #96]	; 0x60
 800462c:	4b5e      	ldr	r3, [pc, #376]	; (80047a8 <HAL_GPIO_Init+0x2fc>)
 800462e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004638:	4a5c      	ldr	r2, [pc, #368]	; (80047ac <HAL_GPIO_Init+0x300>)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	3302      	adds	r3, #2
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	220f      	movs	r2, #15
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004662:	d02b      	beq.n	80046bc <HAL_GPIO_Init+0x210>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a52      	ldr	r2, [pc, #328]	; (80047b0 <HAL_GPIO_Init+0x304>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d025      	beq.n	80046b8 <HAL_GPIO_Init+0x20c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a51      	ldr	r2, [pc, #324]	; (80047b4 <HAL_GPIO_Init+0x308>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01f      	beq.n	80046b4 <HAL_GPIO_Init+0x208>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a50      	ldr	r2, [pc, #320]	; (80047b8 <HAL_GPIO_Init+0x30c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d019      	beq.n	80046b0 <HAL_GPIO_Init+0x204>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a4f      	ldr	r2, [pc, #316]	; (80047bc <HAL_GPIO_Init+0x310>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_GPIO_Init+0x200>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a4e      	ldr	r2, [pc, #312]	; (80047c0 <HAL_GPIO_Init+0x314>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_GPIO_Init+0x1fc>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_GPIO_Init+0x318>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <HAL_GPIO_Init+0x1f8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a4c      	ldr	r2, [pc, #304]	; (80047c8 <HAL_GPIO_Init+0x31c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_GPIO_Init+0x1f4>
 800469c:	2307      	movs	r3, #7
 800469e:	e00e      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046a0:	2308      	movs	r3, #8
 80046a2:	e00c      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046a4:	2306      	movs	r3, #6
 80046a6:	e00a      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046a8:	2305      	movs	r3, #5
 80046aa:	e008      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046ac:	2304      	movs	r3, #4
 80046ae:	e006      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046b0:	2303      	movs	r3, #3
 80046b2:	e004      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e002      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046bc:	2300      	movs	r3, #0
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	f002 0203 	and.w	r2, r2, #3
 80046c4:	0092      	lsls	r2, r2, #2
 80046c6:	4093      	lsls	r3, r2
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046ce:	4937      	ldr	r1, [pc, #220]	; (80047ac <HAL_GPIO_Init+0x300>)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3302      	adds	r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046dc:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_GPIO_Init+0x320>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004700:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_GPIO_Init+0x320>)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004706:	4b31      	ldr	r3, [pc, #196]	; (80047cc <HAL_GPIO_Init+0x320>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800472a:	4a28      	ldr	r2, [pc, #160]	; (80047cc <HAL_GPIO_Init+0x320>)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_GPIO_Init+0x320>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43db      	mvns	r3, r3
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_GPIO_Init+0x320>)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <HAL_GPIO_Init+0x320>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <HAL_GPIO_Init+0x320>)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3301      	adds	r3, #1
 8004788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f ae91 	bne.w	80044bc <HAL_GPIO_Init+0x10>
  }
}
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40010000 	.word	0x40010000
 80047b0:	48000400 	.word	0x48000400
 80047b4:	48000800 	.word	0x48000800
 80047b8:	48000c00 	.word	0x48000c00
 80047bc:	48001000 	.word	0x48001000
 80047c0:	48001400 	.word	0x48001400
 80047c4:	48001800 	.word	0x48001800
 80047c8:	48001c00 	.word	0x48001c00
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e001      	b.n	80047f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004810:	787b      	ldrb	r3, [r7, #1]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800481c:	e002      	b.n	8004824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a04      	ldr	r2, [pc, #16]	; (800484c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800483a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40007000 	.word	0x40007000

08004850 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004854:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004860:	d102      	bne.n	8004868 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004866:	e00b      	b.n	8004880 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <HAL_PWREx_GetVoltageRange+0x3c>)
 800486a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	d102      	bne.n	800487e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800487c:	e000      	b.n	8004880 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800487e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40007000 	.word	0x40007000

08004890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d141      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800489e:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d131      	bne.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ac:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	4a46      	ldr	r2, [pc, #280]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048bc:	4b43      	ldr	r3, [pc, #268]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048c4:	4a41      	ldr	r2, [pc, #260]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80048cc:	4b40      	ldr	r3, [pc, #256]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2232      	movs	r2, #50	; 0x32
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	4a3f      	ldr	r2, [pc, #252]	; (80049d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e2:	e002      	b.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ea:	4b38      	ldr	r3, [pc, #224]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f6:	d102      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f2      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fe:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d158      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e057      	b.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004910:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	4a2d      	ldr	r2, [pc, #180]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004920:	e04d      	b.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d141      	bne.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800492a:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004936:	d131      	bne.n	800499c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004938:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493e:	4a23      	ldr	r2, [pc, #140]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004948:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004950:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004956:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004958:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2232      	movs	r2, #50	; 0x32
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	0c9b      	lsrs	r3, r3, #18
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800496e:	e002      	b.n	8004976 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3b01      	subs	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004982:	d102      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f2      	bne.n	8004970 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004996:	d112      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e011      	b.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049ac:	e007      	b.n	80049be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049b6:	4a05      	ldr	r2, [pc, #20]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40007000 	.word	0x40007000
 80049d0:	20000000 	.word	0x20000000
 80049d4:	431bde83 	.word	0x431bde83

080049d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e6:	6053      	str	r3, [r2, #4]
}
 80049e8:	bf00      	nop
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40007000 	.word	0x40007000

080049f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f000 bc08 	b.w	800521c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0c:	4b96      	ldr	r3, [pc, #600]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a16:	4b94      	ldr	r3, [pc, #592]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80e4 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4c>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	f040 808b 	bne.w	8004b52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	f040 8087 	bne.w	8004b52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a44:	4b88      	ldr	r3, [pc, #544]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_OscConfig+0x64>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e3df      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	4b81      	ldr	r3, [pc, #516]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <HAL_RCC_OscConfig+0x7e>
 8004a6c:	4b7e      	ldr	r3, [pc, #504]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a74:	e005      	b.n	8004a82 <HAL_RCC_OscConfig+0x8a>
 8004a76:	4b7c      	ldr	r3, [pc, #496]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d223      	bcs.n	8004ace <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fdcc 	bl	8005628 <RCC_SetFlashLatencyFromMSIRange>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e3c0      	b.n	800521c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9a:	4b73      	ldr	r3, [pc, #460]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a72      	ldr	r2, [pc, #456]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	f043 0308 	orr.w	r3, r3, #8
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b70      	ldr	r3, [pc, #448]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	496d      	ldr	r1, [pc, #436]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab8:	4b6b      	ldr	r3, [pc, #428]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	4968      	ldr	r1, [pc, #416]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
 8004acc:	e025      	b.n	8004b1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ace:	4b66      	ldr	r3, [pc, #408]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a65      	ldr	r2, [pc, #404]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	f043 0308 	orr.w	r3, r3, #8
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b63      	ldr	r3, [pc, #396]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	4960      	ldr	r1, [pc, #384]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aec:	4b5e      	ldr	r3, [pc, #376]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	495b      	ldr	r1, [pc, #364]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fd8c 	bl	8005628 <RCC_SetFlashLatencyFromMSIRange>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e380      	b.n	800521c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b1a:	f000 fcc1 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b51      	ldr	r3, [pc, #324]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	4950      	ldr	r1, [pc, #320]	; (8004c6c <HAL_RCC_OscConfig+0x274>)
 8004b2c:	5ccb      	ldrb	r3, [r1, r3]
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	4a4e      	ldr	r2, [pc, #312]	; (8004c70 <HAL_RCC_OscConfig+0x278>)
 8004b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b3a:	4b4e      	ldr	r3, [pc, #312]	; (8004c74 <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe f9d6 	bl	8002ef0 <HAL_InitTick>
 8004b44:	4603      	mov	r3, r0
 8004b46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d052      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	e364      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d032      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b5a:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a42      	ldr	r2, [pc, #264]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b66:	f7fe fa13 	bl	8002f90 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b6e:	f7fe fa0f 	bl	8002f90 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e34d      	b.n	800521c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b80:	4b39      	ldr	r3, [pc, #228]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b8c:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b92:	f043 0308 	orr.w	r3, r3, #8
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	4930      	ldr	r1, [pc, #192]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004baa:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	492b      	ldr	r1, [pc, #172]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]
 8004bbe:	e01a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bc0:	4b29      	ldr	r3, [pc, #164]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bcc:	f7fe f9e0 	bl	8002f90 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bd4:	f7fe f9dc 	bl	8002f90 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e31a      	b.n	800521c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1dc>
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d073      	beq.n	8004cea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x21c>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d10e      	bne.n	8004c2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d10b      	bne.n	8004c2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d063      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x2f0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d15f      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e2f7      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d106      	bne.n	8004c44 <HAL_RCC_OscConfig+0x24c>
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e025      	b.n	8004c90 <HAL_RCC_OscConfig+0x298>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c4c:	d114      	bne.n	8004c78 <HAL_RCC_OscConfig+0x280>
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a05      	ldr	r2, [pc, #20]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a02      	ldr	r2, [pc, #8]	; (8004c68 <HAL_RCC_OscConfig+0x270>)
 8004c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e013      	b.n	8004c90 <HAL_RCC_OscConfig+0x298>
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	0800c26c 	.word	0x0800c26c
 8004c70:	20000000 	.word	0x20000000
 8004c74:	20000004 	.word	0x20000004
 8004c78:	4ba0      	ldr	r3, [pc, #640]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a9f      	ldr	r2, [pc, #636]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b9d      	ldr	r3, [pc, #628]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a9c      	ldr	r2, [pc, #624]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fe f97a 	bl	8002f90 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca0:	f7fe f976 	bl	8002f90 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e2b4      	b.n	800521c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb2:	4b92      	ldr	r3, [pc, #584]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x2a8>
 8004cbe:	e014      	b.n	8004cea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fe f966 	bl	8002f90 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fe f962 	bl	8002f90 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e2a0      	b.n	800521c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cda:	4b88      	ldr	r3, [pc, #544]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x2d0>
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d060      	beq.n	8004db8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_OscConfig+0x310>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d119      	bne.n	8004d36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d116      	bne.n	8004d36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d08:	4b7c      	ldr	r3, [pc, #496]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_OscConfig+0x328>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e27d      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b76      	ldr	r3, [pc, #472]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	061b      	lsls	r3, r3, #24
 8004d2e:	4973      	ldr	r1, [pc, #460]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d34:	e040      	b.n	8004db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d023      	beq.n	8004d86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d3e:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a6e      	ldr	r2, [pc, #440]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7fe f921 	bl	8002f90 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d52:	f7fe f91d 	bl	8002f90 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e25b      	b.n	800521c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d64:	4b65      	ldr	r3, [pc, #404]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	4b62      	ldr	r3, [pc, #392]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	495f      	ldr	r1, [pc, #380]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
 8004d84:	e018      	b.n	8004db8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d86:	4b5d      	ldr	r3, [pc, #372]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a5c      	ldr	r2, [pc, #368]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fe f8fd 	bl	8002f90 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d9a:	f7fe f8f9 	bl	8002f90 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e237      	b.n	800521c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dac:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f0      	bne.n	8004d9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d03c      	beq.n	8004e3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dcc:	4b4b      	ldr	r3, [pc, #300]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd2:	4a4a      	ldr	r2, [pc, #296]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fe f8d8 	bl	8002f90 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de4:	f7fe f8d4 	bl	8002f90 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e212      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004df6:	4b41      	ldr	r3, [pc, #260]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ef      	beq.n	8004de4 <HAL_RCC_OscConfig+0x3ec>
 8004e04:	e01b      	b.n	8004e3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e06:	4b3d      	ldr	r3, [pc, #244]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e0c:	4a3b      	ldr	r2, [pc, #236]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fe f8bb 	bl	8002f90 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7fe f8b7 	bl	8002f90 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e1f5      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e30:	4b32      	ldr	r3, [pc, #200]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1ef      	bne.n	8004e1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80a6 	beq.w	8004f98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e50:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5c:	4b27      	ldr	r3, [pc, #156]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	4a26      	ldr	r2, [pc, #152]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	6593      	str	r3, [r2, #88]	; 0x58
 8004e68:	4b24      	ldr	r3, [pc, #144]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e74:	2301      	movs	r3, #1
 8004e76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e78:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <HAL_RCC_OscConfig+0x508>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d118      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e84:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <HAL_RCC_OscConfig+0x508>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <HAL_RCC_OscConfig+0x508>)
 8004e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e90:	f7fe f87e 	bl	8002f90 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e98:	f7fe f87a 	bl	8002f90 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e1b8      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <HAL_RCC_OscConfig+0x508>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d108      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x4d8>
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec4:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ece:	e029      	b.n	8004f24 <HAL_RCC_OscConfig+0x52c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b05      	cmp	r3, #5
 8004ed6:	d115      	bne.n	8004f04 <HAL_RCC_OscConfig+0x50c>
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	4a07      	ldr	r2, [pc, #28]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	4a03      	ldr	r2, [pc, #12]	; (8004efc <HAL_RCC_OscConfig+0x504>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ef8:	e014      	b.n	8004f24 <HAL_RCC_OscConfig+0x52c>
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40007000 	.word	0x40007000
 8004f04:	4b9d      	ldr	r3, [pc, #628]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	4a9c      	ldr	r2, [pc, #624]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f14:	4b99      	ldr	r3, [pc, #612]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	4a98      	ldr	r2, [pc, #608]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f1c:	f023 0304 	bic.w	r3, r3, #4
 8004f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d016      	beq.n	8004f5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fe f830 	bl	8002f90 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fe f82c 	bl	8002f90 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e168      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4a:	4b8c      	ldr	r3, [pc, #560]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ed      	beq.n	8004f34 <HAL_RCC_OscConfig+0x53c>
 8004f58:	e015      	b.n	8004f86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fe f819 	bl	8002f90 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fe f815 	bl	8002f90 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e151      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f78:	4b80      	ldr	r3, [pc, #512]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ed      	bne.n	8004f62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f86:	7ffb      	ldrb	r3, [r7, #31]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8c:	4b7b      	ldr	r3, [pc, #492]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	4a7a      	ldr	r2, [pc, #488]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d03c      	beq.n	800501e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01c      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fac:	4b73      	ldr	r3, [pc, #460]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fb2:	4a72      	ldr	r2, [pc, #456]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fd ffe8 	bl	8002f90 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc4:	f7fd ffe4 	bl	8002f90 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e122      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fd6:	4b69      	ldr	r3, [pc, #420]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ef      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x5cc>
 8004fe4:	e01b      	b.n	800501e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fe6:	4b65      	ldr	r3, [pc, #404]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fec:	4a63      	ldr	r2, [pc, #396]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff6:	f7fd ffcb 	bl	8002f90 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ffe:	f7fd ffc7 	bl	8002f90 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e105      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005010:	4b5a      	ldr	r3, [pc, #360]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8005012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ef      	bne.n	8004ffe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80f9 	beq.w	800521a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	2b02      	cmp	r3, #2
 800502e:	f040 80cf 	bne.w	80051d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005032:	4b52      	ldr	r3, [pc, #328]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0203 	and.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	429a      	cmp	r2, r3
 8005044:	d12c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	3b01      	subs	r3, #1
 8005052:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d123      	bne.n	80050a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d11b      	bne.n	80050a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d113      	bne.n	80050a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	3b01      	subs	r3, #1
 8005086:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005088:	429a      	cmp	r2, r3
 800508a:	d109      	bne.n	80050a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	3b01      	subs	r3, #1
 800509a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d071      	beq.n	8005184 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b0c      	cmp	r3, #12
 80050a4:	d068      	beq.n	8005178 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050a6:	4b35      	ldr	r3, [pc, #212]	; (800517c <HAL_RCC_OscConfig+0x784>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050b2:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCC_OscConfig+0x784>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0ac      	b.n	800521c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <HAL_RCC_OscConfig+0x784>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2d      	ldr	r2, [pc, #180]	; (800517c <HAL_RCC_OscConfig+0x784>)
 80050c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050ce:	f7fd ff5f 	bl	8002f90 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fd ff5b 	bl	8002f90 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e099      	b.n	800521c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e8:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_OscConfig+0x784>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f4:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_RCC_OscConfig+0x784>)
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	4b21      	ldr	r3, [pc, #132]	; (8005180 <HAL_RCC_OscConfig+0x788>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005104:	3a01      	subs	r2, #1
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	4311      	orrs	r1, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800510e:	0212      	lsls	r2, r2, #8
 8005110:	4311      	orrs	r1, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005116:	0852      	lsrs	r2, r2, #1
 8005118:	3a01      	subs	r2, #1
 800511a:	0552      	lsls	r2, r2, #21
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005122:	0852      	lsrs	r2, r2, #1
 8005124:	3a01      	subs	r2, #1
 8005126:	0652      	lsls	r2, r2, #25
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800512e:	06d2      	lsls	r2, r2, #27
 8005130:	430a      	orrs	r2, r1
 8005132:	4912      	ldr	r1, [pc, #72]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8005134:	4313      	orrs	r3, r2
 8005136:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005138:	4b10      	ldr	r3, [pc, #64]	; (800517c <HAL_RCC_OscConfig+0x784>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a0f      	ldr	r2, [pc, #60]	; (800517c <HAL_RCC_OscConfig+0x784>)
 800513e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005142:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005144:	4b0d      	ldr	r3, [pc, #52]	; (800517c <HAL_RCC_OscConfig+0x784>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a0c      	ldr	r2, [pc, #48]	; (800517c <HAL_RCC_OscConfig+0x784>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005150:	f7fd ff1e 	bl	8002f90 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd ff1a 	bl	8002f90 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e058      	b.n	800521c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	4b04      	ldr	r3, [pc, #16]	; (800517c <HAL_RCC_OscConfig+0x784>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005176:	e050      	b.n	800521a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e04f      	b.n	800521c <HAL_RCC_OscConfig+0x824>
 800517c:	40021000 	.word	0x40021000
 8005180:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d144      	bne.n	800521a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005190:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 8005196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a20      	ldr	r2, [pc, #128]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 80051a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051a8:	f7fd fef2 	bl	8002f90 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd feee 	bl	8002f90 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e02c      	b.n	800521c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c2:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x7b8>
 80051ce:	e024      	b.n	800521a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d01f      	beq.n	8005216 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b13      	ldr	r3, [pc, #76]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 80051dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fd fed5 	bl	8002f90 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ea:	f7fd fed1 	bl	8002f90 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e00f      	b.n	800521c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f0      	bne.n	80051ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	4905      	ldr	r1, [pc, #20]	; (8005224 <HAL_RCC_OscConfig+0x82c>)
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_RCC_OscConfig+0x830>)
 8005210:	4013      	ands	r3, r2
 8005212:	60cb      	str	r3, [r1, #12]
 8005214:	e001      	b.n	800521a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	feeefffc 	.word	0xfeeefffc

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e11d      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b90      	ldr	r3, [pc, #576]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d910      	bls.n	8005274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b8d      	ldr	r3, [pc, #564]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 020f 	bic.w	r2, r3, #15
 800525a:	498b      	ldr	r1, [pc, #556]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b89      	ldr	r3, [pc, #548]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e105      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d010      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	4b81      	ldr	r3, [pc, #516]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528c:	429a      	cmp	r2, r3
 800528e:	d908      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b7e      	ldr	r3, [pc, #504]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	497b      	ldr	r1, [pc, #492]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d079      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d11e      	bne.n	80052f4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b6:	4b75      	ldr	r3, [pc, #468]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e0dc      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80052c6:	f000 fa09 	bl	80056dc <RCC_GetSysClockFreqFromPLLSource>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4a70      	ldr	r2, [pc, #448]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d946      	bls.n	8005360 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052d2:	4b6e      	ldr	r3, [pc, #440]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d140      	bne.n	8005360 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052de:	4b6b      	ldr	r3, [pc, #428]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	4a69      	ldr	r2, [pc, #420]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80052e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e035      	b.n	8005360 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d107      	bne.n	800530c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052fc:	4b63      	ldr	r3, [pc, #396]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d115      	bne.n	8005334 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0b9      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d107      	bne.n	8005324 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005314:	4b5d      	ldr	r3, [pc, #372]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0ad      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005324:	4b59      	ldr	r3, [pc, #356]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0a5      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005334:	f000 f8b4 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8005338:	4603      	mov	r3, r0
 800533a:	4a55      	ldr	r2, [pc, #340]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d90f      	bls.n	8005360 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005340:	4b52      	ldr	r3, [pc, #328]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800534c:	4b4f      	ldr	r3, [pc, #316]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005354:	4a4d      	ldr	r2, [pc, #308]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005360:	4b4a      	ldr	r3, [pc, #296]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 0203 	bic.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	4947      	ldr	r1, [pc, #284]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fd fe0d 	bl	8002f90 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005378:	e00a      	b.n	8005390 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537a:	f7fd fe09 	bl	8002f90 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f241 3288 	movw	r2, #5000	; 0x1388
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e077      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005390:	4b3e      	ldr	r3, [pc, #248]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 020c 	and.w	r2, r3, #12
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	429a      	cmp	r2, r3
 80053a0:	d1eb      	bne.n	800537a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d105      	bne.n	80053b4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053a8:	4b38      	ldr	r3, [pc, #224]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4a37      	ldr	r2, [pc, #220]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b31      	ldr	r3, [pc, #196]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d208      	bcs.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	492b      	ldr	r1, [pc, #172]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d210      	bcs.n	8005412 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f0:	4b25      	ldr	r3, [pc, #148]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 020f 	bic.w	r2, r3, #15
 80053f8:	4923      	ldr	r1, [pc, #140]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005400:	4b21      	ldr	r3, [pc, #132]	; (8005488 <HAL_RCC_ClockConfig+0x25c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d001      	beq.n	8005412 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e036      	b.n	8005480 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4918      	ldr	r1, [pc, #96]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4910      	ldr	r1, [pc, #64]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800544c:	4313      	orrs	r3, r2
 800544e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005450:	f000 f826 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	490c      	ldr	r1, [pc, #48]	; (8005494 <HAL_RCC_ClockConfig+0x268>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <HAL_RCC_ClockConfig+0x26c>)
 800546e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x270>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7fd fd3b 	bl	8002ef0 <HAL_InitTick>
 800547a:	4603      	mov	r3, r0
 800547c:	73fb      	strb	r3, [r7, #15]

  return status;
 800547e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40022000 	.word	0x40022000
 800548c:	40021000 	.word	0x40021000
 8005490:	04c4b400 	.word	0x04c4b400
 8005494:	0800c26c 	.word	0x0800c26c
 8005498:	20000000 	.word	0x20000000
 800549c:	20000004 	.word	0x20000004

080054a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	; 0x24
 80054a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	2300      	movs	r3, #0
 80054ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ae:	4b3e      	ldr	r3, [pc, #248]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b8:	4b3b      	ldr	r3, [pc, #236]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x34>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d121      	bne.n	8005512 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d11e      	bne.n	8005512 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054d4:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054e0:	4b31      	ldr	r3, [pc, #196]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	e005      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054f0:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054fc:	4a2b      	ldr	r2, [pc, #172]	; (80055ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005504:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10d      	bne.n	8005528 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005510:	e00a      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d102      	bne.n	800551e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005518:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800551a:	61bb      	str	r3, [r7, #24]
 800551c:	e004      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b08      	cmp	r3, #8
 8005522:	d101      	bne.n	8005528 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005524:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005526:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d134      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800552e:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d003      	beq.n	8005546 <HAL_RCC_GetSysClockFreq+0xa6>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d003      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0xac>
 8005544:	e005      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005546:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005548:	617b      	str	r3, [r7, #20]
      break;
 800554a:	e005      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800554c:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800554e:	617b      	str	r3, [r7, #20]
      break;
 8005550:	e002      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	617b      	str	r3, [r7, #20]
      break;
 8005556:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	3301      	adds	r3, #1
 8005564:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	0a1b      	lsrs	r3, r3, #8
 800556c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	fb03 f202 	mul.w	r2, r3, r2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	0e5b      	lsrs	r3, r3, #25
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	3301      	adds	r3, #1
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	fbb2 f3f3 	udiv	r3, r2, r3
 8005596:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005598:	69bb      	ldr	r3, [r7, #24]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3724      	adds	r7, #36	; 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
 80055ac:	0800c284 	.word	0x0800c284
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	007a1200 	.word	0x007a1200

080055b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055bc:	4b03      	ldr	r3, [pc, #12]	; (80055cc <HAL_RCC_GetHCLKFreq+0x14>)
 80055be:	681b      	ldr	r3, [r3, #0]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000000 	.word	0x20000000

080055d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055d4:	f7ff fff0 	bl	80055b8 <HAL_RCC_GetHCLKFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	4904      	ldr	r1, [pc, #16]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40021000 	.word	0x40021000
 80055f8:	0800c27c 	.word	0x0800c27c

080055fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005600:	f7ff ffda 	bl	80055b8 <HAL_RCC_GetHCLKFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0adb      	lsrs	r3, r3, #11
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4904      	ldr	r1, [pc, #16]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	0800c27c 	.word	0x0800c27c

08005628 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005634:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005640:	f7ff f906 	bl	8004850 <HAL_PWREx_GetVoltageRange>
 8005644:	6178      	str	r0, [r7, #20]
 8005646:	e014      	b.n	8005672 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005648:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	4a21      	ldr	r2, [pc, #132]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005652:	6593      	str	r3, [r2, #88]	; 0x58
 8005654:	4b1f      	ldr	r3, [pc, #124]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005660:	f7ff f8f6 	bl	8004850 <HAL_PWREx_GetVoltageRange>
 8005664:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	4a1a      	ldr	r2, [pc, #104]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800566c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005670:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005678:	d10b      	bne.n	8005692 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b80      	cmp	r3, #128	; 0x80
 800567e:	d913      	bls.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2ba0      	cmp	r3, #160	; 0xa0
 8005684:	d902      	bls.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005686:	2302      	movs	r3, #2
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	e00d      	b.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800568c:	2301      	movs	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e00a      	b.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b7f      	cmp	r3, #127	; 0x7f
 8005696:	d902      	bls.n	800569e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005698:	2302      	movs	r3, #2
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	e004      	b.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b70      	cmp	r3, #112	; 0x70
 80056a2:	d101      	bne.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056a4:	2301      	movs	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f023 020f 	bic.w	r2, r3, #15
 80056b0:	4909      	ldr	r1, [pc, #36]	; (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d001      	beq.n	80056ca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40022000 	.word	0x40022000

080056dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056e2:	4b2d      	ldr	r3, [pc, #180]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d00b      	beq.n	800570a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d825      	bhi.n	8005744 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d008      	beq.n	8005710 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d11f      	bne.n	8005744 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005706:	613b      	str	r3, [r7, #16]
    break;
 8005708:	e01f      	b.n	800574a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800570a:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800570c:	613b      	str	r3, [r7, #16]
    break;
 800570e:	e01c      	b.n	800574a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005710:	4b21      	ldr	r3, [pc, #132]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d107      	bne.n	800572c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800571c:	4b1e      	ldr	r3, [pc, #120]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800571e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e005      	b.n	8005738 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005738:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005740:	613b      	str	r3, [r7, #16]
    break;
 8005742:	e002      	b.n	800574a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
    break;
 8005748:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	3301      	adds	r3, #1
 8005756:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	fb03 f202 	mul.w	r2, r3, r2
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	0e5b      	lsrs	r3, r3, #25
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	3301      	adds	r3, #1
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800578a:	683b      	ldr	r3, [r7, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40021000 	.word	0x40021000
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	007a1200 	.word	0x007a1200
 80057a4:	0800c284 	.word	0x0800c284

080057a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057b0:	2300      	movs	r3, #0
 80057b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057b4:	2300      	movs	r3, #0
 80057b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d040      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d02a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d825      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057d0:	2b60      	cmp	r3, #96	; 0x60
 80057d2:	d026      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057d4:	2b60      	cmp	r3, #96	; 0x60
 80057d6:	d821      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d006      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d81d      	bhi.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d010      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80057e8:	e018      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057ea:	4b89      	ldr	r3, [pc, #548]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	4a88      	ldr	r2, [pc, #544]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057f6:	e015      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fa34 	bl	8006c6c <RCCEx_PLLSAI1_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005808:	e00c      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3320      	adds	r3, #32
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fb1f 	bl	8006e54 <RCCEx_PLLSAI2_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800581a:	e003      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	74fb      	strb	r3, [r7, #19]
      break;
 8005820:	e000      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800582a:	4b79      	ldr	r3, [pc, #484]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005830:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005838:	4975      	ldr	r1, [pc, #468]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005840:	e001      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005842:	7cfb      	ldrb	r3, [r7, #19]
 8005844:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d047      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585a:	d030      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800585c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005860:	d82a      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005866:	d02a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800586c:	d824      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800586e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005872:	d008      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005878:	d81e      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	d010      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005884:	e018      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005886:	4b62      	ldr	r3, [pc, #392]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	4a61      	ldr	r2, [pc, #388]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005890:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005892:	e015      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f001 f9e6 	bl	8006c6c <RCCEx_PLLSAI1_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058a4:	e00c      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3320      	adds	r3, #32
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fad1 	bl	8006e54 <RCCEx_PLLSAI2_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058b6:	e003      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	74fb      	strb	r3, [r7, #19]
      break;
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80058be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c0:	7cfb      	ldrb	r3, [r7, #19]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058c6:	4b52      	ldr	r3, [pc, #328]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	494e      	ldr	r1, [pc, #312]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80058dc:	e001      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058de:	7cfb      	ldrb	r3, [r7, #19]
 80058e0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 809f 	beq.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f0:	2300      	movs	r3, #0
 80058f2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800590a:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	4a40      	ldr	r2, [pc, #256]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6593      	str	r3, [r2, #88]	; 0x58
 8005916:	4b3e      	ldr	r3, [pc, #248]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005922:	2301      	movs	r3, #1
 8005924:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3a      	ldr	r2, [pc, #232]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005930:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005932:	f7fd fb2d 	bl	8002f90 <HAL_GetTick>
 8005936:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005938:	e009      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593a:	f7fd fb29 	bl	8002f90 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d902      	bls.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	74fb      	strb	r3, [r7, #19]
        break;
 800594c:	e005      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0ef      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d15b      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005960:	4b2b      	ldr	r3, [pc, #172]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01f      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d019      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800598a:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005990:	4a1f      	ldr	r2, [pc, #124]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800599a:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059aa:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d016      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059bc:	f7fd fae8 	bl	8002f90 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c2:	e00b      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c4:	f7fd fae4 	bl	8002f90 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d902      	bls.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	74fb      	strb	r3, [r7, #19]
            break;
 80059da:	e006      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0ec      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10c      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a00:	4903      	ldr	r1, [pc, #12]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a08:	e008      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	74bb      	strb	r3, [r7, #18]
 8005a0e:	e005      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	7cfb      	ldrb	r3, [r7, #19]
 8005a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a1c:	7c7b      	ldrb	r3, [r7, #17]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d105      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a22:	4ba0      	ldr	r3, [pc, #640]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a26:	4a9f      	ldr	r2, [pc, #636]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a3a:	4b9a      	ldr	r3, [pc, #616]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f023 0203 	bic.w	r2, r3, #3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	4996      	ldr	r1, [pc, #600]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a5c:	4b91      	ldr	r3, [pc, #580]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f023 020c 	bic.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	498e      	ldr	r1, [pc, #568]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a7e:	4b89      	ldr	r3, [pc, #548]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	4985      	ldr	r1, [pc, #532]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005aa0:	4b80      	ldr	r3, [pc, #512]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aae:	497d      	ldr	r1, [pc, #500]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ac2:	4b78      	ldr	r3, [pc, #480]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad0:	4974      	ldr	r1, [pc, #464]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ae4:	4b6f      	ldr	r3, [pc, #444]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	496c      	ldr	r1, [pc, #432]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b06:	4b67      	ldr	r3, [pc, #412]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b14:	4963      	ldr	r1, [pc, #396]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b28:	4b5e      	ldr	r3, [pc, #376]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b36:	495b      	ldr	r1, [pc, #364]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b4a:	4b56      	ldr	r3, [pc, #344]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	4952      	ldr	r1, [pc, #328]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	494a      	ldr	r1, [pc, #296]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b8e:	4b45      	ldr	r3, [pc, #276]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9c:	4941      	ldr	r1, [pc, #260]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bb0:	4b3c      	ldr	r3, [pc, #240]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bb6:	f023 0203 	bic.w	r2, r3, #3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	4939      	ldr	r1, [pc, #228]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d028      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bd2:	4b34      	ldr	r3, [pc, #208]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	4930      	ldr	r1, [pc, #192]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bf0:	d106      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf2:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	4a2b      	ldr	r2, [pc, #172]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bfc:	60d3      	str	r3, [r2, #12]
 8005bfe:	e011      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 f82b 	bl	8006c6c <RCCEx_PLLSAI1_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c1a:	7cfb      	ldrb	r3, [r7, #19]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005c20:	7cfb      	ldrb	r3, [r7, #19]
 8005c22:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d04d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c38:	d108      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c40:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c46:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c4a:	e012      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005c4c:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c52:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c5c:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6a:	490e      	ldr	r1, [pc, #56]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c7c:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c86:	60d3      	str	r3, [r2, #12]
 8005c88:	e020      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c92:	d109      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	4a02      	ldr	r2, [pc, #8]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9e:	60d3      	str	r3, [r2, #12]
 8005ca0:	e014      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 ffd7 	bl	8006c6c <RCCEx_PLLSAI1_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d028      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cd8:	4b4a      	ldr	r3, [pc, #296]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce6:	4947      	ldr	r1, [pc, #284]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf8:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4a41      	ldr	r2, [pc, #260]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d02:	60d3      	str	r3, [r2, #12]
 8005d04:	e011      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d0e:	d10c      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	2101      	movs	r1, #1
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 ffa8 	bl	8006c6c <RCCEx_PLLSAI1_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d20:	7cfb      	ldrb	r3, [r7, #19]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01e      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d36:	4b33      	ldr	r3, [pc, #204]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d46:	492f      	ldr	r1, [pc, #188]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d58:	d10c      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	2102      	movs	r1, #2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 ff83 	bl	8006c6c <RCCEx_PLLSAI1_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d6a:	7cfb      	ldrb	r3, [r7, #19]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d80:	4b20      	ldr	r3, [pc, #128]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d86:	f023 0204 	bic.w	r2, r3, #4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d90:	491c      	ldr	r1, [pc, #112]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005da4:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005daa:	f023 0218 	bic.w	r2, r3, #24
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	4913      	ldr	r1, [pc, #76]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dd8:	490a      	ldr	r1, [pc, #40]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dea:	d105      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a04      	ldr	r2, [pc, #16]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005df8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000

08005e08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e1a:	d13e      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e1c:	4bb6      	ldr	r3, [pc, #728]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e2e:	d028      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e36:	f200 86f4 	bhi.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e40:	d005      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d00e      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005e4a:	f000 beea 	b.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e4e:	4baa      	ldr	r3, [pc, #680]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f040 86e4 	bne.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	61fb      	str	r3, [r7, #28]
      break;
 8005e64:	f000 bedf 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e68:	4ba3      	ldr	r3, [pc, #652]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	f040 86d9 	bne.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005e78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e7c:	61fb      	str	r3, [r7, #28]
      break;
 8005e7e:	f000 bed4 	b.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e82:	4b9d      	ldr	r3, [pc, #628]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e8e:	f040 86ce 	bne.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005e92:	4b9a      	ldr	r3, [pc, #616]	; (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005e94:	61fb      	str	r3, [r7, #28]
      break;
 8005e96:	f000 beca 	b.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e9a:	4b97      	ldr	r3, [pc, #604]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d036      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d840      	bhi.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d020      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005ebc:	e039      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ebe:	4b8e      	ldr	r3, [pc, #568]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d116      	bne.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005eca:	4b8b      	ldr	r3, [pc, #556]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005ed6:	4b88      	ldr	r3, [pc, #544]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	e005      	b.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005ee2:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	4a84      	ldr	r2, [pc, #528]	; (8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005ef6:	e01f      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
      break;
 8005efc:	e01c      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005efe:	4b7e      	ldr	r3, [pc, #504]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0a:	d102      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005f0c:	4b7d      	ldr	r3, [pc, #500]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005f0e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f10:	e012      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
      break;
 8005f16:	e00f      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f18:	4b77      	ldr	r3, [pc, #476]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f24:	d102      	bne.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005f26:	4b78      	ldr	r3, [pc, #480]	; (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005f28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61bb      	str	r3, [r7, #24]
      break;
 8005f36:	bf00      	nop
    }

    switch(PeriphClk)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f3e:	f000 8606 	beq.w	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f48:	f200 8673 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f52:	f000 8469 	beq.w	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f5c:	f200 8669 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	f000 8531 	beq.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f70:	f200 865f 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f7a:	f000 8187 	beq.w	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f84:	f200 8655 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f8e:	f000 80cd 	beq.w	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f98:	f200 864b 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa2:	f000 8430 	beq.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fac:	f200 8641 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb6:	f000 83e4 	beq.w	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc0:	f200 8637 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fca:	f000 80af 	beq.w	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd4:	f200 862d 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fde:	f000 809d 	beq.w	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	f200 8623 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff2:	f000 808b 	beq.w	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffc:	f200 8619 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006006:	f000 8554 	beq.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006010:	f200 860f 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800601a:	f000 8500 	beq.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006024:	f200 8605 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	f000 84a1 	beq.w	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006038:	f200 85fb 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	f000 846c 	beq.w	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	f200 85f3 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b20      	cmp	r3, #32
 8006050:	d84c      	bhi.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 85ec 	beq.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3b01      	subs	r3, #1
 800605e:	2b1f      	cmp	r3, #31
 8006060:	f200 85e7 	bhi.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	08006481 	.word	0x08006481
 8006070:	080064ef 	.word	0x080064ef
 8006074:	08006c33 	.word	0x08006c33
 8006078:	08006583 	.word	0x08006583
 800607c:	08006c33 	.word	0x08006c33
 8006080:	08006c33 	.word	0x08006c33
 8006084:	08006c33 	.word	0x08006c33
 8006088:	080065fb 	.word	0x080065fb
 800608c:	08006c33 	.word	0x08006c33
 8006090:	08006c33 	.word	0x08006c33
 8006094:	08006c33 	.word	0x08006c33
 8006098:	08006c33 	.word	0x08006c33
 800609c:	08006c33 	.word	0x08006c33
 80060a0:	08006c33 	.word	0x08006c33
 80060a4:	08006c33 	.word	0x08006c33
 80060a8:	0800667f 	.word	0x0800667f
 80060ac:	08006c33 	.word	0x08006c33
 80060b0:	08006c33 	.word	0x08006c33
 80060b4:	08006c33 	.word	0x08006c33
 80060b8:	08006c33 	.word	0x08006c33
 80060bc:	08006c33 	.word	0x08006c33
 80060c0:	08006c33 	.word	0x08006c33
 80060c4:	08006c33 	.word	0x08006c33
 80060c8:	08006c33 	.word	0x08006c33
 80060cc:	08006c33 	.word	0x08006c33
 80060d0:	08006c33 	.word	0x08006c33
 80060d4:	08006c33 	.word	0x08006c33
 80060d8:	08006c33 	.word	0x08006c33
 80060dc:	08006c33 	.word	0x08006c33
 80060e0:	08006c33 	.word	0x08006c33
 80060e4:	08006c33 	.word	0x08006c33
 80060e8:	08006701 	.word	0x08006701
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	f000 83e8 	beq.w	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80060f4:	f000 bd9d 	b.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80060f8:	40021000 	.word	0x40021000
 80060fc:	0003d090 	.word	0x0003d090
 8006100:	0800c284 	.word	0x0800c284
 8006104:	00f42400 	.word	0x00f42400
 8006108:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800610c:	69b9      	ldr	r1, [r7, #24]
 800610e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006112:	f000 ff93 	bl	800703c <RCCEx_GetSAIxPeriphCLKFreq>
 8006116:	61f8      	str	r0, [r7, #28]
      break;
 8006118:	f000 bd8e 	b.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800611c:	69b9      	ldr	r1, [r7, #24]
 800611e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006122:	f000 ff8b 	bl	800703c <RCCEx_GetSAIxPeriphCLKFreq>
 8006126:	61f8      	str	r0, [r7, #28]
      break;
 8006128:	f000 bd86 	b.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800612c:	4b9a      	ldr	r3, [pc, #616]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800613e:	d015      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006146:	f200 8092 	bhi.w	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006150:	d029      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006158:	f200 8089 	bhi.w	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d07b      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006168:	d04a      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800616a:	e080      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800616c:	4b8a      	ldr	r3, [pc, #552]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d17d      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006178:	4b87      	ldr	r3, [pc, #540]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8006184:	4b84      	ldr	r3, [pc, #528]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	e005      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006190:	4b81      	ldr	r3, [pc, #516]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	4a7f      	ldr	r2, [pc, #508]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800619e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a2:	61fb      	str	r3, [r7, #28]
          break;
 80061a4:	e066      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061a6:	4b7c      	ldr	r3, [pc, #496]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061b2:	d162      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80061b4:	4b78      	ldr	r3, [pc, #480]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c0:	d15b      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061c2:	4b75      	ldr	r3, [pc, #468]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061cc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	fb03 f202 	mul.w	r2, r3, r2
 80061d6:	4b70      	ldr	r3, [pc, #448]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	091b      	lsrs	r3, r3, #4
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	3301      	adds	r3, #1
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80061e8:	4b6b      	ldr	r3, [pc, #428]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	0d5b      	lsrs	r3, r3, #21
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	3301      	adds	r3, #1
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	61fb      	str	r3, [r7, #28]
          break;
 80061fe:	e03c      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006200:	4b65      	ldr	r3, [pc, #404]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800620c:	d138      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800620e:	4b62      	ldr	r3, [pc, #392]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621a:	d131      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800621c:	4b5e      	ldr	r3, [pc, #376]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006226:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	fb03 f202 	mul.w	r2, r3, r2
 8006230:	4b59      	ldr	r3, [pc, #356]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	3301      	adds	r3, #1
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006242:	4b55      	ldr	r3, [pc, #340]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	0d5b      	lsrs	r3, r3, #21
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	3301      	adds	r3, #1
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	61fb      	str	r3, [r7, #28]
          break;
 8006258:	e012      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800625a:	4b4f      	ldr	r3, [pc, #316]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800625c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b02      	cmp	r3, #2
 8006266:	d10e      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8006268:	4b4d      	ldr	r3, [pc, #308]	; (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800626a:	61fb      	str	r3, [r7, #28]
          break;
 800626c:	e00b      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800626e:	bf00      	nop
 8006270:	f000 bce2 	b.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006274:	bf00      	nop
 8006276:	f000 bcdf 	b.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800627a:	bf00      	nop
 800627c:	f000 bcdc 	b.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006280:	bf00      	nop
 8006282:	f000 bcd9 	b.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006286:	bf00      	nop
        break;
 8006288:	f000 bcd6 	b.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800628c:	4b42      	ldr	r3, [pc, #264]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800628e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629a:	d13d      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800629c:	4b3e      	ldr	r3, [pc, #248]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062a8:	f040 84c5 	bne.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80062ac:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	f040 84bd 	bne.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062bc:	4b36      	ldr	r3, [pc, #216]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	0a1b      	lsrs	r3, r3, #8
 80062c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	fb03 f202 	mul.w	r2, r3, r2
 80062d0:	4b31      	ldr	r3, [pc, #196]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	3301      	adds	r3, #1
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80062e2:	4b2d      	ldr	r3, [pc, #180]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	0edb      	lsrs	r3, r3, #27
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80062f4:	4b28      	ldr	r3, [pc, #160]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8006300:	2311      	movs	r3, #17
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e001      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8006306:	2307      	movs	r3, #7
 8006308:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006312:	61fb      	str	r3, [r7, #28]
      break;
 8006314:	f000 bc8f 	b.w	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006318:	4b1f      	ldr	r3, [pc, #124]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800632a:	d016      	beq.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006332:	f200 809b 	bhi.w	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800633c:	d032      	beq.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006344:	f200 8092 	bhi.w	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8084 	beq.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006356:	d052      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8006358:	e088      	b.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800635a:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b02      	cmp	r3, #2
 8006364:	f040 8084 	bne.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006368:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006374:	4b08      	ldr	r3, [pc, #32]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	e005      	b.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	4a03      	ldr	r2, [pc, #12]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800638e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006392:	61fb      	str	r3, [r7, #28]
          break;
 8006394:	e06c      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8006396:	bf00      	nop
 8006398:	40021000 	.word	0x40021000
 800639c:	0800c284 	.word	0x0800c284
 80063a0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063a4:	4ba5      	ldr	r3, [pc, #660]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063b0:	d160      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80063b2:	4ba2      	ldr	r3, [pc, #648]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063be:	d159      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063c0:	4b9e      	ldr	r3, [pc, #632]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	0a1b      	lsrs	r3, r3, #8
 80063c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ca:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	fb03 f202 	mul.w	r2, r3, r2
 80063d4:	4b99      	ldr	r3, [pc, #612]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	3301      	adds	r3, #1
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80063e6:	4b95      	ldr	r3, [pc, #596]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	0d5b      	lsrs	r3, r3, #21
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	3301      	adds	r3, #1
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	61fb      	str	r3, [r7, #28]
          break;
 80063fc:	e03a      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80063fe:	4b8f      	ldr	r3, [pc, #572]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800640a:	d135      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800640c:	4b8b      	ldr	r3, [pc, #556]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006418:	d12e      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800641a:	4b88      	ldr	r3, [pc, #544]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	fb03 f202 	mul.w	r2, r3, r2
 800642e:	4b83      	ldr	r3, [pc, #524]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	3301      	adds	r3, #1
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006440:	4b7e      	ldr	r3, [pc, #504]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	0d5b      	lsrs	r3, r3, #21
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	3301      	adds	r3, #1
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	61fb      	str	r3, [r7, #28]
          break;
 8006456:	e00f      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006458:	4b78      	ldr	r3, [pc, #480]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800645a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b02      	cmp	r3, #2
 8006464:	d10a      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8006466:	4b76      	ldr	r3, [pc, #472]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006468:	61fb      	str	r3, [r7, #28]
          break;
 800646a:	e007      	b.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800646c:	bf00      	nop
 800646e:	e3e2      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006470:	bf00      	nop
 8006472:	e3e0      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006474:	bf00      	nop
 8006476:	e3de      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006478:	bf00      	nop
 800647a:	e3dc      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800647c:	bf00      	nop
      break;
 800647e:	e3da      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006480:	4b6e      	ldr	r3, [pc, #440]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b03      	cmp	r3, #3
 8006490:	d827      	bhi.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064a9 	.word	0x080064a9
 800649c:	080064b1 	.word	0x080064b1
 80064a0:	080064b9 	.word	0x080064b9
 80064a4:	080064cd 	.word	0x080064cd
          frequency = HAL_RCC_GetPCLK2Freq();
 80064a8:	f7ff f8a8 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 80064ac:	61f8      	str	r0, [r7, #28]
          break;
 80064ae:	e01d      	b.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80064b0:	f7fe fff6 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80064b4:	61f8      	str	r0, [r7, #28]
          break;
 80064b6:	e019      	b.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064b8:	4b60      	ldr	r3, [pc, #384]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c4:	d10f      	bne.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 80064c6:	4b5f      	ldr	r3, [pc, #380]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064c8:	61fb      	str	r3, [r7, #28]
          break;
 80064ca:	e00c      	b.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064cc:	4b5b      	ldr	r3, [pc, #364]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d107      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064de:	61fb      	str	r3, [r7, #28]
          break;
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80064e2:	bf00      	nop
 80064e4:	e3a8      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064e6:	bf00      	nop
 80064e8:	e3a6      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064ea:	bf00      	nop
        break;
 80064ec:	e3a4      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80064ee:	4b53      	ldr	r3, [pc, #332]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f003 030c 	and.w	r3, r3, #12
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d83a      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800653d 	.word	0x0800653d
 800650c:	08006577 	.word	0x08006577
 8006510:	08006577 	.word	0x08006577
 8006514:	08006577 	.word	0x08006577
 8006518:	08006545 	.word	0x08006545
 800651c:	08006577 	.word	0x08006577
 8006520:	08006577 	.word	0x08006577
 8006524:	08006577 	.word	0x08006577
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006577 	.word	0x08006577
 8006530:	08006577 	.word	0x08006577
 8006534:	08006577 	.word	0x08006577
 8006538:	08006561 	.word	0x08006561
          frequency = HAL_RCC_GetPCLK1Freq();
 800653c:	f7ff f848 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8006540:	61f8      	str	r0, [r7, #28]
          break;
 8006542:	e01d      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006544:	f7fe ffac 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006548:	61f8      	str	r0, [r7, #28]
          break;
 800654a:	e019      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800654c:	4b3b      	ldr	r3, [pc, #236]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006558:	d10f      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800655a:	4b3a      	ldr	r3, [pc, #232]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800655c:	61fb      	str	r3, [r7, #28]
          break;
 800655e:	e00c      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006560:	4b36      	ldr	r3, [pc, #216]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b02      	cmp	r3, #2
 800656c:	d107      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	61fb      	str	r3, [r7, #28]
          break;
 8006574:	e003      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8006576:	bf00      	nop
 8006578:	e35e      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800657a:	bf00      	nop
 800657c:	e35c      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800657e:	bf00      	nop
        break;
 8006580:	e35a      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006582:	4b2e      	ldr	r3, [pc, #184]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006588:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b30      	cmp	r3, #48	; 0x30
 8006592:	d021      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b30      	cmp	r3, #48	; 0x30
 8006598:	d829      	bhi.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b20      	cmp	r3, #32
 800659e:	d011      	beq.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d823      	bhi.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b10      	cmp	r3, #16
 80065b0:	d004      	beq.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80065b2:	e01c      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7ff f80c 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 80065b8:	61f8      	str	r0, [r7, #28]
          break;
 80065ba:	e01d      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80065bc:	f7fe ff70 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80065c0:	61f8      	str	r0, [r7, #28]
          break;
 80065c2:	e019      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c4:	4b1d      	ldr	r3, [pc, #116]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d10f      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065d4:	61fb      	str	r3, [r7, #28]
          break;
 80065d6:	e00c      	b.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065d8:	4b18      	ldr	r3, [pc, #96]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d107      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80065e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ea:	61fb      	str	r3, [r7, #28]
          break;
 80065ec:	e003      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80065ee:	bf00      	nop
 80065f0:	e322      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065f2:	bf00      	nop
 80065f4:	e320      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065f6:	bf00      	nop
        break;
 80065f8:	e31e      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006600:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2bc0      	cmp	r3, #192	; 0xc0
 800660a:	d027      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2bc0      	cmp	r3, #192	; 0xc0
 8006610:	d82f      	bhi.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b80      	cmp	r3, #128	; 0x80
 8006616:	d017      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d829      	bhi.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d004      	beq.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800662a:	e022      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800662c:	f7fe ffd0 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8006630:	61f8      	str	r0, [r7, #28]
          break;
 8006632:	e023      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8006634:	f7fe ff34 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006638:	61f8      	str	r0, [r7, #28]
          break;
 800663a:	e01f      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800663c:	40021000 	.word	0x40021000
 8006640:	02dc6c00 	.word	0x02dc6c00
 8006644:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006648:	4b9b      	ldr	r3, [pc, #620]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006654:	d10f      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8006656:	4b99      	ldr	r3, [pc, #612]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006658:	61fb      	str	r3, [r7, #28]
          break;
 800665a:	e00c      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800665c:	4b96      	ldr	r3, [pc, #600]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d107      	bne.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800666a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800666e:	61fb      	str	r3, [r7, #28]
          break;
 8006670:	e003      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006672:	bf00      	nop
 8006674:	e2e0      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006676:	bf00      	nop
 8006678:	e2de      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800667a:	bf00      	nop
        break;
 800667c:	e2dc      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800667e:	4b8e      	ldr	r3, [pc, #568]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006690:	d025      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006698:	d82c      	bhi.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	d013      	beq.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a8:	d824      	bhi.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b6:	d004      	beq.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80066b8:	e01c      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066ba:	f7fe ff89 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 80066be:	61f8      	str	r0, [r7, #28]
          break;
 80066c0:	e01d      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80066c2:	f7fe feed 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80066c6:	61f8      	str	r0, [r7, #28]
          break;
 80066c8:	e019      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066ca:	4b7b      	ldr	r3, [pc, #492]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d6:	d10f      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80066d8:	4b78      	ldr	r3, [pc, #480]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80066da:	61fb      	str	r3, [r7, #28]
          break;
 80066dc:	e00c      	b.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066de:	4b76      	ldr	r3, [pc, #472]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d107      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80066ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f0:	61fb      	str	r3, [r7, #28]
          break;
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80066f4:	bf00      	nop
 80066f6:	e29f      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066f8:	bf00      	nop
 80066fa:	e29d      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066fc:	bf00      	nop
        break;
 80066fe:	e29b      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006700:	4b6d      	ldr	r3, [pc, #436]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006712:	d025      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800671a:	d82c      	bhi.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006722:	d013      	beq.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672a:	d824      	bhi.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006738:	d004      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800673a:	e01c      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fe ff48 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8006740:	61f8      	str	r0, [r7, #28]
          break;
 8006742:	e01d      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006744:	f7fe feac 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006748:	61f8      	str	r0, [r7, #28]
          break;
 800674a:	e019      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800674c:	4b5a      	ldr	r3, [pc, #360]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006758:	d10f      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800675a:	4b58      	ldr	r3, [pc, #352]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800675c:	61fb      	str	r3, [r7, #28]
          break;
 800675e:	e00c      	b.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006760:	4b55      	ldr	r3, [pc, #340]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d107      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800676e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006772:	61fb      	str	r3, [r7, #28]
          break;
 8006774:	e003      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8006776:	bf00      	nop
 8006778:	e25e      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800677a:	bf00      	nop
 800677c:	e25c      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800677e:	bf00      	nop
        break;
 8006780:	e25a      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006782:	4b4d      	ldr	r3, [pc, #308]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006794:	d007      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800679c:	d12f      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800679e:	f7fe fe7f 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80067a2:	61f8      	str	r0, [r7, #28]
          break;
 80067a4:	e02e      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80067a6:	4b44      	ldr	r3, [pc, #272]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b2:	d126      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80067b4:	4b40      	ldr	r3, [pc, #256]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d020      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067c0:	4b3d      	ldr	r3, [pc, #244]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ca:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	fb03 f202 	mul.w	r2, r3, r2
 80067d4:	4b38      	ldr	r3, [pc, #224]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	091b      	lsrs	r3, r3, #4
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	3301      	adds	r3, #1
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80067e6:	4b34      	ldr	r3, [pc, #208]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	0e5b      	lsrs	r3, r3, #25
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	3301      	adds	r3, #1
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fa:	61fb      	str	r3, [r7, #28]
          break;
 80067fc:	e001      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80067fe:	bf00      	nop
 8006800:	e21a      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006802:	bf00      	nop
        break;
 8006804:	e218      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006806:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006818:	f7fe fef0 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 800681c:	61f8      	str	r0, [r7, #28]
        break;
 800681e:	e20b      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8006820:	f7fe fe3e 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006824:	61f8      	str	r0, [r7, #28]
        break;
 8006826:	e207      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006828:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800682a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800682e:	f003 0318 	and.w	r3, r3, #24
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b10      	cmp	r3, #16
 8006838:	d010      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b10      	cmp	r3, #16
 800683e:	d834      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d024      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800684c:	e02d      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800684e:	69b9      	ldr	r1, [r7, #24]
 8006850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006854:	f000 fbf2 	bl	800703c <RCCEx_GetSAIxPeriphCLKFreq>
 8006858:	61f8      	str	r0, [r7, #28]
          break;
 800685a:	e02b      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800685c:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d122      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006874:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	091b      	lsrs	r3, r3, #4
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	e005      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006886:	0a1b      	lsrs	r3, r3, #8
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800688e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006892:	61fb      	str	r3, [r7, #28]
          break;
 8006894:	e00b      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800689e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a2:	d106      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80068a6:	61fb      	str	r3, [r7, #28]
          break;
 80068a8:	e003      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 80068aa:	bf00      	nop
 80068ac:	e1c4      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068ae:	bf00      	nop
 80068b0:	e1c2      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068b2:	bf00      	nop
        break;
 80068b4:	e1c0      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80068b6:	bf00      	nop
 80068b8:	40021000 	.word	0x40021000
 80068bc:	00f42400 	.word	0x00f42400
 80068c0:	0800c284 	.word	0x0800c284
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068c4:	4b96      	ldr	r3, [pc, #600]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d6:	d013      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068de:	d819      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ec:	d004      	beq.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80068ee:	e011      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fe fe6e 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 80068f4:	61f8      	str	r0, [r7, #28]
          break;
 80068f6:	e010      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80068f8:	f7fe fdd2 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80068fc:	61f8      	str	r0, [r7, #28]
          break;
 80068fe:	e00c      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006900:	4b87      	ldr	r3, [pc, #540]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690c:	d104      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800690e:	4b85      	ldr	r3, [pc, #532]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006910:	61fb      	str	r3, [r7, #28]
          break;
 8006912:	e001      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8006914:	bf00      	nop
 8006916:	e18f      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006918:	bf00      	nop
        break;
 800691a:	e18d      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800691c:	4b80      	ldr	r3, [pc, #512]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692e:	d013      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006936:	d819      	bhi.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006944:	d004      	beq.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8006946:	e011      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006948:	f7fe fe42 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 800694c:	61f8      	str	r0, [r7, #28]
          break;
 800694e:	e010      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006950:	f7fe fda6 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006954:	61f8      	str	r0, [r7, #28]
          break;
 8006956:	e00c      	b.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006958:	4b71      	ldr	r3, [pc, #452]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006964:	d104      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8006966:	4b6f      	ldr	r3, [pc, #444]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006968:	61fb      	str	r3, [r7, #28]
          break;
 800696a:	e001      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800696c:	bf00      	nop
 800696e:	e163      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006970:	bf00      	nop
        break;
 8006972:	e161      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006974:	4b6a      	ldr	r3, [pc, #424]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006986:	d013      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800698e:	d819      	bhi.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d004      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800699e:	e011      	b.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fe fe16 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 80069a4:	61f8      	str	r0, [r7, #28]
          break;
 80069a6:	e010      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 80069a8:	f7fe fd7a 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80069ac:	61f8      	str	r0, [r7, #28]
          break;
 80069ae:	e00c      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b0:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069bc:	d104      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 80069be:	4b59      	ldr	r3, [pc, #356]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80069c0:	61fb      	str	r3, [r7, #28]
          break;
 80069c2:	e001      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 80069c4:	bf00      	nop
 80069c6:	e137      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80069c8:	bf00      	nop
        break;
 80069ca:	e135      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80069cc:	4b54      	ldr	r3, [pc, #336]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d011      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d818      	bhi.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d004      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80069f0:	e011      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069f2:	f7fe fded 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 80069f6:	61f8      	str	r0, [r7, #28]
          break;
 80069f8:	e010      	b.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80069fa:	f7fe fd51 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 80069fe:	61f8      	str	r0, [r7, #28]
          break;
 8006a00:	e00c      	b.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a02:	4b47      	ldr	r3, [pc, #284]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0e:	d104      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8006a10:	4b44      	ldr	r3, [pc, #272]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a12:	61fb      	str	r3, [r7, #28]
          break;
 8006a14:	e001      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8006a16:	bf00      	nop
 8006a18:	e10e      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006a1a:	bf00      	nop
        break;
 8006a1c:	e10c      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006a1e:	4b40      	ldr	r3, [pc, #256]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a30:	d02c      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a38:	d833      	bhi.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a40:	d01a      	beq.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a48:	d82b      	bhi.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a56:	d004      	beq.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8006a58:	e023      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a5a:	f7fe fdb9 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8006a5e:	61f8      	str	r0, [r7, #28]
          break;
 8006a60:	e026      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a62:	4b2f      	ldr	r3, [pc, #188]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d11a      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006a70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a74:	61fb      	str	r3, [r7, #28]
          break;
 8006a76:	e016      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a78:	4b29      	ldr	r3, [pc, #164]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a84:	d111      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8006a86:	4b27      	ldr	r3, [pc, #156]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006a88:	61fb      	str	r3, [r7, #28]
          break;
 8006a8a:	e00e      	b.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d109      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	61fb      	str	r3, [r7, #28]
          break;
 8006aa0:	e005      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006aa2:	bf00      	nop
 8006aa4:	e0c8      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aa6:	bf00      	nop
 8006aa8:	e0c6      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aaa:	bf00      	nop
 8006aac:	e0c4      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006aae:	bf00      	nop
        break;
 8006ab0:	e0c2      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ac4:	d030      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006acc:	d837      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ad4:	d01a      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006adc:	d82f      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aea:	d004      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8006aec:	e027      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aee:	f7fe fd6f 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8006af2:	61f8      	str	r0, [r7, #28]
          break;
 8006af4:	e02a      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d11e      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8006b04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b08:	61fb      	str	r3, [r7, #28]
          break;
 8006b0a:	e01a      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b0c:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b18:	d115      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8006b1a:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006b1c:	61fb      	str	r3, [r7, #28]
          break;
 8006b1e:	e012      	b.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006b20:	40021000 	.word	0x40021000
 8006b24:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b28:	4b46      	ldr	r3, [pc, #280]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d109      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8006b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3a:	61fb      	str	r3, [r7, #28]
          break;
 8006b3c:	e005      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006b3e:	bf00      	nop
 8006b40:	e07a      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b42:	bf00      	nop
 8006b44:	e078      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b46:	bf00      	nop
 8006b48:	e076      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006b4a:	bf00      	nop
        break;
 8006b4c:	e074      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006b4e:	4b3d      	ldr	r3, [pc, #244]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b60:	d02c      	beq.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b68:	d855      	bhi.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b76:	d004      	beq.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8006b78:	e04d      	b.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fe fc91 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8006b7e:	61f8      	str	r0, [r7, #28]
          break;
 8006b80:	e04e      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b82:	4b30      	ldr	r3, [pc, #192]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d145      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b8e:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006b9a:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	091b      	lsrs	r3, r3, #4
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	e005      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8006ba6:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bac:	0a1b      	lsrs	r3, r3, #8
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb8:	61fb      	str	r3, [r7, #28]
          break;
 8006bba:	e02e      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006bbc:	4b21      	ldr	r3, [pc, #132]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bc8:	d129      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006bca:	4b1e      	ldr	r3, [pc, #120]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd6:	d122      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006bd8:	4b1a      	ldr	r3, [pc, #104]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	0a1b      	lsrs	r3, r3, #8
 8006bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	fb03 f202 	mul.w	r2, r3, r2
 8006bec:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006bfe:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	0d5b      	lsrs	r3, r3, #21
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	3301      	adds	r3, #1
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c12:	61fb      	str	r3, [r7, #28]
          break;
 8006c14:	e003      	b.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8006c16:	bf00      	nop
 8006c18:	e00e      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c1a:	bf00      	nop
 8006c1c:	e00c      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006c1e:	bf00      	nop
        break;
 8006c20:	e00a      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c22:	bf00      	nop
 8006c24:	e008      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c26:	bf00      	nop
 8006c28:	e006      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e004      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c2e:	bf00      	nop
 8006c30:	e002      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c32:	bf00      	nop
 8006c34:	e000      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8006c36:	bf00      	nop
    }
  }

  return(frequency);
 8006c38:	69fb      	ldr	r3, [r7, #28]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000
 8006c48:	0800c284 	.word	0x0800c284

08006c4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c56:	f043 0304 	orr.w	r3, r3, #4
 8006c5a:	6013      	str	r3, [r2, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40021000 	.word	0x40021000

08006c6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c7a:	4b72      	ldr	r3, [pc, #456]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c86:	4b6f      	ldr	r3, [pc, #444]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0203 	and.w	r2, r3, #3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d103      	bne.n	8006c9e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
       ||
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d142      	bne.n	8006d24 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	73fb      	strb	r3, [r7, #15]
 8006ca2:	e03f      	b.n	8006d24 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d018      	beq.n	8006cde <RCCEx_PLLSAI1_Config+0x72>
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d825      	bhi.n	8006cfc <RCCEx_PLLSAI1_Config+0x90>
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d002      	beq.n	8006cba <RCCEx_PLLSAI1_Config+0x4e>
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d009      	beq.n	8006ccc <RCCEx_PLLSAI1_Config+0x60>
 8006cb8:	e020      	b.n	8006cfc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cba:	4b62      	ldr	r3, [pc, #392]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11d      	bne.n	8006d02 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cca:	e01a      	b.n	8006d02 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ccc:	4b5d      	ldr	r3, [pc, #372]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d116      	bne.n	8006d06 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cdc:	e013      	b.n	8006d06 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cde:	4b59      	ldr	r3, [pc, #356]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10f      	bne.n	8006d0a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cea:	4b56      	ldr	r3, [pc, #344]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cfa:	e006      	b.n	8006d0a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006d00:	e004      	b.n	8006d0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d02:	bf00      	nop
 8006d04:	e002      	b.n	8006d0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d108      	bne.n	8006d24 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006d12:	4b4c      	ldr	r3, [pc, #304]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f023 0203 	bic.w	r2, r3, #3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4949      	ldr	r1, [pc, #292]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 8086 	bne.w	8006e38 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d2c:	4b45      	ldr	r3, [pc, #276]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a44      	ldr	r2, [pc, #272]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d38:	f7fc f92a 	bl	8002f90 <HAL_GetTick>
 8006d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d3e:	e009      	b.n	8006d54 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d40:	f7fc f926 	bl	8002f90 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d902      	bls.n	8006d54 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	73fb      	strb	r3, [r7, #15]
        break;
 8006d52:	e005      	b.n	8006d60 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d54:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1ef      	bne.n	8006d40 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d168      	bne.n	8006e38 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d113      	bne.n	8006d94 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d6c:	4b35      	ldr	r3, [pc, #212]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	4b35      	ldr	r3, [pc, #212]	; (8006e48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6892      	ldr	r2, [r2, #8]
 8006d78:	0211      	lsls	r1, r2, #8
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68d2      	ldr	r2, [r2, #12]
 8006d7e:	06d2      	lsls	r2, r2, #27
 8006d80:	4311      	orrs	r1, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6852      	ldr	r2, [r2, #4]
 8006d86:	3a01      	subs	r2, #1
 8006d88:	0112      	lsls	r2, r2, #4
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	492d      	ldr	r1, [pc, #180]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	610b      	str	r3, [r1, #16]
 8006d92:	e02d      	b.n	8006df0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d115      	bne.n	8006dc6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d9a:	4b2a      	ldr	r3, [pc, #168]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	4b2b      	ldr	r3, [pc, #172]	; (8006e4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6892      	ldr	r2, [r2, #8]
 8006da6:	0211      	lsls	r1, r2, #8
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6912      	ldr	r2, [r2, #16]
 8006dac:	0852      	lsrs	r2, r2, #1
 8006dae:	3a01      	subs	r2, #1
 8006db0:	0552      	lsls	r2, r2, #21
 8006db2:	4311      	orrs	r1, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6852      	ldr	r2, [r2, #4]
 8006db8:	3a01      	subs	r2, #1
 8006dba:	0112      	lsls	r2, r2, #4
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	4921      	ldr	r1, [pc, #132]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	610b      	str	r3, [r1, #16]
 8006dc4:	e014      	b.n	8006df0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dc6:	4b1f      	ldr	r3, [pc, #124]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	4b21      	ldr	r3, [pc, #132]	; (8006e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6892      	ldr	r2, [r2, #8]
 8006dd2:	0211      	lsls	r1, r2, #8
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6952      	ldr	r2, [r2, #20]
 8006dd8:	0852      	lsrs	r2, r2, #1
 8006dda:	3a01      	subs	r2, #1
 8006ddc:	0652      	lsls	r2, r2, #25
 8006dde:	4311      	orrs	r1, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6852      	ldr	r2, [r2, #4]
 8006de4:	3a01      	subs	r2, #1
 8006de6:	0112      	lsls	r2, r2, #4
 8006de8:	430a      	orrs	r2, r1
 8006dea:	4916      	ldr	r1, [pc, #88]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006df0:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfc:	f7fc f8c8 	bl	8002f90 <HAL_GetTick>
 8006e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e02:	e009      	b.n	8006e18 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e04:	f7fc f8c4 	bl	8002f90 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d902      	bls.n	8006e18 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	73fb      	strb	r3, [r7, #15]
          break;
 8006e16:	e005      	b.n	8006e24 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0ef      	beq.n	8006e04 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e2c:	691a      	ldr	r2, [r3, #16]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	4904      	ldr	r1, [pc, #16]	; (8006e44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40021000 	.word	0x40021000
 8006e48:	07ff800f 	.word	0x07ff800f
 8006e4c:	ff9f800f 	.word	0xff9f800f
 8006e50:	f9ff800f 	.word	0xf9ff800f

08006e54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e62:	4b72      	ldr	r3, [pc, #456]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00e      	beq.n	8006e8c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e6e:	4b6f      	ldr	r3, [pc, #444]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f003 0203 	and.w	r2, r3, #3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d103      	bne.n	8006e86 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
       ||
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d142      	bne.n	8006f0c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	73fb      	strb	r3, [r7, #15]
 8006e8a:	e03f      	b.n	8006f0c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d018      	beq.n	8006ec6 <RCCEx_PLLSAI2_Config+0x72>
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d825      	bhi.n	8006ee4 <RCCEx_PLLSAI2_Config+0x90>
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d002      	beq.n	8006ea2 <RCCEx_PLLSAI2_Config+0x4e>
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d009      	beq.n	8006eb4 <RCCEx_PLLSAI2_Config+0x60>
 8006ea0:	e020      	b.n	8006ee4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ea2:	4b62      	ldr	r3, [pc, #392]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d11d      	bne.n	8006eea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eb2:	e01a      	b.n	8006eea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006eb4:	4b5d      	ldr	r3, [pc, #372]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d116      	bne.n	8006eee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ec4:	e013      	b.n	8006eee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ec6:	4b59      	ldr	r3, [pc, #356]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10f      	bne.n	8006ef2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ed2:	4b56      	ldr	r3, [pc, #344]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ee2:	e006      	b.n	8006ef2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee8:	e004      	b.n	8006ef4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006eea:	bf00      	nop
 8006eec:	e002      	b.n	8006ef4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d108      	bne.n	8006f0c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006efa:	4b4c      	ldr	r3, [pc, #304]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f023 0203 	bic.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4949      	ldr	r1, [pc, #292]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 8086 	bne.w	8007020 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f14:	4b45      	ldr	r3, [pc, #276]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a44      	ldr	r2, [pc, #272]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f20:	f7fc f836 	bl	8002f90 <HAL_GetTick>
 8006f24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f26:	e009      	b.n	8006f3c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f28:	f7fc f832 	bl	8002f90 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d902      	bls.n	8006f3c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	73fb      	strb	r3, [r7, #15]
        break;
 8006f3a:	e005      	b.n	8006f48 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f3c:	4b3b      	ldr	r3, [pc, #236]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1ef      	bne.n	8006f28 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d168      	bne.n	8007020 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d113      	bne.n	8006f7c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f54:	4b35      	ldr	r3, [pc, #212]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f56:	695a      	ldr	r2, [r3, #20]
 8006f58:	4b35      	ldr	r3, [pc, #212]	; (8007030 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6892      	ldr	r2, [r2, #8]
 8006f60:	0211      	lsls	r1, r2, #8
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68d2      	ldr	r2, [r2, #12]
 8006f66:	06d2      	lsls	r2, r2, #27
 8006f68:	4311      	orrs	r1, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6852      	ldr	r2, [r2, #4]
 8006f6e:	3a01      	subs	r2, #1
 8006f70:	0112      	lsls	r2, r2, #4
 8006f72:	430a      	orrs	r2, r1
 8006f74:	492d      	ldr	r1, [pc, #180]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	614b      	str	r3, [r1, #20]
 8006f7a:	e02d      	b.n	8006fd8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d115      	bne.n	8006fae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f82:	4b2a      	ldr	r3, [pc, #168]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6892      	ldr	r2, [r2, #8]
 8006f8e:	0211      	lsls	r1, r2, #8
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6912      	ldr	r2, [r2, #16]
 8006f94:	0852      	lsrs	r2, r2, #1
 8006f96:	3a01      	subs	r2, #1
 8006f98:	0552      	lsls	r2, r2, #21
 8006f9a:	4311      	orrs	r1, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6852      	ldr	r2, [r2, #4]
 8006fa0:	3a01      	subs	r2, #1
 8006fa2:	0112      	lsls	r2, r2, #4
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	4921      	ldr	r1, [pc, #132]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	614b      	str	r3, [r1, #20]
 8006fac:	e014      	b.n	8006fd8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fae:	4b1f      	ldr	r3, [pc, #124]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	4b21      	ldr	r3, [pc, #132]	; (8007038 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6892      	ldr	r2, [r2, #8]
 8006fba:	0211      	lsls	r1, r2, #8
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6952      	ldr	r2, [r2, #20]
 8006fc0:	0852      	lsrs	r2, r2, #1
 8006fc2:	3a01      	subs	r2, #1
 8006fc4:	0652      	lsls	r2, r2, #25
 8006fc6:	4311      	orrs	r1, r2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6852      	ldr	r2, [r2, #4]
 8006fcc:	3a01      	subs	r2, #1
 8006fce:	0112      	lsls	r2, r2, #4
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	4916      	ldr	r1, [pc, #88]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006fd8:	4b14      	ldr	r3, [pc, #80]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a13      	ldr	r2, [pc, #76]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe4:	f7fb ffd4 	bl	8002f90 <HAL_GetTick>
 8006fe8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fea:	e009      	b.n	8007000 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fec:	f7fb ffd0 	bl	8002f90 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d902      	bls.n	8007000 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	73fb      	strb	r3, [r7, #15]
          break;
 8006ffe:	e005      	b.n	800700c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007000:	4b0a      	ldr	r3, [pc, #40]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0ef      	beq.n	8006fec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	4904      	ldr	r1, [pc, #16]	; (800702c <RCCEx_PLLSAI2_Config+0x1d8>)
 800701c:	4313      	orrs	r3, r2
 800701e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000
 8007030:	07ff800f 	.word	0x07ff800f
 8007034:	ff9f800f 	.word	0xff9f800f
 8007038:	f9ff800f 	.word	0xf9ff800f

0800703c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800703c:	b480      	push	{r7}
 800703e:	b089      	sub	sp, #36	; 0x24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007058:	d10b      	bne.n	8007072 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800705a:	4b7e      	ldr	r3, [pc, #504]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800705c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007060:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007064:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b60      	cmp	r3, #96	; 0x60
 800706a:	d112      	bne.n	8007092 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800706c:	4b7a      	ldr	r3, [pc, #488]	; (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	e00f      	b.n	8007092 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007078:	d10b      	bne.n	8007092 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800707a:	4b76      	ldr	r3, [pc, #472]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800707c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007084:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708c:	d101      	bne.n	8007092 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800708e:	4b72      	ldr	r3, [pc, #456]	; (8007258 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007090:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 80d6 	bne.w	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d003      	beq.n	80070ac <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070aa:	d13b      	bne.n	8007124 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070ac:	4b69      	ldr	r3, [pc, #420]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b8:	f040 80c4 	bne.w	8007244 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80070bc:	4b65      	ldr	r3, [pc, #404]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80bd 	beq.w	8007244 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80070ca:	4b62      	ldr	r3, [pc, #392]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	091b      	lsrs	r3, r3, #4
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	3301      	adds	r3, #1
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80070de:	4b5d      	ldr	r3, [pc, #372]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80070ea:	4b5a      	ldr	r3, [pc, #360]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	0edb      	lsrs	r3, r3, #27
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80070fc:	4b55      	ldr	r3, [pc, #340]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007108:	2311      	movs	r3, #17
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	e001      	b.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800710e:	2307      	movs	r3, #7
 8007110:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	fb03 f202 	mul.w	r2, r3, r2
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007122:	e08f      	b.n	8007244 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d13a      	bne.n	80071a0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800712a:	4b4a      	ldr	r3, [pc, #296]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007136:	f040 8086 	bne.w	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800713a:	4b46      	ldr	r3, [pc, #280]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d07f      	beq.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007146:	4b43      	ldr	r3, [pc, #268]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	091b      	lsrs	r3, r3, #4
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	3301      	adds	r3, #1
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	fbb2 f3f3 	udiv	r3, r2, r3
 8007158:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800715a:	4b3e      	ldr	r3, [pc, #248]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	0a1b      	lsrs	r3, r3, #8
 8007160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007164:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007166:	4b3b      	ldr	r3, [pc, #236]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	0edb      	lsrs	r3, r3, #27
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007178:	4b36      	ldr	r3, [pc, #216]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007184:	2311      	movs	r3, #17
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e001      	b.n	800718e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800718a:	2307      	movs	r3, #7
 800718c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	fb03 f202 	mul.w	r2, r3, r2
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	fbb2 f3f3 	udiv	r3, r2, r3
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	e052      	b.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b80      	cmp	r3, #128	; 0x80
 80071a4:	d003      	beq.n	80071ae <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ac:	d109      	bne.n	80071c2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071ae:	4b29      	ldr	r3, [pc, #164]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ba:	d144      	bne.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80071be:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c0:	e041      	b.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d003      	beq.n	80071d0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ce:	d13a      	bne.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071dc:	d133      	bne.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d02d      	beq.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	091b      	lsrs	r3, r3, #4
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	3301      	adds	r3, #1
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	0a1b      	lsrs	r3, r3, #8
 8007204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007208:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800720a:	4b12      	ldr	r3, [pc, #72]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	0edb      	lsrs	r3, r3, #27
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007228:	2311      	movs	r3, #17
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	e001      	b.n	8007232 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800722e:	2307      	movs	r3, #7
 8007230:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	fb03 f202 	mul.w	r2, r3, r2
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	e000      	b.n	8007246 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007244:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007246:	69fb      	ldr	r3, [r7, #28]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3724      	adds	r7, #36	; 0x24
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40021000 	.word	0x40021000
 8007258:	001fff68 	.word	0x001fff68
 800725c:	00f42400 	.word	0x00f42400

08007260 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d904      	bls.n	800727e <HAL_SAI_InitProtocol+0x1e>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	3b03      	subs	r3, #3
 8007278:	2b01      	cmp	r3, #1
 800727a:	d812      	bhi.n	80072a2 <HAL_SAI_InitProtocol+0x42>
 800727c:	e008      	b.n	8007290 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f9fb 	bl	8007680 <SAI_InitI2S>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]
      break;
 800728e:	e00b      	b.n	80072a8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 faa4 	bl	80077e4 <SAI_InitPCM>
 800729c:	4603      	mov	r3, r0
 800729e:	75fb      	strb	r3, [r7, #23]
      break;
 80072a0:	e002      	b.n	80072a8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]
      break;
 80072a6:	bf00      	nop
  }

  if (status == HAL_OK)
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f808 	bl	80072c4 <HAL_SAI_Init>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e1c7      	b.n	8007666 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10e      	bne.n	80072fe <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a81      	ldr	r2, [pc, #516]	; (80074ec <HAL_SAI_Init+0x228>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d107      	bne.n	80072fa <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d103      	bne.n	80072fa <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e1b3      	b.n	8007666 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fb fbec 	bl	8002af0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fae5 	bl	80078e8 <SAI_Disable>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e19e      	b.n	8007666 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d00c      	beq.n	8007352 <HAL_SAI_Init+0x8e>
 8007338:	2b02      	cmp	r3, #2
 800733a:	d80d      	bhi.n	8007358 <HAL_SAI_Init+0x94>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_SAI_Init+0x82>
 8007340:	2b01      	cmp	r3, #1
 8007342:	d003      	beq.n	800734c <HAL_SAI_Init+0x88>
 8007344:	e008      	b.n	8007358 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800734a:	e008      	b.n	800735e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800734c:	2310      	movs	r3, #16
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007350:	e005      	b.n	800735e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007352:	2320      	movs	r3, #32
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007356:	e002      	b.n	800735e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800735c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d81d      	bhi.n	80073a2 <HAL_SAI_Init+0xde>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <HAL_SAI_Init+0xa8>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800737d 	.word	0x0800737d
 8007370:	08007383 	.word	0x08007383
 8007374:	0800738b 	.word	0x0800738b
 8007378:	08007393 	.word	0x08007393
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	61fb      	str	r3, [r7, #28]
      break;
 8007380:	e012      	b.n	80073a8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007386:	61fb      	str	r3, [r7, #28]
      break;
 8007388:	e00e      	b.n	80073a8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800738a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800738e:	61fb      	str	r3, [r7, #28]
      break;
 8007390:	e00a      	b.n	80073a8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007396:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	f043 0301 	orr.w	r3, r3, #1
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80073a0:	e002      	b.n	80073a8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
      break;
 80073a6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a4f      	ldr	r2, [pc, #316]	; (80074ec <HAL_SAI_Init+0x228>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_SAI_Init+0xf8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a4e      	ldr	r2, [pc, #312]	; (80074f0 <HAL_SAI_Init+0x22c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d103      	bne.n	80073c4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80073bc:	4a4d      	ldr	r2, [pc, #308]	; (80074f4 <HAL_SAI_Init+0x230>)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	e002      	b.n	80073ca <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80073c4:	4a4c      	ldr	r2, [pc, #304]	; (80074f8 <HAL_SAI_Init+0x234>)
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d073      	beq.n	80074ba <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a45      	ldr	r2, [pc, #276]	; (80074ec <HAL_SAI_Init+0x228>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <HAL_SAI_Init+0x122>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a43      	ldr	r2, [pc, #268]	; (80074f0 <HAL_SAI_Init+0x22c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d105      	bne.n	80073f2 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80073e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80073ea:	f7fe fd0d 	bl	8005e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80073ee:	61b8      	str	r0, [r7, #24]
 80073f0:	e004      	b.n	80073fc <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80073f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80073f6:	f7fe fd07 	bl	8005e08 <HAL_RCCEx_GetPeriphCLKFreq>
 80073fa:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007404:	d120      	bne.n	8007448 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	2b04      	cmp	r3, #4
 800740c:	d102      	bne.n	8007414 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800740e:	2340      	movs	r3, #64	; 0x40
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e00a      	b.n	800742a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	2b08      	cmp	r3, #8
 800741a:	d103      	bne.n	8007424 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800741c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	e002      	b.n	800742a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007428:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4619      	mov	r1, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	fb02 f303 	mul.w	r3, r2, r3
 8007440:	fbb1 f3f3 	udiv	r3, r1, r3
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	e017      	b.n	8007478 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007450:	d101      	bne.n	8007456 <HAL_SAI_Init+0x192>
 8007452:	2302      	movs	r3, #2
 8007454:	e000      	b.n	8007458 <HAL_SAI_Init+0x194>
 8007456:	2301      	movs	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	4619      	mov	r1, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	fbb1 f3f3 	udiv	r3, r1, r3
 8007476:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	4a20      	ldr	r2, [pc, #128]	; (80074fc <HAL_SAI_Init+0x238>)
 800747c:	fba2 2303 	umull	r2, r3, r2, r3
 8007480:	08da      	lsrs	r2, r3, #3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007486:	6979      	ldr	r1, [r7, #20]
 8007488:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <HAL_SAI_Init+0x238>)
 800748a:	fba3 2301 	umull	r2, r3, r3, r1
 800748e:	08da      	lsrs	r2, r3, #3
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	1aca      	subs	r2, r1, r3
 800749a:	2a08      	cmp	r2, #8
 800749c:	d904      	bls.n	80074a8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d104      	bne.n	80074ba <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	085a      	lsrs	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_SAI_Init+0x206>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d109      	bne.n	80074de <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_SAI_Init+0x212>
 80074d2:	2300      	movs	r3, #0
 80074d4:	e001      	b.n	80074da <HAL_SAI_Init+0x216>
 80074d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	e012      	b.n	8007504 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10c      	bne.n	8007500 <HAL_SAI_Init+0x23c>
 80074e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ea:	e00a      	b.n	8007502 <HAL_SAI_Init+0x23e>
 80074ec:	40015404 	.word	0x40015404
 80074f0:	40015424 	.word	0x40015424
 80074f4:	40015400 	.word	0x40015400
 80074f8:	40015800 	.word	0x40015800
 80074fc:	cccccccd 	.word	0xcccccccd
 8007500:	2300      	movs	r3, #0
 8007502:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6819      	ldr	r1, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4b58      	ldr	r3, [pc, #352]	; (8007670 <HAL_SAI_Init+0x3ac>)
 8007510:	400b      	ands	r3, r1
 8007512:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6819      	ldr	r1, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007528:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752e:	431a      	orrs	r2, r3
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800753c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007548:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	051b      	lsls	r3, r3, #20
 8007550:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007556:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800756e:	f023 030f 	bic.w	r3, r3, #15
 8007572:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	431a      	orrs	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6899      	ldr	r1, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	4b35      	ldr	r3, [pc, #212]	; (8007674 <HAL_SAI_Init+0x3b0>)
 800759e:	400b      	ands	r3, r1
 80075a0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6899      	ldr	r1, [r3, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80075b2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80075b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80075be:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c4:	3b01      	subs	r3, #1
 80075c6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80075c8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68d9      	ldr	r1, [r3, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f24f 0320 	movw	r3, #61472	; 0xf020
 80075e0:	400b      	ands	r3, r1
 80075e2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68d9      	ldr	r1, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075fa:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007600:	3b01      	subs	r3, #1
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a19      	ldr	r2, [pc, #100]	; (8007678 <HAL_SAI_Init+0x3b4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d119      	bne.n	800764c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007618:	4b18      	ldr	r3, [pc, #96]	; (800767c <HAL_SAI_Init+0x3b8>)
 800761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761c:	4a17      	ldr	r2, [pc, #92]	; (800767c <HAL_SAI_Init+0x3b8>)
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800762a:	2b01      	cmp	r3, #1
 800762c:	d10e      	bne.n	800764c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	3b01      	subs	r3, #1
 8007638:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800763a:	4910      	ldr	r1, [pc, #64]	; (800767c <HAL_SAI_Init+0x3b8>)
 800763c:	4313      	orrs	r3, r2
 800763e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007640:	4b0e      	ldr	r3, [pc, #56]	; (800767c <HAL_SAI_Init+0x3b8>)
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	4a0d      	ldr	r2, [pc, #52]	; (800767c <HAL_SAI_Init+0x3b8>)
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3728      	adds	r7, #40	; 0x28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	f805c010 	.word	0xf805c010
 8007674:	fff88000 	.word	0xfff88000
 8007678:	40015404 	.word	0x40015404
 800767c:	40015400 	.word	0x40015400

08007680 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <SAI_InitI2S+0x2e>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d103      	bne.n	80076b6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80076b4:	e002      	b.n	80076bc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076c2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076ca:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e077      	b.n	80077d6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d107      	bne.n	80076fc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80076f8:	661a      	str	r2, [r3, #96]	; 0x60
 80076fa:	e006      	b.n	800770a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007702:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d84f      	bhi.n	80077b0 <SAI_InitI2S+0x130>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <SAI_InitI2S+0x98>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007729 	.word	0x08007729
 800771c:	0800774b 	.word	0x0800774b
 8007720:	0800776d 	.word	0x0800776d
 8007724:	0800778f 	.word	0x0800778f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2280      	movs	r2, #128	; 0x80
 800772c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	011a      	lsls	r2, r3, #4
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2240      	movs	r2, #64	; 0x40
 8007746:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007748:	e035      	b.n	80077b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2280      	movs	r2, #128	; 0x80
 800774e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	019a      	lsls	r2, r3, #6
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2280      	movs	r2, #128	; 0x80
 8007768:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800776a:	e024      	b.n	80077b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	22c0      	movs	r2, #192	; 0xc0
 8007770:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	085b      	lsrs	r3, r3, #1
 8007776:	019a      	lsls	r2, r3, #6
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2280      	movs	r2, #128	; 0x80
 800778a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800778c:	e013      	b.n	80077b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	22e0      	movs	r2, #224	; 0xe0
 8007792:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	019a      	lsls	r2, r3, #6
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2280      	movs	r2, #128	; 0x80
 80077ac:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80077ae:	e002      	b.n	80077b6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
      break;
 80077b4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d10b      	bne.n	80077d4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d102      	bne.n	80077c8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2210      	movs	r2, #16
 80077c6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d102      	bne.n	80077d4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2208      	movs	r2, #8
 80077d2:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <SAI_InitPCM+0x2e>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d103      	bne.n	800781a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	64da      	str	r2, [r3, #76]	; 0x4c
 8007818:	e002      	b.n	8007820 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800782c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007834:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007848:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b04      	cmp	r3, #4
 800784e:	d103      	bne.n	8007858 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	655a      	str	r2, [r3, #84]	; 0x54
 8007856:	e002      	b.n	800785e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	220d      	movs	r2, #13
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d837      	bhi.n	80078d4 <SAI_InitPCM+0xf0>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <SAI_InitPCM+0x88>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	0800787d 	.word	0x0800787d
 8007870:	08007893 	.word	0x08007893
 8007874:	080078a9 	.word	0x080078a9
 8007878:	080078bf 	.word	0x080078bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2280      	movs	r2, #128	; 0x80
 8007880:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	011a      	lsls	r2, r3, #4
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2240      	movs	r2, #64	; 0x40
 800788e:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8007890:	e023      	b.n	80078da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2280      	movs	r2, #128	; 0x80
 80078a4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80078a6:	e018      	b.n	80078da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	22c0      	movs	r2, #192	; 0xc0
 80078ac:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2280      	movs	r2, #128	; 0x80
 80078ba:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80078bc:	e00d      	b.n	80078da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	22e0      	movs	r2, #224	; 0xe0
 80078c2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2280      	movs	r2, #128	; 0x80
 80078d0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80078d2:	e002      	b.n	80078da <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]
      break;
 80078d8:	bf00      	nop
  }

  return status;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80078f0:	4b18      	ldr	r3, [pc, #96]	; (8007954 <SAI_Disable+0x6c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a18      	ldr	r2, [pc, #96]	; (8007958 <SAI_Disable+0x70>)
 80078f6:	fba2 2303 	umull	r2, r3, r2, r3
 80078fa:	0b1b      	lsrs	r3, r3, #12
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007912:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	72fb      	strb	r3, [r7, #11]
      break;
 800792e:	e009      	b.n	8007944 <SAI_Disable+0x5c>
    }
    count--;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3b01      	subs	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e7      	bne.n	8007914 <SAI_Disable+0x2c>

  return status;
 8007944:	7afb      	ldrb	r3, [r7, #11]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000000 	.word	0x20000000
 8007958:	95cbec1b 	.word	0x95cbec1b

0800795c <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e0aa      	b.n	8007ac4 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fa fd1e 	bl	80023c0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079b6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80079c6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079d0:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079e0:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d012      	beq.n	8007a10 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d107      	bne.n	8007a02 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	e006      	b.n	8007a10 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a0e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d104      	bne.n	8007a22 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a34:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695a      	ldr	r2, [r3, #20]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1a      	ldr	r2, [r3, #32]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a5e:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8007a70:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8007a72:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a7c:	d110      	bne.n	8007aa0 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8007a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a8e:	d107      	bne.n	8007aa0 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007aec:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8007aee:	2180      	movs	r1, #128	; 0x80
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f805 	bl	8007b00 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b1e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b26:	2b38      	cmp	r3, #56	; 0x38
 8007b28:	d103      	bne.n	8007b32 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007b30:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007b38:	2bf2      	cmp	r3, #242	; 0xf2
 8007b3a:	d103      	bne.n	8007b44 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007b42:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8007b4a:	2bd4      	cmp	r3, #212	; 0xd4
 8007b4c:	d103      	bne.n	8007b56 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007b54:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6819      	ldr	r1, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e095      	b.n	8007cb0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d108      	bne.n	8007b9e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b94:	d009      	beq.n	8007baa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	61da      	str	r2, [r3, #28]
 8007b9c:	e005      	b.n	8007baa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fa fd89 	bl	80026dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bea:	d902      	bls.n	8007bf2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e002      	b.n	8007bf8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007c00:	d007      	beq.n	8007c12 <HAL_SPI_Init+0xa0>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c0a:	d002      	beq.n	8007c12 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c54:	ea42 0103 	orr.w	r1, r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	f003 0204 	and.w	r2, r3, #4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c80:	f003 0308 	and.w	r3, r3, #8
 8007c84:	431a      	orrs	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c8e:	ea42 0103 	orr.w	r1, r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e049      	b.n	8007d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7fa fd40 	bl	8002764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f000 f94a 	bl	8007f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e0ff      	b.n	8007f86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b14      	cmp	r3, #20
 8007d92:	f200 80f0 	bhi.w	8007f76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007f77 	.word	0x08007f77
 8007da4:	08007f77 	.word	0x08007f77
 8007da8:	08007f77 	.word	0x08007f77
 8007dac:	08007e31 	.word	0x08007e31
 8007db0:	08007f77 	.word	0x08007f77
 8007db4:	08007f77 	.word	0x08007f77
 8007db8:	08007f77 	.word	0x08007f77
 8007dbc:	08007e73 	.word	0x08007e73
 8007dc0:	08007f77 	.word	0x08007f77
 8007dc4:	08007f77 	.word	0x08007f77
 8007dc8:	08007f77 	.word	0x08007f77
 8007dcc:	08007eb3 	.word	0x08007eb3
 8007dd0:	08007f77 	.word	0x08007f77
 8007dd4:	08007f77 	.word	0x08007f77
 8007dd8:	08007f77 	.word	0x08007f77
 8007ddc:	08007ef5 	.word	0x08007ef5
 8007de0:	08007f77 	.word	0x08007f77
 8007de4:	08007f77 	.word	0x08007f77
 8007de8:	08007f77 	.word	0x08007f77
 8007dec:	08007f35 	.word	0x08007f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 f964 	bl	80080c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0208 	orr.w	r2, r2, #8
 8007e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699a      	ldr	r2, [r3, #24]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0204 	bic.w	r2, r2, #4
 8007e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6999      	ldr	r1, [r3, #24]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	619a      	str	r2, [r3, #24]
      break;
 8007e2e:	e0a5      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f9d4 	bl	80081e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6999      	ldr	r1, [r3, #24]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	021a      	lsls	r2, r3, #8
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	619a      	str	r2, [r3, #24]
      break;
 8007e70:	e084      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fa3d 	bl	80082f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0208 	orr.w	r2, r2, #8
 8007e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69da      	ldr	r2, [r3, #28]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0204 	bic.w	r2, r2, #4
 8007e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69d9      	ldr	r1, [r3, #28]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	61da      	str	r2, [r3, #28]
      break;
 8007eb0:	e064      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 faa5 	bl	8008408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69da      	ldr	r2, [r3, #28]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69d9      	ldr	r1, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	021a      	lsls	r2, r3, #8
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	61da      	str	r2, [r3, #28]
      break;
 8007ef2:	e043      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68b9      	ldr	r1, [r7, #8]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 faee 	bl	80084dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0208 	orr.w	r2, r2, #8
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0204 	bic.w	r2, r2, #4
 8007f1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	691a      	ldr	r2, [r3, #16]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f32:	e023      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fb32 	bl	80085a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	021a      	lsls	r2, r3, #8
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f74:	e002      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop

08007f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a40      	ldr	r2, [pc, #256]	; (80080a4 <TIM_Base_SetConfig+0x114>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <TIM_Base_SetConfig+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fae:	d00f      	beq.n	8007fd0 <TIM_Base_SetConfig+0x40>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a3d      	ldr	r2, [pc, #244]	; (80080a8 <TIM_Base_SetConfig+0x118>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00b      	beq.n	8007fd0 <TIM_Base_SetConfig+0x40>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a3c      	ldr	r2, [pc, #240]	; (80080ac <TIM_Base_SetConfig+0x11c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d007      	beq.n	8007fd0 <TIM_Base_SetConfig+0x40>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a3b      	ldr	r2, [pc, #236]	; (80080b0 <TIM_Base_SetConfig+0x120>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_Base_SetConfig+0x40>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a3a      	ldr	r2, [pc, #232]	; (80080b4 <TIM_Base_SetConfig+0x124>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d108      	bne.n	8007fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2f      	ldr	r2, [pc, #188]	; (80080a4 <TIM_Base_SetConfig+0x114>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d01f      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff0:	d01b      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2c      	ldr	r2, [pc, #176]	; (80080a8 <TIM_Base_SetConfig+0x118>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d017      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a2b      	ldr	r2, [pc, #172]	; (80080ac <TIM_Base_SetConfig+0x11c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d013      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a2a      	ldr	r2, [pc, #168]	; (80080b0 <TIM_Base_SetConfig+0x120>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00f      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a29      	ldr	r2, [pc, #164]	; (80080b4 <TIM_Base_SetConfig+0x124>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00b      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a28      	ldr	r2, [pc, #160]	; (80080b8 <TIM_Base_SetConfig+0x128>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d007      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a27      	ldr	r2, [pc, #156]	; (80080bc <TIM_Base_SetConfig+0x12c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d003      	beq.n	800802a <TIM_Base_SetConfig+0x9a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a26      	ldr	r2, [pc, #152]	; (80080c0 <TIM_Base_SetConfig+0x130>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d108      	bne.n	800803c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a10      	ldr	r2, [pc, #64]	; (80080a4 <TIM_Base_SetConfig+0x114>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00f      	beq.n	8008088 <TIM_Base_SetConfig+0xf8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a12      	ldr	r2, [pc, #72]	; (80080b4 <TIM_Base_SetConfig+0x124>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00b      	beq.n	8008088 <TIM_Base_SetConfig+0xf8>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a11      	ldr	r2, [pc, #68]	; (80080b8 <TIM_Base_SetConfig+0x128>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <TIM_Base_SetConfig+0xf8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a10      	ldr	r2, [pc, #64]	; (80080bc <TIM_Base_SetConfig+0x12c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_Base_SetConfig+0xf8>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a0f      	ldr	r2, [pc, #60]	; (80080c0 <TIM_Base_SetConfig+0x130>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d103      	bne.n	8008090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	615a      	str	r2, [r3, #20]
}
 8008096:	bf00      	nop
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	40000400 	.word	0x40000400
 80080ac:	40000800 	.word	0x40000800
 80080b0:	40000c00 	.word	0x40000c00
 80080b4:	40013400 	.word	0x40013400
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40014400 	.word	0x40014400
 80080c0:	40014800 	.word	0x40014800

080080c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f023 0201 	bic.w	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f023 0302 	bic.w	r3, r3, #2
 8008110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a2c      	ldr	r2, [pc, #176]	; (80081d0 <TIM_OC1_SetConfig+0x10c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00f      	beq.n	8008144 <TIM_OC1_SetConfig+0x80>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a2b      	ldr	r2, [pc, #172]	; (80081d4 <TIM_OC1_SetConfig+0x110>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00b      	beq.n	8008144 <TIM_OC1_SetConfig+0x80>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a2a      	ldr	r2, [pc, #168]	; (80081d8 <TIM_OC1_SetConfig+0x114>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d007      	beq.n	8008144 <TIM_OC1_SetConfig+0x80>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a29      	ldr	r2, [pc, #164]	; (80081dc <TIM_OC1_SetConfig+0x118>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_OC1_SetConfig+0x80>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a28      	ldr	r2, [pc, #160]	; (80081e0 <TIM_OC1_SetConfig+0x11c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d10c      	bne.n	800815e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f023 0308 	bic.w	r3, r3, #8
 800814a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 0304 	bic.w	r3, r3, #4
 800815c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a1b      	ldr	r2, [pc, #108]	; (80081d0 <TIM_OC1_SetConfig+0x10c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00f      	beq.n	8008186 <TIM_OC1_SetConfig+0xc2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <TIM_OC1_SetConfig+0x110>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00b      	beq.n	8008186 <TIM_OC1_SetConfig+0xc2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a19      	ldr	r2, [pc, #100]	; (80081d8 <TIM_OC1_SetConfig+0x114>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d007      	beq.n	8008186 <TIM_OC1_SetConfig+0xc2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a18      	ldr	r2, [pc, #96]	; (80081dc <TIM_OC1_SetConfig+0x118>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d003      	beq.n	8008186 <TIM_OC1_SetConfig+0xc2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a17      	ldr	r2, [pc, #92]	; (80081e0 <TIM_OC1_SetConfig+0x11c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d111      	bne.n	80081aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800818c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	621a      	str	r2, [r3, #32]
}
 80081c4:	bf00      	nop
 80081c6:	371c      	adds	r7, #28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	40012c00 	.word	0x40012c00
 80081d4:	40013400 	.word	0x40013400
 80081d8:	40014000 	.word	0x40014000
 80081dc:	40014400 	.word	0x40014400
 80081e0:	40014800 	.word	0x40014800

080081e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	f023 0210 	bic.w	r2, r3, #16
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800821e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f023 0320 	bic.w	r3, r3, #32
 8008232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a28      	ldr	r2, [pc, #160]	; (80082e4 <TIM_OC2_SetConfig+0x100>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_OC2_SetConfig+0x6c>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a27      	ldr	r2, [pc, #156]	; (80082e8 <TIM_OC2_SetConfig+0x104>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d10d      	bne.n	800826c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800826a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <TIM_OC2_SetConfig+0x100>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00f      	beq.n	8008294 <TIM_OC2_SetConfig+0xb0>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a1c      	ldr	r2, [pc, #112]	; (80082e8 <TIM_OC2_SetConfig+0x104>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00b      	beq.n	8008294 <TIM_OC2_SetConfig+0xb0>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <TIM_OC2_SetConfig+0x108>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d007      	beq.n	8008294 <TIM_OC2_SetConfig+0xb0>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1a      	ldr	r2, [pc, #104]	; (80082f0 <TIM_OC2_SetConfig+0x10c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_OC2_SetConfig+0xb0>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a19      	ldr	r2, [pc, #100]	; (80082f4 <TIM_OC2_SetConfig+0x110>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d113      	bne.n	80082bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800829a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	621a      	str	r2, [r3, #32]
}
 80082d6:	bf00      	nop
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	40012c00 	.word	0x40012c00
 80082e8:	40013400 	.word	0x40013400
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40014400 	.word	0x40014400
 80082f4:	40014800 	.word	0x40014800

080082f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <TIM_OC3_SetConfig+0xfc>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_OC3_SetConfig+0x6a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a26      	ldr	r2, [pc, #152]	; (80083f8 <TIM_OC3_SetConfig+0x100>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d10d      	bne.n	800837e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800837c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <TIM_OC3_SetConfig+0xfc>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00f      	beq.n	80083a6 <TIM_OC3_SetConfig+0xae>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <TIM_OC3_SetConfig+0x100>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00b      	beq.n	80083a6 <TIM_OC3_SetConfig+0xae>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <TIM_OC3_SetConfig+0x104>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d007      	beq.n	80083a6 <TIM_OC3_SetConfig+0xae>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a19      	ldr	r2, [pc, #100]	; (8008400 <TIM_OC3_SetConfig+0x108>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d003      	beq.n	80083a6 <TIM_OC3_SetConfig+0xae>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a18      	ldr	r2, [pc, #96]	; (8008404 <TIM_OC3_SetConfig+0x10c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d113      	bne.n	80083ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	011b      	lsls	r3, r3, #4
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	4313      	orrs	r3, r2
 80083c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	011b      	lsls	r3, r3, #4
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	621a      	str	r2, [r3, #32]
}
 80083e8:	bf00      	nop
 80083ea:	371c      	adds	r7, #28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	40012c00 	.word	0x40012c00
 80083f8:	40013400 	.word	0x40013400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40014400 	.word	0x40014400
 8008404:	40014800 	.word	0x40014800

08008408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	021b      	lsls	r3, r3, #8
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4313      	orrs	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	031b      	lsls	r3, r3, #12
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4313      	orrs	r3, r2
 8008462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <TIM_OC4_SetConfig+0xc0>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00f      	beq.n	800848c <TIM_OC4_SetConfig+0x84>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a17      	ldr	r2, [pc, #92]	; (80084cc <TIM_OC4_SetConfig+0xc4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_OC4_SetConfig+0x84>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <TIM_OC4_SetConfig+0xc8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_OC4_SetConfig+0x84>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <TIM_OC4_SetConfig+0xcc>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_OC4_SetConfig+0x84>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <TIM_OC4_SetConfig+0xd0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d109      	bne.n	80084a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	019b      	lsls	r3, r3, #6
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	621a      	str	r2, [r3, #32]
}
 80084ba:	bf00      	nop
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40013400 	.word	0x40013400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40014400 	.word	0x40014400
 80084d8:	40014800 	.word	0x40014800

080084dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	041b      	lsls	r3, r3, #16
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a17      	ldr	r2, [pc, #92]	; (8008590 <TIM_OC5_SetConfig+0xb4>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00f      	beq.n	8008556 <TIM_OC5_SetConfig+0x7a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a16      	ldr	r2, [pc, #88]	; (8008594 <TIM_OC5_SetConfig+0xb8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00b      	beq.n	8008556 <TIM_OC5_SetConfig+0x7a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a15      	ldr	r2, [pc, #84]	; (8008598 <TIM_OC5_SetConfig+0xbc>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d007      	beq.n	8008556 <TIM_OC5_SetConfig+0x7a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a14      	ldr	r2, [pc, #80]	; (800859c <TIM_OC5_SetConfig+0xc0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_OC5_SetConfig+0x7a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a13      	ldr	r2, [pc, #76]	; (80085a0 <TIM_OC5_SetConfig+0xc4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d109      	bne.n	800856a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	621a      	str	r2, [r3, #32]
}
 8008584:	bf00      	nop
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	40012c00 	.word	0x40012c00
 8008594:	40013400 	.word	0x40013400
 8008598:	40014000 	.word	0x40014000
 800859c:	40014400 	.word	0x40014400
 80085a0:	40014800 	.word	0x40014800

080085a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	051b      	lsls	r3, r3, #20
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a18      	ldr	r2, [pc, #96]	; (800865c <TIM_OC6_SetConfig+0xb8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00f      	beq.n	8008620 <TIM_OC6_SetConfig+0x7c>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a17      	ldr	r2, [pc, #92]	; (8008660 <TIM_OC6_SetConfig+0xbc>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00b      	beq.n	8008620 <TIM_OC6_SetConfig+0x7c>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a16      	ldr	r2, [pc, #88]	; (8008664 <TIM_OC6_SetConfig+0xc0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d007      	beq.n	8008620 <TIM_OC6_SetConfig+0x7c>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a15      	ldr	r2, [pc, #84]	; (8008668 <TIM_OC6_SetConfig+0xc4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d003      	beq.n	8008620 <TIM_OC6_SetConfig+0x7c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a14      	ldr	r2, [pc, #80]	; (800866c <TIM_OC6_SetConfig+0xc8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d109      	bne.n	8008634 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008626:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	029b      	lsls	r3, r3, #10
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40012c00 	.word	0x40012c00
 8008660:	40013400 	.word	0x40013400
 8008664:	40014000 	.word	0x40014000
 8008668:	40014400 	.word	0x40014400
 800866c:	40014800 	.word	0x40014800

08008670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008684:	2302      	movs	r3, #2
 8008686:	e068      	b.n	800875a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a2e      	ldr	r2, [pc, #184]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d004      	beq.n	80086bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a2d      	ldr	r2, [pc, #180]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d108      	bne.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1e      	ldr	r2, [pc, #120]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d01d      	beq.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fa:	d018      	beq.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a1b      	ldr	r2, [pc, #108]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a1a      	ldr	r2, [pc, #104]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00e      	beq.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a18      	ldr	r2, [pc, #96]	; (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d009      	beq.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a13      	ldr	r2, [pc, #76]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d004      	beq.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a14      	ldr	r2, [pc, #80]	; (800877c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d10c      	bne.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4313      	orrs	r3, r2
 800873e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	40012c00 	.word	0x40012c00
 800876c:	40013400 	.word	0x40013400
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40000c00 	.word	0x40000c00
 800877c:	40014000 	.word	0x40014000

08008780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008798:	2302      	movs	r3, #2
 800879a:	e065      	b.n	8008868 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	041b      	lsls	r3, r3, #16
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a16      	ldr	r2, [pc, #88]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d004      	beq.n	800882a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a14      	ldr	r2, [pc, #80]	; (8008878 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d115      	bne.n	8008856 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	051b      	lsls	r3, r3, #20
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	40012c00 	.word	0x40012c00
 8008878:	40013400 	.word	0x40013400

0800887c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800887c:	b480      	push	{r7}
 800887e:	b08b      	sub	sp, #44	; 0x2c
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_TIMEx_ConfigBreakInput+0x20>
 8008898:	2302      	movs	r3, #2
 800889a:	e0af      	b.n	80089fc <HAL_TIMEx_ConfigBreakInput+0x180>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	2b07      	cmp	r3, #7
 80088ac:	d83a      	bhi.n	8008924 <HAL_TIMEx_ConfigBreakInput+0xa8>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <HAL_TIMEx_ConfigBreakInput+0x38>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	080088d5 	.word	0x080088d5
 80088b8:	080088e9 	.word	0x080088e9
 80088bc:	08008925 	.word	0x08008925
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	08008925 	.word	0x08008925
 80088c8:	08008925 	.word	0x08008925
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008911 	.word	0x08008911
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 80088d4:	2301      	movs	r3, #1
 80088d6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 80088dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 80088e2:	2309      	movs	r3, #9
 80088e4:	613b      	str	r3, [r7, #16]
      break;
 80088e6:	e026      	b.n	8008936 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 80088e8:	2302      	movs	r3, #2
 80088ea:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 80088ec:	2301      	movs	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 80088f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088f4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 80088f6:	230a      	movs	r3, #10
 80088f8:	613b      	str	r3, [r7, #16]
      break;
 80088fa:	e01c      	b.n	8008936 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 80088fc:	2304      	movs	r3, #4
 80088fe:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 8008900:	2302      	movs	r3, #2
 8008902:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 8008904:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008908:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800890a:	230b      	movs	r3, #11
 800890c:	613b      	str	r3, [r7, #16]
      break;
 800890e:	e012      	b.n	8008936 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 8008910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008914:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 8008916:	2308      	movs	r3, #8
 8008918:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	613b      	str	r3, [r7, #16]
      break;
 8008922:	e008      	b.n	8008936 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	613b      	str	r3, [r7, #16]
      break;
 8008934:	bf00      	nop
    }
  }

  switch (BreakInput)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d003      	beq.n	8008944 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d029      	beq.n	8008996 <HAL_TIMEx_ConfigBreakInput+0x11a>
 8008942:	e051      	b.n	80089e8 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800894a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	43db      	mvns	r3, r3
 8008950:	6a3a      	ldr	r2, [r7, #32]
 8008952:	4013      	ands	r3, r2
 8008954:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	409a      	lsls	r2, r3
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	4013      	ands	r3, r2
 8008962:	6a3a      	ldr	r2, [r7, #32]
 8008964:	4313      	orrs	r3, r2
 8008966:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b08      	cmp	r3, #8
 800896e:	d00d      	beq.n	800898c <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	43db      	mvns	r3, r3
 8008974:	6a3a      	ldr	r2, [r7, #32]
 8008976:	4013      	ands	r3, r2
 8008978:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689a      	ldr	r2, [r3, #8]
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	409a      	lsls	r2, r3
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	4013      	ands	r3, r2
 8008986:	6a3a      	ldr	r2, [r7, #32]
 8008988:	4313      	orrs	r3, r2
 800898a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6a3a      	ldr	r2, [r7, #32]
 8008992:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008994:	e02c      	b.n	80089f0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	43db      	mvns	r3, r3
 80089a2:	6a3a      	ldr	r2, [r7, #32]
 80089a4:	4013      	ands	r3, r2
 80089a6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	409a      	lsls	r2, r3
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4013      	ands	r3, r2
 80089b4:	6a3a      	ldr	r2, [r7, #32]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d00d      	beq.n	80089de <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	43db      	mvns	r3, r3
 80089c6:	6a3a      	ldr	r2, [r7, #32]
 80089c8:	4013      	ands	r3, r2
 80089ca:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	409a      	lsls	r2, r3
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	4013      	ands	r3, r2
 80089d8:	6a3a      	ldr	r2, [r7, #32]
 80089da:	4313      	orrs	r3, r2
 80089dc:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80089e6:	e003      	b.n	80089f0 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80089ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	372c      	adds	r7, #44	; 0x2c
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e042      	b.n	8008aa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d106      	bne.n	8008a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7f9 fd6b 	bl	8002508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2224      	movs	r2, #36	; 0x24
 8008a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0201 	bic.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fbb4 	bl	80091c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8b5 	bl	8008bc8 <UART_SetConfig>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e01b      	b.n	8008aa0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0201 	orr.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fc33 	bl	8009304 <UART_CheckIdleState>
 8008a9e:	4603      	mov	r3, r0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	; 0x28
 8008aac:	af02      	add	r7, sp, #8
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	d17c      	bne.n	8008bbc <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <HAL_UART_Transmit+0x26>
 8008ac8:	88fb      	ldrh	r3, [r7, #6]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e075      	b.n	8008bbe <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2221      	movs	r2, #33	; 0x21
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ae2:	f7fa fa55 	bl	8002f90 <HAL_GetTick>
 8008ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	88fa      	ldrh	r2, [r7, #6]
 8008aec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	88fa      	ldrh	r2, [r7, #6]
 8008af4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b00:	d108      	bne.n	8008b14 <HAL_UART_Transmit+0x6c>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d104      	bne.n	8008b14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	e003      	b.n	8008b1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b1c:	e031      	b.n	8008b82 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2200      	movs	r2, #0
 8008b26:	2180      	movs	r1, #128	; 0x80
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 fc95 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e03e      	b.n	8008bbe <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	881a      	ldrh	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b52:	b292      	uxth	r2, r2
 8008b54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	3302      	adds	r3, #2
 8008b5a:	61bb      	str	r3, [r7, #24]
 8008b5c:	e008      	b.n	8008b70 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	781a      	ldrb	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	b292      	uxth	r2, r2
 8008b68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1c7      	bne.n	8008b1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2200      	movs	r2, #0
 8008b96:	2140      	movs	r1, #64	; 0x40
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fc5d 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e006      	b.n	8008bbe <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	e000      	b.n	8008bbe <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bcc:	b08c      	sub	sp, #48	; 0x30
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	431a      	orrs	r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	4baa      	ldr	r3, [pc, #680]	; (8008ea0 <UART_SetConfig+0x2d8>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c00:	430b      	orrs	r3, r1
 8008c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a9f      	ldr	r2, [pc, #636]	; (8008ea4 <UART_SetConfig+0x2dc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c30:	4313      	orrs	r3, r2
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	f023 010f 	bic.w	r1, r3, #15
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a90      	ldr	r2, [pc, #576]	; (8008ea8 <UART_SetConfig+0x2e0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d125      	bne.n	8008cb8 <UART_SetConfig+0xf0>
 8008c6c:	4b8f      	ldr	r3, [pc, #572]	; (8008eac <UART_SetConfig+0x2e4>)
 8008c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d81a      	bhi.n	8008cb0 <UART_SetConfig+0xe8>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <UART_SetConfig+0xb8>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008c99 	.word	0x08008c99
 8008c8c:	08008ca9 	.word	0x08008ca9
 8008c90:	2301      	movs	r3, #1
 8008c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c96:	e116      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9e:	e112      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca6:	e10e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cae:	e10a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cb6:	e106      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a7c      	ldr	r2, [pc, #496]	; (8008eb0 <UART_SetConfig+0x2e8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d138      	bne.n	8008d34 <UART_SetConfig+0x16c>
 8008cc2:	4b7a      	ldr	r3, [pc, #488]	; (8008eac <UART_SetConfig+0x2e4>)
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc8:	f003 030c 	and.w	r3, r3, #12
 8008ccc:	2b0c      	cmp	r3, #12
 8008cce:	d82d      	bhi.n	8008d2c <UART_SetConfig+0x164>
 8008cd0:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <UART_SetConfig+0x110>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008d0d 	.word	0x08008d0d
 8008cdc:	08008d2d 	.word	0x08008d2d
 8008ce0:	08008d2d 	.word	0x08008d2d
 8008ce4:	08008d2d 	.word	0x08008d2d
 8008ce8:	08008d1d 	.word	0x08008d1d
 8008cec:	08008d2d 	.word	0x08008d2d
 8008cf0:	08008d2d 	.word	0x08008d2d
 8008cf4:	08008d2d 	.word	0x08008d2d
 8008cf8:	08008d15 	.word	0x08008d15
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	08008d2d 	.word	0x08008d2d
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d12:	e0d8      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d14:	2302      	movs	r3, #2
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1a:	e0d4      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d22:	e0d0      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d2a:	e0cc      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d32:	e0c8      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a5e      	ldr	r2, [pc, #376]	; (8008eb4 <UART_SetConfig+0x2ec>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d125      	bne.n	8008d8a <UART_SetConfig+0x1c2>
 8008d3e:	4b5b      	ldr	r3, [pc, #364]	; (8008eac <UART_SetConfig+0x2e4>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d48:	2b30      	cmp	r3, #48	; 0x30
 8008d4a:	d016      	beq.n	8008d7a <UART_SetConfig+0x1b2>
 8008d4c:	2b30      	cmp	r3, #48	; 0x30
 8008d4e:	d818      	bhi.n	8008d82 <UART_SetConfig+0x1ba>
 8008d50:	2b20      	cmp	r3, #32
 8008d52:	d00a      	beq.n	8008d6a <UART_SetConfig+0x1a2>
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d814      	bhi.n	8008d82 <UART_SetConfig+0x1ba>
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <UART_SetConfig+0x19a>
 8008d5c:	2b10      	cmp	r3, #16
 8008d5e:	d008      	beq.n	8008d72 <UART_SetConfig+0x1aa>
 8008d60:	e00f      	b.n	8008d82 <UART_SetConfig+0x1ba>
 8008d62:	2300      	movs	r3, #0
 8008d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d68:	e0ad      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d70:	e0a9      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d72:	2304      	movs	r3, #4
 8008d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d78:	e0a5      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d80:	e0a1      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d82:	2310      	movs	r3, #16
 8008d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d88:	e09d      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a4a      	ldr	r2, [pc, #296]	; (8008eb8 <UART_SetConfig+0x2f0>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d125      	bne.n	8008de0 <UART_SetConfig+0x218>
 8008d94:	4b45      	ldr	r3, [pc, #276]	; (8008eac <UART_SetConfig+0x2e4>)
 8008d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d9e:	2bc0      	cmp	r3, #192	; 0xc0
 8008da0:	d016      	beq.n	8008dd0 <UART_SetConfig+0x208>
 8008da2:	2bc0      	cmp	r3, #192	; 0xc0
 8008da4:	d818      	bhi.n	8008dd8 <UART_SetConfig+0x210>
 8008da6:	2b80      	cmp	r3, #128	; 0x80
 8008da8:	d00a      	beq.n	8008dc0 <UART_SetConfig+0x1f8>
 8008daa:	2b80      	cmp	r3, #128	; 0x80
 8008dac:	d814      	bhi.n	8008dd8 <UART_SetConfig+0x210>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <UART_SetConfig+0x1f0>
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d008      	beq.n	8008dc8 <UART_SetConfig+0x200>
 8008db6:	e00f      	b.n	8008dd8 <UART_SetConfig+0x210>
 8008db8:	2300      	movs	r3, #0
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dbe:	e082      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc6:	e07e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dc8:	2304      	movs	r3, #4
 8008dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dce:	e07a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dd6:	e076      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dde:	e072      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a35      	ldr	r2, [pc, #212]	; (8008ebc <UART_SetConfig+0x2f4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d12a      	bne.n	8008e40 <UART_SetConfig+0x278>
 8008dea:	4b30      	ldr	r3, [pc, #192]	; (8008eac <UART_SetConfig+0x2e4>)
 8008dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008df8:	d01a      	beq.n	8008e30 <UART_SetConfig+0x268>
 8008dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dfe:	d81b      	bhi.n	8008e38 <UART_SetConfig+0x270>
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e04:	d00c      	beq.n	8008e20 <UART_SetConfig+0x258>
 8008e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e0a:	d815      	bhi.n	8008e38 <UART_SetConfig+0x270>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <UART_SetConfig+0x250>
 8008e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e14:	d008      	beq.n	8008e28 <UART_SetConfig+0x260>
 8008e16:	e00f      	b.n	8008e38 <UART_SetConfig+0x270>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e1e:	e052      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e20:	2302      	movs	r3, #2
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e26:	e04e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e2e:	e04a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e36:	e046      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e3e:	e042      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a17      	ldr	r2, [pc, #92]	; (8008ea4 <UART_SetConfig+0x2dc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d13a      	bne.n	8008ec0 <UART_SetConfig+0x2f8>
 8008e4a:	4b18      	ldr	r3, [pc, #96]	; (8008eac <UART_SetConfig+0x2e4>)
 8008e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e58:	d01a      	beq.n	8008e90 <UART_SetConfig+0x2c8>
 8008e5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e5e:	d81b      	bhi.n	8008e98 <UART_SetConfig+0x2d0>
 8008e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e64:	d00c      	beq.n	8008e80 <UART_SetConfig+0x2b8>
 8008e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e6a:	d815      	bhi.n	8008e98 <UART_SetConfig+0x2d0>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <UART_SetConfig+0x2b0>
 8008e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e74:	d008      	beq.n	8008e88 <UART_SetConfig+0x2c0>
 8008e76:	e00f      	b.n	8008e98 <UART_SetConfig+0x2d0>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7e:	e022      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e80:	2302      	movs	r3, #2
 8008e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e86:	e01e      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e8e:	e01a      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e96:	e016      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e9e:	e012      	b.n	8008ec6 <UART_SetConfig+0x2fe>
 8008ea0:	cfff69f3 	.word	0xcfff69f3
 8008ea4:	40008000 	.word	0x40008000
 8008ea8:	40013800 	.word	0x40013800
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	40004400 	.word	0x40004400
 8008eb4:	40004800 	.word	0x40004800
 8008eb8:	40004c00 	.word	0x40004c00
 8008ebc:	40005000 	.word	0x40005000
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4aae      	ldr	r2, [pc, #696]	; (8009184 <UART_SetConfig+0x5bc>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	f040 8097 	bne.w	8009000 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d823      	bhi.n	8008f22 <UART_SetConfig+0x35a>
 8008eda:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <UART_SetConfig+0x318>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f23 	.word	0x08008f23
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f23 	.word	0x08008f23
 8008ef0:	08008f13 	.word	0x08008f13
 8008ef4:	08008f23 	.word	0x08008f23
 8008ef8:	08008f23 	.word	0x08008f23
 8008efc:	08008f23 	.word	0x08008f23
 8008f00:	08008f1b 	.word	0x08008f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f04:	f7fc fb64 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8008f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f0a:	e010      	b.n	8008f2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f0c:	4b9e      	ldr	r3, [pc, #632]	; (8009188 <UART_SetConfig+0x5c0>)
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f10:	e00d      	b.n	8008f2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f12:	f7fc fac5 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8008f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f18:	e009      	b.n	8008f2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f20:	e005      	b.n	8008f2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8130 	beq.w	8009196 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	4a94      	ldr	r2, [pc, #592]	; (800918c <UART_SetConfig+0x5c4>)
 8008f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	4413      	add	r3, r2
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d305      	bcc.n	8008f66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d903      	bls.n	8008f6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f6c:	e113      	b.n	8009196 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	2200      	movs	r2, #0
 8008f72:	60bb      	str	r3, [r7, #8]
 8008f74:	60fa      	str	r2, [r7, #12]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	4a84      	ldr	r2, [pc, #528]	; (800918c <UART_SetConfig+0x5c4>)
 8008f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2200      	movs	r2, #0
 8008f84:	603b      	str	r3, [r7, #0]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f90:	f7f7 fe22 	bl	8000bd8 <__aeabi_uldivmod>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	020b      	lsls	r3, r1, #8
 8008fa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008faa:	0202      	lsls	r2, r0, #8
 8008fac:	6979      	ldr	r1, [r7, #20]
 8008fae:	6849      	ldr	r1, [r1, #4]
 8008fb0:	0849      	lsrs	r1, r1, #1
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	eb12 0804 	adds.w	r8, r2, r4
 8008fbc:	eb43 0905 	adc.w	r9, r3, r5
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	469a      	mov	sl, r3
 8008fc8:	4693      	mov	fp, r2
 8008fca:	4652      	mov	r2, sl
 8008fcc:	465b      	mov	r3, fp
 8008fce:	4640      	mov	r0, r8
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	f7f7 fe01 	bl	8000bd8 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4613      	mov	r3, r2
 8008fdc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fe4:	d308      	bcc.n	8008ff8 <UART_SetConfig+0x430>
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fec:	d204      	bcs.n	8008ff8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6a3a      	ldr	r2, [r7, #32]
 8008ff4:	60da      	str	r2, [r3, #12]
 8008ff6:	e0ce      	b.n	8009196 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ffe:	e0ca      	b.n	8009196 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009008:	d166      	bne.n	80090d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800900a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800900e:	2b08      	cmp	r3, #8
 8009010:	d827      	bhi.n	8009062 <UART_SetConfig+0x49a>
 8009012:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <UART_SetConfig+0x450>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009045 	.word	0x08009045
 8009020:	0800904d 	.word	0x0800904d
 8009024:	08009063 	.word	0x08009063
 8009028:	08009053 	.word	0x08009053
 800902c:	08009063 	.word	0x08009063
 8009030:	08009063 	.word	0x08009063
 8009034:	08009063 	.word	0x08009063
 8009038:	0800905b 	.word	0x0800905b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800903c:	f7fc fac8 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8009040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009042:	e014      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009044:	f7fc fada 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 8009048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800904a:	e010      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800904c:	4b4e      	ldr	r3, [pc, #312]	; (8009188 <UART_SetConfig+0x5c0>)
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009050:	e00d      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009052:	f7fc fa25 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8009056:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009058:	e009      	b.n	800906e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009060:	e005      	b.n	800906e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800906c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8090 	beq.w	8009196 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	4a44      	ldr	r2, [pc, #272]	; (800918c <UART_SetConfig+0x5c4>)
 800907c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009080:	461a      	mov	r2, r3
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	fbb3 f3f2 	udiv	r3, r3, r2
 8009088:	005a      	lsls	r2, r3, #1
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	085b      	lsrs	r3, r3, #1
 8009090:	441a      	add	r2, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	fbb2 f3f3 	udiv	r3, r2, r3
 800909a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	2b0f      	cmp	r3, #15
 80090a0:	d916      	bls.n	80090d0 <UART_SetConfig+0x508>
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a8:	d212      	bcs.n	80090d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f023 030f 	bic.w	r3, r3, #15
 80090b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	b29a      	uxth	r2, r3
 80090c0:	8bfb      	ldrh	r3, [r7, #30]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	8bfa      	ldrh	r2, [r7, #30]
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	e062      	b.n	8009196 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090d6:	e05e      	b.n	8009196 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090dc:	2b08      	cmp	r3, #8
 80090de:	d828      	bhi.n	8009132 <UART_SetConfig+0x56a>
 80090e0:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <UART_SetConfig+0x520>)
 80090e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	0800910d 	.word	0x0800910d
 80090ec:	08009115 	.word	0x08009115
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	08009133 	.word	0x08009133
 80090f8:	08009123 	.word	0x08009123
 80090fc:	08009133 	.word	0x08009133
 8009100:	08009133 	.word	0x08009133
 8009104:	08009133 	.word	0x08009133
 8009108:	0800912b 	.word	0x0800912b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800910c:	f7fc fa60 	bl	80055d0 <HAL_RCC_GetPCLK1Freq>
 8009110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009112:	e014      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009114:	f7fc fa72 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 8009118:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800911a:	e010      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800911c:	4b1a      	ldr	r3, [pc, #104]	; (8009188 <UART_SetConfig+0x5c0>)
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009120:	e00d      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009122:	f7fc f9bd 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 8009126:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009128:	e009      	b.n	800913e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800912a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800912e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009130:	e005      	b.n	800913e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800913c:	bf00      	nop
    }

    if (pclk != 0U)
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	2b00      	cmp	r3, #0
 8009142:	d028      	beq.n	8009196 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	4a10      	ldr	r2, [pc, #64]	; (800918c <UART_SetConfig+0x5c4>)
 800914a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800914e:	461a      	mov	r2, r3
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	fbb3 f2f2 	udiv	r2, r3, r2
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	441a      	add	r2, r3
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	fbb2 f3f3 	udiv	r3, r2, r3
 8009166:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	2b0f      	cmp	r3, #15
 800916c:	d910      	bls.n	8009190 <UART_SetConfig+0x5c8>
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009174:	d20c      	bcs.n	8009190 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	b29a      	uxth	r2, r3
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60da      	str	r2, [r3, #12]
 8009180:	e009      	b.n	8009196 <UART_SetConfig+0x5ce>
 8009182:	bf00      	nop
 8009184:	40008000 	.word	0x40008000
 8009188:	00f42400 	.word	0x00f42400
 800918c:	0800c2b4 	.word	0x0800c2b4
      }
      else
      {
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2201      	movs	r2, #1
 800919a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2200      	movs	r2, #0
 80091aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2200      	movs	r2, #0
 80091b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80091b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3730      	adds	r7, #48	; 0x30
 80091ba:	46bd      	mov	sp, r7
 80091bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01a      	beq.n	80092d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092be:	d10a      	bne.n	80092d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	605a      	str	r2, [r3, #4]
  }
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b098      	sub	sp, #96	; 0x60
 8009308:	af02      	add	r7, sp, #8
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009314:	f7f9 fe3c 	bl	8002f90 <HAL_GetTick>
 8009318:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b08      	cmp	r3, #8
 8009326:	d12f      	bne.n	8009388 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009330:	2200      	movs	r2, #0
 8009332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f88e 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d022      	beq.n	8009388 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009356:	653b      	str	r3, [r7, #80]	; 0x50
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009360:	647b      	str	r3, [r7, #68]	; 0x44
 8009362:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800936e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e063      	b.n	8009450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d149      	bne.n	800942a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800939e:	2200      	movs	r2, #0
 80093a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f857 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d03c      	beq.n	800942a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	623b      	str	r3, [r7, #32]
   return(result);
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ce:	633b      	str	r3, [r7, #48]	; 0x30
 80093d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e6      	bne.n	80093b0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3308      	adds	r3, #8
 80093e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f023 0301 	bic.w	r3, r3, #1
 80093f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3308      	adds	r3, #8
 8009400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009402:	61fa      	str	r2, [r7, #28]
 8009404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	69b9      	ldr	r1, [r7, #24]
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	617b      	str	r3, [r7, #20]
   return(result);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e5      	bne.n	80093e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e012      	b.n	8009450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3758      	adds	r7, #88	; 0x58
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	4613      	mov	r3, r2
 8009466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009468:	e049      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009470:	d045      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009472:	f7f9 fd8d 	bl	8002f90 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	429a      	cmp	r2, r3
 8009480:	d302      	bcc.n	8009488 <UART_WaitOnFlagUntilTimeout+0x30>
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e048      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	d031      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d110      	bne.n	80094ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2208      	movs	r2, #8
 80094ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 f838 	bl	8009526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2208      	movs	r2, #8
 80094ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e029      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094d8:	d111      	bne.n	80094fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f81e 	bl	8009526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e00f      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	bf0c      	ite	eq
 800950e:	2301      	moveq	r3, #1
 8009510:	2300      	movne	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	429a      	cmp	r2, r3
 800951a:	d0a6      	beq.n	800946a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009526:	b480      	push	{r7}
 8009528:	b095      	sub	sp, #84	; 0x54
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800954c:	643b      	str	r3, [r7, #64]	; 0x40
 800954e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	64bb      	str	r3, [r7, #72]	; 0x48
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3308      	adds	r3, #8
 8009582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009584:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800958a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e3      	bne.n	8009560 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d118      	bne.n	80095d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f023 0310 	bic.w	r3, r3, #16
 80095b4:	647b      	str	r3, [r7, #68]	; 0x44
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095be:	61bb      	str	r3, [r7, #24]
 80095c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6979      	ldr	r1, [r7, #20]
 80095c4:	69ba      	ldr	r2, [r7, #24]
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	613b      	str	r3, [r7, #16]
   return(result);
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e6      	bne.n	80095a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80095e6:	bf00      	nop
 80095e8:	3754      	adds	r7, #84	; 0x54
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_UARTEx_DisableFifoMode+0x16>
 8009604:	2302      	movs	r3, #2
 8009606:	e027      	b.n	8009658 <HAL_UARTEx_DisableFifoMode+0x66>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	; 0x24
 8009614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0201 	bic.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009678:	2302      	movs	r3, #2
 800967a:	e02d      	b.n	80096d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2224      	movs	r2, #36	; 0x24
 8009688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0201 	bic.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f84f 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e02d      	b.n	8009754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2224      	movs	r2, #36	; 0x24
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0201 	bic.w	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f811 	bl	800975c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009768:	2b00      	cmp	r3, #0
 800976a:	d108      	bne.n	800977e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800977c:	e031      	b.n	80097e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800977e:	2308      	movs	r3, #8
 8009780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009782:	2308      	movs	r3, #8
 8009784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	0e5b      	lsrs	r3, r3, #25
 800978e:	b2db      	uxtb	r3, r3
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	0f5b      	lsrs	r3, r3, #29
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	7b3a      	ldrb	r2, [r7, #12]
 80097aa:	4911      	ldr	r1, [pc, #68]	; (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ac:	5c8a      	ldrb	r2, [r1, r2]
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097b2:	7b3a      	ldrb	r2, [r7, #12]
 80097b4:	490f      	ldr	r1, [pc, #60]	; (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	7b7a      	ldrb	r2, [r7, #13]
 80097c8:	4909      	ldr	r1, [pc, #36]	; (80097f0 <UARTEx_SetNbDataToProcess+0x94>)
 80097ca:	5c8a      	ldrb	r2, [r1, r2]
 80097cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097d0:	7b7a      	ldrb	r2, [r7, #13]
 80097d2:	4908      	ldr	r1, [pc, #32]	; (80097f4 <UARTEx_SetNbDataToProcess+0x98>)
 80097d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097da:	b29a      	uxth	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	0800c2cc 	.word	0x0800c2cc
 80097f4:	0800c2d4 	.word	0x0800c2d4

080097f8 <__cvt>:
 80097f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	ec55 4b10 	vmov	r4, r5, d0
 8009800:	2d00      	cmp	r5, #0
 8009802:	460e      	mov	r6, r1
 8009804:	4619      	mov	r1, r3
 8009806:	462b      	mov	r3, r5
 8009808:	bfbb      	ittet	lt
 800980a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800980e:	461d      	movlt	r5, r3
 8009810:	2300      	movge	r3, #0
 8009812:	232d      	movlt	r3, #45	; 0x2d
 8009814:	700b      	strb	r3, [r1, #0]
 8009816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009818:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800981c:	4691      	mov	r9, r2
 800981e:	f023 0820 	bic.w	r8, r3, #32
 8009822:	bfbc      	itt	lt
 8009824:	4622      	movlt	r2, r4
 8009826:	4614      	movlt	r4, r2
 8009828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800982c:	d005      	beq.n	800983a <__cvt+0x42>
 800982e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009832:	d100      	bne.n	8009836 <__cvt+0x3e>
 8009834:	3601      	adds	r6, #1
 8009836:	2102      	movs	r1, #2
 8009838:	e000      	b.n	800983c <__cvt+0x44>
 800983a:	2103      	movs	r1, #3
 800983c:	ab03      	add	r3, sp, #12
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	ab02      	add	r3, sp, #8
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	ec45 4b10 	vmov	d0, r4, r5
 8009848:	4653      	mov	r3, sl
 800984a:	4632      	mov	r2, r6
 800984c:	f000 fe64 	bl	800a518 <_dtoa_r>
 8009850:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009854:	4607      	mov	r7, r0
 8009856:	d102      	bne.n	800985e <__cvt+0x66>
 8009858:	f019 0f01 	tst.w	r9, #1
 800985c:	d022      	beq.n	80098a4 <__cvt+0xac>
 800985e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009862:	eb07 0906 	add.w	r9, r7, r6
 8009866:	d110      	bne.n	800988a <__cvt+0x92>
 8009868:	783b      	ldrb	r3, [r7, #0]
 800986a:	2b30      	cmp	r3, #48	; 0x30
 800986c:	d10a      	bne.n	8009884 <__cvt+0x8c>
 800986e:	2200      	movs	r2, #0
 8009870:	2300      	movs	r3, #0
 8009872:	4620      	mov	r0, r4
 8009874:	4629      	mov	r1, r5
 8009876:	f7f7 f93f 	bl	8000af8 <__aeabi_dcmpeq>
 800987a:	b918      	cbnz	r0, 8009884 <__cvt+0x8c>
 800987c:	f1c6 0601 	rsb	r6, r6, #1
 8009880:	f8ca 6000 	str.w	r6, [sl]
 8009884:	f8da 3000 	ldr.w	r3, [sl]
 8009888:	4499      	add	r9, r3
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	4620      	mov	r0, r4
 8009890:	4629      	mov	r1, r5
 8009892:	f7f7 f931 	bl	8000af8 <__aeabi_dcmpeq>
 8009896:	b108      	cbz	r0, 800989c <__cvt+0xa4>
 8009898:	f8cd 900c 	str.w	r9, [sp, #12]
 800989c:	2230      	movs	r2, #48	; 0x30
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	454b      	cmp	r3, r9
 80098a2:	d307      	bcc.n	80098b4 <__cvt+0xbc>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098a8:	1bdb      	subs	r3, r3, r7
 80098aa:	4638      	mov	r0, r7
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	b004      	add	sp, #16
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	1c59      	adds	r1, r3, #1
 80098b6:	9103      	str	r1, [sp, #12]
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	e7f0      	b.n	800989e <__cvt+0xa6>

080098bc <__exponent>:
 80098bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098be:	4603      	mov	r3, r0
 80098c0:	2900      	cmp	r1, #0
 80098c2:	bfb8      	it	lt
 80098c4:	4249      	neglt	r1, r1
 80098c6:	f803 2b02 	strb.w	r2, [r3], #2
 80098ca:	bfb4      	ite	lt
 80098cc:	222d      	movlt	r2, #45	; 0x2d
 80098ce:	222b      	movge	r2, #43	; 0x2b
 80098d0:	2909      	cmp	r1, #9
 80098d2:	7042      	strb	r2, [r0, #1]
 80098d4:	dd2a      	ble.n	800992c <__exponent+0x70>
 80098d6:	f10d 0207 	add.w	r2, sp, #7
 80098da:	4617      	mov	r7, r2
 80098dc:	260a      	movs	r6, #10
 80098de:	4694      	mov	ip, r2
 80098e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80098e4:	fb06 1415 	mls	r4, r6, r5, r1
 80098e8:	3430      	adds	r4, #48	; 0x30
 80098ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80098ee:	460c      	mov	r4, r1
 80098f0:	2c63      	cmp	r4, #99	; 0x63
 80098f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80098f6:	4629      	mov	r1, r5
 80098f8:	dcf1      	bgt.n	80098de <__exponent+0x22>
 80098fa:	3130      	adds	r1, #48	; 0x30
 80098fc:	f1ac 0402 	sub.w	r4, ip, #2
 8009900:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009904:	1c41      	adds	r1, r0, #1
 8009906:	4622      	mov	r2, r4
 8009908:	42ba      	cmp	r2, r7
 800990a:	d30a      	bcc.n	8009922 <__exponent+0x66>
 800990c:	f10d 0209 	add.w	r2, sp, #9
 8009910:	eba2 020c 	sub.w	r2, r2, ip
 8009914:	42bc      	cmp	r4, r7
 8009916:	bf88      	it	hi
 8009918:	2200      	movhi	r2, #0
 800991a:	4413      	add	r3, r2
 800991c:	1a18      	subs	r0, r3, r0
 800991e:	b003      	add	sp, #12
 8009920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009922:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009926:	f801 5f01 	strb.w	r5, [r1, #1]!
 800992a:	e7ed      	b.n	8009908 <__exponent+0x4c>
 800992c:	2330      	movs	r3, #48	; 0x30
 800992e:	3130      	adds	r1, #48	; 0x30
 8009930:	7083      	strb	r3, [r0, #2]
 8009932:	70c1      	strb	r1, [r0, #3]
 8009934:	1d03      	adds	r3, r0, #4
 8009936:	e7f1      	b.n	800991c <__exponent+0x60>

08009938 <_printf_float>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ed2d 8b02 	vpush	{d8}
 8009940:	b08d      	sub	sp, #52	; 0x34
 8009942:	460c      	mov	r4, r1
 8009944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009948:	4616      	mov	r6, r2
 800994a:	461f      	mov	r7, r3
 800994c:	4605      	mov	r5, r0
 800994e:	f000 fce1 	bl	800a314 <_localeconv_r>
 8009952:	f8d0 a000 	ldr.w	sl, [r0]
 8009956:	4650      	mov	r0, sl
 8009958:	f7f6 fca2 	bl	80002a0 <strlen>
 800995c:	2300      	movs	r3, #0
 800995e:	930a      	str	r3, [sp, #40]	; 0x28
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	f8d8 3000 	ldr.w	r3, [r8]
 8009968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800996c:	3307      	adds	r3, #7
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	f103 0208 	add.w	r2, r3, #8
 8009976:	f8c8 2000 	str.w	r2, [r8]
 800997a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800997e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009982:	9307      	str	r3, [sp, #28]
 8009984:	f8cd 8018 	str.w	r8, [sp, #24]
 8009988:	ee08 0a10 	vmov	s16, r0
 800998c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009994:	4b9e      	ldr	r3, [pc, #632]	; (8009c10 <_printf_float+0x2d8>)
 8009996:	f04f 32ff 	mov.w	r2, #4294967295
 800999a:	f7f7 f8df 	bl	8000b5c <__aeabi_dcmpun>
 800999e:	bb88      	cbnz	r0, 8009a04 <_printf_float+0xcc>
 80099a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099a4:	4b9a      	ldr	r3, [pc, #616]	; (8009c10 <_printf_float+0x2d8>)
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	f7f7 f8b9 	bl	8000b20 <__aeabi_dcmple>
 80099ae:	bb48      	cbnz	r0, 8009a04 <_printf_float+0xcc>
 80099b0:	2200      	movs	r2, #0
 80099b2:	2300      	movs	r3, #0
 80099b4:	4640      	mov	r0, r8
 80099b6:	4649      	mov	r1, r9
 80099b8:	f7f7 f8a8 	bl	8000b0c <__aeabi_dcmplt>
 80099bc:	b110      	cbz	r0, 80099c4 <_printf_float+0x8c>
 80099be:	232d      	movs	r3, #45	; 0x2d
 80099c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c4:	4a93      	ldr	r2, [pc, #588]	; (8009c14 <_printf_float+0x2dc>)
 80099c6:	4b94      	ldr	r3, [pc, #592]	; (8009c18 <_printf_float+0x2e0>)
 80099c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099cc:	bf94      	ite	ls
 80099ce:	4690      	movls	r8, r2
 80099d0:	4698      	movhi	r8, r3
 80099d2:	2303      	movs	r3, #3
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	9b05      	ldr	r3, [sp, #20]
 80099d8:	f023 0304 	bic.w	r3, r3, #4
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	f04f 0900 	mov.w	r9, #0
 80099e2:	9700      	str	r7, [sp, #0]
 80099e4:	4633      	mov	r3, r6
 80099e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80099e8:	4621      	mov	r1, r4
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 f9da 	bl	8009da4 <_printf_common>
 80099f0:	3001      	adds	r0, #1
 80099f2:	f040 8090 	bne.w	8009b16 <_printf_float+0x1de>
 80099f6:	f04f 30ff 	mov.w	r0, #4294967295
 80099fa:	b00d      	add	sp, #52	; 0x34
 80099fc:	ecbd 8b02 	vpop	{d8}
 8009a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f7f7 f8a6 	bl	8000b5c <__aeabi_dcmpun>
 8009a10:	b140      	cbz	r0, 8009a24 <_printf_float+0xec>
 8009a12:	464b      	mov	r3, r9
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfbc      	itt	lt
 8009a18:	232d      	movlt	r3, #45	; 0x2d
 8009a1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a1e:	4a7f      	ldr	r2, [pc, #508]	; (8009c1c <_printf_float+0x2e4>)
 8009a20:	4b7f      	ldr	r3, [pc, #508]	; (8009c20 <_printf_float+0x2e8>)
 8009a22:	e7d1      	b.n	80099c8 <_printf_float+0x90>
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a2a:	9206      	str	r2, [sp, #24]
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	d13f      	bne.n	8009ab0 <_printf_float+0x178>
 8009a30:	2306      	movs	r3, #6
 8009a32:	6063      	str	r3, [r4, #4]
 8009a34:	9b05      	ldr	r3, [sp, #20]
 8009a36:	6861      	ldr	r1, [r4, #4]
 8009a38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9303      	str	r3, [sp, #12]
 8009a40:	ab0a      	add	r3, sp, #40	; 0x28
 8009a42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a46:	ab09      	add	r3, sp, #36	; 0x24
 8009a48:	ec49 8b10 	vmov	d0, r8, r9
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a54:	4628      	mov	r0, r5
 8009a56:	f7ff fecf 	bl	80097f8 <__cvt>
 8009a5a:	9b06      	ldr	r3, [sp, #24]
 8009a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a5e:	2b47      	cmp	r3, #71	; 0x47
 8009a60:	4680      	mov	r8, r0
 8009a62:	d108      	bne.n	8009a76 <_printf_float+0x13e>
 8009a64:	1cc8      	adds	r0, r1, #3
 8009a66:	db02      	blt.n	8009a6e <_printf_float+0x136>
 8009a68:	6863      	ldr	r3, [r4, #4]
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	dd41      	ble.n	8009af2 <_printf_float+0x1ba>
 8009a6e:	f1ab 0302 	sub.w	r3, fp, #2
 8009a72:	fa5f fb83 	uxtb.w	fp, r3
 8009a76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a7a:	d820      	bhi.n	8009abe <_printf_float+0x186>
 8009a7c:	3901      	subs	r1, #1
 8009a7e:	465a      	mov	r2, fp
 8009a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a84:	9109      	str	r1, [sp, #36]	; 0x24
 8009a86:	f7ff ff19 	bl	80098bc <__exponent>
 8009a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8c:	1813      	adds	r3, r2, r0
 8009a8e:	2a01      	cmp	r2, #1
 8009a90:	4681      	mov	r9, r0
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	dc02      	bgt.n	8009a9c <_printf_float+0x164>
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	07d2      	lsls	r2, r2, #31
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_float+0x168>
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	6123      	str	r3, [r4, #16]
 8009aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d09c      	beq.n	80099e2 <_printf_float+0xaa>
 8009aa8:	232d      	movs	r3, #45	; 0x2d
 8009aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aae:	e798      	b.n	80099e2 <_printf_float+0xaa>
 8009ab0:	9a06      	ldr	r2, [sp, #24]
 8009ab2:	2a47      	cmp	r2, #71	; 0x47
 8009ab4:	d1be      	bne.n	8009a34 <_printf_float+0xfc>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1bc      	bne.n	8009a34 <_printf_float+0xfc>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e7b9      	b.n	8009a32 <_printf_float+0xfa>
 8009abe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ac2:	d118      	bne.n	8009af6 <_printf_float+0x1be>
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	6863      	ldr	r3, [r4, #4]
 8009ac8:	dd0b      	ble.n	8009ae2 <_printf_float+0x1aa>
 8009aca:	6121      	str	r1, [r4, #16]
 8009acc:	b913      	cbnz	r3, 8009ad4 <_printf_float+0x19c>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	07d0      	lsls	r0, r2, #31
 8009ad2:	d502      	bpl.n	8009ada <_printf_float+0x1a2>
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	440b      	add	r3, r1
 8009ad8:	6123      	str	r3, [r4, #16]
 8009ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8009adc:	f04f 0900 	mov.w	r9, #0
 8009ae0:	e7de      	b.n	8009aa0 <_printf_float+0x168>
 8009ae2:	b913      	cbnz	r3, 8009aea <_printf_float+0x1b2>
 8009ae4:	6822      	ldr	r2, [r4, #0]
 8009ae6:	07d2      	lsls	r2, r2, #31
 8009ae8:	d501      	bpl.n	8009aee <_printf_float+0x1b6>
 8009aea:	3302      	adds	r3, #2
 8009aec:	e7f4      	b.n	8009ad8 <_printf_float+0x1a0>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e7f2      	b.n	8009ad8 <_printf_float+0x1a0>
 8009af2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af8:	4299      	cmp	r1, r3
 8009afa:	db05      	blt.n	8009b08 <_printf_float+0x1d0>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	6121      	str	r1, [r4, #16]
 8009b00:	07d8      	lsls	r0, r3, #31
 8009b02:	d5ea      	bpl.n	8009ada <_printf_float+0x1a2>
 8009b04:	1c4b      	adds	r3, r1, #1
 8009b06:	e7e7      	b.n	8009ad8 <_printf_float+0x1a0>
 8009b08:	2900      	cmp	r1, #0
 8009b0a:	bfd4      	ite	le
 8009b0c:	f1c1 0202 	rsble	r2, r1, #2
 8009b10:	2201      	movgt	r2, #1
 8009b12:	4413      	add	r3, r2
 8009b14:	e7e0      	b.n	8009ad8 <_printf_float+0x1a0>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	055a      	lsls	r2, r3, #21
 8009b1a:	d407      	bmi.n	8009b2c <_printf_float+0x1f4>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	4642      	mov	r2, r8
 8009b20:	4631      	mov	r1, r6
 8009b22:	4628      	mov	r0, r5
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	d12c      	bne.n	8009b84 <_printf_float+0x24c>
 8009b2a:	e764      	b.n	80099f6 <_printf_float+0xbe>
 8009b2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b30:	f240 80e0 	bls.w	8009cf4 <_printf_float+0x3bc>
 8009b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f7f6 ffdc 	bl	8000af8 <__aeabi_dcmpeq>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d034      	beq.n	8009bae <_printf_float+0x276>
 8009b44:	4a37      	ldr	r2, [pc, #220]	; (8009c24 <_printf_float+0x2ec>)
 8009b46:	2301      	movs	r3, #1
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f af51 	beq.w	80099f6 <_printf_float+0xbe>
 8009b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	db02      	blt.n	8009b62 <_printf_float+0x22a>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	07d8      	lsls	r0, r3, #31
 8009b60:	d510      	bpl.n	8009b84 <_printf_float+0x24c>
 8009b62:	ee18 3a10 	vmov	r3, s16
 8009b66:	4652      	mov	r2, sl
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af41 	beq.w	80099f6 <_printf_float+0xbe>
 8009b74:	f04f 0800 	mov.w	r8, #0
 8009b78:	f104 091a 	add.w	r9, r4, #26
 8009b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	4543      	cmp	r3, r8
 8009b82:	dc09      	bgt.n	8009b98 <_printf_float+0x260>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	079b      	lsls	r3, r3, #30
 8009b88:	f100 8107 	bmi.w	8009d9a <_printf_float+0x462>
 8009b8c:	68e0      	ldr	r0, [r4, #12]
 8009b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b90:	4298      	cmp	r0, r3
 8009b92:	bfb8      	it	lt
 8009b94:	4618      	movlt	r0, r3
 8009b96:	e730      	b.n	80099fa <_printf_float+0xc2>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	464a      	mov	r2, r9
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f43f af27 	beq.w	80099f6 <_printf_float+0xbe>
 8009ba8:	f108 0801 	add.w	r8, r8, #1
 8009bac:	e7e6      	b.n	8009b7c <_printf_float+0x244>
 8009bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dc39      	bgt.n	8009c28 <_printf_float+0x2f0>
 8009bb4:	4a1b      	ldr	r2, [pc, #108]	; (8009c24 <_printf_float+0x2ec>)
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f af19 	beq.w	80099f6 <_printf_float+0xbe>
 8009bc4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	d102      	bne.n	8009bd2 <_printf_float+0x29a>
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d5d8      	bpl.n	8009b84 <_printf_float+0x24c>
 8009bd2:	ee18 3a10 	vmov	r3, s16
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f af09 	beq.w	80099f6 <_printf_float+0xbe>
 8009be4:	f04f 0900 	mov.w	r9, #0
 8009be8:	f104 0a1a 	add.w	sl, r4, #26
 8009bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bee:	425b      	negs	r3, r3
 8009bf0:	454b      	cmp	r3, r9
 8009bf2:	dc01      	bgt.n	8009bf8 <_printf_float+0x2c0>
 8009bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf6:	e792      	b.n	8009b1e <_printf_float+0x1e6>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	f43f aef7 	beq.w	80099f6 <_printf_float+0xbe>
 8009c08:	f109 0901 	add.w	r9, r9, #1
 8009c0c:	e7ee      	b.n	8009bec <_printf_float+0x2b4>
 8009c0e:	bf00      	nop
 8009c10:	7fefffff 	.word	0x7fefffff
 8009c14:	0800c2dc 	.word	0x0800c2dc
 8009c18:	0800c2e0 	.word	0x0800c2e0
 8009c1c:	0800c2e4 	.word	0x0800c2e4
 8009c20:	0800c2e8 	.word	0x0800c2e8
 8009c24:	0800c2ec 	.word	0x0800c2ec
 8009c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	bfa8      	it	ge
 8009c30:	461a      	movge	r2, r3
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	4691      	mov	r9, r2
 8009c36:	dc37      	bgt.n	8009ca8 <_printf_float+0x370>
 8009c38:	f04f 0b00 	mov.w	fp, #0
 8009c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c40:	f104 021a 	add.w	r2, r4, #26
 8009c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c46:	9305      	str	r3, [sp, #20]
 8009c48:	eba3 0309 	sub.w	r3, r3, r9
 8009c4c:	455b      	cmp	r3, fp
 8009c4e:	dc33      	bgt.n	8009cb8 <_printf_float+0x380>
 8009c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c54:	429a      	cmp	r2, r3
 8009c56:	db3b      	blt.n	8009cd0 <_printf_float+0x398>
 8009c58:	6823      	ldr	r3, [r4, #0]
 8009c5a:	07da      	lsls	r2, r3, #31
 8009c5c:	d438      	bmi.n	8009cd0 <_printf_float+0x398>
 8009c5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c62:	eba2 0903 	sub.w	r9, r2, r3
 8009c66:	9b05      	ldr	r3, [sp, #20]
 8009c68:	1ad2      	subs	r2, r2, r3
 8009c6a:	4591      	cmp	r9, r2
 8009c6c:	bfa8      	it	ge
 8009c6e:	4691      	movge	r9, r2
 8009c70:	f1b9 0f00 	cmp.w	r9, #0
 8009c74:	dc35      	bgt.n	8009ce2 <_printf_float+0x3aa>
 8009c76:	f04f 0800 	mov.w	r8, #0
 8009c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c7e:	f104 0a1a 	add.w	sl, r4, #26
 8009c82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c86:	1a9b      	subs	r3, r3, r2
 8009c88:	eba3 0309 	sub.w	r3, r3, r9
 8009c8c:	4543      	cmp	r3, r8
 8009c8e:	f77f af79 	ble.w	8009b84 <_printf_float+0x24c>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4652      	mov	r2, sl
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	f43f aeaa 	beq.w	80099f6 <_printf_float+0xbe>
 8009ca2:	f108 0801 	add.w	r8, r8, #1
 8009ca6:	e7ec      	b.n	8009c82 <_printf_float+0x34a>
 8009ca8:	4613      	mov	r3, r2
 8009caa:	4631      	mov	r1, r6
 8009cac:	4642      	mov	r2, r8
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d1c0      	bne.n	8009c38 <_printf_float+0x300>
 8009cb6:	e69e      	b.n	80099f6 <_printf_float+0xbe>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	9205      	str	r2, [sp, #20]
 8009cc0:	47b8      	blx	r7
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	f43f ae97 	beq.w	80099f6 <_printf_float+0xbe>
 8009cc8:	9a05      	ldr	r2, [sp, #20]
 8009cca:	f10b 0b01 	add.w	fp, fp, #1
 8009cce:	e7b9      	b.n	8009c44 <_printf_float+0x30c>
 8009cd0:	ee18 3a10 	vmov	r3, s16
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d1be      	bne.n	8009c5e <_printf_float+0x326>
 8009ce0:	e689      	b.n	80099f6 <_printf_float+0xbe>
 8009ce2:	9a05      	ldr	r2, [sp, #20]
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	4442      	add	r2, r8
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d1c1      	bne.n	8009c76 <_printf_float+0x33e>
 8009cf2:	e680      	b.n	80099f6 <_printf_float+0xbe>
 8009cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cf6:	2a01      	cmp	r2, #1
 8009cf8:	dc01      	bgt.n	8009cfe <_printf_float+0x3c6>
 8009cfa:	07db      	lsls	r3, r3, #31
 8009cfc:	d53a      	bpl.n	8009d74 <_printf_float+0x43c>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4642      	mov	r2, r8
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae74 	beq.w	80099f6 <_printf_float+0xbe>
 8009d0e:	ee18 3a10 	vmov	r3, s16
 8009d12:	4652      	mov	r2, sl
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f ae6b 	beq.w	80099f6 <_printf_float+0xbe>
 8009d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d24:	2200      	movs	r2, #0
 8009d26:	2300      	movs	r3, #0
 8009d28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009d2c:	f7f6 fee4 	bl	8000af8 <__aeabi_dcmpeq>
 8009d30:	b9d8      	cbnz	r0, 8009d6a <_printf_float+0x432>
 8009d32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d36:	f108 0201 	add.w	r2, r8, #1
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	d10e      	bne.n	8009d62 <_printf_float+0x42a>
 8009d44:	e657      	b.n	80099f6 <_printf_float+0xbe>
 8009d46:	2301      	movs	r3, #1
 8009d48:	4652      	mov	r2, sl
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f ae50 	beq.w	80099f6 <_printf_float+0xbe>
 8009d56:	f108 0801 	add.w	r8, r8, #1
 8009d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	4543      	cmp	r3, r8
 8009d60:	dcf1      	bgt.n	8009d46 <_printf_float+0x40e>
 8009d62:	464b      	mov	r3, r9
 8009d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d68:	e6da      	b.n	8009b20 <_printf_float+0x1e8>
 8009d6a:	f04f 0800 	mov.w	r8, #0
 8009d6e:	f104 0a1a 	add.w	sl, r4, #26
 8009d72:	e7f2      	b.n	8009d5a <_printf_float+0x422>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4642      	mov	r2, r8
 8009d78:	e7df      	b.n	8009d3a <_printf_float+0x402>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	464a      	mov	r2, r9
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae36 	beq.w	80099f6 <_printf_float+0xbe>
 8009d8a:	f108 0801 	add.w	r8, r8, #1
 8009d8e:	68e3      	ldr	r3, [r4, #12]
 8009d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d92:	1a5b      	subs	r3, r3, r1
 8009d94:	4543      	cmp	r3, r8
 8009d96:	dcf0      	bgt.n	8009d7a <_printf_float+0x442>
 8009d98:	e6f8      	b.n	8009b8c <_printf_float+0x254>
 8009d9a:	f04f 0800 	mov.w	r8, #0
 8009d9e:	f104 0919 	add.w	r9, r4, #25
 8009da2:	e7f4      	b.n	8009d8e <_printf_float+0x456>

08009da4 <_printf_common>:
 8009da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da8:	4616      	mov	r6, r2
 8009daa:	4699      	mov	r9, r3
 8009dac:	688a      	ldr	r2, [r1, #8]
 8009dae:	690b      	ldr	r3, [r1, #16]
 8009db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	bfb8      	it	lt
 8009db8:	4613      	movlt	r3, r2
 8009dba:	6033      	str	r3, [r6, #0]
 8009dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	b10a      	cbz	r2, 8009dca <_printf_common+0x26>
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	6033      	str	r3, [r6, #0]
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	0699      	lsls	r1, r3, #26
 8009dce:	bf42      	ittt	mi
 8009dd0:	6833      	ldrmi	r3, [r6, #0]
 8009dd2:	3302      	addmi	r3, #2
 8009dd4:	6033      	strmi	r3, [r6, #0]
 8009dd6:	6825      	ldr	r5, [r4, #0]
 8009dd8:	f015 0506 	ands.w	r5, r5, #6
 8009ddc:	d106      	bne.n	8009dec <_printf_common+0x48>
 8009dde:	f104 0a19 	add.w	sl, r4, #25
 8009de2:	68e3      	ldr	r3, [r4, #12]
 8009de4:	6832      	ldr	r2, [r6, #0]
 8009de6:	1a9b      	subs	r3, r3, r2
 8009de8:	42ab      	cmp	r3, r5
 8009dea:	dc26      	bgt.n	8009e3a <_printf_common+0x96>
 8009dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009df0:	1e13      	subs	r3, r2, #0
 8009df2:	6822      	ldr	r2, [r4, #0]
 8009df4:	bf18      	it	ne
 8009df6:	2301      	movne	r3, #1
 8009df8:	0692      	lsls	r2, r2, #26
 8009dfa:	d42b      	bmi.n	8009e54 <_printf_common+0xb0>
 8009dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e00:	4649      	mov	r1, r9
 8009e02:	4638      	mov	r0, r7
 8009e04:	47c0      	blx	r8
 8009e06:	3001      	adds	r0, #1
 8009e08:	d01e      	beq.n	8009e48 <_printf_common+0xa4>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	6922      	ldr	r2, [r4, #16]
 8009e0e:	f003 0306 	and.w	r3, r3, #6
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	bf02      	ittt	eq
 8009e16:	68e5      	ldreq	r5, [r4, #12]
 8009e18:	6833      	ldreq	r3, [r6, #0]
 8009e1a:	1aed      	subeq	r5, r5, r3
 8009e1c:	68a3      	ldr	r3, [r4, #8]
 8009e1e:	bf0c      	ite	eq
 8009e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e24:	2500      	movne	r5, #0
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bfc4      	itt	gt
 8009e2a:	1a9b      	subgt	r3, r3, r2
 8009e2c:	18ed      	addgt	r5, r5, r3
 8009e2e:	2600      	movs	r6, #0
 8009e30:	341a      	adds	r4, #26
 8009e32:	42b5      	cmp	r5, r6
 8009e34:	d11a      	bne.n	8009e6c <_printf_common+0xc8>
 8009e36:	2000      	movs	r0, #0
 8009e38:	e008      	b.n	8009e4c <_printf_common+0xa8>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	4649      	mov	r1, r9
 8009e40:	4638      	mov	r0, r7
 8009e42:	47c0      	blx	r8
 8009e44:	3001      	adds	r0, #1
 8009e46:	d103      	bne.n	8009e50 <_printf_common+0xac>
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e50:	3501      	adds	r5, #1
 8009e52:	e7c6      	b.n	8009de2 <_printf_common+0x3e>
 8009e54:	18e1      	adds	r1, r4, r3
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	2030      	movs	r0, #48	; 0x30
 8009e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e5e:	4422      	add	r2, r4
 8009e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e68:	3302      	adds	r3, #2
 8009e6a:	e7c7      	b.n	8009dfc <_printf_common+0x58>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d0e6      	beq.n	8009e48 <_printf_common+0xa4>
 8009e7a:	3601      	adds	r6, #1
 8009e7c:	e7d9      	b.n	8009e32 <_printf_common+0x8e>
	...

08009e80 <_printf_i>:
 8009e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	7e0f      	ldrb	r7, [r1, #24]
 8009e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e88:	2f78      	cmp	r7, #120	; 0x78
 8009e8a:	4691      	mov	r9, r2
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	469a      	mov	sl, r3
 8009e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e96:	d807      	bhi.n	8009ea8 <_printf_i+0x28>
 8009e98:	2f62      	cmp	r7, #98	; 0x62
 8009e9a:	d80a      	bhi.n	8009eb2 <_printf_i+0x32>
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	f000 80d4 	beq.w	800a04a <_printf_i+0x1ca>
 8009ea2:	2f58      	cmp	r7, #88	; 0x58
 8009ea4:	f000 80c0 	beq.w	800a028 <_printf_i+0x1a8>
 8009ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009eb0:	e03a      	b.n	8009f28 <_printf_i+0xa8>
 8009eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eb6:	2b15      	cmp	r3, #21
 8009eb8:	d8f6      	bhi.n	8009ea8 <_printf_i+0x28>
 8009eba:	a101      	add	r1, pc, #4	; (adr r1, 8009ec0 <_printf_i+0x40>)
 8009ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ec0:	08009f19 	.word	0x08009f19
 8009ec4:	08009f2d 	.word	0x08009f2d
 8009ec8:	08009ea9 	.word	0x08009ea9
 8009ecc:	08009ea9 	.word	0x08009ea9
 8009ed0:	08009ea9 	.word	0x08009ea9
 8009ed4:	08009ea9 	.word	0x08009ea9
 8009ed8:	08009f2d 	.word	0x08009f2d
 8009edc:	08009ea9 	.word	0x08009ea9
 8009ee0:	08009ea9 	.word	0x08009ea9
 8009ee4:	08009ea9 	.word	0x08009ea9
 8009ee8:	08009ea9 	.word	0x08009ea9
 8009eec:	0800a031 	.word	0x0800a031
 8009ef0:	08009f59 	.word	0x08009f59
 8009ef4:	08009feb 	.word	0x08009feb
 8009ef8:	08009ea9 	.word	0x08009ea9
 8009efc:	08009ea9 	.word	0x08009ea9
 8009f00:	0800a053 	.word	0x0800a053
 8009f04:	08009ea9 	.word	0x08009ea9
 8009f08:	08009f59 	.word	0x08009f59
 8009f0c:	08009ea9 	.word	0x08009ea9
 8009f10:	08009ea9 	.word	0x08009ea9
 8009f14:	08009ff3 	.word	0x08009ff3
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	1d1a      	adds	r2, r3, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	602a      	str	r2, [r5, #0]
 8009f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e09f      	b.n	800a06c <_printf_i+0x1ec>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	682b      	ldr	r3, [r5, #0]
 8009f30:	0607      	lsls	r7, r0, #24
 8009f32:	f103 0104 	add.w	r1, r3, #4
 8009f36:	6029      	str	r1, [r5, #0]
 8009f38:	d501      	bpl.n	8009f3e <_printf_i+0xbe>
 8009f3a:	681e      	ldr	r6, [r3, #0]
 8009f3c:	e003      	b.n	8009f46 <_printf_i+0xc6>
 8009f3e:	0646      	lsls	r6, r0, #25
 8009f40:	d5fb      	bpl.n	8009f3a <_printf_i+0xba>
 8009f42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	da03      	bge.n	8009f52 <_printf_i+0xd2>
 8009f4a:	232d      	movs	r3, #45	; 0x2d
 8009f4c:	4276      	negs	r6, r6
 8009f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f52:	485a      	ldr	r0, [pc, #360]	; (800a0bc <_printf_i+0x23c>)
 8009f54:	230a      	movs	r3, #10
 8009f56:	e012      	b.n	8009f7e <_printf_i+0xfe>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	6820      	ldr	r0, [r4, #0]
 8009f5c:	1d19      	adds	r1, r3, #4
 8009f5e:	6029      	str	r1, [r5, #0]
 8009f60:	0605      	lsls	r5, r0, #24
 8009f62:	d501      	bpl.n	8009f68 <_printf_i+0xe8>
 8009f64:	681e      	ldr	r6, [r3, #0]
 8009f66:	e002      	b.n	8009f6e <_printf_i+0xee>
 8009f68:	0641      	lsls	r1, r0, #25
 8009f6a:	d5fb      	bpl.n	8009f64 <_printf_i+0xe4>
 8009f6c:	881e      	ldrh	r6, [r3, #0]
 8009f6e:	4853      	ldr	r0, [pc, #332]	; (800a0bc <_printf_i+0x23c>)
 8009f70:	2f6f      	cmp	r7, #111	; 0x6f
 8009f72:	bf0c      	ite	eq
 8009f74:	2308      	moveq	r3, #8
 8009f76:	230a      	movne	r3, #10
 8009f78:	2100      	movs	r1, #0
 8009f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f7e:	6865      	ldr	r5, [r4, #4]
 8009f80:	60a5      	str	r5, [r4, #8]
 8009f82:	2d00      	cmp	r5, #0
 8009f84:	bfa2      	ittt	ge
 8009f86:	6821      	ldrge	r1, [r4, #0]
 8009f88:	f021 0104 	bicge.w	r1, r1, #4
 8009f8c:	6021      	strge	r1, [r4, #0]
 8009f8e:	b90e      	cbnz	r6, 8009f94 <_printf_i+0x114>
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	d04b      	beq.n	800a02c <_printf_i+0x1ac>
 8009f94:	4615      	mov	r5, r2
 8009f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8009f9e:	5dc7      	ldrb	r7, [r0, r7]
 8009fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fa4:	4637      	mov	r7, r6
 8009fa6:	42bb      	cmp	r3, r7
 8009fa8:	460e      	mov	r6, r1
 8009faa:	d9f4      	bls.n	8009f96 <_printf_i+0x116>
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d10b      	bne.n	8009fc8 <_printf_i+0x148>
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	07de      	lsls	r6, r3, #31
 8009fb4:	d508      	bpl.n	8009fc8 <_printf_i+0x148>
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	6861      	ldr	r1, [r4, #4]
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	bfde      	ittt	le
 8009fbe:	2330      	movle	r3, #48	; 0x30
 8009fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fc8:	1b52      	subs	r2, r2, r5
 8009fca:	6122      	str	r2, [r4, #16]
 8009fcc:	f8cd a000 	str.w	sl, [sp]
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	aa03      	add	r2, sp, #12
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	f7ff fee4 	bl	8009da4 <_printf_common>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d14a      	bne.n	800a076 <_printf_i+0x1f6>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	b004      	add	sp, #16
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f043 0320 	orr.w	r3, r3, #32
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	4833      	ldr	r0, [pc, #204]	; (800a0c0 <_printf_i+0x240>)
 8009ff4:	2778      	movs	r7, #120	; 0x78
 8009ff6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	6829      	ldr	r1, [r5, #0]
 8009ffe:	061f      	lsls	r7, r3, #24
 800a000:	f851 6b04 	ldr.w	r6, [r1], #4
 800a004:	d402      	bmi.n	800a00c <_printf_i+0x18c>
 800a006:	065f      	lsls	r7, r3, #25
 800a008:	bf48      	it	mi
 800a00a:	b2b6      	uxthmi	r6, r6
 800a00c:	07df      	lsls	r7, r3, #31
 800a00e:	bf48      	it	mi
 800a010:	f043 0320 	orrmi.w	r3, r3, #32
 800a014:	6029      	str	r1, [r5, #0]
 800a016:	bf48      	it	mi
 800a018:	6023      	strmi	r3, [r4, #0]
 800a01a:	b91e      	cbnz	r6, 800a024 <_printf_i+0x1a4>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	f023 0320 	bic.w	r3, r3, #32
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	2310      	movs	r3, #16
 800a026:	e7a7      	b.n	8009f78 <_printf_i+0xf8>
 800a028:	4824      	ldr	r0, [pc, #144]	; (800a0bc <_printf_i+0x23c>)
 800a02a:	e7e4      	b.n	8009ff6 <_printf_i+0x176>
 800a02c:	4615      	mov	r5, r2
 800a02e:	e7bd      	b.n	8009fac <_printf_i+0x12c>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	6826      	ldr	r6, [r4, #0]
 800a034:	6961      	ldr	r1, [r4, #20]
 800a036:	1d18      	adds	r0, r3, #4
 800a038:	6028      	str	r0, [r5, #0]
 800a03a:	0635      	lsls	r5, r6, #24
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0x1c4>
 800a040:	6019      	str	r1, [r3, #0]
 800a042:	e002      	b.n	800a04a <_printf_i+0x1ca>
 800a044:	0670      	lsls	r0, r6, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0x1c0>
 800a048:	8019      	strh	r1, [r3, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	4615      	mov	r5, r2
 800a050:	e7bc      	b.n	8009fcc <_printf_i+0x14c>
 800a052:	682b      	ldr	r3, [r5, #0]
 800a054:	1d1a      	adds	r2, r3, #4
 800a056:	602a      	str	r2, [r5, #0]
 800a058:	681d      	ldr	r5, [r3, #0]
 800a05a:	6862      	ldr	r2, [r4, #4]
 800a05c:	2100      	movs	r1, #0
 800a05e:	4628      	mov	r0, r5
 800a060:	f7f6 f8ce 	bl	8000200 <memchr>
 800a064:	b108      	cbz	r0, 800a06a <_printf_i+0x1ea>
 800a066:	1b40      	subs	r0, r0, r5
 800a068:	6060      	str	r0, [r4, #4]
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	2300      	movs	r3, #0
 800a070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a074:	e7aa      	b.n	8009fcc <_printf_i+0x14c>
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	462a      	mov	r2, r5
 800a07a:	4649      	mov	r1, r9
 800a07c:	4640      	mov	r0, r8
 800a07e:	47d0      	blx	sl
 800a080:	3001      	adds	r0, #1
 800a082:	d0ad      	beq.n	8009fe0 <_printf_i+0x160>
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	079b      	lsls	r3, r3, #30
 800a088:	d413      	bmi.n	800a0b2 <_printf_i+0x232>
 800a08a:	68e0      	ldr	r0, [r4, #12]
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	4298      	cmp	r0, r3
 800a090:	bfb8      	it	lt
 800a092:	4618      	movlt	r0, r3
 800a094:	e7a6      	b.n	8009fe4 <_printf_i+0x164>
 800a096:	2301      	movs	r3, #1
 800a098:	4632      	mov	r2, r6
 800a09a:	4649      	mov	r1, r9
 800a09c:	4640      	mov	r0, r8
 800a09e:	47d0      	blx	sl
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d09d      	beq.n	8009fe0 <_printf_i+0x160>
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	9903      	ldr	r1, [sp, #12]
 800a0aa:	1a5b      	subs	r3, r3, r1
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dcf2      	bgt.n	800a096 <_printf_i+0x216>
 800a0b0:	e7eb      	b.n	800a08a <_printf_i+0x20a>
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	f104 0619 	add.w	r6, r4, #25
 800a0b8:	e7f5      	b.n	800a0a6 <_printf_i+0x226>
 800a0ba:	bf00      	nop
 800a0bc:	0800c2ee 	.word	0x0800c2ee
 800a0c0:	0800c2ff 	.word	0x0800c2ff

0800a0c4 <std>:
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a0ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0d2:	6083      	str	r3, [r0, #8]
 800a0d4:	8181      	strh	r1, [r0, #12]
 800a0d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a0d8:	81c2      	strh	r2, [r0, #14]
 800a0da:	6183      	str	r3, [r0, #24]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	2208      	movs	r2, #8
 800a0e0:	305c      	adds	r0, #92	; 0x5c
 800a0e2:	f000 f90e 	bl	800a302 <memset>
 800a0e6:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <std+0x58>)
 800a0e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a0ea:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <std+0x5c>)
 800a0ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0ee:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <std+0x60>)
 800a0f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0f2:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <std+0x64>)
 800a0f4:	6323      	str	r3, [r4, #48]	; 0x30
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <std+0x68>)
 800a0f8:	6224      	str	r4, [r4, #32]
 800a0fa:	429c      	cmp	r4, r3
 800a0fc:	d006      	beq.n	800a10c <std+0x48>
 800a0fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a102:	4294      	cmp	r4, r2
 800a104:	d002      	beq.n	800a10c <std+0x48>
 800a106:	33d0      	adds	r3, #208	; 0xd0
 800a108:	429c      	cmp	r4, r3
 800a10a:	d105      	bne.n	800a118 <std+0x54>
 800a10c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a114:	f000 b972 	b.w	800a3fc <__retarget_lock_init_recursive>
 800a118:	bd10      	pop	{r4, pc}
 800a11a:	bf00      	nop
 800a11c:	0800a27d 	.word	0x0800a27d
 800a120:	0800a29f 	.word	0x0800a29f
 800a124:	0800a2d7 	.word	0x0800a2d7
 800a128:	0800a2fb 	.word	0x0800a2fb
 800a12c:	200008e0 	.word	0x200008e0

0800a130 <stdio_exit_handler>:
 800a130:	4a02      	ldr	r2, [pc, #8]	; (800a13c <stdio_exit_handler+0xc>)
 800a132:	4903      	ldr	r1, [pc, #12]	; (800a140 <stdio_exit_handler+0x10>)
 800a134:	4803      	ldr	r0, [pc, #12]	; (800a144 <stdio_exit_handler+0x14>)
 800a136:	f000 b869 	b.w	800a20c <_fwalk_sglue>
 800a13a:	bf00      	nop
 800a13c:	2000000c 	.word	0x2000000c
 800a140:	0800bd89 	.word	0x0800bd89
 800a144:	20000018 	.word	0x20000018

0800a148 <cleanup_stdio>:
 800a148:	6841      	ldr	r1, [r0, #4]
 800a14a:	4b0c      	ldr	r3, [pc, #48]	; (800a17c <cleanup_stdio+0x34>)
 800a14c:	4299      	cmp	r1, r3
 800a14e:	b510      	push	{r4, lr}
 800a150:	4604      	mov	r4, r0
 800a152:	d001      	beq.n	800a158 <cleanup_stdio+0x10>
 800a154:	f001 fe18 	bl	800bd88 <_fflush_r>
 800a158:	68a1      	ldr	r1, [r4, #8]
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <cleanup_stdio+0x38>)
 800a15c:	4299      	cmp	r1, r3
 800a15e:	d002      	beq.n	800a166 <cleanup_stdio+0x1e>
 800a160:	4620      	mov	r0, r4
 800a162:	f001 fe11 	bl	800bd88 <_fflush_r>
 800a166:	68e1      	ldr	r1, [r4, #12]
 800a168:	4b06      	ldr	r3, [pc, #24]	; (800a184 <cleanup_stdio+0x3c>)
 800a16a:	4299      	cmp	r1, r3
 800a16c:	d004      	beq.n	800a178 <cleanup_stdio+0x30>
 800a16e:	4620      	mov	r0, r4
 800a170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a174:	f001 be08 	b.w	800bd88 <_fflush_r>
 800a178:	bd10      	pop	{r4, pc}
 800a17a:	bf00      	nop
 800a17c:	200008e0 	.word	0x200008e0
 800a180:	20000948 	.word	0x20000948
 800a184:	200009b0 	.word	0x200009b0

0800a188 <global_stdio_init.part.0>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <global_stdio_init.part.0+0x30>)
 800a18c:	4c0b      	ldr	r4, [pc, #44]	; (800a1bc <global_stdio_init.part.0+0x34>)
 800a18e:	4a0c      	ldr	r2, [pc, #48]	; (800a1c0 <global_stdio_init.part.0+0x38>)
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	4620      	mov	r0, r4
 800a194:	2200      	movs	r2, #0
 800a196:	2104      	movs	r1, #4
 800a198:	f7ff ff94 	bl	800a0c4 <std>
 800a19c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	2109      	movs	r1, #9
 800a1a4:	f7ff ff8e 	bl	800a0c4 <std>
 800a1a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b2:	2112      	movs	r1, #18
 800a1b4:	f7ff bf86 	b.w	800a0c4 <std>
 800a1b8:	20000a18 	.word	0x20000a18
 800a1bc:	200008e0 	.word	0x200008e0
 800a1c0:	0800a131 	.word	0x0800a131

0800a1c4 <__sfp_lock_acquire>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	; (800a1cc <__sfp_lock_acquire+0x8>)
 800a1c6:	f000 b91a 	b.w	800a3fe <__retarget_lock_acquire_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	20000a21 	.word	0x20000a21

0800a1d0 <__sfp_lock_release>:
 800a1d0:	4801      	ldr	r0, [pc, #4]	; (800a1d8 <__sfp_lock_release+0x8>)
 800a1d2:	f000 b915 	b.w	800a400 <__retarget_lock_release_recursive>
 800a1d6:	bf00      	nop
 800a1d8:	20000a21 	.word	0x20000a21

0800a1dc <__sinit>:
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	4604      	mov	r4, r0
 800a1e0:	f7ff fff0 	bl	800a1c4 <__sfp_lock_acquire>
 800a1e4:	6a23      	ldr	r3, [r4, #32]
 800a1e6:	b11b      	cbz	r3, 800a1f0 <__sinit+0x14>
 800a1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ec:	f7ff bff0 	b.w	800a1d0 <__sfp_lock_release>
 800a1f0:	4b04      	ldr	r3, [pc, #16]	; (800a204 <__sinit+0x28>)
 800a1f2:	6223      	str	r3, [r4, #32]
 800a1f4:	4b04      	ldr	r3, [pc, #16]	; (800a208 <__sinit+0x2c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f5      	bne.n	800a1e8 <__sinit+0xc>
 800a1fc:	f7ff ffc4 	bl	800a188 <global_stdio_init.part.0>
 800a200:	e7f2      	b.n	800a1e8 <__sinit+0xc>
 800a202:	bf00      	nop
 800a204:	0800a149 	.word	0x0800a149
 800a208:	20000a18 	.word	0x20000a18

0800a20c <_fwalk_sglue>:
 800a20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a210:	4607      	mov	r7, r0
 800a212:	4688      	mov	r8, r1
 800a214:	4614      	mov	r4, r2
 800a216:	2600      	movs	r6, #0
 800a218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a21c:	f1b9 0901 	subs.w	r9, r9, #1
 800a220:	d505      	bpl.n	800a22e <_fwalk_sglue+0x22>
 800a222:	6824      	ldr	r4, [r4, #0]
 800a224:	2c00      	cmp	r4, #0
 800a226:	d1f7      	bne.n	800a218 <_fwalk_sglue+0xc>
 800a228:	4630      	mov	r0, r6
 800a22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22e:	89ab      	ldrh	r3, [r5, #12]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d907      	bls.n	800a244 <_fwalk_sglue+0x38>
 800a234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a238:	3301      	adds	r3, #1
 800a23a:	d003      	beq.n	800a244 <_fwalk_sglue+0x38>
 800a23c:	4629      	mov	r1, r5
 800a23e:	4638      	mov	r0, r7
 800a240:	47c0      	blx	r8
 800a242:	4306      	orrs	r6, r0
 800a244:	3568      	adds	r5, #104	; 0x68
 800a246:	e7e9      	b.n	800a21c <_fwalk_sglue+0x10>

0800a248 <iprintf>:
 800a248:	b40f      	push	{r0, r1, r2, r3}
 800a24a:	b507      	push	{r0, r1, r2, lr}
 800a24c:	4906      	ldr	r1, [pc, #24]	; (800a268 <iprintf+0x20>)
 800a24e:	ab04      	add	r3, sp, #16
 800a250:	6808      	ldr	r0, [r1, #0]
 800a252:	f853 2b04 	ldr.w	r2, [r3], #4
 800a256:	6881      	ldr	r1, [r0, #8]
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	f001 fbf5 	bl	800ba48 <_vfiprintf_r>
 800a25e:	b003      	add	sp, #12
 800a260:	f85d eb04 	ldr.w	lr, [sp], #4
 800a264:	b004      	add	sp, #16
 800a266:	4770      	bx	lr
 800a268:	20000064 	.word	0x20000064

0800a26c <putchar>:
 800a26c:	4b02      	ldr	r3, [pc, #8]	; (800a278 <putchar+0xc>)
 800a26e:	4601      	mov	r1, r0
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	6882      	ldr	r2, [r0, #8]
 800a274:	f001 bdb0 	b.w	800bdd8 <_putc_r>
 800a278:	20000064 	.word	0x20000064

0800a27c <__sread>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	460c      	mov	r4, r1
 800a280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a284:	f000 f86c 	bl	800a360 <_read_r>
 800a288:	2800      	cmp	r0, #0
 800a28a:	bfab      	itete	ge
 800a28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a28e:	89a3      	ldrhlt	r3, [r4, #12]
 800a290:	181b      	addge	r3, r3, r0
 800a292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a296:	bfac      	ite	ge
 800a298:	6563      	strge	r3, [r4, #84]	; 0x54
 800a29a:	81a3      	strhlt	r3, [r4, #12]
 800a29c:	bd10      	pop	{r4, pc}

0800a29e <__swrite>:
 800a29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a2:	461f      	mov	r7, r3
 800a2a4:	898b      	ldrh	r3, [r1, #12]
 800a2a6:	05db      	lsls	r3, r3, #23
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	4616      	mov	r6, r2
 800a2ae:	d505      	bpl.n	800a2bc <__swrite+0x1e>
 800a2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f000 f840 	bl	800a33c <_lseek_r>
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	4632      	mov	r2, r6
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d2:	f000 b857 	b.w	800a384 <_write_r>

0800a2d6 <__sseek>:
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2de:	f000 f82d 	bl	800a33c <_lseek_r>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	bf15      	itete	ne
 800a2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2f2:	81a3      	strheq	r3, [r4, #12]
 800a2f4:	bf18      	it	ne
 800a2f6:	81a3      	strhne	r3, [r4, #12]
 800a2f8:	bd10      	pop	{r4, pc}

0800a2fa <__sclose>:
 800a2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fe:	f000 b80d 	b.w	800a31c <_close_r>

0800a302 <memset>:
 800a302:	4402      	add	r2, r0
 800a304:	4603      	mov	r3, r0
 800a306:	4293      	cmp	r3, r2
 800a308:	d100      	bne.n	800a30c <memset+0xa>
 800a30a:	4770      	bx	lr
 800a30c:	f803 1b01 	strb.w	r1, [r3], #1
 800a310:	e7f9      	b.n	800a306 <memset+0x4>
	...

0800a314 <_localeconv_r>:
 800a314:	4800      	ldr	r0, [pc, #0]	; (800a318 <_localeconv_r+0x4>)
 800a316:	4770      	bx	lr
 800a318:	20000158 	.word	0x20000158

0800a31c <_close_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d06      	ldr	r5, [pc, #24]	; (800a338 <_close_r+0x1c>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7f8 fd23 	bl	8002d72 <_close>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d102      	bne.n	800a336 <_close_r+0x1a>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	b103      	cbz	r3, 800a336 <_close_r+0x1a>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	20000a1c 	.word	0x20000a1c

0800a33c <_lseek_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	4d07      	ldr	r5, [pc, #28]	; (800a35c <_lseek_r+0x20>)
 800a340:	4604      	mov	r4, r0
 800a342:	4608      	mov	r0, r1
 800a344:	4611      	mov	r1, r2
 800a346:	2200      	movs	r2, #0
 800a348:	602a      	str	r2, [r5, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	f7f8 fd38 	bl	8002dc0 <_lseek>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_lseek_r+0x1e>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_lseek_r+0x1e>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	20000a1c 	.word	0x20000a1c

0800a360 <_read_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_read_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f8 fcc6 	bl	8002d00 <_read>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_read_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_read_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000a1c 	.word	0x20000a1c

0800a384 <_write_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_write_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f8 fcd1 	bl	8002d3a <_write>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_write_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_write_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20000a1c 	.word	0x20000a1c

0800a3a8 <__errno>:
 800a3a8:	4b01      	ldr	r3, [pc, #4]	; (800a3b0 <__errno+0x8>)
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	20000064 	.word	0x20000064

0800a3b4 <__libc_init_array>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	4d0d      	ldr	r5, [pc, #52]	; (800a3ec <__libc_init_array+0x38>)
 800a3b8:	4c0d      	ldr	r4, [pc, #52]	; (800a3f0 <__libc_init_array+0x3c>)
 800a3ba:	1b64      	subs	r4, r4, r5
 800a3bc:	10a4      	asrs	r4, r4, #2
 800a3be:	2600      	movs	r6, #0
 800a3c0:	42a6      	cmp	r6, r4
 800a3c2:	d109      	bne.n	800a3d8 <__libc_init_array+0x24>
 800a3c4:	4d0b      	ldr	r5, [pc, #44]	; (800a3f4 <__libc_init_array+0x40>)
 800a3c6:	4c0c      	ldr	r4, [pc, #48]	; (800a3f8 <__libc_init_array+0x44>)
 800a3c8:	f001 ff24 	bl	800c214 <_init>
 800a3cc:	1b64      	subs	r4, r4, r5
 800a3ce:	10a4      	asrs	r4, r4, #2
 800a3d0:	2600      	movs	r6, #0
 800a3d2:	42a6      	cmp	r6, r4
 800a3d4:	d105      	bne.n	800a3e2 <__libc_init_array+0x2e>
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3dc:	4798      	blx	r3
 800a3de:	3601      	adds	r6, #1
 800a3e0:	e7ee      	b.n	800a3c0 <__libc_init_array+0xc>
 800a3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e6:	4798      	blx	r3
 800a3e8:	3601      	adds	r6, #1
 800a3ea:	e7f2      	b.n	800a3d2 <__libc_init_array+0x1e>
 800a3ec:	0800c654 	.word	0x0800c654
 800a3f0:	0800c654 	.word	0x0800c654
 800a3f4:	0800c654 	.word	0x0800c654
 800a3f8:	0800c658 	.word	0x0800c658

0800a3fc <__retarget_lock_init_recursive>:
 800a3fc:	4770      	bx	lr

0800a3fe <__retarget_lock_acquire_recursive>:
 800a3fe:	4770      	bx	lr

0800a400 <__retarget_lock_release_recursive>:
 800a400:	4770      	bx	lr

0800a402 <quorem>:
 800a402:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a406:	6903      	ldr	r3, [r0, #16]
 800a408:	690c      	ldr	r4, [r1, #16]
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	4607      	mov	r7, r0
 800a40e:	db7e      	blt.n	800a50e <quorem+0x10c>
 800a410:	3c01      	subs	r4, #1
 800a412:	f101 0814 	add.w	r8, r1, #20
 800a416:	f100 0514 	add.w	r5, r0, #20
 800a41a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a428:	3301      	adds	r3, #1
 800a42a:	429a      	cmp	r2, r3
 800a42c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a430:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a434:	fbb2 f6f3 	udiv	r6, r2, r3
 800a438:	d331      	bcc.n	800a49e <quorem+0x9c>
 800a43a:	f04f 0e00 	mov.w	lr, #0
 800a43e:	4640      	mov	r0, r8
 800a440:	46ac      	mov	ip, r5
 800a442:	46f2      	mov	sl, lr
 800a444:	f850 2b04 	ldr.w	r2, [r0], #4
 800a448:	b293      	uxth	r3, r2
 800a44a:	fb06 e303 	mla	r3, r6, r3, lr
 800a44e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a452:	0c1a      	lsrs	r2, r3, #16
 800a454:	b29b      	uxth	r3, r3
 800a456:	ebaa 0303 	sub.w	r3, sl, r3
 800a45a:	f8dc a000 	ldr.w	sl, [ip]
 800a45e:	fa13 f38a 	uxtah	r3, r3, sl
 800a462:	fb06 220e 	mla	r2, r6, lr, r2
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	9b00      	ldr	r3, [sp, #0]
 800a46a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a46e:	b292      	uxth	r2, r2
 800a470:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a474:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a478:	f8bd 3000 	ldrh.w	r3, [sp]
 800a47c:	4581      	cmp	r9, r0
 800a47e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a482:	f84c 3b04 	str.w	r3, [ip], #4
 800a486:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a48a:	d2db      	bcs.n	800a444 <quorem+0x42>
 800a48c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a490:	b92b      	cbnz	r3, 800a49e <quorem+0x9c>
 800a492:	9b01      	ldr	r3, [sp, #4]
 800a494:	3b04      	subs	r3, #4
 800a496:	429d      	cmp	r5, r3
 800a498:	461a      	mov	r2, r3
 800a49a:	d32c      	bcc.n	800a4f6 <quorem+0xf4>
 800a49c:	613c      	str	r4, [r7, #16]
 800a49e:	4638      	mov	r0, r7
 800a4a0:	f001 f9a8 	bl	800b7f4 <__mcmp>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	db22      	blt.n	800a4ee <quorem+0xec>
 800a4a8:	3601      	adds	r6, #1
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4b2:	f8d1 c000 	ldr.w	ip, [r1]
 800a4b6:	b293      	uxth	r3, r2
 800a4b8:	1ac3      	subs	r3, r0, r3
 800a4ba:	0c12      	lsrs	r2, r2, #16
 800a4bc:	fa13 f38c 	uxtah	r3, r3, ip
 800a4c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a4c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ce:	45c1      	cmp	r9, r8
 800a4d0:	f841 3b04 	str.w	r3, [r1], #4
 800a4d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4d8:	d2e9      	bcs.n	800a4ae <quorem+0xac>
 800a4da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4e2:	b922      	cbnz	r2, 800a4ee <quorem+0xec>
 800a4e4:	3b04      	subs	r3, #4
 800a4e6:	429d      	cmp	r5, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	d30a      	bcc.n	800a502 <quorem+0x100>
 800a4ec:	613c      	str	r4, [r7, #16]
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	b003      	add	sp, #12
 800a4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f6:	6812      	ldr	r2, [r2, #0]
 800a4f8:	3b04      	subs	r3, #4
 800a4fa:	2a00      	cmp	r2, #0
 800a4fc:	d1ce      	bne.n	800a49c <quorem+0x9a>
 800a4fe:	3c01      	subs	r4, #1
 800a500:	e7c9      	b.n	800a496 <quorem+0x94>
 800a502:	6812      	ldr	r2, [r2, #0]
 800a504:	3b04      	subs	r3, #4
 800a506:	2a00      	cmp	r2, #0
 800a508:	d1f0      	bne.n	800a4ec <quorem+0xea>
 800a50a:	3c01      	subs	r4, #1
 800a50c:	e7eb      	b.n	800a4e6 <quorem+0xe4>
 800a50e:	2000      	movs	r0, #0
 800a510:	e7ee      	b.n	800a4f0 <quorem+0xee>
 800a512:	0000      	movs	r0, r0
 800a514:	0000      	movs	r0, r0
	...

0800a518 <_dtoa_r>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	ed2d 8b04 	vpush	{d8-d9}
 800a520:	69c5      	ldr	r5, [r0, #28]
 800a522:	b093      	sub	sp, #76	; 0x4c
 800a524:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a528:	ec57 6b10 	vmov	r6, r7, d0
 800a52c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a530:	9107      	str	r1, [sp, #28]
 800a532:	4604      	mov	r4, r0
 800a534:	920a      	str	r2, [sp, #40]	; 0x28
 800a536:	930d      	str	r3, [sp, #52]	; 0x34
 800a538:	b975      	cbnz	r5, 800a558 <_dtoa_r+0x40>
 800a53a:	2010      	movs	r0, #16
 800a53c:	f000 fe2a 	bl	800b194 <malloc>
 800a540:	4602      	mov	r2, r0
 800a542:	61e0      	str	r0, [r4, #28]
 800a544:	b920      	cbnz	r0, 800a550 <_dtoa_r+0x38>
 800a546:	4bae      	ldr	r3, [pc, #696]	; (800a800 <_dtoa_r+0x2e8>)
 800a548:	21ef      	movs	r1, #239	; 0xef
 800a54a:	48ae      	ldr	r0, [pc, #696]	; (800a804 <_dtoa_r+0x2ec>)
 800a54c:	f001 fd2c 	bl	800bfa8 <__assert_func>
 800a550:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a554:	6005      	str	r5, [r0, #0]
 800a556:	60c5      	str	r5, [r0, #12]
 800a558:	69e3      	ldr	r3, [r4, #28]
 800a55a:	6819      	ldr	r1, [r3, #0]
 800a55c:	b151      	cbz	r1, 800a574 <_dtoa_r+0x5c>
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	604a      	str	r2, [r1, #4]
 800a562:	2301      	movs	r3, #1
 800a564:	4093      	lsls	r3, r2
 800a566:	608b      	str	r3, [r1, #8]
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 ff07 	bl	800b37c <_Bfree>
 800a56e:	69e3      	ldr	r3, [r4, #28]
 800a570:	2200      	movs	r2, #0
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	1e3b      	subs	r3, r7, #0
 800a576:	bfbb      	ittet	lt
 800a578:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	9303      	strlt	r3, [sp, #12]
 800a57e:	2300      	movge	r3, #0
 800a580:	2201      	movlt	r2, #1
 800a582:	bfac      	ite	ge
 800a584:	f8c8 3000 	strge.w	r3, [r8]
 800a588:	f8c8 2000 	strlt.w	r2, [r8]
 800a58c:	4b9e      	ldr	r3, [pc, #632]	; (800a808 <_dtoa_r+0x2f0>)
 800a58e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a592:	ea33 0308 	bics.w	r3, r3, r8
 800a596:	d11b      	bne.n	800a5d0 <_dtoa_r+0xb8>
 800a598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a59a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a5a4:	4333      	orrs	r3, r6
 800a5a6:	f000 8593 	beq.w	800b0d0 <_dtoa_r+0xbb8>
 800a5aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5ac:	b963      	cbnz	r3, 800a5c8 <_dtoa_r+0xb0>
 800a5ae:	4b97      	ldr	r3, [pc, #604]	; (800a80c <_dtoa_r+0x2f4>)
 800a5b0:	e027      	b.n	800a602 <_dtoa_r+0xea>
 800a5b2:	4b97      	ldr	r3, [pc, #604]	; (800a810 <_dtoa_r+0x2f8>)
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	9800      	ldr	r0, [sp, #0]
 800a5be:	b013      	add	sp, #76	; 0x4c
 800a5c0:	ecbd 8b04 	vpop	{d8-d9}
 800a5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c8:	4b90      	ldr	r3, [pc, #576]	; (800a80c <_dtoa_r+0x2f4>)
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	3303      	adds	r3, #3
 800a5ce:	e7f3      	b.n	800a5b8 <_dtoa_r+0xa0>
 800a5d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	ec51 0b17 	vmov	r0, r1, d7
 800a5da:	eeb0 8a47 	vmov.f32	s16, s14
 800a5de:	eef0 8a67 	vmov.f32	s17, s15
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f7f6 fa88 	bl	8000af8 <__aeabi_dcmpeq>
 800a5e8:	4681      	mov	r9, r0
 800a5ea:	b160      	cbz	r0, 800a606 <_dtoa_r+0xee>
 800a5ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 8568 	beq.w	800b0ca <_dtoa_r+0xbb2>
 800a5fa:	4b86      	ldr	r3, [pc, #536]	; (800a814 <_dtoa_r+0x2fc>)
 800a5fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	3b01      	subs	r3, #1
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	e7da      	b.n	800a5bc <_dtoa_r+0xa4>
 800a606:	aa10      	add	r2, sp, #64	; 0x40
 800a608:	a911      	add	r1, sp, #68	; 0x44
 800a60a:	4620      	mov	r0, r4
 800a60c:	eeb0 0a48 	vmov.f32	s0, s16
 800a610:	eef0 0a68 	vmov.f32	s1, s17
 800a614:	f001 f994 	bl	800b940 <__d2b>
 800a618:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a61c:	4682      	mov	sl, r0
 800a61e:	2d00      	cmp	r5, #0
 800a620:	d07f      	beq.n	800a722 <_dtoa_r+0x20a>
 800a622:	ee18 3a90 	vmov	r3, s17
 800a626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a62a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a62e:	ec51 0b18 	vmov	r0, r1, d8
 800a632:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a63a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a63e:	4619      	mov	r1, r3
 800a640:	2200      	movs	r2, #0
 800a642:	4b75      	ldr	r3, [pc, #468]	; (800a818 <_dtoa_r+0x300>)
 800a644:	f7f5 fe38 	bl	80002b8 <__aeabi_dsub>
 800a648:	a367      	add	r3, pc, #412	; (adr r3, 800a7e8 <_dtoa_r+0x2d0>)
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	f7f5 ffeb 	bl	8000628 <__aeabi_dmul>
 800a652:	a367      	add	r3, pc, #412	; (adr r3, 800a7f0 <_dtoa_r+0x2d8>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f7f5 fe30 	bl	80002bc <__adddf3>
 800a65c:	4606      	mov	r6, r0
 800a65e:	4628      	mov	r0, r5
 800a660:	460f      	mov	r7, r1
 800a662:	f7f5 ff77 	bl	8000554 <__aeabi_i2d>
 800a666:	a364      	add	r3, pc, #400	; (adr r3, 800a7f8 <_dtoa_r+0x2e0>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	f7f5 ffdc 	bl	8000628 <__aeabi_dmul>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	f7f5 fe20 	bl	80002bc <__adddf3>
 800a67c:	4606      	mov	r6, r0
 800a67e:	460f      	mov	r7, r1
 800a680:	f7f6 fa82 	bl	8000b88 <__aeabi_d2iz>
 800a684:	2200      	movs	r2, #0
 800a686:	4683      	mov	fp, r0
 800a688:	2300      	movs	r3, #0
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f6 fa3d 	bl	8000b0c <__aeabi_dcmplt>
 800a692:	b148      	cbz	r0, 800a6a8 <_dtoa_r+0x190>
 800a694:	4658      	mov	r0, fp
 800a696:	f7f5 ff5d 	bl	8000554 <__aeabi_i2d>
 800a69a:	4632      	mov	r2, r6
 800a69c:	463b      	mov	r3, r7
 800a69e:	f7f6 fa2b 	bl	8000af8 <__aeabi_dcmpeq>
 800a6a2:	b908      	cbnz	r0, 800a6a8 <_dtoa_r+0x190>
 800a6a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6a8:	f1bb 0f16 	cmp.w	fp, #22
 800a6ac:	d857      	bhi.n	800a75e <_dtoa_r+0x246>
 800a6ae:	4b5b      	ldr	r3, [pc, #364]	; (800a81c <_dtoa_r+0x304>)
 800a6b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	ec51 0b18 	vmov	r0, r1, d8
 800a6bc:	f7f6 fa26 	bl	8000b0c <__aeabi_dcmplt>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d04e      	beq.n	800a762 <_dtoa_r+0x24a>
 800a6c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6ce:	1b5b      	subs	r3, r3, r5
 800a6d0:	1e5a      	subs	r2, r3, #1
 800a6d2:	bf45      	ittet	mi
 800a6d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a6d8:	9305      	strmi	r3, [sp, #20]
 800a6da:	2300      	movpl	r3, #0
 800a6dc:	2300      	movmi	r3, #0
 800a6de:	9206      	str	r2, [sp, #24]
 800a6e0:	bf54      	ite	pl
 800a6e2:	9305      	strpl	r3, [sp, #20]
 800a6e4:	9306      	strmi	r3, [sp, #24]
 800a6e6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ea:	db3c      	blt.n	800a766 <_dtoa_r+0x24e>
 800a6ec:	9b06      	ldr	r3, [sp, #24]
 800a6ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a6f2:	445b      	add	r3, fp
 800a6f4:	9306      	str	r3, [sp, #24]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9308      	str	r3, [sp, #32]
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	2b09      	cmp	r3, #9
 800a6fe:	d868      	bhi.n	800a7d2 <_dtoa_r+0x2ba>
 800a700:	2b05      	cmp	r3, #5
 800a702:	bfc4      	itt	gt
 800a704:	3b04      	subgt	r3, #4
 800a706:	9307      	strgt	r3, [sp, #28]
 800a708:	9b07      	ldr	r3, [sp, #28]
 800a70a:	f1a3 0302 	sub.w	r3, r3, #2
 800a70e:	bfcc      	ite	gt
 800a710:	2500      	movgt	r5, #0
 800a712:	2501      	movle	r5, #1
 800a714:	2b03      	cmp	r3, #3
 800a716:	f200 8085 	bhi.w	800a824 <_dtoa_r+0x30c>
 800a71a:	e8df f003 	tbb	[pc, r3]
 800a71e:	3b2e      	.short	0x3b2e
 800a720:	5839      	.short	0x5839
 800a722:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a726:	441d      	add	r5, r3
 800a728:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a72c:	2b20      	cmp	r3, #32
 800a72e:	bfc1      	itttt	gt
 800a730:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a734:	fa08 f803 	lslgt.w	r8, r8, r3
 800a738:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a73c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a740:	bfd6      	itet	le
 800a742:	f1c3 0320 	rsble	r3, r3, #32
 800a746:	ea48 0003 	orrgt.w	r0, r8, r3
 800a74a:	fa06 f003 	lslle.w	r0, r6, r3
 800a74e:	f7f5 fef1 	bl	8000534 <__aeabi_ui2d>
 800a752:	2201      	movs	r2, #1
 800a754:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a758:	3d01      	subs	r5, #1
 800a75a:	920e      	str	r2, [sp, #56]	; 0x38
 800a75c:	e76f      	b.n	800a63e <_dtoa_r+0x126>
 800a75e:	2301      	movs	r3, #1
 800a760:	e7b3      	b.n	800a6ca <_dtoa_r+0x1b2>
 800a762:	900c      	str	r0, [sp, #48]	; 0x30
 800a764:	e7b2      	b.n	800a6cc <_dtoa_r+0x1b4>
 800a766:	9b05      	ldr	r3, [sp, #20]
 800a768:	eba3 030b 	sub.w	r3, r3, fp
 800a76c:	9305      	str	r3, [sp, #20]
 800a76e:	f1cb 0300 	rsb	r3, fp, #0
 800a772:	9308      	str	r3, [sp, #32]
 800a774:	2300      	movs	r3, #0
 800a776:	930b      	str	r3, [sp, #44]	; 0x2c
 800a778:	e7bf      	b.n	800a6fa <_dtoa_r+0x1e2>
 800a77a:	2300      	movs	r3, #0
 800a77c:	9309      	str	r3, [sp, #36]	; 0x24
 800a77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a780:	2b00      	cmp	r3, #0
 800a782:	dc52      	bgt.n	800a82a <_dtoa_r+0x312>
 800a784:	2301      	movs	r3, #1
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	9304      	str	r3, [sp, #16]
 800a78a:	461a      	mov	r2, r3
 800a78c:	920a      	str	r2, [sp, #40]	; 0x28
 800a78e:	e00b      	b.n	800a7a8 <_dtoa_r+0x290>
 800a790:	2301      	movs	r3, #1
 800a792:	e7f3      	b.n	800a77c <_dtoa_r+0x264>
 800a794:	2300      	movs	r3, #0
 800a796:	9309      	str	r3, [sp, #36]	; 0x24
 800a798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79a:	445b      	add	r3, fp
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	bfb8      	it	lt
 800a7a6:	2301      	movlt	r3, #1
 800a7a8:	69e0      	ldr	r0, [r4, #28]
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	f102 0614 	add.w	r6, r2, #20
 800a7b2:	429e      	cmp	r6, r3
 800a7b4:	d93d      	bls.n	800a832 <_dtoa_r+0x31a>
 800a7b6:	6041      	str	r1, [r0, #4]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 fd9f 	bl	800b2fc <_Balloc>
 800a7be:	9000      	str	r0, [sp, #0]
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d139      	bne.n	800a838 <_dtoa_r+0x320>
 800a7c4:	4b16      	ldr	r3, [pc, #88]	; (800a820 <_dtoa_r+0x308>)
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	f240 11af 	movw	r1, #431	; 0x1af
 800a7cc:	e6bd      	b.n	800a54a <_dtoa_r+0x32>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e7e1      	b.n	800a796 <_dtoa_r+0x27e>
 800a7d2:	2501      	movs	r5, #1
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9307      	str	r3, [sp, #28]
 800a7d8:	9509      	str	r5, [sp, #36]	; 0x24
 800a7da:	f04f 33ff 	mov.w	r3, #4294967295
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2312      	movs	r3, #18
 800a7e6:	e7d1      	b.n	800a78c <_dtoa_r+0x274>
 800a7e8:	636f4361 	.word	0x636f4361
 800a7ec:	3fd287a7 	.word	0x3fd287a7
 800a7f0:	8b60c8b3 	.word	0x8b60c8b3
 800a7f4:	3fc68a28 	.word	0x3fc68a28
 800a7f8:	509f79fb 	.word	0x509f79fb
 800a7fc:	3fd34413 	.word	0x3fd34413
 800a800:	0800c31d 	.word	0x0800c31d
 800a804:	0800c334 	.word	0x0800c334
 800a808:	7ff00000 	.word	0x7ff00000
 800a80c:	0800c319 	.word	0x0800c319
 800a810:	0800c310 	.word	0x0800c310
 800a814:	0800c2ed 	.word	0x0800c2ed
 800a818:	3ff80000 	.word	0x3ff80000
 800a81c:	0800c420 	.word	0x0800c420
 800a820:	0800c38c 	.word	0x0800c38c
 800a824:	2301      	movs	r3, #1
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	e7d7      	b.n	800a7da <_dtoa_r+0x2c2>
 800a82a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	e7ba      	b.n	800a7a8 <_dtoa_r+0x290>
 800a832:	3101      	adds	r1, #1
 800a834:	0052      	lsls	r2, r2, #1
 800a836:	e7ba      	b.n	800a7ae <_dtoa_r+0x296>
 800a838:	69e3      	ldr	r3, [r4, #28]
 800a83a:	9a00      	ldr	r2, [sp, #0]
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	2b0e      	cmp	r3, #14
 800a842:	f200 80a8 	bhi.w	800a996 <_dtoa_r+0x47e>
 800a846:	2d00      	cmp	r5, #0
 800a848:	f000 80a5 	beq.w	800a996 <_dtoa_r+0x47e>
 800a84c:	f1bb 0f00 	cmp.w	fp, #0
 800a850:	dd38      	ble.n	800a8c4 <_dtoa_r+0x3ac>
 800a852:	4bc0      	ldr	r3, [pc, #768]	; (800ab54 <_dtoa_r+0x63c>)
 800a854:	f00b 020f 	and.w	r2, fp, #15
 800a858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a85c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a860:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a864:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a868:	d019      	beq.n	800a89e <_dtoa_r+0x386>
 800a86a:	4bbb      	ldr	r3, [pc, #748]	; (800ab58 <_dtoa_r+0x640>)
 800a86c:	ec51 0b18 	vmov	r0, r1, d8
 800a870:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a874:	f7f6 f802 	bl	800087c <__aeabi_ddiv>
 800a878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a87c:	f008 080f 	and.w	r8, r8, #15
 800a880:	2503      	movs	r5, #3
 800a882:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ab58 <_dtoa_r+0x640>
 800a886:	f1b8 0f00 	cmp.w	r8, #0
 800a88a:	d10a      	bne.n	800a8a2 <_dtoa_r+0x38a>
 800a88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a890:	4632      	mov	r2, r6
 800a892:	463b      	mov	r3, r7
 800a894:	f7f5 fff2 	bl	800087c <__aeabi_ddiv>
 800a898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a89c:	e02b      	b.n	800a8f6 <_dtoa_r+0x3de>
 800a89e:	2502      	movs	r5, #2
 800a8a0:	e7ef      	b.n	800a882 <_dtoa_r+0x36a>
 800a8a2:	f018 0f01 	tst.w	r8, #1
 800a8a6:	d008      	beq.n	800a8ba <_dtoa_r+0x3a2>
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a8b0:	f7f5 feba 	bl	8000628 <__aeabi_dmul>
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	460f      	mov	r7, r1
 800a8ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a8be:	f109 0908 	add.w	r9, r9, #8
 800a8c2:	e7e0      	b.n	800a886 <_dtoa_r+0x36e>
 800a8c4:	f000 809f 	beq.w	800aa06 <_dtoa_r+0x4ee>
 800a8c8:	f1cb 0600 	rsb	r6, fp, #0
 800a8cc:	4ba1      	ldr	r3, [pc, #644]	; (800ab54 <_dtoa_r+0x63c>)
 800a8ce:	4fa2      	ldr	r7, [pc, #648]	; (800ab58 <_dtoa_r+0x640>)
 800a8d0:	f006 020f 	and.w	r2, r6, #15
 800a8d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	ec51 0b18 	vmov	r0, r1, d8
 800a8e0:	f7f5 fea2 	bl	8000628 <__aeabi_dmul>
 800a8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8e8:	1136      	asrs	r6, r6, #4
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2502      	movs	r5, #2
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	d17e      	bne.n	800a9f0 <_dtoa_r+0x4d8>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1d0      	bne.n	800a898 <_dtoa_r+0x380>
 800a8f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8084 	beq.w	800aa0a <_dtoa_r+0x4f2>
 800a902:	4b96      	ldr	r3, [pc, #600]	; (800ab5c <_dtoa_r+0x644>)
 800a904:	2200      	movs	r2, #0
 800a906:	4640      	mov	r0, r8
 800a908:	4649      	mov	r1, r9
 800a90a:	f7f6 f8ff 	bl	8000b0c <__aeabi_dcmplt>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d07b      	beq.n	800aa0a <_dtoa_r+0x4f2>
 800a912:	9b04      	ldr	r3, [sp, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d078      	beq.n	800aa0a <_dtoa_r+0x4f2>
 800a918:	9b01      	ldr	r3, [sp, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	dd39      	ble.n	800a992 <_dtoa_r+0x47a>
 800a91e:	4b90      	ldr	r3, [pc, #576]	; (800ab60 <_dtoa_r+0x648>)
 800a920:	2200      	movs	r2, #0
 800a922:	4640      	mov	r0, r8
 800a924:	4649      	mov	r1, r9
 800a926:	f7f5 fe7f 	bl	8000628 <__aeabi_dmul>
 800a92a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a92e:	9e01      	ldr	r6, [sp, #4]
 800a930:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a934:	3501      	adds	r5, #1
 800a936:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a93a:	4628      	mov	r0, r5
 800a93c:	f7f5 fe0a 	bl	8000554 <__aeabi_i2d>
 800a940:	4642      	mov	r2, r8
 800a942:	464b      	mov	r3, r9
 800a944:	f7f5 fe70 	bl	8000628 <__aeabi_dmul>
 800a948:	4b86      	ldr	r3, [pc, #536]	; (800ab64 <_dtoa_r+0x64c>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	f7f5 fcb6 	bl	80002bc <__adddf3>
 800a950:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a958:	9303      	str	r3, [sp, #12]
 800a95a:	2e00      	cmp	r6, #0
 800a95c:	d158      	bne.n	800aa10 <_dtoa_r+0x4f8>
 800a95e:	4b82      	ldr	r3, [pc, #520]	; (800ab68 <_dtoa_r+0x650>)
 800a960:	2200      	movs	r2, #0
 800a962:	4640      	mov	r0, r8
 800a964:	4649      	mov	r1, r9
 800a966:	f7f5 fca7 	bl	80002b8 <__aeabi_dsub>
 800a96a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a96e:	4680      	mov	r8, r0
 800a970:	4689      	mov	r9, r1
 800a972:	f7f6 f8e9 	bl	8000b48 <__aeabi_dcmpgt>
 800a976:	2800      	cmp	r0, #0
 800a978:	f040 8296 	bne.w	800aea8 <_dtoa_r+0x990>
 800a97c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a980:	4640      	mov	r0, r8
 800a982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a986:	4649      	mov	r1, r9
 800a988:	f7f6 f8c0 	bl	8000b0c <__aeabi_dcmplt>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f040 8289 	bne.w	800aea4 <_dtoa_r+0x98c>
 800a992:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f2c0 814e 	blt.w	800ac3a <_dtoa_r+0x722>
 800a99e:	f1bb 0f0e 	cmp.w	fp, #14
 800a9a2:	f300 814a 	bgt.w	800ac3a <_dtoa_r+0x722>
 800a9a6:	4b6b      	ldr	r3, [pc, #428]	; (800ab54 <_dtoa_r+0x63c>)
 800a9a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f280 80dc 	bge.w	800ab70 <_dtoa_r+0x658>
 800a9b8:	9b04      	ldr	r3, [sp, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f300 80d8 	bgt.w	800ab70 <_dtoa_r+0x658>
 800a9c0:	f040 826f 	bne.w	800aea2 <_dtoa_r+0x98a>
 800a9c4:	4b68      	ldr	r3, [pc, #416]	; (800ab68 <_dtoa_r+0x650>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	4640      	mov	r0, r8
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	f7f5 fe2c 	bl	8000628 <__aeabi_dmul>
 800a9d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9d4:	f7f6 f8ae 	bl	8000b34 <__aeabi_dcmpge>
 800a9d8:	9e04      	ldr	r6, [sp, #16]
 800a9da:	4637      	mov	r7, r6
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	f040 8245 	bne.w	800ae6c <_dtoa_r+0x954>
 800a9e2:	9d00      	ldr	r5, [sp, #0]
 800a9e4:	2331      	movs	r3, #49	; 0x31
 800a9e6:	f805 3b01 	strb.w	r3, [r5], #1
 800a9ea:	f10b 0b01 	add.w	fp, fp, #1
 800a9ee:	e241      	b.n	800ae74 <_dtoa_r+0x95c>
 800a9f0:	07f2      	lsls	r2, r6, #31
 800a9f2:	d505      	bpl.n	800aa00 <_dtoa_r+0x4e8>
 800a9f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f8:	f7f5 fe16 	bl	8000628 <__aeabi_dmul>
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	2301      	movs	r3, #1
 800aa00:	1076      	asrs	r6, r6, #1
 800aa02:	3708      	adds	r7, #8
 800aa04:	e773      	b.n	800a8ee <_dtoa_r+0x3d6>
 800aa06:	2502      	movs	r5, #2
 800aa08:	e775      	b.n	800a8f6 <_dtoa_r+0x3de>
 800aa0a:	9e04      	ldr	r6, [sp, #16]
 800aa0c:	465f      	mov	r7, fp
 800aa0e:	e792      	b.n	800a936 <_dtoa_r+0x41e>
 800aa10:	9900      	ldr	r1, [sp, #0]
 800aa12:	4b50      	ldr	r3, [pc, #320]	; (800ab54 <_dtoa_r+0x63c>)
 800aa14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa18:	4431      	add	r1, r6
 800aa1a:	9102      	str	r1, [sp, #8]
 800aa1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa1e:	eeb0 9a47 	vmov.f32	s18, s14
 800aa22:	eef0 9a67 	vmov.f32	s19, s15
 800aa26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	d044      	beq.n	800aabc <_dtoa_r+0x5a4>
 800aa32:	494e      	ldr	r1, [pc, #312]	; (800ab6c <_dtoa_r+0x654>)
 800aa34:	2000      	movs	r0, #0
 800aa36:	f7f5 ff21 	bl	800087c <__aeabi_ddiv>
 800aa3a:	ec53 2b19 	vmov	r2, r3, d9
 800aa3e:	f7f5 fc3b 	bl	80002b8 <__aeabi_dsub>
 800aa42:	9d00      	ldr	r5, [sp, #0]
 800aa44:	ec41 0b19 	vmov	d9, r0, r1
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	f7f6 f89c 	bl	8000b88 <__aeabi_d2iz>
 800aa50:	4606      	mov	r6, r0
 800aa52:	f7f5 fd7f 	bl	8000554 <__aeabi_i2d>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f7f5 fc2b 	bl	80002b8 <__aeabi_dsub>
 800aa62:	3630      	adds	r6, #48	; 0x30
 800aa64:	f805 6b01 	strb.w	r6, [r5], #1
 800aa68:	ec53 2b19 	vmov	r2, r3, d9
 800aa6c:	4680      	mov	r8, r0
 800aa6e:	4689      	mov	r9, r1
 800aa70:	f7f6 f84c 	bl	8000b0c <__aeabi_dcmplt>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d164      	bne.n	800ab42 <_dtoa_r+0x62a>
 800aa78:	4642      	mov	r2, r8
 800aa7a:	464b      	mov	r3, r9
 800aa7c:	4937      	ldr	r1, [pc, #220]	; (800ab5c <_dtoa_r+0x644>)
 800aa7e:	2000      	movs	r0, #0
 800aa80:	f7f5 fc1a 	bl	80002b8 <__aeabi_dsub>
 800aa84:	ec53 2b19 	vmov	r2, r3, d9
 800aa88:	f7f6 f840 	bl	8000b0c <__aeabi_dcmplt>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f040 80b6 	bne.w	800abfe <_dtoa_r+0x6e6>
 800aa92:	9b02      	ldr	r3, [sp, #8]
 800aa94:	429d      	cmp	r5, r3
 800aa96:	f43f af7c 	beq.w	800a992 <_dtoa_r+0x47a>
 800aa9a:	4b31      	ldr	r3, [pc, #196]	; (800ab60 <_dtoa_r+0x648>)
 800aa9c:	ec51 0b19 	vmov	r0, r1, d9
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f7f5 fdc1 	bl	8000628 <__aeabi_dmul>
 800aaa6:	4b2e      	ldr	r3, [pc, #184]	; (800ab60 <_dtoa_r+0x648>)
 800aaa8:	ec41 0b19 	vmov	d9, r0, r1
 800aaac:	2200      	movs	r2, #0
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f5 fdb9 	bl	8000628 <__aeabi_dmul>
 800aab6:	4680      	mov	r8, r0
 800aab8:	4689      	mov	r9, r1
 800aaba:	e7c5      	b.n	800aa48 <_dtoa_r+0x530>
 800aabc:	ec51 0b17 	vmov	r0, r1, d7
 800aac0:	f7f5 fdb2 	bl	8000628 <__aeabi_dmul>
 800aac4:	9b02      	ldr	r3, [sp, #8]
 800aac6:	9d00      	ldr	r5, [sp, #0]
 800aac8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaca:	ec41 0b19 	vmov	d9, r0, r1
 800aace:	4649      	mov	r1, r9
 800aad0:	4640      	mov	r0, r8
 800aad2:	f7f6 f859 	bl	8000b88 <__aeabi_d2iz>
 800aad6:	4606      	mov	r6, r0
 800aad8:	f7f5 fd3c 	bl	8000554 <__aeabi_i2d>
 800aadc:	3630      	adds	r6, #48	; 0x30
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f5 fbe7 	bl	80002b8 <__aeabi_dsub>
 800aaea:	f805 6b01 	strb.w	r6, [r5], #1
 800aaee:	9b02      	ldr	r3, [sp, #8]
 800aaf0:	429d      	cmp	r5, r3
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	4689      	mov	r9, r1
 800aaf6:	f04f 0200 	mov.w	r2, #0
 800aafa:	d124      	bne.n	800ab46 <_dtoa_r+0x62e>
 800aafc:	4b1b      	ldr	r3, [pc, #108]	; (800ab6c <_dtoa_r+0x654>)
 800aafe:	ec51 0b19 	vmov	r0, r1, d9
 800ab02:	f7f5 fbdb 	bl	80002bc <__adddf3>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f6 f81b 	bl	8000b48 <__aeabi_dcmpgt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d173      	bne.n	800abfe <_dtoa_r+0x6e6>
 800ab16:	ec53 2b19 	vmov	r2, r3, d9
 800ab1a:	4914      	ldr	r1, [pc, #80]	; (800ab6c <_dtoa_r+0x654>)
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	f7f5 fbcb 	bl	80002b8 <__aeabi_dsub>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	4640      	mov	r0, r8
 800ab28:	4649      	mov	r1, r9
 800ab2a:	f7f5 ffef 	bl	8000b0c <__aeabi_dcmplt>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f43f af2f 	beq.w	800a992 <_dtoa_r+0x47a>
 800ab34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab36:	1e6b      	subs	r3, r5, #1
 800ab38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab3e:	2b30      	cmp	r3, #48	; 0x30
 800ab40:	d0f8      	beq.n	800ab34 <_dtoa_r+0x61c>
 800ab42:	46bb      	mov	fp, r7
 800ab44:	e04a      	b.n	800abdc <_dtoa_r+0x6c4>
 800ab46:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <_dtoa_r+0x648>)
 800ab48:	f7f5 fd6e 	bl	8000628 <__aeabi_dmul>
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	4689      	mov	r9, r1
 800ab50:	e7bd      	b.n	800aace <_dtoa_r+0x5b6>
 800ab52:	bf00      	nop
 800ab54:	0800c420 	.word	0x0800c420
 800ab58:	0800c3f8 	.word	0x0800c3f8
 800ab5c:	3ff00000 	.word	0x3ff00000
 800ab60:	40240000 	.word	0x40240000
 800ab64:	401c0000 	.word	0x401c0000
 800ab68:	40140000 	.word	0x40140000
 800ab6c:	3fe00000 	.word	0x3fe00000
 800ab70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab74:	9d00      	ldr	r5, [sp, #0]
 800ab76:	4642      	mov	r2, r8
 800ab78:	464b      	mov	r3, r9
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	f7f5 fe7d 	bl	800087c <__aeabi_ddiv>
 800ab82:	f7f6 f801 	bl	8000b88 <__aeabi_d2iz>
 800ab86:	9001      	str	r0, [sp, #4]
 800ab88:	f7f5 fce4 	bl	8000554 <__aeabi_i2d>
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	464b      	mov	r3, r9
 800ab90:	f7f5 fd4a 	bl	8000628 <__aeabi_dmul>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	f7f5 fb8c 	bl	80002b8 <__aeabi_dsub>
 800aba0:	9e01      	ldr	r6, [sp, #4]
 800aba2:	9f04      	ldr	r7, [sp, #16]
 800aba4:	3630      	adds	r6, #48	; 0x30
 800aba6:	f805 6b01 	strb.w	r6, [r5], #1
 800abaa:	9e00      	ldr	r6, [sp, #0]
 800abac:	1bae      	subs	r6, r5, r6
 800abae:	42b7      	cmp	r7, r6
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	d134      	bne.n	800ac20 <_dtoa_r+0x708>
 800abb6:	f7f5 fb81 	bl	80002bc <__adddf3>
 800abba:	4642      	mov	r2, r8
 800abbc:	464b      	mov	r3, r9
 800abbe:	4606      	mov	r6, r0
 800abc0:	460f      	mov	r7, r1
 800abc2:	f7f5 ffc1 	bl	8000b48 <__aeabi_dcmpgt>
 800abc6:	b9c8      	cbnz	r0, 800abfc <_dtoa_r+0x6e4>
 800abc8:	4642      	mov	r2, r8
 800abca:	464b      	mov	r3, r9
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f7f5 ff92 	bl	8000af8 <__aeabi_dcmpeq>
 800abd4:	b110      	cbz	r0, 800abdc <_dtoa_r+0x6c4>
 800abd6:	9b01      	ldr	r3, [sp, #4]
 800abd8:	07db      	lsls	r3, r3, #31
 800abda:	d40f      	bmi.n	800abfc <_dtoa_r+0x6e4>
 800abdc:	4651      	mov	r1, sl
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fbcc 	bl	800b37c <_Bfree>
 800abe4:	2300      	movs	r3, #0
 800abe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abe8:	702b      	strb	r3, [r5, #0]
 800abea:	f10b 0301 	add.w	r3, fp, #1
 800abee:	6013      	str	r3, [r2, #0]
 800abf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f43f ace2 	beq.w	800a5bc <_dtoa_r+0xa4>
 800abf8:	601d      	str	r5, [r3, #0]
 800abfa:	e4df      	b.n	800a5bc <_dtoa_r+0xa4>
 800abfc:	465f      	mov	r7, fp
 800abfe:	462b      	mov	r3, r5
 800ac00:	461d      	mov	r5, r3
 800ac02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac06:	2a39      	cmp	r2, #57	; 0x39
 800ac08:	d106      	bne.n	800ac18 <_dtoa_r+0x700>
 800ac0a:	9a00      	ldr	r2, [sp, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d1f7      	bne.n	800ac00 <_dtoa_r+0x6e8>
 800ac10:	9900      	ldr	r1, [sp, #0]
 800ac12:	2230      	movs	r2, #48	; 0x30
 800ac14:	3701      	adds	r7, #1
 800ac16:	700a      	strb	r2, [r1, #0]
 800ac18:	781a      	ldrb	r2, [r3, #0]
 800ac1a:	3201      	adds	r2, #1
 800ac1c:	701a      	strb	r2, [r3, #0]
 800ac1e:	e790      	b.n	800ab42 <_dtoa_r+0x62a>
 800ac20:	4ba3      	ldr	r3, [pc, #652]	; (800aeb0 <_dtoa_r+0x998>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	f7f5 fd00 	bl	8000628 <__aeabi_dmul>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	460f      	mov	r7, r1
 800ac30:	f7f5 ff62 	bl	8000af8 <__aeabi_dcmpeq>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d09e      	beq.n	800ab76 <_dtoa_r+0x65e>
 800ac38:	e7d0      	b.n	800abdc <_dtoa_r+0x6c4>
 800ac3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	f000 80ca 	beq.w	800add6 <_dtoa_r+0x8be>
 800ac42:	9a07      	ldr	r2, [sp, #28]
 800ac44:	2a01      	cmp	r2, #1
 800ac46:	f300 80ad 	bgt.w	800ada4 <_dtoa_r+0x88c>
 800ac4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac4c:	2a00      	cmp	r2, #0
 800ac4e:	f000 80a5 	beq.w	800ad9c <_dtoa_r+0x884>
 800ac52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac56:	9e08      	ldr	r6, [sp, #32]
 800ac58:	9d05      	ldr	r5, [sp, #20]
 800ac5a:	9a05      	ldr	r2, [sp, #20]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	9205      	str	r2, [sp, #20]
 800ac60:	9a06      	ldr	r2, [sp, #24]
 800ac62:	2101      	movs	r1, #1
 800ac64:	441a      	add	r2, r3
 800ac66:	4620      	mov	r0, r4
 800ac68:	9206      	str	r2, [sp, #24]
 800ac6a:	f000 fc3d 	bl	800b4e8 <__i2b>
 800ac6e:	4607      	mov	r7, r0
 800ac70:	b165      	cbz	r5, 800ac8c <_dtoa_r+0x774>
 800ac72:	9b06      	ldr	r3, [sp, #24]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	dd09      	ble.n	800ac8c <_dtoa_r+0x774>
 800ac78:	42ab      	cmp	r3, r5
 800ac7a:	9a05      	ldr	r2, [sp, #20]
 800ac7c:	bfa8      	it	ge
 800ac7e:	462b      	movge	r3, r5
 800ac80:	1ad2      	subs	r2, r2, r3
 800ac82:	9205      	str	r2, [sp, #20]
 800ac84:	9a06      	ldr	r2, [sp, #24]
 800ac86:	1aed      	subs	r5, r5, r3
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	9306      	str	r3, [sp, #24]
 800ac8c:	9b08      	ldr	r3, [sp, #32]
 800ac8e:	b1f3      	cbz	r3, 800acce <_dtoa_r+0x7b6>
 800ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 80a3 	beq.w	800adde <_dtoa_r+0x8c6>
 800ac98:	2e00      	cmp	r6, #0
 800ac9a:	dd10      	ble.n	800acbe <_dtoa_r+0x7a6>
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4632      	mov	r2, r6
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fce1 	bl	800b668 <__pow5mult>
 800aca6:	4652      	mov	r2, sl
 800aca8:	4601      	mov	r1, r0
 800acaa:	4607      	mov	r7, r0
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fc31 	bl	800b514 <__multiply>
 800acb2:	4651      	mov	r1, sl
 800acb4:	4680      	mov	r8, r0
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 fb60 	bl	800b37c <_Bfree>
 800acbc:	46c2      	mov	sl, r8
 800acbe:	9b08      	ldr	r3, [sp, #32]
 800acc0:	1b9a      	subs	r2, r3, r6
 800acc2:	d004      	beq.n	800acce <_dtoa_r+0x7b6>
 800acc4:	4651      	mov	r1, sl
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fcce 	bl	800b668 <__pow5mult>
 800accc:	4682      	mov	sl, r0
 800acce:	2101      	movs	r1, #1
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 fc09 	bl	800b4e8 <__i2b>
 800acd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	4606      	mov	r6, r0
 800acdc:	f340 8081 	ble.w	800ade2 <_dtoa_r+0x8ca>
 800ace0:	461a      	mov	r2, r3
 800ace2:	4601      	mov	r1, r0
 800ace4:	4620      	mov	r0, r4
 800ace6:	f000 fcbf 	bl	800b668 <__pow5mult>
 800acea:	9b07      	ldr	r3, [sp, #28]
 800acec:	2b01      	cmp	r3, #1
 800acee:	4606      	mov	r6, r0
 800acf0:	dd7a      	ble.n	800ade8 <_dtoa_r+0x8d0>
 800acf2:	f04f 0800 	mov.w	r8, #0
 800acf6:	6933      	ldr	r3, [r6, #16]
 800acf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800acfc:	6918      	ldr	r0, [r3, #16]
 800acfe:	f000 fba5 	bl	800b44c <__hi0bits>
 800ad02:	f1c0 0020 	rsb	r0, r0, #32
 800ad06:	9b06      	ldr	r3, [sp, #24]
 800ad08:	4418      	add	r0, r3
 800ad0a:	f010 001f 	ands.w	r0, r0, #31
 800ad0e:	f000 8094 	beq.w	800ae3a <_dtoa_r+0x922>
 800ad12:	f1c0 0320 	rsb	r3, r0, #32
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	f340 8085 	ble.w	800ae26 <_dtoa_r+0x90e>
 800ad1c:	9b05      	ldr	r3, [sp, #20]
 800ad1e:	f1c0 001c 	rsb	r0, r0, #28
 800ad22:	4403      	add	r3, r0
 800ad24:	9305      	str	r3, [sp, #20]
 800ad26:	9b06      	ldr	r3, [sp, #24]
 800ad28:	4403      	add	r3, r0
 800ad2a:	4405      	add	r5, r0
 800ad2c:	9306      	str	r3, [sp, #24]
 800ad2e:	9b05      	ldr	r3, [sp, #20]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	dd05      	ble.n	800ad40 <_dtoa_r+0x828>
 800ad34:	4651      	mov	r1, sl
 800ad36:	461a      	mov	r2, r3
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 fcef 	bl	800b71c <__lshift>
 800ad3e:	4682      	mov	sl, r0
 800ad40:	9b06      	ldr	r3, [sp, #24]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	dd05      	ble.n	800ad52 <_dtoa_r+0x83a>
 800ad46:	4631      	mov	r1, r6
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fce6 	bl	800b71c <__lshift>
 800ad50:	4606      	mov	r6, r0
 800ad52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d072      	beq.n	800ae3e <_dtoa_r+0x926>
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4650      	mov	r0, sl
 800ad5c:	f000 fd4a 	bl	800b7f4 <__mcmp>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	da6c      	bge.n	800ae3e <_dtoa_r+0x926>
 800ad64:	2300      	movs	r3, #0
 800ad66:	4651      	mov	r1, sl
 800ad68:	220a      	movs	r2, #10
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fb28 	bl	800b3c0 <__multadd>
 800ad70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad76:	4682      	mov	sl, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 81b0 	beq.w	800b0de <_dtoa_r+0xbc6>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4639      	mov	r1, r7
 800ad82:	220a      	movs	r2, #10
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 fb1b 	bl	800b3c0 <__multadd>
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	4607      	mov	r7, r0
 800ad90:	f300 8096 	bgt.w	800aec0 <_dtoa_r+0x9a8>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	dc59      	bgt.n	800ae4e <_dtoa_r+0x936>
 800ad9a:	e091      	b.n	800aec0 <_dtoa_r+0x9a8>
 800ad9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ada2:	e758      	b.n	800ac56 <_dtoa_r+0x73e>
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	1e5e      	subs	r6, r3, #1
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	42b3      	cmp	r3, r6
 800adac:	bfbf      	itttt	lt
 800adae:	9b08      	ldrlt	r3, [sp, #32]
 800adb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800adb2:	9608      	strlt	r6, [sp, #32]
 800adb4:	1af3      	sublt	r3, r6, r3
 800adb6:	bfb4      	ite	lt
 800adb8:	18d2      	addlt	r2, r2, r3
 800adba:	1b9e      	subge	r6, r3, r6
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	bfbc      	itt	lt
 800adc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800adc2:	2600      	movlt	r6, #0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	bfb7      	itett	lt
 800adc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800adcc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800add0:	1a9d      	sublt	r5, r3, r2
 800add2:	2300      	movlt	r3, #0
 800add4:	e741      	b.n	800ac5a <_dtoa_r+0x742>
 800add6:	9e08      	ldr	r6, [sp, #32]
 800add8:	9d05      	ldr	r5, [sp, #20]
 800adda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800addc:	e748      	b.n	800ac70 <_dtoa_r+0x758>
 800adde:	9a08      	ldr	r2, [sp, #32]
 800ade0:	e770      	b.n	800acc4 <_dtoa_r+0x7ac>
 800ade2:	9b07      	ldr	r3, [sp, #28]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	dc19      	bgt.n	800ae1c <_dtoa_r+0x904>
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	b9bb      	cbnz	r3, 800ae1c <_dtoa_r+0x904>
 800adec:	9b03      	ldr	r3, [sp, #12]
 800adee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adf2:	b99b      	cbnz	r3, 800ae1c <_dtoa_r+0x904>
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adfa:	0d1b      	lsrs	r3, r3, #20
 800adfc:	051b      	lsls	r3, r3, #20
 800adfe:	b183      	cbz	r3, 800ae22 <_dtoa_r+0x90a>
 800ae00:	9b05      	ldr	r3, [sp, #20]
 800ae02:	3301      	adds	r3, #1
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	9b06      	ldr	r3, [sp, #24]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	9306      	str	r3, [sp, #24]
 800ae0c:	f04f 0801 	mov.w	r8, #1
 800ae10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f47f af6f 	bne.w	800acf6 <_dtoa_r+0x7de>
 800ae18:	2001      	movs	r0, #1
 800ae1a:	e774      	b.n	800ad06 <_dtoa_r+0x7ee>
 800ae1c:	f04f 0800 	mov.w	r8, #0
 800ae20:	e7f6      	b.n	800ae10 <_dtoa_r+0x8f8>
 800ae22:	4698      	mov	r8, r3
 800ae24:	e7f4      	b.n	800ae10 <_dtoa_r+0x8f8>
 800ae26:	d082      	beq.n	800ad2e <_dtoa_r+0x816>
 800ae28:	9a05      	ldr	r2, [sp, #20]
 800ae2a:	331c      	adds	r3, #28
 800ae2c:	441a      	add	r2, r3
 800ae2e:	9205      	str	r2, [sp, #20]
 800ae30:	9a06      	ldr	r2, [sp, #24]
 800ae32:	441a      	add	r2, r3
 800ae34:	441d      	add	r5, r3
 800ae36:	9206      	str	r2, [sp, #24]
 800ae38:	e779      	b.n	800ad2e <_dtoa_r+0x816>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	e7f4      	b.n	800ae28 <_dtoa_r+0x910>
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dc37      	bgt.n	800aeb4 <_dtoa_r+0x99c>
 800ae44:	9b07      	ldr	r3, [sp, #28]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	dd34      	ble.n	800aeb4 <_dtoa_r+0x99c>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	9b01      	ldr	r3, [sp, #4]
 800ae50:	b963      	cbnz	r3, 800ae6c <_dtoa_r+0x954>
 800ae52:	4631      	mov	r1, r6
 800ae54:	2205      	movs	r2, #5
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 fab2 	bl	800b3c0 <__multadd>
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	4606      	mov	r6, r0
 800ae60:	4650      	mov	r0, sl
 800ae62:	f000 fcc7 	bl	800b7f4 <__mcmp>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f73f adbb 	bgt.w	800a9e2 <_dtoa_r+0x4ca>
 800ae6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6e:	9d00      	ldr	r5, [sp, #0]
 800ae70:	ea6f 0b03 	mvn.w	fp, r3
 800ae74:	f04f 0800 	mov.w	r8, #0
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 fa7e 	bl	800b37c <_Bfree>
 800ae80:	2f00      	cmp	r7, #0
 800ae82:	f43f aeab 	beq.w	800abdc <_dtoa_r+0x6c4>
 800ae86:	f1b8 0f00 	cmp.w	r8, #0
 800ae8a:	d005      	beq.n	800ae98 <_dtoa_r+0x980>
 800ae8c:	45b8      	cmp	r8, r7
 800ae8e:	d003      	beq.n	800ae98 <_dtoa_r+0x980>
 800ae90:	4641      	mov	r1, r8
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 fa72 	bl	800b37c <_Bfree>
 800ae98:	4639      	mov	r1, r7
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 fa6e 	bl	800b37c <_Bfree>
 800aea0:	e69c      	b.n	800abdc <_dtoa_r+0x6c4>
 800aea2:	2600      	movs	r6, #0
 800aea4:	4637      	mov	r7, r6
 800aea6:	e7e1      	b.n	800ae6c <_dtoa_r+0x954>
 800aea8:	46bb      	mov	fp, r7
 800aeaa:	4637      	mov	r7, r6
 800aeac:	e599      	b.n	800a9e2 <_dtoa_r+0x4ca>
 800aeae:	bf00      	nop
 800aeb0:	40240000 	.word	0x40240000
 800aeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 80c8 	beq.w	800b04c <_dtoa_r+0xb34>
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	dd05      	ble.n	800aed0 <_dtoa_r+0x9b8>
 800aec4:	4639      	mov	r1, r7
 800aec6:	462a      	mov	r2, r5
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fc27 	bl	800b71c <__lshift>
 800aece:	4607      	mov	r7, r0
 800aed0:	f1b8 0f00 	cmp.w	r8, #0
 800aed4:	d05b      	beq.n	800af8e <_dtoa_r+0xa76>
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 fa0f 	bl	800b2fc <_Balloc>
 800aede:	4605      	mov	r5, r0
 800aee0:	b928      	cbnz	r0, 800aeee <_dtoa_r+0x9d6>
 800aee2:	4b83      	ldr	r3, [pc, #524]	; (800b0f0 <_dtoa_r+0xbd8>)
 800aee4:	4602      	mov	r2, r0
 800aee6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aeea:	f7ff bb2e 	b.w	800a54a <_dtoa_r+0x32>
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	3202      	adds	r2, #2
 800aef2:	0092      	lsls	r2, r2, #2
 800aef4:	f107 010c 	add.w	r1, r7, #12
 800aef8:	300c      	adds	r0, #12
 800aefa:	f001 f847 	bl	800bf8c <memcpy>
 800aefe:	2201      	movs	r2, #1
 800af00:	4629      	mov	r1, r5
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fc0a 	bl	800b71c <__lshift>
 800af08:	9b00      	ldr	r3, [sp, #0]
 800af0a:	3301      	adds	r3, #1
 800af0c:	9304      	str	r3, [sp, #16]
 800af0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af12:	4413      	add	r3, r2
 800af14:	9308      	str	r3, [sp, #32]
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	46b8      	mov	r8, r7
 800af1e:	9306      	str	r3, [sp, #24]
 800af20:	4607      	mov	r7, r0
 800af22:	9b04      	ldr	r3, [sp, #16]
 800af24:	4631      	mov	r1, r6
 800af26:	3b01      	subs	r3, #1
 800af28:	4650      	mov	r0, sl
 800af2a:	9301      	str	r3, [sp, #4]
 800af2c:	f7ff fa69 	bl	800a402 <quorem>
 800af30:	4641      	mov	r1, r8
 800af32:	9002      	str	r0, [sp, #8]
 800af34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af38:	4650      	mov	r0, sl
 800af3a:	f000 fc5b 	bl	800b7f4 <__mcmp>
 800af3e:	463a      	mov	r2, r7
 800af40:	9005      	str	r0, [sp, #20]
 800af42:	4631      	mov	r1, r6
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fc71 	bl	800b82c <__mdiff>
 800af4a:	68c2      	ldr	r2, [r0, #12]
 800af4c:	4605      	mov	r5, r0
 800af4e:	bb02      	cbnz	r2, 800af92 <_dtoa_r+0xa7a>
 800af50:	4601      	mov	r1, r0
 800af52:	4650      	mov	r0, sl
 800af54:	f000 fc4e 	bl	800b7f4 <__mcmp>
 800af58:	4602      	mov	r2, r0
 800af5a:	4629      	mov	r1, r5
 800af5c:	4620      	mov	r0, r4
 800af5e:	9209      	str	r2, [sp, #36]	; 0x24
 800af60:	f000 fa0c 	bl	800b37c <_Bfree>
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af68:	9d04      	ldr	r5, [sp, #16]
 800af6a:	ea43 0102 	orr.w	r1, r3, r2
 800af6e:	9b06      	ldr	r3, [sp, #24]
 800af70:	4319      	orrs	r1, r3
 800af72:	d110      	bne.n	800af96 <_dtoa_r+0xa7e>
 800af74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af78:	d029      	beq.n	800afce <_dtoa_r+0xab6>
 800af7a:	9b05      	ldr	r3, [sp, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dd02      	ble.n	800af86 <_dtoa_r+0xa6e>
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	f883 9000 	strb.w	r9, [r3]
 800af8c:	e774      	b.n	800ae78 <_dtoa_r+0x960>
 800af8e:	4638      	mov	r0, r7
 800af90:	e7ba      	b.n	800af08 <_dtoa_r+0x9f0>
 800af92:	2201      	movs	r2, #1
 800af94:	e7e1      	b.n	800af5a <_dtoa_r+0xa42>
 800af96:	9b05      	ldr	r3, [sp, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	db04      	blt.n	800afa6 <_dtoa_r+0xa8e>
 800af9c:	9907      	ldr	r1, [sp, #28]
 800af9e:	430b      	orrs	r3, r1
 800afa0:	9906      	ldr	r1, [sp, #24]
 800afa2:	430b      	orrs	r3, r1
 800afa4:	d120      	bne.n	800afe8 <_dtoa_r+0xad0>
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	dded      	ble.n	800af86 <_dtoa_r+0xa6e>
 800afaa:	4651      	mov	r1, sl
 800afac:	2201      	movs	r2, #1
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 fbb4 	bl	800b71c <__lshift>
 800afb4:	4631      	mov	r1, r6
 800afb6:	4682      	mov	sl, r0
 800afb8:	f000 fc1c 	bl	800b7f4 <__mcmp>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	dc03      	bgt.n	800afc8 <_dtoa_r+0xab0>
 800afc0:	d1e1      	bne.n	800af86 <_dtoa_r+0xa6e>
 800afc2:	f019 0f01 	tst.w	r9, #1
 800afc6:	d0de      	beq.n	800af86 <_dtoa_r+0xa6e>
 800afc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800afcc:	d1d8      	bne.n	800af80 <_dtoa_r+0xa68>
 800afce:	9a01      	ldr	r2, [sp, #4]
 800afd0:	2339      	movs	r3, #57	; 0x39
 800afd2:	7013      	strb	r3, [r2, #0]
 800afd4:	462b      	mov	r3, r5
 800afd6:	461d      	mov	r5, r3
 800afd8:	3b01      	subs	r3, #1
 800afda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800afde:	2a39      	cmp	r2, #57	; 0x39
 800afe0:	d06c      	beq.n	800b0bc <_dtoa_r+0xba4>
 800afe2:	3201      	adds	r2, #1
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	e747      	b.n	800ae78 <_dtoa_r+0x960>
 800afe8:	2a00      	cmp	r2, #0
 800afea:	dd07      	ble.n	800affc <_dtoa_r+0xae4>
 800afec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aff0:	d0ed      	beq.n	800afce <_dtoa_r+0xab6>
 800aff2:	9a01      	ldr	r2, [sp, #4]
 800aff4:	f109 0301 	add.w	r3, r9, #1
 800aff8:	7013      	strb	r3, [r2, #0]
 800affa:	e73d      	b.n	800ae78 <_dtoa_r+0x960>
 800affc:	9b04      	ldr	r3, [sp, #16]
 800affe:	9a08      	ldr	r2, [sp, #32]
 800b000:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b004:	4293      	cmp	r3, r2
 800b006:	d043      	beq.n	800b090 <_dtoa_r+0xb78>
 800b008:	4651      	mov	r1, sl
 800b00a:	2300      	movs	r3, #0
 800b00c:	220a      	movs	r2, #10
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 f9d6 	bl	800b3c0 <__multadd>
 800b014:	45b8      	cmp	r8, r7
 800b016:	4682      	mov	sl, r0
 800b018:	f04f 0300 	mov.w	r3, #0
 800b01c:	f04f 020a 	mov.w	r2, #10
 800b020:	4641      	mov	r1, r8
 800b022:	4620      	mov	r0, r4
 800b024:	d107      	bne.n	800b036 <_dtoa_r+0xb1e>
 800b026:	f000 f9cb 	bl	800b3c0 <__multadd>
 800b02a:	4680      	mov	r8, r0
 800b02c:	4607      	mov	r7, r0
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	3301      	adds	r3, #1
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	e775      	b.n	800af22 <_dtoa_r+0xa0a>
 800b036:	f000 f9c3 	bl	800b3c0 <__multadd>
 800b03a:	4639      	mov	r1, r7
 800b03c:	4680      	mov	r8, r0
 800b03e:	2300      	movs	r3, #0
 800b040:	220a      	movs	r2, #10
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f9bc 	bl	800b3c0 <__multadd>
 800b048:	4607      	mov	r7, r0
 800b04a:	e7f0      	b.n	800b02e <_dtoa_r+0xb16>
 800b04c:	9b04      	ldr	r3, [sp, #16]
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	9d00      	ldr	r5, [sp, #0]
 800b052:	4631      	mov	r1, r6
 800b054:	4650      	mov	r0, sl
 800b056:	f7ff f9d4 	bl	800a402 <quorem>
 800b05a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	f805 9b01 	strb.w	r9, [r5], #1
 800b064:	1aea      	subs	r2, r5, r3
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	4293      	cmp	r3, r2
 800b06a:	dd07      	ble.n	800b07c <_dtoa_r+0xb64>
 800b06c:	4651      	mov	r1, sl
 800b06e:	2300      	movs	r3, #0
 800b070:	220a      	movs	r2, #10
 800b072:	4620      	mov	r0, r4
 800b074:	f000 f9a4 	bl	800b3c0 <__multadd>
 800b078:	4682      	mov	sl, r0
 800b07a:	e7ea      	b.n	800b052 <_dtoa_r+0xb3a>
 800b07c:	9b01      	ldr	r3, [sp, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	bfc8      	it	gt
 800b082:	461d      	movgt	r5, r3
 800b084:	9b00      	ldr	r3, [sp, #0]
 800b086:	bfd8      	it	le
 800b088:	2501      	movle	r5, #1
 800b08a:	441d      	add	r5, r3
 800b08c:	f04f 0800 	mov.w	r8, #0
 800b090:	4651      	mov	r1, sl
 800b092:	2201      	movs	r2, #1
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fb41 	bl	800b71c <__lshift>
 800b09a:	4631      	mov	r1, r6
 800b09c:	4682      	mov	sl, r0
 800b09e:	f000 fba9 	bl	800b7f4 <__mcmp>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	dc96      	bgt.n	800afd4 <_dtoa_r+0xabc>
 800b0a6:	d102      	bne.n	800b0ae <_dtoa_r+0xb96>
 800b0a8:	f019 0f01 	tst.w	r9, #1
 800b0ac:	d192      	bne.n	800afd4 <_dtoa_r+0xabc>
 800b0ae:	462b      	mov	r3, r5
 800b0b0:	461d      	mov	r5, r3
 800b0b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0b6:	2a30      	cmp	r2, #48	; 0x30
 800b0b8:	d0fa      	beq.n	800b0b0 <_dtoa_r+0xb98>
 800b0ba:	e6dd      	b.n	800ae78 <_dtoa_r+0x960>
 800b0bc:	9a00      	ldr	r2, [sp, #0]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d189      	bne.n	800afd6 <_dtoa_r+0xabe>
 800b0c2:	f10b 0b01 	add.w	fp, fp, #1
 800b0c6:	2331      	movs	r3, #49	; 0x31
 800b0c8:	e796      	b.n	800aff8 <_dtoa_r+0xae0>
 800b0ca:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <_dtoa_r+0xbdc>)
 800b0cc:	f7ff ba99 	b.w	800a602 <_dtoa_r+0xea>
 800b0d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f47f aa6d 	bne.w	800a5b2 <_dtoa_r+0x9a>
 800b0d8:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <_dtoa_r+0xbe0>)
 800b0da:	f7ff ba92 	b.w	800a602 <_dtoa_r+0xea>
 800b0de:	9b01      	ldr	r3, [sp, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dcb5      	bgt.n	800b050 <_dtoa_r+0xb38>
 800b0e4:	9b07      	ldr	r3, [sp, #28]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	f73f aeb1 	bgt.w	800ae4e <_dtoa_r+0x936>
 800b0ec:	e7b0      	b.n	800b050 <_dtoa_r+0xb38>
 800b0ee:	bf00      	nop
 800b0f0:	0800c38c 	.word	0x0800c38c
 800b0f4:	0800c2ec 	.word	0x0800c2ec
 800b0f8:	0800c310 	.word	0x0800c310

0800b0fc <_free_r>:
 800b0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0fe:	2900      	cmp	r1, #0
 800b100:	d044      	beq.n	800b18c <_free_r+0x90>
 800b102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b106:	9001      	str	r0, [sp, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f1a1 0404 	sub.w	r4, r1, #4
 800b10e:	bfb8      	it	lt
 800b110:	18e4      	addlt	r4, r4, r3
 800b112:	f000 f8e7 	bl	800b2e4 <__malloc_lock>
 800b116:	4a1e      	ldr	r2, [pc, #120]	; (800b190 <_free_r+0x94>)
 800b118:	9801      	ldr	r0, [sp, #4]
 800b11a:	6813      	ldr	r3, [r2, #0]
 800b11c:	b933      	cbnz	r3, 800b12c <_free_r+0x30>
 800b11e:	6063      	str	r3, [r4, #4]
 800b120:	6014      	str	r4, [r2, #0]
 800b122:	b003      	add	sp, #12
 800b124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b128:	f000 b8e2 	b.w	800b2f0 <__malloc_unlock>
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	d908      	bls.n	800b142 <_free_r+0x46>
 800b130:	6825      	ldr	r5, [r4, #0]
 800b132:	1961      	adds	r1, r4, r5
 800b134:	428b      	cmp	r3, r1
 800b136:	bf01      	itttt	eq
 800b138:	6819      	ldreq	r1, [r3, #0]
 800b13a:	685b      	ldreq	r3, [r3, #4]
 800b13c:	1949      	addeq	r1, r1, r5
 800b13e:	6021      	streq	r1, [r4, #0]
 800b140:	e7ed      	b.n	800b11e <_free_r+0x22>
 800b142:	461a      	mov	r2, r3
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	b10b      	cbz	r3, 800b14c <_free_r+0x50>
 800b148:	42a3      	cmp	r3, r4
 800b14a:	d9fa      	bls.n	800b142 <_free_r+0x46>
 800b14c:	6811      	ldr	r1, [r2, #0]
 800b14e:	1855      	adds	r5, r2, r1
 800b150:	42a5      	cmp	r5, r4
 800b152:	d10b      	bne.n	800b16c <_free_r+0x70>
 800b154:	6824      	ldr	r4, [r4, #0]
 800b156:	4421      	add	r1, r4
 800b158:	1854      	adds	r4, r2, r1
 800b15a:	42a3      	cmp	r3, r4
 800b15c:	6011      	str	r1, [r2, #0]
 800b15e:	d1e0      	bne.n	800b122 <_free_r+0x26>
 800b160:	681c      	ldr	r4, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	6053      	str	r3, [r2, #4]
 800b166:	440c      	add	r4, r1
 800b168:	6014      	str	r4, [r2, #0]
 800b16a:	e7da      	b.n	800b122 <_free_r+0x26>
 800b16c:	d902      	bls.n	800b174 <_free_r+0x78>
 800b16e:	230c      	movs	r3, #12
 800b170:	6003      	str	r3, [r0, #0]
 800b172:	e7d6      	b.n	800b122 <_free_r+0x26>
 800b174:	6825      	ldr	r5, [r4, #0]
 800b176:	1961      	adds	r1, r4, r5
 800b178:	428b      	cmp	r3, r1
 800b17a:	bf04      	itt	eq
 800b17c:	6819      	ldreq	r1, [r3, #0]
 800b17e:	685b      	ldreq	r3, [r3, #4]
 800b180:	6063      	str	r3, [r4, #4]
 800b182:	bf04      	itt	eq
 800b184:	1949      	addeq	r1, r1, r5
 800b186:	6021      	streq	r1, [r4, #0]
 800b188:	6054      	str	r4, [r2, #4]
 800b18a:	e7ca      	b.n	800b122 <_free_r+0x26>
 800b18c:	b003      	add	sp, #12
 800b18e:	bd30      	pop	{r4, r5, pc}
 800b190:	20000a24 	.word	0x20000a24

0800b194 <malloc>:
 800b194:	4b02      	ldr	r3, [pc, #8]	; (800b1a0 <malloc+0xc>)
 800b196:	4601      	mov	r1, r0
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	f000 b823 	b.w	800b1e4 <_malloc_r>
 800b19e:	bf00      	nop
 800b1a0:	20000064 	.word	0x20000064

0800b1a4 <sbrk_aligned>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	4e0e      	ldr	r6, [pc, #56]	; (800b1e0 <sbrk_aligned+0x3c>)
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	6831      	ldr	r1, [r6, #0]
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	b911      	cbnz	r1, 800b1b6 <sbrk_aligned+0x12>
 800b1b0:	f000 fedc 	bl	800bf6c <_sbrk_r>
 800b1b4:	6030      	str	r0, [r6, #0]
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	f000 fed7 	bl	800bf6c <_sbrk_r>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	d00a      	beq.n	800b1d8 <sbrk_aligned+0x34>
 800b1c2:	1cc4      	adds	r4, r0, #3
 800b1c4:	f024 0403 	bic.w	r4, r4, #3
 800b1c8:	42a0      	cmp	r0, r4
 800b1ca:	d007      	beq.n	800b1dc <sbrk_aligned+0x38>
 800b1cc:	1a21      	subs	r1, r4, r0
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f000 fecc 	bl	800bf6c <_sbrk_r>
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	d101      	bne.n	800b1dc <sbrk_aligned+0x38>
 800b1d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b1dc:	4620      	mov	r0, r4
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	20000a28 	.word	0x20000a28

0800b1e4 <_malloc_r>:
 800b1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e8:	1ccd      	adds	r5, r1, #3
 800b1ea:	f025 0503 	bic.w	r5, r5, #3
 800b1ee:	3508      	adds	r5, #8
 800b1f0:	2d0c      	cmp	r5, #12
 800b1f2:	bf38      	it	cc
 800b1f4:	250c      	movcc	r5, #12
 800b1f6:	2d00      	cmp	r5, #0
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	db01      	blt.n	800b200 <_malloc_r+0x1c>
 800b1fc:	42a9      	cmp	r1, r5
 800b1fe:	d905      	bls.n	800b20c <_malloc_r+0x28>
 800b200:	230c      	movs	r3, #12
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	2600      	movs	r6, #0
 800b206:	4630      	mov	r0, r6
 800b208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b2e0 <_malloc_r+0xfc>
 800b210:	f000 f868 	bl	800b2e4 <__malloc_lock>
 800b214:	f8d8 3000 	ldr.w	r3, [r8]
 800b218:	461c      	mov	r4, r3
 800b21a:	bb5c      	cbnz	r4, 800b274 <_malloc_r+0x90>
 800b21c:	4629      	mov	r1, r5
 800b21e:	4638      	mov	r0, r7
 800b220:	f7ff ffc0 	bl	800b1a4 <sbrk_aligned>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	4604      	mov	r4, r0
 800b228:	d155      	bne.n	800b2d6 <_malloc_r+0xf2>
 800b22a:	f8d8 4000 	ldr.w	r4, [r8]
 800b22e:	4626      	mov	r6, r4
 800b230:	2e00      	cmp	r6, #0
 800b232:	d145      	bne.n	800b2c0 <_malloc_r+0xdc>
 800b234:	2c00      	cmp	r4, #0
 800b236:	d048      	beq.n	800b2ca <_malloc_r+0xe6>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	4631      	mov	r1, r6
 800b23c:	4638      	mov	r0, r7
 800b23e:	eb04 0903 	add.w	r9, r4, r3
 800b242:	f000 fe93 	bl	800bf6c <_sbrk_r>
 800b246:	4581      	cmp	r9, r0
 800b248:	d13f      	bne.n	800b2ca <_malloc_r+0xe6>
 800b24a:	6821      	ldr	r1, [r4, #0]
 800b24c:	1a6d      	subs	r5, r5, r1
 800b24e:	4629      	mov	r1, r5
 800b250:	4638      	mov	r0, r7
 800b252:	f7ff ffa7 	bl	800b1a4 <sbrk_aligned>
 800b256:	3001      	adds	r0, #1
 800b258:	d037      	beq.n	800b2ca <_malloc_r+0xe6>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	442b      	add	r3, r5
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	f8d8 3000 	ldr.w	r3, [r8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d038      	beq.n	800b2da <_malloc_r+0xf6>
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	42a2      	cmp	r2, r4
 800b26c:	d12b      	bne.n	800b2c6 <_malloc_r+0xe2>
 800b26e:	2200      	movs	r2, #0
 800b270:	605a      	str	r2, [r3, #4]
 800b272:	e00f      	b.n	800b294 <_malloc_r+0xb0>
 800b274:	6822      	ldr	r2, [r4, #0]
 800b276:	1b52      	subs	r2, r2, r5
 800b278:	d41f      	bmi.n	800b2ba <_malloc_r+0xd6>
 800b27a:	2a0b      	cmp	r2, #11
 800b27c:	d917      	bls.n	800b2ae <_malloc_r+0xca>
 800b27e:	1961      	adds	r1, r4, r5
 800b280:	42a3      	cmp	r3, r4
 800b282:	6025      	str	r5, [r4, #0]
 800b284:	bf18      	it	ne
 800b286:	6059      	strne	r1, [r3, #4]
 800b288:	6863      	ldr	r3, [r4, #4]
 800b28a:	bf08      	it	eq
 800b28c:	f8c8 1000 	streq.w	r1, [r8]
 800b290:	5162      	str	r2, [r4, r5]
 800b292:	604b      	str	r3, [r1, #4]
 800b294:	4638      	mov	r0, r7
 800b296:	f104 060b 	add.w	r6, r4, #11
 800b29a:	f000 f829 	bl	800b2f0 <__malloc_unlock>
 800b29e:	f026 0607 	bic.w	r6, r6, #7
 800b2a2:	1d23      	adds	r3, r4, #4
 800b2a4:	1af2      	subs	r2, r6, r3
 800b2a6:	d0ae      	beq.n	800b206 <_malloc_r+0x22>
 800b2a8:	1b9b      	subs	r3, r3, r6
 800b2aa:	50a3      	str	r3, [r4, r2]
 800b2ac:	e7ab      	b.n	800b206 <_malloc_r+0x22>
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	6862      	ldr	r2, [r4, #4]
 800b2b2:	d1dd      	bne.n	800b270 <_malloc_r+0x8c>
 800b2b4:	f8c8 2000 	str.w	r2, [r8]
 800b2b8:	e7ec      	b.n	800b294 <_malloc_r+0xb0>
 800b2ba:	4623      	mov	r3, r4
 800b2bc:	6864      	ldr	r4, [r4, #4]
 800b2be:	e7ac      	b.n	800b21a <_malloc_r+0x36>
 800b2c0:	4634      	mov	r4, r6
 800b2c2:	6876      	ldr	r6, [r6, #4]
 800b2c4:	e7b4      	b.n	800b230 <_malloc_r+0x4c>
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	e7cc      	b.n	800b264 <_malloc_r+0x80>
 800b2ca:	230c      	movs	r3, #12
 800b2cc:	603b      	str	r3, [r7, #0]
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	f000 f80e 	bl	800b2f0 <__malloc_unlock>
 800b2d4:	e797      	b.n	800b206 <_malloc_r+0x22>
 800b2d6:	6025      	str	r5, [r4, #0]
 800b2d8:	e7dc      	b.n	800b294 <_malloc_r+0xb0>
 800b2da:	605b      	str	r3, [r3, #4]
 800b2dc:	deff      	udf	#255	; 0xff
 800b2de:	bf00      	nop
 800b2e0:	20000a24 	.word	0x20000a24

0800b2e4 <__malloc_lock>:
 800b2e4:	4801      	ldr	r0, [pc, #4]	; (800b2ec <__malloc_lock+0x8>)
 800b2e6:	f7ff b88a 	b.w	800a3fe <__retarget_lock_acquire_recursive>
 800b2ea:	bf00      	nop
 800b2ec:	20000a20 	.word	0x20000a20

0800b2f0 <__malloc_unlock>:
 800b2f0:	4801      	ldr	r0, [pc, #4]	; (800b2f8 <__malloc_unlock+0x8>)
 800b2f2:	f7ff b885 	b.w	800a400 <__retarget_lock_release_recursive>
 800b2f6:	bf00      	nop
 800b2f8:	20000a20 	.word	0x20000a20

0800b2fc <_Balloc>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	69c6      	ldr	r6, [r0, #28]
 800b300:	4604      	mov	r4, r0
 800b302:	460d      	mov	r5, r1
 800b304:	b976      	cbnz	r6, 800b324 <_Balloc+0x28>
 800b306:	2010      	movs	r0, #16
 800b308:	f7ff ff44 	bl	800b194 <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	61e0      	str	r0, [r4, #28]
 800b310:	b920      	cbnz	r0, 800b31c <_Balloc+0x20>
 800b312:	4b18      	ldr	r3, [pc, #96]	; (800b374 <_Balloc+0x78>)
 800b314:	4818      	ldr	r0, [pc, #96]	; (800b378 <_Balloc+0x7c>)
 800b316:	216b      	movs	r1, #107	; 0x6b
 800b318:	f000 fe46 	bl	800bfa8 <__assert_func>
 800b31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b320:	6006      	str	r6, [r0, #0]
 800b322:	60c6      	str	r6, [r0, #12]
 800b324:	69e6      	ldr	r6, [r4, #28]
 800b326:	68f3      	ldr	r3, [r6, #12]
 800b328:	b183      	cbz	r3, 800b34c <_Balloc+0x50>
 800b32a:	69e3      	ldr	r3, [r4, #28]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b332:	b9b8      	cbnz	r0, 800b364 <_Balloc+0x68>
 800b334:	2101      	movs	r1, #1
 800b336:	fa01 f605 	lsl.w	r6, r1, r5
 800b33a:	1d72      	adds	r2, r6, #5
 800b33c:	0092      	lsls	r2, r2, #2
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 fe50 	bl	800bfe4 <_calloc_r>
 800b344:	b160      	cbz	r0, 800b360 <_Balloc+0x64>
 800b346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b34a:	e00e      	b.n	800b36a <_Balloc+0x6e>
 800b34c:	2221      	movs	r2, #33	; 0x21
 800b34e:	2104      	movs	r1, #4
 800b350:	4620      	mov	r0, r4
 800b352:	f000 fe47 	bl	800bfe4 <_calloc_r>
 800b356:	69e3      	ldr	r3, [r4, #28]
 800b358:	60f0      	str	r0, [r6, #12]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e4      	bne.n	800b32a <_Balloc+0x2e>
 800b360:	2000      	movs	r0, #0
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	6802      	ldr	r2, [r0, #0]
 800b366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b36a:	2300      	movs	r3, #0
 800b36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b370:	e7f7      	b.n	800b362 <_Balloc+0x66>
 800b372:	bf00      	nop
 800b374:	0800c31d 	.word	0x0800c31d
 800b378:	0800c39d 	.word	0x0800c39d

0800b37c <_Bfree>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	69c6      	ldr	r6, [r0, #28]
 800b380:	4605      	mov	r5, r0
 800b382:	460c      	mov	r4, r1
 800b384:	b976      	cbnz	r6, 800b3a4 <_Bfree+0x28>
 800b386:	2010      	movs	r0, #16
 800b388:	f7ff ff04 	bl	800b194 <malloc>
 800b38c:	4602      	mov	r2, r0
 800b38e:	61e8      	str	r0, [r5, #28]
 800b390:	b920      	cbnz	r0, 800b39c <_Bfree+0x20>
 800b392:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <_Bfree+0x3c>)
 800b394:	4809      	ldr	r0, [pc, #36]	; (800b3bc <_Bfree+0x40>)
 800b396:	218f      	movs	r1, #143	; 0x8f
 800b398:	f000 fe06 	bl	800bfa8 <__assert_func>
 800b39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3a0:	6006      	str	r6, [r0, #0]
 800b3a2:	60c6      	str	r6, [r0, #12]
 800b3a4:	b13c      	cbz	r4, 800b3b6 <_Bfree+0x3a>
 800b3a6:	69eb      	ldr	r3, [r5, #28]
 800b3a8:	6862      	ldr	r2, [r4, #4]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3b0:	6021      	str	r1, [r4, #0]
 800b3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	0800c31d 	.word	0x0800c31d
 800b3bc:	0800c39d 	.word	0x0800c39d

0800b3c0 <__multadd>:
 800b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c4:	690d      	ldr	r5, [r1, #16]
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	461e      	mov	r6, r3
 800b3cc:	f101 0c14 	add.w	ip, r1, #20
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800b3d6:	b299      	uxth	r1, r3
 800b3d8:	fb02 6101 	mla	r1, r2, r1, r6
 800b3dc:	0c1e      	lsrs	r6, r3, #16
 800b3de:	0c0b      	lsrs	r3, r1, #16
 800b3e0:	fb02 3306 	mla	r3, r2, r6, r3
 800b3e4:	b289      	uxth	r1, r1
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3ec:	4285      	cmp	r5, r0
 800b3ee:	f84c 1b04 	str.w	r1, [ip], #4
 800b3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3f6:	dcec      	bgt.n	800b3d2 <__multadd+0x12>
 800b3f8:	b30e      	cbz	r6, 800b43e <__multadd+0x7e>
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	42ab      	cmp	r3, r5
 800b3fe:	dc19      	bgt.n	800b434 <__multadd+0x74>
 800b400:	6861      	ldr	r1, [r4, #4]
 800b402:	4638      	mov	r0, r7
 800b404:	3101      	adds	r1, #1
 800b406:	f7ff ff79 	bl	800b2fc <_Balloc>
 800b40a:	4680      	mov	r8, r0
 800b40c:	b928      	cbnz	r0, 800b41a <__multadd+0x5a>
 800b40e:	4602      	mov	r2, r0
 800b410:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <__multadd+0x84>)
 800b412:	480d      	ldr	r0, [pc, #52]	; (800b448 <__multadd+0x88>)
 800b414:	21ba      	movs	r1, #186	; 0xba
 800b416:	f000 fdc7 	bl	800bfa8 <__assert_func>
 800b41a:	6922      	ldr	r2, [r4, #16]
 800b41c:	3202      	adds	r2, #2
 800b41e:	f104 010c 	add.w	r1, r4, #12
 800b422:	0092      	lsls	r2, r2, #2
 800b424:	300c      	adds	r0, #12
 800b426:	f000 fdb1 	bl	800bf8c <memcpy>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4638      	mov	r0, r7
 800b42e:	f7ff ffa5 	bl	800b37c <_Bfree>
 800b432:	4644      	mov	r4, r8
 800b434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b438:	3501      	adds	r5, #1
 800b43a:	615e      	str	r6, [r3, #20]
 800b43c:	6125      	str	r5, [r4, #16]
 800b43e:	4620      	mov	r0, r4
 800b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b444:	0800c38c 	.word	0x0800c38c
 800b448:	0800c39d 	.word	0x0800c39d

0800b44c <__hi0bits>:
 800b44c:	0c03      	lsrs	r3, r0, #16
 800b44e:	041b      	lsls	r3, r3, #16
 800b450:	b9d3      	cbnz	r3, 800b488 <__hi0bits+0x3c>
 800b452:	0400      	lsls	r0, r0, #16
 800b454:	2310      	movs	r3, #16
 800b456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b45a:	bf04      	itt	eq
 800b45c:	0200      	lsleq	r0, r0, #8
 800b45e:	3308      	addeq	r3, #8
 800b460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b464:	bf04      	itt	eq
 800b466:	0100      	lsleq	r0, r0, #4
 800b468:	3304      	addeq	r3, #4
 800b46a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b46e:	bf04      	itt	eq
 800b470:	0080      	lsleq	r0, r0, #2
 800b472:	3302      	addeq	r3, #2
 800b474:	2800      	cmp	r0, #0
 800b476:	db05      	blt.n	800b484 <__hi0bits+0x38>
 800b478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b47c:	f103 0301 	add.w	r3, r3, #1
 800b480:	bf08      	it	eq
 800b482:	2320      	moveq	r3, #32
 800b484:	4618      	mov	r0, r3
 800b486:	4770      	bx	lr
 800b488:	2300      	movs	r3, #0
 800b48a:	e7e4      	b.n	800b456 <__hi0bits+0xa>

0800b48c <__lo0bits>:
 800b48c:	6803      	ldr	r3, [r0, #0]
 800b48e:	f013 0207 	ands.w	r2, r3, #7
 800b492:	d00c      	beq.n	800b4ae <__lo0bits+0x22>
 800b494:	07d9      	lsls	r1, r3, #31
 800b496:	d422      	bmi.n	800b4de <__lo0bits+0x52>
 800b498:	079a      	lsls	r2, r3, #30
 800b49a:	bf49      	itett	mi
 800b49c:	085b      	lsrmi	r3, r3, #1
 800b49e:	089b      	lsrpl	r3, r3, #2
 800b4a0:	6003      	strmi	r3, [r0, #0]
 800b4a2:	2201      	movmi	r2, #1
 800b4a4:	bf5c      	itt	pl
 800b4a6:	6003      	strpl	r3, [r0, #0]
 800b4a8:	2202      	movpl	r2, #2
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	4770      	bx	lr
 800b4ae:	b299      	uxth	r1, r3
 800b4b0:	b909      	cbnz	r1, 800b4b6 <__lo0bits+0x2a>
 800b4b2:	0c1b      	lsrs	r3, r3, #16
 800b4b4:	2210      	movs	r2, #16
 800b4b6:	b2d9      	uxtb	r1, r3
 800b4b8:	b909      	cbnz	r1, 800b4be <__lo0bits+0x32>
 800b4ba:	3208      	adds	r2, #8
 800b4bc:	0a1b      	lsrs	r3, r3, #8
 800b4be:	0719      	lsls	r1, r3, #28
 800b4c0:	bf04      	itt	eq
 800b4c2:	091b      	lsreq	r3, r3, #4
 800b4c4:	3204      	addeq	r2, #4
 800b4c6:	0799      	lsls	r1, r3, #30
 800b4c8:	bf04      	itt	eq
 800b4ca:	089b      	lsreq	r3, r3, #2
 800b4cc:	3202      	addeq	r2, #2
 800b4ce:	07d9      	lsls	r1, r3, #31
 800b4d0:	d403      	bmi.n	800b4da <__lo0bits+0x4e>
 800b4d2:	085b      	lsrs	r3, r3, #1
 800b4d4:	f102 0201 	add.w	r2, r2, #1
 800b4d8:	d003      	beq.n	800b4e2 <__lo0bits+0x56>
 800b4da:	6003      	str	r3, [r0, #0]
 800b4dc:	e7e5      	b.n	800b4aa <__lo0bits+0x1e>
 800b4de:	2200      	movs	r2, #0
 800b4e0:	e7e3      	b.n	800b4aa <__lo0bits+0x1e>
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	e7e1      	b.n	800b4aa <__lo0bits+0x1e>
	...

0800b4e8 <__i2b>:
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	f7ff ff05 	bl	800b2fc <_Balloc>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	b928      	cbnz	r0, 800b502 <__i2b+0x1a>
 800b4f6:	4b05      	ldr	r3, [pc, #20]	; (800b50c <__i2b+0x24>)
 800b4f8:	4805      	ldr	r0, [pc, #20]	; (800b510 <__i2b+0x28>)
 800b4fa:	f240 1145 	movw	r1, #325	; 0x145
 800b4fe:	f000 fd53 	bl	800bfa8 <__assert_func>
 800b502:	2301      	movs	r3, #1
 800b504:	6144      	str	r4, [r0, #20]
 800b506:	6103      	str	r3, [r0, #16]
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	bf00      	nop
 800b50c:	0800c38c 	.word	0x0800c38c
 800b510:	0800c39d 	.word	0x0800c39d

0800b514 <__multiply>:
 800b514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	4691      	mov	r9, r2
 800b51a:	690a      	ldr	r2, [r1, #16]
 800b51c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b520:	429a      	cmp	r2, r3
 800b522:	bfb8      	it	lt
 800b524:	460b      	movlt	r3, r1
 800b526:	460c      	mov	r4, r1
 800b528:	bfbc      	itt	lt
 800b52a:	464c      	movlt	r4, r9
 800b52c:	4699      	movlt	r9, r3
 800b52e:	6927      	ldr	r7, [r4, #16]
 800b530:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b534:	68a3      	ldr	r3, [r4, #8]
 800b536:	6861      	ldr	r1, [r4, #4]
 800b538:	eb07 060a 	add.w	r6, r7, sl
 800b53c:	42b3      	cmp	r3, r6
 800b53e:	b085      	sub	sp, #20
 800b540:	bfb8      	it	lt
 800b542:	3101      	addlt	r1, #1
 800b544:	f7ff feda 	bl	800b2fc <_Balloc>
 800b548:	b930      	cbnz	r0, 800b558 <__multiply+0x44>
 800b54a:	4602      	mov	r2, r0
 800b54c:	4b44      	ldr	r3, [pc, #272]	; (800b660 <__multiply+0x14c>)
 800b54e:	4845      	ldr	r0, [pc, #276]	; (800b664 <__multiply+0x150>)
 800b550:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b554:	f000 fd28 	bl	800bfa8 <__assert_func>
 800b558:	f100 0514 	add.w	r5, r0, #20
 800b55c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b560:	462b      	mov	r3, r5
 800b562:	2200      	movs	r2, #0
 800b564:	4543      	cmp	r3, r8
 800b566:	d321      	bcc.n	800b5ac <__multiply+0x98>
 800b568:	f104 0314 	add.w	r3, r4, #20
 800b56c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b570:	f109 0314 	add.w	r3, r9, #20
 800b574:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b578:	9202      	str	r2, [sp, #8]
 800b57a:	1b3a      	subs	r2, r7, r4
 800b57c:	3a15      	subs	r2, #21
 800b57e:	f022 0203 	bic.w	r2, r2, #3
 800b582:	3204      	adds	r2, #4
 800b584:	f104 0115 	add.w	r1, r4, #21
 800b588:	428f      	cmp	r7, r1
 800b58a:	bf38      	it	cc
 800b58c:	2204      	movcc	r2, #4
 800b58e:	9201      	str	r2, [sp, #4]
 800b590:	9a02      	ldr	r2, [sp, #8]
 800b592:	9303      	str	r3, [sp, #12]
 800b594:	429a      	cmp	r2, r3
 800b596:	d80c      	bhi.n	800b5b2 <__multiply+0x9e>
 800b598:	2e00      	cmp	r6, #0
 800b59a:	dd03      	ble.n	800b5a4 <__multiply+0x90>
 800b59c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d05b      	beq.n	800b65c <__multiply+0x148>
 800b5a4:	6106      	str	r6, [r0, #16]
 800b5a6:	b005      	add	sp, #20
 800b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ac:	f843 2b04 	str.w	r2, [r3], #4
 800b5b0:	e7d8      	b.n	800b564 <__multiply+0x50>
 800b5b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5b6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ba:	d024      	beq.n	800b606 <__multiply+0xf2>
 800b5bc:	f104 0e14 	add.w	lr, r4, #20
 800b5c0:	46a9      	mov	r9, r5
 800b5c2:	f04f 0c00 	mov.w	ip, #0
 800b5c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5ca:	f8d9 1000 	ldr.w	r1, [r9]
 800b5ce:	fa1f fb82 	uxth.w	fp, r2
 800b5d2:	b289      	uxth	r1, r1
 800b5d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5dc:	f8d9 2000 	ldr.w	r2, [r9]
 800b5e0:	4461      	add	r1, ip
 800b5e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5ee:	b289      	uxth	r1, r1
 800b5f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5f4:	4577      	cmp	r7, lr
 800b5f6:	f849 1b04 	str.w	r1, [r9], #4
 800b5fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5fe:	d8e2      	bhi.n	800b5c6 <__multiply+0xb2>
 800b600:	9a01      	ldr	r2, [sp, #4]
 800b602:	f845 c002 	str.w	ip, [r5, r2]
 800b606:	9a03      	ldr	r2, [sp, #12]
 800b608:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b60c:	3304      	adds	r3, #4
 800b60e:	f1b9 0f00 	cmp.w	r9, #0
 800b612:	d021      	beq.n	800b658 <__multiply+0x144>
 800b614:	6829      	ldr	r1, [r5, #0]
 800b616:	f104 0c14 	add.w	ip, r4, #20
 800b61a:	46ae      	mov	lr, r5
 800b61c:	f04f 0a00 	mov.w	sl, #0
 800b620:	f8bc b000 	ldrh.w	fp, [ip]
 800b624:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b628:	fb09 220b 	mla	r2, r9, fp, r2
 800b62c:	4452      	add	r2, sl
 800b62e:	b289      	uxth	r1, r1
 800b630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b634:	f84e 1b04 	str.w	r1, [lr], #4
 800b638:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b63c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b640:	f8be 1000 	ldrh.w	r1, [lr]
 800b644:	fb09 110a 	mla	r1, r9, sl, r1
 800b648:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b64c:	4567      	cmp	r7, ip
 800b64e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b652:	d8e5      	bhi.n	800b620 <__multiply+0x10c>
 800b654:	9a01      	ldr	r2, [sp, #4]
 800b656:	50a9      	str	r1, [r5, r2]
 800b658:	3504      	adds	r5, #4
 800b65a:	e799      	b.n	800b590 <__multiply+0x7c>
 800b65c:	3e01      	subs	r6, #1
 800b65e:	e79b      	b.n	800b598 <__multiply+0x84>
 800b660:	0800c38c 	.word	0x0800c38c
 800b664:	0800c39d 	.word	0x0800c39d

0800b668 <__pow5mult>:
 800b668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b66c:	4615      	mov	r5, r2
 800b66e:	f012 0203 	ands.w	r2, r2, #3
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	d007      	beq.n	800b688 <__pow5mult+0x20>
 800b678:	4c25      	ldr	r4, [pc, #148]	; (800b710 <__pow5mult+0xa8>)
 800b67a:	3a01      	subs	r2, #1
 800b67c:	2300      	movs	r3, #0
 800b67e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b682:	f7ff fe9d 	bl	800b3c0 <__multadd>
 800b686:	4607      	mov	r7, r0
 800b688:	10ad      	asrs	r5, r5, #2
 800b68a:	d03d      	beq.n	800b708 <__pow5mult+0xa0>
 800b68c:	69f4      	ldr	r4, [r6, #28]
 800b68e:	b97c      	cbnz	r4, 800b6b0 <__pow5mult+0x48>
 800b690:	2010      	movs	r0, #16
 800b692:	f7ff fd7f 	bl	800b194 <malloc>
 800b696:	4602      	mov	r2, r0
 800b698:	61f0      	str	r0, [r6, #28]
 800b69a:	b928      	cbnz	r0, 800b6a8 <__pow5mult+0x40>
 800b69c:	4b1d      	ldr	r3, [pc, #116]	; (800b714 <__pow5mult+0xac>)
 800b69e:	481e      	ldr	r0, [pc, #120]	; (800b718 <__pow5mult+0xb0>)
 800b6a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b6a4:	f000 fc80 	bl	800bfa8 <__assert_func>
 800b6a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6ac:	6004      	str	r4, [r0, #0]
 800b6ae:	60c4      	str	r4, [r0, #12]
 800b6b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b6b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6b8:	b94c      	cbnz	r4, 800b6ce <__pow5mult+0x66>
 800b6ba:	f240 2171 	movw	r1, #625	; 0x271
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7ff ff12 	bl	800b4e8 <__i2b>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	6003      	str	r3, [r0, #0]
 800b6ce:	f04f 0900 	mov.w	r9, #0
 800b6d2:	07eb      	lsls	r3, r5, #31
 800b6d4:	d50a      	bpl.n	800b6ec <__pow5mult+0x84>
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ff1a 	bl	800b514 <__multiply>
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	4680      	mov	r8, r0
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff fe49 	bl	800b37c <_Bfree>
 800b6ea:	4647      	mov	r7, r8
 800b6ec:	106d      	asrs	r5, r5, #1
 800b6ee:	d00b      	beq.n	800b708 <__pow5mult+0xa0>
 800b6f0:	6820      	ldr	r0, [r4, #0]
 800b6f2:	b938      	cbnz	r0, 800b704 <__pow5mult+0x9c>
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f7ff ff0b 	bl	800b514 <__multiply>
 800b6fe:	6020      	str	r0, [r4, #0]
 800b700:	f8c0 9000 	str.w	r9, [r0]
 800b704:	4604      	mov	r4, r0
 800b706:	e7e4      	b.n	800b6d2 <__pow5mult+0x6a>
 800b708:	4638      	mov	r0, r7
 800b70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70e:	bf00      	nop
 800b710:	0800c4e8 	.word	0x0800c4e8
 800b714:	0800c31d 	.word	0x0800c31d
 800b718:	0800c39d 	.word	0x0800c39d

0800b71c <__lshift>:
 800b71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b720:	460c      	mov	r4, r1
 800b722:	6849      	ldr	r1, [r1, #4]
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	4607      	mov	r7, r0
 800b72e:	4691      	mov	r9, r2
 800b730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b734:	f108 0601 	add.w	r6, r8, #1
 800b738:	42b3      	cmp	r3, r6
 800b73a:	db0b      	blt.n	800b754 <__lshift+0x38>
 800b73c:	4638      	mov	r0, r7
 800b73e:	f7ff fddd 	bl	800b2fc <_Balloc>
 800b742:	4605      	mov	r5, r0
 800b744:	b948      	cbnz	r0, 800b75a <__lshift+0x3e>
 800b746:	4602      	mov	r2, r0
 800b748:	4b28      	ldr	r3, [pc, #160]	; (800b7ec <__lshift+0xd0>)
 800b74a:	4829      	ldr	r0, [pc, #164]	; (800b7f0 <__lshift+0xd4>)
 800b74c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b750:	f000 fc2a 	bl	800bfa8 <__assert_func>
 800b754:	3101      	adds	r1, #1
 800b756:	005b      	lsls	r3, r3, #1
 800b758:	e7ee      	b.n	800b738 <__lshift+0x1c>
 800b75a:	2300      	movs	r3, #0
 800b75c:	f100 0114 	add.w	r1, r0, #20
 800b760:	f100 0210 	add.w	r2, r0, #16
 800b764:	4618      	mov	r0, r3
 800b766:	4553      	cmp	r3, sl
 800b768:	db33      	blt.n	800b7d2 <__lshift+0xb6>
 800b76a:	6920      	ldr	r0, [r4, #16]
 800b76c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b770:	f104 0314 	add.w	r3, r4, #20
 800b774:	f019 091f 	ands.w	r9, r9, #31
 800b778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b77c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b780:	d02b      	beq.n	800b7da <__lshift+0xbe>
 800b782:	f1c9 0e20 	rsb	lr, r9, #32
 800b786:	468a      	mov	sl, r1
 800b788:	2200      	movs	r2, #0
 800b78a:	6818      	ldr	r0, [r3, #0]
 800b78c:	fa00 f009 	lsl.w	r0, r0, r9
 800b790:	4310      	orrs	r0, r2
 800b792:	f84a 0b04 	str.w	r0, [sl], #4
 800b796:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79a:	459c      	cmp	ip, r3
 800b79c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7a0:	d8f3      	bhi.n	800b78a <__lshift+0x6e>
 800b7a2:	ebac 0304 	sub.w	r3, ip, r4
 800b7a6:	3b15      	subs	r3, #21
 800b7a8:	f023 0303 	bic.w	r3, r3, #3
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	f104 0015 	add.w	r0, r4, #21
 800b7b2:	4584      	cmp	ip, r0
 800b7b4:	bf38      	it	cc
 800b7b6:	2304      	movcc	r3, #4
 800b7b8:	50ca      	str	r2, [r1, r3]
 800b7ba:	b10a      	cbz	r2, 800b7c0 <__lshift+0xa4>
 800b7bc:	f108 0602 	add.w	r6, r8, #2
 800b7c0:	3e01      	subs	r6, #1
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	612e      	str	r6, [r5, #16]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	f7ff fdd8 	bl	800b37c <_Bfree>
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	e7c5      	b.n	800b766 <__lshift+0x4a>
 800b7da:	3904      	subs	r1, #4
 800b7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7e4:	459c      	cmp	ip, r3
 800b7e6:	d8f9      	bhi.n	800b7dc <__lshift+0xc0>
 800b7e8:	e7ea      	b.n	800b7c0 <__lshift+0xa4>
 800b7ea:	bf00      	nop
 800b7ec:	0800c38c 	.word	0x0800c38c
 800b7f0:	0800c39d 	.word	0x0800c39d

0800b7f4 <__mcmp>:
 800b7f4:	b530      	push	{r4, r5, lr}
 800b7f6:	6902      	ldr	r2, [r0, #16]
 800b7f8:	690c      	ldr	r4, [r1, #16]
 800b7fa:	1b12      	subs	r2, r2, r4
 800b7fc:	d10e      	bne.n	800b81c <__mcmp+0x28>
 800b7fe:	f100 0314 	add.w	r3, r0, #20
 800b802:	3114      	adds	r1, #20
 800b804:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b808:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b80c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b810:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b814:	42a5      	cmp	r5, r4
 800b816:	d003      	beq.n	800b820 <__mcmp+0x2c>
 800b818:	d305      	bcc.n	800b826 <__mcmp+0x32>
 800b81a:	2201      	movs	r2, #1
 800b81c:	4610      	mov	r0, r2
 800b81e:	bd30      	pop	{r4, r5, pc}
 800b820:	4283      	cmp	r3, r0
 800b822:	d3f3      	bcc.n	800b80c <__mcmp+0x18>
 800b824:	e7fa      	b.n	800b81c <__mcmp+0x28>
 800b826:	f04f 32ff 	mov.w	r2, #4294967295
 800b82a:	e7f7      	b.n	800b81c <__mcmp+0x28>

0800b82c <__mdiff>:
 800b82c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b830:	460c      	mov	r4, r1
 800b832:	4606      	mov	r6, r0
 800b834:	4611      	mov	r1, r2
 800b836:	4620      	mov	r0, r4
 800b838:	4690      	mov	r8, r2
 800b83a:	f7ff ffdb 	bl	800b7f4 <__mcmp>
 800b83e:	1e05      	subs	r5, r0, #0
 800b840:	d110      	bne.n	800b864 <__mdiff+0x38>
 800b842:	4629      	mov	r1, r5
 800b844:	4630      	mov	r0, r6
 800b846:	f7ff fd59 	bl	800b2fc <_Balloc>
 800b84a:	b930      	cbnz	r0, 800b85a <__mdiff+0x2e>
 800b84c:	4b3a      	ldr	r3, [pc, #232]	; (800b938 <__mdiff+0x10c>)
 800b84e:	4602      	mov	r2, r0
 800b850:	f240 2137 	movw	r1, #567	; 0x237
 800b854:	4839      	ldr	r0, [pc, #228]	; (800b93c <__mdiff+0x110>)
 800b856:	f000 fba7 	bl	800bfa8 <__assert_func>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b864:	bfa4      	itt	ge
 800b866:	4643      	movge	r3, r8
 800b868:	46a0      	movge	r8, r4
 800b86a:	4630      	mov	r0, r6
 800b86c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b870:	bfa6      	itte	ge
 800b872:	461c      	movge	r4, r3
 800b874:	2500      	movge	r5, #0
 800b876:	2501      	movlt	r5, #1
 800b878:	f7ff fd40 	bl	800b2fc <_Balloc>
 800b87c:	b920      	cbnz	r0, 800b888 <__mdiff+0x5c>
 800b87e:	4b2e      	ldr	r3, [pc, #184]	; (800b938 <__mdiff+0x10c>)
 800b880:	4602      	mov	r2, r0
 800b882:	f240 2145 	movw	r1, #581	; 0x245
 800b886:	e7e5      	b.n	800b854 <__mdiff+0x28>
 800b888:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b88c:	6926      	ldr	r6, [r4, #16]
 800b88e:	60c5      	str	r5, [r0, #12]
 800b890:	f104 0914 	add.w	r9, r4, #20
 800b894:	f108 0514 	add.w	r5, r8, #20
 800b898:	f100 0e14 	add.w	lr, r0, #20
 800b89c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8a4:	f108 0210 	add.w	r2, r8, #16
 800b8a8:	46f2      	mov	sl, lr
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8b4:	fa11 f88b 	uxtah	r8, r1, fp
 800b8b8:	b299      	uxth	r1, r3
 800b8ba:	0c1b      	lsrs	r3, r3, #16
 800b8bc:	eba8 0801 	sub.w	r8, r8, r1
 800b8c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8c8:	fa1f f888 	uxth.w	r8, r8
 800b8cc:	1419      	asrs	r1, r3, #16
 800b8ce:	454e      	cmp	r6, r9
 800b8d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8d4:	f84a 3b04 	str.w	r3, [sl], #4
 800b8d8:	d8e8      	bhi.n	800b8ac <__mdiff+0x80>
 800b8da:	1b33      	subs	r3, r6, r4
 800b8dc:	3b15      	subs	r3, #21
 800b8de:	f023 0303 	bic.w	r3, r3, #3
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	3415      	adds	r4, #21
 800b8e6:	42a6      	cmp	r6, r4
 800b8e8:	bf38      	it	cc
 800b8ea:	2304      	movcc	r3, #4
 800b8ec:	441d      	add	r5, r3
 800b8ee:	4473      	add	r3, lr
 800b8f0:	469e      	mov	lr, r3
 800b8f2:	462e      	mov	r6, r5
 800b8f4:	4566      	cmp	r6, ip
 800b8f6:	d30e      	bcc.n	800b916 <__mdiff+0xea>
 800b8f8:	f10c 0203 	add.w	r2, ip, #3
 800b8fc:	1b52      	subs	r2, r2, r5
 800b8fe:	f022 0203 	bic.w	r2, r2, #3
 800b902:	3d03      	subs	r5, #3
 800b904:	45ac      	cmp	ip, r5
 800b906:	bf38      	it	cc
 800b908:	2200      	movcc	r2, #0
 800b90a:	4413      	add	r3, r2
 800b90c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b910:	b17a      	cbz	r2, 800b932 <__mdiff+0x106>
 800b912:	6107      	str	r7, [r0, #16]
 800b914:	e7a4      	b.n	800b860 <__mdiff+0x34>
 800b916:	f856 8b04 	ldr.w	r8, [r6], #4
 800b91a:	fa11 f288 	uxtah	r2, r1, r8
 800b91e:	1414      	asrs	r4, r2, #16
 800b920:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b924:	b292      	uxth	r2, r2
 800b926:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b92a:	f84e 2b04 	str.w	r2, [lr], #4
 800b92e:	1421      	asrs	r1, r4, #16
 800b930:	e7e0      	b.n	800b8f4 <__mdiff+0xc8>
 800b932:	3f01      	subs	r7, #1
 800b934:	e7ea      	b.n	800b90c <__mdiff+0xe0>
 800b936:	bf00      	nop
 800b938:	0800c38c 	.word	0x0800c38c
 800b93c:	0800c39d 	.word	0x0800c39d

0800b940 <__d2b>:
 800b940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b944:	460f      	mov	r7, r1
 800b946:	2101      	movs	r1, #1
 800b948:	ec59 8b10 	vmov	r8, r9, d0
 800b94c:	4616      	mov	r6, r2
 800b94e:	f7ff fcd5 	bl	800b2fc <_Balloc>
 800b952:	4604      	mov	r4, r0
 800b954:	b930      	cbnz	r0, 800b964 <__d2b+0x24>
 800b956:	4602      	mov	r2, r0
 800b958:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <__d2b+0xac>)
 800b95a:	4825      	ldr	r0, [pc, #148]	; (800b9f0 <__d2b+0xb0>)
 800b95c:	f240 310f 	movw	r1, #783	; 0x30f
 800b960:	f000 fb22 	bl	800bfa8 <__assert_func>
 800b964:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b968:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b96c:	bb2d      	cbnz	r5, 800b9ba <__d2b+0x7a>
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	f1b8 0300 	subs.w	r3, r8, #0
 800b974:	d026      	beq.n	800b9c4 <__d2b+0x84>
 800b976:	4668      	mov	r0, sp
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	f7ff fd87 	bl	800b48c <__lo0bits>
 800b97e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b982:	b1e8      	cbz	r0, 800b9c0 <__d2b+0x80>
 800b984:	f1c0 0320 	rsb	r3, r0, #32
 800b988:	fa02 f303 	lsl.w	r3, r2, r3
 800b98c:	430b      	orrs	r3, r1
 800b98e:	40c2      	lsrs	r2, r0
 800b990:	6163      	str	r3, [r4, #20]
 800b992:	9201      	str	r2, [sp, #4]
 800b994:	9b01      	ldr	r3, [sp, #4]
 800b996:	61a3      	str	r3, [r4, #24]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	bf14      	ite	ne
 800b99c:	2202      	movne	r2, #2
 800b99e:	2201      	moveq	r2, #1
 800b9a0:	6122      	str	r2, [r4, #16]
 800b9a2:	b1bd      	cbz	r5, 800b9d4 <__d2b+0x94>
 800b9a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9a8:	4405      	add	r5, r0
 800b9aa:	603d      	str	r5, [r7, #0]
 800b9ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9b0:	6030      	str	r0, [r6, #0]
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	b003      	add	sp, #12
 800b9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9be:	e7d6      	b.n	800b96e <__d2b+0x2e>
 800b9c0:	6161      	str	r1, [r4, #20]
 800b9c2:	e7e7      	b.n	800b994 <__d2b+0x54>
 800b9c4:	a801      	add	r0, sp, #4
 800b9c6:	f7ff fd61 	bl	800b48c <__lo0bits>
 800b9ca:	9b01      	ldr	r3, [sp, #4]
 800b9cc:	6163      	str	r3, [r4, #20]
 800b9ce:	3020      	adds	r0, #32
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	e7e5      	b.n	800b9a0 <__d2b+0x60>
 800b9d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9dc:	6038      	str	r0, [r7, #0]
 800b9de:	6918      	ldr	r0, [r3, #16]
 800b9e0:	f7ff fd34 	bl	800b44c <__hi0bits>
 800b9e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9e8:	e7e2      	b.n	800b9b0 <__d2b+0x70>
 800b9ea:	bf00      	nop
 800b9ec:	0800c38c 	.word	0x0800c38c
 800b9f0:	0800c39d 	.word	0x0800c39d

0800b9f4 <__sfputc_r>:
 800b9f4:	6893      	ldr	r3, [r2, #8]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	b410      	push	{r4}
 800b9fc:	6093      	str	r3, [r2, #8]
 800b9fe:	da08      	bge.n	800ba12 <__sfputc_r+0x1e>
 800ba00:	6994      	ldr	r4, [r2, #24]
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	db01      	blt.n	800ba0a <__sfputc_r+0x16>
 800ba06:	290a      	cmp	r1, #10
 800ba08:	d103      	bne.n	800ba12 <__sfputc_r+0x1e>
 800ba0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba0e:	f000 ba17 	b.w	800be40 <__swbuf_r>
 800ba12:	6813      	ldr	r3, [r2, #0]
 800ba14:	1c58      	adds	r0, r3, #1
 800ba16:	6010      	str	r0, [r2, #0]
 800ba18:	7019      	strb	r1, [r3, #0]
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <__sfputs_r>:
 800ba22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	18d5      	adds	r5, r2, r3
 800ba2c:	42ac      	cmp	r4, r5
 800ba2e:	d101      	bne.n	800ba34 <__sfputs_r+0x12>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e007      	b.n	800ba44 <__sfputs_r+0x22>
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	463a      	mov	r2, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ffda 	bl	800b9f4 <__sfputc_r>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d1f3      	bne.n	800ba2c <__sfputs_r+0xa>
 800ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba48 <_vfiprintf_r>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	b09d      	sub	sp, #116	; 0x74
 800ba50:	4614      	mov	r4, r2
 800ba52:	4698      	mov	r8, r3
 800ba54:	4606      	mov	r6, r0
 800ba56:	b118      	cbz	r0, 800ba60 <_vfiprintf_r+0x18>
 800ba58:	6a03      	ldr	r3, [r0, #32]
 800ba5a:	b90b      	cbnz	r3, 800ba60 <_vfiprintf_r+0x18>
 800ba5c:	f7fe fbbe 	bl	800a1dc <__sinit>
 800ba60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba62:	07d9      	lsls	r1, r3, #31
 800ba64:	d405      	bmi.n	800ba72 <_vfiprintf_r+0x2a>
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	059a      	lsls	r2, r3, #22
 800ba6a:	d402      	bmi.n	800ba72 <_vfiprintf_r+0x2a>
 800ba6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba6e:	f7fe fcc6 	bl	800a3fe <__retarget_lock_acquire_recursive>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	071b      	lsls	r3, r3, #28
 800ba76:	d501      	bpl.n	800ba7c <_vfiprintf_r+0x34>
 800ba78:	692b      	ldr	r3, [r5, #16]
 800ba7a:	b99b      	cbnz	r3, 800baa4 <_vfiprintf_r+0x5c>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f000 fa1c 	bl	800bebc <__swsetup_r>
 800ba84:	b170      	cbz	r0, 800baa4 <_vfiprintf_r+0x5c>
 800ba86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba88:	07dc      	lsls	r4, r3, #31
 800ba8a:	d504      	bpl.n	800ba96 <_vfiprintf_r+0x4e>
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	b01d      	add	sp, #116	; 0x74
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	0598      	lsls	r0, r3, #22
 800ba9a:	d4f7      	bmi.n	800ba8c <_vfiprintf_r+0x44>
 800ba9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba9e:	f7fe fcaf 	bl	800a400 <__retarget_lock_release_recursive>
 800baa2:	e7f3      	b.n	800ba8c <_vfiprintf_r+0x44>
 800baa4:	2300      	movs	r3, #0
 800baa6:	9309      	str	r3, [sp, #36]	; 0x24
 800baa8:	2320      	movs	r3, #32
 800baaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab2:	2330      	movs	r3, #48	; 0x30
 800bab4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc68 <_vfiprintf_r+0x220>
 800bab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800babc:	f04f 0901 	mov.w	r9, #1
 800bac0:	4623      	mov	r3, r4
 800bac2:	469a      	mov	sl, r3
 800bac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac8:	b10a      	cbz	r2, 800bace <_vfiprintf_r+0x86>
 800baca:	2a25      	cmp	r2, #37	; 0x25
 800bacc:	d1f9      	bne.n	800bac2 <_vfiprintf_r+0x7a>
 800bace:	ebba 0b04 	subs.w	fp, sl, r4
 800bad2:	d00b      	beq.n	800baec <_vfiprintf_r+0xa4>
 800bad4:	465b      	mov	r3, fp
 800bad6:	4622      	mov	r2, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	4630      	mov	r0, r6
 800badc:	f7ff ffa1 	bl	800ba22 <__sfputs_r>
 800bae0:	3001      	adds	r0, #1
 800bae2:	f000 80a9 	beq.w	800bc38 <_vfiprintf_r+0x1f0>
 800bae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae8:	445a      	add	r2, fp
 800baea:	9209      	str	r2, [sp, #36]	; 0x24
 800baec:	f89a 3000 	ldrb.w	r3, [sl]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 80a1 	beq.w	800bc38 <_vfiprintf_r+0x1f0>
 800baf6:	2300      	movs	r3, #0
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb00:	f10a 0a01 	add.w	sl, sl, #1
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	9307      	str	r3, [sp, #28]
 800bb08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb0c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb0e:	4654      	mov	r4, sl
 800bb10:	2205      	movs	r2, #5
 800bb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb16:	4854      	ldr	r0, [pc, #336]	; (800bc68 <_vfiprintf_r+0x220>)
 800bb18:	f7f4 fb72 	bl	8000200 <memchr>
 800bb1c:	9a04      	ldr	r2, [sp, #16]
 800bb1e:	b9d8      	cbnz	r0, 800bb58 <_vfiprintf_r+0x110>
 800bb20:	06d1      	lsls	r1, r2, #27
 800bb22:	bf44      	itt	mi
 800bb24:	2320      	movmi	r3, #32
 800bb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb2a:	0713      	lsls	r3, r2, #28
 800bb2c:	bf44      	itt	mi
 800bb2e:	232b      	movmi	r3, #43	; 0x2b
 800bb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb34:	f89a 3000 	ldrb.w	r3, [sl]
 800bb38:	2b2a      	cmp	r3, #42	; 0x2a
 800bb3a:	d015      	beq.n	800bb68 <_vfiprintf_r+0x120>
 800bb3c:	9a07      	ldr	r2, [sp, #28]
 800bb3e:	4654      	mov	r4, sl
 800bb40:	2000      	movs	r0, #0
 800bb42:	f04f 0c0a 	mov.w	ip, #10
 800bb46:	4621      	mov	r1, r4
 800bb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb4c:	3b30      	subs	r3, #48	; 0x30
 800bb4e:	2b09      	cmp	r3, #9
 800bb50:	d94d      	bls.n	800bbee <_vfiprintf_r+0x1a6>
 800bb52:	b1b0      	cbz	r0, 800bb82 <_vfiprintf_r+0x13a>
 800bb54:	9207      	str	r2, [sp, #28]
 800bb56:	e014      	b.n	800bb82 <_vfiprintf_r+0x13a>
 800bb58:	eba0 0308 	sub.w	r3, r0, r8
 800bb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb60:	4313      	orrs	r3, r2
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	46a2      	mov	sl, r4
 800bb66:	e7d2      	b.n	800bb0e <_vfiprintf_r+0xc6>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	1d19      	adds	r1, r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	9103      	str	r1, [sp, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bfbb      	ittet	lt
 800bb74:	425b      	neglt	r3, r3
 800bb76:	f042 0202 	orrlt.w	r2, r2, #2
 800bb7a:	9307      	strge	r3, [sp, #28]
 800bb7c:	9307      	strlt	r3, [sp, #28]
 800bb7e:	bfb8      	it	lt
 800bb80:	9204      	strlt	r2, [sp, #16]
 800bb82:	7823      	ldrb	r3, [r4, #0]
 800bb84:	2b2e      	cmp	r3, #46	; 0x2e
 800bb86:	d10c      	bne.n	800bba2 <_vfiprintf_r+0x15a>
 800bb88:	7863      	ldrb	r3, [r4, #1]
 800bb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8c:	d134      	bne.n	800bbf8 <_vfiprintf_r+0x1b0>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	9203      	str	r2, [sp, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bfb8      	it	lt
 800bb9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb9e:	3402      	adds	r4, #2
 800bba0:	9305      	str	r3, [sp, #20]
 800bba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc78 <_vfiprintf_r+0x230>
 800bba6:	7821      	ldrb	r1, [r4, #0]
 800bba8:	2203      	movs	r2, #3
 800bbaa:	4650      	mov	r0, sl
 800bbac:	f7f4 fb28 	bl	8000200 <memchr>
 800bbb0:	b138      	cbz	r0, 800bbc2 <_vfiprintf_r+0x17a>
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	eba0 000a 	sub.w	r0, r0, sl
 800bbb8:	2240      	movs	r2, #64	; 0x40
 800bbba:	4082      	lsls	r2, r0
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc6:	4829      	ldr	r0, [pc, #164]	; (800bc6c <_vfiprintf_r+0x224>)
 800bbc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbcc:	2206      	movs	r2, #6
 800bbce:	f7f4 fb17 	bl	8000200 <memchr>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d03f      	beq.n	800bc56 <_vfiprintf_r+0x20e>
 800bbd6:	4b26      	ldr	r3, [pc, #152]	; (800bc70 <_vfiprintf_r+0x228>)
 800bbd8:	bb1b      	cbnz	r3, 800bc22 <_vfiprintf_r+0x1da>
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	3307      	adds	r3, #7
 800bbde:	f023 0307 	bic.w	r3, r3, #7
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	9303      	str	r3, [sp, #12]
 800bbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe8:	443b      	add	r3, r7
 800bbea:	9309      	str	r3, [sp, #36]	; 0x24
 800bbec:	e768      	b.n	800bac0 <_vfiprintf_r+0x78>
 800bbee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	e7a6      	b.n	800bb46 <_vfiprintf_r+0xfe>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	3401      	adds	r4, #1
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	f04f 0c0a 	mov.w	ip, #10
 800bc04:	4620      	mov	r0, r4
 800bc06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc0a:	3a30      	subs	r2, #48	; 0x30
 800bc0c:	2a09      	cmp	r2, #9
 800bc0e:	d903      	bls.n	800bc18 <_vfiprintf_r+0x1d0>
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0c6      	beq.n	800bba2 <_vfiprintf_r+0x15a>
 800bc14:	9105      	str	r1, [sp, #20]
 800bc16:	e7c4      	b.n	800bba2 <_vfiprintf_r+0x15a>
 800bc18:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e7f0      	b.n	800bc04 <_vfiprintf_r+0x1bc>
 800bc22:	ab03      	add	r3, sp, #12
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	462a      	mov	r2, r5
 800bc28:	4b12      	ldr	r3, [pc, #72]	; (800bc74 <_vfiprintf_r+0x22c>)
 800bc2a:	a904      	add	r1, sp, #16
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f7fd fe83 	bl	8009938 <_printf_float>
 800bc32:	4607      	mov	r7, r0
 800bc34:	1c78      	adds	r0, r7, #1
 800bc36:	d1d6      	bne.n	800bbe6 <_vfiprintf_r+0x19e>
 800bc38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc3a:	07d9      	lsls	r1, r3, #31
 800bc3c:	d405      	bmi.n	800bc4a <_vfiprintf_r+0x202>
 800bc3e:	89ab      	ldrh	r3, [r5, #12]
 800bc40:	059a      	lsls	r2, r3, #22
 800bc42:	d402      	bmi.n	800bc4a <_vfiprintf_r+0x202>
 800bc44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc46:	f7fe fbdb 	bl	800a400 <__retarget_lock_release_recursive>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	065b      	lsls	r3, r3, #25
 800bc4e:	f53f af1d 	bmi.w	800ba8c <_vfiprintf_r+0x44>
 800bc52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc54:	e71c      	b.n	800ba90 <_vfiprintf_r+0x48>
 800bc56:	ab03      	add	r3, sp, #12
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <_vfiprintf_r+0x22c>)
 800bc5e:	a904      	add	r1, sp, #16
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7fe f90d 	bl	8009e80 <_printf_i>
 800bc66:	e7e4      	b.n	800bc32 <_vfiprintf_r+0x1ea>
 800bc68:	0800c4f4 	.word	0x0800c4f4
 800bc6c:	0800c4fe 	.word	0x0800c4fe
 800bc70:	08009939 	.word	0x08009939
 800bc74:	0800ba23 	.word	0x0800ba23
 800bc78:	0800c4fa 	.word	0x0800c4fa

0800bc7c <__sflush_r>:
 800bc7c:	898a      	ldrh	r2, [r1, #12]
 800bc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	4605      	mov	r5, r0
 800bc84:	0710      	lsls	r0, r2, #28
 800bc86:	460c      	mov	r4, r1
 800bc88:	d458      	bmi.n	800bd3c <__sflush_r+0xc0>
 800bc8a:	684b      	ldr	r3, [r1, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dc05      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc02      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d0f9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bca2:	2300      	movs	r3, #0
 800bca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bca8:	682f      	ldr	r7, [r5, #0]
 800bcaa:	6a21      	ldr	r1, [r4, #32]
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	d032      	beq.n	800bd16 <__sflush_r+0x9a>
 800bcb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	075a      	lsls	r2, r3, #29
 800bcb6:	d505      	bpl.n	800bcc4 <__sflush_r+0x48>
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	1ac0      	subs	r0, r0, r3
 800bcbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcbe:	b10b      	cbz	r3, 800bcc4 <__sflush_r+0x48>
 800bcc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcc2:	1ac0      	subs	r0, r0, r3
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcca:	6a21      	ldr	r1, [r4, #32]
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b0      	blx	r6
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	d106      	bne.n	800bce4 <__sflush_r+0x68>
 800bcd6:	6829      	ldr	r1, [r5, #0]
 800bcd8:	291d      	cmp	r1, #29
 800bcda:	d82b      	bhi.n	800bd34 <__sflush_r+0xb8>
 800bcdc:	4a29      	ldr	r2, [pc, #164]	; (800bd84 <__sflush_r+0x108>)
 800bcde:	410a      	asrs	r2, r1
 800bce0:	07d6      	lsls	r6, r2, #31
 800bce2:	d427      	bmi.n	800bd34 <__sflush_r+0xb8>
 800bce4:	2200      	movs	r2, #0
 800bce6:	6062      	str	r2, [r4, #4]
 800bce8:	04d9      	lsls	r1, r3, #19
 800bcea:	6922      	ldr	r2, [r4, #16]
 800bcec:	6022      	str	r2, [r4, #0]
 800bcee:	d504      	bpl.n	800bcfa <__sflush_r+0x7e>
 800bcf0:	1c42      	adds	r2, r0, #1
 800bcf2:	d101      	bne.n	800bcf8 <__sflush_r+0x7c>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	b903      	cbnz	r3, 800bcfa <__sflush_r+0x7e>
 800bcf8:	6560      	str	r0, [r4, #84]	; 0x54
 800bcfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfc:	602f      	str	r7, [r5, #0]
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	d0c9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd06:	4299      	cmp	r1, r3
 800bd08:	d002      	beq.n	800bd10 <__sflush_r+0x94>
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f7ff f9f6 	bl	800b0fc <_free_r>
 800bd10:	2000      	movs	r0, #0
 800bd12:	6360      	str	r0, [r4, #52]	; 0x34
 800bd14:	e7c0      	b.n	800bc98 <__sflush_r+0x1c>
 800bd16:	2301      	movs	r3, #1
 800bd18:	4628      	mov	r0, r5
 800bd1a:	47b0      	blx	r6
 800bd1c:	1c41      	adds	r1, r0, #1
 800bd1e:	d1c8      	bne.n	800bcb2 <__sflush_r+0x36>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0c5      	beq.n	800bcb2 <__sflush_r+0x36>
 800bd26:	2b1d      	cmp	r3, #29
 800bd28:	d001      	beq.n	800bd2e <__sflush_r+0xb2>
 800bd2a:	2b16      	cmp	r3, #22
 800bd2c:	d101      	bne.n	800bd32 <__sflush_r+0xb6>
 800bd2e:	602f      	str	r7, [r5, #0]
 800bd30:	e7b1      	b.n	800bc96 <__sflush_r+0x1a>
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7ad      	b.n	800bc98 <__sflush_r+0x1c>
 800bd3c:	690f      	ldr	r7, [r1, #16]
 800bd3e:	2f00      	cmp	r7, #0
 800bd40:	d0a9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd42:	0793      	lsls	r3, r2, #30
 800bd44:	680e      	ldr	r6, [r1, #0]
 800bd46:	bf08      	it	eq
 800bd48:	694b      	ldreq	r3, [r1, #20]
 800bd4a:	600f      	str	r7, [r1, #0]
 800bd4c:	bf18      	it	ne
 800bd4e:	2300      	movne	r3, #0
 800bd50:	eba6 0807 	sub.w	r8, r6, r7
 800bd54:	608b      	str	r3, [r1, #8]
 800bd56:	f1b8 0f00 	cmp.w	r8, #0
 800bd5a:	dd9c      	ble.n	800bc96 <__sflush_r+0x1a>
 800bd5c:	6a21      	ldr	r1, [r4, #32]
 800bd5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd60:	4643      	mov	r3, r8
 800bd62:	463a      	mov	r2, r7
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b0      	blx	r6
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	dc06      	bgt.n	800bd7a <__sflush_r+0xfe>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd72:	81a3      	strh	r3, [r4, #12]
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	e78e      	b.n	800bc98 <__sflush_r+0x1c>
 800bd7a:	4407      	add	r7, r0
 800bd7c:	eba8 0800 	sub.w	r8, r8, r0
 800bd80:	e7e9      	b.n	800bd56 <__sflush_r+0xda>
 800bd82:	bf00      	nop
 800bd84:	dfbffffe 	.word	0xdfbffffe

0800bd88 <_fflush_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b913      	cbnz	r3, 800bd98 <_fflush_r+0x10>
 800bd92:	2500      	movs	r5, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	b118      	cbz	r0, 800bda2 <_fflush_r+0x1a>
 800bd9a:	6a03      	ldr	r3, [r0, #32]
 800bd9c:	b90b      	cbnz	r3, 800bda2 <_fflush_r+0x1a>
 800bd9e:	f7fe fa1d 	bl	800a1dc <__sinit>
 800bda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0f3      	beq.n	800bd92 <_fflush_r+0xa>
 800bdaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdac:	07d0      	lsls	r0, r2, #31
 800bdae:	d404      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb0:	0599      	lsls	r1, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdb6:	f7fe fb22 	bl	800a3fe <__retarget_lock_acquire_recursive>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f7ff ff5d 	bl	800bc7c <__sflush_r>
 800bdc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdc4:	07da      	lsls	r2, r3, #31
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	d4e4      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	059b      	lsls	r3, r3, #22
 800bdce:	d4e1      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdd2:	f7fe fb15 	bl	800a400 <__retarget_lock_release_recursive>
 800bdd6:	e7dd      	b.n	800bd94 <_fflush_r+0xc>

0800bdd8 <_putc_r>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	460d      	mov	r5, r1
 800bddc:	4614      	mov	r4, r2
 800bdde:	4606      	mov	r6, r0
 800bde0:	b118      	cbz	r0, 800bdea <_putc_r+0x12>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <_putc_r+0x12>
 800bde6:	f7fe f9f9 	bl	800a1dc <__sinit>
 800bdea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdec:	07d8      	lsls	r0, r3, #31
 800bdee:	d405      	bmi.n	800bdfc <_putc_r+0x24>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	0599      	lsls	r1, r3, #22
 800bdf4:	d402      	bmi.n	800bdfc <_putc_r+0x24>
 800bdf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdf8:	f7fe fb01 	bl	800a3fe <__retarget_lock_acquire_recursive>
 800bdfc:	68a3      	ldr	r3, [r4, #8]
 800bdfe:	3b01      	subs	r3, #1
 800be00:	2b00      	cmp	r3, #0
 800be02:	60a3      	str	r3, [r4, #8]
 800be04:	da05      	bge.n	800be12 <_putc_r+0x3a>
 800be06:	69a2      	ldr	r2, [r4, #24]
 800be08:	4293      	cmp	r3, r2
 800be0a:	db12      	blt.n	800be32 <_putc_r+0x5a>
 800be0c:	b2eb      	uxtb	r3, r5
 800be0e:	2b0a      	cmp	r3, #10
 800be10:	d00f      	beq.n	800be32 <_putc_r+0x5a>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	6022      	str	r2, [r4, #0]
 800be18:	701d      	strb	r5, [r3, #0]
 800be1a:	b2ed      	uxtb	r5, r5
 800be1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be1e:	07da      	lsls	r2, r3, #31
 800be20:	d405      	bmi.n	800be2e <_putc_r+0x56>
 800be22:	89a3      	ldrh	r3, [r4, #12]
 800be24:	059b      	lsls	r3, r3, #22
 800be26:	d402      	bmi.n	800be2e <_putc_r+0x56>
 800be28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be2a:	f7fe fae9 	bl	800a400 <__retarget_lock_release_recursive>
 800be2e:	4628      	mov	r0, r5
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	4629      	mov	r1, r5
 800be34:	4622      	mov	r2, r4
 800be36:	4630      	mov	r0, r6
 800be38:	f000 f802 	bl	800be40 <__swbuf_r>
 800be3c:	4605      	mov	r5, r0
 800be3e:	e7ed      	b.n	800be1c <_putc_r+0x44>

0800be40 <__swbuf_r>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	460e      	mov	r6, r1
 800be44:	4614      	mov	r4, r2
 800be46:	4605      	mov	r5, r0
 800be48:	b118      	cbz	r0, 800be52 <__swbuf_r+0x12>
 800be4a:	6a03      	ldr	r3, [r0, #32]
 800be4c:	b90b      	cbnz	r3, 800be52 <__swbuf_r+0x12>
 800be4e:	f7fe f9c5 	bl	800a1dc <__sinit>
 800be52:	69a3      	ldr	r3, [r4, #24]
 800be54:	60a3      	str	r3, [r4, #8]
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	071a      	lsls	r2, r3, #28
 800be5a:	d525      	bpl.n	800bea8 <__swbuf_r+0x68>
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	b31b      	cbz	r3, 800bea8 <__swbuf_r+0x68>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	6922      	ldr	r2, [r4, #16]
 800be64:	1a98      	subs	r0, r3, r2
 800be66:	6963      	ldr	r3, [r4, #20]
 800be68:	b2f6      	uxtb	r6, r6
 800be6a:	4283      	cmp	r3, r0
 800be6c:	4637      	mov	r7, r6
 800be6e:	dc04      	bgt.n	800be7a <__swbuf_r+0x3a>
 800be70:	4621      	mov	r1, r4
 800be72:	4628      	mov	r0, r5
 800be74:	f7ff ff88 	bl	800bd88 <_fflush_r>
 800be78:	b9e0      	cbnz	r0, 800beb4 <__swbuf_r+0x74>
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	60a3      	str	r3, [r4, #8]
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	1c5a      	adds	r2, r3, #1
 800be84:	6022      	str	r2, [r4, #0]
 800be86:	701e      	strb	r6, [r3, #0]
 800be88:	6962      	ldr	r2, [r4, #20]
 800be8a:	1c43      	adds	r3, r0, #1
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d004      	beq.n	800be9a <__swbuf_r+0x5a>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	07db      	lsls	r3, r3, #31
 800be94:	d506      	bpl.n	800bea4 <__swbuf_r+0x64>
 800be96:	2e0a      	cmp	r6, #10
 800be98:	d104      	bne.n	800bea4 <__swbuf_r+0x64>
 800be9a:	4621      	mov	r1, r4
 800be9c:	4628      	mov	r0, r5
 800be9e:	f7ff ff73 	bl	800bd88 <_fflush_r>
 800bea2:	b938      	cbnz	r0, 800beb4 <__swbuf_r+0x74>
 800bea4:	4638      	mov	r0, r7
 800bea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea8:	4621      	mov	r1, r4
 800beaa:	4628      	mov	r0, r5
 800beac:	f000 f806 	bl	800bebc <__swsetup_r>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d0d5      	beq.n	800be60 <__swbuf_r+0x20>
 800beb4:	f04f 37ff 	mov.w	r7, #4294967295
 800beb8:	e7f4      	b.n	800bea4 <__swbuf_r+0x64>
	...

0800bebc <__swsetup_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4b2a      	ldr	r3, [pc, #168]	; (800bf68 <__swsetup_r+0xac>)
 800bec0:	4605      	mov	r5, r0
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	460c      	mov	r4, r1
 800bec6:	b118      	cbz	r0, 800bed0 <__swsetup_r+0x14>
 800bec8:	6a03      	ldr	r3, [r0, #32]
 800beca:	b90b      	cbnz	r3, 800bed0 <__swsetup_r+0x14>
 800becc:	f7fe f986 	bl	800a1dc <__sinit>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bed6:	0718      	lsls	r0, r3, #28
 800bed8:	d422      	bmi.n	800bf20 <__swsetup_r+0x64>
 800beda:	06d9      	lsls	r1, r3, #27
 800bedc:	d407      	bmi.n	800beee <__swsetup_r+0x32>
 800bede:	2309      	movs	r3, #9
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295
 800beec:	e034      	b.n	800bf58 <__swsetup_r+0x9c>
 800beee:	0758      	lsls	r0, r3, #29
 800bef0:	d512      	bpl.n	800bf18 <__swsetup_r+0x5c>
 800bef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bef4:	b141      	cbz	r1, 800bf08 <__swsetup_r+0x4c>
 800bef6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800befa:	4299      	cmp	r1, r3
 800befc:	d002      	beq.n	800bf04 <__swsetup_r+0x48>
 800befe:	4628      	mov	r0, r5
 800bf00:	f7ff f8fc 	bl	800b0fc <_free_r>
 800bf04:	2300      	movs	r3, #0
 800bf06:	6363      	str	r3, [r4, #52]	; 0x34
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf0e:	81a3      	strh	r3, [r4, #12]
 800bf10:	2300      	movs	r3, #0
 800bf12:	6063      	str	r3, [r4, #4]
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	89a3      	ldrh	r3, [r4, #12]
 800bf1a:	f043 0308 	orr.w	r3, r3, #8
 800bf1e:	81a3      	strh	r3, [r4, #12]
 800bf20:	6923      	ldr	r3, [r4, #16]
 800bf22:	b94b      	cbnz	r3, 800bf38 <__swsetup_r+0x7c>
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf2e:	d003      	beq.n	800bf38 <__swsetup_r+0x7c>
 800bf30:	4621      	mov	r1, r4
 800bf32:	4628      	mov	r0, r5
 800bf34:	f000 f8c4 	bl	800c0c0 <__smakebuf_r>
 800bf38:	89a0      	ldrh	r0, [r4, #12]
 800bf3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf3e:	f010 0301 	ands.w	r3, r0, #1
 800bf42:	d00a      	beq.n	800bf5a <__swsetup_r+0x9e>
 800bf44:	2300      	movs	r3, #0
 800bf46:	60a3      	str	r3, [r4, #8]
 800bf48:	6963      	ldr	r3, [r4, #20]
 800bf4a:	425b      	negs	r3, r3
 800bf4c:	61a3      	str	r3, [r4, #24]
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	b943      	cbnz	r3, 800bf64 <__swsetup_r+0xa8>
 800bf52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf56:	d1c4      	bne.n	800bee2 <__swsetup_r+0x26>
 800bf58:	bd38      	pop	{r3, r4, r5, pc}
 800bf5a:	0781      	lsls	r1, r0, #30
 800bf5c:	bf58      	it	pl
 800bf5e:	6963      	ldrpl	r3, [r4, #20]
 800bf60:	60a3      	str	r3, [r4, #8]
 800bf62:	e7f4      	b.n	800bf4e <__swsetup_r+0x92>
 800bf64:	2000      	movs	r0, #0
 800bf66:	e7f7      	b.n	800bf58 <__swsetup_r+0x9c>
 800bf68:	20000064 	.word	0x20000064

0800bf6c <_sbrk_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4d06      	ldr	r5, [pc, #24]	; (800bf88 <_sbrk_r+0x1c>)
 800bf70:	2300      	movs	r3, #0
 800bf72:	4604      	mov	r4, r0
 800bf74:	4608      	mov	r0, r1
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	f7f6 ff30 	bl	8002ddc <_sbrk>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	d102      	bne.n	800bf86 <_sbrk_r+0x1a>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	b103      	cbz	r3, 800bf86 <_sbrk_r+0x1a>
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	20000a1c 	.word	0x20000a1c

0800bf8c <memcpy>:
 800bf8c:	440a      	add	r2, r1
 800bf8e:	4291      	cmp	r1, r2
 800bf90:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf94:	d100      	bne.n	800bf98 <memcpy+0xc>
 800bf96:	4770      	bx	lr
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfa2:	4291      	cmp	r1, r2
 800bfa4:	d1f9      	bne.n	800bf9a <memcpy+0xe>
 800bfa6:	bd10      	pop	{r4, pc}

0800bfa8 <__assert_func>:
 800bfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfaa:	4614      	mov	r4, r2
 800bfac:	461a      	mov	r2, r3
 800bfae:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <__assert_func+0x2c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	68d8      	ldr	r0, [r3, #12]
 800bfb6:	b14c      	cbz	r4, 800bfcc <__assert_func+0x24>
 800bfb8:	4b07      	ldr	r3, [pc, #28]	; (800bfd8 <__assert_func+0x30>)
 800bfba:	9100      	str	r1, [sp, #0]
 800bfbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfc0:	4906      	ldr	r1, [pc, #24]	; (800bfdc <__assert_func+0x34>)
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	f000 f844 	bl	800c050 <fiprintf>
 800bfc8:	f000 f8d8 	bl	800c17c <abort>
 800bfcc:	4b04      	ldr	r3, [pc, #16]	; (800bfe0 <__assert_func+0x38>)
 800bfce:	461c      	mov	r4, r3
 800bfd0:	e7f3      	b.n	800bfba <__assert_func+0x12>
 800bfd2:	bf00      	nop
 800bfd4:	20000064 	.word	0x20000064
 800bfd8:	0800c50f 	.word	0x0800c50f
 800bfdc:	0800c51c 	.word	0x0800c51c
 800bfe0:	0800c54a 	.word	0x0800c54a

0800bfe4 <_calloc_r>:
 800bfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfe6:	fba1 2402 	umull	r2, r4, r1, r2
 800bfea:	b94c      	cbnz	r4, 800c000 <_calloc_r+0x1c>
 800bfec:	4611      	mov	r1, r2
 800bfee:	9201      	str	r2, [sp, #4]
 800bff0:	f7ff f8f8 	bl	800b1e4 <_malloc_r>
 800bff4:	9a01      	ldr	r2, [sp, #4]
 800bff6:	4605      	mov	r5, r0
 800bff8:	b930      	cbnz	r0, 800c008 <_calloc_r+0x24>
 800bffa:	4628      	mov	r0, r5
 800bffc:	b003      	add	sp, #12
 800bffe:	bd30      	pop	{r4, r5, pc}
 800c000:	220c      	movs	r2, #12
 800c002:	6002      	str	r2, [r0, #0]
 800c004:	2500      	movs	r5, #0
 800c006:	e7f8      	b.n	800bffa <_calloc_r+0x16>
 800c008:	4621      	mov	r1, r4
 800c00a:	f7fe f97a 	bl	800a302 <memset>
 800c00e:	e7f4      	b.n	800bffa <_calloc_r+0x16>

0800c010 <__ascii_mbtowc>:
 800c010:	b082      	sub	sp, #8
 800c012:	b901      	cbnz	r1, 800c016 <__ascii_mbtowc+0x6>
 800c014:	a901      	add	r1, sp, #4
 800c016:	b142      	cbz	r2, 800c02a <__ascii_mbtowc+0x1a>
 800c018:	b14b      	cbz	r3, 800c02e <__ascii_mbtowc+0x1e>
 800c01a:	7813      	ldrb	r3, [r2, #0]
 800c01c:	600b      	str	r3, [r1, #0]
 800c01e:	7812      	ldrb	r2, [r2, #0]
 800c020:	1e10      	subs	r0, r2, #0
 800c022:	bf18      	it	ne
 800c024:	2001      	movne	r0, #1
 800c026:	b002      	add	sp, #8
 800c028:	4770      	bx	lr
 800c02a:	4610      	mov	r0, r2
 800c02c:	e7fb      	b.n	800c026 <__ascii_mbtowc+0x16>
 800c02e:	f06f 0001 	mvn.w	r0, #1
 800c032:	e7f8      	b.n	800c026 <__ascii_mbtowc+0x16>

0800c034 <__ascii_wctomb>:
 800c034:	b149      	cbz	r1, 800c04a <__ascii_wctomb+0x16>
 800c036:	2aff      	cmp	r2, #255	; 0xff
 800c038:	bf85      	ittet	hi
 800c03a:	238a      	movhi	r3, #138	; 0x8a
 800c03c:	6003      	strhi	r3, [r0, #0]
 800c03e:	700a      	strbls	r2, [r1, #0]
 800c040:	f04f 30ff 	movhi.w	r0, #4294967295
 800c044:	bf98      	it	ls
 800c046:	2001      	movls	r0, #1
 800c048:	4770      	bx	lr
 800c04a:	4608      	mov	r0, r1
 800c04c:	4770      	bx	lr
	...

0800c050 <fiprintf>:
 800c050:	b40e      	push	{r1, r2, r3}
 800c052:	b503      	push	{r0, r1, lr}
 800c054:	4601      	mov	r1, r0
 800c056:	ab03      	add	r3, sp, #12
 800c058:	4805      	ldr	r0, [pc, #20]	; (800c070 <fiprintf+0x20>)
 800c05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c05e:	6800      	ldr	r0, [r0, #0]
 800c060:	9301      	str	r3, [sp, #4]
 800c062:	f7ff fcf1 	bl	800ba48 <_vfiprintf_r>
 800c066:	b002      	add	sp, #8
 800c068:	f85d eb04 	ldr.w	lr, [sp], #4
 800c06c:	b003      	add	sp, #12
 800c06e:	4770      	bx	lr
 800c070:	20000064 	.word	0x20000064

0800c074 <__swhatbuf_r>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	460c      	mov	r4, r1
 800c078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07c:	2900      	cmp	r1, #0
 800c07e:	b096      	sub	sp, #88	; 0x58
 800c080:	4615      	mov	r5, r2
 800c082:	461e      	mov	r6, r3
 800c084:	da0d      	bge.n	800c0a2 <__swhatbuf_r+0x2e>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c08c:	f04f 0100 	mov.w	r1, #0
 800c090:	bf0c      	ite	eq
 800c092:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c096:	2340      	movne	r3, #64	; 0x40
 800c098:	2000      	movs	r0, #0
 800c09a:	6031      	str	r1, [r6, #0]
 800c09c:	602b      	str	r3, [r5, #0]
 800c09e:	b016      	add	sp, #88	; 0x58
 800c0a0:	bd70      	pop	{r4, r5, r6, pc}
 800c0a2:	466a      	mov	r2, sp
 800c0a4:	f000 f848 	bl	800c138 <_fstat_r>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	dbec      	blt.n	800c086 <__swhatbuf_r+0x12>
 800c0ac:	9901      	ldr	r1, [sp, #4]
 800c0ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0b6:	4259      	negs	r1, r3
 800c0b8:	4159      	adcs	r1, r3
 800c0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0be:	e7eb      	b.n	800c098 <__swhatbuf_r+0x24>

0800c0c0 <__smakebuf_r>:
 800c0c0:	898b      	ldrh	r3, [r1, #12]
 800c0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0c4:	079d      	lsls	r5, r3, #30
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	d507      	bpl.n	800c0dc <__smakebuf_r+0x1c>
 800c0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	6123      	str	r3, [r4, #16]
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	6163      	str	r3, [r4, #20]
 800c0d8:	b002      	add	sp, #8
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	ab01      	add	r3, sp, #4
 800c0de:	466a      	mov	r2, sp
 800c0e0:	f7ff ffc8 	bl	800c074 <__swhatbuf_r>
 800c0e4:	9900      	ldr	r1, [sp, #0]
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	f7ff f87b 	bl	800b1e4 <_malloc_r>
 800c0ee:	b948      	cbnz	r0, 800c104 <__smakebuf_r+0x44>
 800c0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f4:	059a      	lsls	r2, r3, #22
 800c0f6:	d4ef      	bmi.n	800c0d8 <__smakebuf_r+0x18>
 800c0f8:	f023 0303 	bic.w	r3, r3, #3
 800c0fc:	f043 0302 	orr.w	r3, r3, #2
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	e7e3      	b.n	800c0cc <__smakebuf_r+0xc>
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	6020      	str	r0, [r4, #0]
 800c108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c10c:	81a3      	strh	r3, [r4, #12]
 800c10e:	9b00      	ldr	r3, [sp, #0]
 800c110:	6163      	str	r3, [r4, #20]
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	6120      	str	r0, [r4, #16]
 800c116:	b15b      	cbz	r3, 800c130 <__smakebuf_r+0x70>
 800c118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c11c:	4630      	mov	r0, r6
 800c11e:	f000 f81d 	bl	800c15c <_isatty_r>
 800c122:	b128      	cbz	r0, 800c130 <__smakebuf_r+0x70>
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f023 0303 	bic.w	r3, r3, #3
 800c12a:	f043 0301 	orr.w	r3, r3, #1
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	431d      	orrs	r5, r3
 800c134:	81a5      	strh	r5, [r4, #12]
 800c136:	e7cf      	b.n	800c0d8 <__smakebuf_r+0x18>

0800c138 <_fstat_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	; (800c158 <_fstat_r+0x20>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	4611      	mov	r1, r2
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	f7f6 fe20 	bl	8002d8a <_fstat>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d102      	bne.n	800c154 <_fstat_r+0x1c>
 800c14e:	682b      	ldr	r3, [r5, #0]
 800c150:	b103      	cbz	r3, 800c154 <_fstat_r+0x1c>
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	bd38      	pop	{r3, r4, r5, pc}
 800c156:	bf00      	nop
 800c158:	20000a1c 	.word	0x20000a1c

0800c15c <_isatty_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d06      	ldr	r5, [pc, #24]	; (800c178 <_isatty_r+0x1c>)
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	f7f6 fe1f 	bl	8002daa <_isatty>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_isatty_r+0x1a>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_isatty_r+0x1a>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	20000a1c 	.word	0x20000a1c

0800c17c <abort>:
 800c17c:	b508      	push	{r3, lr}
 800c17e:	2006      	movs	r0, #6
 800c180:	f000 f82c 	bl	800c1dc <raise>
 800c184:	2001      	movs	r0, #1
 800c186:	f7f6 fdb1 	bl	8002cec <_exit>

0800c18a <_raise_r>:
 800c18a:	291f      	cmp	r1, #31
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	d904      	bls.n	800c19e <_raise_r+0x14>
 800c194:	2316      	movs	r3, #22
 800c196:	6003      	str	r3, [r0, #0]
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
 800c19e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c1a0:	b112      	cbz	r2, 800c1a8 <_raise_r+0x1e>
 800c1a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1a6:	b94b      	cbnz	r3, 800c1bc <_raise_r+0x32>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 f831 	bl	800c210 <_getpid_r>
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	4601      	mov	r1, r0
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1b8:	f000 b818 	b.w	800c1ec <_kill_r>
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d00a      	beq.n	800c1d6 <_raise_r+0x4c>
 800c1c0:	1c59      	adds	r1, r3, #1
 800c1c2:	d103      	bne.n	800c1cc <_raise_r+0x42>
 800c1c4:	2316      	movs	r3, #22
 800c1c6:	6003      	str	r3, [r0, #0]
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	e7e7      	b.n	800c19c <_raise_r+0x12>
 800c1cc:	2400      	movs	r4, #0
 800c1ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	4798      	blx	r3
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	e7e0      	b.n	800c19c <_raise_r+0x12>
	...

0800c1dc <raise>:
 800c1dc:	4b02      	ldr	r3, [pc, #8]	; (800c1e8 <raise+0xc>)
 800c1de:	4601      	mov	r1, r0
 800c1e0:	6818      	ldr	r0, [r3, #0]
 800c1e2:	f7ff bfd2 	b.w	800c18a <_raise_r>
 800c1e6:	bf00      	nop
 800c1e8:	20000064 	.word	0x20000064

0800c1ec <_kill_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	; (800c20c <_kill_r+0x20>)
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	602b      	str	r3, [r5, #0]
 800c1fa:	f7f6 fd67 	bl	8002ccc <_kill>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	d102      	bne.n	800c208 <_kill_r+0x1c>
 800c202:	682b      	ldr	r3, [r5, #0]
 800c204:	b103      	cbz	r3, 800c208 <_kill_r+0x1c>
 800c206:	6023      	str	r3, [r4, #0]
 800c208:	bd38      	pop	{r3, r4, r5, pc}
 800c20a:	bf00      	nop
 800c20c:	20000a1c 	.word	0x20000a1c

0800c210 <_getpid_r>:
 800c210:	f7f6 bd54 	b.w	8002cbc <_getpid>

0800c214 <_init>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr

0800c220 <_fini>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr
